void type metadata accessor for AnimatableAttribute<_ScaleEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedSize and conformance RoundedSize;
  if (!lazy protocol witness table cache variable for type RoundedSize and conformance RoundedSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedSize and conformance RoundedSize);
  }
  return result;
}

void type metadata accessor for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>()
{
  if (!lazy cache variable for type metadata for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for DefaultGeometryEffectProvider<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DefaultGeometryEffectProvider);
    lazy protocol witness table accessor for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>();
    unint64_t v0 = type metadata accessor for GeometryEffectDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for GeometryEffectTransform<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>)
  {
    type metadata accessor for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type ResetPositionTransform and conformance ResetPositionTransform;
  if (!lazy protocol witness table cache variable for type ResetPositionTransform and conformance ResetPositionTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetPositionTransform and conformance ResetPositionTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect;
  if (!lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect;
  if (!lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_BlurEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect, (uint64_t)&type metadata for _BlurEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>;
  if (!lazy protocol witness table cache variable for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for DefaultGeometryEffectProvider<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DefaultGeometryEffectProvider);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGeometryEffectProvider<_ScaleEffect> and conformance DefaultGeometryEffectProvider<A>);
  }
  return result;
}

uint64_t type metadata accessor for DefaultGeometryEffectProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GeometryEffectDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GeometryEffectTransform()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for _BrightnessEffect()
{
  return &type metadata for _BrightnessEffect;
}

uint64_t instantiation function for generic protocol witness table for SpacerLayoutComputer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for SafeAreaInsets()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>);
    }
  }
}

uint64_t type metadata completion function for Element()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.typesettingConfiguration : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v2 - 8);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  v7 = (char *)&v9 - v6;
  outlined init with copy of TypesettingLanguage.Storage(a1, (uint64_t)&v9 - v6, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  outlined init with copy of TypesettingLanguage.Storage((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  return outlined destroy of TypesettingLanguage.Storage((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.Key>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.Key>>);
    }
  }
}

uint64_t outlined init with copy of EnvironmentValues.CapitalizationContext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of TypesettingConfiguration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI24TypesettingConfigurationVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.Key>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.Key>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t ScrollPosition.init<A>(id:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t DynamicType = swift_getDynamicType();
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
  uint64_t v16 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(boxed_opaque_existential_1, a1, a5);
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  char v23 = a4 & 1;
  char v24 = 0;
  outlined init with take of ScrollPosition.Storage(&v18, (_OWORD *)a7);
  *(void *)(a7 + 64) = DynamicType;
  *(void *)(a7 + 72) = a6;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a5);
}

_OWORD *outlined init with take of ScrollPosition.Storage(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(_OWORD *)((char *)a2 + 42) = *(long long *)((char *)a1 + 42);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

uint64_t View.textSuffix(_:)(_OWORD *a1, uint64_t a2)
{
  long long v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return View.modifier<A>(_:)(v4, a2, &type metadata for TextSuffixModifier);
}

unint64_t instantiation function for generic protocol witness table for CoordinateSpaceIDElement(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SizedSpaceIDElement(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SizedSpaceIDElement and conformance SizedSpaceIDElement();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ViewTransform.ScrollGeometryItem(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  return 0xD00000000000001DLL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute()
{
  return 0xD000000000000011;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  return 0xD000000000000010;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute()
{
  return 0xD00000000000001BLL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  return 0xD00000000000001ALL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  return 0xD00000000000001ALL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.CustomContainerAttribute()
{
  return 0xD000000000000018;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  return 0xD000000000000017;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  return 0xD000000000000016;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute()
{
  return 0xD000000000000015;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute()
{
  return 0xD000000000000015;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnaryPositionAwareLayoutComputer<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnaryPositionAwareChildGeometry<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TextChildQuery<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t key path getter for EnvironmentValues.writingMode : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.writingMode.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t View.dynamicTypeSize(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  char v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

ValueMetadata *type metadata accessor for _SaturationEffect()
{
  return &type metadata for _SaturationEffect;
}

uint64_t instantiation function for generic protocol witness table for AnimatableArray<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for Stack3()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v3 = &v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for Circle._Inset()
{
  return &type metadata for Circle._Inset;
}

uint64_t static LeafDisplayList.flags.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 32))()) {
    return 8;
  }
  type metadata accessor for AGAttributeTypeFlags(0);
  lazy protocol witness table accessor for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  OptionSet<>.init()();
  return v3;
}

BOOL specialized static Text.Suffix.Storage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  if (!(v5 >> 62))
  {
    if (v9 >> 62) {
      goto LABEL_43;
    }
    if ((v5 & 1) == 0)
    {
      if ((v9 & 1) == 0)
      {
        if (v2 != v7 || v3 != v6)
        {
LABEL_50:
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of Text.Suffix.Storage(v7, v6, v9);
          outlined copy of Text.Suffix.Storage(v2, v3, v5);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v6, 0);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 0);
          if (v20)
          {
LABEL_51:
            char v21 = specialized static Array<A>.== infix(_:_:)(v4, v8);
            outlined consume of Text.Storage(v7, v6, v9 & 1);
            swift_bridgeObjectRelease();
            outlined consume of Text.Storage(v2, v3, v5 & 1);
            swift_bridgeObjectRelease();
            outlined consume of Text.Suffix.Storage(v2, v3, v5);
            outlined consume of Text.Suffix.Storage(v7, v6, v9);
            return (v21 & 1) != 0;
          }
          goto LABEL_53;
        }
LABEL_49:
        outlined copy of Text.Suffix.Storage(*a1, v3, v9);
        outlined copy of Text.Suffix.Storage(v2, v3, v5);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
        goto LABEL_51;
      }
LABEL_43:
      outlined copy of Text.Suffix.Storage(*a2, a2[1], v9);
      outlined copy of Text.Suffix.Storage(v2, v3, v5);
LABEL_44:
      outlined consume of Text.Suffix.Storage(v2, v3, v5);
      outlined consume of Text.Suffix.Storage(v7, v6, v9);
      return 0;
    }
LABEL_11:
    if (v9)
    {
      v10 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 96);
      outlined copy of Text.Suffix.Storage(*a2, a2[1], v9);
      outlined copy of Text.Suffix.Storage(v2, v3, v5);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v7, v6, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v2, v3, 1);
      if (v10(v7)) {
        goto LABEL_51;
      }
LABEL_53:
      outlined consume of Text.Storage(v7, v6, v9 & 1);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v2, v3, v5 & 1);
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v5 >> 62 == 1)
  {
    if (v9 >> 62 != 1) {
      goto LABEL_43;
    }
    if ((v5 & 1) == 0)
    {
      if ((v9 & 1) == 0)
      {
        if (v2 != v7 || v3 != v6) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      goto LABEL_43;
    }
    goto LABEL_11;
  }
  if (v5 == 0x8000000000000000 && (v4 | v3 | v2) == 0)
  {
    if (v9 >> 62 != 2 || v9 != 0x8000000000000000 || (v6 | v7 | v8) != 0) {
      goto LABEL_43;
    }
    outlined consume of Text.Suffix.Storage(0, 0, 0x8000000000000000);
    outlined consume of Text.Suffix.Storage(0, 0, 0x8000000000000000);
    return 1;
  }
  else
  {
    if (v9 >> 62 != 2 || v7 != 1 || v6 != 0 || v9 != 0x8000000000000000 || v8 != 0) {
      goto LABEL_43;
    }
    uint64_t v16 = 1;
    outlined consume of Text.Suffix.Storage(1, 0, 0x8000000000000000);
    outlined consume of Text.Suffix.Storage(1, 0, 0x8000000000000000);
  }
  return v16;
}

uint64_t outlined consume of Text.Suffix.Storage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t one-time initialization function for conditionalTypeDescriptor()
{
  type metadata accessor for _ConditionalContent<(), ()>();
  uint64_t result = MEMORY[0x24C525770]();
  if (result) {
    conditionalTypeDescriptor = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<(), ()>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<(), ()>)
  {
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<(), ()>);
    }
  }
}

uint64_t instantiation function for generic protocol witness table for _ClipEffect<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  return swift_release();
}

{
  _OWORD v5[9];
  _OWORD v6[9];
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  specialized GestureDebug.Value.value.getter(a3, a4, (uint64_t)v5);
  AGGraphSetOutputValue();
  v6[6] = v5[6];
  v6[7] = v5[7];
  v6[8] = v5[8];
  v6[2] = v5[2];
  v6[3] = v5[3];
  v6[4] = v5[4];
  v6[5] = v5[5];
  v6[0] = v5[0];
  v6[1] = v5[1];
  return outlined release of GestureDebug.Data((uint64_t)v6);
}

unint64_t instantiation function for generic protocol witness table for _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _PaddingLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _HStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for CGFloat(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t (*GraphHost.Data.updateSeed.modify(_DWORD *a1))(_DWORD *a1)
{
  a1[2] = *(_DWORD *)(v1 + 48);
  *a1 = *(_DWORD *)AGGraphGetValue();
  return GraphHost.Data.updateSeed.modify;
}

uint64_t type metadata accessor for HierarchicalShapeStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t one-time initialization function for _typeCache()
{
  type metadata accessor for AtomicBuffer<AlignmentKey.TypeCache>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  *(void *)(result + 32) = v1;
  static AlignmentKey._typeCache = (_UNKNOWN *)result;
  return result;
}

void type metadata accessor for AtomicBuffer<AlignmentKey.TypeCache>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<AlignmentKey.TypeCache>)
  {
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<AlignmentKey.TypeCache>);
    }
  }
}

uint64_t type metadata completion function for ValueCycleDetector()
{
  v2[4] = MEMORY[0x263F8CF68] + 64;
  v2[5] = MEMORY[0x263F8CF68] + 64;
  v2[6] = &unk_2461C7DA8;
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[7] = v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id ObjcColor.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI9ObjcColor_color] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

ValueMetadata *type metadata accessor for ScrollPrefetchState()
{
  return &type metadata for ScrollPrefetchState;
}

uint64_t type metadata completion function for PreferenceBinder()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for HashableWeakBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnchorTransform<A, B>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

_UNKNOWN **associated type witness table accessor for Transition.Body : View in IdentityTransition()
{
  return &protocol witness table for PlaceholderContentView<A>;
}

unint64_t instantiation function for generic protocol witness table for GeometryReaderLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GeometryReaderLayout and conformance GeometryReaderLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

id ImageLayer.update(image:size:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  double v5 = a3;
  double v6 = a2;
  uint64_t v7 = *(float **)a1;
  unsigned int v8 = *(unsigned __int8 *)(a1 + 8);
  double v9 = *(double *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  char v54 = *(unsigned char *)(a1 + 40);
  uint64_t v55 = *(void *)(a1 + 52);
  uint64_t v56 = *(void *)(a1 + 44);
  int v12 = *(unsigned __int8 *)(a1 + 60);
  uint64_t v52 = *(void *)(a1 + 72);
  uint64_t v53 = *(void *)(a1 + 64);
  uint64_t v50 = *(void *)(a1 + 88);
  uint64_t v51 = *(void *)(a1 + 80);
  char v49 = *(unsigned char *)(a1 + 96);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 97);
  int v14 = *(unsigned __int8 *)(a1 + 98);
  int v15 = *(unsigned __int8 *)(a1 + 99);
  if (v8 <= 3)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t v16 = *(float **)a1;
      char v17 = 0;
      goto LABEL_9;
    }
    if (v8 == 1)
    {
      uint64_t v16 = *(float **)a1;
      char v17 = 1;
LABEL_9:
      outlined copy of GraphicsImage.Contents?(v16, v17);
      CGImageRef value = (CGImageRef)v7;
      goto LABEL_14;
    }
LABEL_13:
    v58 = *(float **)a1;
    char v59 = v8;
    double v60 = v9;
    uint64_t v61 = v10;
    uint64_t v62 = v11;
    char v63 = v54;
    uint64_t v64 = v56;
    uint64_t v65 = v55;
    char v66 = v12;
    uint64_t v67 = v53;
    uint64_t v68 = v52;
    uint64_t v69 = v51;
    uint64_t v70 = v50;
    char v71 = v49;
    char v72 = v13;
    char v73 = v14;
    char v74 = v15;
    CGImageRef value = GraphicsImage.render(at:prefersMask:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v12 != 1).value;
    goto LABEL_14;
  }
  if (v8 != 4)
  {
    if (v8 == 255)
    {
      CGImageRef value = 0;
LABEL_14:
      objc_msgSend(v3, sel_setContents_, value);
      v26 = 0;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  double v48 = *(double *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  float v22 = v7[4];
  float v23 = v7[5];
  float v24 = v7[6];
  float v25 = v7[7];
  objc_msgSend(v3, sel_setContents_, 0);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v26 = (void *)specialized ObjectCache.subscript.getter(v22, v23, v24, v25);
  CGImageRef value = 0;
  uint64_t v10 = v21;
  double v5 = a3;
  double v6 = a2;
  double v9 = v48;
LABEL_15:
  objc_msgSend(v4, sel_setBackgroundColor_, v26);

  id result = objc_msgSend(v4, sel_setAllowsEdgeAntialiasing_, v13);
  if (!value) {
    return result;
  }
  objc_msgSend(v4, sel_setContentsScale_, v9);
  _CALayerSetSplatsContentsAlpha(v4, (const char *)(v12 ^ 1u));
  if (v12)
  {
    objc_msgSend(v4, sel_setContentsMultiplyColor_, 0);
  }
  else
  {
    double v48 = v9;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v28 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v56, *((float *)&v56 + 1), *(float *)&v55, *((float *)&v55 + 1));
    objc_msgSend(v4, sel_setContentsMultiplyColor_, v28);
  }
  v58 = v7;
  char v59 = v8;
  double v60 = v9;
  uint64_t v61 = v10;
  uint64_t v62 = v11;
  char v63 = v54;
  uint64_t v64 = v56;
  uint64_t v65 = v55;
  char v66 = v12;
  uint64_t v67 = v53;
  uint64_t v68 = v52;
  uint64_t v69 = v51;
  uint64_t v70 = v50;
  char v71 = v49;
  char v72 = v13;
  char v73 = v14;
  char v74 = v15;
  GraphicsImage.layerStretchInPixels(size:)((uint64_t)v57, v6, v5);
  objc_msgSend(v4, sel_setContentsCenter_, v57[0], v57[1], v57[2], v57[3]);
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = (void *)MEMORY[0x24C522820](v29);
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setContentsScaling_, v30);

  if ((v14 - 1) < 2)
  {
    v31 = (uint64_t *)MEMORY[0x263F15CC8];
LABEL_25:
    uint64_t v32 = *v31;
    objc_msgSend(v4, sel_setMinificationFilter_, *v31, *(void *)&v48);
    goto LABEL_27;
  }
  if (!v14)
  {
    v31 = (uint64_t *)MEMORY[0x263F15D28];
    goto LABEL_25;
  }
  objc_msgSend(v4, sel_setMinificationFilter_, *MEMORY[0x263F15AE8]);
  uint64_t v32 = *MEMORY[0x263F15CC8];
LABEL_27:
  objc_msgSend(v4, sel_setMagnificationFilter_, v32, *(void *)&v48);
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  double v33 = *(double *)&static Image.Headroom.standard;
  double v34 = *(double *)&static Image.Headroom.standard;
  if (v15 && v15 != 3)
  {
    v58 = v7;
    char v59 = v8;
    double v60 = v9;
    uint64_t v61 = v10;
    uint64_t v62 = v11;
    char v63 = v54;
    uint64_t v64 = v56;
    uint64_t v65 = v55;
    char v66 = v12;
    uint64_t v67 = v53;
    uint64_t v68 = v52;
    uint64_t v69 = v51;
    uint64_t v70 = v50;
    char v71 = v49;
    char v72 = v13;
    char v73 = v14;
    char v74 = v15;
    GraphicsImage.headroom.getter(v57);
    double v35 = v57[0];
    if (v15 == 2)
    {
      if (one-time initialization token for high != -1) {
        swift_once();
      }
      v36 = &static Image.Headroom.high;
    }
    else
    {
      if (one-time initialization token for constrainedHigh != -1) {
        swift_once();
      }
      v36 = &static Image.Headroom.constrainedHigh;
    }
    if (*(double *)v36 >= v35) {
      double v34 = v35;
    }
    else {
      double v34 = *(double *)v36;
    }
    double v33 = *(double *)&static Image.Headroom.standard;
  }
  unsigned int v37 = objc_msgSend(v4, sel_wantsExtendedDynamicRangeContent);
  double v38 = 1.0;
  if (v37)
  {
    objc_msgSend(v4, sel_contentsMaximumDesiredEDR);
    double v38 = v39;
  }
  if (v33 < v34) {
    objc_msgSend(v4, sel_setWantsExtendedDynamicRangeContent_, 1);
  }
  objc_msgSend(v4, sel_setContentsMaximumDesiredEDR_, v34);
  char v40 = v37 ^ 1;
  if (v33 < v34) {
    char v40 = 0;
  }
  if ((v40 & 1) != 0 || v34 - v38 == 0.0)
  {
    return (id)swift_unknownObjectRelease();
  }
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v41 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      return (id)swift_unknownObjectRelease();
    }
    goto LABEL_61;
  }
  if (static Semantics.forced >= v41)
  {
LABEL_61:
    v42 = (void *)MEMORY[0x24C522820](0xD000000000000019, 0x80000002462266D0);
    id v43 = objc_msgSend(self, sel_animationWithKeyPath_, v42);

    id v44 = v43;
    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v44, sel_setFromValue_, isa);

    id v46 = v44;
    Class v47 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v46, sel_setToValue_, v47);

    objc_msgSend(v46, sel_setAdditive_, 1);
    objc_msgSend(v46, sel_setDuration_, 3.0);
    objc_msgSend(v46, sel_setMass_, 2.0);
    objc_msgSend(v46, sel_setStiffness_, 19.7392);
    objc_msgSend(v46, sel_setDamping_, 12.5664);
    objc_msgSend(v46, sel_setFillMode_, *MEMORY[0x263F15AA0]);
    objc_msgSend(v4, sel_addAnimation_forKey_, v46, 0);
  }
  return (id)swift_unknownObjectRelease();
}

uint64_t _CALayerSetSplatsContentsAlpha(void *a1, const char *a2)
{
  uint64_t v2 = (void *)MEMORY[0x263F15E48];
  if (!a2) {
    uint64_t v2 = (void *)MEMORY[0x263F15E50];
  }
  return [a1 setContentsSwizzle:*v2];
}

uint64_t GraphicsImage.layerStretchInPixels(size:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  char v6 = *((unsigned char *)v3 + 8);
  double v7 = *((double *)v3 + 2);
  double v8 = *((double *)v3 + 3);
  double v9 = *((double *)v3 + 4);
  uint64_t v10 = *((unsigned __int8 *)v3 + 40);
  uint64_t v11 = *(uint64_t *)((char *)v3 + 52);
  char v12 = *((unsigned char *)v3 + 60);
  double v14 = *((double *)v3 + 8);
  double v13 = *((double *)v3 + 9);
  double v15 = *((double *)v3 + 10);
  double v16 = *((double *)v3 + 11);
  int v17 = *((unsigned __int8 *)v3 + 96);
  char v18 = *((unsigned char *)v3 + 97);
  char v19 = *((unsigned char *)v3 + 98);
  char v20 = *((unsigned char *)v3 + 99);
  uint64_t v61 = *(uint64_t *)((char *)v3 + 44);
  uint64_t v62 = *v3;
  uint64_t v64 = *v3;
  char v65 = v6;
  double v66 = v7;
  double v67 = v8;
  double v68 = v9;
  char v69 = v10;
  uint64_t v70 = v61;
  uint64_t v71 = v11;
  char v72 = v12;
  double v73 = v14;
  double v74 = v13;
  double v21 = v13;
  double v60 = v15;
  double v75 = v15;
  double v76 = v16;
  char v77 = v17;
  char v58 = v18;
  char v59 = v19;
  char v78 = v18;
  char v79 = v19;
  char v57 = v20;
  char v80 = v20;
  double v22 = a3;
  switch(GraphicsImage.bitmapOrientation.getter())
  {
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      double v22 = a2;
      a2 = a3;
      break;
    default:
      break;
  }
  uint64_t v64 = v62;
  char v65 = v6;
  double v66 = v7;
  double v67 = v8;
  double v68 = v9;
  char v69 = v10;
  uint64_t v70 = v61;
  uint64_t v71 = v11;
  char v72 = v12;
  double v73 = v14;
  double v74 = v21;
  double v75 = v60;
  double v76 = v16;
  char v77 = v17;
  char v78 = v58;
  char v79 = v59;
  char v80 = v57;
  uint64_t result = GraphicsImage.slicesAndTiles(at:)(*(uint64_t *)&a2, v22, 0, (uint64_t)v63);
  double v24 = 1.0;
  if (v63[32] != 2)
  {
    uint64_t v64 = v62;
    char v65 = v6;
    double v66 = v7;
    double v67 = v8;
    double v68 = v9;
    char v69 = v10;
    uint64_t v70 = v61;
    uint64_t v71 = v11;
    char v72 = v12;
    double v73 = v14;
    double v74 = v21;
    double v75 = v60;
    double v76 = v16;
    char v77 = v17;
    char v78 = v58;
    char v79 = v59;
    char v80 = v57;
    BOOL v29 = GraphicsImage.isTiledWhenStretchedToSize(_:)(a2, v22);
    double v30 = 0.0;
    double v31 = 0.0;
    double v32 = 0.0;
    double v33 = 0.0;
    if (v17 != 2)
    {
      double v30 = v14;
      double v31 = v21;
      double v32 = v60;
      double v33 = v16;
    }
    BOOL v55 = v29;
    CGFloat v34 = v9;
    CGFloat v35 = v8;
    switch(v10)
    {
      case 4:
      case 5:
      case 6:
      case 7:
        CGFloat v34 = v8;
        CGFloat v35 = v9;
        break;
      default:
        break;
    }
    double v36 = CGRect.inset(by:)(v7 * v30, v7 * v31, v7 * v32, v7 * v33, 0.0, 0.0, v35, v34);
    double v37 = v9;
    CGFloat v39 = v38;
    CGFloat v41 = v40;
    CGFloat v43 = v42;
    uint64_t v64 = v62;
    char v65 = v6;
    double v66 = v7;
    double v67 = v8;
    double v44 = v37;
    double v68 = v37;
    char v69 = v10;
    uint64_t v70 = v61;
    uint64_t v71 = v11;
    char v72 = v12;
    double v73 = v14;
    double v74 = v21;
    double v75 = v60;
    double v76 = v16;
    char v77 = v17;
    char v78 = v58;
    char v79 = v59;
    char v80 = v57;
    char v45 = GraphicsImage.bitmapOrientation.getter();
    v81.origin.double x = CGRect.unapply(_:in:)(v45, v35, v34, v36, v39, v41, v43);
    double x = v81.origin.x;
    CGFloat y = v81.origin.y;
    CGFloat width = v81.size.width;
    CGFloat height = v81.size.height;
    uint64_t result = CGRectIsNull(v81);
    double v50 = 0.0;
    double v51 = 0.0;
    double v27 = 0.0;
    double v26 = 0.0;
    BOOL v25 = v55;
    if ((result & 1) == 0 && (double v50 = height, v51 = width, v27 = y, v26 = x, x != 0.0) || (v28 = 1.0, v51 != v8))
    {
      if (v55)
      {
        double v26 = v26 / v8;
      }
      else
      {
        double v52 = v51 + -1.0;
        BOOL v53 = v51 + -1.0 < 0.0;
        double v51 = 0.0;
        if (!v53) {
          double v51 = v52;
        }
        double v26 = (v26 + 0.5) / v8;
        if (v51 <= 1.0)
        {
          double v26 = v26 + -0.01 / v8;
          double v28 = 0.02 / v8;
          if (v27 == 0.0 && v50 == v44)
          {
            BOOL v25 = 0;
            double v24 = 1.0;
            goto LABEL_31;
          }
          goto LABEL_26;
        }
      }
      double v28 = v51 / v8;
    }
    if (v27 == 0.0 && v50 == v44)
    {
      double v24 = 1.0;
      goto LABEL_31;
    }
    if (v55)
    {
      double v27 = v27 / v44;
LABEL_29:
      double v24 = v50 / v44;
      goto LABEL_31;
    }
LABEL_26:
    double v54 = v50 + -1.0;
    BOOL v53 = v50 + -1.0 < 0.0;
    double v50 = 0.0;
    if (!v53) {
      double v50 = v54;
    }
    double v27 = (v27 + 0.5) / v44;
    if (v50 <= 1.0)
    {
      BOOL v25 = 0;
      double v27 = v27 + -0.01 / v44;
      double v24 = 0.02 / v44;
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  BOOL v25 = 0;
  double v26 = 0.0;
  double v27 = 0.0;
  double v28 = 1.0;
LABEL_31:
  *(double *)a1 = v26;
  *(double *)(a1 + 8) = v27;
  *(double *)(a1 + 16) = v28;
  *(double *)(a1 + 24) = v24;
  *(unsigned char *)(a1 + 32) = v25;
  return result;
}

uint64_t GraphicsImage.slicesAndTiles(at:)@<X0>(uint64_t result@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  double v5 = *(double *)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(v4 + 72);
  uint64_t v8 = *(void *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 88);
  int v10 = *(unsigned __int8 *)(v4 + 96);
  double v11 = 0.0;
  double v12 = 0.0;
  if (v5 == 0.0)
  {
    if (a3) {
      goto LABEL_14;
    }
  }
  else
  {
    double v13 = *(double *)(v4 + 24);
    double v14 = *(double *)(v4 + 32);
    switch(*(unsigned char *)(v4 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v14 = *(double *)(v4 + 24);
        double v13 = *(double *)(v4 + 32);
        break;
      default:
        break;
    }
    double v15 = 1.0 / v5;
    double v11 = v15 * v13;
    double v12 = v15 * v14;
    if (a3) {
      goto LABEL_14;
    }
  }
  if (v11 == *(double *)&result)
  {
    if (v12 == a2 || v10 == 2) {
      goto LABEL_30;
    }
    goto LABEL_15;
  }
LABEL_14:
  if (v10 == 2)
  {
LABEL_30:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(unsigned char *)(a4 + 32) = 2;
    return result;
  }
LABEL_15:
  int v17 = v10 & 1;
  uint64_t result = v9 & 0x7FFFFFFFFFFFFFFFLL;
  BOOL v21 = (v6 & 0x7FFFFFFFFFFFFFFFLL) != 0
     || (v7 & 0x7FFFFFFFFFFFFFFFLL) != 0
     || (v8 & 0x7FFFFFFFFFFFFFFFLL) != 0
     || result != 0
     || v17 == 0;
  if (!v21 || *(unsigned char *)(v4 + 8) == 4) {
    goto LABEL_30;
  }
  *(void *)a4 = v6;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v9;
  *(unsigned char *)(a4 + 32) = v17;
  return result;
}

void PropertyList.forEach<A>(keyType:_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int hashValue, uint64_t a6)
{
  if (a4)
  {
    v10.CGImageRef value = BloomFilter.init(hashValue:)(hashValue).value;
    MEMORY[0x270FA5388](v10.value);
    v11[2] = hashValue;
    v11[3] = a6;
    v11[4] = a2;
    v11[5] = a3;
    PropertyList.Element.forEach(filter:_:)(&v12, (void (*)(void *, BOOL *))partial apply for closure #1 in PropertyList.forEach<A>(keyType:_:), (uint64_t)v11);
  }
}

uint64_t PropertyList.Element.forEach(filter:_:)(uint64_t *a1, void (*a2)(void *, BOOL *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *a1;
  BOOL v11 = 0;
  while (1)
  {
    while ((v7 & ~v4[7]) != 0)
    {
      uint64_t v4 = (void *)v4[5];
      if (!v4) {
        return 1;
      }
    }
    if (v4[3])
    {
      uint64_t v10 = v7;
      char v8 = PropertyList.Element.forEach(filter:_:)(&v10, a2, a3);
      BOOL v11 = (v8 & 1) == 0;
      if ((v8 & 1) == 0) {
        break;
      }
    }
    a2(v4, &v11);
    if (v11) {
      break;
    }
    uint64_t v4 = (void *)v4[4];
    if (!v4) {
      return 1;
    }
  }
  return 0;
}

void partial apply for closure #1 in PropertyList.forEach<A>(keyType:_:)(uint64_t a1, uint64_t a2)
{
  closure #1 in PropertyList.forEach<A>(keyType:_:)(a1, a2, *(void (**)(char *, uint64_t))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 16));
}

void closure #1 in PropertyList.forEach<A>(keyType:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v13 - v11;
  if (*(void *)(a1 + 16) == a5)
  {
    closure #2 in closure #1 in PropertyList.subscript.getter(a1, (uint64_t)v12);
    a3(v12, a2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
}

uint64_t type metadata completion function for ViewListTransition()
{
  uint64_t result = type metadata accessor for TransitionHelper();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *static Semantics.v3_2.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v3_2, &static Semantics.v3_2, a1);
}

uint64_t type metadata accessor for _AnyAnimatableDataVTable()
{
  return self;
}

uint64_t dispatch thunk of ResponderNode.visit(applying:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t instantiation function for generic protocol witness table for Image.ImageViewChild<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _GraphInputs.scrollTargetRole.setter(int a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.ScrollTargetRoleKey);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v7);
  if (!result || *(_DWORD *)(result + 72) != a2)
  {
    uint64_t v6 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollTargetRoleKey>, (uint64_t)&type metadata for _GraphInputs.ScrollTargetRoleKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollTargetRoleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_DWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ScrollTargetRoleKey, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.ScrollableKey);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v7);
  if (!result || *(_DWORD *)(result + 72) != a2)
  {
    uint64_t v6 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollableKey>, (uint64_t)&type metadata for _GraphInputs.ScrollableKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollableKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_DWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ScrollableKey, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9) || (uint64_t result = AGCompareValues(), !result))
  {
    char v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>();
    *(_DWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DelayedPreferenceChild<A, B>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicContainerInfo<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

void *EdgeInsets.xFlipIfRightToLeft(layoutDirection:)(void *result)
{
  double v2 = *(double *)(v1 + 8);
  double v3 = *(double *)(v1 + 24);
  if (v2 != v3)
  {
    uint64_t result = ((void *(*)(uint64_t *__return_ptr))result)(&v4);
    if (v4 == 1)
    {
      *(double *)(v1 + 8) = v3;
      *(double *)(v1 + 24) = v2;
    }
  }
  return result;
}

uint64_t _ViewInputs.scrollable.setter(int a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

uint64_t type metadata completion function for StateOrBinding()
{
  uint64_t result = type metadata accessor for State();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Binding();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.TextStyleProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _GraphInputs.scrollTargetRemovePreference.setter(char a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

uint64_t one-time initialization function for horizontal()
{
  uint64_t result = AGMakeUniqueID();
  static ScrollCoordinateSpace.horizontal = result;
  return result;
}

double protocol witness for CoordinateSpaceProtocol.coordinateSpace.getter in conformance LocalCoordinateSpace@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 2;
  return result;
}

__n128 ResolvedGradient.Stop.init(color:location:interpolation:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, double a7@<D4>)
{
  unsigned __int8 v7 = a1[1].n128_u8[0];
  *(float *)a2 = a3;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = a5;
  *(float *)(a2 + 12) = a6;
  *(double *)(a2 + 16) = a7;
  __n128 result = *a1;
  *(__n128 *)(a2 + 24) = *a1;
  *(unsigned char *)(a2 + 40) = v7;
  return result;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  return 0x2E49557466697753;
}

uint64_t instantiation function for generic protocol witness table for ConstantLocation<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static VariableBlurStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = 0;
  if (*(double *)a1 == *(double *)a2
    && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) == 0)
  {
    int v3 = *(_DWORD *)(a2 + 112);
    int v4 = *(_DWORD *)(a1 + 112);
    long long v5 = *(_OWORD *)(a1 + 32);
    v14[0] = *(_OWORD *)(a1 + 16);
    v14[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 64);
    v14[2] = *(_OWORD *)(a1 + 48);
    v14[3] = v6;
    long long v7 = *(_OWORD *)(a1 + 96);
    v14[4] = *(_OWORD *)(a1 + 80);
    v14[5] = v7;
    int v15 = v4;
    long long v8 = *(_OWORD *)(a2 + 32);
    v12[0] = *(_OWORD *)(a2 + 16);
    v12[1] = v8;
    long long v9 = *(_OWORD *)(a2 + 64);
    v12[2] = *(_OWORD *)(a2 + 48);
    v12[3] = v9;
    long long v10 = *(_OWORD *)(a2 + 96);
    v12[4] = *(_OWORD *)(a2 + 80);
    v12[5] = v10;
    int v13 = v3;
    char v2 = specialized static VariableBlurStyle.Mask.== infix(_:_:)((uint64_t)v14, (uint64_t)v12);
  }
  return v2 & 1;
}

uint64_t specialized StaticBody.updateValue()()
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v46 = (char *)&v42 - v7;
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)&v42 - v9;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v47 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v42 - v14;
  uint64_t v16 = *((void *)v0 + 1);
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = CurrentAttribute;
    double v42 = v10;
    uint64_t v18 = one-time initialization token for lastestAccessLists;
    swift_retain();
    if (v18 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  double v44 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v15, 1, 1, v2);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v43 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t v20 = *v0;
  double v48 = v15;
  char v21 = *((unsigned char *)v0 + 16);
  uint64_t Value = AGGraphGetValue();
  double v23 = *(double *)Value;
  int v24 = *(unsigned __int8 *)(Value + 16);
  swift_retain();
  uint64_t v25 = swift_retain();
  int v26 = v24;
  uint64_t v27 = (uint64_t)v48;
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v25, v26, 1, v23, v20, v16, v21);
  uint64_t v45 = v16;
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v43;
  uint64_t v28 = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v27, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v28, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    BOOL v29 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    double v30 = v42;
    v29(v42, v28, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v46, v30, v2);
    swift_beginAccess();
    double v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    unint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      double v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v34], (uint64_t)v46, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v30, v2);
    uint64_t v27 = (uint64_t)v48;
  }
  outlined destroy of ObservationTracking._AccessList?(v27);
  uint64_t v35 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    double v38 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v37 = v3 + 16;
    double v36 = v38;
    CGFloat v39 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64));
    uint64_t v40 = *(void *)(v37 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v36(v5, v39, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v1);
      (*(void (**)(char *, uint64_t))(v37 - 8))(v5, v2);
      v39 += v40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v44;
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t Value;
  void **p_cache;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  long long v39;
  long long v40;
  uint64_t v41;

  CGFloat v41 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v36 = (char *)&v34 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v37 = (char *)&v34 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v35 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v14, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v17 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v14;
  uint64_t Value = AGGraphGetValue();
  double v38 = *(void *)Value;
  CGFloat v39 = *(_OWORD *)(Value + 8);
  uint64_t v40 = *(_OWORD *)(Value + 24);
  swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)((long long *)&v38, 1);
  swift_bridgeObjectRelease();
  *(void *)(StatusReg + 848) = v17;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v14, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v11);
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    char v21 = v37;
    v20(v37, v11, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v36, v21, v1);
    swift_beginAccess();
    double v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((void *)v22 + 2) = v25 + 1;
    v20(&v22[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v25], v36, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v37, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v14);
  int v26 = p_cache[338];
  uint64_t v27 = v26[2];
  if (v27)
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    BOOL v29 = v2 + 16;
    uint64_t v28 = v30;
    double v31 = (char *)v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    double v32 = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v28(v4, v31, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v29 - 8))(v4, v1);
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v35;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t Value;
  void **p_cache;
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;

  CGFloat v39 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v34 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v34 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = AGGraphGetValue();
  specialized ViewBodyAccessor.updateBody(of:changed:)(*(unsigned __int8 *)(Value + 16), 1, *(double *)Value, *(double *)(Value + 8));
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    char v21 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v21, v1);
    swift_beginAccess();
    double v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((void *)v22 + 2) = v25 + 1;
    v35(&v22[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v25], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  int v26 = p_cache[338];
  uint64_t v27 = v26[2];
  if (v27)
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    BOOL v29 = v2 + 16;
    uint64_t v28 = v30;
    double v31 = (char *)v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    double v32 = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v28(v4, v31, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v29 - 8))(v4, v1);
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v19;
  unint64_t v20;
  char v21;
  double *Value;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;
  uint64_t v46;

  id v46 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v44 = (char *)&v41 - v7;
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)&v41 - v9;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = CurrentAttribute;
    CGFloat v41 = v10;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v43 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  double v42 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v16;
  char v19 = *v0;
  uint64_t v45 = v16;
  uint64_t v20 = *((void *)v0 + 1);
  char v21 = *((unsigned char *)v0 + 16);
  uint64_t Value = (double *)AGGraphGetValue();
  double v23 = Value[1];
  int v24 = Value[2];
  uint64_t v25 = Value[3];
  swift_retain();
  int v26 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v26, 1, v23, v24, v25, v19, v20, v21);
  uint64_t v27 = (uint64_t)v45;
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v42;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v27, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v13, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v13);
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    BOOL v29 = v41;
    v28(v41, v13, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v44, v29, v2);
    swift_beginAccess();
    double v30 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    unint64_t v33 = *((void *)v30 + 2);
    double v32 = *((void *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      double v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    *((void *)v30 + 2) = v33 + 1;
    v28(&v30[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v33], v44, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v29, v2);
    uint64_t v27 = (uint64_t)v45;
  }
  outlined destroy of ObservationTracking._AccessList?(v27);
  unint64_t v34 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v34)
  {
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    double v36 = v3 + 16;
    uint64_t v35 = v37;
    double v38 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64));
    CGFloat v39 = *(void *)(v36 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v35(v5, v38, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v1);
      (*(void (**)(char *, uint64_t))(v36 - 8))(v5, v2);
      v38 += v39;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v43;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  double *Value;
  void **p_cache;
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;

  CGFloat v39 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v34 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v34 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = (double *)AGGraphGetValue();
  specialized ViewBodyAccessor.updateBody(of:changed:)(1, *Value, Value[1], Value[2], Value[3]);
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    char v21 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v21, v1);
    swift_beginAccess();
    double v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((void *)v22 + 2) = v25 + 1;
    v35(&v22[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v25], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  int v26 = p_cache[338];
  uint64_t v27 = v26[2];
  if (v27)
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    BOOL v29 = v2 + 16;
    uint64_t v28 = v30;
    double v31 = (char *)v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    double v32 = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v28(v4, v31, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v29 - 8))(v4, v1);
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t v19;
  void **p_cache;
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;

  CGFloat v39 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v34 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v34 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  AGGraphGetValue();
  char v19 = swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v19, 1);
  swift_bridgeObjectRelease();
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    char v21 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v21, v1);
    swift_beginAccess();
    double v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((void *)v22 + 2) = v25 + 1;
    v35(&v22[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v25], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  int v26 = p_cache[338];
  uint64_t v27 = v26[2];
  if (v27)
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    BOOL v29 = v2 + 16;
    uint64_t v28 = v30;
    double v31 = (char *)v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    double v32 = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v28(v4, v31, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v29 - 8))(v4, v1);
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  double v19;
  uint64_t v20;
  void **p_cache;
  char *v22;
  char *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void *v38;
  char *v39;
  uint64_t v40;

  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  CGFloat v39 = (char *)&v35 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v35 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    uint64_t v37 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  double v38 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  char v19 = *(double *)AGGraphGetValue();
  uint64_t v20 = swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v20, 1, v19);
  swift_release();
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    double v22 = v37;
    double v36 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v36(v37, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v39, v22, v1);
    swift_beginAccess();
    double v23 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, (unint64_t)v23);
      static ObservationRegistrar.lastestAccessLists = v23;
    }
    int v26 = *((void *)v23 + 2);
    uint64_t v25 = *((void *)v23 + 3);
    if (v26 >= v25 >> 1)
    {
      double v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, (unint64_t)v23);
      static ObservationRegistrar.lastestAccessLists = v23;
    }
    *((void *)v23 + 2) = v26 + 1;
    v36(&v23[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v26], v39, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v22, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  uint64_t v27 = p_cache[338];
  uint64_t v28 = v27[2];
  if (v28)
  {
    double v31 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    double v30 = v2 + 16;
    BOOL v29 = v31;
    double v32 = (char *)v27 + ((*(unsigned __int8 *)(v30 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64));
    unint64_t v33 = *(void *)(v30 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v29(v4, v32, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v30 - 8))(v4, v1);
      v32 += v33;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v38;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  double *Value;
  void **p_cache;
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;

  CGFloat v39 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v34 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v34 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = (double *)AGGraphGetValue();
  specialized GestureBodyAccessor.updateBody(of:changed:)(1, *Value, Value[1]);
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    char v21 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v21, v1);
    swift_beginAccess();
    double v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((void *)v22 + 2) = v25 + 1;
    v35(&v22[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v25], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  int v26 = p_cache[338];
  uint64_t v27 = v26[2];
  if (v27)
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    BOOL v29 = v2 + 16;
    uint64_t v28 = v30;
    double v31 = (char *)v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    double v32 = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v28(v4, v31, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v29 - 8))(v4, v1);
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  char *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  void (*v30)(char *, char *, uint64_t);
  void *v31;
  char *v32;
  uint64_t v33;

  unint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v32 = (char *)&v30 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v30 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v30 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  double v31 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  specialized GestureBodyAccessor.updateBody(of:changed:)(1);
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v30(v9, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v32, v9, v1);
    swift_beginAccess();
    char v19 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v19 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, (unint64_t)v19);
      static ObservationRegistrar.lastestAccessLists = v19;
    }
    double v22 = *((void *)v19 + 2);
    char v21 = *((void *)v19 + 3);
    if (v22 >= v21 >> 1)
    {
      char v19 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      static ObservationRegistrar.lastestAccessLists = v19;
    }
    *((void *)v19 + 2) = v22 + 1;
    v30(&v19[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v22], v32, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v9, v1);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  double v23 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v23)
  {
    int v26 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    uint64_t v25 = v2 + 16;
    int v24 = v26;
    uint64_t v27 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v25 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 64));
    uint64_t v28 = *(void *)(v25 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v24(v4, v27, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v25 - 8))(v4, v1);
      v27 += v28;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v31;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t Value;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  void **p_cache;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  char *v40;
  char *v41;
  _OWORD v42[5];
  char v43;
  uint64_t v44;

  double v44 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v40 = (char *)&v38 - v6;
  MEMORY[0x270FA5388](v7);
  CGFloat v41 = (char *)&v38 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  CGFloat v39 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v14, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v17 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v14;
  uint64_t Value = AGGraphGetValue();
  char v19 = *(_OWORD *)(Value + 16);
  v42[0] = *(_OWORD *)Value;
  v42[1] = v19;
  char v21 = *(_OWORD *)(Value + 48);
  uint64_t v20 = *(_OWORD *)(Value + 64);
  double v22 = *(_OWORD *)(Value + 32);
  uint64_t v43 = *(unsigned char *)(Value + 80);
  v42[3] = v21;
  v42[4] = v20;
  v42[2] = v22;
  outlined retain of SafeAreaPaddingModifier((uint64_t)v42, (void (*)(void, void, void, void, void))outlined copy of Environment<EdgeInsets>.Content);
  specialized ModifierBodyAccessor.updateBody(of:changed:)((uint64_t)v42, 1);
  outlined retain of SafeAreaPaddingModifier((uint64_t)v42, (void (*)(void, void, void, void, void))outlined consume of Environment<EdgeInsets>.Content);
  *(void *)(StatusReg + 848) = v17;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v14, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v11);
  }
  else
  {
    int v24 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    uint64_t v25 = v41;
    v24(v41, v11, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v40, v25, v1);
    swift_beginAccess();
    int v26 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, (unint64_t)v26);
      static ObservationRegistrar.lastestAccessLists = v26;
    }
    BOOL v29 = *((void *)v26 + 2);
    uint64_t v28 = *((void *)v26 + 3);
    if (v29 >= v28 >> 1)
    {
      int v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, (unint64_t)v26);
      static ObservationRegistrar.lastestAccessLists = v26;
    }
    *((void *)v26 + 2) = v29 + 1;
    v24(&v26[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v29], v40, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v41, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v14);
  double v30 = p_cache[338];
  double v31 = v30[2];
  if (v31)
  {
    unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    unint64_t v33 = v2 + 16;
    double v32 = v34;
    uint64_t v35 = (char *)v30 + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64));
    double v36 = *(void *)(v33 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v32(v4, v35, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v33 - 8))(v4, v1);
      v35 += v36;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v39;
  return swift_bridgeObjectRelease();
}

{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t Value;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v43 = (char *)&v40 - v7;
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)&v40 - v9;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = CurrentAttribute;
    uint64_t v40 = v10;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  double v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  CGFloat v41 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v16;
  char v19 = *v0;
  double v44 = v16;
  uint64_t v20 = *((void *)v0 + 1);
  char v21 = *((unsigned char *)v0 + 16);
  uint64_t Value = AGGraphGetValue();
  double v23 = *(double *)(Value + 8);
  int v24 = *(double *)(Value + 16);
  swift_retain();
  uint64_t v25 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v25, 1, v23, v24, v19, v20, v21);
  int v26 = (uint64_t)v44;
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v41;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v26, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v13, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v13);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v28 = v40;
    v27(v40, v13, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v43, v28, v2);
    swift_beginAccess();
    BOOL v29 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v29 + 2) + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    double v32 = *((void *)v29 + 2);
    double v31 = *((void *)v29 + 3);
    if (v32 >= v31 >> 1)
    {
      BOOL v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    *((void *)v29 + 2) = v32 + 1;
    v27(&v29[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v32], v43, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v28, v2);
    int v26 = (uint64_t)v44;
  }
  outlined destroy of ObservationTracking._AccessList?(v26);
  unint64_t v33 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v33)
  {
    double v36 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v35 = v3 + 16;
    unint64_t v34 = v36;
    uint64_t v37 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    double v38 = *(void *)(v35 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v34(v5, v37, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v1);
      (*(void (**)(char *, uint64_t))(v35 - 8))(v5, v2);
      v37 += v38;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v42;
  return swift_bridgeObjectRelease();
}

{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  char *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v39;
  char *v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;

  double v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v42 = (char *)&v39 - v7;
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)&v39 - v9;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = CurrentAttribute;
    CGFloat v39 = v10;
    uint64_t v40 = v13;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  CGFloat v41 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  char v19 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v16;
  uint64_t v20 = *v0;
  uint64_t v43 = v16;
  char v21 = *((void *)v0 + 1);
  double v22 = *((unsigned char *)v0 + 16);
  AGGraphGetValue();
  swift_retain();
  double v23 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v23, 1, v20, v21, v22);
  int v24 = (uint64_t)v43;
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v19;
  uint64_t v25 = (uint64_t)v40;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v24, (uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v25, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v25);
  }
  else
  {
    int v26 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    uint64_t v27 = v39;
    v26(v39, v25, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v42, v27, v2);
    swift_beginAccess();
    uint64_t v28 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    double v31 = *((void *)v28 + 2);
    double v30 = *((void *)v28 + 3);
    if (v31 >= v30 >> 1)
    {
      uint64_t v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    *((void *)v28 + 2) = v31 + 1;
    v26(&v28[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v31], (uint64_t)v42, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v27, v2);
    int v24 = (uint64_t)v43;
  }
  outlined destroy of ObservationTracking._AccessList?(v24);
  double v32 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v32)
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    unint64_t v34 = v3 + 16;
    unint64_t v33 = v35;
    double v36 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v37 = *(void *)(v34 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v33(v5, v36, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v1);
      (*(void (**)(char *, uint64_t))(v34 - 8))(v5, v2);
      v36 += v37;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v41;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t *Value;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  char *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v39;
  char *v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;

  double v44 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v42 = (char *)&v39 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v39 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v39 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    CGFloat v39 = v9;
    uint64_t v40 = v12;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  CGFloat v41 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v20 = *Value;
  char v21 = Value[1];
  uint64_t v43 = v15;
  double v23 = Value[2];
  double v22 = Value[3];
  swift_retain();
  swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v20, v21, v23, v22, 1);
  int v24 = (uint64_t)v43;
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v18;
  uint64_t v25 = (uint64_t)v40;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v24, (uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v25, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v25);
  }
  else
  {
    int v26 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
    uint64_t v27 = v39;
    v26(v39, v25, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v42, v27, v1);
    swift_beginAccess();
    uint64_t v28 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    double v31 = *((void *)v28 + 2);
    double v30 = *((void *)v28 + 3);
    if (v31 >= v30 >> 1)
    {
      uint64_t v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    *((void *)v28 + 2) = v31 + 1;
    v26(&v28[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v31], (uint64_t)v42, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v27, v1);
    int v24 = (uint64_t)v43;
  }
  outlined destroy of ObservationTracking._AccessList?(v24);
  double v32 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v32)
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    unint64_t v34 = v2 + 16;
    unint64_t v33 = v35;
    double v36 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v37 = *(void *)(v34 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v33(v4, v36, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v34 - 8))(v4, v1);
      v36 += v37;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v41;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t v19;
  void **p_cache;
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;

  CGFloat v39 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v34 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v34 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  AGGraphGetValue();
  char v19 = swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v19, 1);
  swift_release();
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    char v21 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v21, v1);
    swift_beginAccess();
    double v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((void *)v22 + 2) = v25 + 1;
    v35(&v22[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v25], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  int v26 = p_cache[338];
  uint64_t v27 = v26[2];
  if (v27)
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    BOOL v29 = v2 + 16;
    uint64_t v28 = v30;
    double v31 = (char *)v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    double v32 = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v28(v4, v31, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v29 - 8))(v4, v1);
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  unsigned __int8 *Value;
  void **p_cache;
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;

  CGFloat v39 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v34 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v34 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  specialized ViewBodyAccessor.updateBody(of:changed:)(*Value, 1);
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    char v21 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v21, v1);
    swift_beginAccess();
    double v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((void *)v22 + 2) = v25 + 1;
    v35(&v22[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v25], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  int v26 = p_cache[338];
  uint64_t v27 = v26[2];
  if (v27)
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    BOOL v29 = v2 + 16;
    uint64_t v28 = v30;
    double v31 = (char *)v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    double v32 = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v28(v4, v31, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v29 - 8))(v4, v1);
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t Value;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  char *v42;
  void *v43;
  char *v44;
  char *v45;
  void v46[4];
  unsigned __int8 v47;
  uint64_t v48;

  double v48 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v44 = (char *)&v40 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v40 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v40 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v42 = v12;
    uint64_t v40 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v43 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  CGFloat v41 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = AGGraphGetValue();
  char v19 = *(void *)Value;
  uint64_t v20 = *(void *)(Value + 8);
  uint64_t v45 = v15;
  double v22 = *(void *)(Value + 16);
  char v21 = *(void *)(Value + 24);
  v46[0] = v19;
  v46[1] = v20;
  v46[2] = v22;
  v46[3] = v21;
  double v23 = *(unsigned char *)(Value + 32);
  uint64_t v47 = v23;
  outlined copy of Path.Storage(v19, v20, v22, v21, v23);
  specialized ViewBodyAccessor.updateBody(of:changed:)((uint64_t)v46, 1);
  int v24 = v19;
  uint64_t v25 = (uint64_t)v45;
  outlined consume of Path.Storage(v24, v20, v22, v21, v23);
  *(void *)(StatusReg + 848) = v41;
  int v26 = (uint64_t)v42;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v25, (uint64_t)v42, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v26, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v26);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
    uint64_t v28 = v40;
    v27(v40, v26, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v44, v28, v1);
    swift_beginAccess();
    BOOL v29 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v29 + 2) + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    double v32 = *((void *)v29 + 2);
    double v31 = *((void *)v29 + 3);
    if (v32 >= v31 >> 1)
    {
      BOOL v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    *((void *)v29 + 2) = v32 + 1;
    v27(&v29[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v32], (uint64_t)v44, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v28, v1);
    uint64_t v25 = (uint64_t)v45;
  }
  outlined destroy of ObservationTracking._AccessList?(v25);
  unint64_t v33 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v33)
  {
    double v36 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    unint64_t v34 = v2 + 16;
    uint64_t v35 = v36;
    uint64_t v37 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    double v38 = *(void *)(v34 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v35(v4, v37, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v34 - 8))(v4, v1);
      v37 += v38;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v43;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t Value;
  long long v20;
  void **p_cache;
  char *v22;
  char *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  long long v39[2];
  char v40;
  uint64_t v41;

  CGFloat v41 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v35 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v35 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = AGGraphGetValue();
  uint64_t v20 = *(_OWORD *)(Value + 16);
  v39[0] = *(_OWORD *)Value;
  v39[1] = v20;
  uint64_t v40 = *(unsigned char *)(Value + 32);
  specialized ViewBodyAccessor.updateBody(of:changed:)(v39, 1);
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    double v22 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v22, v1);
    swift_beginAccess();
    double v23 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, (unint64_t)v23);
      static ObservationRegistrar.lastestAccessLists = v23;
    }
    int v26 = *((void *)v23 + 2);
    uint64_t v25 = *((void *)v23 + 3);
    if (v26 >= v25 >> 1)
    {
      double v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, (unint64_t)v23);
      static ObservationRegistrar.lastestAccessLists = v23;
    }
    *((void *)v23 + 2) = v26 + 1;
    v35(&v23[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v26], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v22, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  uint64_t v27 = p_cache[338];
  uint64_t v28 = v27[2];
  if (v28)
  {
    double v31 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    double v30 = v2 + 16;
    BOOL v29 = v31;
    double v32 = (char *)v27 + ((*(unsigned __int8 *)(v30 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64));
    unint64_t v33 = *(void *)(v30 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v29(v4, v32, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v30 - 8))(v4, v1);
      v32 += v33;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  _OWORD *Value;
  long long v20;
  void **p_cache;
  char *v22;
  char *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  _OWORD v39[3];
  uint64_t v40;

  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v35 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v35 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  uint64_t v20 = Value[1];
  v39[0] = *Value;
  v39[1] = v20;
  v39[2] = Value[2];
  specialized ViewBodyAccessor.updateBody(of:changed:)(v39, 1);
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    double v22 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v22, v1);
    swift_beginAccess();
    double v23 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, (unint64_t)v23);
      static ObservationRegistrar.lastestAccessLists = v23;
    }
    int v26 = *((void *)v23 + 2);
    uint64_t v25 = *((void *)v23 + 3);
    if (v26 >= v25 >> 1)
    {
      double v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, (unint64_t)v23);
      static ObservationRegistrar.lastestAccessLists = v23;
    }
    *((void *)v23 + 2) = v26 + 1;
    v35(&v23[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v26], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v22, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  uint64_t v27 = p_cache[338];
  uint64_t v28 = v27[2];
  if (v28)
  {
    double v31 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    double v30 = v2 + 16;
    BOOL v29 = v31;
    double v32 = (char *)v27 + ((*(unsigned __int8 *)(v30 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64));
    unint64_t v33 = *(void *)(v30 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v29(v4, v32, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v30 - 8))(v4, v1);
      v32 += v33;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  unsigned __int8 *Value;
  int v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  CGFloat v41 = (char *)&v38 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v38 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v38 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    CGFloat v39 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v40 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  uint64_t v20 = *Value;
  double v42 = v15;
  char v21 = (void *)*((void *)Value + 2);
  double v22 = *((id *)Value + 1);
  double v23 = v21;
  specialized ViewBodyAccessor.updateBody(of:changed:)(v20, v22, v23, 1);

  int v24 = (uint64_t)v42;
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v24, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    int v26 = v39;
    v25(v39, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v41, v26, v1);
    swift_beginAccess();
    uint64_t v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    double v30 = *((void *)v27 + 2);
    BOOL v29 = *((void *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((void *)v27 + 2) = v30 + 1;
    v25(&v27[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v30], v41, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v26, v1);
    int v24 = (uint64_t)v42;
  }
  outlined destroy of ObservationTracking._AccessList?(v24);
  double v31 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v31)
  {
    unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    unint64_t v33 = v2 + 16;
    double v32 = v34;
    uint64_t v35 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64));
    double v36 = *(void *)(v33 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v32(v4, v35, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v33 - 8))(v4, v1);
      v35 += v36;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v40;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t Value;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;

  double v44 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v42 = (char *)&v38 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v38 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v38 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    CGFloat v39 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  CGFloat v41 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v40 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = AGGraphGetValue();
  char v19 = *(void *)Value;
  uint64_t v20 = *(void *)(Value + 8);
  uint64_t v43 = v15;
  char v21 = *(unsigned __int8 *)(Value + 16);
  double v22 = *(void *)(Value + 24);
  outlined copy of Text.Storage(v19, v20, v21);
  swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v19, v20, v21, v22, 1);
  double v23 = v19;
  int v24 = (uint64_t)v43;
  outlined consume of Text.Storage(v23, v20, v21);
  swift_bridgeObjectRelease();
  *(void *)(StatusReg + 848) = v40;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v24, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    int v26 = v39;
    v25(v39, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v42, v26, v1);
    swift_beginAccess();
    uint64_t v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    double v30 = *((void *)v27 + 2);
    BOOL v29 = *((void *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((void *)v27 + 2) = v30 + 1;
    v25(&v27[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v30], v42, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v26, v1);
    int v24 = (uint64_t)v43;
  }
  outlined destroy of ObservationTracking._AccessList?(v24);
  double v31 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v31)
  {
    unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    unint64_t v33 = v2 + 16;
    double v32 = v34;
    uint64_t v35 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64));
    double v36 = *(void *)(v33 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v32(v4, v35, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v33 - 8))(v4, v1);
      v35 += v36;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v41;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t Value;
  void **p_cache;
  char *v21;
  char *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;

  CGFloat v39 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v38 = (char *)&v34 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v34 - v14;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    double v36 = v9;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v37 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t Value = AGGraphGetValue();
  specialized ViewBodyAccessor.updateBody(of:changed:)(*(unsigned __int8 *)(Value + 16), 1, *(double *)Value, *(double *)(Value + 8), *(double *)(Value + 24));
  *(void *)(StatusReg + 848) = v18;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v15, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v12);
  }
  else
  {
    char v21 = v36;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v35(v36, v12, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v38, v21, v1);
    swift_beginAccess();
    double v22 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = *((void *)v22 + 3);
    if (v25 >= v24 >> 1)
    {
      double v22 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v22);
      static ObservationRegistrar.lastestAccessLists = v22;
    }
    *((void *)v22 + 2) = v25 + 1;
    v35(&v22[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v25], v38, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  int v26 = p_cache[338];
  uint64_t v27 = v26[2];
  if (v27)
  {
    double v30 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    BOOL v29 = v2 + 16;
    uint64_t v28 = v30;
    double v31 = (char *)v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    double v32 = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v28(v4, v31, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v29 - 8))(v4, v1);
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v37;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t CurrentAttribute;
  unint64_t StatusReg;
  uint64_t v17;
  long long *Value;
  long long v19;
  long long v20;
  long long v21;
  void **p_cache;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v37;
  void *v38;
  char *v39;
  char *v40;
  _OWORD v41[2];
  unsigned char v42[26];
  uint64_t v43;

  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  CGFloat v39 = (char *)&v37 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v40 = (char *)&v37 - v8;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  double v38 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v14, 1, 1, v1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v17 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v14;
  uint64_t Value = (long long *)AGGraphGetValue();
  uint64_t v20 = Value[1];
  char v19 = Value[2];
  char v21 = *Value;
  *(_OWORD *)&v42[10] = *(long long *)((char *)Value + 42);
  v41[1] = v20;
  *(_OWORD *)double v42 = v19;
  v41[0] = v21;
  outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v41);
  specialized ViewBodyAccessor.updateBody(of:changed:)(v41, 1);
  outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v41);
  *(void *)(StatusReg + 848) = v17;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v14, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v11);
  }
  else
  {
    double v23 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    int v24 = v40;
    v23(v40, v11, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v39, v24, v1);
    swift_beginAccess();
    uint64_t v25 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    uint64_t v28 = *((void *)v25 + 2);
    uint64_t v27 = *((void *)v25 + 3);
    if (v28 >= v27 >> 1)
    {
      uint64_t v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    *((void *)v25 + 2) = v28 + 1;
    v23(&v25[((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v28], v39, v1);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v40, v1);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v14);
  BOOL v29 = p_cache[338];
  double v30 = v29[2];
  if (v30)
  {
    unint64_t v33 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    double v32 = v2 + 16;
    double v31 = v33;
    unint64_t v34 = (char *)v29 + ((*(unsigned __int8 *)(v32 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 64));
    uint64_t v35 = *(void *)(v32 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v31(v4, v34, v1);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v4, v0);
      (*(void (**)(char *, uint64_t))(v32 - 8))(v4, v1);
      v34 += v35;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v38;
  return swift_bridgeObjectRelease();
}

uint64_t specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, int a2, char a3, double a4, uint64_t a5, uint64_t a6, char a7)
{
  int v91 = a2;
  uint64_t v122 = *MEMORY[0x263EF8340];
  uint64_t v100 = type metadata accessor for OSSignpostID();
  uint64_t v90 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  v102 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v87 - v14;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v19 = *Value;
  uint64_t result = Value[1];
  v99 = v15;
  if (a3)
  {
    uint64_t v89 = result;
LABEL_8:
    swift_retain();
    swift_retain();
    goto LABEL_9;
  }
  if ((v17 & 1) == 0) {
    return result;
  }
  uint64_t v89 = result;
  if ((a7 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v20 = a1;
  uint64_t v92 = a6;
  uint64_t v21 = *(void *)(a6 + 16);
  swift_retain();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 16));
  uint64_t v22 = v19;
  uint64_t v24 = *(void *)(v21 + 24);
  uint64_t v23 = *(void *)(v21 + 32);
  uint64_t v25 = *(void *)(v21 + 40);
  uint64_t v26 = *(void *)(v21 + 48);
  char v27 = *(unsigned char *)(v21 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 16));
  swift_release();
  if (v27)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = v22;
    goto LABEL_7;
  }
  if (!v22)
  {
    if (!v24) {
      goto LABEL_67;
    }
LABEL_71:
    uint64_t v19 = v22;
    if ((compare(_:against:)(v23, v22) & 1) == 0 || (compare(_:against:)(v25, v22) & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a6 = v92;
      goto LABEL_79;
    }
    uint64_t v83 = *(void *)(v26 + 16);
    if (!v83)
    {
LABEL_84:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_85:
      swift_release();
      return swift_release();
    }
    uint64_t v87 = v19;
    uint64_t v84 = v26 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v84, (uint64_t)v108);
      uint64_t v85 = v109;
      uint64_t v86 = v110;
      __swift_project_boxed_opaque_existential_1(v108, v109);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v87, v85, v86) & 1) == 0) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
      v84 += 40;
      if (!--v83)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_85;
      }
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
    uint64_t v19 = v87;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_7:
    a6 = v92;
    a1 = v20;
LABEL_79:
    int v15 = v99;
LABEL_9:
    uint64_t v92 = a6;
    uint64_t v28 = *(void *)(a6 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v28 + 16));
    *(void *)(v28 + 24) = 0;
    if (*(void *)(*(void *)(v28 + 32) + 16))
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v108[0] = *(void *)(v28 + 32);
      *(void *)(v28 + 32) = 0x8000000000000000;
      type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
      _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
      *(void *)(v28 + 32) = v108[0];
      swift_bridgeObjectRelease();
    }
    if (*(void *)(*(void *)(v28 + 40) + 16))
    {
      char v30 = swift_isUniquelyReferenced_nonNull_native();
      v108[0] = *(void *)(v28 + 40);
      *(void *)(v28 + 40) = 0x8000000000000000;
      type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
      _NativeDictionary.removeAll(isUnique:)(v30);
      *(void *)(v28 + 40) = v108[0];
      swift_bridgeObjectRelease();
    }
    int v31 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *(void *)(v28 + 48);
    if (v31)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v32 + 16));
    }
    else
    {
      *(void *)(v28 + 48) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v32 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    *(unsigned char *)(v28 + 56) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 16));
    swift_release();
    uint64_t v88 = a1;
    if (v19) {
      uint64_t v33 = *(void *)(v19 + 64);
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = v19;
    LODWORD(v19) = 336658452;
    uint64_t v35 = v92;
    unint64_t v36 = *(void *)(v92 + 16);
    swift_retain_n();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v36 + 16));
    *(void *)(v36 + 24) = v33;
    os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 16));
    swift_release();
    swift_release();
    LOBYTE(v36) = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_62:
      AGGraphClearUpdate();
      v106[0] = v34;
      v106[1] = v35;
      VariableBlurEffect.resolve(in:)(v106, v88, v91 & 1, (uint64_t)v108, a4);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      AGGraphSetOutputValue();
      outlined consume of VariableBlurStyle.Mask((void *)v108[2], v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121);
      swift_release();
      swift_release_n();
      return swift_release();
    }
    uint64_t v87 = v34;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v38 = AGTypeID.description.getter();
    uint64_t v40 = v39;
    uint64_t v41 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v42 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v38;
    uint64_t v94 = inited + 32;
    *(void *)(inited + 64) = v42;
    *(void *)(inited + 40) = v40;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v93 = inited + 72;
    *(void *)(inited + 96) = v41;
    *(void *)(inited + 104) = v42;
    uint64_t v95 = inited;
    *(void *)(inited + 80) = v43;
    if (one-time initialization token for _signpostLog != -1) {
LABEL_89:
    }
      swift_once();
    unsigned int v103 = v36 | v19;
    uint64_t v44 = v90 + 16;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v102, v15, v100);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v98 = v45;
    char v46 = 0;
    unint64_t v36 = 0;
    v96 = (void (**)(char *, uint64_t, uint64_t))(v44 + 8);
    long long v97 = xmmword_2461BE2B0;
    uint64_t v19 = MEMORY[0x263F8E9C8];
LABEL_22:
    uint64_t v47 = (_OWORD *)swift_initStackObject();
    double v48 = v47;
    v47[1] = v97;
    uint64_t v49 = v47 + 2;
    if (v46)
    {
      long long v50 = 0uLL;
      v47[5] = 0u;
      v47[6] = 0u;
      v47[3] = 0u;
      v47[4] = 0u;
      *uint64_t v49 = 0u;
      goto LABEL_27;
    }
    uint64_t v51 = v95;
    if (v36 >= *(void *)(v95 + 16))
    {
      __break(1u);
    }
    else
    {
      outlined init with copy of AnyTrackedValue(v94 + 40 * v36, (uint64_t)v49);
      if (*(void *)(v51 + 16) >= 2uLL)
      {
        outlined init with copy of AnyTrackedValue(v93, (uint64_t)v48 + 72);
        long long v50 = 0uLL;
LABEL_27:
        v104 = v48;
        v48[7] = v50;
        uint64_t v52 = (uint64_t)(v48 + 7);
        *(void *)(v52 + 32) = 0;
        uint64_t v101 = v52;
        *(_OWORD *)(v52 + 16) = v50;
        v105 = (void *)MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
        for (uint64_t i = 32; i != 152; i += 40)
        {
          outlined init with copy of CVarArg?((uint64_t)v104 + i, (uint64_t)v108, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v19);
          outlined init with copy of CVarArg?((uint64_t)v108, (uint64_t)v106, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v19);
          uint64_t v54 = v107;
          if (v107)
          {
            __swift_project_boxed_opaque_existential_1(v106, v107);
            uint64_t v55 = CVarArg.kdebugValue(_:)(v103, v54);
            uint64_t v57 = v56;
            uint64_t v59 = v58;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
            if (v57)
            {
              uint64_t v60 = swift_allocObject();
              *(void *)(v60 + 16) = v57;
              *(void *)(v60 + 24) = v59;
              uint64_t v61 = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ();
            }
            else
            {
              uint64_t v61 = 0;
              uint64_t v60 = 0;
            }
          }
          else
          {
            outlined destroy of CVarArg?((uint64_t)v106, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v19);
            uint64_t v55 = 0;
            uint64_t v60 = 0;
            uint64_t v61 = 1;
          }
          outlined destroy of CVarArg?((uint64_t)v108, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v19);
          uint64_t v62 = v105;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1);
            uint64_t v62 = v105;
          }
          unint64_t v64 = v62[2];
          unint64_t v63 = v62[3];
          if (v64 >= v63 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
            uint64_t v62 = v105;
          }
          v62[2] = v64 + 1;
          char v65 = &v62[3 * v64];
          v65[4] = v55;
          v65[5] = v61;
          v65[6] = v60;
        }
        v108[0] = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64 + 1, 0);
        uint64_t v66 = v108[0];
        unint64_t v67 = v64 + 1;
        double v68 = v62 + 5;
        do
        {
          if (*v68 == 1) {
            uint64_t v69 = 0;
          }
          else {
            uint64_t v69 = *(v68 - 1);
          }
          v108[0] = v66;
          unint64_t v71 = *(void *)(v66 + 16);
          unint64_t v70 = *(void *)(v66 + 24);
          if (v71 >= v70 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
            uint64_t v66 = v108[0];
          }
          *(void *)(v66 + 16) = v71 + 1;
          *(void *)(v66 + 32 + 8 * v71) = v69;
          v68 += 3;
          --v67;
        }
        while (v67);
        OSSignpostID.rawValue.getter();
        unint64_t v72 = *(void *)(v66 + 16);
        if (v72)
        {
          if (v72 == 1) {
            goto LABEL_81;
          }
          if (v72 < 3) {
            goto LABEL_82;
          }
          kdebug_trace();
          swift_bridgeObjectRelease();
          uint64_t v73 = v62[2];
          int v15 = v99;
          if (!v73) {
            goto LABEL_56;
          }
          swift_retain();
          double v74 = v62 + 6;
          while (1)
          {
            uint64_t v75 = *(v74 - 2);
            double v76 = (void (*)(uint64_t))*(v74 - 1);
            if (v76)
            {
              if (v76 == (void (*)(uint64_t))1) {
                goto LABEL_51;
              }
              uint64_t v77 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(v74 - 1));
              v76(v77);
            }
            _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v75, (uint64_t)v76);
LABEL_51:
            v74 += 3;
            if (!--v73)
            {
              swift_release();
LABEL_56:
              swift_release();
              if (*((void *)v104 + 2) < 3uLL) {
                goto LABEL_83;
              }
              outlined init with copy of CVarArg?(v101, (uint64_t)v108, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v19);
              swift_bridgeObjectRelease();
              uint64_t v78 = v109;
              outlined destroy of CVarArg?((uint64_t)v108, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v19);
              if (!v78)
              {
                swift_bridgeObjectRelease();
                CGRect v81 = *(void (**)(char *, uint64_t))(v90 + 8);
                uint64_t v82 = v100;
                v81(v15, v100);
                v81(v102, v82);
                uint64_t v34 = v87;
                uint64_t v35 = v92;
                goto LABEL_62;
              }
              if (one-time initialization token for continuation != -1) {
                swift_once();
              }
              uint64_t v79 = v100;
              uint64_t v80 = __swift_project_value_buffer(v100, (uint64_t)static OSSignpostID.continuation);
              (*v96)(v102, v80, v79);
              char v46 = 1;
              unint64_t v36 = 2;
              goto LABEL_22;
            }
          }
        }
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
    }
    __break(1u);
    goto LABEL_89;
  }
  if (*(void *)(v22 + 64) != v24) {
    goto LABEL_71;
  }
LABEL_67:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t specialized static VariableBlurStyle.Mask.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  int v14 = *(_DWORD *)(a1 + 96);
  int v15 = *(void **)a2;
  uint64_t v16 = *(void *)(a2 + 8);
  uint64_t v17 = *(void *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v19 = *(void *)(a2 + 32);
  uint64_t v20 = *(void *)(a2 + 40);
  uint64_t v21 = *(void *)(a2 + 48);
  uint64_t v22 = *(void *)(a2 + 56);
  uint64_t v24 = *(void *)(a2 + 64);
  uint64_t v23 = *(void *)(a2 + 72);
  uint64_t v25 = *(void *)(a2 + 80);
  uint64_t v26 = *(void *)(a2 + 88);
  int v27 = *(_DWORD *)(a2 + 96);
  char v70 = v3;
  unint64_t v71 = v2;
  v104[0] = v2;
  v104[1] = v3;
  v104[2] = v4;
  v104[3] = v5;
  v104[4] = v6;
  v104[5] = v7;
  v104[6] = v8;
  v104[7] = v9;
  v104[8] = v10;
  v104[9] = v11;
  v104[10] = v13;
  v104[11] = v12;
  uint64_t v28 = v12;
  int v105 = v14;
  v106 = v15;
  uint64_t v107 = v16;
  uint64_t v108 = v17;
  uint64_t v109 = v18;
  uint64_t v110 = v19;
  uint64_t v111 = v20;
  uint64_t v112 = v21;
  uint64_t v113 = v22;
  uint64_t v114 = v24;
  uint64_t v115 = v23;
  uint64_t v116 = v25;
  uint64_t v117 = v26;
  int v29 = v27 & 0xFF00;
  int v118 = v27;
  if ((v14 & 0xFF00) != 0x200)
  {
    if (v29 != 512)
    {
      *((void *)&v38 + 1) = v8;
      *(void *)&long long v38 = v7;
      uint64_t v94 = v38 >> 32;
      *((void *)&v38 + 1) = v9;
      *(void *)&long long v38 = v8;
      uint64_t v95 = v38 >> 32;
      char v96 = BYTE4(v9) & 1;
      __int16 v101 = v14 & 0x1FF;
      char v102 = BYTE2(v14);
      char v103 = HIBYTE(v14);
      *((void *)&v38 + 1) = v21;
      *(void *)&long long v38 = v20;
      uint64_t v78 = v38 >> 32;
      *((void *)&v38 + 1) = v22;
      *(void *)&long long v38 = v21;
      uint64_t v79 = v38 >> 32;
      char v80 = BYTE4(v22) & 1;
      __int16 v85 = v27 & 0x1FF;
      char v86 = BYTE2(v27);
      char v87 = HIBYTE(v27);
      uint64_t v88 = v71;
      char v89 = v3;
      uint64_t v90 = v4;
      uint64_t v91 = v5;
      uint64_t v92 = v6;
      char v93 = v7;
      uint64_t v97 = v10;
      uint64_t v98 = v11;
      uint64_t v99 = v13;
      uint64_t v100 = v12;
      uint64_t v39 = v12;
      uint64_t v53 = v12;
      unint64_t v72 = v15;
      char v73 = v16;
      uint64_t v74 = v17;
      uint64_t v75 = v18;
      uint64_t v76 = v19;
      char v77 = v20;
      uint64_t v81 = v24;
      uint64_t v82 = v23;
      uint64_t v83 = v25;
      uint64_t v84 = v26;
      uint64_t v50 = v26;
      uint64_t v47 = v24;
      uint64_t v67 = v11;
      uint64_t v69 = v4;
      uint64_t v62 = v15;
      uint64_t v63 = v20;
      uint64_t v40 = v5;
      uint64_t v54 = v6;
      uint64_t v41 = v7;
      uint64_t v60 = v17;
      char v61 = v16;
      uint64_t v42 = v8;
      uint64_t v55 = v26;
      uint64_t v56 = v24;
      uint64_t v43 = v9;
      uint64_t v58 = v19;
      uint64_t v59 = v18;
      uint64_t v64 = v22;
      uint64_t v66 = v21;
      uint64_t v44 = v10;
      uint64_t v57 = v10;
      outlined copy of VariableBlurStyle.Mask(v15, v16, v17, v18, v19, v20, v21, v22, v47, v23, v25, v50, v27, BYTE1(v27));
      uint64_t v52 = v43;
      outlined copy of VariableBlurStyle.Mask(v71, v70, v69, v40, v54, v41, v42, v43, v44, v67, v13, v39, v14, BYTE1(v14));
      outlined copy of VariableBlurStyle.Mask(v62, v61, v60, v59, v58, v63, v66, v64, v56, v23, v25, v55, v27, BYTE1(v27));
      outlined copy of VariableBlurStyle.Mask(v71, v70, v69, v40, v54, v41, v42, v43, v57, v67, v13, v53, v14, BYTE1(v14));
      char v30 = specialized static GraphicsImage.== infix(_:_:)((uint64_t)&v88, (uint64_t)&v72);
      outlined release of (VariableBlurStyle.Mask, VariableBlurStyle.Mask)((uint64_t)v104);
      outlined consume of VariableBlurStyle.Mask(v62, v61, v60, v59, v58, v63, v66, v64, v56, v23, v25, v55, v27, BYTE1(v27));
      outlined consume of VariableBlurStyle.Mask(v71, v70, v69, v40, v54, v41, v42, v52, v57, v67, v13, v53, v14, BYTE1(v14));
      return v30 & 1;
    }
    goto LABEL_5;
  }
  if (v29 != 512)
  {
LABEL_5:
    __int16 v51 = v27;
    uint64_t v49 = v26;
    uint64_t v46 = v24;
    uint64_t v48 = v23;
    uint64_t v68 = v4;
    uint64_t v31 = v11;
    uint64_t v65 = v5;
    uint64_t v32 = v13;
    uint64_t v33 = v6;
    uint64_t v34 = v7;
    uint64_t v35 = v8;
    uint64_t v36 = v9;
    uint64_t v37 = v10;
    outlined copy of VariableBlurStyle.Mask(v15, v16, v17, v18, v19, v20, v21, v22, v46, v48, v25, v49, v51, HIBYTE(v51));
    outlined copy of VariableBlurStyle.Mask(v71, v3, v68, v65, v33, v34, v35, v36, v37, v31, v32, v28, v14, BYTE1(v14));
    outlined release of (VariableBlurStyle.Mask, VariableBlurStyle.Mask)((uint64_t)v104);
    char v30 = 0;
    return v30 & 1;
  }
  outlined release of (VariableBlurStyle.Mask, VariableBlurStyle.Mask)((uint64_t)v104);
  char v30 = 1;
  return v30 & 1;
}

id outlined copy of VariableBlurStyle.Mask(id result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned __int8 a14)
{
  if (a14 << 8 != 512) {
    return outlined copy of GraphicsImage.Contents?(result, a2);
  }
  return result;
}

uint64_t outlined release of (VariableBlurStyle.Mask, VariableBlurStyle.Mask)(uint64_t a1)
{
  int v14 = *(void **)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 160);
  long long v12 = *(_OWORD *)(a1 + 168);
  uint64_t v9 = *(void *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 192);
  int v10 = *(_DWORD *)(a1 + 200);
  outlined consume of VariableBlurStyle.Mask(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_DWORD *)(a1 + 96), BYTE1(*(_DWORD *)(a1 + 96)));
  outlined consume of VariableBlurStyle.Mask(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v9, v8, v10, BYTE1(v10));
  return a1;
}

void DisplayList.Item.backdropFilter(size:)(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  DisplayList.Item.colorMatrix(size:)((uint64_t)v19, a2, a3);
  if (!v20) {
    goto LABEL_10;
  }
  if (*((void *)v20 + 2) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  long long v17 = v19[3];
  long long v18 = v19[4];
  long long v15 = v19[1];
  long long v16 = v19[2];
  long long v14 = v19[0];
  CGFloat v6 = v20[4];
  CGFloat v7 = v20[5];
  CGFloat v8 = v20[6];
  CGFloat v9 = v20[7];
  unint64_t v11 = *((void *)v20 + 9);
  unint64_t v10 = *((void *)v20 + 10);
  outlined copy of DisplayList.Item.Value(v11, v10);
  swift_bridgeObjectRelease();
  v22.origin.double x = 0.0;
  v22.origin.CGFloat y = 0.0;
  v21.origin.double x = v6;
  v21.origin.CGFloat y = v7;
  v21.size.CGFloat width = v8;
  v21.size.CGFloat height = v9;
  v22.size.CGFloat width = a2;
  v22.size.CGFloat height = a3;
  if (!CGRectEqualToRect(v21, v22) || v10 >> 62 || v11 >> 60)
  {
    outlined consume of DisplayList.Item.Value(v11, v10);
    goto LABEL_10;
  }
  float v12 = *(float *)(v11 + 32);
  outlined consume of DisplayList.Item.Value(v11, v10);
  if (v12 != 0.0)
  {
LABEL_10:
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_DWORD *)(a1 + 112) = 0;
    char v13 = -1;
    goto LABEL_11;
  }
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = v18;
  *(_DWORD *)(a1 + 112) = 0;
  char v13 = 12;
LABEL_11:
  *(unsigned char *)(a1 + 116) = v13;
}

void DisplayList.Item.colorMatrix(size:)(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  v56.size.CGFloat height = a3;
  v56.size.CGFloat width = a2;
  CGRect v55 = *(CGRect *)v3;
  uint64_t v6 = *(void *)(v3 + 40);
  unint64_t v5 = *(void *)(v3 + 48);
  uint64_t v7 = *(void *)(v3 + 56);
  int v8 = *(unsigned __int8 *)(v3 + 66);
  int v9 = *(unsigned __int16 *)(v3 + 64);
  v56.origin.double x = 0.0;
  v56.origin.CGFloat y = 0.0;
  if (CGRectEqualToRect(v55, v56) && v5 >> 62 == 1 && (v5 & 0xFF00000000) == 0x900000000)
  {
    int v37 = v8;
    uint64_t v38 = v7;
    float v12 = *(void **)(v6 + 16);
    uint64_t v11 = *(void *)(v6 + 24);
    char v13 = *(void **)(v6 + 32);
    uint64_t v14 = *(void *)(v6 + 40);
    uint64_t v15 = *(void *)(v6 + 48);
    uint64_t v16 = *(void *)(v6 + 56);
    uint64_t v17 = *(void *)(v6 + 64);
    uint64_t v18 = *(void *)(v6 + 72);
    uint64_t v19 = *(void *)(v6 + 80);
    uint64_t v20 = *(void *)(v6 + 88);
    uint64_t v21 = *(void *)(v6 + 96);
    uint64_t v22 = *(void *)(v6 + 104);
    uint64_t v24 = *(void *)(v6 + 112);
    uint64_t v23 = *(void *)(v6 + 120);
    int v25 = *(_DWORD *)(v6 + 128);
    char v26 = *(unsigned char *)(v6 + 132);
    uint64_t v46 = v12;
    v47[0] = v12;
    int v39 = v11;
    uint64_t v40 = v13;
    v47[1] = v11;
    v47[2] = v13;
    char v42 = v14;
    uint64_t v43 = v15;
    v47[3] = v14;
    v47[4] = v15;
    uint64_t v44 = v16;
    uint64_t v45 = v17;
    v47[5] = v16;
    v47[6] = v17;
    uint64_t v41 = v18;
    v47[7] = v18;
    v47[8] = v19;
    v47[9] = v20;
    uint64_t v48 = v21;
    uint64_t v49 = v22;
    uint64_t v50 = v24;
    uint64_t v51 = v23;
    int v52 = v25;
    char v53 = v26;
    outlined copy of GraphicsFilter(v12, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v24, v23, v25, SBYTE2(v25));
    outlined copy of GraphicsFilter(v46, v39, v40, v42, v43, v44, v45, v41, v19, v20, v21, v22, v24, v23, v25, SBYTE2(v25));
    specialized _ColorMatrix.init(_:premultiplied:)((uint64_t)v47, 0, (uint64_t)v54);
    uint64_t v35 = v54[1];
    uint64_t v36 = v54[0];
    uint64_t v33 = v54[3];
    uint64_t v34 = v54[2];
    uint64_t v31 = v54[5];
    uint64_t v32 = v54[4];
    uint64_t v29 = v54[7];
    uint64_t v30 = v54[6];
    uint64_t v27 = v54[9];
    uint64_t v28 = v54[8];
    outlined init with take of _ColorMatrix?((uint64_t)v54, (uint64_t)v47);
    if ((v48 & 1) == 0)
    {
      *(void *)a1 = v36;
      *(void *)(a1 + 8) = v35;
      *(void *)(a1 + 16) = v34;
      *(void *)(a1 + 24) = v33;
      *(void *)(a1 + 32) = v32;
      *(void *)(a1 + 40) = v31;
      *(void *)(a1 + 48) = v30;
      *(void *)(a1 + 56) = v29;
      *(void *)(a1 + 64) = v28;
      *(void *)(a1 + 72) = v27;
      *(void *)(a1 + 80) = v38;
      *(_WORD *)(a1 + 88) = v9;
      *(unsigned char *)(a1 + 90) = (v9 | (v37 << 16)) >> 16;
      swift_bridgeObjectRetain();
      outlined consume of GraphicsFilter(v46, v39, v40, v42, v43, v44, v45, v41, v19, v20, v21, v22, v24, v23, v25, SBYTE2(v25));
      return;
    }
    outlined consume of GraphicsFilter(v46, v39, v40, v42, v43, v44, v45, v41, v19, v20, v21, v22, v24, v23, v25, SBYTE2(v25));
  }
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
}

uint64_t outlined init with take of _ColorMatrix?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ColorMatrix?, (uint64_t)&type metadata for _ColorMatrix, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized _ColorMatrix.init(_:premultiplied:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double v6 = *(double *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = *(void *)(a1 + 64);
  unint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = *(void *)(a1 + 104);
  int v20 = *(_DWORD *)(a1 + 112);
  char v58 = 1;
  uint64_t v21 = *(unsigned __int8 *)(a1 + 116);
  unint64_t v22 = 0;
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  unint64_t v31 = 0;
  switch(v21)
  {
    case 1:
      char v58 = 1;
      outlined consume of GraphicsFilter(*(void **)&v6, v7, (id)v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, SBYTE2(v20));
      unint64_t v22 = 0;
      unint64_t v23 = 0;
      unint64_t v24 = 0;
      unint64_t v25 = 0;
      unint64_t v26 = 0;
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      goto LABEL_35;
    case 4:
      if ((v16 ^ a2)) {
        goto LABEL_34;
      }
      unint64_t v36 = HIDWORD(v15);
      uint64_t v35 = HIDWORD(v14);
      uint64_t v34 = HIDWORD(v13);
      float v51 = *(float *)&v13;
      float v44 = *(float *)&v12;
      float v49 = *((float *)&v11 + 1);
      float v48 = *(float *)&v11;
      float v47 = *((float *)&v10 + 1);
      float v46 = *((float *)&v9 + 1);
      unint64_t v33 = HIDWORD(v12);
      float v43 = *(float *)&v9;
      float v42 = *((float *)&v8 + 1);
      float v45 = *(float *)&v8;
      unint64_t v32 = HIDWORD(v7);
      float v41 = *(float *)&v7;
      float v40 = *((float *)&v6 + 1);
      float v39 = *(float *)&v6;
      goto LABEL_32;
    case 5:
      specialized _ColorMatrix.init(colorMultiply:premultiplied:)(a2 & 1, (uint64_t)v59, *(float *)&v6, *((float *)&v6 + 1), *(float *)&v7, *((float *)&v7 + 1));
      goto LABEL_31;
    case 6:
      if (a2) {
        goto LABEL_34;
      }
      specialized _ColorMatrix.init(hueRotation:)((uint64_t)v59, v6);
      goto LABEL_31;
    case 7:
      if (a2) {
        goto LABEL_34;
      }
      unint64_t v32 = 0;
      LODWORD(v10) = 0;
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      LODWORD(v14) = 0;
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      double v37 = v6;
      if (v6 <= 0.0) {
        double v37 = 0.0;
      }
      float v38 = v37;
      float v39 = (float)(v38 * 0.7873) + 0.2126;
      float v40 = 0.7152 - (float)(v38 * 0.7152);
      float v41 = 0.0722 - (float)(v38 * 0.0722);
      float v42 = 0.2126 - (float)(v38 * 0.2126);
      float v43 = (float)(v38 * 0.2848) + 0.7152;
      float v44 = (float)(v38 * 0.9278) + 0.0722;
      LODWORD(v15) = 1065353216;
      float v45 = 0.0;
      float v46 = v41;
      float v47 = 0.0;
      float v48 = v42;
      float v49 = v40;
      goto LABEL_16;
    case 8:
      if (a2) {
        goto LABEL_34;
      }
      unint64_t v32 = 0;
      LODWORD(v10) = 0;
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      LODWORD(v14) = 0;
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      float v45 = v6;
      float v40 = 0.0;
      float v39 = 1.0;
      float v41 = 0.0;
      LODWORD(v15) = 1065353216;
      float v42 = 0.0;
      float v43 = 1.0;
      float v46 = 0.0;
      float v47 = v45;
      float v48 = 0.0;
      float v49 = 0.0;
      float v44 = 1.0;
      float v51 = v45;
      goto LABEL_32;
    case 9:
      if (a2) {
        goto LABEL_34;
      }
      unint64_t v32 = 0;
      LODWORD(v10) = 0;
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      LODWORD(v14) = 0;
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      float v39 = v6;
      float v45 = (float)(1.0 - v39) * 0.5;
      LODWORD(v15) = 1065353216;
      float v40 = 0.0;
      float v41 = 0.0;
      float v42 = 0.0;
      float v43 = v39;
      float v46 = 0.0;
      float v47 = v45;
      float v48 = 0.0;
      float v49 = 0.0;
      float v44 = v39;
      float v51 = v45;
      goto LABEL_32;
    case 10:
      if (a2) {
        goto LABEL_34;
      }
      float v52 = v6;
      float v53 = 1.0;
      float v54 = 1.0;
      float v55 = 1.0;
      float v56 = 1.0;
      float v57 = 0.0;
      goto LABEL_30;
    case 11:
      if (a2) {
        goto LABEL_34;
      }
      float v57 = *((float *)&v8 + 1);
      float v52 = *(float *)&v8;
      float v56 = *((float *)&v7 + 1);
      float v55 = *(float *)&v7;
      float v54 = *((float *)&v6 + 1);
      float v53 = *(float *)&v6;
LABEL_30:
      specialized _ColorMatrix.init(colorMonochrome:amount:bias:)((uint64_t)v59, v53, v54, v55, v56, v52, v57);
LABEL_31:
      float v39 = *(float *)v59;
      float v40 = *(float *)&v59[1];
      float v41 = *(float *)&v59[2];
      unint64_t v32 = v59[3];
      float v45 = *(float *)&v59[4];
      float v42 = *(float *)&v59[5];
      float v43 = *(float *)&v59[6];
      float v46 = *(float *)&v59[7];
      LODWORD(v10) = v59[8];
      float v47 = *(float *)&v59[9];
      float v48 = *(float *)&v59[10];
      float v49 = *(float *)&v59[11];
      float v44 = *(float *)&v59[12];
      unint64_t v33 = v59[13];
      float v51 = *(float *)&v59[14];
      uint64_t v34 = v59[15];
      LODWORD(v14) = v59[16];
      uint64_t v35 = v59[17];
      LODWORD(v15) = v59[18];
      unint64_t v36 = v59[19];
      goto LABEL_32;
    case 15:
      outlined consume of GraphicsFilter(*(void **)&v6, v7, (id)v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, SBYTE2(v20));
      goto LABEL_34;
    case 16:
      if (v7 | *(void *)&v6 | v8 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18 | v19) {
        BOOL v50 = 0;
      }
      else {
        BOOL v50 = v20 == 0;
      }
      if (v50) {
        goto LABEL_34;
      }
      if (v20 || *(void *)&v6 != 1 || v8 | v7 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18 | v19)
      {
        if ((a2 & 1) == 0)
        {
          unint64_t v32 = 0;
          LODWORD(v10) = 0;
          unint64_t v33 = 0;
          uint64_t v34 = 0;
          LODWORD(v14) = 0;
          uint64_t v35 = 0;
          unint64_t v36 = 0;
          float v45 = 1.0;
          float v40 = 0.0;
          float v39 = -1.0;
          float v41 = 0.0;
          float v42 = 0.0;
          float v43 = -1.0;
          LODWORD(v15) = 1065353216;
          float v46 = 0.0;
          float v47 = 1.0;
          float v48 = 0.0;
          float v49 = 0.0;
          float v44 = -1.0;
          float v51 = 1.0;
LABEL_32:
          char v58 = 0;
          unint64_t v22 = LODWORD(v39) | ((unint64_t)LODWORD(v40) << 32);
          unint64_t v23 = LODWORD(v41) | (v32 << 32);
          unint64_t v24 = LODWORD(v45) | ((unint64_t)LODWORD(v42) << 32);
          unint64_t v25 = LODWORD(v43) | ((unint64_t)LODWORD(v46) << 32);
          unint64_t v26 = v10 | ((unint64_t)LODWORD(v47) << 32);
          unint64_t v27 = LODWORD(v48) | ((unint64_t)LODWORD(v49) << 32);
          unint64_t v28 = LODWORD(v44) | (v33 << 32);
          unint64_t v29 = LODWORD(v51) | (unint64_t)(v34 << 32);
          unint64_t v30 = v14 | (unint64_t)(v35 << 32);
          unint64_t v31 = v15 | (v36 << 32);
          goto LABEL_35;
        }
      }
      else if ((a2 & 1) == 0)
      {
        unint64_t v32 = 0;
        LODWORD(v10) = 0;
        unint64_t v33 = 0;
        LODWORD(v15) = 0;
        unint64_t v36 = 0;
        float v39 = 0.0;
        float v40 = 0.0;
        float v41 = 0.0;
        float v45 = 0.0;
        float v42 = 0.0;
        float v43 = 0.0;
        uint64_t v35 = 1033100696;
        LODWORD(v14) = 1060575065;
        uint64_t v34 = 1046066128;
        float v46 = 0.0;
        float v47 = 0.0;
        float v48 = 0.0;
        float v49 = 0.0;
        float v44 = 0.0;
LABEL_16:
        float v51 = 0.0;
        goto LABEL_32;
      }
LABEL_34:
      unint64_t v22 = 0;
      unint64_t v23 = 0;
      unint64_t v24 = 0;
      unint64_t v25 = 0;
      unint64_t v26 = 0;
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      char v58 = 1;
LABEL_35:
      *(void *)a3 = v22;
      *(void *)(a3 + 8) = v23;
      *(void *)(a3 + 16) = v24;
      *(void *)(a3 + 24) = v25;
      *(void *)(a3 + 32) = v26;
      *(void *)(a3 + 40) = v27;
      *(void *)(a3 + 48) = v28;
      *(void *)(a3 + 56) = v29;
      *(void *)(a3 + 64) = v30;
      *(void *)(a3 + 72) = v31;
      *(unsigned char *)(a3 + 80) = v58;
      return;
    default:
      goto LABEL_35;
  }
}

id GraphicsFilter.makeCAFilter()()
{
  unint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  unint64_t v6 = *(void *)(v0 + 32);
  unint64_t v5 = *(void *)(v0 + 40);
  unint64_t v8 = *(void *)(v0 + 48);
  unint64_t v7 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  unint64_t v9 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 104);
  int v15 = *(_DWORD *)(v0 + 112);
  switch(*(unsigned char *)(v0 + 116))
  {
    case 1:
      uint64_t v77 = *(void *)(v0 + 24);
      uint64_t v79 = *(void *)(v0 + 80);
      uint64_t v82 = *(uint64_t *)(v0 + 32);
      uint64_t v84 = *(uint64_t *)(v0 + 40);
      uint64_t v85 = *(void *)(v0 + 72);
      uint64_t v89 = *(void *)(v0 + 56);
      uint64_t v93 = *(uint64_t *)(v0 + 48);
      outlined copy of VariableBlurStyle.Mask((id)v4, v3, v6, v5, v8, v7, v10, v9, v11, v12, v14, v13, v15, BYTE1(v15));
      id v16 = _CAFilterCreate(0xDu);
      Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      _CAFilterSetInput(v16, isa, 15);

      Class v40 = Bool._bridgeToObjectiveC()().super.super.isa;
      _CAFilterSetInput(v16, v40, 11);

      Class v41 = Bool._bridgeToObjectiveC()().super.super.isa;
      _CAFilterSetInput(v16, v41, 7);

      if ((v15 & 0xFF00) == 0x200)
      {
        outlined consume of GraphicsFilter((void *)v2, v1, (id)v4, v77, v82, v84, v93, v89, v10, v85, v79, v12, v14, v13, v15, SBYTE2(v15));
        return v16;
      }
      unint64_t v96 = v4;
      LOBYTE(v97) = v77;
      *((void *)&v55 + 1) = v10;
      *(void *)&long long v55 = v89;
      unint64_t v54 = v55 >> 32;
      uint64_t v98 = v82;
      unint64_t v99 = v84;
      unint64_t v100 = v93;
      *((void *)&v55 + 1) = v85;
      *(void *)&long long v55 = v10;
      LOBYTE(v101) = v89;
      unint64_t v102 = v54;
      unint64_t v103 = v55 >> 32;
      LOBYTE(v104) = BYTE4(v85) & 1;
      uint64_t v105 = v79;
      unint64_t v106 = v12;
      uint64_t v107 = v14;
      uint64_t v108 = v13;
      __int16 v109 = v15 & 0x1FF;
      double v56 = 0.0;
      char v110 = BYTE2(v15);
      double v57 = 0.0;
      char v111 = HIBYTE(v15);
      if (*(double *)&v82 != 0.0)
      {
        double v58 = *(double *)&v84;
        double v59 = *(double *)&v93;
        switch((char)v89)
        {
          case 4:
          case 5:
          case 6:
          case 7:
            double v59 = *(double *)&v84;
            double v58 = *(double *)&v93;
            break;
          default:
            break;
        }
        double v56 = 1.0 / *(double *)&v82 * v58;
        double v57 = 1.0 / *(double *)&v82 * v59;
      }
      outlined copy of VariableBlurStyle.Mask((id)v4, v77, v82, v84, v93, v89, v10, v85, v79, v12, v14, v13, v15, BYTE1(v15));
      v60.CGImageRef value = GraphicsImage.render(at:prefersMask:)((CGSize)__PAIR128__(*(unint64_t *)&v57, *(unint64_t *)&v56), 0).value;
      if (v60.value)
      {
        uint64_t v76 = v60.value;
        _CAFilterSetInput(v16, v76, 10);
        outlined consume of GraphicsFilter((void *)v2, v1, (id)v4, v77, v82, v84, v93, v89, v10, v85, v79, v12, v14, v13, v15, SBYTE2(v15));
        outlined consume of GraphicsFilter((void *)v2, v1, (id)v4, v77, v82, v84, v93, v89, v10, v85, v79, v12, v14, v13, v15, SBYTE2(v15));
        v19.super.super.Class isa = v76;

        goto LABEL_31;
      }
      outlined consume of GraphicsFilter((void *)v2, v1, (id)v4, v77, v82, v84, v93, v89, v10, v85, v79, v12, v14, v13, v15, SBYTE2(v15));
      outlined consume of GraphicsFilter((void *)v2, v1, (id)v4, v77, v82, v84, v93, v89, v10, v85, v79, v12, v14, v13, v15, SBYTE2(v15));
      return v16;
    case 2:
    case 3:
    case 0xF:
      goto LABEL_47;
    case 4:
      unint64_t v61 = HIDWORD(v3);
      unint64_t v62 = HIDWORD(v6);
      unint64_t v64 = HIDWORD(v5);
      unint64_t v67 = HIDWORD(v8);
      unint64_t v70 = HIDWORD(v7);
      unint64_t v75 = HIDWORD(v9);
      uint64_t v90 = *(void *)(v0 + 56);
      *(void *)uint64_t v94 = *(void *)(v0 + 48);
      int v44 = *(void *)(v0 + 40);
      unsigned int v45 = *(void *)(v0 + 32);
      unsigned int v46 = v3;
      unsigned int v86 = v9;
      id v16 = _CAFilterCreate(5u);
      unint64_t v96 = v2;
      uint64_t v97 = v1;
      uint64_t v98 = v4;
      unint64_t v99 = __PAIR64__(v61, v46);
      unint64_t v100 = __PAIR64__(v62, v45);
      int v101 = v44;
      unint64_t v102 = __PAIR64__(v94[0], v64);
      unint64_t v103 = __PAIR64__(v90, v67);
      int v104 = v70;
      uint64_t v105 = v10;
      unint64_t v106 = __PAIR64__(v75, v86);
      id v47 = objc_msgSend(self, sel_valueWithCAColorMatrix_, &v96);
      if (v47)
      {
        float v48 = v47;
        _CAFilterSetInput(v16, v47, 6);

        v19.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
        int v20 = v16;
        Class v21 = v19.super.super.isa;
        int v22 = 14;
LABEL_30:
        _CAFilterSetInput(v20, v21, v22);
LABEL_31:

        return v16;
      }
      else
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        id result = (id)_assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      return result;
    case 5:
      id v16 = _CAFilterCreate(0xCu);
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      v19.super.super.Class isa = (Class)specialized ObjectCache.subscript.getter(*(float *)&v2, *((float *)&v2 + 1), *(float *)&v1, *((float *)&v1 + 1));
      int v20 = v16;
      Class v21 = v19.super.super.isa;
      int v22 = 5;
      goto LABEL_30;
    case 6:
      id v16 = _CAFilterCreate(3u);
      v19.super.super.Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      int v20 = v16;
      Class v21 = v19.super.super.isa;
      int v22 = 2;
      goto LABEL_30;
    case 7:
      id v38 = _CAFilterCreate(7u);
      goto LABEL_28;
    case 8:
      id v38 = _CAFilterCreate(1u);
      goto LABEL_28;
    case 9:
      id v38 = _CAFilterCreate(2u);
      goto LABEL_28;
    case 0xA:
      id v38 = _CAFilterCreate(6u);
LABEL_28:
      id v16 = v38;
      v26.super.super.Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      goto LABEL_29;
    case 0xB:
      id v16 = _CAFilterCreate(6u);
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      unint64_t v27 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v2, *((float *)&v2 + 1), *(float *)&v1, *((float *)&v1 + 1));
      _CAFilterSetInput(v16, v27, 5);

      Class v28 = Float._bridgeToObjectiveC()().super.super.isa;
      _CAFilterSetInput(v16, v28, 1);

      v19.super.super.Class isa = Float._bridgeToObjectiveC()().super.super.isa;
      int v20 = v16;
      Class v21 = v19.super.super.isa;
      int v22 = 3;
      goto LABEL_30;
    case 0xC:
      unint64_t v63 = HIDWORD(v3);
      unint64_t v65 = HIDWORD(v6);
      unint64_t v68 = HIDWORD(v5);
      unint64_t v71 = HIDWORD(v8);
      unint64_t v73 = HIDWORD(v7);
      unint64_t v80 = HIDWORD(v9);
      uint64_t v91 = *(void *)(v0 + 56);
      *(void *)uint64_t v95 = *(void *)(v0 + 48);
      int v50 = *(void *)(v0 + 40);
      unsigned int v51 = *(void *)(v0 + 32);
      unsigned int v52 = v3;
      unsigned int v87 = v9;
      id v16 = _CAFilterCreate(0xEu);
      unint64_t v96 = v2;
      uint64_t v97 = v1;
      uint64_t v98 = v4;
      unint64_t v99 = __PAIR64__(v63, v52);
      unint64_t v100 = __PAIR64__(v65, v51);
      int v101 = v50;
      unint64_t v102 = __PAIR64__(v95[0], v68);
      unint64_t v103 = __PAIR64__(v91, v71);
      int v104 = v73;
      uint64_t v105 = v10;
      unint64_t v106 = __PAIR64__(v80, v87);
      float v53 = (objc_class *)objc_msgSend(self, sel_valueWithCAColorMatrix_, &v96);
      if (!v53) {
        goto LABEL_46;
      }
      v19.super.super.Class isa = v53;
      int v20 = v16;
      Class v21 = v19.super.super.isa;
      int v22 = 6;
      goto LABEL_30;
    case 0xD:
      id v16 = _CAFilterCreate(0xAu);
      type metadata accessor for _ContiguousArrayStorage<Any>();
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_2461C6AA0;
      uint64_t v24 = MEMORY[0x263F8D5C8];
      *(void *)(v23 + 56) = MEMORY[0x263F8D5C8];
      *(_DWORD *)(v23 + 32) = v2;
      *(void *)(v23 + 88) = v24;
      *(_DWORD *)(v23 + 64) = HIDWORD(v2);
      *(void *)(v23 + 120) = v24;
      *(_DWORD *)(v23 + 96) = v1;
      *(void *)(v23 + 152) = v24;
      *(_DWORD *)(v23 + 128) = HIDWORD(v1);
      type metadata accessor for NSArray();
      unint64_t v25 = (void *)MEMORY[0x24C523670](v23);
      _CAFilterSetInput(v16, v25, 17);

      v26.super.super.Class isa = Float._bridgeToObjectiveC()().super.super.isa;
LABEL_29:
      v19.super.super.Class isa = v26.super.super.isa;
      int v20 = v16;
      Class v21 = v19.super.super.isa;
      int v22 = 1;
      goto LABEL_30;
    case 0xE:
      unint64_t v66 = HIDWORD(v3);
      unint64_t v69 = HIDWORD(v6);
      unint64_t v72 = HIDWORD(v5);
      unint64_t v74 = HIDWORD(v8);
      unint64_t v78 = HIDWORD(v7);
      *(void *)uint64_t v81 = *(void *)(v0 + 32);
      uint64_t v88 = *(void *)(v0 + 56);
      *(void *)uint64_t v92 = *(void *)(v0 + 48);
      uint64_t v83 = *(void *)(v0 + 40);
      int v29 = *(void *)(v0 + 24);
      id v16 = _CAFilterCreate(8u);
      type metadata accessor for _ContiguousArrayStorage<Any>();
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_2461C6AA0;
      uint64_t v31 = MEMORY[0x263F8D5C8];
      *(void *)(v30 + 56) = MEMORY[0x263F8D5C8];
      *(_DWORD *)(v30 + 32) = v2;
      *(void *)(v30 + 88) = v31;
      *(_DWORD *)(v30 + 64) = HIDWORD(v2);
      *(void *)(v30 + 120) = v31;
      *(_DWORD *)(v30 + 96) = v1;
      *(void *)(v30 + 152) = v31;
      *(_DWORD *)(v30 + 128) = HIDWORD(v1);
      type metadata accessor for NSArray();
      unint64_t v32 = (void *)MEMORY[0x24C523670](v30);
      _CAFilterSetInput(v16, v32, 16);

      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_2461C6AA0;
      *(void *)(v33 + 56) = v31;
      *(_DWORD *)(v33 + 32) = v4;
      *(void *)(v33 + 88) = v31;
      *(_DWORD *)(v33 + 64) = HIDWORD(v4);
      *(void *)(v33 + 120) = v31;
      *(_DWORD *)(v33 + 96) = v29;
      *(void *)(v33 + 152) = v31;
      *(_DWORD *)(v33 + 128) = v66;
      uint64_t v34 = (void *)MEMORY[0x24C523670]();
      _CAFilterSetInput(v16, v34, 8);

      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_2461C6AA0;
      *(void *)(v35 + 56) = v31;
      *(_DWORD *)(v35 + 32) = v81[0];
      *(void *)(v35 + 88) = v31;
      *(_DWORD *)(v35 + 64) = v69;
      *(void *)(v35 + 120) = v31;
      *(_DWORD *)(v35 + 96) = v83;
      *(void *)(v35 + 152) = v31;
      *(_DWORD *)(v35 + 128) = v72;
      unint64_t v36 = (void *)MEMORY[0x24C523670]();
      _CAFilterSetInput(v16, v36, 4);

      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_2461C6AA0;
      *(void *)(v37 + 56) = v31;
      *(_DWORD *)(v37 + 32) = v92[0];
      *(void *)(v37 + 88) = v31;
      *(_DWORD *)(v37 + 64) = v74;
      *(void *)(v37 + 120) = v31;
      *(_DWORD *)(v37 + 96) = v88;
      *(void *)(v37 + 152) = v31;
      *(_DWORD *)(v37 + 128) = v78;
      v19.super.super.Class isa = (Class)MEMORY[0x24C523670]();
      int v20 = v16;
      Class v21 = v19.super.super.isa;
      int v22 = 0;
      goto LABEL_30;
    case 0x10:
      if (v1 | v2 | v4 | v3 | v6 | v5 | v8 | v7 | v10 | v9 | v11 | v12 | v14 | v13) {
        BOOL v42 = 0;
      }
      else {
        BOOL v42 = v15 == 0;
      }
      if (v42)
      {
        id v43 = _CAFilterCreate(0);
      }
      else if (v15 || v2 != 1 || v4 | v1 | v3 | v6 | v5 | v8 | v7 | v10 | v9 | v11 | v12 | v14 | v13)
      {
        id v43 = _CAFilterCreate(4u);
      }
      else
      {
        id v43 = _CAFilterCreate(0xBu);
      }
      return v43;
    default:
      id v16 = _CAFilterCreate(9u);
      Class v17 = CGFloat._bridgeToObjectiveC()().super.super.isa;
      _CAFilterSetInput(v16, v17, 15);

      Class v18 = Bool._bridgeToObjectiveC()().super.super.isa;
      _CAFilterSetInput(v16, v18, 11);

      v19.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      int v20 = v16;
      Class v21 = v19.super.super.isa;
      int v22 = 7;
      goto LABEL_30;
  }
}

void _CAFilterSetInput(void *a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = a1;
  _CAFilterInputKey(a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [v6 setValue:v5 forKey:v7];
}

__CFString *_CAFilterInputKey(int a1)
{
  unint64_t v2 = @"inputMaskImage";
  switch(a1)
  {
    case 0:
      unint64_t v3 = (id *)MEMORY[0x263F15BF0];
      goto LABEL_19;
    case 1:
      unint64_t v3 = (id *)MEMORY[0x263F15BF8];
      goto LABEL_19;
    case 2:
      unint64_t v3 = (id *)MEMORY[0x263F15C00];
      goto LABEL_19;
    case 3:
      unint64_t v3 = (id *)MEMORY[0x263F15C08];
      goto LABEL_19;
    case 4:
      unint64_t v3 = (id *)MEMORY[0x263F15C18];
      goto LABEL_19;
    case 5:
      unint64_t v3 = (id *)MEMORY[0x263F15C20];
      goto LABEL_19;
    case 6:
      unint64_t v3 = (id *)MEMORY[0x263F15C30];
      goto LABEL_19;
    case 7:
      unint64_t v3 = (id *)MEMORY[0x263F15C38];
      goto LABEL_19;
    case 8:
      unint64_t v3 = (id *)MEMORY[0x263F15C50];
      goto LABEL_19;
    case 9:
      unint64_t v3 = (id *)MEMORY[0x263F15C58];
      goto LABEL_19;
    case 11:
      unint64_t v3 = (id *)MEMORY[0x263F15C68];
      goto LABEL_19;
    case 12:
      unint64_t v2 = @"inputNormalizeEdgesTransparent";
      break;
    case 13:
      unint64_t v2 = @"inputPremultipliedAlpha";
      break;
    case 14:
      unint64_t v3 = (id *)MEMORY[0x263F15C70];
      goto LABEL_19;
    case 15:
      unint64_t v3 = (id *)MEMORY[0x263F15C80];
      goto LABEL_19;
    case 16:
      unint64_t v3 = (id *)MEMORY[0x263F15C90];
      goto LABEL_19;
    case 17:
      unint64_t v3 = (id *)MEMORY[0x263F15CB0];
LABEL_19:
      unint64_t v2 = (__CFString *)*v3;
      break;
    default:
      break;
  }

  return v2;
}

void outlined consume of VariableBlurStyle.Mask(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned __int8 a14)
{
  if (a14 << 8 != 512) {
    outlined consume of GraphicsImage.Contents?(a1, a2);
  }
}

id _CAFilterCreate(unsigned int a1)
{
  unint64_t v2 = (void *)MEMORY[0x263F157C8];
  if (a1 <= 0xE) {
    id v1 = **((id **)&unk_2651D4410 + (int)a1);
  }
  unint64_t v3 = [v2 filterWithType:v1];

  return v3;
}

float specialized _ColorMatrix.init(colorMultiply:premultiplied:)@<S0>(char a1@<W0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  float v12 = -a3;
  if (a3 > 0.0) {
    float v12 = a3;
  }
  if (v12 <= 0.0031308)
  {
    float v13 = v12 * 12.92;
  }
  else
  {
    float v13 = 1.0;
    if (v12 != 1.0) {
      float v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
    }
  }
  float v14 = -a4;
  if (a4 > 0.0) {
    float v14 = a4;
  }
  if (v14 <= 0.0031308)
  {
    float v15 = v14 * 12.92;
  }
  else
  {
    float v15 = 1.0;
    if (v14 != 1.0) {
      float v15 = (float)(powf(v14, 0.41667) * 1.055) + -0.055;
    }
  }
  float v16 = -a5;
  if (a5 > 0.0) {
    float v16 = a5;
  }
  if (v16 <= 0.0031308)
  {
    float v17 = v16 * 12.92;
  }
  else
  {
    float v17 = 1.0;
    if (v16 != 1.0) {
      float v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
    }
  }
  float v18 = -v15;
  if (a4 > 0.0) {
    float v18 = v15;
  }
  float v19 = -v13;
  if (a3 > 0.0) {
    float v19 = v13;
  }
  if (a5 <= 0.0) {
    float v17 = -v17;
  }
  float v20 = 1.0;
  if (a1) {
    float v20 = a6;
  }
  *(float *)a2 = v20 * v19;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(float *)(a2 + 24) = v20 * v18;
  *(void *)(a2 + 36) = 0;
  *(void *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 44) = 0;
  float result = v20 * v17;
  *(float *)(a2 + 48) = v20 * v17;
  *(void *)(a2 + 60) = 0;
  *(void *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 68) = 0;
  *(float *)(a2 + 72) = a6;
  *(_DWORD *)(a2 + 76) = 0;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Any>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Any>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>);
    }
  }
}

unint64_t type metadata accessor for NSArray()
{
  unint64_t result = lazy cache variable for type metadata for NSArray;
  if (!lazy cache variable for type metadata for NSArray)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  }
  return result;
}

CGImageRef_optional __swiftcall GraphicsImage.render(at:prefersMask:)(CGSize at, Swift::Bool prefersMask)
{
  result.CGImageRef value = 0;
  if (at.width > 0.0 && at.height > 0.0 && *(unsigned __int8 *)(v2 + 8) != 255)
  {
    id v5 = *(void **)v2;
    double v6 = *(double *)(v2 + 16);
    double v7 = *(double *)(v2 + 24);
    double v8 = *(double *)(v2 + 32);
    result.CGImageRef value = 0;
    switch(*(unsigned char *)(v2 + 8))
    {
      case 1:
      case 4:
      case 5:
        return result;
      case 2:
        unint64_t v9 = (void *)v5[2];
        uint64_t v10 = (void *)v5[4];
        uint64_t v11 = (void *)v5[6];
        uint64_t v12 = GraphicsImage.renderedSize(at:)(at.width, at.height);
        uint64_t v14 = v13;
        char v16 = v15;
        outlined copy of GraphicsImage.Contents?(v5, 2);
        id v17 = v9;
        outlined copy of Image.Location(v10);
        id v18 = v11;
        id v19 = objc_msgSend(v17, sel_glyph);
        if (v19)
        {
          float v20 = v19;
          int v21 = v16 & 1;
          if (v21) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = *(void *)&v6;
          }
          if (v21)
          {
            uint64_t v14 = 0;
            uint64_t v12 = 0;
          }
          objc_msgSend(v17, sel_variableValue);
          *(float *)&unsigned int v24 = v23;
          uint64_t v25 = v24;
          if ((*(void *)&v23 & 0x7FF0000000000000) == 0x7FF0000000000000) {
            uint64_t v25 = 0;
          }
          NSNumber v26 = (CGImage *)CUINamedVectorGlyph.image(at:value:)(v12, v14, v22, v21, v25 | ((unint64_t)((*(void *)&v23 & 0x7FF0000000000000) == 0x7FF0000000000000) << 32));

          outlined consume of Image.Location(v10);
          outlined consume of GraphicsImage.Contents?(v5, 2);
          result.CGImageRef value = v26;
        }
        else
        {

          outlined consume of Image.Location(v10);
          outlined consume of GraphicsImage.Contents?(v5, 2);
          result.CGImageRef value = 0;
        }
        break;
      case 3:
        uint64_t v28 = v5[2];
        unint64_t v27 = (void *)v5[3];
        *(double *)&uint64_t v29 = COERCE_DOUBLE(GraphicsImage.renderedSize(at:)(at.width, at.height));
        if (v31)
        {
          double v32 = 0.0;
          double v33 = 0.0;
          if (v6 != 0.0)
          {
            double v32 = v7 * (1.0 / v6);
            double v33 = 1.0 / v6 * v8;
          }
        }
        else
        {
          double v32 = *(double *)&v29;
          double v33 = v30;
        }
        uint64_t v34 = *(uint64_t (**)(Swift::Bool, double, double, double))(*(void *)v28 + 104);
        outlined copy of GraphicsImage.Contents?(v5, 3);
        swift_retain();
        outlined copy of Image.Location?(v27);
        swift_bridgeObjectRetain();
        uint64_t v35 = (CGImage *)v34(prefersMask, v32, v33, v6);
        swift_release();
        outlined consume of Image.Location?(v27);
        swift_bridgeObjectRelease();
        outlined consume of GraphicsImage.Contents?(v5, 3);
        result.CGImageRef value = v35;
        break;
      default:
        outlined copy of GraphicsImage.Contents?(*(id *)v2, 0);
        result.CGImageRef value = (CGImageRef)v5;
        break;
    }
  }
  return result;
}

uint64_t initializeWithCopy for VariableBlurStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  unint64_t v3 = (_OWORD *)(a1 + 16);
  unint64_t v4 = (id *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0xFF00) == 0x200)
  {
    long long v6 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v6;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    long long v7 = *(_OWORD *)(a2 + 32);
    *unint64_t v3 = *(_OWORD *)v4;
    *(_OWORD *)(a1 + 32) = v7;
    long long v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v8;
  }
  else
  {
    int v10 = *(unsigned __int8 *)(a2 + 24);
    if (v10 == 255)
    {
      *(void *)unint64_t v3 = *v4;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    }
    else
    {
      id v11 = *v4;
      outlined copy of GraphicsImage.Contents(*v4, *(unsigned char *)(a2 + 24));
      *(void *)(a1 + 16) = v11;
      *(unsigned char *)(a1 + 24) = v10;
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
    long long v12 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v12;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(unsigned char *)(a1 + 113) = BYTE1(v5);
    *(unsigned char *)(a1 + 114) = BYTE2(v5);
    *(unsigned char *)(a1 + 115) = HIBYTE(v5);
  }
  return a1;
}

void *static SymbolVariants.circle.getter@<X0>(void *result@<X0>, unsigned char *a2@<X1>, char *a3@<X2>, unsigned char *a4@<X8>)
{
  if (*result != -1) {
    CGImageRef_optional result = (void *)swift_once();
  }
  char v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;
  return result;
}

uint64_t MergeTraits.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v3 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  uint64_t v13 = v3;
  uint64_t result = AGGraphGetValue();
  uint64_t v5 = *(void *)(*(void *)result + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)result + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of AnyTrackedValue(v6, (uint64_t)v10);
      uint64_t v7 = v11;
      uint64_t v8 = v12;
      unint64_t v9 = __swift_project_boxed_opaque_existential_1(v10, v11);
      ViewTraitCollection.setErasedValue<A>(trait:)((uint64_t)v9, v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v6 += 40;
      --v5;
    }
    while (v5);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v13;
  }
  *a2 = v3;
  return result;
}

uint64_t ViewTraitCollection.setErasedValue<A>(trait:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v32 = *(void *)(a2 - 8);
  uint64_t v33 = a3;
  MEMORY[0x270FA5388](a1);
  double v30 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9.n128_f64[0] = MEMORY[0x270FA5388](v8);
  char v31 = (char *)&v30 - v10;
  uint64_t v34 = v3;
  uint64_t v11 = *(void *)(*v3 + 16);
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    char v15 = (void (*)(char *, uint64_t, uint64_t, __n128))(v33 + 8);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    while (1)
    {
      if (v13 >= *(void *)(*v34 + 16))
      {
        __break(1u);
        goto LABEL_15;
      }
      outlined init with copy of AnyTrackedValue(*v34 + v12 * 8 + 32, (uint64_t)v35);
      uint64_t v16 = v36;
      uint64_t v17 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
      uint64_t v3 = (uint64_t *)v14(a2, v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      if ((uint64_t *)v4 == v3) {
        break;
      }
      ++v13;
      v12 += 5;
      if (v11 == v13) {
        goto LABEL_6;
      }
    }
    uint64_t v24 = MEMORY[0x263F8EE58];
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v33 + 16))(v35, MEMORY[0x263F8EE58] + 8, a2);
    uint64_t v25 = v34;
    NSNumber v26 = (void *)*v34;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v25 = (uint64_t)v26;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      NSNumber v26 = (void *)result;
      *uint64_t v34 = result;
    }
    if (v13 >= v26[2])
    {
      __break(1u);
    }
    else
    {
      uint64_t v27 = v26[v12 + 7];
      uint64_t v28 = v26[v12 + 8];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v26[v12 + 4], v27);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v28 + 24))(v35, v24 + 8, v27, v28);
      *uint64_t v34 = (uint64_t)v26;
    }
  }
  else
  {
LABEL_6:
    uint64_t v4 = (uint64_t)v31;
    unint64_t v13 = v32;
    char v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v32 + 16);
    v15(v31, a1, a2, v9);
    id v18 = v34;
    uint64_t v3 = (uint64_t *)*v34;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *id v18 = (uint64_t)v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_15:
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      *uint64_t v34 = (uint64_t)v3;
    }
    unint64_t v21 = v3[2];
    unint64_t v20 = v3[3];
    if (v21 >= v20 >> 1)
    {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v3);
      *uint64_t v34 = (uint64_t)v29;
    }
    uint64_t v22 = (uint64_t)v30;
    ((void (*)(char *, uint64_t, uint64_t))v15)(v30, v4, a2);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v22, v34, a2, v33);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v4, a2);
  }
  return result;
}

uint64_t specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  void (*v4)(unint64_t *__return_ptr, uint64_t, long long *);
  long long v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int OffsetAttribute2;
  uint64_t v16;
  int v17;
  int v18;
  long long v19;
  long long v20;
  uint64_t result;
  uint64_t KeyPath;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v41;
  unsigned int v42;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v4 = a3;
  double v56 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(_OWORD *)(a2 + 32);
  unint64_t v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v6;
  float v53 = *(_OWORD *)a2;
  uint64_t v7 = DWORD1(v6);
  if ((BYTE4(v6) & 0x22) != 0)
  {
    BOOL v42 = a1;
    uint64_t v8 = *(void *)a2;
    __n128 v9 = *(_DWORD *)(a2 + 8);
    int v44 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 48);
    unint64_t v13 = *(void *)(a2 + 56);
    uint64_t v14 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    Class v41 = *(_DWORD *)(a2 + 68);
    uint64_t v16 = *(void *)(a2 + 76);
    if ((BYTE4(v6) & 0x20) != 0)
    {
      id v38 = *(_DWORD *)(a2 + 36);
      uint64_t v37 = *(_DWORD *)(a2 + 32);
      float v39 = *(void *)a2;
      KeyPath = swift_getKeyPath();
      double v23 = v9;
      uint64_t v24 = v54;
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      uint64_t v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      NSNumber v26 = *(_DWORD *)(a2 + 60);
      uint64_t v27 = *(_DWORD *)(v24 + 16);
      __n128 v9 = v23;
      uint64_t v28 = *(_DWORD *)(a2 + 76);
      uint64_t v29 = *MEMORY[0x263F288F8];
      *(void *)&float v48 = __PAIR64__(v25, v42);
      *((void *)&v48 + 1) = __PAIR64__(v14, OffsetAttribute2);
      *(void *)&float v49 = __PAIR64__(v27, v26);
      *((void *)&v49 + 1) = __PAIR64__(v28, v29);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(&lazy protocol witness table cache variable for type UnaryPositionAwareChildGeometry<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareChildGeometry<A>, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      uint64_t v8 = v39;
      uint64_t v4 = a3;
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      uint64_t v14 = AGGraphCreateOffsetAttribute2();
      uint64_t v17 = v37 | 0x18;
      id v18 = v38 | 2;
    }
    else
    {
      uint64_t v17 = v55;
      outlined retain of _ViewInputs(a2);
      id v18 = v7;
    }
    *(void *)&float v48 = v8;
    DWORD2(v48) = v9;
    *(void *)&float v49 = v44;
    *((void *)&v49 + 1) = v10;
    *(void *)&int v50 = __PAIR64__(v18, v17);
    *((void *)&v50 + 1) = v11;
    *(void *)&unsigned int v51 = v12;
    *((void *)&v51 + 1) = v13;
    *(_DWORD *)unsigned int v52 = v14;
    *(_DWORD *)&v52[4] = v41;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    double v30 = swift_bridgeObjectRetain();
    v4(&v45, v30, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    char v31 = swift_release();
    unint64_t v32 = v45;
    uint64_t v33 = v46;
    uint64_t v34 = v47;
    if ((v7 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v31);
      type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      MEMORY[0x270FA5388](v35);
      AGGraphMutateAttribute();
    }
    if ((v7 & 2) != 0)
    {
      uint64_t v36 = v54;
      swift_beginAccess();
      unsigned int v45 = __PAIR64__(*(_DWORD *)(v36 + 16), v42);
      unsigned int v46 = v34;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutComputer);
      lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(&lazy protocol witness table cache variable for type UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>, &lazy cache variable for type metadata for UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutComputer);
      uint64_t v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      v33 |= 0x80u;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
    }
    *(void *)a4 = v32;
    *(_DWORD *)(a4 + 8) = v33;
    *(_DWORD *)(a4 + 12) = v34;
  }
  else
  {
    id v19 = *(_OWORD *)(a2 + 48);
    int v50 = *(_OWORD *)(a2 + 32);
    unsigned int v51 = v19;
    *(_OWORD *)unsigned int v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    unint64_t v20 = *(_OWORD *)(a2 + 16);
    float v48 = *(_OWORD *)a2;
    float v49 = v20;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  void (*v4)(unint64_t *__return_ptr, uint64_t, long long *);
  long long v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int OffsetAttribute2;
  uint64_t v16;
  int v17;
  int v18;
  long long v19;
  long long v20;
  uint64_t result;
  uint64_t KeyPath;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v41;
  unsigned int v42;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v4 = a3;
  double v56 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(_OWORD *)(a2 + 32);
  unint64_t v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v6;
  float v53 = *(_OWORD *)a2;
  uint64_t v7 = DWORD1(v6);
  if ((BYTE4(v6) & 0x22) != 0)
  {
    BOOL v42 = a1;
    uint64_t v8 = *(void *)a2;
    __n128 v9 = *(_DWORD *)(a2 + 8);
    int v44 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 48);
    unint64_t v13 = *(void *)(a2 + 56);
    uint64_t v14 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    Class v41 = *(_DWORD *)(a2 + 68);
    uint64_t v16 = *(void *)(a2 + 76);
    if ((BYTE4(v6) & 0x20) != 0)
    {
      id v38 = *(_DWORD *)(a2 + 36);
      uint64_t v37 = *(_DWORD *)(a2 + 32);
      float v39 = *(void *)a2;
      KeyPath = swift_getKeyPath();
      double v23 = v9;
      uint64_t v24 = v54;
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      uint64_t v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      NSNumber v26 = *(_DWORD *)(a2 + 60);
      uint64_t v27 = *(_DWORD *)(v24 + 16);
      __n128 v9 = v23;
      uint64_t v28 = *(_DWORD *)(a2 + 76);
      uint64_t v29 = *MEMORY[0x263F288F8];
      *(void *)&float v48 = __PAIR64__(v25, v42);
      *((void *)&v48 + 1) = __PAIR64__(v14, OffsetAttribute2);
      *(void *)&float v49 = __PAIR64__(v27, v26);
      *((void *)&v49 + 1) = __PAIR64__(v28, v29);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(&lazy protocol witness table cache variable for type UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareChildGeometry<A>, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      uint64_t v8 = v39;
      uint64_t v4 = a3;
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      uint64_t v14 = AGGraphCreateOffsetAttribute2();
      uint64_t v17 = v37 | 0x18;
      id v18 = v38 | 2;
    }
    else
    {
      uint64_t v17 = v55;
      outlined retain of _ViewInputs(a2);
      id v18 = v7;
    }
    *(void *)&float v48 = v8;
    DWORD2(v48) = v9;
    *(void *)&float v49 = v44;
    *((void *)&v49 + 1) = v10;
    *(void *)&int v50 = __PAIR64__(v18, v17);
    *((void *)&v50 + 1) = v11;
    *(void *)&unsigned int v51 = v12;
    *((void *)&v51 + 1) = v13;
    *(_DWORD *)unsigned int v52 = v14;
    *(_DWORD *)&v52[4] = v41;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    double v30 = swift_bridgeObjectRetain();
    v4(&v45, v30, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    char v31 = swift_release();
    unint64_t v32 = v45;
    uint64_t v33 = v46;
    uint64_t v34 = v47;
    if ((v7 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v31);
      type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      MEMORY[0x270FA5388](v35);
      AGGraphMutateAttribute();
    }
    if ((v7 & 2) != 0)
    {
      uint64_t v36 = v54;
      swift_beginAccess();
      unsigned int v45 = __PAIR64__(*(_DWORD *)(v36 + 16), v42);
      unsigned int v46 = v34;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutComputer);
      lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(&lazy protocol witness table cache variable for type UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>, &lazy cache variable for type metadata for UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutComputer);
      uint64_t v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      v33 |= 0x80u;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
    }
    *(void *)a4 = v32;
    *(_DWORD *)(a4 + 8) = v33;
    *(_DWORD *)(a4 + 12) = v34;
  }
  else
  {
    id v19 = *(_OWORD *)(a2 + 48);
    int v50 = *(_OWORD *)(a2 + 32);
    unsigned int v51 = v19;
    *(_OWORD *)unsigned int v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    unint64_t v20 = *(_OWORD *)(a2 + 16);
    float v48 = *(_OWORD *)a2;
    float v49 = v20;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

void type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout;
  if (!lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout;
  if (!lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for UnaryPositionAwareLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UnaryPositionAwareChildGeometry()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout;
  if (!lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout;
  if (!lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout);
  }
  return result;
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance Path@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

uint64_t specialized Shape.layoutDirectionBehavior.getter@<X0>(char *a1@<X8>)
{
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v2 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504) {
    uint64_t result = dyld_program_minos_at_least();
  }
  else {
    uint64_t result = dword_26B0F4500 >= v2;
  }
  if (result) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  *a1 = v4;
  return result;
}

void storeEnumTagSinglePayload for _MatchedGeometryEffect(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(void *)(v21 + 8) = 0;
                *(void *)(v21 + 16) = 0;
                *(unsigned char *)(v21 + 24) = 0;
                *(void *)unint64_t v21 = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v21 + 24) = a2 + 1;
              }
            }
            else
            {
              unint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in AnchorTransform<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t Text.textScale(_:isEnabled:)(char *a1, char a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  char v11 = *a1;
  type metadata accessor for TextScaleModifier();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = a2;
  *(unsigned char *)(v12 + 17) = v11;
  outlined copy of Text.Storage(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
  }
  unint64_t v14 = a6[2];
  unint64_t v13 = a6[3];
  if (v14 >= v13 >> 1) {
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, a6);
  }
  a6[2] = v14 + 1;
  int v15 = &a6[2 * v14];
  v15[4] = v12;
  *((unsigned char *)v15 + 40) = -64;
  swift_release();
  return a3;
}

uint64_t type metadata accessor for TextScaleModifier()
{
  return self;
}

ValueMetadata *type metadata accessor for _ViewList_SublistTransform()
{
  return &type metadata for _ViewList_SublistTransform;
}

ValueMetadata *type metadata accessor for AccessibilityProperties()
{
  return &type metadata for AccessibilityProperties;
}

ValueMetadata *type metadata accessor for ScrapeableContent.Content()
{
  return &type metadata for ScrapeableContent.Content;
}

unint64_t instantiation function for generic protocol witness table for _SafeAreaRegionsIgnoringLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GroupElementsOfContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

double key path getter for EnvironmentValues.backgroundMaterial : EnvironmentValues@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  swift_retain();
  uint64_t v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, (uint64_t *)&v6);
  swift_release();
  swift_release();
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t specialized EnvironmentValues.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(a1, a3);
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find<A>(_:key:)(v5);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      uint64_t v8 = *(void *)(v6 + 80);
      outlined copy of Material?(v7, v8);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 255;
    }
    *a3 = v7;
    a3[1] = v8;
  }
  swift_release();

  return swift_release();
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>);
    }
  }
}

uint64_t specialized StaticBody.updateValue()(void (*a1)(uint64_t), void (*a2)(char *, uint64_t))
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  Class v40 = (char *)&v37 - v10;
  MEMORY[0x270FA5388](v11);
  Class v41 = (char *)&v37 - v12;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  int v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  int v18 = (char *)&v37 - v17;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = CurrentAttribute;
    id v38 = a2;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  float v39 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v18, 1, 1, v5);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v21 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v18;
  a1(1);
  *(void *)(StatusReg + 848) = v21;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v18, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  }
  else
  {
    double v23 = v41;
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v37(v41, v15, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v40, v23, v5);
    swift_beginAccess();
    uint64_t v24 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, (unint64_t)v24);
      static ObservationRegistrar.lastestAccessLists = v24;
    }
    unint64_t v27 = *((void *)v24 + 2);
    unint64_t v26 = *((void *)v24 + 3);
    if (v27 >= v26 >> 1)
    {
      uint64_t v24 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, (unint64_t)v24);
      static ObservationRegistrar.lastestAccessLists = v24;
    }
    *((void *)v24 + 2) = v27 + 1;
    v37(&v24[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v27], v40, v5);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v41, v5);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v18);
  uint64_t v28 = p_cache[338];
  uint64_t v29 = v28[2];
  if (v29)
  {
    unint64_t v32 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v31 = v6 + 16;
    double v30 = v32;
    uint64_t v33 = (char *)v28 + ((*(unsigned __int8 *)(v31 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 64));
    uint64_t v34 = *(void *)(v31 + 56);
    Class v41 = (char *)p_cache[338];
    swift_bridgeObjectRetain();
    uint64_t v35 = v38;
    do
    {
      v30(v8, v33, v5);
      v35(v8, v2);
      (*(void (**)(char *, uint64_t))(v31 - 8))(v8, v5);
      v33 += v34;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v39;
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of CoordinateSpaceGesture<CGFloat>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI22CoordinateSpaceGestureVy12CoreGraphics7CGFloatVGWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(long long *a1, char a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v34 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      long long v33 = a1[1];
      long long v42 = *a1;
      long long v43 = v33;
      uint64_t v44 = *((void *)a1 + 4);
      __int16 v45 = 256;
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return;
    }
    int v36 = v10;
    uint64_t v37 = a1;
    uint64_t v38 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, v9, v41);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v40 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v39 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v34[1] = inited;
        uint64_t v35 = v9;
        uint64_t v17 = v36 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!*((void *)&v43 + 1))
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
          uint64_t v32 = v41;
          v31(v35, v41);
          v31(v6, v32);
          a1 = v37;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v41;
          uint64_t v24 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v39;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v41;
            uint64_t v30 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  long long v33;
  void v34[2];
  char *v35;
  int v36;
  long long *v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;

  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v34 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      long long v33 = a1[1];
      long long v42 = *a1;
      long long v43 = v33;
      uint64_t v44 = *((void *)a1 + 4);
      __int16 v45 = 256;
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return;
    }
    int v36 = v10;
    uint64_t v37 = a1;
    uint64_t v38 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, v9, v41);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v40 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v39 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v34[1] = inited;
        uint64_t v35 = v9;
        uint64_t v17 = v36 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!*((void *)&v43 + 1))
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
          uint64_t v32 = v41;
          v31(v35, v41);
          v31(v6, v32);
          a1 = v37;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v41;
          uint64_t v24 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v39;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v41;
            uint64_t v30 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  long long v33;
  void v34[2];
  char *v35;
  int v36;
  long long *v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  char v44;
  __int16 v45;
  uint64_t v46;

  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v34 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      long long v33 = a1[1];
      long long v42 = *a1;
      long long v43 = v33;
      uint64_t v44 = *((unsigned char *)a1 + 32);
      __int16 v45 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v36 = v10;
    uint64_t v37 = a1;
    uint64_t v38 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, v9, v41);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v40 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v39 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v34[1] = inited;
        uint64_t v35 = v9;
        uint64_t v17 = v36 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!*((void *)&v43 + 1))
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
          uint64_t v32 = v41;
          v31(v35, v41);
          v31(v6, v32);
          a1 = v37;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v41;
          uint64_t v24 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v39;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v41;
            uint64_t v30 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  long long v33;
  void v34[2];
  char *v35;
  int v36;
  long long *v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;

  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v34 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      long long v33 = a1[1];
      long long v42 = *a1;
      long long v43 = v33;
      uint64_t v44 = *((void *)a1 + 4);
      __int16 v45 = 256;
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return;
    }
    int v36 = v10;
    uint64_t v37 = a1;
    uint64_t v38 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, v9, v41);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v40 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v39 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v34[1] = inited;
        uint64_t v35 = v9;
        uint64_t v17 = v36 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!*((void *)&v43 + 1))
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
          uint64_t v32 = v41;
          v31(v35, v41);
          v31(v6, v32);
          a1 = v37;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v41;
          uint64_t v24 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v39;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v41;
            uint64_t v30 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  long long v33;
  void v34[2];
  char *v35;
  int v36;
  long long *v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;

  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v34 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      long long v33 = a1[1];
      long long v42 = *a1;
      long long v43 = v33;
      uint64_t v44 = *((void *)a1 + 4);
      __int16 v45 = 256;
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return;
    }
    int v36 = v10;
    uint64_t v37 = a1;
    uint64_t v38 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, v9, v41);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v40 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v39 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v34[1] = inited;
        uint64_t v35 = v9;
        uint64_t v17 = v36 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!*((void *)&v43 + 1))
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
          uint64_t v32 = v41;
          v31(v35, v41);
          v31(v6, v32);
          a1 = v37;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v41;
          uint64_t v24 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v39;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v41;
            uint64_t v30 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(char a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v37 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v31 - v6;
  if (a1)
  {
    int v8 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v38[0] = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v33 = v8;
    uint64_t v34 = v2;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    int v10 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v12 = v11;
    uint64_t v13 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v14 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v10;
    uint64_t v15 = inited + 32;
    *(void *)(inited + 64) = v14;
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v13;
    *(void *)(inited + 104) = v14;
    *(void *)(inited + 80) = v16;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v17 = v34 + 16;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v4, v7, v37);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v36 = v18;
    uint64_t v19 = swift_initStackObject();
    long long v35 = xmmword_2461BE2B0;
    *(_OWORD *)(v19 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v31 = inited;
        uint64_t v32 = v7;
        uint64_t v15 = v33 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(void *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v4);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v39)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v29 = *(void (**)(char *, uint64_t))(v34 + 8);
          uint64_t v30 = v37;
          v29(v32, v37);
          v29(v4, v30);
          goto LABEL_15;
        }
        int v10 = (void (**)(char *, uint64_t, uint64_t))(v17 + 8);
        outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v21 = v37;
          uint64_t v22 = __swift_project_value_buffer(v37, (uint64_t)static OSSignpostID.continuation);
          uint64_t v23 = *v10;
          (*v10)(v4, v22, v21);
          uint64_t v24 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v25 = swift_initStackObject();
            *(_OWORD *)(v25 + 16) = v35;
            *(_OWORD *)(v25 + 32) = 0u;
            *(_OWORD *)(v25 + 48) = 0u;
            *(_OWORD *)(v25 + 64) = 0u;
            *(_OWORD *)(v25 + 80) = 0u;
            *(_OWORD *)(v25 + 96) = 0u;
            *(_OWORD *)(v25 + 128) = 0u;
            *(void *)(v25 + 144) = 0;
            *(_OWORD *)(v25 + 112) = 0u;
            uint64_t v26 = v25 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v25, v15, (uint64_t)v4);
            outlined init with copy of CVarArg?(v26, (uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v24);
            swift_bridgeObjectRelease();
            if (!v39) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v24);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v27 = v37;
            uint64_t v28 = __swift_project_value_buffer(v37, (uint64_t)static OSSignpostID.continuation);
            v23(v4, v28, v27);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t inited;
  void (**v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  long long v35;
  uint64_t v36;
  uint64_t v37;
  _WORD v38[12];
  uint64_t v39;
  uint64_t v40;

  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v37 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v31 - v6;
  if (a1)
  {
    int v8 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v38[0] = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v33 = v8;
    uint64_t v34 = v2;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    int v10 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v12 = v11;
    uint64_t v13 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v14 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v10;
    uint64_t v15 = inited + 32;
    *(void *)(inited + 64) = v14;
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v13;
    *(void *)(inited + 104) = v14;
    *(void *)(inited + 80) = v16;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v17 = v34 + 16;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v4, v7, v37);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v36 = v18;
    uint64_t v19 = swift_initStackObject();
    long long v35 = xmmword_2461BE2B0;
    *(_OWORD *)(v19 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v31 = inited;
        uint64_t v32 = v7;
        uint64_t v15 = v33 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(void *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v4);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v39)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v29 = *(void (**)(char *, uint64_t))(v34 + 8);
          uint64_t v30 = v37;
          v29(v32, v37);
          v29(v4, v30);
          goto LABEL_15;
        }
        int v10 = (void (**)(char *, uint64_t, uint64_t))(v17 + 8);
        outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v21 = v37;
          uint64_t v22 = __swift_project_value_buffer(v37, (uint64_t)static OSSignpostID.continuation);
          uint64_t v23 = *v10;
          (*v10)(v4, v22, v21);
          uint64_t v24 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v25 = swift_initStackObject();
            *(_OWORD *)(v25 + 16) = v35;
            *(_OWORD *)(v25 + 32) = 0u;
            *(_OWORD *)(v25 + 48) = 0u;
            *(_OWORD *)(v25 + 64) = 0u;
            *(_OWORD *)(v25 + 80) = 0u;
            *(_OWORD *)(v25 + 96) = 0u;
            *(_OWORD *)(v25 + 128) = 0u;
            *(void *)(v25 + 144) = 0;
            *(_OWORD *)(v25 + 112) = 0u;
            uint64_t v26 = v25 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v25, v15, (uint64_t)v4);
            outlined init with copy of CVarArg?(v26, (uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v24);
            swift_bridgeObjectRelease();
            if (!v39) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v24);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v27 = v37;
            uint64_t v28 = __swift_project_value_buffer(v37, (uint64_t)static OSSignpostID.continuation);
            v23(v4, v28, v27);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t inited;
  void (**v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  long long v35;
  uint64_t v36;
  uint64_t v37;
  _WORD v38[12];
  uint64_t v39;
  uint64_t v40;

  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v37 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v31 - v6;
  if (a1)
  {
    int v8 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v38[0] = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v33 = v8;
    uint64_t v34 = v2;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    int v10 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v12 = v11;
    uint64_t v13 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v14 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v10;
    uint64_t v15 = inited + 32;
    *(void *)(inited + 64) = v14;
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v13;
    *(void *)(inited + 104) = v14;
    *(void *)(inited + 80) = v16;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v17 = v34 + 16;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v4, v7, v37);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v36 = v18;
    uint64_t v19 = swift_initStackObject();
    long long v35 = xmmword_2461BE2B0;
    *(_OWORD *)(v19 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v31 = inited;
        uint64_t v32 = v7;
        uint64_t v15 = v33 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(void *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v4);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v39)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v29 = *(void (**)(char *, uint64_t))(v34 + 8);
          uint64_t v30 = v37;
          v29(v32, v37);
          v29(v4, v30);
          goto LABEL_15;
        }
        int v10 = (void (**)(char *, uint64_t, uint64_t))(v17 + 8);
        outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v21 = v37;
          uint64_t v22 = __swift_project_value_buffer(v37, (uint64_t)static OSSignpostID.continuation);
          uint64_t v23 = *v10;
          (*v10)(v4, v22, v21);
          uint64_t v24 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v25 = swift_initStackObject();
            *(_OWORD *)(v25 + 16) = v35;
            *(_OWORD *)(v25 + 32) = 0u;
            *(_OWORD *)(v25 + 48) = 0u;
            *(_OWORD *)(v25 + 64) = 0u;
            *(_OWORD *)(v25 + 80) = 0u;
            *(_OWORD *)(v25 + 96) = 0u;
            *(_OWORD *)(v25 + 128) = 0u;
            *(void *)(v25 + 144) = 0;
            *(_OWORD *)(v25 + 112) = 0u;
            uint64_t v26 = v25 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v25, v15, (uint64_t)v4);
            outlined init with copy of CVarArg?(v26, (uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v24);
            swift_bridgeObjectRelease();
            if (!v39) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v24);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v27 = v37;
            uint64_t v28 = __swift_project_value_buffer(v37, (uint64_t)static OSSignpostID.continuation);
            v23(v4, v28, v27);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t inited;
  void (**v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  long long v35;
  uint64_t v36;
  uint64_t v37;
  _WORD v38[12];
  uint64_t v39;
  uint64_t v40;

  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v37 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v31 - v6;
  if (a1)
  {
    int v8 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v38[0] = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v33 = v8;
    uint64_t v34 = v2;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    int v10 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v12 = v11;
    uint64_t v13 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v14 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v10;
    uint64_t v15 = inited + 32;
    *(void *)(inited + 64) = v14;
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v13;
    *(void *)(inited + 104) = v14;
    *(void *)(inited + 80) = v16;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v17 = v34 + 16;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v4, v7, v37);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v36 = v18;
    uint64_t v19 = swift_initStackObject();
    long long v35 = xmmword_2461BE2B0;
    *(_OWORD *)(v19 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v31 = inited;
        uint64_t v32 = v7;
        uint64_t v15 = v33 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(void *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v15, v20, v15, (uint64_t)v4);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v39)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v29 = *(void (**)(char *, uint64_t))(v34 + 8);
          uint64_t v30 = v37;
          v29(v32, v37);
          v29(v4, v30);
          goto LABEL_15;
        }
        int v10 = (void (**)(char *, uint64_t, uint64_t))(v17 + 8);
        outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v21 = v37;
          uint64_t v22 = __swift_project_value_buffer(v37, (uint64_t)static OSSignpostID.continuation);
          uint64_t v23 = *v10;
          (*v10)(v4, v22, v21);
          uint64_t v24 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v25 = swift_initStackObject();
            *(_OWORD *)(v25 + 16) = v35;
            *(_OWORD *)(v25 + 32) = 0u;
            *(_OWORD *)(v25 + 48) = 0u;
            *(_OWORD *)(v25 + 64) = 0u;
            *(_OWORD *)(v25 + 80) = 0u;
            *(_OWORD *)(v25 + 96) = 0u;
            *(_OWORD *)(v25 + 128) = 0u;
            *(void *)(v25 + 144) = 0;
            *(_OWORD *)(v25 + 112) = 0u;
            uint64_t v26 = v25 + 112;
            specialized withKDebugValues(_:_:closure:)(v15, v25, v15, (uint64_t)v4);
            outlined init with copy of CVarArg?(v26, (uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v24);
            swift_bridgeObjectRelease();
            if (!v39) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v38, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v24);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v27 = v37;
            uint64_t v28 = __swift_project_value_buffer(v37, (uint64_t)static OSSignpostID.continuation);
            v23(v4, v28, v27);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void type metadata accessor for _ShapeView<Circle, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Circle, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Circle and conformance Circle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Circle and conformance Circle()
{
  unint64_t result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Rectangle@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  int v8 = *a1;
  uint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v46 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  int v14 = *(_DWORD *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  char v44 = *(unsigned char *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v64);
  uint64_t v17 = v64;
  uint64_t v16 = v65;
  char v18 = v66;
  int v19 = HIDWORD(v66);
  uint64_t v64 = v9;
  LODWORD(v65) = v10;
  uint64_t v66 = v11;
  long long v67 = *(_OWORD *)(a2 + 24);
  uint64_t v68 = v12;
  uint64_t v69 = v46;
  uint64_t v70 = v13;
  int v71 = v14;
  uint64_t v72 = v15;
  char v73 = v44;
  int v34 = v19;
  int v35 = v8;
  int v49 = v8;
  uint64_t v43 = v17;
  uint64_t v45 = v16;
  uint64_t v51 = v17;
  uint64_t v52 = v16;
  char v47 = v18;
  LOBYTE(v53) = v18;
  HIDWORD(v53) = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v50, (uint64_t)&v61, &v49, (uint64_t)&v64, &v51, a5, a6);
  uint64_t v20 = v50;
  uint64_t v32 = v61;
  uint64_t v33 = v62;
  char v39 = v63;
  unint64_t v42 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = v64;
  int v38 = v65;
  uint64_t v23 = v66;
  long long v24 = v67;
  uint64_t v25 = v68;
  uint64_t v26 = v69;
  uint64_t v37 = v70;
  int v36 = v71;
  uint64_t v27 = v72;
  char v28 = v73;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  LODWORD(v61) = v20;
  uint64_t v51 = v22;
  LODWORD(v52) = v38;
  uint64_t v53 = v23;
  long long v54 = v24;
  uint64_t v55 = v25;
  uint64_t v56 = v26;
  uint64_t v57 = v37;
  int v58 = v36;
  uint64_t v59 = v27;
  char v60 = v28;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v61, &v51, a3, a4, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v20, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v39 & 1) == 0)
  {
    uint64_t v61 = v32;
    uint64_t v62 = v33;
    unsigned int v50 = v35;
    uint64_t v51 = v43;
    uint64_t v52 = v45;
    LOBYTE(v53) = v47;
    HIDWORD(v53) = v34;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v50, &v51, v42);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static EnvironmentalModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void (*v30)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char v44;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t AssociatedTypeWitness;
  int v54;
  void v56[2];
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  long long v93;
  uint64_t v94;
  uint64_t v95;
  long long v96;
  uint64_t v97;
  int v98;
  uint64_t v99;

  unint64_t v99 = *MEMORY[0x263EF8340];
  int v9 = *a1;
  uint64_t v10 = *(void *)a2;
  int v11 = *(_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v90);
  uint64_t v17 = v90;
  uint64_t v16 = v91;
  char v18 = v92;
  int v19 = HIDWORD(v92);
  uint64_t v90 = v10;
  LODWORD(v91) = v11;
  uint64_t v93 = *(_OWORD *)(a2 + 24);
  uint64_t v92 = v12;
  uint64_t v94 = v13;
  uint64_t v95 = v14;
  unint64_t v96 = *(_OWORD *)(a2 + 56);
  uint64_t v97 = *(void *)(a2 + 72);
  uint64_t v98 = v15;
  int v36 = v19;
  uint64_t v37 = v9;
  uint64_t v57 = v9;
  int v49 = v17;
  unsigned int v50 = v16;
  uint64_t v74 = v17;
  unint64_t v75 = v16;
  uint64_t v51 = v18;
  LOBYTE(v76) = v18;
  HIDWORD(v76) = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(v56, (uint64_t)&v58, &v57, (uint64_t)&v90, &v74, a5, a6);
  long long v54 = v56[0];
  int v34 = v58;
  int v35 = v59;
  char v47 = v60;
  float v48 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = v90;
  uint64_t v21 = v92;
  unint64_t v42 = v93;
  uint64_t v43 = v91;
  uint64_t v22 = *((void *)&v93 + 1);
  uint64_t v41 = DWORD1(v93);
  uint64_t v23 = v94;
  uint64_t v24 = v95;
  int v25 = DWORD1(v96);
  int v26 = DWORD2(v96);
  int v27 = HIDWORD(v96);
  int v28 = HIDWORD(v97);
  char v39 = v97;
  uint64_t v40 = v96;
  int v38 = v98;
  LODWORD(v10) = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v44 = v10;
  if (v10) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v74 = v20;
  LODWORD(v75) = v43;
  uint64_t v76 = v21;
  uint64_t v77 = v42;
  unint64_t v78 = v41;
  uint64_t v81 = v23;
  uint64_t v82 = v24;
  uint64_t v83 = v40;
  uint64_t v84 = v25;
  uint64_t v85 = v26;
  unsigned int v86 = v27;
  unsigned int v87 = v39;
  uint64_t v88 = v28;
  uint64_t v89 = v38;
  unint64_t v80 = HIDWORD(v22);
  uint64_t v79 = 0;
  uint64_t v57 = v54;
  int v58 = v20;
  LODWORD(v59) = v43;
  char v60 = v21;
  uint64_t v61 = v42;
  uint64_t v62 = v41;
  char v63 = 0;
  uint64_t v64 = HIDWORD(v22);
  uint64_t v65 = v23;
  uint64_t v66 = v24;
  long long v67 = v40;
  uint64_t v68 = v25;
  uint64_t v69 = v26;
  uint64_t v70 = v27;
  int v71 = v39;
  uint64_t v72 = v28;
  char v73 = v38;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v30 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v30(v56, &v57, &v58, a3, a4, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v79 = v22;
  if (v44)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v56, (uint64_t)&v74);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v31 = v56[0];
  uint64_t v32 = v56[1];
  if ((v47 & 1) == 0)
  {
    int v58 = v34;
    uint64_t v59 = v35;
    LODWORD(v56[0]) = v37;
    uint64_t v74 = v49;
    unint64_t v75 = v50;
    LOBYTE(v76) = v51;
    HIDWORD(v76) = v36;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)v56, &v74, v48);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a7 = v31;
  a7[1] = v32;
  return result;
}

uint64_t static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v12 = *a3;
  uint64_t v13 = *a5;
  uint64_t v14 = a5[1];
  char v15 = *((unsigned char *)a5 + 16);
  int v16 = *((_DWORD *)a5 + 5);
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v34 = v12;
    int v35 = v16;
    if ((v16 & 2) != 0)
    {
      outlined copy of DynamicPropertyCache.Fields.Layout();
    }
    else
    {
      uint64_t v33 = a1;
      uint64_t v17 = a4;
      uint64_t v18 = a2;
      int v19 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 40);
      outlined copy of DynamicPropertyCache.Fields.Layout();
      char v20 = v19(a6, a7);
      a2 = v18;
      a4 = v17;
      a1 = v33;
      if ((v20 & 1) == 0)
      {
        if (one-time initialization token for v4 != -1) {
          swift_once();
        }
        unsigned int v21 = static Semantics.v4;
        if (one-time initialization token for forced != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (byte_26B0F44FC) {
          int v22 = dyld_program_sdk_at_least();
        }
        else {
          int v22 = static Semantics.forced >= v21;
        }
        if (v35) {
          int v23 = 0;
        }
        else {
          int v23 = v22;
        }
        v35 |= v23;
      }
    }
    uint64_t v24 = *(void *)(a4 + 16);
    swift_beginAccess();
    uint64_t v25 = *(unsigned int *)(v24 + 16);
    (*(void (**)(uint64_t, uint64_t))(a7 + 48))(a6, a7);
    int v26 = EnvironmentalBodyAccessor.init(environment:tracksDependencies:)(v25);
    uint64_t v40 = v27;
    char v41 = v28 & 1;
    v39[0] = v34;
    v39[1] = v26;
    v36[0] = v13;
    v36[1] = v14;
    char v37 = v15;
    int v38 = v35;
    uint64_t v29 = type metadata accessor for EnvironmentalBodyAccessor();
    uint64_t WitnessTable = swift_getWitnessTable();
    BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, (uint64_t)v39, a4, (uint64_t)v36, v29, WitnessTable);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for EnvironmentalBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static EnvironmentalModifier._requiresMainThread.getter()
{
  return 1;
}

uint64_t EnvironmentalBodyAccessor.init(environment:tracksDependencies:)(uint64_t a1)
{
  type metadata accessor for PropertyList.Tracker();
  uint64_t v2 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  uint64_t v4 = MEMORY[0x263F8EE80];
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = v4;
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = v5;
  *(unsigned char *)(v3 + 56) = 0;
  *(void *)(v2 + 16) = v3;
  return a1;
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NamedImage.VectorKey()
{
  return lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type NamedImage.VectorKey and conformance NamedImage.VectorKey, (void (*)(uint64_t))type metadata accessor for NamedImage.VectorKey);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ApplyTransitionModifier<A>.Child()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t Font.StaticModifierProvider.resolve(in:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = a1[1];
  uint64_t v8 = *((void *)a1 + 1);
  uint64_t v9 = *((void *)a1 + 2);
  char v10 = a1[24];
  char v11 = a1[25];
  char v13 = *a1;
  char v6 = v13;
  char v14 = v7;
  uint64_t v15 = v8;
  uint64_t v16 = v9;
  char v17 = v10;
  char v18 = v11;
  uint64_t v19 = (*(uint64_t (**)(char *))(*(void *)a2 + 80))(&v13);
  char v13 = v6;
  char v14 = v7;
  uint64_t v15 = v8;
  uint64_t v16 = v9;
  char v17 = v10;
  char v18 = v11;
  (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(a4 + 8))(&v19, &v13, a3, a4);
  return v19;
}

void protocol witness for static StaticFontModifier.modify(descriptor:in:) in conformance Font.BoldModifier(CTFontDescriptorRef *a1)
{
  CTFontDescriptorRef v2 = *a1;
  CTFontDescriptorRef CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, 2u, 2u);
  if (CopyWithSymbolicTraits)
  {
    uint64_t v4 = CopyWithSymbolicTraits;

    CTFontDescriptorRef v2 = v4;
  }
  *a1 = v2;
}

unint64_t instantiation function for generic protocol witness table for SystemColorType(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceBinder<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t Transaction.disablesPageScrollAnimations.setter(char a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.defaultForegroundColor.getter(uint64_t (*a1)(void, uint64_t), uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t result = a1(a1, a2);
  if (result)
  {
    uint64_t v6 = specialized ShapeStyle.fallbackColor(in:level:)(v3, v4, 0, result);
    swift_release();
    return v6;
  }
  return result;
}

uint64_t DisplayList.Item.rewriteVibrancyFilterAsBackdrop(matrix:list:)(long long *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  long long v19 = a1[1];
  long long v20 = *a1;
  long long v17 = a1[3];
  long long v18 = a1[2];
  uint64_t v4 = *((void *)a1 + 8);
  uint64_t v5 = *((void *)a1 + 9);
  uint64_t v6 = *a2;
  char v21 = *((unsigned char *)a2 + 10);
  __int16 v22 = *((_WORD *)a2 + 4);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 1065353216;
  *(void *)(v7 + 28) = 0;
  *(void *)(v7 + 20) = 0;
  *(void *)(v7 + 40) = MEMORY[0x263F8EE78];
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v10 = *(void *)(v3 + 32);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = v20;
  *(_OWORD *)(v11 + 32) = v19;
  *(_OWORD *)(v11 + 48) = v18;
  *(_OWORD *)(v11 + 64) = v17;
  *(void *)(v11 + 80) = v4;
  *(void *)(v11 + 88) = v5;
  *(void *)(v11 + 96) = 0;
  *(unsigned char *)(v11 + 132) = 4;
  type metadata accessor for MutableBox<ResolvedShadowStyle>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2461B9DC0;
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = 0;
  *(void *)(v12 + 48) = v8;
  *(void *)(v12 + 56) = v9;
  *(void *)(v12 + 64) = v10;
  *(void *)(v12 + 72) = v7;
  *(_DWORD *)(v12 + 100) = 0;
  *(void *)(v12 + 80) = 0;
  *(void *)(v12 + 88) = 0;
  *(_DWORD *)(v12 + 95) = 0;
  swift_retain_n();
  DisplayList.Item.features.getter(v23);
  __int16 v13 = v23[0];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v6;
  *(_WORD *)(v14 + 24) = v22;
  *(unsigned char *)(v14 + 26) = v21;
  *(_DWORD *)(v14 + 28) = 0;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2461B9DC0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  *(void *)(v15 + 48) = v8;
  *(void *)(v15 + 56) = v9;
  *(void *)(v15 + 64) = v10;
  *(void *)(v15 + 72) = v11;
  *(void *)(v15 + 80) = 0x4000000900000000;
  *(void *)(v15 + 88) = v12;
  *(unsigned char *)(v15 + 98) = 0;
  *(_WORD *)(v15 + 96) = v13;
  *(_DWORD *)(v15 + 100) = 0;
  outlined copy of DisplayList.Effect(v11, 0, 9);
  swift_bridgeObjectRetain();
  outlined copy of DisplayList.Effect(v11, 0, 9);
  swift_bridgeObjectRetain();
  swift_release();
  DisplayList.Item.properties.getter(v23);
  swift_release_n();
  outlined consume of DisplayList.Effect(v11, 0, 9);
  swift_bridgeObjectRelease();
  v3 += 64;
  LOBYTE(v4) = v23[0];
  uint64_t result = outlined consume of DisplayList.Item.Value(*(void *)(v3 - 24), *(void *)(v3 - 16));
  *(void *)(v3 - 24) = v14;
  *(void *)(v3 - 16) = 0x4000000700000000;
  *(void *)(v3 - 8) = v15;
  *(unsigned char *)(v3 + 2) = v4;
  *(_WORD *)uint64_t v3 = v13;
  return result;
}

void type metadata accessor for MutableBox<ResolvedShadowStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout;
  if (!lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout;
  if (!lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpacingLayout and conformance SpacingLayout);
  }
  return result;
}

uint64_t outlined destroy of ScrollStateRequestTransform(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ScrollStateRequestTransform(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
  return result;
}

uint64_t static Color.gray.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for gray);
}

uint64_t static Font.headline.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(one-time initialization token for headline);
}

uint64_t static Log.presentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for presentation, (uint64_t)static Log.presentation, a1);
}

uint64_t dispatch thunk of AnyColorBox.kitColor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t Text.monospacedDigit()(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return Text.monospacedDigit()(a1, a2, a3, a4, (void (*)(void))type metadata accessor for MonospacedDigitTextModifier);
}

unint64_t instantiation function for generic protocol witness table for _FixedSizeLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for _TrimmedShape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TransitionHelper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for DynamicViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  uint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  unint64_t v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  __int16 v13 = (void **)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = *v13;
  *(void *)((v11 + 23) & 0xFFFFFFFFFFFFFFF8) = *v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v14;
  return a1;
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

void *assignWithCopy for PlatformNamedImageRepresentableContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t static Text.Suffix.alwaysVisible(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3 & 1 | 0x4000000000000000;
  a5[3] = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t AnyGradient.init<A>(provider:)(uint64_t a1)
{
  return GradientBox.__allocating_init(_:)(a1);
}

uint64_t type metadata accessor for GradientBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t GraphHost.Data.updateSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t type metadata completion function for ScaledShape()
{
  return type metadata completion function for ScaledShape();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SpacerLayoutComputer<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t destroy for SectionAccumulator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }

  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.fontResolutionContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3, a1);
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    v5[0] = *v1;
    v5[1] = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(v5, a1);
    return swift_release();
  }
}

uint64_t assignWithCopy for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  unsigned char *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithCopy for Path(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of Path.Storage(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of Path.Storage(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithCopy for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  return a1;
}

uint64_t Text.foregroundColor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_retain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v9 = a5[2];
  unint64_t v8 = a5[3];
  if (v9 >= v8 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, a5);
  }
  a5[2] = v9 + 1;
  uint64_t v10 = &a5[2 * v9];
  v10[4] = a1;
  *((unsigned char *)v10 + 40) = 0;
  return a2;
}

unint64_t instantiation function for generic protocol witness table for BezierAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for forced()
{
  if (one-time initialization token for firstRelease != -1) {
    swift_once();
  }
  uint64_t result = dyld_program_sdk_at_least();
  if (result) {
    int v1 = 0;
  }
  else {
    int v1 = -2;
  }
  static Semantics.forced = v1;
  byte_26B0F44FC = result;
  dword_26B0F4500 = v1;
  byte_26B0F4504 = result;
  return result;
}

uint64_t EnvironmentValues.explicitPreferredColorScheme.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

Swift::Void __swiftcall GraphHost.invalidate()()
{
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 128) == 1)
  {
    uint64_t v1 = swift_beginAccess();
    MEMORY[0x270FA5388](v1);
    id v3 = v2;
    AGSubgraphApply();

    *(unsigned char *)(v0 + 128) = 0;
  }
  swift_beginAccess();
  uint64_t v4 = *(void **)(v0 + 16);
  if (v4)
  {
    id v5 = v4;
    specialized static Update.begin()();
    AGSubgraphInvalidate();
    AGGraphSetContext();
    AGGraphInvalidate();

    *(void *)(v0 + 16) = 0;
    static Update.end()();
  }
  swift_endAccess();
}

uint64_t getEnumTagSinglePayload for UpdateScrollStateRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t AttributedStringTextStorage.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str;
  uint64_t v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t View.staticIf<A, B>(_:trueModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  closure #1 in View.staticIf<A, B>(_:trueModifier:)(a2, a3, v9, a4, a5, a6, a7, a8, a9);
  type metadata accessor for StaticIf();
  return closure #2 in View.staticIf<A, B>(_:trueModifier:)(v9, a4, a5, a6, a7);
}

uint64_t closure #2 in View.staticIf<A, B>(_:trueModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v10, v11, v12);
  static ViewBuilder.buildExpression<A>(_:)(v9, a2, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
}

uint64_t closure #1 in View.staticIf<A, B>(_:trueModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v21 - v15;
  v18(v17, v14);
  static ViewBuilder.buildExpression<A>(_:)(v12, a6, a9);
  long long v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, a6);
  static ViewBuilder.buildExpression<A>(_:)(v16, a6, a9);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, a6);
}

double _Placement.proposedSize.getter()
{
  double result = *(double *)v0;
  if (*(unsigned char *)(v0 + 8)) {
    return 10.0;
  }
  return result;
}

uint64_t View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  char v6 = *((unsigned char *)a1 + 8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v5;
  *(unsigned char *)(v8 + 32) = v6;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:), v8, a3);
  swift_release();

  return swift_release();
}

uint64_t partial apply for closure #2 in ValueActionDispatcher.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Optional() - 8);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v0 + ((v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v1, v2);
}

uint64_t _ValueActionModifier2.sendAction(old:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v27 = a1;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v22 = *(void (**)(char *, uint64_t, double))(v6 + 16);
  uint64_t v26 = v23;
  v22(v8, v27, v19);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v27 = v3;
  v24(v12, v3, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a2) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v12, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v8, a2);
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v15, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, a2);
  (*(void (**)(char *))(v27 + *(int *)(a2 + 36)))(v21);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v16);
}

void one-time initialization function for blockedGraphHosts()
{
  blockedGraphHosts._rawuint64_t Value = (void *)MEMORY[0x263F8EE78];
}

uint64_t dispatch thunk of InsettableShape.inset(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t destroy for GestureFilter(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v22 = *a1;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  long long v17 = *(_OWORD *)(a2 + 3);
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  int v12 = *((_DWORD *)a2 + 16);
  uint64_t v13 = a2[9];
  char v14 = *((unsigned char *)a2 + 80);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  v33[0] = v22;
  uint64_t v23 = v6;
  int v24 = v7;
  uint64_t v25 = v8;
  long long v26 = v17;
  uint64_t v27 = v9;
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  int v30 = v12;
  uint64_t v31 = v13;
  char v32 = v14;
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t))(a6 + 32))(v33, &v23, a3, a4, a5);
  if (ShouldRecordTree)
  {
    return AGSubgraphEndTreeElement();
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Font.StaticModifierProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ForegroundEnvironment<A>()
{
  return swift_getWitnessTable();
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t type metadata completion function for AnimatedShape()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.OpacityColor(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.WeightModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t View.scrollClipShape<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _ScrollClipEffect();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, a3);
  View.modifier<A>(_:)(v13, a2, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t type metadata accessor for _ScrollClipEffect()
{
  return __swift_instantiateGenericMetadata();
}

void AtomicBox.wrappedValue.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2 + 4;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = (char *)v4 + ((*(unsigned __int8 *)(v7 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  os_unfair_lock_lock(v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(a2, v8, v6);

  os_unfair_lock_unlock(v5);
}

uint64_t Color.init(cgColor:)(uint64_t a1)
{
  type metadata accessor for ColorBox<CGColorRef>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void type metadata accessor for ColorBox<CGColorRef>()
{
  if (!lazy cache variable for type metadata for ColorBox<CGColorRef>)
  {
    type metadata accessor for CGColorRef(255);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    unint64_t v0 = type metadata accessor for ColorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<CGColorRef>);
    }
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(int a1, char a2, double a3, double a4)
{
  LODWORD(v5) = a1;
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v43 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v36 - v12;
  if (a2)
  {
    int v14 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      *(double *)char v44 = a3;
      *(double *)&v44[1] = a4;
      char v45 = v5 & 1;
      __int16 v46 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v38 = v14;
    int v39 = v5;
    uint64_t v40 = v8;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v16 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v18 = v17;
    uint64_t v19 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v20 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v16;
    uint64_t v21 = inited + 32;
    *(void *)(inited + 64) = v20;
    *(void *)(inited + 40) = v18;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v19;
    *(void *)(inited + 104) = v20;
    *(void *)(inited + 80) = v22;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v23 = v40 + 16;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v10, v13, v43);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v42 = v24;
    uint64_t v25 = swift_initStackObject();
    long long v41 = xmmword_2461BE2B0;
    *(_OWORD *)(v25 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v26 = v25;
      outlined init with copy of AnyTrackedValue(inited + 32, v25 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v36 = inited;
        char v37 = v13;
        uint64_t v21 = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v26 + 72);
        *(_OWORD *)(v26 + 128) = 0u;
        *(void *)(v26 + 144) = 0;
        *(_OWORD *)(v26 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v21, v26, v21, (uint64_t)v10);
        outlined init with copy of CVarArg?(v26 + 112, (uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          int v35 = *(void (**)(char *, uint64_t))(v40 + 8);
          uint64_t v5 = v43;
          v35(v37, v43);
          v35(v10, v5);
          LOBYTE(v5) = v39;
          goto LABEL_15;
        }
        uint64_t v16 = (void (**)(char *, uint64_t, uint64_t))(v23 + 8);
        outlined destroy of CVarArg?((uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v27 = v43;
          uint64_t v28 = __swift_project_value_buffer(v43, (uint64_t)static OSSignpostID.continuation);
          uint64_t v29 = *v16;
          (*v16)(v10, v28, v27);
          uint64_t v30 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v31 = swift_initStackObject();
            *(_OWORD *)(v31 + 16) = v41;
            *(_OWORD *)(v31 + 32) = 0u;
            *(_OWORD *)(v31 + 48) = 0u;
            *(_OWORD *)(v31 + 64) = 0u;
            *(_OWORD *)(v31 + 80) = 0u;
            *(_OWORD *)(v31 + 96) = 0u;
            *(_OWORD *)(v31 + 128) = 0u;
            *(void *)(v31 + 144) = 0;
            *(_OWORD *)(v31 + 112) = 0u;
            uint64_t v32 = v31 + 112;
            specialized withKDebugValues(_:_:closure:)(v21, v31, v21, (uint64_t)v10);
            outlined init with copy of CVarArg?(v32, (uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v30);
            swift_bridgeObjectRelease();
            if (!v47) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v30);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v33 = v43;
            uint64_t v34 = __swift_project_value_buffer(v43, (uint64_t)static OSSignpostID.continuation);
            v29(v10, v34, v33);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<RoundedRectangle, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<RoundedRectangle, ForegroundStyle>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>);
    }
  }
}

void specialized static _ShapeView._makeView(view:inputs:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v33 = *(_OWORD *)(a1 + 32);
  long long v34 = v14;
  long long v35 = v15;
  int v36 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    LODWORD(v32) = v11;
    *((void *)&v32 + 1) = 0;
    *(void *)&long long v33 = 0;
    BYTE8(v33) = 1;
    *(void *)&long long v34 = 0;
    DWORD2(v34) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<RoundedRectangle>>, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v6;
  ValueMetadata **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int OffsetAttribute2;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  int v36;
  uint64_t v37;

  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v33 = *(_OWORD *)(a1 + 32);
  long long v34 = v14;
  long long v35 = v15;
  int v36 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    LODWORD(v32) = v11;
    *((void *)&v32 + 1) = 0;
    LOBYTE(v33) = 1;
    *((void *)&v33 + 1) = 0;
    LODWORD(v34) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Rectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v6;
  ValueMetadata **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int OffsetAttribute2;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  int v36;
  uint64_t v37;

  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v33 = *(_OWORD *)(a1 + 32);
  long long v34 = v14;
  long long v35 = v15;
  int v36 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    LODWORD(v32) = v11;
    *((void *)&v32 + 1) = 0;
    LOBYTE(v33) = 1;
    *((void *)&v33 + 1) = 0;
    LODWORD(v34) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Ellipse._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v6;
  ValueMetadata **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int OffsetAttribute2;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  int v36;
  uint64_t v37;

  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v33 = *(_OWORD *)(a1 + 32);
  long long v34 = v14;
  long long v35 = v15;
  int v36 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    LODWORD(v32) = v11;
    *((void *)&v32 + 1) = 0;
    LOBYTE(v33) = 1;
    *((void *)&v33 + 1) = 0;
    LODWORD(v34) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Capsule._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v6;
  ValueMetadata **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int OffsetAttribute2;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  int v36;
  uint64_t v37;

  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v33 = *(_OWORD *)(a1 + 32);
  long long v34 = v14;
  long long v35 = v15;
  int v36 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    LODWORD(v32) = v11;
    *((void *)&v32 + 1) = 0;
    LOBYTE(v33) = 1;
    *((void *)&v33 + 1) = 0;
    LODWORD(v34) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Circle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v6;
  ValueMetadata **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int OffsetAttribute2;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  long long v31;
  unsigned char v32[48];
  long long v33;
  int v34;
  uint64_t v35;

  long long v35 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v32[32] = v14;
  long long v33 = v15;
  long long v34 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  *(_OWORD *)long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    *(_DWORD *)long long v32 = v11;
    memset(&v32[8], 0, 32);
    v32[40] = 1;
    *(void *)&long long v33 = 0;
    DWORD2(v33) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>>, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v6;
  ValueMetadata **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int OffsetAttribute2;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  long long v31;
  unsigned char v32[48];
  long long v33;
  int v34;
  uint64_t v35;

  long long v35 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v32[32] = v14;
  long long v33 = v15;
  long long v34 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  *(_OWORD *)long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    *(_DWORD *)long long v32 = v11;
    memset(&v32[8], 0, 40);
    LOBYTE(v33) = 1;
    *((void *)&v33 + 1) = 0;
    long long v34 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v6;
  ValueMetadata **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int OffsetAttribute2;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  int v36;
  uint64_t v37;

  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v33 = *(_OWORD *)(a1 + 32);
  long long v34 = v14;
  long long v35 = v15;
  int v36 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    LODWORD(v32) = v11;
    *((void *)&v32 + 1) = 0;
    LOBYTE(v33) = 1;
    *((void *)&v33 + 1) = 0;
    LODWORD(v34) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>>, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v6;
  ValueMetadata **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int OffsetAttribute2;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  int v36;
  uint64_t v37;

  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return;
  }
  uint64_t v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 36);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v33 = *(_OWORD *)(a1 + 32);
  long long v34 = v14;
  long long v35 = v15;
  int v36 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v31 = *(_OWORD *)a1;
  long long v32 = v16;
  uint64_t v17 = (_DWORD *)(v10 + 16);
  LOBYTE(v27) = 0;
  swift_beginAccess();
  unsigned int v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v31, (unsigned __int8 *)&v27, 0x100000000);
  swift_endAccess();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v20 = OffsetAttribute2;
  if ((v13 & 1) == 0)
  {
    *(void *)&long long v31 = __PAIR64__(*v17, OffsetAttribute2);
    *((void *)&v31 + 1) = __PAIR64__(v26, v12);
    LODWORD(v32) = v11;
    long long v33 = 0uLL;
    *((void *)&v32 + 1) = 0;
    LOBYTE(v34) = 1;
    *((void *)&v34 + 1) = 0;
    LODWORD(v35) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>();
    unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(void *)&long long v31 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v20);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v21 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v21, a1, v18, 0, &v28);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v22 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    char v23 = dyld_program_sdk_at_least();
    if ((v13 & 2) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v23 = static Semantics.forced >= v22;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      int v25 = v29;
      int v24 = v30;
      goto LABEL_21;
    }
  }
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  unsigned int v27 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v29 | 0x80;
LABEL_21:
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v24;
}

uint64_t Font.init(_:)(uint64_t a1)
{
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V08PlatformC8Provider33_A1A6E08ED7787270EADAD2AE750791A9LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.PlatformFontProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void type metadata accessor for FontBox<Font.PlatformFontProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V08PlatformC8Provider33_A1A6E08ED7787270EADAD2AE750791A9LLVGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for FontBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

void type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v6 = type metadata accessor for LeafLayoutComputer();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider;
  if (!lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider;
  if (!lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider;
  if (!lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<RoundedRectangle>>, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance Image.ImageViewChild<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t static Font.title2.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for title2);
}

void *assignWithCopy for _BackgroundStyleModifier.BackgroundInfo.Value(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(_DWORD *)(v4 + 80) & 0xF8;
  uint64_t v7 = v6 + 55;
  unint64_t v8 = (unint64_t)a1 + v6 + 55;
  unint64_t v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & v9;
  unint64_t v11 = ((unint64_t)a2 + v7) & v9;
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(v8 & v9, v11);
  uint64_t v12 = *(void *)(v5 + 40) + 7;
  int v13 = (void *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  long long v14 = (void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  *int v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v13[3] = v14[3];
  return a1;
}

uint64_t type metadata completion function for AttributeInvalidatingSubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for _AnchoredShapeStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for CanvasSymbols(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v5 = *(void **)(a2 + 96);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = v4;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollPhaseState(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  if (a1[2] == a2[2]) {
    return a1[1] == a2[1];
  }
  return 0;
}

uint64_t instantiation function for generic protocol witness table for MatchedSharedFrame<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Context and conformance Font.Context()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.Context and conformance Font.Context;
  if (!lazy protocol witness table cache variable for type Font.Context and conformance Font.Context)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Context and conformance Font.Context);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextLayoutProperties and conformance TextLayoutProperties()
{
  unint64_t result = lazy protocol witness table cache variable for type TextLayoutProperties and conformance TextLayoutProperties;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties and conformance TextLayoutProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties and conformance TextLayoutProperties);
  }
  return result;
}

uint64_t Shape.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v7, v2, a1, v5);
  return _ShapeView.init(shape:style:fillStyle:)((uint64_t)v7, v9, 256, a1, (uint64_t)&type metadata for ForegroundStyle, a2);
}

uint64_t _ShapeView.init(shape:style:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a6, a1, a4);
  uint64_t v10 = type metadata accessor for _ShapeView();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + *(int *)(v10 + 52), a2, a5);
  uint64_t v12 = (unsigned char *)(a6 + *(int *)(v10 + 56));
  *uint64_t v12 = a3 & 1;
  v12[1] = HIBYTE(a3) & 1;
  return result;
}

uint64_t static ResetScrollInputsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v7 = a2[5];
  uint64_t v6 = a2[6];
  int v8 = *((_DWORD *)a2 + 20);
  uint64_t v25 = *a2;
  int v26 = v4;
  uint64_t v27 = v5;
  long long v28 = *(_OWORD *)(a2 + 3);
  uint64_t v29 = v7;
  uint64_t v30 = v6;
  long long v31 = *(_OWORD *)(a2 + 7);
  uint64_t v32 = a2[9];
  int v33 = v8;
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 32;
    while (*(ValueMetadata **)(v6 + v11) != &type metadata for ScrollPhasePreferenceKey)
    {
      ++v10;
      v11 += 16;
      if (v9 == v10)
      {
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      }
    }
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.remove(at:)(v10);
    uint64_t v6 = v30;
    uint64_t v9 = *(void *)(v30 + 16);
    if (!v9) {
      goto LABEL_13;
    }
LABEL_8:
    unint64_t v12 = 0;
    uint64_t v13 = 32;
    while (*(ValueMetadata **)(v6 + v13) != &type metadata for ScrollGeometryPreferenceKey)
    {
      ++v12;
      v13 += 16;
      if (v9 == v12) {
        goto LABEL_13;
      }
    }
    specialized Array.remove(at:)(v12);
    uint64_t v6 = v30;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
LABEL_13:
  uint64_t v16 = v25;
  int v17 = v26;
  uint64_t v18 = v27;
  long long v19 = v28;
  uint64_t v20 = v29;
  uint64_t v21 = v6;
  long long v22 = v31;
  uint64_t v23 = v32;
  int v24 = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v14 = swift_bridgeObjectRetain();
  a3(v14, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t EnvironmentValues.redactionReasons.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.redactionReasons.modify(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[3];
  uint64_t v3 = *a1;
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *(void *)a1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<RedactionReasonsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<RedactionReasonsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<RedactionReasonsKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t static _ViewListOutputs.emptyViewList(inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v8 = *(_DWORD *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  int v12 = *(_DWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  if ((v11 & 0x10) != 0)
  {
    uint64_t v16 = *(void *)a1;
    int v17 = v3;
    uint64_t v18 = v4;
    int v19 = v5;
    int v20 = v6;
    int v21 = v8;
    int v22 = v7;
    uint64_t v23 = v10;
    uint64_t v24 = v9;
    uint64_t v25 = v11;
    int v26 = v12;
    uint64_t v27 = v13;
    char v28 = v14;
    return static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v16, a2);
  }
  else
  {
    uint64_t v30 = &type metadata for EmptyViewListElements;
    long long v31 = &protocol witness table for EmptyViewListElements;
    uint64_t v16 = v2;
    int v17 = v3;
    uint64_t v18 = v4;
    int v19 = v5;
    int v20 = v6;
    int v21 = v8;
    int v22 = v7;
    uint64_t v23 = v10;
    uint64_t v24 = v9;
    uint64_t v25 = v11;
    int v26 = v12;
    uint64_t v27 = v13;
    char v28 = v14;
    static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v29, &v16, 0, a2);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
}

uint64_t one-time initialization function for invalidValue()
{
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  static ViewGeometry.invaliduint64_t Value = (__int128)vdupq_n_s64(0x7FF8000000000000uLL);
  qword_26B0F2B10 = static ViewDimensions.invalidValue;
  unk_26B0F2B18 = *(void *)algn_26B0F2B48;
  xmmword_26B0F2B20 = xmmword_26B0F2B50;
  unk_26B0F2B30 = xmmword_26B0F2B60;

  return swift_retain();
}

ValueMetadata *type metadata accessor for TextJustification()
{
  return &type metadata for TextJustification;
}

unsigned __int8 *(*ScrollTargetRole.SetLayout.value.getter())(void *a1)
{
  *(void *)(swift_allocObject() + 16) = *v0;
  return partial apply for closure #1 in ScrollTargetRole.SetLayout.value.getter;
}

uint64_t type metadata completion function for VTable()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall Path.addCurve(to:control1:control2:)(CGPoint to, CGPoint control1, CGPoint control2)
{
  specialized Path.withMutableBuffer(do:)(v3, control1.x, control1.y, control2.x, control2.y, to.x, to.y);
}

uint64_t one-time initialization function for safeArea()
{
  uint64_t result = AGMakeUniqueID();
  static ScrollCoordinateSpace.safeArea = result;
  return result;
}

uint64_t one-time initialization function for content()
{
  uint64_t result = AGMakeUniqueID();
  static ScrollCoordinateSpace.content = result;
  return result;
}

uint64_t one-time initialization function for all()
{
  uint64_t result = AGMakeUniqueID();
  static ScrollCoordinateSpace.all = result;
  return result;
}

uint64_t type metadata completion function for ScaledMetric()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in EnvironmentalViewChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t static Update.broadcast()()
{
  return static Update.lock()(_MovableLockBroadcast);
}

uint64_t static Update.wait()()
{
  return static Update.lock()(_MovableLockWait);
}

unint64_t instantiation function for generic protocol witness table for Color.ForegroundColorProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

void *MultiViewResponder.visit(applying:)@<X0>(void *(*a1)(void *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t result = a1((void *)((char *)v17 + 1), v3);
  char v9 = BYTE1(v17[0]);
  if (!BYTE1(v17[0]))
  {
    swift_beginAccess();
    unint64_t v10 = *(void *)(v4 + 40);
    if (v10 >> 62) {
      goto LABEL_17;
    }
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v11; uint64_t v11 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v12 = 4;
      while (1)
      {
        uint64_t v13 = v12 - 4;
        if ((v10 & 0xC000000000000001) == 0) {
          break;
        }
        uint64_t v14 = MEMORY[0x24C523D60](v12 - 4, v10);
        BOOL v15 = __OFADD__(v13, 1);
        uint64_t v16 = v12 - 3;
        if (v15) {
          goto LABEL_16;
        }
LABEL_10:
        (*(void (**)(void *__return_ptr, void *(*)(void *__return_ptr, uint64_t), uint64_t))(*(void *)v14 + 104))(v17, a1, a2);
        swift_release();
        if (LOBYTE(v17[0]) == 2)
        {
          char v9 = 2;
          goto LABEL_14;
        }
        ++v12;
        if (v16 == v11) {
          goto LABEL_12;
        }
      }
      uint64_t v14 = *(void *)(v10 + 8 * v12);
      swift_retain();
      BOOL v15 = __OFADD__(v13, 1);
      uint64_t v16 = v12 - 3;
      if (!v15) {
        goto LABEL_10;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
    }
LABEL_12:
    char v9 = 0;
LABEL_14:
    unint64_t result = (void *)swift_bridgeObjectRelease();
  }
  *a3 = v9;
  return result;
}

uint64_t ResponderNode.visit(applying:)(uint64_t (*a1)(uint64_t))
{
  return a1(v1);
}

void protocol witness for InsettableShape.inset(by:) in conformance RoundedRectangle(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(double *)(a1 + 24) = a2;
}

unint64_t instantiation function for generic protocol witness table for LayoutPriorityLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t static _ContainerValueWritingModifier._makeViewList(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v9 = a2[7];
  int v10 = *((_DWORD *)a2 + 16);
  LODWORD(v24) = *a1;
  HIDWORD(v24) = v10;
  uint64_t v11 = type metadata accessor for _ContainerValueWritingModifier.AddTrait();
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v22 = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewTraitCollection>();
  uint64_t v15 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v24, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13, (uint64_t)v21, v11, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  swift_bridgeObjectRelease();
  uint64_t v24 = v4;
  int v25 = v5;
  uint64_t v26 = v6;
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  uint64_t v29 = v7;
  uint64_t v30 = v8;
  uint64_t v31 = v9;
  int v32 = v20;
  uint64_t v33 = 0;
  char v34 = 0;
  swift_retain();
  swift_retain();
  uint64_t v17 = swift_bridgeObjectRetain();
  a3(v17, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for _ContainerValueWritingModifier.AddTrait()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AnyLayout.Cache()
{
  return &type metadata for AnyLayout.Cache;
}

ValueMetadata *type metadata accessor for AccessibilityCustomAttributes()
{
  return &type metadata for AccessibilityCustomAttributes;
}

ValueMetadata *type metadata accessor for RasterizationOptions()
{
  return &type metadata for RasterizationOptions;
}

ValueMetadata *type metadata accessor for RasterizationOptions.Flags()
{
  return &type metadata for RasterizationOptions.Flags;
}

ValueMetadata *type metadata accessor for _AnyAnimatableData()
{
  return &type metadata for _AnyAnimatableData;
}

ValueMetadata *type metadata accessor for SectionAccumulator.RowIDs()
{
  return &type metadata for SectionAccumulator.RowIDs;
}

ValueMetadata *type metadata accessor for SectionAccumulator.Item()
{
  return &type metadata for SectionAccumulator.Item;
}

ValueMetadata *type metadata accessor for GraphicsContext()
{
  return &type metadata for GraphicsContext;
}

void *type metadata accessor for SymbolVariants.Flags()
{
  return &unk_26FA4E038;
}

ValueMetadata *type metadata accessor for PreferenceKeys()
{
  return &type metadata for PreferenceKeys;
}

uint64_t AnyTextStorage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for AnchorGeometry()
{
  return &type metadata for AnchorGeometry;
}

ValueMetadata *type metadata accessor for SpacingLayout()
{
  return &type metadata for SpacingLayout;
}

void one-time initialization function for all()
{
  int v0 = (unsigned __int16)word_26FA6E66A;
  if (((unsigned __int16)word_26FA6E66A & ~(unsigned __int16)word_26FA6E668) == 0) {
    int v0 = 0;
  }
  int v1 = v0 | (unsigned __int16)word_26FA6E668;
  int v2 = (unsigned __int16)word_26FA6E66C;
  if (((unsigned __int16)word_26FA6E66C & ~v1) == 0) {
    int v2 = 0;
  }
  int v3 = v2 | v1;
  int v4 = (unsigned __int16)word_26FA6E66E;
  if (((unsigned __int16)word_26FA6E66E & ~v3) == 0) {
    int v4 = 0;
  }
  int v5 = v4 | v3;
  int v6 = (unsigned __int16)word_26FA6E670;
  if (((unsigned __int16)word_26FA6E670 & ~v5) == 0) {
    int v6 = 0;
  }
  int v7 = v6 | v5;
  int v8 = (unsigned __int16)word_26FA6E672;
  if (((unsigned __int16)word_26FA6E672 & ~v7) == 0) {
    int v8 = 0;
  }
  int v9 = v8 | v7;
  int v10 = (unsigned __int16)word_26FA6E674;
  if (((unsigned __int16)word_26FA6E674 & ~v9) == 0) {
    int v10 = 0;
  }
  int v11 = v10 | v9;
  int v12 = (unsigned __int16)word_26FA6E676;
  if (((unsigned __int16)word_26FA6E676 & ~v11) == 0) {
    int v12 = 0;
  }
  int v13 = v12 | v11;
  __int16 v14 = word_26FA6E678;
  if (((unsigned __int16)word_26FA6E678 & ~v13) == 0) {
    __int16 v14 = 0;
  }
  static ViewRendererHostProperties.all = v14 | v13;
}

{
  int v0;
  int v1;
  int v2;
  int v3;
  char v4;

  int v0 = byte_26FA44B51;
  if ((byte_26FA44B51 & ~byte_26FA44B50) == 0) {
    int v0 = 0;
  }
  int v1 = v0 | byte_26FA44B50;
  int v2 = byte_26FA44B52;
  if ((byte_26FA44B52 & ~v1) == 0) {
    int v2 = 0;
  }
  int v3 = v2 | v1;
  int v4 = byte_26FA44B53;
  if ((byte_26FA44B53 & ~v3) == 0) {
    int v4 = 0;
  }
  static AbsoluteEdge.Set.all = v4 | v3;
}

{
  int v0;
  int v1;
  int v2;
  int v3;
  char v4;

  int v0 = byte_26FA655C1;
  if ((byte_26FA655C1 & ~byte_26FA655C0) == 0) {
    int v0 = 0;
  }
  int v1 = v0 | byte_26FA655C0;
  int v2 = byte_26FA655C2;
  if ((byte_26FA655C2 & ~v1) == 0) {
    int v2 = 0;
  }
  int v3 = v2 | v1;
  int v4 = byte_26FA655C3;
  if ((byte_26FA655C3 & ~v3) == 0) {
    int v4 = 0;
  }
  static _ForegroundLayerLevel.all = v4 | v3;
}

{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  int v0 = unk_26FA654AC;
  if ((unk_26FA654AC & ~dword_26FA654A8) == 0) {
    int v0 = 0;
  }
  int v1 = v0 | dword_26FA654A8;
  int v2 = dword_26FA654B0;
  if ((dword_26FA654B0 & ~v1) == 0) {
    int v2 = 0;
  }
  int v3 = v2 | v1;
  if ((unk_26FA654B4 & ~v3) != 0) {
    int v4 = unk_26FA654B4;
  }
  else {
    int v4 = 0;
  }
  int v5 = v4 | v3;
  int v6 = dword_26FA654B8;
  if ((dword_26FA654B8 & ~v5) == 0) {
    int v6 = 0;
  }
  static _DetachableProperties.all = v6 | v5;
}

uint64_t key path getter for EnvironmentValues.defaultPadding : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_release_n();
  }
  else
  {
    uint64_t v11 = swift_retain_n();
    double v4 = specialized closure #1 in PropertyList.subscript.getter(v11);
    uint64_t v6 = v12;
    uint64_t v8 = v13;
    uint64_t v10 = v14;
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  *((void *)a2 + 1) = v6;
  *((void *)a2 + 2) = v8;
  *((void *)a2 + 3) = v10;
  return result;
}

uint64_t base witness table accessor for Equatable in <> Pair<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for IDView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

uint64_t MatchedGeometryScope.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void one-time initialization function for lineFragmentPadding()
{
  static ResolvedStyledText.TextLayoutManager.lineFragmentPadding = 0;
}

uint64_t type metadata completion function for UnaryPositionAwareLayoutEngine()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Text.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  if (a2)
  {
    char v10 = *((unsigned char *)a1 + 8);
    uint64_t v11 = *a1;
    type metadata accessor for LanguageAwareLineHeightRatioTextModifier();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v11;
    *(unsigned char *)(v12 + 24) = v10;
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
    }
    unint64_t v14 = a6[2];
    unint64_t v13 = a6[3];
    if (v14 >= v13 >> 1) {
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, a6);
    }
    a6[2] = v14 + 1;
    int v15 = &a6[2 * v14];
    v15[4] = v12;
    *((unsigned char *)v15 + 40) = -64;
    swift_release();
  }
  else
  {
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
  }
  return a3;
}

uint64_t type metadata accessor for LanguageAwareLineHeightRatioTextModifier()
{
  return self;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in SubviewsRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in Image.ImageViewChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t View.background<A>(_:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a6;
  uint64_t v21 = a4;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for _BackgroundModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  int v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a5, v15);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, a5);
  int v18 = &v17[*(int *)(v13 + 36)];
  *(void *)int v18 = a2;
  *((void *)v18 + 1) = a3;
  View.modifier<A>(_:)(v17, v21, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t type metadata completion function for TypesettingLanguage()
{
  uint64_t result = type metadata accessor for TypesettingLanguage.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *initializeWithCopy for BindingActionDispatcher(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  unsigned int v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (void *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (uint64_t *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = *v8;
  *(void *)((char *)v7 + 5) = *(uint64_t *)((char *)v8 + 5);
  void *v7 = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (void *)(((unint64_t)v7 + v12 + 13) & ~v12);
  uint64_t v14 = (const void *)(((unint64_t)v8 + v12 + 13) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10))
  {
    int v15 = *(_DWORD *)(v11 + 84);
    size_t v16 = *(void *)(v11 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v13, v14, v10);
    int v19 = *(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56);
    uint64_t v18 = v11 + 56;
    v19(v13, 0, 1, v10);
    int v15 = *(_DWORD *)(v18 + 28);
    size_t v16 = *(void *)(v18 + 8);
  }
  if (v15) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v16 + 1;
  }
  unint64_t v21 = ((unint64_t)v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v22 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v23 = *(void *)(v22 + 8);
    *(void *)unint64_t v21 = *(void *)v22;
    *(void *)(v21 + 8) = v23;
    swift_retain();
  }
  *(_DWORD *)((v21 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v22 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(long long *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  long long v6 = *a1;
  long long v7 = v3;
  long long v8 = a1[2];
  a3(&v5);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(uint64_t a1@<X8>)
{
  void (*v77)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v78)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned __int8 v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  long long v90;
  long long v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __int16 v96;
  char v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  long long v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned __int16 v106;
  unsigned __int8 v107;
  int v108;
  uint64_t v109;

  __int16 v109 = *MEMORY[0x263EF8340];
  int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v88 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v12;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  unint64_t v14 = *(void *)Value;
  uint64_t v88 = *(unsigned __int16 *)(Value + 8);
  unint64_t v13 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_59:
    swift_once();
LABEL_30:
    uint64_t v63 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v75, sel_length);
    if (objc_msgSend(v75, sel_attribute_atIndex_effectiveRange_, v63, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v90, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      char v64 = *(unsigned char *)(v5 + 256);
      outlined consume of DisplayList.Item.Value(v2, v14);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v2, v14);
      unint64_t v39 = v83;
      if (v64)
      {
        __int16 v42 = 8;
LABEL_51:
        LOBYTE(v46) = v85;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v90 = 0u;
      uint64_t v91 = 0u;
      _sypSgWOhTm_9((uint64_t)&v90, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      outlined consume of DisplayList.Item.Value(v2, v14);
      swift_release();
LABEL_56:
      swift_release();
      outlined consume of DisplayList.Item.Value(v2, v14);
      unint64_t v39 = v83;
    }
    __int16 v42 = 0;
    goto LABEL_51;
  }
  unsigned int v87 = a1;
  id v76 = (id)v15;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unint64_t v74 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unint64_t v73 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v72 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  unsigned int v86 = v13;
  unint64_t v24 = HIDWORD(v22);
  unint64_t v25 = AGCreateWeakAttribute();
  unsigned int v26 = v25;
  unint64_t v80 = v14;
  unint64_t v27 = HIDWORD(v25);
  unint64_t v28 = AGCreateWeakAttribute();
  unsigned int v29 = v28;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  unint64_t v99 = __PAIR64__(v74, v17);
  unint64_t v100 = __PAIR64__(v73, v19);
  *(void *)&int v101 = __PAIR64__(v72, v21);
  *((void *)&v101 + 1) = __PAIR64__(v24, v23);
  unint64_t v102 = __PAIR64__(v27, v26);
  unint64_t v103 = __PAIR64__(v30, v29);
  LODWORD(v104) = v76;
  _setThreadGeometryProxyData();
  LOBYTE(v89) = *(unsigned char *)AGGraphGetValue();
  GraphicsBlendMode.init(_:)((char *)&v89, (uint64_t)&v90);
  uint64_t v15 = v90;
  a1 = BYTE8(v90);
  _setThreadGeometryProxyData();
  uint64_t v31 = (double *)AGGraphGetValue();
  double v32 = *v31;
  double v33 = v31[1];
  char v34 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v35 = v32 - *v34;
  *(double *)&unint64_t v36 = v33 - v34[1];
  uint64_t v37 = (long long *)AGGraphGetValue();
  int v38 = *v1;
  unint64_t v99 = v35;
  unint64_t v100 = v36;
  int v101 = *v37;
  unint64_t v102 = (unint64_t)v76;
  unint64_t v103 = v15;
  int v104 = a1 | 0x4000000500000000;
  uint64_t v105 = v80;
  uint64_t v107 = v86;
  unint64_t v106 = v88;
  uint64_t v108 = v38;
  LOBYTE(v90) = *((unsigned char *)v1 + 36);
  outlined copy of GraphicsBlendMode(v15, a1);
  DisplayList.Item.canonicalize(options:)((char *)&v90);
  unint64_t v6 = v99;
  unint64_t v7 = v100;
  uint64_t v9 = *((void *)&v101 + 1);
  uint64_t v8 = v101;
  unint64_t v39 = v102;
  unint64_t v2 = v103;
  unint64_t v14 = v104;
  unint64_t v13 = v105;
  unsigned int v3 = v106 | (v107 << 16);
  uint64_t v88 = v108;
  unint64_t v40 = v104 >> 62;
  if (v104 >> 62 != 3 || (v3 & 0xFFFFFF) != 0 || v104 != 0xC000000000000000 || v105 | v103)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_2461B9DC0;
    *(void *)(v45 + 32) = v6;
    *(void *)(v45 + 40) = v7;
    *(void *)(v45 + 48) = v8;
    *(void *)(v45 + 56) = v9;
    *(void *)(v45 + 64) = v39;
    *(void *)(v45 + 72) = v2;
    *(void *)(v45 + 80) = v14;
    *(void *)(v45 + 88) = v13;
    unsigned int v46 = HIWORD(v3);
    *(unsigned char *)(v45 + 98) = BYTE2(v3);
    *(_WORD *)(v45 + 96) = v3;
    *(_DWORD *)(v45 + 100) = v88;
    uint64_t v4 = v45;
    switch((int)v40)
    {
      case 1:
        uint64_t v85 = HIWORD(v3);
        uint64_t v48 = outlined copy of DisplayList.Item.Value(v2, v14);
        switch(BYTE4(v14))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 2);
            LODWORD(v49) = (v2 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v2 + 16, (uint64_t)&v90);
            unint64_t v49 = v92;
            uint64_t v79 = *((void *)&v91 + 1);
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            uint64_t v77 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v49 + 56);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            v77(&v89, v79, v49);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 3);
            LOWORD(v49) = v89;
            break;
          case 7:
            LOWORD(v49) = *(_WORD *)(v2 + 24);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 10);
            LOWORD(v49) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 12);
            LOWORD(v49) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            uint64_t v65 = v2;
            char v66 = v14;
            LOBYTE(v67) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 15);
            LOWORD(v49) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 16);
            LOWORD(v49) = 32;
            break;
          case 0x11:
            uint64_t v84 = v39;
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v2 + 112))(&v90, v48);
            uint64_t v82 = v90;
            int v68 = (unsigned __int16)word_26FA429C8;
            int v69 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 17);
            if ((v69 & ~v68) != 0) {
              __int16 v70 = v69;
            }
            else {
              __int16 v70 = 0;
            }
            __int16 v71 = v82 | v68;
            unint64_t v39 = v84;
            LOWORD(v49) = v71 | v70;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            uint64_t v65 = v2;
            char v66 = v14;
            unint64_t v67 = HIDWORD(v14);
LABEL_43:
            outlined consume of DisplayList.Effect(v65, v66, v67);
            LOWORD(v49) = 0;
            break;
        }
        __int16 v42 = v49 | v3;
        goto LABEL_51;
      case 2:
        uint64_t v50 = *(void *)(v2 + 16);
        if (!v50)
        {
          __int16 v42 = 128;
          goto LABEL_26;
        }
        if (v50 == 1)
        {
          uint64_t v51 = 0;
          __int16 v42 = 128;
LABEL_24:
          uint64_t v58 = v50 - v51;
          uint64_t v59 = (__int16 *)(v2 + 40 * v51 + 64);
          do
          {
            __int16 v60 = *v59;
            v59 += 20;
            v42 |= v60;
            --v58;
          }
          while (v58);
          goto LABEL_26;
        }
        __int16 v52 = 0;
        uint64_t v51 = v50 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v53 = (__int16 *)(v2 + 104);
        __int16 v54 = 128;
        uint64_t v55 = v50 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v56 = *(v53 - 20);
          __int16 v57 = *v53;
          v53 += 40;
          v54 |= v56;
          v52 |= v57;
          v55 -= 2;
        }
        while (v55);
        __int16 v42 = v52 | v54;
        if (v50 != v51) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(v2, v14);
        outlined copy of DisplayList.Item.Value(v2, v14);
        break;
      case 3:
        outlined copy of DisplayList.Item.Value(v2, v14);
        __int16 v42 = 0;
        break;
      default:
        uint64_t v85 = HIWORD(v3);
        switch(v2 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v2 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v90);
            unint64_t v47 = v92;
            uint64_t v81 = *((void *)&v91 + 1);
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            unint64_t v78 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v47 + 40);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            v78(&v89, v81, v47);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            __int16 v42 = v89;
            goto LABEL_51;
          case 8uLL:
            uint64_t v61 = *(void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v62 = *(void **)(v61 + 216);
            if (!v62) {
              goto LABEL_33;
            }
            uint64_t v83 = v39;
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_retain();
            swift_retain();
            id v75 = v62;
            if ((uint64_t)objc_msgSend(v62, sel_length) <= 0)
            {
              outlined consume of DisplayList.Item.Value(v2, v14);
              swift_release();
              goto LABEL_56;
            }
            uint64_t v5 = v61;
            if (one-time initialization token for updateSchedule != -1) {
              goto LABEL_59;
            }
            goto LABEL_30;
          case 9uLL:
            __int16 v42 = *(_WORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v2, v14);
LABEL_36:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            __int16 v42 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            __int16 v42 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v90 = v6;
    *((void *)&v90 + 1) = v7;
    *(void *)&uint64_t v91 = v8;
    *((void *)&v91 + 1) = v9;
    uint64_t v92 = v39;
    uint64_t v93 = v2;
    uint64_t v94 = v14;
    uint64_t v95 = v13;
    uint64_t v97 = v46;
    unint64_t v96 = v3;
    uint64_t v98 = v88;
    DisplayList.Item.properties.getter(&v89);
    outlined consume of DisplayList.Item.Value(v2, v14);
    outlined consume of GraphicsBlendMode(v15, a1);
    char v41 = v89;
    goto LABEL_53;
  }
  outlined consume of GraphicsBlendMode(v15, a1);
  char v41 = 0;
  __int16 v42 = 0;
  uint64_t v4 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)unsigned int v87 = v4;
  *(_WORD *)(v87 + 8) = v42;
  *(unsigned char *)(v87 + 10) = v41;
  return outlined consume of DisplayList.Item.Value(v2, v14);
}

{
  int *v1;
  unint64_t v2;
  void *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  unint64_t v35;
  unint64_t v36;
  long long *v37;
  int v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  __int16 v42;
  uint64_t Value;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(__int16 *__return_ptr, uint64_t, unint64_t);
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int16 *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  int v66;
  int v67;
  __int16 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  unint64_t v74;
  void (*v75)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  unsigned __int16 v81;
  uint64_t v82;
  void *v83;
  __int16 v84;
  long long v85;
  long long v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __int16 v91;
  char v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  long long v96;
  unint64_t v97;
  long long v98;
  uint64_t v99;
  unsigned __int16 v100;
  unsigned __int8 v101;
  int v102;
  uint64_t v103;

  unint64_t v103 = *MEMORY[0x263EF8340];
  int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v81 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v12;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  unint64_t v14 = *(void *)Value;
  uint64_t v81 = *(_WORD *)(Value + 8);
  unint64_t v13 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_57:
    swift_once();
LABEL_29:
    __int16 v60 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v3, sel_length, v69);
    if (objc_msgSend(v3, sel_attribute_atIndex_effectiveRange_, v60, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v85, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      uint64_t v61 = *(unsigned char *)(v76 + 256);
      outlined consume of DisplayList.Item.Value(v15, v2);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v15, v2);
      if (v61)
      {
        __int16 v42 = 8;
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v85 = 0u;
      unsigned int v86 = 0u;
      _sypSgWOhTm_9((uint64_t)&v85, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_54:
      outlined consume of DisplayList.Item.Value(v15, v2);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v15, v2);
    }
    __int16 v42 = 0;
    goto LABEL_51;
  }
  uint64_t v77 = v14;
  unint64_t v80 = a1;
  unint64_t v73 = v13;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unint64_t v72 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  __int16 v71 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  __int16 v70 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  int v69 = HIDWORD(v22);
  unint64_t v24 = AGCreateWeakAttribute();
  unint64_t v25 = v24;
  unsigned int v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unint64_t v28 = v27;
  unsigned int v29 = v15;
  unint64_t v30 = HIDWORD(v27);
  _threadGeometryProxyData();
  uint64_t v94 = __PAIR64__(v72, v17);
  uint64_t v95 = __PAIR64__(v71, v19);
  *(void *)&unint64_t v96 = __PAIR64__(v70, v21);
  *((void *)&v96 + 1) = __PAIR64__(v69, v23);
  uint64_t v97 = __PAIR64__(v26, v25);
  *(void *)&uint64_t v98 = __PAIR64__(v30, v28);
  DWORD2(v98) = v29;
  _setThreadGeometryProxyData();
  _setThreadGeometryProxyData();
  uint64_t v31 = (double *)AGGraphGetValue();
  double v32 = *v31;
  double v33 = v31[1];
  char v34 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v35 = v32 - *v34;
  *(double *)&unint64_t v36 = v33 - v34[1];
  uint64_t v37 = (long long *)AGGraphGetValue();
  int v38 = *v1;
  uint64_t v94 = v35;
  uint64_t v95 = v36;
  unint64_t v96 = *v37;
  uint64_t v97 = v29;
  uint64_t v98 = xmmword_2461E0A60;
  unint64_t v99 = v77;
  int v101 = v73;
  unint64_t v100 = v81;
  unint64_t v102 = v38;
  LOBYTE(v85) = *((unsigned char *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v85);
  unint64_t v6 = v94;
  unint64_t v7 = v95;
  uint64_t v9 = *((void *)&v96 + 1);
  uint64_t v8 = v96;
  uint64_t v5 = v97;
  unint64_t v2 = *((void *)&v98 + 1);
  uint64_t v15 = v98;
  a1 = v99;
  LODWORD(v14) = v100 | (v101 << 16);
  uint64_t v4 = v102;
  unint64_t v39 = *((void *)&v98 + 1) >> 62;
  if (*((void *)&v98 + 1) >> 62 != 3
    || (v14 & 0xFFFFFF) != 0
    || *((void *)&v98 + 1) != 0xC000000000000000
    || v99 | (unint64_t)v98)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    char v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_2461B9DC0;
    *(void *)(v44 + 32) = v6;
    *(void *)(v44 + 40) = v7;
    *(void *)(v44 + 48) = v8;
    *(void *)(v44 + 56) = v9;
    *(void *)(v44 + 64) = v5;
    *(void *)(v44 + 72) = v15;
    *(void *)(v44 + 80) = v2;
    *(void *)(v44 + 88) = a1;
    int v11 = WORD1(v14);
    *(unsigned char *)(v44 + 98) = BYTE2(v14);
    *(_WORD *)(v44 + 96) = v14;
    *(_DWORD *)(v44 + 100) = v4;
    unint64_t v13 = v44;
    __int16 v42 = 0;
    switch((int)v39)
    {
      case 1:
        switch(BYTE4(v2))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v15, v2, 2);
            unint64_t v47 = (v15 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v15 + 16, (uint64_t)&v85);
            uint64_t v62 = v87;
            unint64_t v78 = *((void *)&v86 + 1);
            __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
            id v75 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v62 + 56);
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            v75(&v84, v78, v62);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v15, v2, 3);
            LOWORD(v47) = v84;
            break;
          case 7:
            LOWORD(v47) = *(_WORD *)(v15 + 24);
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v15, v2, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v15, v2, 10);
            LOWORD(v47) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v15, v2, 12);
            LOWORD(v47) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            uint64_t v63 = v15;
            char v64 = v2;
            LOBYTE(v65) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v15, v2, 15);
            LOWORD(v47) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v15, v2, 16);
            LOWORD(v47) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr))(*(void *)v15 + 112))(&v85);
            uint64_t v79 = v85;
            char v66 = (unsigned __int16)word_26FA429C8;
            unint64_t v67 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v15, v2, 17);
            if ((v67 & ~v66) != 0) {
              int v68 = v67;
            }
            else {
              int v68 = 0;
            }
            LOWORD(v47) = v79 | v66 | v68;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_bridgeObjectRelease();
            uint64_t v63 = v15;
            char v64 = v2;
            uint64_t v65 = HIDWORD(v2);
LABEL_43:
            outlined consume of DisplayList.Effect(v63, v64, v65);
            LOWORD(v47) = 0;
            break;
        }
        __int16 v42 = v47 | v14;
        break;
      case 2:
        uint64_t v48 = *(void *)(v15 + 16);
        if (!v48)
        {
          __int16 v42 = 128;
          goto LABEL_34;
        }
        if (v48 == 1)
        {
          unint64_t v49 = 0;
          __int16 v42 = 128;
LABEL_23:
          __int16 v56 = v48 - v49;
          __int16 v57 = (__int16 *)(v15 + 40 * v49 + 64);
          do
          {
            uint64_t v58 = *v57;
            v57 += 20;
            v42 |= v58;
            --v56;
          }
          while (v56);
          goto LABEL_34;
        }
        uint64_t v50 = 0;
        unint64_t v49 = v48 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v51 = (__int16 *)(v15 + 104);
        __int16 v52 = 128;
        uint64_t v53 = v48 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v54 = *(v51 - 20);
          uint64_t v55 = *v51;
          v51 += 40;
          v52 |= v54;
          v50 |= v55;
          v53 -= 2;
        }
        while (v53);
        __int16 v42 = v50 | v52;
        if (v48 != v49) {
          goto LABEL_23;
        }
LABEL_34:
        outlined copy of DisplayList.Item.Value(v15, v2);
        break;
      case 3:
        break;
      default:
        switch(v15 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v15 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v85);
            uint64_t v45 = v87;
            uint64_t v82 = *((void *)&v86 + 1);
            unint64_t v74 = v87;
            __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
            unsigned int v46 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v45 + 40);
            outlined copy of DisplayList.Item.Value(v15, v2);
            v46(&v84, v82, v74);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
            __int16 v42 = v84;
            goto LABEL_51;
          case 8uLL:
            uint64_t v59 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v59 + 216)) {
              goto LABEL_32;
            }
            uint64_t v83 = *(void **)(v59 + 216);
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            outlined copy of DisplayList.Item.Value(v15, v2);
            swift_retain();
            id v76 = v59;
            unsigned int v3 = v83;
            swift_retain();
            if ((uint64_t)objc_msgSend(v83, sel_length) <= 0) {
              goto LABEL_54;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_29;
            }
            goto LABEL_57;
          case 9uLL:
            __int16 v42 = *(_WORD *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_34;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v15, v2);
LABEL_36:
            outlined copy of DisplayList.Item.Value(v15, v2);
            __int16 v42 = 2;
            goto LABEL_51;
          default:
LABEL_32:
            outlined copy of DisplayList.Item.Value(v15, v2);
            __int16 v42 = 0;
            goto LABEL_51;
        }
    }
LABEL_51:
    *(void *)&uint64_t v85 = v6;
    *((void *)&v85 + 1) = v7;
    *(void *)&unsigned int v86 = v8;
    *((void *)&v86 + 1) = v9;
    unsigned int v87 = v5;
    uint64_t v88 = v15;
    uint64_t v89 = v2;
    uint64_t v90 = a1;
    uint64_t v92 = v11;
    uint64_t v91 = v14;
    uint64_t v93 = v4;
    DisplayList.Item.properties.getter(&v84);
    uint64_t result = outlined consume of DisplayList.Item.Value(v15, v2);
    char v41 = v84;
    goto LABEL_52;
  }
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  char v41 = 0;
  __int16 v42 = 0;
  unint64_t v13 = MEMORY[0x263F8EE78];
LABEL_52:
  *(void *)unint64_t v80 = v13;
  *(_WORD *)(v80 + 8) = v42;
  *(unsigned char *)(v80 + 10) = v41;
  return result;
}

{
  int *v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  long long *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t result;
  char v43;
  __int16 v44;
  uint64_t Value;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  __int16 *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 *v59;
  __int16 v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  int v68;
  int v69;
  __int16 v70;
  __int16 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  id v75;
  id v76;
  void (*v77)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v78)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned __int8 v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  long long v90;
  long long v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __int16 v96;
  char v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  long long v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned __int16 v106;
  unsigned __int8 v107;
  int v108;
  uint64_t v109;

  __int16 v109 = *MEMORY[0x263EF8340];
  int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v88 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v12;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  unint64_t v14 = *(void *)Value;
  uint64_t v88 = *(unsigned __int16 *)(Value + 8);
  unint64_t v13 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_59:
    swift_once();
LABEL_30:
    uint64_t v63 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v75, sel_length);
    if (objc_msgSend(v75, sel_attribute_atIndex_effectiveRange_, v63, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v90, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      char v64 = *(unsigned char *)(v5 + 256);
      outlined consume of DisplayList.Item.Value(v14, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v14, v13);
      unint64_t v40 = v83;
      if (v64)
      {
        char v44 = 8;
LABEL_51:
        LOBYTE(v47) = v85;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v90 = 0u;
      uint64_t v91 = 0u;
      _sypSgWOhTm_9((uint64_t)&v90, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      outlined consume of DisplayList.Item.Value(v14, v13);
      swift_release();
LABEL_56:
      swift_release();
      outlined consume of DisplayList.Item.Value(v14, v13);
      unint64_t v40 = v83;
    }
    char v44 = 0;
    goto LABEL_51;
  }
  unsigned int v87 = a1;
  id v76 = (id)v15;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unint64_t v74 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unint64_t v73 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v72 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  unsigned int v86 = v13;
  unint64_t v24 = HIDWORD(v22);
  unint64_t v25 = AGCreateWeakAttribute();
  unsigned int v26 = v25;
  unint64_t v80 = v14;
  unint64_t v27 = HIDWORD(v25);
  unint64_t v28 = AGCreateWeakAttribute();
  unsigned int v29 = v28;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  unint64_t v99 = __PAIR64__(v74, v17);
  unint64_t v100 = __PAIR64__(v73, v19);
  *(void *)&int v101 = __PAIR64__(v72, v21);
  *((void *)&v101 + 1) = __PAIR64__(v24, v23);
  unint64_t v102 = __PAIR64__(v27, v26);
  unint64_t v103 = __PAIR64__(v30, v29);
  LODWORD(v104) = v76;
  _setThreadGeometryProxyData();
  uint64_t v31 = AGGraphGetValue();
  uint64_t v15 = *(void *)v31;
  a1 = *(unsigned __int8 *)(v31 + 8);
  outlined copy of GraphicsBlendMode(*(void *)v31, a1);
  _setThreadGeometryProxyData();
  double v32 = (double *)AGGraphGetValue();
  double v33 = *v32;
  char v34 = v32[1];
  unint64_t v35 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v36 = v33 - *v35;
  *(double *)&uint64_t v37 = v34 - v35[1];
  int v38 = (long long *)AGGraphGetValue();
  unint64_t v39 = *v1;
  unint64_t v99 = v36;
  unint64_t v100 = v37;
  int v101 = *v38;
  unint64_t v102 = (unint64_t)v76;
  unint64_t v103 = v15;
  int v104 = a1 | 0x4000000500000000;
  uint64_t v105 = v80;
  uint64_t v107 = v86;
  unint64_t v106 = v88;
  uint64_t v108 = v39;
  LOBYTE(v90) = *((unsigned char *)v1 + 36);
  outlined copy of GraphicsBlendMode(v15, a1);
  DisplayList.Item.canonicalize(options:)((char *)&v90);
  unint64_t v6 = v99;
  unint64_t v7 = v100;
  uint64_t v9 = *((void *)&v101 + 1);
  uint64_t v8 = v101;
  unint64_t v40 = v102;
  unint64_t v14 = v103;
  unint64_t v13 = v104;
  unint64_t v2 = v105;
  unsigned int v3 = v106 | (v107 << 16);
  uint64_t v88 = v108;
  char v41 = v104 >> 62;
  if (v104 >> 62 != 3 || (v3 & 0xFFFFFF) != 0 || v104 != 0xC000000000000000 || v105 | v103)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    unsigned int v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_2461B9DC0;
    *(void *)(v46 + 32) = v6;
    *(void *)(v46 + 40) = v7;
    *(void *)(v46 + 48) = v8;
    *(void *)(v46 + 56) = v9;
    *(void *)(v46 + 64) = v40;
    *(void *)(v46 + 72) = v14;
    *(void *)(v46 + 80) = v13;
    *(void *)(v46 + 88) = v2;
    unint64_t v47 = HIWORD(v3);
    *(unsigned char *)(v46 + 98) = BYTE2(v3);
    *(_WORD *)(v46 + 96) = v3;
    *(_DWORD *)(v46 + 100) = v88;
    uint64_t v4 = v46;
    switch((int)v41)
    {
      case 1:
        uint64_t v85 = HIWORD(v3);
        switch(BYTE4(v13))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v14, v13, 2);
            LODWORD(v49) = (v14 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v14 + 16, (uint64_t)&v90);
            unint64_t v49 = v92;
            uint64_t v79 = *((void *)&v91 + 1);
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            uint64_t v77 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v49 + 56);
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            v77(&v89, v79, v49);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v14, v13, 3);
            LOWORD(v49) = v89;
            break;
          case 7:
            LOWORD(v49) = *(_WORD *)(v14 + 24);
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v14, v13, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v14, v13, 10);
            LOWORD(v49) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v14, v13, 12);
            LOWORD(v49) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            uint64_t v65 = v14;
            char v66 = v13;
            LOBYTE(v67) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v14, v13, 15);
            LOWORD(v49) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v14, v13, 16);
            LOWORD(v49) = 32;
            break;
          case 0x11:
            uint64_t v84 = v40;
            (*(void (**)(long long *__return_ptr))(*(void *)v14 + 112))(&v90);
            uint64_t v82 = v90;
            int v68 = (unsigned __int16)word_26FA429C8;
            int v69 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v14, v13, 17);
            if ((v69 & ~v68) != 0) {
              __int16 v70 = v69;
            }
            else {
              __int16 v70 = 0;
            }
            __int16 v71 = v82 | v68;
            unint64_t v40 = v84;
            LOWORD(v49) = v71 | v70;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_bridgeObjectRelease();
            uint64_t v65 = v14;
            char v66 = v13;
            unint64_t v67 = HIDWORD(v13);
LABEL_43:
            outlined consume of DisplayList.Effect(v65, v66, v67);
            LOWORD(v49) = 0;
            break;
        }
        char v44 = v49 | v3;
        goto LABEL_51;
      case 2:
        uint64_t v50 = *(void *)(v14 + 16);
        if (!v50)
        {
          char v44 = 128;
          goto LABEL_26;
        }
        if (v50 == 1)
        {
          uint64_t v51 = 0;
          char v44 = 128;
LABEL_24:
          uint64_t v58 = v50 - v51;
          uint64_t v59 = (__int16 *)(v14 + 40 * v51 + 64);
          do
          {
            __int16 v60 = *v59;
            v59 += 20;
            v44 |= v60;
            --v58;
          }
          while (v58);
          goto LABEL_26;
        }
        __int16 v52 = 0;
        uint64_t v51 = v50 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v53 = (__int16 *)(v14 + 104);
        __int16 v54 = 128;
        uint64_t v55 = v50 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v56 = *(v53 - 20);
          __int16 v57 = *v53;
          v53 += 40;
          v54 |= v56;
          v52 |= v57;
          v55 -= 2;
        }
        while (v55);
        char v44 = v52 | v54;
        if (v50 != v51) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(v14, v13);
        break;
      case 3:
        outlined copy of DisplayList.Item.Value(v14, v13);
        char v44 = 0;
        break;
      default:
        uint64_t v85 = HIWORD(v3);
        switch(v14 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v14 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v90);
            uint64_t v48 = v92;
            uint64_t v81 = *((void *)&v91 + 1);
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            unint64_t v78 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v48 + 40);
            outlined copy of DisplayList.Item.Value(v14, v13);
            v78(&v89, v81, v48);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            char v44 = v89;
            goto LABEL_51;
          case 8uLL:
            uint64_t v61 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v62 = *(void **)(v61 + 216);
            if (!v62) {
              goto LABEL_33;
            }
            uint64_t v83 = v40;
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            outlined copy of DisplayList.Item.Value(v14, v13);
            swift_retain();
            swift_retain();
            id v75 = v62;
            if ((uint64_t)objc_msgSend(v62, sel_length) <= 0)
            {
              outlined consume of DisplayList.Item.Value(v14, v13);
              swift_release();
              goto LABEL_56;
            }
            uint64_t v5 = v61;
            if (one-time initialization token for updateSchedule != -1) {
              goto LABEL_59;
            }
            goto LABEL_30;
          case 9uLL:
            char v44 = *(_WORD *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v14, v13);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v14, v13);
LABEL_36:
            outlined copy of DisplayList.Item.Value(v14, v13);
            char v44 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(v14, v13);
            char v44 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v90 = v6;
    *((void *)&v90 + 1) = v7;
    *(void *)&uint64_t v91 = v8;
    *((void *)&v91 + 1) = v9;
    uint64_t v92 = v40;
    uint64_t v93 = v14;
    uint64_t v94 = v13;
    uint64_t v95 = v2;
    uint64_t v97 = v47;
    unint64_t v96 = v3;
    uint64_t v98 = v88;
    DisplayList.Item.properties.getter(&v89);
    outlined consume of GraphicsBlendMode(v15, a1);
    uint64_t result = outlined consume of DisplayList.Item.Value(v14, v13);
    uint64_t v43 = v89;
    goto LABEL_53;
  }
  outlined consume of GraphicsBlendMode(v15, a1);
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  uint64_t v43 = 0;
  char v44 = 0;
  uint64_t v4 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)unsigned int v87 = v4;
  *(_WORD *)(v87 + 8) = v44;
  *(unsigned char *)(v87 + 10) = v43;
  return result;
}

{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t Value;
  uint64_t result;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  double v39;
  double *v40;
  unint64_t v41;
  unint64_t v42;
  long long *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  __int16 v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  __int16 *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 *v63;
  __int16 v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  int v72;
  int v73;
  __int16 v74;
  __int16 v75;
  unsigned __int8 v76;
  unint64_t v77;
  unsigned __int16 v78;
  unint64_t v79;
  id v80;
  id v81;
  void (*v82)(__int16 *__return_ptr, uint64_t, unint64_t);
  unint64_t v83;
  void (*v84)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  __int16 v94;
  long long v95;
  long long v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  __int16 v101;
  char v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  long long v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned __int16 v111;
  unsigned __int8 v112;
  int v113;
  uint64_t v114;

  uint64_t v114 = *MEMORY[0x263EF8340];
  uint64_t v9 = *MEMORY[0x263F288F8];
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    int v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v10;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  unint64_t v13 = *(void *)Value;
  int v11 = *(unsigned __int16 *)(Value + 8);
  uint64_t v12 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v13 + 16)) {
    goto LABEL_7;
  }
LABEL_3:
  unint64_t v14 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v9)
  {
    __break(1u);
LABEL_62:
    swift_once();
LABEL_33:
    unint64_t v67 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v80, sel_length);
    if (objc_msgSend(v80, sel_attribute_atIndex_effectiveRange_, v67, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v95, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      int v68 = *(unsigned char *)(v3 + 256);
      outlined consume of DisplayList.Item.Value(v11, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v11, v13);
      uint64_t v45 = v88;
      if (v68)
      {
        uint64_t v48 = 8;
LABEL_54:
        LOBYTE(v50) = v90;
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v95 = 0u;
      unint64_t v96 = 0u;
      _sypSgWOhTm_9((uint64_t)&v95, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      outlined consume of DisplayList.Item.Value(v11, v13);
      swift_release();
LABEL_59:
      swift_release();
      outlined consume of DisplayList.Item.Value(v11, v13);
      uint64_t v45 = v88;
    }
    uint64_t v48 = 0;
    goto LABEL_54;
  }
  id v76 = v12;
  uint64_t v77 = v13;
  unint64_t v78 = v11;
  uint64_t v91 = a1;
  uint64_t v93 = v14;
  uint64_t v15 = AGCreateWeakAttribute();
  unint64_t v16 = v15;
  uint64_t v83 = HIDWORD(v15);
  unsigned int v17 = AGCreateWeakAttribute();
  unint64_t v18 = v17;
  uint64_t v81 = (id)HIDWORD(v17);
  unsigned int v19 = AGCreateWeakAttribute();
  unint64_t v20 = v19;
  uint64_t v79 = HIDWORD(v19);
  unsigned int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  unsigned int v23 = HIDWORD(v21);
  unint64_t v24 = AGCreateWeakAttribute();
  unint64_t v25 = v24;
  unsigned int v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unint64_t v28 = v27;
  unsigned int v29 = HIDWORD(v27);
  _threadGeometryProxyData();
  int v104 = __PAIR64__(v83, v16);
  uint64_t v105 = __PAIR64__(v81, v18);
  *(void *)&unint64_t v106 = __PAIR64__(v79, v20);
  *((void *)&v106 + 1) = __PAIR64__(v23, v22);
  uint64_t v107 = __PAIR64__(v26, v25);
  uint64_t v108 = __PAIR64__(v29, v28);
  LODWORD(v109) = v93;
  _setThreadGeometryProxyData();
  unint64_t v30 = AGGraphGetValue();
  if (*(unsigned char *)(v30 + 28) == 1)
  {
    uint64_t v10 = 0;
    a1 = 19;
  }
  else
  {
    double v33 = *(_DWORD *)(v30 + 24);
    unint64_t v35 = *(void *)(v30 + 8);
    char v34 = *(void *)(v30 + 16);
    unint64_t v36 = *(void *)v30;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v35;
    *(void *)(v10 + 24) = v34;
    *(_DWORD *)(v10 + 32) = v33;
    *(unsigned char *)(v10 + 36) = 0;
    *(void *)(v10 + 40) = v36;
    swift_retain();
    a1 = 18;
  }
  _setThreadGeometryProxyData();
  uint64_t v37 = (double *)AGGraphGetValue();
  int v38 = *v37;
  unint64_t v39 = v37[1];
  unint64_t v40 = (double *)AGGraphGetValue();
  *(double *)&char v41 = v38 - *v40;
  *(double *)&__int16 v42 = v39 - v40[1];
  uint64_t v43 = (long long *)AGGraphGetValue();
  char v44 = *v1;
  int v104 = v41;
  uint64_t v105 = v42;
  unint64_t v106 = *v43;
  uint64_t v107 = v93;
  uint64_t v108 = v10;
  __int16 v109 = (a1 << 32) | 0x4000000000000000;
  char v110 = v77;
  uint64_t v112 = v76;
  char v111 = v78;
  uint64_t v113 = v44;
  LOBYTE(v95) = *((unsigned char *)v1 + 36);
  outlined copy of DisplayList.Effect(v10, 0, a1);
  DisplayList.Item.canonicalize(options:)((char *)&v95);
  uint64_t v4 = v104;
  uint64_t v5 = v105;
  unint64_t v7 = *((void *)&v106 + 1);
  unint64_t v6 = v106;
  uint64_t v45 = v107;
  int v11 = v108;
  unint64_t v13 = v109;
  uint64_t v12 = v110;
  LODWORD(v14) = v111 | (v112 << 16);
  uint64_t v92 = v113;
  unsigned int v46 = v109 >> 62;
  if (v109 >> 62 != 3 || (v14 & 0xFFFFFF) != 0 || v109 != 0xC000000000000000 || v110 | v108)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    unint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_2461B9DC0;
    *(void *)(v49 + 32) = v4;
    *(void *)(v49 + 40) = v5;
    *(void *)(v49 + 48) = v6;
    *(void *)(v49 + 56) = v7;
    *(void *)(v49 + 64) = v45;
    *(void *)(v49 + 72) = v11;
    *(void *)(v49 + 80) = v13;
    *(void *)(v49 + 88) = v12;
    uint64_t v50 = WORD1(v14);
    *(unsigned char *)(v49 + 98) = BYTE2(v14);
    *(_WORD *)(v49 + 96) = v14;
    *(_DWORD *)(v49 + 100) = v92;
    unint64_t v2 = v49;
    switch((int)v46)
    {
      case 1:
        uint64_t v90 = WORD1(v14);
        __int16 v52 = outlined copy of DisplayList.Item.Value(v11, v13);
        switch(BYTE4(v13))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 2);
            LODWORD(v53) = (v11 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v11 + 16, (uint64_t)&v95);
            uint64_t v53 = v97;
            uint64_t v85 = *((void *)&v96 + 1);
            __swift_project_boxed_opaque_existential_1(&v95, *((uint64_t *)&v96 + 1));
            uint64_t v82 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v53 + 56);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            v82(&v94, v85, v53);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 3);
            LOWORD(v53) = v94;
            break;
          case 7:
            LOWORD(v53) = *(_WORD *)(v11 + 24);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 10);
            LOWORD(v53) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 12);
            LOWORD(v53) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            int v69 = v11;
            __int16 v70 = v13;
            LOBYTE(v71) = 14;
            goto LABEL_46;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 15);
            LOWORD(v53) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 16);
            LOWORD(v53) = 32;
            break;
          case 0x11:
            uint64_t v89 = v45;
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v11 + 112))(&v95, v52);
            unsigned int v87 = v95;
            unint64_t v72 = (unsigned __int16)word_26FA429C8;
            unint64_t v73 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 17);
            if ((v73 & ~v72) != 0) {
              unint64_t v74 = v73;
            }
            else {
              unint64_t v74 = 0;
            }
            id v75 = v87 | v72;
            uint64_t v45 = v89;
            LOWORD(v53) = v75 | v74;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            int v69 = v11;
            __int16 v70 = v13;
            __int16 v71 = HIDWORD(v13);
LABEL_46:
            outlined consume of DisplayList.Effect(v69, v70, v71);
            LOWORD(v53) = 0;
            break;
        }
        uint64_t v48 = v53 | v14;
        goto LABEL_54;
      case 2:
        __int16 v54 = *(void *)(v11 + 16);
        if (!v54)
        {
          uint64_t v48 = 128;
          goto LABEL_29;
        }
        if (v54 == 1)
        {
          uint64_t v55 = 0;
          uint64_t v48 = 128;
LABEL_27:
          uint64_t v62 = v54 - v55;
          uint64_t v63 = (__int16 *)(v11 + 40 * v55 + 64);
          do
          {
            char v64 = *v63;
            v63 += 20;
            v48 |= v64;
            --v62;
          }
          while (v62);
          goto LABEL_29;
        }
        __int16 v56 = 0;
        uint64_t v55 = v54 & 0x7FFFFFFFFFFFFFFELL;
        __int16 v57 = (__int16 *)(v11 + 104);
        uint64_t v58 = 128;
        uint64_t v59 = v54 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v60 = *(v57 - 20);
          uint64_t v61 = *v57;
          v57 += 40;
          v58 |= v60;
          v56 |= v61;
          v59 -= 2;
        }
        while (v59);
        uint64_t v48 = v56 | v58;
        if (v54 != v55) {
          goto LABEL_27;
        }
LABEL_29:
        outlined copy of DisplayList.Item.Value(v11, v13);
        outlined copy of DisplayList.Item.Value(v11, v13);
        break;
      case 3:
        outlined copy of DisplayList.Item.Value(v11, v13);
        uint64_t v48 = 0;
        break;
      default:
        uint64_t v90 = WORD1(v14);
        switch(v11 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v11 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v95);
            uint64_t v51 = v97;
            unsigned int v86 = *((void *)&v96 + 1);
            __swift_project_boxed_opaque_existential_1(&v95, *((uint64_t *)&v96 + 1));
            uint64_t v84 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v51 + 40);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            v84(&v94, v86, v51);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
            uint64_t v48 = v94;
            goto LABEL_54;
          case 8uLL:
            uint64_t v65 = *(void *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            char v66 = *(void **)(v65 + 216);
            if (!v66) {
              goto LABEL_36;
            }
            uint64_t v88 = v45;
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_retain();
            swift_retain();
            unint64_t v80 = v66;
            if ((uint64_t)objc_msgSend(v66, sel_length) <= 0)
            {
              outlined consume of DisplayList.Item.Value(v11, v13);
              swift_release();
              goto LABEL_59;
            }
            unsigned int v3 = v65;
            if (one-time initialization token for updateSchedule != -1) {
              goto LABEL_62;
            }
            goto LABEL_33;
          case 9uLL:
            uint64_t v48 = *(_WORD *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            goto LABEL_54;
          case 0xBuLL:
            goto LABEL_39;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v11, v13);
LABEL_39:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            uint64_t v48 = 2;
            break;
          default:
LABEL_36:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            uint64_t v48 = 0;
            break;
        }
        goto LABEL_54;
    }
LABEL_55:
    *(void *)&uint64_t v95 = v4;
    *((void *)&v95 + 1) = v5;
    *(void *)&unint64_t v96 = v6;
    *((void *)&v96 + 1) = v7;
    uint64_t v97 = v45;
    uint64_t v98 = v11;
    unint64_t v99 = v13;
    unint64_t v100 = v12;
    unint64_t v102 = v50;
    int v101 = v14;
    unint64_t v103 = v92;
    DisplayList.Item.properties.getter(&v94);
    outlined consume of DisplayList.Item.Value(v11, v13);
    outlined consume of DisplayList.Effect(v10, 0, a1);
    unint64_t v47 = v94;
    goto LABEL_56;
  }
  outlined consume of DisplayList.Effect(v10, 0, a1);
  unint64_t v47 = 0;
  uint64_t v48 = 0;
  unint64_t v2 = MEMORY[0x263F8EE78];
LABEL_56:
  *(void *)uint64_t v91 = v2;
  *(_WORD *)(v91 + 8) = v48;
  *(unsigned char *)(v91 + 10) = v47;
  return outlined consume of DisplayList.Item.Value(v11, v13);
}

{
  int *v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  long long *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  __int16 v43;
  uint64_t Value;
  uint64_t result;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  __int16 *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 *v60;
  __int16 v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  int v69;
  int v70;
  __int16 v71;
  __int16 v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  id v77;
  void (*v78)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v79)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int16 v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unsigned __int8 v87;
  uint64_t v88;
  int v89;
  __int16 v90;
  long long v91;
  long long v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  __int16 v97;
  char v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  long long v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned __int16 v107;
  unsigned __int8 v108;
  int v109;
  uint64_t v110;

  char v110 = *MEMORY[0x263EF8340];
  int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v89 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v12;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  unint64_t v14 = *(void *)Value;
  uint64_t v89 = *(unsigned __int16 *)(Value + 8);
  unint64_t v13 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_59:
    swift_once();
LABEL_30:
    char v64 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v76, sel_length);
    if (objc_msgSend(v76, sel_attribute_atIndex_effectiveRange_, v64, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v91, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      uint64_t v65 = *(unsigned char *)(v5 + 256);
      outlined consume of DisplayList.Item.Value(v2, v14);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v2, v14);
      unint64_t v40 = v84;
      if (v65)
      {
        uint64_t v43 = 8;
LABEL_51:
        LOBYTE(v47) = v86;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v91 = 0u;
      uint64_t v92 = 0u;
      _sypSgWOhTm_9((uint64_t)&v91, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      outlined consume of DisplayList.Item.Value(v2, v14);
      swift_release();
LABEL_56:
      swift_release();
      outlined consume of DisplayList.Item.Value(v2, v14);
      unint64_t v40 = v84;
    }
    uint64_t v43 = 0;
    goto LABEL_51;
  }
  uint64_t v88 = a1;
  uint64_t v77 = (id)v15;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  id v75 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unint64_t v74 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v73 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  unsigned int v87 = v13;
  unint64_t v24 = HIDWORD(v22);
  unint64_t v25 = AGCreateWeakAttribute();
  unsigned int v26 = v25;
  uint64_t v81 = v14;
  unint64_t v27 = HIDWORD(v25);
  unint64_t v28 = AGCreateWeakAttribute();
  unsigned int v29 = v28;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  unint64_t v100 = __PAIR64__(v75, v17);
  int v101 = __PAIR64__(v74, v19);
  *(void *)&unint64_t v102 = __PAIR64__(v73, v21);
  *((void *)&v102 + 1) = __PAIR64__(v24, v23);
  unint64_t v103 = __PAIR64__(v27, v26);
  int v104 = __PAIR64__(v30, v29);
  LODWORD(v105) = v77;
  _setThreadGeometryProxyData();
  uint64_t v31 = AGGraphGetValue();
  uint64_t v15 = *(void *)v31;
  a1 = *(unsigned __int8 *)(v31 + 8);
  outlined copy of GraphicsBlendMode(*(void *)v31, a1);
  _setThreadGeometryProxyData();
  double v32 = (double *)AGGraphGetValue();
  double v33 = *v32;
  char v34 = v32[1];
  unint64_t v35 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v36 = v33 - *v35;
  *(double *)&uint64_t v37 = v34 - v35[1];
  int v38 = (long long *)AGGraphGetValue();
  unint64_t v39 = *v1;
  unint64_t v100 = v36;
  int v101 = v37;
  unint64_t v102 = *v38;
  unint64_t v103 = (unint64_t)v77;
  int v104 = v15;
  uint64_t v105 = a1 | 0x4000000500000000;
  unint64_t v106 = v81;
  uint64_t v108 = v87;
  uint64_t v107 = v89;
  __int16 v109 = v39;
  LOBYTE(v91) = *((unsigned char *)v1 + 36);
  outlined copy of GraphicsBlendMode(v15, a1);
  DisplayList.Item.canonicalize(options:)((char *)&v91);
  unint64_t v6 = v100;
  unint64_t v7 = v101;
  uint64_t v9 = *((void *)&v102 + 1);
  uint64_t v8 = v102;
  unint64_t v40 = v103;
  unint64_t v2 = v104;
  unint64_t v14 = v105;
  unint64_t v13 = v106;
  unsigned int v3 = v107 | (v108 << 16);
  uint64_t v89 = v109;
  char v41 = v105 >> 62;
  if (v105 >> 62 != 3 || (v3 & 0xFFFFFF) != 0 || v105 != 0xC000000000000000 || v106 | v104)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    unsigned int v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_2461B9DC0;
    *(void *)(v46 + 32) = v6;
    *(void *)(v46 + 40) = v7;
    *(void *)(v46 + 48) = v8;
    *(void *)(v46 + 56) = v9;
    *(void *)(v46 + 64) = v40;
    *(void *)(v46 + 72) = v2;
    *(void *)(v46 + 80) = v14;
    *(void *)(v46 + 88) = v13;
    unint64_t v47 = HIWORD(v3);
    *(unsigned char *)(v46 + 98) = BYTE2(v3);
    *(_WORD *)(v46 + 96) = v3;
    *(_DWORD *)(v46 + 100) = v89;
    uint64_t v4 = v46;
    switch((int)v41)
    {
      case 1:
        unsigned int v86 = HIWORD(v3);
        unint64_t v49 = outlined copy of DisplayList.Item.Value(v2, v14);
        switch(BYTE4(v14))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 2);
            LODWORD(v50) = (v2 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v2 + 16, (uint64_t)&v91);
            uint64_t v50 = v93;
            unint64_t v80 = *((void *)&v92 + 1);
            __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
            unint64_t v78 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v50 + 56);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            v78(&v90, v80, v50);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 3);
            LOWORD(v50) = v90;
            break;
          case 7:
            LOWORD(v50) = *(_WORD *)(v2 + 24);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 10);
            LOWORD(v50) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 12);
            LOWORD(v50) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            char v66 = v2;
            unint64_t v67 = v14;
            LOBYTE(v68) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 15);
            LOWORD(v50) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 16);
            LOWORD(v50) = 32;
            break;
          case 0x11:
            uint64_t v85 = v40;
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v2 + 112))(&v91, v49);
            uint64_t v83 = v91;
            int v69 = (unsigned __int16)word_26FA429C8;
            __int16 v70 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v2, v14, 17);
            if ((v70 & ~v69) != 0) {
              __int16 v71 = v70;
            }
            else {
              __int16 v71 = 0;
            }
            unint64_t v72 = v83 | v69;
            unint64_t v40 = v85;
            LOWORD(v50) = v72 | v71;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_bridgeObjectRelease();
            char v66 = v2;
            unint64_t v67 = v14;
            int v68 = HIDWORD(v14);
LABEL_43:
            outlined consume of DisplayList.Effect(v66, v67, v68);
            LOWORD(v50) = 0;
            break;
        }
        uint64_t v43 = v50 | v3;
        goto LABEL_51;
      case 2:
        uint64_t v51 = *(void *)(v2 + 16);
        if (!v51)
        {
          uint64_t v43 = 128;
          goto LABEL_26;
        }
        if (v51 == 1)
        {
          __int16 v52 = 0;
          uint64_t v43 = 128;
LABEL_24:
          uint64_t v59 = v51 - v52;
          __int16 v60 = (__int16 *)(v2 + 40 * v52 + 64);
          do
          {
            uint64_t v61 = *v60;
            v60 += 20;
            v43 |= v61;
            --v59;
          }
          while (v59);
          goto LABEL_26;
        }
        uint64_t v53 = 0;
        __int16 v52 = v51 & 0x7FFFFFFFFFFFFFFELL;
        __int16 v54 = (__int16 *)(v2 + 104);
        uint64_t v55 = 128;
        __int16 v56 = v51 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v57 = *(v54 - 20);
          uint64_t v58 = *v54;
          v54 += 40;
          v55 |= v57;
          v53 |= v58;
          v56 -= 2;
        }
        while (v56);
        uint64_t v43 = v53 | v55;
        if (v51 != v52) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(v2, v14);
        outlined copy of DisplayList.Item.Value(v2, v14);
        break;
      case 3:
        outlined copy of DisplayList.Item.Value(v2, v14);
        uint64_t v43 = 0;
        break;
      default:
        unsigned int v86 = HIWORD(v3);
        switch(v2 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v2 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v91);
            uint64_t v48 = v93;
            uint64_t v82 = *((void *)&v92 + 1);
            __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
            uint64_t v79 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v48 + 40);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            v79(&v90, v82, v48);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
            uint64_t v43 = v90;
            goto LABEL_51;
          case 8uLL:
            uint64_t v62 = *(void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v63 = *(void **)(v62 + 216);
            if (!v63) {
              goto LABEL_33;
            }
            uint64_t v84 = v40;
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            swift_retain();
            swift_retain();
            id v76 = v63;
            if ((uint64_t)objc_msgSend(v63, sel_length) <= 0)
            {
              outlined consume of DisplayList.Item.Value(v2, v14);
              swift_release();
              goto LABEL_56;
            }
            uint64_t v5 = v62;
            if (one-time initialization token for updateSchedule != -1) {
              goto LABEL_59;
            }
            goto LABEL_30;
          case 9uLL:
            uint64_t v43 = *(_WORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v2, v14);
LABEL_36:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            uint64_t v43 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(v2, v14);
            outlined copy of DisplayList.Item.Value(v2, v14);
            uint64_t v43 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v91 = v6;
    *((void *)&v91 + 1) = v7;
    *(void *)&uint64_t v92 = v8;
    *((void *)&v92 + 1) = v9;
    uint64_t v93 = v40;
    uint64_t v94 = v2;
    uint64_t v95 = v14;
    unint64_t v96 = v13;
    uint64_t v98 = v47;
    uint64_t v97 = v3;
    unint64_t v99 = v89;
    DisplayList.Item.properties.getter(&v90);
    outlined consume of DisplayList.Item.Value(v2, v14);
    outlined consume of GraphicsBlendMode(v15, a1);
    __int16 v42 = v90;
    goto LABEL_53;
  }
  outlined consume of GraphicsBlendMode(v15, a1);
  __int16 v42 = 0;
  uint64_t v43 = 0;
  uint64_t v4 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v88 = v4;
  *(_WORD *)(v88 + 8) = v43;
  *(unsigned char *)(v88 + 10) = v42;
  return outlined consume of DisplayList.Item.Value(v2, v14);
}

char *GraphicsBlendMode.init(_:)@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = qword_2461DE1E0[*result];
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(unint64_t a1@<X8>)
{
  void (*v74)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v75)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  unint64_t v81;
  unsigned __int16 v82;
  void *v83;
  __int16 v84;
  long long v85;
  long long v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __int16 v91;
  char v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  long long v96;
  unint64_t v97;
  long long v98;
  uint64_t v99;
  unsigned __int16 v100;
  unsigned __int8 v101;
  int v102;
  uint64_t v103;

  unint64_t v103 = *MEMORY[0x263EF8340];
  unsigned int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v82 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v12;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  uint64_t v82 = *(_WORD *)(Value + 8);
  uint64_t v13 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_29:
    uint64_t v60 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v3, sel_length, v69);
    if (objc_msgSend(v3, sel_attribute_atIndex_effectiveRange_, v60, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v85, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      char v61 = *(unsigned char *)(v76 + 256);
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
      if (v61)
      {
        __int16 v41 = 8;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v85 = 0u;
      unsigned int v86 = 0u;
      _sypSgWOhTm_9((uint64_t)&v85, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
    }
    __int16 v41 = 0;
    goto LABEL_52;
  }
  uint64_t v77 = v14;
  uint64_t v81 = a1;
  unsigned __int8 v73 = v13;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unint64_t v72 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unint64_t v71 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v70 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  unint64_t v69 = HIDWORD(v22);
  unint64_t v24 = AGCreateWeakAttribute();
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = v15;
  unint64_t v30 = HIDWORD(v27);
  _threadGeometryProxyData();
  uint64_t v94 = __PAIR64__(v72, v17);
  uint64_t v95 = __PAIR64__(v71, v19);
  *(void *)&unint64_t v96 = __PAIR64__(v70, v21);
  *((void *)&v96 + 1) = __PAIR64__(v69, v23);
  uint64_t v97 = __PAIR64__(v26, v25);
  *(void *)&uint64_t v98 = __PAIR64__(v30, v28);
  DWORD2(v98) = v29;
  _setThreadGeometryProxyData();
  _setThreadGeometryProxyData();
  uint64_t v31 = (double *)AGGraphGetValue();
  double v32 = *v31;
  double v33 = v31[1];
  char v34 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v35 = v32 - *v34;
  *(double *)&unint64_t v36 = v33 - v34[1];
  uint64_t v37 = (long long *)AGGraphGetValue();
  int v38 = *v1;
  uint64_t v94 = v35;
  uint64_t v95 = v36;
  unint64_t v96 = *v37;
  uint64_t v97 = v29;
  uint64_t v98 = xmmword_2461D9D10;
  unint64_t v99 = v77;
  int v101 = v73;
  unint64_t v100 = v82;
  unint64_t v102 = v38;
  LOBYTE(v85) = *((unsigned char *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v85);
  unint64_t v6 = v94;
  unint64_t v7 = v95;
  uint64_t v9 = *((void *)&v96 + 1);
  uint64_t v8 = v96;
  unint64_t v5 = v97;
  unint64_t v15 = *((void *)&v98 + 1);
  a1 = v98;
  uint64_t v2 = v99;
  LODWORD(v14) = v100 | (v101 << 16);
  int v4 = v102;
  uint64_t v39 = *((void *)&v98 + 1) >> 62;
  if (*((void *)&v98 + 1) >> 62 != 3
    || (v14 & 0xFFFFFF) != 0
    || *((void *)&v98 + 1) != 0xC000000000000000
    || (char v40 = v99 | v98, v99 | (unint64_t)v98))
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_2461B9DC0;
    *(void *)(v44 + 32) = v6;
    *(void *)(v44 + 40) = v7;
    *(void *)(v44 + 48) = v8;
    *(void *)(v44 + 56) = v9;
    *(void *)(v44 + 64) = v5;
    *(void *)(v44 + 72) = a1;
    *(void *)(v44 + 80) = v15;
    *(void *)(v44 + 88) = v2;
    unsigned int v11 = WORD1(v14);
    *(unsigned char *)(v44 + 98) = BYTE2(v14);
    *(_WORD *)(v44 + 96) = v14;
    *(_DWORD *)(v44 + 100) = v4;
    uint64_t v13 = v44;
    switch((int)v39)
    {
      case 1:
        uint64_t v46 = outlined copy of DisplayList.Item.Value(a1, v15);
        switch(BYTE4(v15))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 2);
            unsigned int v47 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v85);
            unint64_t v62 = v87;
            uint64_t v79 = *((void *)&v86 + 1);
            __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
            id v75 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v62 + 56);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v75(&v84, v79, v62);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 3);
            LOWORD(v47) = v84;
            break;
          case 7:
            LOWORD(v47) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 10);
            LOWORD(v47) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 12);
            LOWORD(v47) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            uint64_t v63 = a1;
            char v64 = v15;
            LOBYTE(v65) = 14;
            goto LABEL_44;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 15);
            LOWORD(v47) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 16);
            LOWORD(v47) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v85, v46);
            unint64_t v80 = v85;
            int v66 = (unsigned __int16)word_26FA429C8;
            int v67 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 17);
            if ((v67 & ~v66) != 0) {
              __int16 v68 = v67;
            }
            else {
              __int16 v68 = 0;
            }
            LOWORD(v47) = v80 | v66 | v68;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            uint64_t v63 = a1;
            char v64 = v15;
            unint64_t v65 = HIDWORD(v15);
LABEL_44:
            outlined consume of DisplayList.Effect(v63, v64, v65);
            LOWORD(v47) = 0;
            break;
        }
        __int16 v41 = v47 | v14;
        break;
      case 2:
        uint64_t v48 = *(void *)(a1 + 16);
        if (!v48)
        {
          __int16 v41 = 128;
          goto LABEL_35;
        }
        if (v48 == 1)
        {
          uint64_t v49 = 0;
          __int16 v41 = 128;
LABEL_23:
          uint64_t v56 = v48 - v49;
          __int16 v57 = (__int16 *)(a1 + 40 * v49 + 64);
          do
          {
            __int16 v58 = *v57;
            v57 += 20;
            v41 |= v58;
            --v56;
          }
          while (v56);
          goto LABEL_35;
        }
        __int16 v50 = 0;
        uint64_t v49 = v48 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v51 = (__int16 *)(a1 + 104);
        __int16 v52 = 128;
        uint64_t v53 = v48 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v54 = *(v51 - 20);
          __int16 v55 = *v51;
          v51 += 40;
          v52 |= v54;
          v50 |= v55;
          v53 -= 2;
        }
        while (v53);
        __int16 v41 = v50 | v52;
        if (v48 != v49) {
          goto LABEL_23;
        }
LABEL_35:
        outlined copy of DisplayList.Item.Value(a1, v15);
        outlined copy of DisplayList.Item.Value(a1, v15);
        break;
      case 3:
LABEL_33:
        outlined copy of DisplayList.Item.Value(a1, v15);
        __int16 v41 = 0;
        break;
      default:
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v85);
            unint64_t v45 = v87;
            unint64_t v78 = *((void *)&v86 + 1);
            __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
            unint64_t v74 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v45 + 40);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v74(&v84, v78, v45);
            unsigned int v11 = WORD1(v14);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
            __int16 v41 = v84;
            goto LABEL_52;
          case 8uLL:
            uint64_t v59 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v59 + 216)) {
              goto LABEL_32;
            }
            uint64_t v83 = *(void **)(v59 + 216);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_retain();
            id v76 = v59;
            unsigned int v3 = v83;
            swift_retain();
            if ((uint64_t)objc_msgSend(v83, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_29;
            }
            goto LABEL_58;
          case 9uLL:
            __int16 v41 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_35;
          case 0xBuLL:
            goto LABEL_37;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v15);
LABEL_37:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            __int16 v41 = 2;
            goto LABEL_52;
          default:
LABEL_32:
            outlined copy of DisplayList.Item.Value(a1, v15);
            goto LABEL_33;
        }
    }
LABEL_52:
    *(void *)&uint64_t v85 = v6;
    *((void *)&v85 + 1) = v7;
    *(void *)&unsigned int v86 = v8;
    *((void *)&v86 + 1) = v9;
    unsigned int v87 = v5;
    uint64_t v88 = a1;
    uint64_t v89 = v15;
    uint64_t v90 = v2;
    uint64_t v92 = v11;
    uint64_t v91 = v14;
    uint64_t v93 = v4;
    DisplayList.Item.properties.getter(&v84);
    outlined consume of DisplayList.Item.Value(a1, v15);
    char v40 = v84;
    goto LABEL_53;
  }
  __int16 v41 = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v81 = v13;
  *(_WORD *)(v81 + 8) = v41;
  *(unsigned char *)(v81 + 10) = v40;
  return outlined consume of DisplayList.Item.Value(a1, v15);
}

{
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double v35;
  double v36;
  double *v37;
  unint64_t v38;
  unint64_t v39;
  long long *v40;
  int v41;
  unint64_t v42;
  char v43;
  __int16 v44;
  uint64_t Value;
  uint64_t result;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  __int16 v54;
  __int16 *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  int v70;
  int v71;
  __int16 v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int16 v77;
  void (*v78)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v79)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  id v84;
  id v85;
  unsigned int v86;
  unsigned __int8 v87;
  unint64_t v88;
  __int16 v89;
  long long v90;
  long long v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  __int16 v96;
  char v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  long long v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned __int16 v106;
  unsigned __int8 v107;
  int v108;
  uint64_t v109;

  __int16 v109 = *MEMORY[0x263EF8340];
  uint64_t v9 = *MEMORY[0x263F288F8];
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    unsigned int v11 = 0;
    LOWORD(v12) = 0;
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v10;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = *(void **)Value;
  unsigned int v11 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v12) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!v13[2]) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v14 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v9)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    char v64 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v84, sel_length, v73);
    if (objc_msgSend(v84, sel_attribute_atIndex_effectiveRange_, v64, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v90, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      unint64_t v65 = *(unsigned char *)(v80 + 256);
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
      if (v65)
      {
        uint64_t v44 = 8;
LABEL_51:
        LOBYTE(v52) = v86;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v90 = 0u;
      uint64_t v91 = 0u;
      _sypSgWOhTm_9((uint64_t)&v90, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
    }
    uint64_t v44 = 0;
    goto LABEL_51;
  }
  uint64_t v88 = a1;
  id v76 = v14;
  unsigned int v87 = v12;
  unint64_t v15 = AGCreateWeakAttribute();
  unint64_t v16 = v15;
  id v75 = HIDWORD(v15);
  unsigned int v17 = AGCreateWeakAttribute();
  unint64_t v18 = v17;
  unint64_t v74 = HIDWORD(v17);
  unsigned int v19 = AGCreateWeakAttribute();
  unint64_t v20 = v19;
  unsigned __int8 v73 = HIDWORD(v19);
  unsigned int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  uint64_t v85 = v13;
  unsigned int v23 = HIDWORD(v21);
  unint64_t v24 = AGCreateWeakAttribute();
  uint64_t v77 = v11;
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = HIDWORD(v27);
  _threadGeometryProxyData();
  unint64_t v99 = __PAIR64__(v75, v16);
  unint64_t v100 = __PAIR64__(v74, v18);
  *(void *)&int v101 = __PAIR64__(v73, v20);
  *((void *)&v101 + 1) = __PAIR64__(v23, v22);
  unint64_t v102 = __PAIR64__(v26, v25);
  unint64_t v103 = __PAIR64__(v29, v28);
  LODWORD(v104) = v76;
  _setThreadGeometryProxyData();
  unint64_t v30 = AGGraphGetValue();
  uint64_t v31 = *(void *)v30;
  double v32 = *(unsigned __int8 *)(v30 + 8);
  double v33 = swift_allocObject();
  *(void *)(v33 + 16) = v31;
  *(void *)(v33 + 24) = v32;
  *(_OWORD *)(v33 + 32) = 0u;
  *(_OWORD *)(v33 + 48) = 0u;
  *(_OWORD *)(v33 + 64) = 0u;
  *(_OWORD *)(v33 + 80) = 0u;
  *(_OWORD *)(v33 + 96) = 0u;
  *(_OWORD *)(v33 + 112) = 0u;
  *(void *)(v33 + 125) = 0;
  _setThreadGeometryProxyData();
  char v34 = (double *)AGGraphGetValue();
  unint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  uint64_t v37 = (double *)AGGraphGetValue();
  *(double *)&int v38 = v35 - *v37;
  *(double *)&uint64_t v39 = v36 - v37[1];
  char v40 = (long long *)AGGraphGetValue();
  __int16 v41 = *v1;
  unint64_t v99 = v38;
  unint64_t v100 = v39;
  int v101 = *v40;
  unint64_t v102 = v76;
  unint64_t v103 = v33;
  int v104 = 0x4000000900000000;
  uint64_t v105 = (unint64_t)v85;
  uint64_t v107 = v87;
  unint64_t v106 = v77;
  uint64_t v108 = v41;
  LOBYTE(v90) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v90);
  int v4 = v99;
  unint64_t v5 = v100;
  unint64_t v7 = *((void *)&v101 + 1);
  unint64_t v6 = v101;
  unsigned int v3 = v102;
  a1 = v103;
  unsigned int v11 = v104;
  uint64_t v13 = (void *)v105;
  uint64_t v12 = v106 | (v107 << 16);
  uint64_t v9 = v108;
  __int16 v42 = v104 >> 62;
  if (v104 >> 62 != 3 || (v12 & 0xFFFFFF) != 0 || v104 != 0xC000000000000000 || v105 | v103)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    unsigned int v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_2461B9DC0;
    *(void *)(v47 + 32) = v4;
    *(void *)(v47 + 40) = v5;
    *(void *)(v47 + 48) = v6;
    *(void *)(v47 + 56) = v7;
    *(void *)(v47 + 64) = v3;
    *(void *)(v47 + 72) = a1;
    *(void *)(v47 + 80) = v11;
    *(void *)(v47 + 88) = v13;
    *(unsigned char *)(v47 + 98) = BYTE2(v12);
    *(_WORD *)(v47 + 96) = v12;
    *(_DWORD *)(v47 + 100) = v9;
    uint64_t v2 = v47;
    switch((int)v42)
    {
      case 1:
        unsigned int v86 = HIWORD(v12);
        uint64_t v49 = outlined copy of DisplayList.Item.Value(a1, v11);
        switch(BYTE4(v11))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 2);
            __int16 v50 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v90);
            int v66 = v92;
            uint64_t v82 = *((void *)&v91 + 1);
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            uint64_t v79 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v66 + 56);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v79(&v89, v82, v66);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 3);
            LOWORD(v50) = v89;
            break;
          case 7:
            LOWORD(v50) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 10);
            LOWORD(v50) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 12);
            LOWORD(v50) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            int v67 = a1;
            __int16 v68 = v11;
            LOBYTE(v69) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 15);
            LOWORD(v50) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 16);
            LOWORD(v50) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v90, v49);
            uint64_t v83 = v90;
            unint64_t v70 = (unsigned __int16)word_26FA429C8;
            unint64_t v71 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 17);
            if ((v71 & ~v70) != 0) {
              unint64_t v72 = v71;
            }
            else {
              unint64_t v72 = 0;
            }
            LOWORD(v50) = v83 | v70 | v72;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            int v67 = a1;
            __int16 v68 = v11;
            unint64_t v69 = HIDWORD(v11);
LABEL_43:
            outlined consume of DisplayList.Effect(v67, v68, v69);
            LOWORD(v50) = 0;
            break;
        }
        uint64_t v44 = v50 | v12;
        goto LABEL_51;
      case 2:
        uint64_t v51 = *(void *)(a1 + 16);
        if (!v51)
        {
          __int16 v52 = HIWORD(v12);
          uint64_t v44 = 128;
          goto LABEL_26;
        }
        __int16 v52 = HIWORD(v12);
        if (v51 == 1)
        {
          uint64_t v53 = 0;
          uint64_t v44 = 128;
LABEL_24:
          uint64_t v60 = v51 - v53;
          char v61 = (__int16 *)(a1 + 40 * v53 + 64);
          do
          {
            unint64_t v62 = *v61;
            v61 += 20;
            v44 |= v62;
            --v60;
          }
          while (v60);
          goto LABEL_26;
        }
        __int16 v54 = 0;
        uint64_t v53 = v51 & 0x7FFFFFFFFFFFFFFELL;
        __int16 v55 = (__int16 *)(a1 + 104);
        uint64_t v56 = 128;
        __int16 v57 = v51 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v58 = *(v55 - 20);
          uint64_t v59 = *v55;
          v55 += 40;
          v56 |= v58;
          v54 |= v59;
          v57 -= 2;
        }
        while (v57);
        uint64_t v44 = v54 | v56;
        if (v51 != v53) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(a1, v11);
        outlined copy of DisplayList.Item.Value(a1, v11);
        break;
      case 3:
        __int16 v52 = HIWORD(v12);
        outlined copy of DisplayList.Item.Value(a1, v11);
        uint64_t v44 = 0;
        break;
      default:
        unsigned int v86 = HIWORD(v12);
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v90);
            uint64_t v48 = v92;
            uint64_t v81 = *((void *)&v91 + 1);
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            unint64_t v78 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v48 + 40);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v78(&v89, v81, v48);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            uint64_t v44 = v89;
            goto LABEL_51;
          case 8uLL:
            uint64_t v63 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v63 + 216)) {
              goto LABEL_33;
            }
            uint64_t v84 = *(id *)(v63 + 216);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_retain();
            unint64_t v80 = v63;
            swift_retain();
            if ((uint64_t)objc_msgSend(v84, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            uint64_t v44 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v11);
LABEL_36:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            uint64_t v44 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            uint64_t v44 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v90 = v4;
    *((void *)&v90 + 1) = v5;
    *(void *)&uint64_t v91 = v6;
    *((void *)&v91 + 1) = v7;
    uint64_t v92 = v3;
    uint64_t v93 = a1;
    uint64_t v94 = v11;
    uint64_t v95 = v13;
    uint64_t v97 = v52;
    unint64_t v96 = v12;
    uint64_t v98 = v9;
    DisplayList.Item.properties.getter(&v89);
    outlined consume of DisplayList.Item.Value(a1, v11);
    swift_release();
    uint64_t v43 = v89;
    goto LABEL_53;
  }
  swift_release();
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v88 = v2;
  *(_WORD *)(v88 + 8) = v44;
  *(unsigned char *)(v88 + 10) = v43;
  return outlined consume of DisplayList.Item.Value(a1, v11);
}

{
  int *v1;
  uint64_t v2;
  void *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  unint64_t v35;
  unint64_t v36;
  long long *v37;
  int v38;
  uint64_t v39;
  char v40;
  __int16 v41;
  uint64_t Value;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int16 *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  int v66;
  int v67;
  __int16 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  void (*v74)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v75)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  unint64_t v81;
  unsigned __int16 v82;
  void *v83;
  __int16 v84;
  long long v85;
  long long v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __int16 v91;
  char v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  long long v96;
  unint64_t v97;
  long long v98;
  uint64_t v99;
  unsigned __int16 v100;
  unsigned __int8 v101;
  int v102;
  uint64_t v103;

  unint64_t v103 = *MEMORY[0x263EF8340];
  unsigned int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v82 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v12;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  uint64_t v82 = *(_WORD *)(Value + 8);
  uint64_t v13 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_29:
    uint64_t v60 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v3, sel_length, v69);
    if (objc_msgSend(v3, sel_attribute_atIndex_effectiveRange_, v60, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v85, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      char v61 = *(unsigned char *)(v76 + 256);
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
      if (v61)
      {
        __int16 v41 = 8;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v85 = 0u;
      unsigned int v86 = 0u;
      _sypSgWOhTm_9((uint64_t)&v85, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
    }
    __int16 v41 = 0;
    goto LABEL_52;
  }
  uint64_t v77 = v14;
  uint64_t v81 = a1;
  unsigned __int8 v73 = v13;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unint64_t v72 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unint64_t v71 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v70 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  unint64_t v69 = HIDWORD(v22);
  unint64_t v24 = AGCreateWeakAttribute();
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = v15;
  unint64_t v30 = HIDWORD(v27);
  _threadGeometryProxyData();
  uint64_t v94 = __PAIR64__(v72, v17);
  uint64_t v95 = __PAIR64__(v71, v19);
  *(void *)&unint64_t v96 = __PAIR64__(v70, v21);
  *((void *)&v96 + 1) = __PAIR64__(v69, v23);
  uint64_t v97 = __PAIR64__(v26, v25);
  *(void *)&uint64_t v98 = __PAIR64__(v30, v28);
  DWORD2(v98) = v29;
  _setThreadGeometryProxyData();
  _setThreadGeometryProxyData();
  uint64_t v31 = (double *)AGGraphGetValue();
  double v32 = *v31;
  double v33 = v31[1];
  char v34 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v35 = v32 - *v34;
  *(double *)&unint64_t v36 = v33 - v34[1];
  uint64_t v37 = (long long *)AGGraphGetValue();
  int v38 = *v1;
  uint64_t v94 = v35;
  uint64_t v95 = v36;
  unint64_t v96 = *v37;
  uint64_t v97 = v29;
  uint64_t v98 = xmmword_2461E0A70;
  unint64_t v99 = v77;
  int v101 = v73;
  unint64_t v100 = v82;
  unint64_t v102 = v38;
  LOBYTE(v85) = *((unsigned char *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v85);
  unint64_t v6 = v94;
  unint64_t v7 = v95;
  uint64_t v9 = *((void *)&v96 + 1);
  uint64_t v8 = v96;
  unint64_t v5 = v97;
  unint64_t v15 = *((void *)&v98 + 1);
  a1 = v98;
  uint64_t v2 = v99;
  LODWORD(v14) = v100 | (v101 << 16);
  int v4 = v102;
  uint64_t v39 = *((void *)&v98 + 1) >> 62;
  if (*((void *)&v98 + 1) >> 62 != 3
    || (v14 & 0xFFFFFF) != 0
    || *((void *)&v98 + 1) != 0xC000000000000000
    || (char v40 = v99 | v98, v99 | (unint64_t)v98))
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_2461B9DC0;
    *(void *)(v44 + 32) = v6;
    *(void *)(v44 + 40) = v7;
    *(void *)(v44 + 48) = v8;
    *(void *)(v44 + 56) = v9;
    *(void *)(v44 + 64) = v5;
    *(void *)(v44 + 72) = a1;
    *(void *)(v44 + 80) = v15;
    *(void *)(v44 + 88) = v2;
    unsigned int v11 = WORD1(v14);
    *(unsigned char *)(v44 + 98) = BYTE2(v14);
    *(_WORD *)(v44 + 96) = v14;
    *(_DWORD *)(v44 + 100) = v4;
    uint64_t v13 = v44;
    switch((int)v39)
    {
      case 1:
        uint64_t v46 = outlined copy of DisplayList.Item.Value(a1, v15);
        switch(BYTE4(v15))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 2);
            unsigned int v47 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v85);
            unint64_t v62 = v87;
            uint64_t v79 = *((void *)&v86 + 1);
            __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
            id v75 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v62 + 56);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v75(&v84, v79, v62);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 3);
            LOWORD(v47) = v84;
            break;
          case 7:
            LOWORD(v47) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 10);
            LOWORD(v47) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 12);
            LOWORD(v47) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            uint64_t v63 = a1;
            char v64 = v15;
            LOBYTE(v65) = 14;
            goto LABEL_44;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 15);
            LOWORD(v47) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 16);
            LOWORD(v47) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v85, v46);
            unint64_t v80 = v85;
            int v66 = (unsigned __int16)word_26FA429C8;
            int v67 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 17);
            if ((v67 & ~v66) != 0) {
              __int16 v68 = v67;
            }
            else {
              __int16 v68 = 0;
            }
            LOWORD(v47) = v80 | v66 | v68;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            uint64_t v63 = a1;
            char v64 = v15;
            unint64_t v65 = HIDWORD(v15);
LABEL_44:
            outlined consume of DisplayList.Effect(v63, v64, v65);
            LOWORD(v47) = 0;
            break;
        }
        __int16 v41 = v47 | v14;
        break;
      case 2:
        uint64_t v48 = *(void *)(a1 + 16);
        if (!v48)
        {
          __int16 v41 = 128;
          goto LABEL_35;
        }
        if (v48 == 1)
        {
          uint64_t v49 = 0;
          __int16 v41 = 128;
LABEL_23:
          uint64_t v56 = v48 - v49;
          __int16 v57 = (__int16 *)(a1 + 40 * v49 + 64);
          do
          {
            __int16 v58 = *v57;
            v57 += 20;
            v41 |= v58;
            --v56;
          }
          while (v56);
          goto LABEL_35;
        }
        __int16 v50 = 0;
        uint64_t v49 = v48 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v51 = (__int16 *)(a1 + 104);
        __int16 v52 = 128;
        uint64_t v53 = v48 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v54 = *(v51 - 20);
          __int16 v55 = *v51;
          v51 += 40;
          v52 |= v54;
          v50 |= v55;
          v53 -= 2;
        }
        while (v53);
        __int16 v41 = v50 | v52;
        if (v48 != v49) {
          goto LABEL_23;
        }
LABEL_35:
        outlined copy of DisplayList.Item.Value(a1, v15);
        outlined copy of DisplayList.Item.Value(a1, v15);
        break;
      case 3:
LABEL_33:
        outlined copy of DisplayList.Item.Value(a1, v15);
        __int16 v41 = 0;
        break;
      default:
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v85);
            unint64_t v45 = v87;
            unint64_t v78 = *((void *)&v86 + 1);
            __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
            unint64_t v74 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v45 + 40);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v74(&v84, v78, v45);
            unsigned int v11 = WORD1(v14);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
            __int16 v41 = v84;
            goto LABEL_52;
          case 8uLL:
            uint64_t v59 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v59 + 216)) {
              goto LABEL_32;
            }
            uint64_t v83 = *(void **)(v59 + 216);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_retain();
            id v76 = v59;
            unsigned int v3 = v83;
            swift_retain();
            if ((uint64_t)objc_msgSend(v83, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_29;
            }
            goto LABEL_58;
          case 9uLL:
            __int16 v41 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_35;
          case 0xBuLL:
            goto LABEL_37;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v15);
LABEL_37:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            __int16 v41 = 2;
            goto LABEL_52;
          default:
LABEL_32:
            outlined copy of DisplayList.Item.Value(a1, v15);
            goto LABEL_33;
        }
    }
LABEL_52:
    *(void *)&uint64_t v85 = v6;
    *((void *)&v85 + 1) = v7;
    *(void *)&unsigned int v86 = v8;
    *((void *)&v86 + 1) = v9;
    unsigned int v87 = v5;
    uint64_t v88 = a1;
    uint64_t v89 = v15;
    uint64_t v90 = v2;
    uint64_t v92 = v11;
    uint64_t v91 = v14;
    uint64_t v93 = v4;
    DisplayList.Item.properties.getter(&v84);
    outlined consume of DisplayList.Item.Value(a1, v15);
    char v40 = v84;
    goto LABEL_53;
  }
  __int16 v41 = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v81 = v13;
  *(_WORD *)(v81 + 8) = v41;
  *(unsigned char *)(v81 + 10) = v40;
  return outlined consume of DisplayList.Item.Value(a1, v15);
}

{
  int *v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  double *v45;
  unint64_t v46;
  unint64_t v47;
  long long *v48;
  int v49;
  unint64_t v50;
  uint64_t result;
  char v52;
  __int16 v53;
  uint64_t Value;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(__int16 *__return_ptr, uint64_t, unint64_t);
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  __int16 *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  uint64_t v67;
  __int16 *v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  int v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void (*v93)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v94;
  unsigned __int16 v95;
  uint64_t v96;
  __int16 v97;
  unsigned __int8 v98;
  uint64_t v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  __int16 v103;
  long long v104;
  long long v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int16 v110;
  char v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  long long v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned __int16 v120;
  unsigned __int8 v121;
  int v122;
  uint64_t v123;

  v123 = *MEMORY[0x263EF8340];
  uint64_t v10 = *MEMORY[0x263F288F8];
  unsigned int v11 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v12 = 0;
    LOWORD(v13) = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_12:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v11;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  uint64_t v12 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v13) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_12;
  }
LABEL_3:
  unint64_t v15 = (void *)++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v10)
  {
    __break(1u);
LABEL_59:
    swift_once();
LABEL_31:
    unint64_t v71 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v15, sel_length);
    if (objc_msgSend(v15, sel_attribute_atIndex_effectiveRange_, v71, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v104, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      unint64_t v72 = *(unsigned char *)(v94 + 256);
      outlined consume of DisplayList.Item.Value(v12, v14);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v12, v14);
      if (v72)
      {
        uint64_t v53 = 8;
        goto LABEL_53;
      }
    }
    else
    {
      int v104 = 0u;
      uint64_t v105 = 0u;
      _sypSgWOhTm_9((uint64_t)&v104, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_56:
      outlined consume of DisplayList.Item.Value(v12, v14);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v12, v14);
    }
    uint64_t v53 = 0;
    goto LABEL_53;
  }
  int v101 = a1;
  unint64_t v102 = (unint64_t)v15;
  uint64_t v98 = v13;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  uint64_t v89 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unsigned int v87 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  uint64_t v85 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  uint64_t v95 = v12;
  unint64_t v24 = HIDWORD(v22);
  unsigned int v25 = AGCreateWeakAttribute();
  unint64_t v26 = v25;
  uint64_t v91 = v14;
  unint64_t v27 = HIDWORD(v25);
  unsigned int v28 = AGCreateWeakAttribute();
  unint64_t v29 = v28;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  uint64_t v113 = __PAIR64__(v89, v17);
  uint64_t v114 = __PAIR64__(v87, v19);
  *(void *)&uint64_t v115 = __PAIR64__(v85, v21);
  *((void *)&v115 + 1) = __PAIR64__(v24, v23);
  uint64_t v116 = __PAIR64__(v27, v26);
  uint64_t v117 = __PAIR64__(v30, v29);
  LODWORD(v118) = v102;
  _setThreadGeometryProxyData();
  uint64_t v31 = AGGraphGetValue();
  uint64_t v88 = *(unsigned __int8 *)(v31 + 8);
  uint64_t v90 = *(void *)v31;
  LODWORD(v30) = *(unsigned __int8 *)(v31 + 9);
  uint64_t v84 = *(void *)(v31 + 24);
  unsigned int v86 = *(void **)(v31 + 16);
  double v32 = *(void *)(v31 + 40);
  double v33 = *(void *)(v31 + 48);
  uint64_t v82 = *(void *)(v31 + 56);
  uint64_t v83 = *(void *)(v31 + 32);
  char v34 = *(void *)(v31 + 80);
  unint64_t v80 = *(void *)(v31 + 72);
  uint64_t v81 = *(void *)(v31 + 64);
  unint64_t v35 = *(void *)(v31 + 88);
  unint64_t v36 = *(void *)(v31 + 96);
  uint64_t v37 = *(void *)(v31 + 104);
  int v38 = *(_DWORD *)(v31 + 112);
  uint64_t v39 = swift_allocObject();
  char v40 = v39;
  __int16 v41 = 256;
  if (!v30) {
    __int16 v41 = 0;
  }
  *(void *)(v39 + 16) = v90;
  *(void *)(v39 + 24) = v41 | v88;
  *(void *)(v39 + 32) = v86;
  *(void *)(v39 + 40) = v84;
  *(void *)(v39 + 48) = v83;
  *(void *)(v39 + 56) = v32;
  *(void *)(v39 + 64) = v33;
  *(void *)(v39 + 72) = v82;
  *(void *)(v39 + 80) = v81;
  *(void *)(v39 + 88) = v80;
  *(void *)(v39 + 96) = v34;
  *(void *)(v39 + 104) = v35;
  *(void *)(v39 + 112) = v36;
  *(void *)(v39 + 120) = v37;
  *(_DWORD *)(v39 + 128) = v38;
  *(unsigned char *)(v39 + 132) = 1;
  outlined copy of VariableBlurStyle.Mask(v86, v84, v83, v32, v33, v82, v81, v80, v34, v35, v36, v37, v38, BYTE1(v38));
  _setThreadGeometryProxyData();
  __int16 v42 = (double *)AGGraphGetValue();
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  unint64_t v45 = (double *)AGGraphGetValue();
  *(double *)&uint64_t v46 = v43 - *v45;
  *(double *)&unsigned int v47 = v44 - v45[1];
  uint64_t v48 = (long long *)AGGraphGetValue();
  uint64_t v49 = *v1;
  uint64_t v113 = v46;
  uint64_t v114 = v47;
  uint64_t v115 = *v48;
  uint64_t v116 = v102;
  uint64_t v117 = v40;
  int v118 = 0x4000000900000000;
  uint64_t v119 = v91;
  unsigned __int8 v121 = v98;
  char v120 = v95;
  uint64_t v122 = v49;
  LOBYTE(v104) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v104);
  unint64_t v5 = v113;
  unint64_t v6 = v114;
  uint64_t v8 = *((void *)&v115 + 1);
  unint64_t v7 = v115;
  unsigned int v3 = v116;
  uint64_t v12 = v117;
  uint64_t v14 = v118;
  a1 = v119;
  uint64_t v13 = v120 | (v121 << 16);
  int v4 = v122;
  __int16 v50 = v118 >> 62;
  if (v118 >> 62 != 3 || (v13 & 0xFFFFFF) != 0 || v118 != 0xC000000000000000 || v119 | v117)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    __int16 v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_2461B9DC0;
    *(void *)(v55 + 32) = v5;
    *(void *)(v55 + 40) = v6;
    *(void *)(v55 + 48) = v7;
    *(void *)(v55 + 56) = v8;
    *(void *)(v55 + 64) = v3;
    *(void *)(v55 + 72) = v12;
    *(void *)(v55 + 80) = v14;
    *(void *)(v55 + 88) = a1;
    uint64_t v10 = HIWORD(v13);
    *(unsigned char *)(v55 + 98) = BYTE2(v13);
    *(_WORD *)(v55 + 96) = v13;
    *(_DWORD *)(v55 + 100) = v4;
    uint64_t v2 = v55;
    switch((int)v50)
    {
      case 1:
        switch(BYTE4(v14))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v12, v14, 2);
            __int16 v58 = (v12 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v12 + 16, (uint64_t)&v104);
            unsigned __int8 v73 = v106;
            unint64_t v96 = *((void *)&v105 + 1);
            __swift_project_boxed_opaque_existential_1(&v104, *((uint64_t *)&v105 + 1));
            uint64_t v93 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v73 + 56);
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            v93(&v103, v96, v73);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v12, v14, 3);
            LOWORD(v58) = v103;
            break;
          case 7:
            LOWORD(v58) = *(_WORD *)(v12 + 24);
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v12, v14, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v12, v14, 10);
            LOWORD(v58) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v12, v14, 12);
            LOWORD(v58) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            unint64_t v74 = v12;
            id v75 = v14;
            LOBYTE(v76) = 14;
            goto LABEL_45;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v12, v14, 15);
            LOWORD(v58) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v12, v14, 16);
            LOWORD(v58) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr))(*(void *)v12 + 112))(&v104);
            uint64_t v97 = v104;
            uint64_t v77 = (unsigned __int16)word_26FA429C8;
            unint64_t v78 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v12, v14, 17);
            if ((v78 & ~v77) != 0) {
              uint64_t v79 = v78;
            }
            else {
              uint64_t v79 = 0;
            }
            LOWORD(v58) = v97 | v77 | v79;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_bridgeObjectRelease();
            unint64_t v74 = v12;
            id v75 = v14;
            id v76 = HIDWORD(v14);
LABEL_45:
            outlined consume of DisplayList.Effect(v74, v75, v76);
            LOWORD(v58) = 0;
            break;
        }
        uint64_t v53 = v58 | v13;
        break;
      case 2:
        uint64_t v59 = *(void *)(v12 + 16);
        if (!v59)
        {
          uint64_t v53 = 128;
          goto LABEL_36;
        }
        if (v59 == 1)
        {
          uint64_t v60 = 0;
          uint64_t v53 = 128;
LABEL_25:
          int v67 = v59 - v60;
          __int16 v68 = (__int16 *)(v12 + 40 * v60 + 64);
          do
          {
            unint64_t v69 = *v68;
            v68 += 20;
            v53 |= v69;
            --v67;
          }
          while (v67);
          goto LABEL_36;
        }
        char v61 = 0;
        uint64_t v60 = v59 & 0x7FFFFFFFFFFFFFFELL;
        unint64_t v62 = (__int16 *)(v12 + 104);
        uint64_t v63 = 128;
        char v64 = v59 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          unint64_t v65 = *(v62 - 20);
          int v66 = *v62;
          v62 += 40;
          v63 |= v65;
          v61 |= v66;
          v64 -= 2;
        }
        while (v64);
        uint64_t v53 = v61 | v63;
        if (v59 != v60) {
          goto LABEL_25;
        }
LABEL_36:
        outlined copy of DisplayList.Item.Value(v12, v14);
        break;
      case 3:
LABEL_34:
        outlined copy of DisplayList.Item.Value(v12, v14);
        uint64_t v53 = 0;
        break;
      default:
        switch(v12 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v12 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v104);
            uint64_t v56 = v106;
            unint64_t v99 = *((void *)&v105 + 1);
            uint64_t v92 = v106;
            __swift_project_boxed_opaque_existential_1(&v104, *((uint64_t *)&v105 + 1));
            __int16 v57 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v56 + 40);
            outlined copy of DisplayList.Item.Value(v12, v14);
            v57(&v103, v99, v92);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
            uint64_t v53 = v103;
            goto LABEL_53;
          case 8uLL:
            unint64_t v70 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v70 + 216)) {
              goto LABEL_34;
            }
            unint64_t v100 = *(void **)(v70 + 216);
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            outlined copy of DisplayList.Item.Value(v12, v14);
            swift_retain();
            uint64_t v94 = v70;
            unint64_t v15 = v100;
            swift_retain();
            if ((uint64_t)objc_msgSend(v100, sel_length) <= 0) {
              goto LABEL_56;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_31;
            }
            goto LABEL_59;
          case 9uLL:
            uint64_t v53 = *(_WORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_36;
          case 0xBuLL:
            goto LABEL_38;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v12, v14);
LABEL_38:
            outlined copy of DisplayList.Item.Value(v12, v14);
            uint64_t v53 = 2;
            goto LABEL_53;
          default:
            goto LABEL_34;
        }
    }
LABEL_53:
    *(void *)&int v104 = v5;
    *((void *)&v104 + 1) = v6;
    *(void *)&uint64_t v105 = v7;
    *((void *)&v105 + 1) = v8;
    unint64_t v106 = v3;
    uint64_t v107 = v12;
    uint64_t v108 = v14;
    __int16 v109 = a1;
    char v111 = v10;
    char v110 = v13;
    uint64_t v112 = v4;
    DisplayList.Item.properties.getter(&v103);
    swift_release();
    uint64_t result = outlined consume of DisplayList.Item.Value(v12, v14);
    __int16 v52 = v103;
    goto LABEL_54;
  }
  swift_release();
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  __int16 v52 = 0;
  uint64_t v53 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_54:
  *(void *)int v101 = v2;
  *(_WORD *)(v101 + 8) = v53;
  *(unsigned char *)(v101 + 10) = v52;
  return result;
}

{
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  unint64_t v39;
  unint64_t v40;
  long long *v41;
  int v42;
  unint64_t v43;
  char v44;
  __int16 v45;
  uint64_t Value;
  uint64_t result;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  __int16 v55;
  __int16 *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;
  uint64_t v61;
  __int16 *v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  int v71;
  int v72;
  __int16 v73;
  unint64_t v74;
  unint64_t v75;
  long long v76;
  unint64_t v77;
  long long v78;
  unint64_t v79;
  unsigned __int16 v80;
  void (*v81)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v82)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  id v87;
  id v88;
  unsigned int v89;
  unsigned __int8 v90;
  unint64_t v91;
  __int16 v92;
  long long v93;
  long long v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  __int16 v99;
  char v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  long long v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned __int16 v109;
  unsigned __int8 v110;
  int v111;
  uint64_t v112;

  uint64_t v112 = *MEMORY[0x263EF8340];
  uint64_t v9 = *MEMORY[0x263F288F8];
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    unsigned int v11 = 0;
    LOWORD(v12) = 0;
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v10;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = *(void **)Value;
  unsigned int v11 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v12) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!v13[2]) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v14 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v9)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    unint64_t v65 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v87, sel_length);
    if (objc_msgSend(v87, sel_attribute_atIndex_effectiveRange_, v65, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v93, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      int v66 = *(unsigned char *)(v83 + 256);
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
      if (v66)
      {
        unint64_t v45 = 8;
LABEL_51:
        LOBYTE(v53) = v89;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v93 = 0u;
      uint64_t v94 = 0u;
      _sypSgWOhTm_9((uint64_t)&v93, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
    }
    unint64_t v45 = 0;
    goto LABEL_51;
  }
  uint64_t v91 = a1;
  uint64_t v79 = v14;
  uint64_t v90 = v12;
  unint64_t v15 = AGCreateWeakAttribute();
  unint64_t v16 = v15;
  uint64_t v77 = HIDWORD(v15);
  unsigned int v17 = AGCreateWeakAttribute();
  unint64_t v18 = v17;
  id v75 = HIDWORD(v17);
  unsigned int v19 = AGCreateWeakAttribute();
  unint64_t v20 = v19;
  unint64_t v74 = HIDWORD(v19);
  unsigned int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  uint64_t v88 = v13;
  unsigned int v23 = HIDWORD(v21);
  unint64_t v24 = AGCreateWeakAttribute();
  unint64_t v80 = v11;
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = HIDWORD(v27);
  _threadGeometryProxyData();
  unint64_t v102 = __PAIR64__(v77, v16);
  unint64_t v103 = __PAIR64__(v75, v18);
  *(void *)&int v104 = __PAIR64__(v74, v20);
  *((void *)&v104 + 1) = __PAIR64__(v23, v22);
  uint64_t v105 = __PAIR64__(v26, v25);
  unint64_t v106 = __PAIR64__(v29, v28);
  LODWORD(v107) = v79;
  _setThreadGeometryProxyData();
  unint64_t v30 = AGGraphGetValue();
  id v76 = *(_OWORD *)(v30 + 16);
  unint64_t v78 = *(_OWORD *)v30;
  uint64_t v31 = *(void *)(v30 + 32);
  double v32 = *(unsigned int *)(v30 + 40);
  double v33 = *(unsigned __int8 *)(v30 + 44);
  char v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v78;
  *(_OWORD *)(v34 + 32) = v76;
  *(void *)(v34 + 48) = v31;
  *(void *)(v34 + 56) = v32 | (v33 << 32);
  *(_OWORD *)(v34 + 64) = 0u;
  *(_OWORD *)(v34 + 80) = 0u;
  *(_OWORD *)(v34 + 96) = 0u;
  *(_OWORD *)(v34 + 112) = 0u;
  *(_DWORD *)(v34 + 128) = 0;
  *(unsigned char *)(v34 + 132) = 2;
  _setThreadGeometryProxyData();
  unint64_t v35 = (double *)AGGraphGetValue();
  unint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  int v38 = (double *)AGGraphGetValue();
  *(double *)&uint64_t v39 = v36 - *v38;
  *(double *)&char v40 = v37 - v38[1];
  __int16 v41 = (long long *)AGGraphGetValue();
  __int16 v42 = *v1;
  unint64_t v102 = v39;
  unint64_t v103 = v40;
  int v104 = *v41;
  uint64_t v105 = v79;
  unint64_t v106 = v34;
  uint64_t v107 = 0x4000000900000000;
  uint64_t v108 = (unint64_t)v88;
  char v110 = v90;
  __int16 v109 = v80;
  char v111 = v42;
  LOBYTE(v93) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v93);
  int v4 = v102;
  unint64_t v5 = v103;
  unint64_t v7 = *((void *)&v104 + 1);
  unint64_t v6 = v104;
  unsigned int v3 = v105;
  a1 = v106;
  unsigned int v11 = v107;
  uint64_t v13 = (void *)v108;
  uint64_t v12 = v109 | (v110 << 16);
  uint64_t v9 = v111;
  uint64_t v43 = v107 >> 62;
  if (v107 >> 62 != 3 || (v12 & 0xFFFFFF) != 0 || v107 != 0xC000000000000000 || v108 | v106)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_2461B9DC0;
    *(void *)(v48 + 32) = v4;
    *(void *)(v48 + 40) = v5;
    *(void *)(v48 + 48) = v6;
    *(void *)(v48 + 56) = v7;
    *(void *)(v48 + 64) = v3;
    *(void *)(v48 + 72) = a1;
    *(void *)(v48 + 80) = v11;
    *(void *)(v48 + 88) = v13;
    *(unsigned char *)(v48 + 98) = BYTE2(v12);
    *(_WORD *)(v48 + 96) = v12;
    *(_DWORD *)(v48 + 100) = v9;
    uint64_t v2 = v48;
    switch((int)v43)
    {
      case 1:
        uint64_t v89 = HIWORD(v12);
        __int16 v50 = outlined copy of DisplayList.Item.Value(a1, v11);
        switch(BYTE4(v11))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 2);
            uint64_t v51 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v93);
            int v67 = v95;
            uint64_t v85 = *((void *)&v94 + 1);
            __swift_project_boxed_opaque_existential_1(&v93, *((uint64_t *)&v94 + 1));
            uint64_t v82 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v67 + 56);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v82(&v92, v85, v67);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 3);
            LOWORD(v51) = v92;
            break;
          case 7:
            LOWORD(v51) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 10);
            LOWORD(v51) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 12);
            LOWORD(v51) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            __int16 v68 = a1;
            unint64_t v69 = v11;
            LOBYTE(v70) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 15);
            LOWORD(v51) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 16);
            LOWORD(v51) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v93, v50);
            unsigned int v86 = v93;
            unint64_t v71 = (unsigned __int16)word_26FA429C8;
            unint64_t v72 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 17);
            if ((v72 & ~v71) != 0) {
              unsigned __int8 v73 = v72;
            }
            else {
              unsigned __int8 v73 = 0;
            }
            LOWORD(v51) = v86 | v71 | v73;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            __int16 v68 = a1;
            unint64_t v69 = v11;
            unint64_t v70 = HIDWORD(v11);
LABEL_43:
            outlined consume of DisplayList.Effect(v68, v69, v70);
            LOWORD(v51) = 0;
            break;
        }
        unint64_t v45 = v51 | v12;
        goto LABEL_51;
      case 2:
        __int16 v52 = *(void *)(a1 + 16);
        if (!v52)
        {
          uint64_t v53 = HIWORD(v12);
          unint64_t v45 = 128;
          goto LABEL_26;
        }
        uint64_t v53 = HIWORD(v12);
        if (v52 == 1)
        {
          __int16 v54 = 0;
          unint64_t v45 = 128;
LABEL_24:
          char v61 = v52 - v54;
          unint64_t v62 = (__int16 *)(a1 + 40 * v54 + 64);
          do
          {
            uint64_t v63 = *v62;
            v62 += 20;
            v45 |= v63;
            --v61;
          }
          while (v61);
          goto LABEL_26;
        }
        __int16 v55 = 0;
        __int16 v54 = v52 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v56 = (__int16 *)(a1 + 104);
        __int16 v57 = 128;
        __int16 v58 = v52 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v59 = *(v56 - 20);
          uint64_t v60 = *v56;
          v56 += 40;
          v57 |= v59;
          v55 |= v60;
          v58 -= 2;
        }
        while (v58);
        unint64_t v45 = v55 | v57;
        if (v52 != v54) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(a1, v11);
        outlined copy of DisplayList.Item.Value(a1, v11);
        break;
      case 3:
        uint64_t v53 = HIWORD(v12);
        outlined copy of DisplayList.Item.Value(a1, v11);
        unint64_t v45 = 0;
        break;
      default:
        uint64_t v89 = HIWORD(v12);
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v93);
            uint64_t v49 = v95;
            uint64_t v84 = *((void *)&v94 + 1);
            __swift_project_boxed_opaque_existential_1(&v93, *((uint64_t *)&v94 + 1));
            uint64_t v81 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v49 + 40);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v81(&v92, v84, v49);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
            unint64_t v45 = v92;
            goto LABEL_51;
          case 8uLL:
            char v64 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v64 + 216)) {
              goto LABEL_33;
            }
            unsigned int v87 = *(id *)(v64 + 216);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_retain();
            uint64_t v83 = v64;
            swift_retain();
            if ((uint64_t)objc_msgSend(v87, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            unint64_t v45 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v11);
LABEL_36:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            unint64_t v45 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            unint64_t v45 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v93 = v4;
    *((void *)&v93 + 1) = v5;
    *(void *)&uint64_t v94 = v6;
    *((void *)&v94 + 1) = v7;
    uint64_t v95 = v3;
    unint64_t v96 = a1;
    uint64_t v97 = v11;
    uint64_t v98 = v13;
    unint64_t v100 = v53;
    unint64_t v99 = v12;
    int v101 = v9;
    DisplayList.Item.properties.getter(&v92);
    outlined consume of DisplayList.Item.Value(a1, v11);
    swift_release();
    uint64_t v44 = v92;
    goto LABEL_53;
  }
  swift_release();
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v91 = v2;
  *(_WORD *)(v91 + 8) = v45;
  *(unsigned char *)(v91 + 10) = v44;
  return outlined consume of DisplayList.Item.Value(a1, v11);
}

{
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  double *v38;
  double v39;
  double v40;
  double *v41;
  unint64_t v42;
  unint64_t v43;
  long long *v44;
  int v45;
  unint64_t v46;
  uint64_t result;
  char v48;
  __int16 v49;
  uint64_t Value;
  uint64_t v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  __int16 v58;
  __int16 *v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  uint64_t v64;
  __int16 *v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void (*v70)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v71;
  char v72;
  unint64_t v73;
  int v74;
  int v75;
  __int16 v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned __int16 v80;
  unint64_t v81;
  void (*v82)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  __int16 v87;
  id v88;
  unsigned __int8 v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v92;
  __int16 v93;
  long long v94;
  long long v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  __int16 v100;
  char v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  long long v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unsigned __int16 v110;
  unsigned __int8 v111;
  int v112;
  uint64_t v113;

  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v9 = *MEMORY[0x263F288F8];
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    unsigned int v11 = 0;
    LOWORD(v12) = 0;
    uint64_t v13 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v10;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = *(void *)Value;
  unsigned int v11 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v12) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v13 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v14 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v9)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    __int16 v68 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v88, sel_length, v77);
    if (objc_msgSend(v88, sel_attribute_atIndex_effectiveRange_, v68, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v94, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      unint64_t v69 = *(unsigned char *)(v84 + 256);
      outlined consume of DisplayList.Item.Value(v11, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v11, v13);
      if (v69)
      {
        uint64_t v49 = 8;
LABEL_51:
        LOBYTE(v56) = v91;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v94 = 0u;
      uint64_t v95 = 0u;
      _sypSgWOhTm_9((uint64_t)&v94, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(v11, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v11, v13);
    }
    uint64_t v49 = 0;
    goto LABEL_51;
  }
  uint64_t v90 = a1;
  uint64_t v92 = v14;
  uint64_t v89 = v12;
  unint64_t v15 = AGCreateWeakAttribute();
  unint64_t v16 = v15;
  uint64_t v79 = HIDWORD(v15);
  unsigned int v17 = AGCreateWeakAttribute();
  unint64_t v18 = v17;
  unint64_t v78 = HIDWORD(v17);
  unsigned int v19 = AGCreateWeakAttribute();
  unint64_t v20 = v19;
  uint64_t v77 = HIDWORD(v19);
  unsigned int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  uint64_t v85 = v13;
  unsigned int v23 = HIDWORD(v21);
  unint64_t v24 = AGCreateWeakAttribute();
  unint64_t v80 = v11;
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = HIDWORD(v27);
  _threadGeometryProxyData();
  unint64_t v103 = __PAIR64__(v79, v16);
  int v104 = __PAIR64__(v78, v18);
  *(void *)&uint64_t v105 = __PAIR64__(v77, v20);
  *((void *)&v105 + 1) = __PAIR64__(v23, v22);
  unint64_t v106 = __PAIR64__(v26, v25);
  uint64_t v107 = __PAIR64__(v29, v28);
  LODWORD(v108) = v92;
  _setThreadGeometryProxyData();
  unint64_t v30 = AGGraphGetValue();
  uint64_t v31 = *(void *)v30;
  double v32 = *(unsigned __int8 *)(v30 + 12);
  double v33 = *(unsigned int *)(v30 + 8);
  LOBYTE(v29) = *(unsigned char *)(v30 + 14);
  LOBYTE(v18) = *(unsigned char *)(v30 + 15);
  char v34 = *(void *)(v30 + 16);
  unint64_t v35 = *(_DWORD *)(v30 + 24);
  LOBYTE(v16) = *(unsigned char *)(v30 + 13);
  unint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v31;
  *(unsigned char *)(v36 + 28) = v32;
  *(_DWORD *)(v36 + 24) = v33;
  *(unsigned char *)(v36 + 29) = v16;
  *(unsigned char *)(v36 + 30) = v29;
  *(unsigned char *)(v36 + 31) = v18;
  *(void *)(v36 + 32) = v34;
  *(_DWORD *)(v36 + 40) = v35;
  uint64_t v37 = v36;
  outlined copy of ContentTransition.Storage(v31, v33 | (v32 << 32), v16);
  swift_retain();
  _setThreadGeometryProxyData();
  int v38 = (double *)AGGraphGetValue();
  uint64_t v39 = *v38;
  char v40 = v38[1];
  __int16 v41 = (double *)AGGraphGetValue();
  *(double *)&__int16 v42 = v39 - *v41;
  *(double *)&uint64_t v43 = v40 - v41[1];
  uint64_t v44 = (long long *)AGGraphGetValue();
  unint64_t v45 = *v1;
  unint64_t v103 = v42;
  int v104 = v43;
  uint64_t v105 = *v44;
  unint64_t v106 = v92;
  uint64_t v107 = v37;
  uint64_t v108 = 0x4000000B00000000;
  __int16 v109 = v85;
  char v111 = v89;
  char v110 = v80;
  uint64_t v112 = v45;
  LOBYTE(v94) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v94);
  int v4 = v103;
  unint64_t v5 = v104;
  unint64_t v7 = *((void *)&v105 + 1);
  unint64_t v6 = v105;
  unsigned int v3 = v106;
  unsigned int v11 = v107;
  uint64_t v13 = v108;
  a1 = v109;
  uint64_t v12 = v110 | (v111 << 16);
  uint64_t v9 = v112;
  uint64_t v46 = v108 >> 62;
  if (v108 >> 62 != 3 || (v12 & 0xFFFFFF) != 0 || v108 != 0xC000000000000000 || v109 | v107)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_2461B9DC0;
    *(void *)(v51 + 32) = v4;
    *(void *)(v51 + 40) = v5;
    *(void *)(v51 + 48) = v6;
    *(void *)(v51 + 56) = v7;
    *(void *)(v51 + 64) = v3;
    *(void *)(v51 + 72) = v11;
    *(void *)(v51 + 80) = v13;
    *(void *)(v51 + 88) = a1;
    *(unsigned char *)(v51 + 98) = BYTE2(v12);
    *(_WORD *)(v51 + 96) = v12;
    *(_DWORD *)(v51 + 100) = v9;
    uint64_t v2 = v51;
    switch((int)v46)
    {
      case 1:
        uint64_t v91 = HIWORD(v12);
        uint64_t v53 = v12;
        switch(BYTE4(v13))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 2);
            LODWORD(v54) = (v11 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v11 + 16, (uint64_t)&v94);
            __int16 v54 = v96;
            uint64_t v81 = v96;
            uint64_t v83 = *((void *)&v95 + 1);
            __swift_project_boxed_opaque_existential_1(&v94, *((uint64_t *)&v95 + 1));
            unint64_t v70 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v54 + 56);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            v70(&v93, v83, v81);
            uint64_t v53 = v12;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 3);
            LOWORD(v54) = v93;
            break;
          case 7:
            LOWORD(v54) = *(_WORD *)(v11 + 24);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 10);
            LOWORD(v54) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 12);
            LOWORD(v54) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            unint64_t v71 = v11;
            unint64_t v72 = v13;
            LOBYTE(v73) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 15);
            LOWORD(v54) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 16);
            LOWORD(v54) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr))(*(void *)v11 + 112))(&v94);
            unsigned int v87 = v94;
            unint64_t v74 = (unsigned __int16)word_26FA429C8;
            id v75 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 17);
            if ((v75 & ~v74) != 0) {
              id v76 = v75;
            }
            else {
              id v76 = 0;
            }
            uint64_t v53 = v12;
            LOWORD(v54) = v87 | v74 | v76;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            unint64_t v71 = v11;
            unint64_t v72 = v13;
            unsigned __int8 v73 = HIDWORD(v13);
LABEL_43:
            outlined consume of DisplayList.Effect(v71, v72, v73);
            LOWORD(v54) = 0;
            break;
        }
        uint64_t v49 = v54 | v53;
        goto LABEL_51;
      case 2:
        __int16 v55 = *(void *)(v11 + 16);
        if (!v55)
        {
          uint64_t v56 = HIWORD(v12);
          uint64_t v49 = 128;
          goto LABEL_26;
        }
        uint64_t v56 = HIWORD(v12);
        if (v55 == 1)
        {
          __int16 v57 = 0;
          uint64_t v49 = 128;
LABEL_24:
          char v64 = v55 - v57;
          unint64_t v65 = (__int16 *)(v11 + 40 * v57 + 64);
          do
          {
            int v66 = *v65;
            v65 += 20;
            v49 |= v66;
            --v64;
          }
          while (v64);
          goto LABEL_26;
        }
        __int16 v58 = 0;
        __int16 v57 = v55 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v59 = (__int16 *)(v11 + 104);
        uint64_t v60 = 128;
        char v61 = v55 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          unint64_t v62 = *(v59 - 20);
          uint64_t v63 = *v59;
          v59 += 40;
          v60 |= v62;
          v58 |= v63;
          v61 -= 2;
        }
        while (v61);
        uint64_t v49 = v58 | v60;
        if (v55 != v57) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(v11, v13);
        break;
      case 3:
        uint64_t v56 = HIWORD(v12);
        outlined copy of DisplayList.Item.Value(v11, v13);
        uint64_t v49 = 0;
        break;
      default:
        uint64_t v91 = HIWORD(v12);
        switch(v11 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v11 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v94);
            __int16 v52 = v96;
            unsigned int v86 = *((void *)&v95 + 1);
            __swift_project_boxed_opaque_existential_1(&v94, *((uint64_t *)&v95 + 1));
            uint64_t v82 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v52 + 40);
            outlined copy of DisplayList.Item.Value(v11, v13);
            v82(&v93, v86, v52);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
            uint64_t v49 = v93;
            goto LABEL_51;
          case 8uLL:
            int v67 = *(void *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v67 + 216)) {
              goto LABEL_33;
            }
            uint64_t v88 = *(id *)(v67 + 216);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_retain();
            uint64_t v84 = v67;
            swift_retain();
            if ((uint64_t)objc_msgSend(v88, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            uint64_t v49 = *(_WORD *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v11, v13);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v11, v13);
LABEL_36:
            outlined copy of DisplayList.Item.Value(v11, v13);
            uint64_t v49 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(v11, v13);
            uint64_t v49 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v94 = v4;
    *((void *)&v94 + 1) = v5;
    *(void *)&uint64_t v95 = v6;
    *((void *)&v95 + 1) = v7;
    unint64_t v96 = v3;
    uint64_t v97 = v11;
    uint64_t v98 = v13;
    unint64_t v99 = a1;
    int v101 = v56;
    unint64_t v100 = v12;
    unint64_t v102 = v9;
    DisplayList.Item.properties.getter(&v93);
    swift_release();
    uint64_t result = outlined consume of DisplayList.Item.Value(v11, v13);
    uint64_t v48 = v93;
    goto LABEL_53;
  }
  swift_release();
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v90 = v2;
  *(_WORD *)(v90 + 8) = v49;
  *(unsigned char *)(v90 + 10) = v48;
  return result;
}

{
  int *v1;
  void *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  long long *v38;
  int v39;
  unint64_t v40;
  char v41;
  __int16 v42;
  uint64_t Value;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  __int16 *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 *v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  int v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int16 v74;
  void (*v75)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v76)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  void *v83;
  unint64_t v84;
  __int16 v85;
  long long v86;
  long long v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  __int16 v92;
  char v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  long long v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned __int16 v102;
  unsigned __int8 v103;
  int v104;
  uint64_t v105;

  uint64_t v105 = *MEMORY[0x263EF8340];
  uint64_t v10 = *MEMORY[0x263F288F8];
  unsigned int v11 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v11;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  uint64_t v12 = *(unsigned __int16 *)(Value + 8);
  uint64_t v13 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v10)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_29:
    char v61 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v2, sel_length, v70);
    if (objc_msgSend(v2, sel_attribute_atIndex_effectiveRange_, v61, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v86, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      unint64_t v62 = *(unsigned char *)(v77 + 256);
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
      if (v62)
      {
        __int16 v42 = 8;
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v86 = 0u;
      unsigned int v87 = 0u;
      _sypSgWOhTm_9((uint64_t)&v86, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
    }
    __int16 v42 = 0;
    goto LABEL_52;
  }
  uint64_t v82 = v14;
  uint64_t v84 = a1;
  unint64_t v78 = v13;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unsigned __int8 v73 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unint64_t v72 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v71 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  unint64_t v74 = v12;
  unint64_t v70 = HIDWORD(v22);
  unint64_t v24 = AGCreateWeakAttribute();
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = v15;
  unint64_t v30 = HIDWORD(v27);
  _threadGeometryProxyData();
  uint64_t v95 = __PAIR64__(v73, v17);
  unint64_t v96 = __PAIR64__(v72, v19);
  *(void *)&uint64_t v97 = __PAIR64__(v71, v21);
  *((void *)&v97 + 1) = __PAIR64__(v70, v23);
  uint64_t v98 = __PAIR64__(v26, v25);
  unint64_t v99 = __PAIR64__(v30, v28);
  LODWORD(v100) = v29;
  _setThreadGeometryProxyData();
  uint64_t v31 = *(unsigned __int8 *)AGGraphGetValue();
  _setThreadGeometryProxyData();
  double v32 = (double *)AGGraphGetValue();
  double v33 = *v32;
  char v34 = v32[1];
  unint64_t v35 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v36 = v33 - *v35;
  *(double *)&uint64_t v37 = v34 - v35[1];
  int v38 = (long long *)AGGraphGetValue();
  uint64_t v39 = *v1;
  uint64_t v95 = v36;
  unint64_t v96 = v37;
  uint64_t v97 = *v38;
  uint64_t v98 = v29;
  unint64_t v99 = v31;
  unint64_t v100 = 0x4000000200000000;
  int v101 = v82;
  unint64_t v103 = v78;
  unint64_t v102 = v74;
  int v104 = v39;
  LOBYTE(v86) = *((unsigned char *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v86);
  unint64_t v5 = v95;
  unint64_t v6 = v96;
  uint64_t v8 = *((void *)&v97 + 1);
  unint64_t v7 = v97;
  int v4 = v98;
  a1 = v99;
  unint64_t v15 = v100;
  uint64_t v12 = v101;
  LODWORD(v14) = v102 | (v103 << 16);
  unsigned int v3 = v104;
  char v40 = v100 >> 62;
  if (v100 >> 62 != 3 || (v14 & 0xFFFFFF) != 0 || v100 != 0xC000000000000000 || (__int16 v41 = v101 | v99, v101 | v99))
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    unint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_2461B9DC0;
    *(void *)(v45 + 32) = v5;
    *(void *)(v45 + 40) = v6;
    *(void *)(v45 + 48) = v7;
    *(void *)(v45 + 56) = v8;
    *(void *)(v45 + 64) = v4;
    *(void *)(v45 + 72) = a1;
    *(void *)(v45 + 80) = v15;
    *(void *)(v45 + 88) = v12;
    uint64_t v10 = WORD1(v14);
    *(unsigned char *)(v45 + 98) = BYTE2(v14);
    *(_WORD *)(v45 + 96) = v14;
    *(_DWORD *)(v45 + 100) = v3;
    uint64_t v13 = v45;
    switch((int)v40)
    {
      case 1:
        unsigned int v47 = outlined copy of DisplayList.Item.Value(a1, v15);
        switch(BYTE4(v15))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 2);
            uint64_t v48 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v86);
            uint64_t v63 = v88;
            unint64_t v80 = *((void *)&v87 + 1);
            __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
            id v76 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v63 + 56);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v76(&v85, v80, v63);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 3);
            LOWORD(v48) = v85;
            break;
          case 7:
            LOWORD(v48) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 10);
            LOWORD(v48) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 12);
            LOWORD(v48) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            char v64 = a1;
            unint64_t v65 = v15;
            LOBYTE(v66) = 14;
            goto LABEL_44;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 15);
            LOWORD(v48) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 16);
            LOWORD(v48) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v86, v47);
            uint64_t v81 = v86;
            int v67 = (unsigned __int16)word_26FA429C8;
            __int16 v68 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 17);
            if ((v68 & ~v67) != 0) {
              unint64_t v69 = v68;
            }
            else {
              unint64_t v69 = 0;
            }
            LOWORD(v48) = v81 | v67 | v69;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            char v64 = a1;
            unint64_t v65 = v15;
            int v66 = HIDWORD(v15);
LABEL_44:
            outlined consume of DisplayList.Effect(v64, v65, v66);
            LOWORD(v48) = 0;
            break;
        }
        __int16 v42 = v48 | v14;
        break;
      case 2:
        uint64_t v49 = *(void *)(a1 + 16);
        if (!v49)
        {
          __int16 v42 = 128;
          goto LABEL_35;
        }
        if (v49 == 1)
        {
          __int16 v50 = 0;
          __int16 v42 = 128;
LABEL_23:
          __int16 v57 = v49 - v50;
          __int16 v58 = (__int16 *)(a1 + 40 * v50 + 64);
          do
          {
            uint64_t v59 = *v58;
            v58 += 20;
            v42 |= v59;
            --v57;
          }
          while (v57);
          goto LABEL_35;
        }
        uint64_t v51 = 0;
        __int16 v50 = v49 & 0x7FFFFFFFFFFFFFFELL;
        __int16 v52 = (__int16 *)(a1 + 104);
        uint64_t v53 = 128;
        __int16 v54 = v49 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v55 = *(v52 - 20);
          uint64_t v56 = *v52;
          v52 += 40;
          v53 |= v55;
          v51 |= v56;
          v54 -= 2;
        }
        while (v54);
        __int16 v42 = v51 | v53;
        if (v49 != v50) {
          goto LABEL_23;
        }
LABEL_35:
        outlined copy of DisplayList.Item.Value(a1, v15);
        outlined copy of DisplayList.Item.Value(a1, v15);
        break;
      case 3:
LABEL_33:
        outlined copy of DisplayList.Item.Value(a1, v15);
        __int16 v42 = 0;
        break;
      default:
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v86);
            uint64_t v46 = v88;
            uint64_t v79 = *((void *)&v87 + 1);
            __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
            id v75 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v46 + 40);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v75(&v85, v79, v46);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
            __int16 v42 = v85;
            goto LABEL_52;
          case 8uLL:
            uint64_t v60 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v60 + 216)) {
              goto LABEL_32;
            }
            uint64_t v83 = *(void **)(v60 + 216);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_retain();
            uint64_t v77 = v60;
            uint64_t v2 = v83;
            swift_retain();
            if ((uint64_t)objc_msgSend(v83, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_29;
            }
            goto LABEL_58;
          case 9uLL:
            __int16 v42 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_35;
          case 0xBuLL:
            goto LABEL_37;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v15);
LABEL_37:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            __int16 v42 = 2;
            goto LABEL_52;
          default:
LABEL_32:
            outlined copy of DisplayList.Item.Value(a1, v15);
            goto LABEL_33;
        }
    }
LABEL_52:
    *(void *)&unsigned int v86 = v5;
    *((void *)&v86 + 1) = v6;
    *(void *)&unsigned int v87 = v7;
    *((void *)&v87 + 1) = v8;
    uint64_t v88 = v4;
    uint64_t v89 = a1;
    uint64_t v90 = v15;
    uint64_t v91 = v12;
    uint64_t v93 = v10;
    uint64_t v92 = v14;
    uint64_t v94 = v3;
    DisplayList.Item.properties.getter(&v85);
    outlined consume of DisplayList.Item.Value(a1, v15);
    __int16 v41 = v85;
    goto LABEL_53;
  }
  __int16 v42 = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v84 = v13;
  *(_WORD *)(v84 + 8) = v42;
  *(unsigned char *)(v84 + 10) = v41;
  return outlined consume of DisplayList.Item.Value(a1, v15);
}

{
  int *v1;
  void *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  long long *v38;
  int v39;
  unint64_t v40;
  char v41;
  __int16 v42;
  uint64_t Value;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  __int16 *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 *v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  int v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int16 v74;
  void (*v75)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v76)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  void *v83;
  unint64_t v84;
  __int16 v85;
  long long v86;
  long long v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  __int16 v92;
  char v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  long long v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned __int16 v102;
  unsigned __int8 v103;
  int v104;
  uint64_t v105;

  uint64_t v105 = *MEMORY[0x263EF8340];
  uint64_t v10 = *MEMORY[0x263F288F8];
  unsigned int v11 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v11;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  uint64_t v12 = *(unsigned __int16 *)(Value + 8);
  uint64_t v13 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v10)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_29:
    char v61 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v2, sel_length, v70);
    if (objc_msgSend(v2, sel_attribute_atIndex_effectiveRange_, v61, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v86, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      unint64_t v62 = *(unsigned char *)(v77 + 256);
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
      if (v62)
      {
        __int16 v42 = 8;
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v86 = 0u;
      unsigned int v87 = 0u;
      _sypSgWOhTm_9((uint64_t)&v86, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
    }
    __int16 v42 = 0;
    goto LABEL_52;
  }
  uint64_t v82 = v14;
  uint64_t v84 = a1;
  unint64_t v78 = v13;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unsigned __int8 v73 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unint64_t v72 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v71 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  unint64_t v74 = v12;
  unint64_t v70 = HIDWORD(v22);
  unint64_t v24 = AGCreateWeakAttribute();
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = v15;
  unint64_t v30 = HIDWORD(v27);
  _threadGeometryProxyData();
  uint64_t v95 = __PAIR64__(v73, v17);
  unint64_t v96 = __PAIR64__(v72, v19);
  *(void *)&uint64_t v97 = __PAIR64__(v71, v21);
  *((void *)&v97 + 1) = __PAIR64__(v70, v23);
  uint64_t v98 = __PAIR64__(v26, v25);
  unint64_t v99 = __PAIR64__(v30, v28);
  LODWORD(v100) = v29;
  _setThreadGeometryProxyData();
  uint64_t v31 = *(unsigned int *)AGGraphGetValue();
  _setThreadGeometryProxyData();
  double v32 = (double *)AGGraphGetValue();
  double v33 = *v32;
  char v34 = v32[1];
  unint64_t v35 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v36 = v33 - *v35;
  *(double *)&uint64_t v37 = v34 - v35[1];
  int v38 = (long long *)AGGraphGetValue();
  uint64_t v39 = *v1;
  uint64_t v95 = v36;
  unint64_t v96 = v37;
  uint64_t v97 = *v38;
  uint64_t v98 = v29;
  unint64_t v99 = v31;
  unint64_t v100 = 0x4000000500000000;
  int v101 = v82;
  unint64_t v103 = v78;
  unint64_t v102 = v74;
  int v104 = v39;
  LOBYTE(v86) = *((unsigned char *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v86);
  unint64_t v5 = v95;
  unint64_t v6 = v96;
  uint64_t v8 = *((void *)&v97 + 1);
  unint64_t v7 = v97;
  int v4 = v98;
  a1 = v99;
  unint64_t v15 = v100;
  uint64_t v12 = v101;
  LODWORD(v14) = v102 | (v103 << 16);
  unsigned int v3 = v104;
  char v40 = v100 >> 62;
  if (v100 >> 62 != 3 || (v14 & 0xFFFFFF) != 0 || v100 != 0xC000000000000000 || (__int16 v41 = v101 | v99, v101 | v99))
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    unint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_2461B9DC0;
    *(void *)(v45 + 32) = v5;
    *(void *)(v45 + 40) = v6;
    *(void *)(v45 + 48) = v7;
    *(void *)(v45 + 56) = v8;
    *(void *)(v45 + 64) = v4;
    *(void *)(v45 + 72) = a1;
    *(void *)(v45 + 80) = v15;
    *(void *)(v45 + 88) = v12;
    uint64_t v10 = WORD1(v14);
    *(unsigned char *)(v45 + 98) = BYTE2(v14);
    *(_WORD *)(v45 + 96) = v14;
    *(_DWORD *)(v45 + 100) = v3;
    uint64_t v13 = v45;
    switch((int)v40)
    {
      case 1:
        unsigned int v47 = outlined copy of DisplayList.Item.Value(a1, v15);
        switch(BYTE4(v15))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 2);
            uint64_t v48 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v86);
            uint64_t v63 = v88;
            unint64_t v80 = *((void *)&v87 + 1);
            __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
            id v76 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v63 + 56);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v76(&v85, v80, v63);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 3);
            LOWORD(v48) = v85;
            break;
          case 7:
            LOWORD(v48) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 10);
            LOWORD(v48) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 12);
            LOWORD(v48) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            char v64 = a1;
            unint64_t v65 = v15;
            LOBYTE(v66) = 14;
            goto LABEL_44;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 15);
            LOWORD(v48) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 16);
            LOWORD(v48) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v86, v47);
            uint64_t v81 = v86;
            int v67 = (unsigned __int16)word_26FA429C8;
            __int16 v68 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 17);
            if ((v68 & ~v67) != 0) {
              unint64_t v69 = v68;
            }
            else {
              unint64_t v69 = 0;
            }
            LOWORD(v48) = v81 | v67 | v69;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            char v64 = a1;
            unint64_t v65 = v15;
            int v66 = HIDWORD(v15);
LABEL_44:
            outlined consume of DisplayList.Effect(v64, v65, v66);
            LOWORD(v48) = 0;
            break;
        }
        __int16 v42 = v48 | v14;
        break;
      case 2:
        uint64_t v49 = *(void *)(a1 + 16);
        if (!v49)
        {
          __int16 v42 = 128;
          goto LABEL_35;
        }
        if (v49 == 1)
        {
          __int16 v50 = 0;
          __int16 v42 = 128;
LABEL_23:
          __int16 v57 = v49 - v50;
          __int16 v58 = (__int16 *)(a1 + 40 * v50 + 64);
          do
          {
            uint64_t v59 = *v58;
            v58 += 20;
            v42 |= v59;
            --v57;
          }
          while (v57);
          goto LABEL_35;
        }
        uint64_t v51 = 0;
        __int16 v50 = v49 & 0x7FFFFFFFFFFFFFFELL;
        __int16 v52 = (__int16 *)(a1 + 104);
        uint64_t v53 = 128;
        __int16 v54 = v49 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v55 = *(v52 - 20);
          uint64_t v56 = *v52;
          v52 += 40;
          v53 |= v55;
          v51 |= v56;
          v54 -= 2;
        }
        while (v54);
        __int16 v42 = v51 | v53;
        if (v49 != v50) {
          goto LABEL_23;
        }
LABEL_35:
        outlined copy of DisplayList.Item.Value(a1, v15);
        outlined copy of DisplayList.Item.Value(a1, v15);
        break;
      case 3:
LABEL_33:
        outlined copy of DisplayList.Item.Value(a1, v15);
        __int16 v42 = 0;
        break;
      default:
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v86);
            uint64_t v46 = v88;
            uint64_t v79 = *((void *)&v87 + 1);
            __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
            id v75 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v46 + 40);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v75(&v85, v79, v46);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
            __int16 v42 = v85;
            goto LABEL_52;
          case 8uLL:
            uint64_t v60 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v60 + 216)) {
              goto LABEL_32;
            }
            uint64_t v83 = *(void **)(v60 + 216);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_retain();
            uint64_t v77 = v60;
            uint64_t v2 = v83;
            swift_retain();
            if ((uint64_t)objc_msgSend(v83, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_29;
            }
            goto LABEL_58;
          case 9uLL:
            __int16 v42 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_35;
          case 0xBuLL:
            goto LABEL_37;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v15);
LABEL_37:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            __int16 v42 = 2;
            goto LABEL_52;
          default:
LABEL_32:
            outlined copy of DisplayList.Item.Value(a1, v15);
            goto LABEL_33;
        }
    }
LABEL_52:
    *(void *)&unsigned int v86 = v5;
    *((void *)&v86 + 1) = v6;
    *(void *)&unsigned int v87 = v7;
    *((void *)&v87 + 1) = v8;
    uint64_t v88 = v4;
    uint64_t v89 = a1;
    uint64_t v90 = v15;
    uint64_t v91 = v12;
    uint64_t v93 = v10;
    uint64_t v92 = v14;
    uint64_t v94 = v3;
    DisplayList.Item.properties.getter(&v85);
    outlined consume of DisplayList.Item.Value(a1, v15);
    __int16 v41 = v85;
    goto LABEL_53;
  }
  __int16 v42 = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v84 = v13;
  *(_WORD *)(v84 + 8) = v42;
  *(unsigned char *)(v84 + 10) = v41;
  return outlined consume of DisplayList.Item.Value(a1, v15);
}

{
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  double *v39;
  unint64_t v40;
  unint64_t v41;
  long long *v42;
  int v43;
  unint64_t v44;
  char v45;
  __int16 v46;
  uint64_t Value;
  uint64_t result;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  __int16 v56;
  __int16 *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  int v72;
  int v73;
  __int16 v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int16 v79;
  void (*v80)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v81)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  id v86;
  id v87;
  unsigned int v88;
  unsigned __int8 v89;
  unint64_t v90;
  __int16 v91;
  long long v92;
  long long v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  __int16 v98;
  char v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  long long v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned __int16 v108;
  unsigned __int8 v109;
  int v110;
  uint64_t v111;

  char v111 = *MEMORY[0x263EF8340];
  uint64_t v9 = *MEMORY[0x263F288F8];
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    unsigned int v11 = 0;
    LOWORD(v12) = 0;
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v10;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = *(void **)Value;
  unsigned int v11 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v12) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!v13[2]) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v14 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v9)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    int v66 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v86, sel_length, v75);
    if (objc_msgSend(v86, sel_attribute_atIndex_effectiveRange_, v66, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v92, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      int v67 = *(unsigned char *)(v82 + 256);
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
      if (v67)
      {
        uint64_t v46 = 8;
LABEL_51:
        LOBYTE(v54) = v88;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v92 = 0u;
      uint64_t v93 = 0u;
      _sypSgWOhTm_9((uint64_t)&v92, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
    }
    uint64_t v46 = 0;
    goto LABEL_51;
  }
  uint64_t v90 = a1;
  unint64_t v78 = v14;
  uint64_t v89 = v12;
  unint64_t v15 = AGCreateWeakAttribute();
  unint64_t v16 = v15;
  uint64_t v77 = HIDWORD(v15);
  unsigned int v17 = AGCreateWeakAttribute();
  unint64_t v18 = v17;
  id v76 = HIDWORD(v17);
  unsigned int v19 = AGCreateWeakAttribute();
  unint64_t v20 = v19;
  id v75 = HIDWORD(v19);
  unsigned int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  unsigned int v87 = v13;
  unsigned int v23 = HIDWORD(v21);
  unint64_t v24 = AGCreateWeakAttribute();
  uint64_t v79 = v11;
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = HIDWORD(v27);
  _threadGeometryProxyData();
  int v101 = __PAIR64__(v77, v16);
  unint64_t v102 = __PAIR64__(v76, v18);
  *(void *)&unint64_t v103 = __PAIR64__(v75, v20);
  *((void *)&v103 + 1) = __PAIR64__(v23, v22);
  int v104 = __PAIR64__(v26, v25);
  uint64_t v105 = __PAIR64__(v29, v28);
  LODWORD(v106) = v78;
  _setThreadGeometryProxyData();
  unint64_t v30 = AGGraphGetValue();
  uint64_t v31 = *(void *)v30;
  double v32 = *(void *)(v30 + 8);
  char v34 = *(unsigned int *)(v30 + 16);
  double v33 = *(unsigned int *)(v30 + 20);
  unint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v31;
  *(void *)(v35 + 24) = v32;
  *(void *)(v35 + 32) = v33 | (v34 << 32);
  *(_OWORD *)(v35 + 40) = 0u;
  *(_OWORD *)(v35 + 56) = 0u;
  *(_OWORD *)(v35 + 72) = 0u;
  *(_OWORD *)(v35 + 88) = 0u;
  *(_OWORD *)(v35 + 104) = 0u;
  *(_OWORD *)(v35 + 116) = 0u;
  *(unsigned char *)(v35 + 132) = 11;
  _setThreadGeometryProxyData();
  unint64_t v36 = (double *)AGGraphGetValue();
  uint64_t v37 = *v36;
  int v38 = v36[1];
  uint64_t v39 = (double *)AGGraphGetValue();
  *(double *)&char v40 = v37 - *v39;
  *(double *)&__int16 v41 = v38 - v39[1];
  __int16 v42 = (long long *)AGGraphGetValue();
  uint64_t v43 = *v1;
  int v101 = v40;
  unint64_t v102 = v41;
  unint64_t v103 = *v42;
  int v104 = v78;
  uint64_t v105 = v35;
  unint64_t v106 = 0x4000000900000000;
  uint64_t v107 = (unint64_t)v87;
  __int16 v109 = v89;
  uint64_t v108 = v79;
  char v110 = v43;
  LOBYTE(v92) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v92);
  int v4 = v101;
  unint64_t v5 = v102;
  unint64_t v7 = *((void *)&v103 + 1);
  unint64_t v6 = v103;
  unsigned int v3 = v104;
  a1 = v105;
  unsigned int v11 = v106;
  uint64_t v13 = (void *)v107;
  uint64_t v12 = v108 | (v109 << 16);
  uint64_t v9 = v110;
  uint64_t v44 = v106 >> 62;
  if (v106 >> 62 != 3 || (v12 & 0xFFFFFF) != 0 || v106 != 0xC000000000000000 || v107 | v105)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_2461B9DC0;
    *(void *)(v49 + 32) = v4;
    *(void *)(v49 + 40) = v5;
    *(void *)(v49 + 48) = v6;
    *(void *)(v49 + 56) = v7;
    *(void *)(v49 + 64) = v3;
    *(void *)(v49 + 72) = a1;
    *(void *)(v49 + 80) = v11;
    *(void *)(v49 + 88) = v13;
    *(unsigned char *)(v49 + 98) = BYTE2(v12);
    *(_WORD *)(v49 + 96) = v12;
    *(_DWORD *)(v49 + 100) = v9;
    uint64_t v2 = v49;
    switch((int)v44)
    {
      case 1:
        uint64_t v88 = HIWORD(v12);
        uint64_t v51 = outlined copy of DisplayList.Item.Value(a1, v11);
        switch(BYTE4(v11))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 2);
            __int16 v52 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v92);
            __int16 v68 = v94;
            uint64_t v84 = *((void *)&v93 + 1);
            __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
            uint64_t v81 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v68 + 56);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v81(&v91, v84, v68);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 3);
            LOWORD(v52) = v91;
            break;
          case 7:
            LOWORD(v52) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 10);
            LOWORD(v52) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 12);
            LOWORD(v52) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            unint64_t v69 = a1;
            unint64_t v70 = v11;
            LOBYTE(v71) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 15);
            LOWORD(v52) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 16);
            LOWORD(v52) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v92, v51);
            uint64_t v85 = v92;
            unint64_t v72 = (unsigned __int16)word_26FA429C8;
            unsigned __int8 v73 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 17);
            if ((v73 & ~v72) != 0) {
              unint64_t v74 = v73;
            }
            else {
              unint64_t v74 = 0;
            }
            LOWORD(v52) = v85 | v72 | v74;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            unint64_t v69 = a1;
            unint64_t v70 = v11;
            unint64_t v71 = HIDWORD(v11);
LABEL_43:
            outlined consume of DisplayList.Effect(v69, v70, v71);
            LOWORD(v52) = 0;
            break;
        }
        uint64_t v46 = v52 | v12;
        goto LABEL_51;
      case 2:
        uint64_t v53 = *(void *)(a1 + 16);
        if (!v53)
        {
          __int16 v54 = HIWORD(v12);
          uint64_t v46 = 128;
          goto LABEL_26;
        }
        __int16 v54 = HIWORD(v12);
        if (v53 == 1)
        {
          __int16 v55 = 0;
          uint64_t v46 = 128;
LABEL_24:
          unint64_t v62 = v53 - v55;
          uint64_t v63 = (__int16 *)(a1 + 40 * v55 + 64);
          do
          {
            char v64 = *v63;
            v63 += 20;
            v46 |= v64;
            --v62;
          }
          while (v62);
          goto LABEL_26;
        }
        uint64_t v56 = 0;
        __int16 v55 = v53 & 0x7FFFFFFFFFFFFFFELL;
        __int16 v57 = (__int16 *)(a1 + 104);
        __int16 v58 = 128;
        uint64_t v59 = v53 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v60 = *(v57 - 20);
          char v61 = *v57;
          v57 += 40;
          v58 |= v60;
          v56 |= v61;
          v59 -= 2;
        }
        while (v59);
        uint64_t v46 = v56 | v58;
        if (v53 != v55) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(a1, v11);
        outlined copy of DisplayList.Item.Value(a1, v11);
        break;
      case 3:
        __int16 v54 = HIWORD(v12);
        outlined copy of DisplayList.Item.Value(a1, v11);
        uint64_t v46 = 0;
        break;
      default:
        uint64_t v88 = HIWORD(v12);
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v92);
            __int16 v50 = v94;
            uint64_t v83 = *((void *)&v93 + 1);
            __swift_project_boxed_opaque_existential_1(&v92, *((uint64_t *)&v93 + 1));
            unint64_t v80 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v50 + 40);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v80(&v91, v83, v50);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v92);
            uint64_t v46 = v91;
            goto LABEL_51;
          case 8uLL:
            unint64_t v65 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v65 + 216)) {
              goto LABEL_33;
            }
            unsigned int v86 = *(id *)(v65 + 216);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_retain();
            uint64_t v82 = v65;
            swift_retain();
            if ((uint64_t)objc_msgSend(v86, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            uint64_t v46 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v11);
LABEL_36:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            uint64_t v46 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            uint64_t v46 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v92 = v4;
    *((void *)&v92 + 1) = v5;
    *(void *)&uint64_t v93 = v6;
    *((void *)&v93 + 1) = v7;
    uint64_t v94 = v3;
    uint64_t v95 = a1;
    unint64_t v96 = v11;
    uint64_t v97 = v13;
    unint64_t v99 = v54;
    uint64_t v98 = v12;
    unint64_t v100 = v9;
    DisplayList.Item.properties.getter(&v91);
    outlined consume of DisplayList.Item.Value(a1, v11);
    swift_release();
    unint64_t v45 = v91;
    goto LABEL_53;
  }
  swift_release();
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v90 = v2;
  *(_WORD *)(v90 + 8) = v46;
  *(unsigned char *)(v90 + 10) = v45;
  return outlined consume of DisplayList.Item.Value(a1, v11);
}

{
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double v35;
  double v36;
  double *v37;
  unint64_t v38;
  unint64_t v39;
  long long *v40;
  int v41;
  unint64_t v42;
  char v43;
  __int16 v44;
  uint64_t Value;
  uint64_t result;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  __int16 v54;
  __int16 *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  int v70;
  int v71;
  __int16 v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int16 v77;
  void (*v78)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v79)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  id v84;
  id v85;
  unsigned int v86;
  unsigned __int8 v87;
  unint64_t v88;
  __int16 v89;
  long long v90;
  long long v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  __int16 v96;
  char v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  long long v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned __int16 v106;
  unsigned __int8 v107;
  int v108;
  uint64_t v109;

  __int16 v109 = *MEMORY[0x263EF8340];
  uint64_t v9 = *MEMORY[0x263F288F8];
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    unsigned int v11 = 0;
    LOWORD(v12) = 0;
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v10;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = *(void **)Value;
  unsigned int v11 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v12) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!v13[2]) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v14 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v9)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    char v64 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v84, sel_length, v73);
    if (objc_msgSend(v84, sel_attribute_atIndex_effectiveRange_, v64, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v90, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      unint64_t v65 = *(unsigned char *)(v80 + 256);
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
      if (v65)
      {
        uint64_t v44 = 8;
LABEL_51:
        LOBYTE(v52) = v86;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v90 = 0u;
      uint64_t v91 = 0u;
      _sypSgWOhTm_9((uint64_t)&v90, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
    }
    uint64_t v44 = 0;
    goto LABEL_51;
  }
  uint64_t v88 = a1;
  id v76 = v14;
  unsigned int v87 = v12;
  unint64_t v15 = AGCreateWeakAttribute();
  unint64_t v16 = v15;
  id v75 = HIDWORD(v15);
  unsigned int v17 = AGCreateWeakAttribute();
  unint64_t v18 = v17;
  unint64_t v74 = HIDWORD(v17);
  unsigned int v19 = AGCreateWeakAttribute();
  unint64_t v20 = v19;
  unsigned __int8 v73 = HIDWORD(v19);
  unsigned int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  uint64_t v85 = v13;
  unsigned int v23 = HIDWORD(v21);
  unint64_t v24 = AGCreateWeakAttribute();
  uint64_t v77 = v11;
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = HIDWORD(v27);
  _threadGeometryProxyData();
  unint64_t v99 = __PAIR64__(v75, v16);
  unint64_t v100 = __PAIR64__(v74, v18);
  *(void *)&int v101 = __PAIR64__(v73, v20);
  *((void *)&v101 + 1) = __PAIR64__(v23, v22);
  unint64_t v102 = __PAIR64__(v26, v25);
  unint64_t v103 = __PAIR64__(v29, v28);
  LODWORD(v104) = v76;
  _setThreadGeometryProxyData();
  unint64_t v30 = (uint64_t *)AGGraphGetValue();
  uint64_t v31 = *v30;
  double v32 = v30[1];
  double v33 = swift_allocObject();
  *(void *)(v33 + 16) = v31;
  *(void *)(v33 + 24) = v32;
  *(_OWORD *)(v33 + 32) = 0u;
  *(_OWORD *)(v33 + 48) = 0u;
  *(_OWORD *)(v33 + 64) = 0u;
  *(_OWORD *)(v33 + 80) = 0u;
  *(_OWORD *)(v33 + 96) = 0u;
  *(_OWORD *)(v33 + 112) = 0u;
  *(_DWORD *)(v33 + 128) = 0;
  *(unsigned char *)(v33 + 132) = 5;
  _setThreadGeometryProxyData();
  char v34 = (double *)AGGraphGetValue();
  unint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  uint64_t v37 = (double *)AGGraphGetValue();
  *(double *)&int v38 = v35 - *v37;
  *(double *)&uint64_t v39 = v36 - v37[1];
  char v40 = (long long *)AGGraphGetValue();
  __int16 v41 = *v1;
  unint64_t v99 = v38;
  unint64_t v100 = v39;
  int v101 = *v40;
  unint64_t v102 = v76;
  unint64_t v103 = v33;
  int v104 = 0x4000000900000000;
  uint64_t v105 = (unint64_t)v85;
  uint64_t v107 = v87;
  unint64_t v106 = v77;
  uint64_t v108 = v41;
  LOBYTE(v90) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v90);
  int v4 = v99;
  unint64_t v5 = v100;
  unint64_t v7 = *((void *)&v101 + 1);
  unint64_t v6 = v101;
  unsigned int v3 = v102;
  a1 = v103;
  unsigned int v11 = v104;
  uint64_t v13 = (void *)v105;
  uint64_t v12 = v106 | (v107 << 16);
  uint64_t v9 = v108;
  __int16 v42 = v104 >> 62;
  if (v104 >> 62 != 3 || (v12 & 0xFFFFFF) != 0 || v104 != 0xC000000000000000 || v105 | v103)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    unsigned int v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_2461B9DC0;
    *(void *)(v47 + 32) = v4;
    *(void *)(v47 + 40) = v5;
    *(void *)(v47 + 48) = v6;
    *(void *)(v47 + 56) = v7;
    *(void *)(v47 + 64) = v3;
    *(void *)(v47 + 72) = a1;
    *(void *)(v47 + 80) = v11;
    *(void *)(v47 + 88) = v13;
    *(unsigned char *)(v47 + 98) = BYTE2(v12);
    *(_WORD *)(v47 + 96) = v12;
    *(_DWORD *)(v47 + 100) = v9;
    uint64_t v2 = v47;
    switch((int)v42)
    {
      case 1:
        unsigned int v86 = HIWORD(v12);
        uint64_t v49 = outlined copy of DisplayList.Item.Value(a1, v11);
        switch(BYTE4(v11))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 2);
            __int16 v50 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v90);
            int v66 = v92;
            uint64_t v82 = *((void *)&v91 + 1);
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            uint64_t v79 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v66 + 56);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v79(&v89, v82, v66);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 3);
            LOWORD(v50) = v89;
            break;
          case 7:
            LOWORD(v50) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 10);
            LOWORD(v50) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 12);
            LOWORD(v50) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            int v67 = a1;
            __int16 v68 = v11;
            LOBYTE(v69) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 15);
            LOWORD(v50) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 16);
            LOWORD(v50) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v90, v49);
            uint64_t v83 = v90;
            unint64_t v70 = (unsigned __int16)word_26FA429C8;
            unint64_t v71 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 17);
            if ((v71 & ~v70) != 0) {
              unint64_t v72 = v71;
            }
            else {
              unint64_t v72 = 0;
            }
            LOWORD(v50) = v83 | v70 | v72;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            int v67 = a1;
            __int16 v68 = v11;
            unint64_t v69 = HIDWORD(v11);
LABEL_43:
            outlined consume of DisplayList.Effect(v67, v68, v69);
            LOWORD(v50) = 0;
            break;
        }
        uint64_t v44 = v50 | v12;
        goto LABEL_51;
      case 2:
        uint64_t v51 = *(void *)(a1 + 16);
        if (!v51)
        {
          __int16 v52 = HIWORD(v12);
          uint64_t v44 = 128;
          goto LABEL_26;
        }
        __int16 v52 = HIWORD(v12);
        if (v51 == 1)
        {
          uint64_t v53 = 0;
          uint64_t v44 = 128;
LABEL_24:
          uint64_t v60 = v51 - v53;
          char v61 = (__int16 *)(a1 + 40 * v53 + 64);
          do
          {
            unint64_t v62 = *v61;
            v61 += 20;
            v44 |= v62;
            --v60;
          }
          while (v60);
          goto LABEL_26;
        }
        __int16 v54 = 0;
        uint64_t v53 = v51 & 0x7FFFFFFFFFFFFFFELL;
        __int16 v55 = (__int16 *)(a1 + 104);
        uint64_t v56 = 128;
        __int16 v57 = v51 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v58 = *(v55 - 20);
          uint64_t v59 = *v55;
          v55 += 40;
          v56 |= v58;
          v54 |= v59;
          v57 -= 2;
        }
        while (v57);
        uint64_t v44 = v54 | v56;
        if (v51 != v53) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(a1, v11);
        outlined copy of DisplayList.Item.Value(a1, v11);
        break;
      case 3:
        __int16 v52 = HIWORD(v12);
        outlined copy of DisplayList.Item.Value(a1, v11);
        uint64_t v44 = 0;
        break;
      default:
        unsigned int v86 = HIWORD(v12);
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v90);
            uint64_t v48 = v92;
            uint64_t v81 = *((void *)&v91 + 1);
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            unint64_t v78 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v48 + 40);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v78(&v89, v81, v48);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            uint64_t v44 = v89;
            goto LABEL_51;
          case 8uLL:
            uint64_t v63 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v63 + 216)) {
              goto LABEL_33;
            }
            uint64_t v84 = *(id *)(v63 + 216);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_retain();
            unint64_t v80 = v63;
            swift_retain();
            if ((uint64_t)objc_msgSend(v84, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            uint64_t v44 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v11);
LABEL_36:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            uint64_t v44 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            uint64_t v44 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v90 = v4;
    *((void *)&v90 + 1) = v5;
    *(void *)&uint64_t v91 = v6;
    *((void *)&v91 + 1) = v7;
    uint64_t v92 = v3;
    uint64_t v93 = a1;
    uint64_t v94 = v11;
    uint64_t v95 = v13;
    uint64_t v97 = v52;
    unint64_t v96 = v12;
    uint64_t v98 = v9;
    DisplayList.Item.properties.getter(&v89);
    outlined consume of DisplayList.Item.Value(a1, v11);
    swift_release();
    uint64_t v43 = v89;
    goto LABEL_53;
  }
  swift_release();
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v88 = v2;
  *(_WORD *)(v88 + 8) = v44;
  *(unsigned char *)(v88 + 10) = v43;
  return outlined consume of DisplayList.Item.Value(a1, v11);
}

{
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  unint64_t v39;
  unint64_t v40;
  long long *v41;
  int v42;
  unint64_t v43;
  char v44;
  __int16 v45;
  uint64_t Value;
  uint64_t result;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  __int16 v55;
  __int16 *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;
  uint64_t v61;
  __int16 *v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  int v71;
  int v72;
  __int16 v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned __int16 v78;
  void (*v79)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v80)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  id v85;
  id v86;
  unsigned int v87;
  unsigned __int8 v88;
  unint64_t v89;
  __int16 v90;
  long long v91;
  long long v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  __int16 v97;
  char v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  long long v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned __int16 v107;
  unsigned __int8 v108;
  int v109;
  uint64_t v110;

  char v110 = *MEMORY[0x263EF8340];
  uint64_t v9 = *MEMORY[0x263F288F8];
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    unsigned int v11 = 0;
    LOWORD(v12) = 0;
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v10;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = *(void **)Value;
  unsigned int v11 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v12) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!v13[2]) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v14 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v9)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    unint64_t v65 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v85, sel_length, v74);
    if (objc_msgSend(v85, sel_attribute_atIndex_effectiveRange_, v65, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v91, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      int v66 = *(unsigned char *)(v81 + 256);
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
      if (v66)
      {
        unint64_t v45 = 8;
LABEL_51:
        LOBYTE(v53) = v87;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v91 = 0u;
      uint64_t v92 = 0u;
      _sypSgWOhTm_9((uint64_t)&v91, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v11);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v11);
    }
    unint64_t v45 = 0;
    goto LABEL_51;
  }
  uint64_t v89 = a1;
  uint64_t v77 = v14;
  uint64_t v88 = v12;
  unint64_t v15 = AGCreateWeakAttribute();
  unint64_t v16 = v15;
  id v76 = HIDWORD(v15);
  unsigned int v17 = AGCreateWeakAttribute();
  unint64_t v18 = v17;
  id v75 = HIDWORD(v17);
  unsigned int v19 = AGCreateWeakAttribute();
  unint64_t v20 = v19;
  unint64_t v74 = HIDWORD(v19);
  unsigned int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  unsigned int v86 = v13;
  unsigned int v23 = HIDWORD(v21);
  unint64_t v24 = AGCreateWeakAttribute();
  unint64_t v78 = v11;
  unsigned int v25 = v24;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = HIDWORD(v27);
  _threadGeometryProxyData();
  unint64_t v100 = __PAIR64__(v76, v16);
  int v101 = __PAIR64__(v75, v18);
  *(void *)&unint64_t v102 = __PAIR64__(v74, v20);
  *((void *)&v102 + 1) = __PAIR64__(v23, v22);
  unint64_t v103 = __PAIR64__(v26, v25);
  int v104 = __PAIR64__(v29, v28);
  LODWORD(v105) = v77;
  _setThreadGeometryProxyData();
  unint64_t v30 = AGGraphGetValue();
  uint64_t v31 = *(void *)v30;
  double v32 = *(void *)(v30 + 8);
  double v33 = *(unsigned int *)(v30 + 16);
  char v34 = swift_allocObject();
  *(void *)(v34 + 16) = v31;
  *(void *)(v34 + 24) = v32;
  *(void *)(v34 + 32) = v33;
  *(_OWORD *)(v34 + 40) = 0u;
  *(_OWORD *)(v34 + 56) = 0u;
  *(_OWORD *)(v34 + 72) = 0u;
  *(_OWORD *)(v34 + 88) = 0u;
  *(_OWORD *)(v34 + 104) = 0u;
  *(_OWORD *)(v34 + 116) = 0u;
  *(unsigned char *)(v34 + 132) = 13;
  _setThreadGeometryProxyData();
  unint64_t v35 = (double *)AGGraphGetValue();
  unint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  int v38 = (double *)AGGraphGetValue();
  *(double *)&uint64_t v39 = v36 - *v38;
  *(double *)&char v40 = v37 - v38[1];
  __int16 v41 = (long long *)AGGraphGetValue();
  __int16 v42 = *v1;
  unint64_t v100 = v39;
  int v101 = v40;
  unint64_t v102 = *v41;
  unint64_t v103 = v77;
  int v104 = v34;
  uint64_t v105 = 0x4000000900000000;
  unint64_t v106 = (unint64_t)v86;
  uint64_t v108 = v88;
  uint64_t v107 = v78;
  __int16 v109 = v42;
  LOBYTE(v91) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v91);
  int v4 = v100;
  unint64_t v5 = v101;
  unint64_t v7 = *((void *)&v102 + 1);
  unint64_t v6 = v102;
  unsigned int v3 = v103;
  a1 = v104;
  unsigned int v11 = v105;
  uint64_t v13 = (void *)v106;
  uint64_t v12 = v107 | (v108 << 16);
  uint64_t v9 = v109;
  uint64_t v43 = v105 >> 62;
  if (v105 >> 62 != 3 || (v12 & 0xFFFFFF) != 0 || v105 != 0xC000000000000000 || v106 | v104)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_2461B9DC0;
    *(void *)(v48 + 32) = v4;
    *(void *)(v48 + 40) = v5;
    *(void *)(v48 + 48) = v6;
    *(void *)(v48 + 56) = v7;
    *(void *)(v48 + 64) = v3;
    *(void *)(v48 + 72) = a1;
    *(void *)(v48 + 80) = v11;
    *(void *)(v48 + 88) = v13;
    *(unsigned char *)(v48 + 98) = BYTE2(v12);
    *(_WORD *)(v48 + 96) = v12;
    *(_DWORD *)(v48 + 100) = v9;
    uint64_t v2 = v48;
    switch((int)v43)
    {
      case 1:
        unsigned int v87 = HIWORD(v12);
        __int16 v50 = outlined copy of DisplayList.Item.Value(a1, v11);
        switch(BYTE4(v11))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 2);
            uint64_t v51 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v91);
            int v67 = v93;
            uint64_t v83 = *((void *)&v92 + 1);
            __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
            unint64_t v80 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v67 + 56);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v80(&v90, v83, v67);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 3);
            LOWORD(v51) = v90;
            break;
          case 7:
            LOWORD(v51) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 10);
            LOWORD(v51) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 12);
            LOWORD(v51) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            __int16 v68 = a1;
            unint64_t v69 = v11;
            LOBYTE(v70) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 15);
            LOWORD(v51) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 16);
            LOWORD(v51) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v91, v50);
            uint64_t v84 = v91;
            unint64_t v71 = (unsigned __int16)word_26FA429C8;
            unint64_t v72 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v11, 17);
            if ((v72 & ~v71) != 0) {
              unsigned __int8 v73 = v72;
            }
            else {
              unsigned __int8 v73 = 0;
            }
            LOWORD(v51) = v84 | v71 | v73;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_bridgeObjectRelease();
            __int16 v68 = a1;
            unint64_t v69 = v11;
            unint64_t v70 = HIDWORD(v11);
LABEL_43:
            outlined consume of DisplayList.Effect(v68, v69, v70);
            LOWORD(v51) = 0;
            break;
        }
        unint64_t v45 = v51 | v12;
        goto LABEL_51;
      case 2:
        __int16 v52 = *(void *)(a1 + 16);
        if (!v52)
        {
          uint64_t v53 = HIWORD(v12);
          unint64_t v45 = 128;
          goto LABEL_26;
        }
        uint64_t v53 = HIWORD(v12);
        if (v52 == 1)
        {
          __int16 v54 = 0;
          unint64_t v45 = 128;
LABEL_24:
          char v61 = v52 - v54;
          unint64_t v62 = (__int16 *)(a1 + 40 * v54 + 64);
          do
          {
            uint64_t v63 = *v62;
            v62 += 20;
            v45 |= v63;
            --v61;
          }
          while (v61);
          goto LABEL_26;
        }
        __int16 v55 = 0;
        __int16 v54 = v52 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v56 = (__int16 *)(a1 + 104);
        __int16 v57 = 128;
        __int16 v58 = v52 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v59 = *(v56 - 20);
          uint64_t v60 = *v56;
          v56 += 40;
          v57 |= v59;
          v55 |= v60;
          v58 -= 2;
        }
        while (v58);
        unint64_t v45 = v55 | v57;
        if (v52 != v54) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(a1, v11);
        outlined copy of DisplayList.Item.Value(a1, v11);
        break;
      case 3:
        uint64_t v53 = HIWORD(v12);
        outlined copy of DisplayList.Item.Value(a1, v11);
        unint64_t v45 = 0;
        break;
      default:
        unsigned int v87 = HIWORD(v12);
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v91);
            uint64_t v49 = v93;
            uint64_t v82 = *((void *)&v92 + 1);
            __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
            uint64_t v79 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v49 + 40);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            v79(&v90, v82, v49);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
            unint64_t v45 = v90;
            goto LABEL_51;
          case 8uLL:
            char v64 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v64 + 216)) {
              goto LABEL_33;
            }
            uint64_t v85 = *(id *)(v64 + 216);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            swift_retain();
            uint64_t v81 = v64;
            swift_retain();
            if ((uint64_t)objc_msgSend(v85, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            unint64_t v45 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v11);
LABEL_36:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            unint64_t v45 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(a1, v11);
            outlined copy of DisplayList.Item.Value(a1, v11);
            unint64_t v45 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v91 = v4;
    *((void *)&v91 + 1) = v5;
    *(void *)&uint64_t v92 = v6;
    *((void *)&v92 + 1) = v7;
    uint64_t v93 = v3;
    uint64_t v94 = a1;
    uint64_t v95 = v11;
    unint64_t v96 = v13;
    uint64_t v98 = v53;
    uint64_t v97 = v12;
    unint64_t v99 = v9;
    DisplayList.Item.properties.getter(&v90);
    outlined consume of DisplayList.Item.Value(a1, v11);
    swift_release();
    uint64_t v44 = v90;
    goto LABEL_53;
  }
  swift_release();
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v89 = v2;
  *(_WORD *)(v89 + 8) = v45;
  *(unsigned char *)(v89 + 10) = v44;
  return outlined consume of DisplayList.Item.Value(a1, v11);
}

{
  int *v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double *v43;
  unint64_t v44;
  unint64_t v45;
  long long *v46;
  int v47;
  unint64_t v48;
  char v49;
  __int16 v50;
  uint64_t Value;
  uint64_t result;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  __int16 *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 *v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  int v75;
  int v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  unsigned __int16 v89;
  void (*v90)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v91)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  unsigned __int8 v97;
  void *v98;
  unint64_t v99;
  unint64_t v100;
  __int16 v101;
  long long v102;
  long long v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __int16 v108;
  char v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  long long v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned __int16 v118;
  unsigned __int8 v119;
  int v120;
  uint64_t v121;

  unsigned __int8 v121 = *MEMORY[0x263EF8340];
  uint64_t v10 = *MEMORY[0x263F288F8];
  unsigned int v11 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    uint64_t v12 = 0;
    LOWORD(v13) = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v11;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  uint64_t v12 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v13) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v15 = (void *)++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v10)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_29:
    unint64_t v69 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v15, sel_length);
    if (objc_msgSend(v15, sel_attribute_atIndex_effectiveRange_, v69, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v102, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      unint64_t v70 = *(unsigned char *)(v92 + 256);
      outlined consume of DisplayList.Item.Value(a1, v12);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v12);
      if (v70)
      {
        __int16 v50 = 8;
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t v102 = 0u;
      unint64_t v103 = 0u;
      _sypSgWOhTm_9((uint64_t)&v102, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a1, v12);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v12);
    }
    __int16 v50 = 0;
    goto LABEL_52;
  }
  unint64_t v99 = a1;
  unint64_t v100 = (unint64_t)v15;
  uint64_t v97 = v13;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unsigned int v87 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  uint64_t v85 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  uint64_t v83 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  uint64_t v93 = v14;
  unint64_t v24 = HIDWORD(v22);
  unsigned int v25 = AGCreateWeakAttribute();
  uint64_t v89 = v12;
  unint64_t v26 = v25;
  unint64_t v27 = HIDWORD(v25);
  unsigned int v28 = AGCreateWeakAttribute();
  unint64_t v29 = v28;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  char v111 = __PAIR64__(v87, v17);
  uint64_t v112 = __PAIR64__(v85, v19);
  *(void *)&uint64_t v113 = __PAIR64__(v83, v21);
  *((void *)&v113 + 1) = __PAIR64__(v24, v23);
  uint64_t v114 = __PAIR64__(v27, v26);
  uint64_t v115 = __PAIR64__(v30, v29);
  LODWORD(v116) = v100;
  _setThreadGeometryProxyData();
  uint64_t v31 = AGGraphGetValue();
  unsigned int v86 = *(void *)(v31 + 8);
  uint64_t v88 = *(void **)v31;
  uint64_t v82 = *(void *)(v31 + 24);
  uint64_t v84 = *(void **)(v31 + 16);
  unint64_t v80 = *(void *)(v31 + 40);
  uint64_t v81 = *(void *)(v31 + 32);
  double v32 = *(void *)(v31 + 64);
  unint64_t v78 = *(void *)(v31 + 56);
  uint64_t v79 = *(void *)(v31 + 48);
  double v33 = *(void *)(v31 + 72);
  char v34 = *(void *)(v31 + 80);
  unint64_t v35 = *(void *)(v31 + 88);
  unint64_t v36 = *(void *)(v31 + 96);
  uint64_t v37 = *(void *)(v31 + 104);
  int v38 = *(_DWORD *)(v31 + 112);
  LOBYTE(v17) = *(unsigned char *)(v31 + 116);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v88;
  *(void *)(v39 + 24) = v86;
  *(void *)(v39 + 32) = v84;
  *(void *)(v39 + 40) = v82;
  *(void *)(v39 + 48) = v81;
  *(void *)(v39 + 56) = v80;
  *(void *)(v39 + 64) = v79;
  *(void *)(v39 + 72) = v78;
  *(void *)(v39 + 80) = v32;
  *(void *)(v39 + 88) = v33;
  *(void *)(v39 + 96) = v34;
  *(void *)(v39 + 104) = v35;
  *(void *)(v39 + 112) = v36;
  *(void *)(v39 + 120) = v37;
  *(_DWORD *)(v39 + 128) = v38;
  *(unsigned char *)(v39 + 132) = v17;
  outlined copy of GraphicsFilter(v88, v86, v84, v82, v81, v80, v79, v78, v32, v33, v34, v35, v36, v37, v38, SBYTE2(v38));
  _setThreadGeometryProxyData();
  char v40 = (double *)AGGraphGetValue();
  __int16 v41 = *v40;
  __int16 v42 = v40[1];
  uint64_t v43 = (double *)AGGraphGetValue();
  *(double *)&uint64_t v44 = v41 - *v43;
  *(double *)&unint64_t v45 = v42 - v43[1];
  uint64_t v46 = (long long *)AGGraphGetValue();
  unsigned int v47 = *v1;
  char v111 = v44;
  uint64_t v112 = v45;
  uint64_t v113 = *v46;
  uint64_t v114 = v100;
  uint64_t v115 = v39;
  uint64_t v116 = 0x4000000900000000;
  uint64_t v117 = v93;
  uint64_t v119 = v97;
  int v118 = v89;
  char v120 = v47;
  LOBYTE(v102) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v102);
  unint64_t v5 = v111;
  unint64_t v6 = v112;
  uint64_t v8 = *((void *)&v113 + 1);
  unint64_t v7 = v113;
  unsigned int v3 = v114;
  a1 = v115;
  uint64_t v12 = v116;
  uint64_t v14 = v117;
  uint64_t v13 = v118 | (v119 << 16);
  int v4 = v120;
  uint64_t v48 = v116 >> 62;
  if (v116 >> 62 != 3 || (v13 & 0xFFFFFF) != 0 || v116 != 0xC000000000000000 || v117 | v115)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_2461B9DC0;
    *(void *)(v53 + 32) = v5;
    *(void *)(v53 + 40) = v6;
    *(void *)(v53 + 48) = v7;
    *(void *)(v53 + 56) = v8;
    *(void *)(v53 + 64) = v3;
    *(void *)(v53 + 72) = a1;
    *(void *)(v53 + 80) = v12;
    *(void *)(v53 + 88) = v14;
    uint64_t v10 = HIWORD(v13);
    *(unsigned char *)(v53 + 98) = BYTE2(v13);
    *(_WORD *)(v53 + 96) = v13;
    *(_DWORD *)(v53 + 100) = v4;
    uint64_t v2 = v53;
    switch((int)v48)
    {
      case 1:
        __int16 v55 = outlined copy of DisplayList.Item.Value(a1, v12);
        switch(BYTE4(v12))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v12, 2);
            uint64_t v56 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v102);
            unint64_t v71 = v104;
            uint64_t v95 = *((void *)&v103 + 1);
            __swift_project_boxed_opaque_existential_1(&v102, *((uint64_t *)&v103 + 1));
            uint64_t v91 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v71 + 56);
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            v91(&v101, v95, v71);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v12, 3);
            LOWORD(v56) = v101;
            break;
          case 7:
            LOWORD(v56) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v12, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v12, 10);
            LOWORD(v56) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v12, 12);
            LOWORD(v56) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            unint64_t v72 = a1;
            unsigned __int8 v73 = v12;
            LOBYTE(v74) = 14;
            goto LABEL_44;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v12, 15);
            LOWORD(v56) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v12, 16);
            LOWORD(v56) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v102, v55);
            unint64_t v96 = v102;
            id v75 = (unsigned __int16)word_26FA429C8;
            id v76 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v12, 17);
            if ((v76 & ~v75) != 0) {
              uint64_t v77 = v76;
            }
            else {
              uint64_t v77 = 0;
            }
            LOWORD(v56) = v96 | v75 | v77;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_bridgeObjectRelease();
            unint64_t v72 = a1;
            unsigned __int8 v73 = v12;
            unint64_t v74 = HIDWORD(v12);
LABEL_44:
            outlined consume of DisplayList.Effect(v72, v73, v74);
            LOWORD(v56) = 0;
            break;
        }
        __int16 v50 = v56 | v13;
        break;
      case 2:
        __int16 v57 = *(void *)(a1 + 16);
        if (!v57)
        {
          __int16 v50 = 128;
          goto LABEL_35;
        }
        if (v57 == 1)
        {
          __int16 v58 = 0;
          __int16 v50 = 128;
LABEL_23:
          unint64_t v65 = v57 - v58;
          int v66 = (__int16 *)(a1 + 40 * v58 + 64);
          do
          {
            int v67 = *v66;
            v66 += 20;
            v50 |= v67;
            --v65;
          }
          while (v65);
          goto LABEL_35;
        }
        uint64_t v59 = 0;
        __int16 v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v60 = (__int16 *)(a1 + 104);
        char v61 = 128;
        unint64_t v62 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v63 = *(v60 - 20);
          char v64 = *v60;
          v60 += 40;
          v61 |= v63;
          v59 |= v64;
          v62 -= 2;
        }
        while (v62);
        __int16 v50 = v59 | v61;
        if (v57 != v58) {
          goto LABEL_23;
        }
LABEL_35:
        outlined copy of DisplayList.Item.Value(a1, v12);
        outlined copy of DisplayList.Item.Value(a1, v12);
        break;
      case 3:
LABEL_33:
        outlined copy of DisplayList.Item.Value(a1, v12);
        __int16 v50 = 0;
        break;
      default:
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v102);
            __int16 v54 = v104;
            uint64_t v94 = *((void *)&v103 + 1);
            __swift_project_boxed_opaque_existential_1(&v102, *((uint64_t *)&v103 + 1));
            uint64_t v90 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v54 + 40);
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            v90(&v101, v94, v54);
            uint64_t v10 = HIWORD(v13);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
            __int16 v50 = v101;
            goto LABEL_52;
          case 8uLL:
            __int16 v68 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v68 + 216)) {
              goto LABEL_32;
            }
            uint64_t v98 = *(void **)(v68 + 216);
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            swift_retain();
            uint64_t v92 = v68;
            unint64_t v15 = v98;
            swift_retain();
            if ((uint64_t)objc_msgSend(v98, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_29;
            }
            goto LABEL_58;
          case 9uLL:
            __int16 v50 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_35;
          case 0xBuLL:
            goto LABEL_37;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v12);
LABEL_37:
            outlined copy of DisplayList.Item.Value(a1, v12);
            outlined copy of DisplayList.Item.Value(a1, v12);
            __int16 v50 = 2;
            goto LABEL_52;
          default:
LABEL_32:
            outlined copy of DisplayList.Item.Value(a1, v12);
            goto LABEL_33;
        }
    }
LABEL_52:
    *(void *)&unint64_t v102 = v5;
    *((void *)&v102 + 1) = v6;
    *(void *)&unint64_t v103 = v7;
    *((void *)&v103 + 1) = v8;
    int v104 = v3;
    uint64_t v105 = a1;
    unint64_t v106 = v12;
    uint64_t v107 = v14;
    __int16 v109 = v10;
    uint64_t v108 = v13;
    char v110 = v4;
    DisplayList.Item.properties.getter(&v101);
    outlined consume of DisplayList.Item.Value(a1, v12);
    swift_release();
    uint64_t v49 = v101;
    goto LABEL_53;
  }
  swift_release();
  uint64_t v49 = 0;
  __int16 v50 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)unint64_t v99 = v2;
  *(_WORD *)(v99 + 8) = v50;
  *(unsigned char *)(v99 + 10) = v49;
  return outlined consume of DisplayList.Item.Value(a1, v12);
}

unint64_t instantiation function for generic protocol witness table for Font.SystemProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize;
  if (!lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize;
  if (!lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize);
  }
  return result;
}

void static Text.WritingMode.horizontalTopToBottom.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static MatchedGeometryProperties.position.getter()
{
  return 1;
}

uint64_t instantiation function for generic protocol witness table for LinearGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for LinearGradient._Paint(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint);
}

uint64_t static EventModifiers.option.getter()
{
  return 8;
}

uint64_t type metadata completion function for DisplayList.ArchiveIDs()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double _Placement.anchorPosition.getter()
{
  return *(double *)(v0 + 48);
}

uint64_t base witness table accessor for Equatable in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, type metadata accessor for RBDisplayListRenderKey);
}

uint64_t NamedCoordinateSpace.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = outlined init with copy of CoordinateSpace.Name(v1, (uint64_t)v6);
  if (v8)
  {
    *(void *)a1 = *(void *)&v6[0];
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    long long v5 = v6[1];
    *(_OWORD *)a1 = v6[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = v7;
  }
  *(unsigned char *)(a1 + 40) = v4;
  return result;
}

uint64_t EnvironmentValues.effectiveFont.getter()
{
  unint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v5[0] = *v0;
    v5[1] = 0;
    swift_retain();
    uint64_t v4 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(v5);
    swift_release();
    return v4;
  }
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Sizing(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

id static Font.PrivateDesign.compactRounded.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for compactRounded, (void **)&static Font.PrivateDesign.compactRounded, a1);
}

_WORD *destructiveInjectEnumTag for TextJustification.Storage(_WORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *uint64_t result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)uint64_t result = a2 + 1;
  }
  return result;
}

uint64_t outlined destroy of (ScrollPosition.Storage, ScrollPosition.Storage)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for ScrollPosition?()
{
  if (!lazy cache variable for type metadata for ScrollPosition?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?);
    }
  }
}

uint64_t type metadata completion function for TypesettingConfiguration()
{
  uint64_t result = type metadata accessor for TypesettingLanguage.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedTextSuffix()
{
  return &type metadata for ResolvedTextSuffix;
}

uint64_t MakeSection.value.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = AGGraphGetCurrentAttribute();
  int v7 = *MEMORY[0x263F288F8];
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v8 = result;
    unint64_t v9 = HIDWORD(a2);
    int64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = MEMORY[0x263F8EE78];
    if (v10)
    {
      int v21 = *MEMORY[0x263F288F8];
      unint64_t v22 = HIDWORD(a2);
      int v23 = v8;
      char v24 = a2;
      uint64_t v27 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
      type metadata accessor for ViewList();
      uint64_t v12 = 0;
      uint64_t v11 = v27;
      do
      {
        int v13 = *(_DWORD *)(a1 + 4 * v12 + 32);
        uint64_t Value = AGGraphGetValue();
        outlined init with copy of AnyTrackedValue(Value, (uint64_t)&v25);
        *(_DWORD *)&v26[24] = v13;
        uint64_t v27 = v11;
        unint64_t v16 = *(void *)(v11 + 16);
        unint64_t v15 = *(void *)(v11 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          uint64_t v11 = v27;
        }
        ++v12;
        *(void *)(v11 + 16) = v16 + 1;
        unsigned int v17 = (_OWORD *)(v11 + 48 * v16);
        long long v18 = v25;
        long long v19 = *(_OWORD *)v26;
        *(_OWORD *)((char *)v17 + 60) = *(_OWORD *)&v26[12];
        v17[2] = v18;
        void v17[3] = v19;
      }
      while (v10 != v12);
      swift_bridgeObjectRelease();
      LOBYTE(a2) = v24;
      int v8 = v23;
      LODWORD(v9) = v22;
      int v7 = v21;
    }
    if (v7 == v9)
    {
      uint64_t v20 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v20 = *(void *)AGGraphGetValue();
      swift_bridgeObjectRetain();
    }
    a3[3] = (uint64_t)&type metadata for _ViewList_Section;
    a3[4] = (uint64_t)&protocol witness table for _ViewList_Section;
    uint64_t result = swift_allocObject();
    *a3 = result;
    *(_DWORD *)(result + 16) = v8;
    *(void *)(result + 24) = v11;
    *(void *)(result + 32) = v20;
    *(unsigned char *)(result + 40) = a2 & 1;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for BothFeatures<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t static CoordinateSpaceProtocol<>.scrollView(axis:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result)
  {
    if (one-time initialization token for vertical != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v3 = &static ScrollCoordinateSpace.vertical;
  }
  else
  {
    if (one-time initialization token for horizontal != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v3 = &static ScrollCoordinateSpace.horizontal;
  }
  *(void *)a2 = *v3;
  *(unsigned char *)(a2 + 40) = 1;
  return result;
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for TextDrawingContext();
  uint64_t v0 = swift_allocObject();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81668]), sel_init);
  objc_msgSend(v1, sel_setWrapsForTruncationMode_, 1);
  objc_msgSend(v1, sel_setWantsBaselineOffset_, 1);
  objc_msgSend(v1, sel_setWantsScaledLineHeight_, 1);
  objc_msgSend(v1, sel_setWantsScaledBaselineOffset_, 1);
  objc_msgSend(v1, sel_setCachesLayout_, 1);
  type metadata accessor for AtomicBuffer<NSStringDrawingContext>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  *(void *)(v0 + 16) = result;
  static TextDrawingContext.shared = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for ShapeStyleBox<BackgroundStyle>, (uint64_t)&type metadata for BackgroundStyle, (uint64_t)&protocol witness table for BackgroundStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
  uint64_t result = swift_allocObject();
  static BackgroundStyle.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for ShapeStyleBox<ForegroundStyle>();
  uint64_t result = swift_allocObject();
  static ForegroundStyle.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for _ImpossibleActor();
  uint64_t result = swift_allocObject();
  static _ImpossibleActor.shared = result;
  return result;
}

uint64_t type metadata accessor for TextDrawingContext()
{
  return self;
}

void type metadata accessor for AtomicBuffer<NSStringDrawingContext>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<NSStringDrawingContext>)
  {
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for NSStringDrawingContext);
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<NSStringDrawingContext>);
    }
  }
}

_DWORD *initializeWithCopy for ValueTransactionSeed(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  long long v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  int64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v11 = *(void *)(v7 + 64);
    }
    else {
      size_t v11 = *(void *)(v7 + 64) + 1;
    }
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

uint64_t outlined init with take of Range<IndexSet.Index>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Range<IndexSet.Index>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Collection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v3);
  __int16 v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  __int16 v54 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for IndexSet.Index();
  uint64_t v56 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v45 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v59 = (char *)&v45 - v15;
  MEMORY[0x270FA5388](v16);
  __int16 v57 = (char *)&v45 - v17;
  type metadata accessor for Range<IndexSet.Index>();
  uint64_t v51 = v18;
  MEMORY[0x270FA5388](v18);
  __int16 v52 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v53 = (uint64_t)&v45 - v21;
  type metadata accessor for PartialRangeFrom<IndexSet.Index>();
  MEMORY[0x270FA5388](v22 - 8);
  char v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for IndexSet();
  uint64_t v26 = _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
  uint64_t v60 = v25;
  uint64_t v58 = v26;
  dispatch thunk of Collection.startIndex.getter();
  _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    uint64_t v55 = v4;
    uint64_t v48 = a1;
    uint64_t v28 = v56;
    unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    unint64_t v30 = v57;
    v29(v57, v24, v8);
    uint64_t v31 = v59;
    uint64_t v49 = v1;
    dispatch thunk of Collection.endIndex.getter();
    v29(v13, v30, v8);
    unsigned int v47 = v29;
    v29(v10, v31, v8);
    outlined destroy of Slice<IndexSet>((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for PartialRangeFrom<IndexSet.Index>);
    _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
    char v32 = dispatch thunk of static Comparable.<= infix(_:_:)();
    double v33 = *(void (**)(char *, uint64_t))(v28 + 8);
    v33(v10, v8);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v13, v8);
    if (v32)
    {
      char v34 = v50;
      uint64_t v46 = v33;
      uint64_t v35 = v55;
      unint64_t v36 = v54;
      uint64_t v37 = &v54[*(int *)(v55 + 48)];
      int v38 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
      v38(v54, v57, v8);
      unint64_t v45 = v37;
      v38(v37, v59, v8);
      uint64_t v39 = &v34[*(int *)(v35 + 48)];
      char v40 = v47;
      v47(v34, v36, v8);
      v40(v39, v37, v8);
      uint64_t v41 = (uint64_t)v52;
      v38(v52, v34, v8);
      __int16 v42 = v46;
      v46(v39, v8);
      uint64_t v43 = &v34[*(int *)(v55 + 48)];
      v38(v34, v36, v8);
      v38(v43, v45, v8);
      v38((char *)(v41 + *(int *)(v51 + 36)), v43, v8);
      v42(v34, v8);
      uint64_t v44 = v53;
      outlined init with take of Range<IndexSet.Index>(v41, v53);
      dispatch thunk of Collection.subscript.getter();
      return outlined destroy of Slice<IndexSet>(v44, (uint64_t (*)(void))type metadata accessor for Range<IndexSet.Index>);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation8IndexSetVACSlAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of Slice<IndexSet>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for Range<IndexSet.Index>()
{
  if (!lazy cache variable for type metadata for Range<IndexSet.Index>)
  {
    type metadata accessor for IndexSet.Index();
    _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<IndexSet.Index>);
    }
  }
}

void type metadata accessor for PartialRangeFrom<IndexSet.Index>()
{
  if (!lazy cache variable for type metadata for PartialRangeFrom<IndexSet.Index>)
  {
    type metadata accessor for IndexSet.Index();
    _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
    unint64_t v0 = type metadata accessor for PartialRangeFrom();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<IndexSet.Index>);
    }
  }
}

uint64_t RangeReplaceableCollection<>.remove(atOffsets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for PartialRangeFrom();
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v17 - v11;
  type metadata accessor for Slice<IndexSet>();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Collection.subscript.getter((uint64_t)v15);
  uint64_t v21 = v15;
  MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(partial apply for closure #1 in RangeReplaceableCollection<>.remove(atOffsets:), (uint64_t)v20, a3, (uint64_t)v12);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v8, v12, AssociatedTypeWitness);
    swift_getWitnessTable();
    RangeReplaceableCollection.removeSubrange<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
    return outlined destroy of Slice<IndexSet>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for Slice<IndexSet>()
{
  if (!lazy cache variable for type metadata for Slice<IndexSet>)
  {
    type metadata accessor for IndexSet();
    _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
    unint64_t v0 = type metadata accessor for Slice();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>);
    }
  }
}

void type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)()
{
  if (!lazy cache variable for type metadata for (lower: IndexSet.Index, upper: IndexSet.Index))
  {
    type metadata accessor for IndexSet.Index();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: IndexSet.Index, upper: IndexSet.Index));
    }
  }
}

uint64_t MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v34 = a3;
  uint64_t v6 = *(void (**)(char *, uint64_t))(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v29 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v29 - v18;
  unint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v20 = v38;
  uint64_t result = Collection.firstIndexByOffset(where:)(a1, a2, v6, (uint64_t)v10);
  if (!v20)
  {
    int v38 = v16;
    uint64_t v35 = v19;
    uint64_t v22 = TupleTypeMetadata2;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v10, 1, TupleTypeMetadata2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
      return dispatch thunk of Collection.endIndex.getter();
    }
    else
    {
      TupleTypeMetadata2 = *(void *)&v10[*(int *)(v22 + 48)];
      uint64_t v23 = v31;
      uint64_t v29 = *(void *)(v31 + 32);
      uint64_t v30 = v31 + 32;
      ((void (*)(char *, char *, uint64_t))v29)(v35, v10, AssociatedTypeWitness);
      uint64_t result = dispatch thunk of Collection.index(after:)();
      uint64_t v24 = TupleTypeMetadata2 + 1;
      if (!__OFADD__(TupleTypeMetadata2, 1))
      {
        uint64_t v25 = (void (**)(char *, uint64_t))(v23 + 8);
        do
        {
          dispatch thunk of Collection.endIndex.getter();
          swift_getAssociatedConformanceWitness();
          char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v28 = *v25;
          (*v25)(v13, AssociatedTypeWitness);
          if (v27)
          {
            v28(v38, AssociatedTypeWitness);
            return ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v32, v35, AssociatedTypeWitness);
          }
          if ((v36(v24) & 1) == 0)
          {
            dispatch thunk of MutableCollection.swapAt(_:_:)();
            dispatch thunk of Collection.formIndex(after:)();
          }
          uint64_t result = dispatch thunk of Collection.formIndex(after:)();
        }
        while (!__OFADD__(v24++, 1));
        __break(1u);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t Collection.firstIndexByOffset(where:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v28 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (void (*)(char *, uint64_t))((char *)&v26 - v11);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v13 = 0;
  uint64_t v27 = v7;
  uint64_t v31 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v14 = v12;
  while (1)
  {
    uint64_t v15 = v4;
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v16 = a3;
    swift_getAssociatedConformanceWitness();
    a3 = v14;
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *v31;
    (*v31)(v9, AssociatedTypeWitness);
    if (v17) {
      goto LABEL_8;
    }
    uint64_t v18 = v32;
    char v19 = v29(v13);
    if (v18) {
      return ((uint64_t (*)(void, uint64_t))v14)(a3, AssociatedTypeWitness);
    }
    uint64_t v32 = 0;
    if (v19) {
      break;
    }
    uint64_t v14 = a3;
    uint64_t v4 = v15;
    a3 = v16;
    dispatch thunk of Collection.formIndex(after:)();
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
LABEL_8:
      v14((char *)a3, AssociatedTypeWitness);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v28, 1, 1, TupleTypeMetadata2);
    }
  }
  uint64_t v23 = swift_getTupleTypeMetadata2();
  uint64_t v24 = *(int *)(v23 + 48);
  uint64_t v25 = v28;
  (*(void (**)(uint64_t, void (*)(char *, uint64_t), uint64_t))(v27 + 32))(v28, a3, AssociatedTypeWitness);
  *(void *)(v25 + v24) = v13;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v25, 0, 1, v23);
}

ValueMetadata *type metadata accessor for EmptyVisualEffect()
{
  return &type metadata for EmptyVisualEffect;
}

uint64_t type metadata completion function for TypesettingLanguage.Storage()
{
  uint64_t result = type metadata accessor for Locale.Language();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.ResizableProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t ImageResolutionContext.init(environment:textStyle:transaction:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  a4[2] = 0;
  uint64_t v9 = (int *)type metadata accessor for ImageResolutionContext();
  uint64_t v10 = (uint64_t)a4 + v9[6];
  uint64_t v11 = type metadata accessor for Text.Style(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v9[7];
  *(_DWORD *)((char *)a4 + v12) = *MEMORY[0x263F288F8];
  *((unsigned char *)a4 + v9[8]) = 8;
  *((unsigned char *)a4 + v9[9]) = 3;
  *((unsigned char *)a4 + v9[10]) = 1;
  *a4 = v7;
  a4[1] = v8;
  uint64_t result = outlined assign with take of Text.Style?(a2, v10);
  *(_DWORD *)((char *)a4 + v12) = a3;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in Canvas<A>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in MatchedDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in CanvasDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in DynamicViewList<A>.WrappedIDs()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in DynamicViewList<A>.WrappedIDs()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in DynamicViewList<A>.WrappedIDs()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AnchorWriter<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(void *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t getEnumTagSinglePayload for CombiningTransition(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void *outlined retain of ResolvedTextSuffix(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined init with take of ResolvedTextSuffix(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of ResolvedTextSuffix(uint64_t a1)
{
  return a1;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextSuffixKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextSuffixKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextSuffixKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSuffixKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PlatformNamedImageRepresentableContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

id ShapeLayerShadowHelper.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v105 = a1;
  double v106 = *(double *)&a3;
  uint64_t v20 = a2;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *(_OWORD *)(v3 + 32);
  v116[0] = *(_OWORD *)(v3 + 16);
  v116[1] = v7;
  *(void *)&long long v99 = v3;
  char v117 = *(unsigned char *)(v3 + 48);
  outlined init with take of Path.Storage((uint64_t)v116, (uint64_t)v118);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v118, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v116, (uint64_t)&v119);
  uint64_t v8 = v119;
  double v9 = v123;
  uint64_t v108 = v121;
  uint64_t v109 = v122;
  uint64_t v11 = v124;
  uint64_t v10 = v125;
  uint64_t v100 = v126;
  uint64_t v101 = v120;
  uint64_t v12 = v128;
  uint64_t v107 = v127;
  int v13 = v129;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v105, v20);
  PaintType.init<A>(_:)((uint64_t)v6, v20, (uint64_t)&v119);
  int v14 = v13;
  int v15 = (void *)v120;
  uint64_t v16 = v121;
  uint64_t v17 = v122;
  uint64_t v18 = *(void *)&v123;
  uint64_t v19 = v124;
  LOBYTE(v20) = v125;
  uint64_t v104 = v8;
  uint64_t v105 = v11;
  uint64_t v21 = v101;
  uint64_t v126 = v8;
  uint64_t v127 = v101;
  uint64_t v128 = v108;
  uint64_t v129 = v109;
  double v106 = v9;
  double v130 = v9;
  uint64_t v131 = v11;
  uint64_t v102 = v12;
  uint64_t v103 = v10;
  uint64_t v132 = v10;
  uint64_t v22 = v100;
  uint64_t v133 = v100;
  uint64_t v134 = v107;
  uint64_t v135 = v12;
  char v136 = v14;
  int v98 = v14;
  if (!v14)
  {
    uint64_t v23 = v119;
    uint64_t v24 = v99;
    switch((char)v125)
    {
      case 1:
        int v15 = *(void **)(v99 + 8);
        uint64_t v110 = *(void *)v99;
        type metadata accessor for UnclippedGradientLayer();
        __int16 v50 = (void *)swift_dynamicCastClassUnconditional();
        uint64_t v51 = *(void *)(v24 + 104);
        int v52 = *(_DWORD *)(v24 + 112);
        unsigned __int8 v53 = *(unsigned char *)(v24 + 116);
        long long v54 = *(_OWORD *)(v24 + 88);
        long long v111 = *(_OWORD *)(v24 + 72);
        long long v112 = v54;
        uint64_t v113 = v51;
        WORD2(v114) = v53;
        LODWORD(v114) = v52;
        uint64_t v55 = *(void *)(v23 + 16);
        if (!v55) {
          goto LABEL_56;
        }
        uint64_t v56 = (float *)(v23 + 44);
        uint64_t v57 = 1;
        char v58 = 1;
        uint64_t v20 = v105;
        break;
      case 2:
        goto LABEL_22;
      case 3:
        goto LABEL_32;
      case 4:
        goto LABEL_47;
      case 5:
        goto LABEL_42;
      default:
        float v32 = *((float *)&v120 + 1);
        uint64_t v33 = *(void *)v99;
        int v15 = *(void **)(v99 + 8);
        uint64_t v34 = *(void *)(v99 + 72);
        uint64_t v35 = v100;
        uint64_t v36 = *(unsigned int *)(v99 + 80);
        float v37 = *(float *)(v99 + 84);
        long long v97 = *(_OWORD *)(v99 + 88);
        uint64_t v38 = *(void *)(v99 + 104);
        int v39 = *(_DWORD *)(v99 + 112);
        unsigned __int8 v40 = *(unsigned char *)(v99 + 116);
        objc_msgSend(v15, sel_setShadowPathIsBounds_, 1);
        objc_msgSend(v15, sel_setShadowPath_, 0);
        uint64_t v110 = v33;
        *(void *)&long long v111 = v34;
        unint64_t v41 = v36 | ((unint64_t)COERCE_UNSIGNED_INT(v37 * v32) << 32);
        uint64_t v22 = v35;
        *((void *)&v111 + 1) = v41;
        long long v112 = v97;
        uint64_t v113 = v38;
        WORD2(v114) = v40;
        LODWORD(v114) = v39;
        DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)&v111, v15);
        uint64_t v21 = v101;
        uint64_t v20 = v105;
        outlined release of (PaintType, ShapeType)((uint64_t)&v119);
        if ((*(unsigned char *)(v24 + 117) & 1) == 0) {
          return (id)outlined consume of ShapeType(v104, v21, v108, v109, LOBYTE(v106), v20, v103, v22, v107, v102, v98);
        }
        goto LABEL_61;
    }
    do
    {
      if (v58)
      {
        char v58 = *v56 == 1.0;
        if (v55 == v57) {
          goto LABEL_57;
        }
      }
      else
      {
        char v58 = 0;
        if (v55 == v57) {
          goto LABEL_57;
        }
      }
      v56 += 12;
      BOOL v59 = __OFADD__(v57++, 1);
    }
    while (!v59);
    __break(1u);
LABEL_21:
    if (!v14)
    {
LABEL_22:
      int v15 = *(void **)(v24 + 8);
      uint64_t v110 = *(void *)v24;
      type metadata accessor for UnclippedGradientLayer();
      __int16 v50 = (void *)swift_dynamicCastClassUnconditional();
      uint64_t v60 = *(void *)(v24 + 104);
      int v61 = *(_DWORD *)(v24 + 112);
      unsigned __int8 v62 = *(unsigned char *)(v24 + 116);
      long long v63 = *(_OWORD *)(v24 + 88);
      long long v111 = *(_OWORD *)(v24 + 72);
      long long v112 = v63;
      uint64_t v113 = v60;
      WORD2(v114) = v62;
      LODWORD(v114) = v61;
      uint64_t v64 = *(void *)(v23 + 16);
      if (!v64) {
        goto LABEL_56;
      }
      unint64_t v65 = (float *)(v23 + 44);
      uint64_t v66 = 1;
      char v58 = 1;
      uint64_t v20 = v105;
      do
      {
        if (v58)
        {
          char v58 = *v65 == 1.0;
          if (v64 == v66) {
            goto LABEL_57;
          }
        }
        else
        {
          char v58 = 0;
          if (v64 == v66) {
            goto LABEL_57;
          }
        }
        v65 += 12;
        BOOL v59 = __OFADD__(v66++, 1);
      }
      while (!v59);
      __break(1u);
LABEL_31:
      if (!v14)
      {
LABEL_32:
        int v15 = *(void **)(v24 + 8);
        uint64_t v110 = *(void *)v24;
        type metadata accessor for UnclippedGradientLayer();
        __int16 v50 = (void *)swift_dynamicCastClassUnconditional();
        uint64_t v67 = *(void *)(v24 + 104);
        int v68 = *(_DWORD *)(v24 + 112);
        unsigned __int8 v69 = *(unsigned char *)(v24 + 116);
        long long v70 = *(_OWORD *)(v24 + 88);
        long long v111 = *(_OWORD *)(v24 + 72);
        long long v112 = v70;
        uint64_t v113 = v67;
        WORD2(v114) = v69;
        LODWORD(v114) = v68;
        uint64_t v71 = *(void *)(v23 + 16);
        if (v71)
        {
          unint64_t v72 = (float *)(v23 + 44);
          uint64_t v73 = 1;
          char v58 = 1;
          uint64_t v20 = v105;
          do
          {
            if (v58)
            {
              char v58 = *v72 == 1.0;
              if (v71 == v73) {
                goto LABEL_57;
              }
            }
            else
            {
              char v58 = 0;
              if (v71 == v73) {
                goto LABEL_57;
              }
            }
            v72 += 12;
            BOOL v59 = __OFADD__(v73++, 1);
          }
          while (!v59);
          __break(1u);
LABEL_41:
          if (v14) {
            goto LABEL_42;
          }
LABEL_47:
          int v15 = *(void **)(v24 + 8);
          uint64_t v110 = *(void *)v24;
          type metadata accessor for UnclippedGradientLayer();
          __int16 v50 = (void *)swift_dynamicCastClassUnconditional();
          uint64_t v87 = *(void *)(v24 + 104);
          int v88 = *(_DWORD *)(v24 + 112);
          unsigned __int8 v89 = *(unsigned char *)(v24 + 116);
          long long v90 = *(_OWORD *)(v24 + 88);
          long long v111 = *(_OWORD *)(v24 + 72);
          long long v112 = v90;
          uint64_t v113 = v87;
          WORD2(v114) = v89;
          LODWORD(v114) = v88;
          uint64_t v91 = *(void *)(v23 + 16);
          if (v91)
          {
            uint64_t v92 = (float *)(v23 + 44);
            uint64_t v93 = 1;
            char v58 = 1;
            uint64_t v20 = v105;
            do
            {
              if (v58)
              {
                char v58 = *v92 == 1.0;
                if (v91 == v93) {
                  goto LABEL_57;
                }
              }
              else
              {
                char v58 = 0;
                if (v91 == v93) {
                  goto LABEL_57;
                }
              }
              v92 += 12;
              BOOL v59 = __OFADD__(v93++, 1);
            }
            while (!v59);
            __break(1u);
          }
        }
LABEL_56:
        char v58 = 0;
        uint64_t v20 = v105;
LABEL_57:
        updateShadow(platform:gradientLayer:shadow:opaque:)(&v110, v50, &v111, v58);
LABEL_58:
        outlined release of (PaintType, ShapeType)((uint64_t)&v119);
        if ((*(unsigned char *)(v24 + 117) & 1) == 0) {
          return (id)outlined consume of ShapeType(v104, v21, v108, v109, LOBYTE(v106), v20, v103, v22, v107, v102, v98);
        }
        goto LABEL_59;
      }
    }
LABEL_42:
    uint64_t v74 = v22;
    uint64_t v75 = v16;
    uint64_t v76 = v18;
    uint64_t v77 = v19;
    outlined copy of ShapeType(v104, v21, v108, v109, LOBYTE(v106), v105, v103, v74, v107, v102, v14);
    outlined copy of PaintType(v23, (uint64_t)v15, v75, v17, v76, v77, v20);
    outlined release of (PaintType, ShapeType)((uint64_t)&v119);
    *(void *)&long long v111 = v23;
    *((void *)&v111 + 1) = v15;
    *(void *)&long long v112 = v75;
    *((void *)&v112 + 1) = v17;
    uint64_t v113 = v76;
    uint64_t v114 = v77;
    char v115 = v20;
    BOOL v78 = PaintType.isOpaque.getter();
    outlined consume of PaintType(v23, (uint64_t)v15, v75, v17, v76, v77, v20);
    uint64_t v79 = *(void *)v24;
    if (v78)
    {
      uint64_t v110 = *(void *)v24;
      int v15 = *(void **)(v24 + 8);
      uint64_t v80 = *(void *)(v24 + 104);
      int v81 = *(_DWORD *)(v24 + 112);
      unsigned __int8 v82 = *(unsigned char *)(v24 + 116);
      long long v83 = *(_OWORD *)(v24 + 88);
      long long v111 = *(_OWORD *)(v24 + 72);
      long long v112 = v83;
      uint64_t v113 = v80;
      WORD2(v114) = v82;
      LODWORD(v114) = v81;
      updateShadow(platform:layer:shadow:paintOpacity:path:offset:)(&v110, v15, (uint64_t *)&v111, (uint64_t)v116, 1.0, *(double *)(v24 + 56), *(double *)(v24 + 64));
      uint64_t v20 = v105;
      uint64_t v22 = v100;
      uint64_t v21 = v101;
      if (*(unsigned char *)(v24 + 117)) {
        goto LABEL_59;
      }
    }
    else
    {
      int v15 = *(void **)(v24 + 8);
      long long v99 = *(_OWORD *)(v24 + 72);
      long long v97 = *(_OWORD *)(v24 + 88);
      uint64_t v84 = *(void *)(v24 + 104);
      int v85 = *(_DWORD *)(v24 + 112);
      unsigned __int8 v86 = *(unsigned char *)(v24 + 116);
      objc_msgSend(v15, sel_setShadowPathIsBounds_, 0);
      objc_msgSend(v15, sel_setShadowPath_, 0);
      uint64_t v110 = v79;
      long long v111 = v99;
      long long v112 = v97;
      uint64_t v113 = v84;
      WORD2(v114) = v86;
      LODWORD(v114) = v85;
      uint64_t v22 = v100;
      DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)&v111, v15);
      uint64_t v20 = v105;
      uint64_t v21 = v101;
      if (*(unsigned char *)(v24 + 117)) {
        goto LABEL_59;
      }
    }
    return (id)outlined consume of ShapeType(v104, v21, v108, v109, LOBYTE(v106), v20, v103, v22, v107, v102, v98);
  }
  if (v14 != 3 || v101 | v104 | v108 | v109 | *(void *)&v106 | v105 | v103 | v100 | v107 | v102)
  {
    uint64_t v23 = v119;
    uint64_t v24 = v99;
    switch((char)v125)
    {
      case 1:
      case 5:
        goto LABEL_42;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_31;
      case 4:
        goto LABEL_41;
      default:
        float v25 = *((float *)&v120 + 1);
        int v15 = *(void **)(v99 + 8);
        uint64_t v110 = *(void *)v99;
        uint64_t v26 = *(void *)(v99 + 104);
        int v27 = *(_DWORD *)(v99 + 112);
        unsigned __int8 v28 = *(unsigned char *)(v99 + 116);
        long long v29 = *(_OWORD *)(v99 + 88);
        long long v111 = *(_OWORD *)(v99 + 72);
        long long v112 = v29;
        uint64_t v113 = v26;
        WORD2(v114) = v28;
        LODWORD(v114) = v27;
        double v30 = *(double *)(v99 + 56);
        double v31 = *(double *)(v99 + 64);
        uint64_t v20 = v105;
        outlined copy of ShapeType(v104, v101, v108, v109, LOBYTE(v106), v105, v103, v100, v107, v102, v14);
        updateShadow(platform:layer:shadow:paintOpacity:path:offset:)(&v110, v15, (uint64_t *)&v111, (uint64_t)v116, v25, v30, v31);
        goto LABEL_58;
    }
  }
  uint64_t v42 = v100;
  uint64_t v43 = v101;
  uint64_t v44 = v105;
  uint64_t v45 = v99;
  int v15 = *(void **)(v99 + 8);
  uint64_t v46 = *(unsigned char *)v99 & 3;
  if (v46 == 2
    || (id v47 = objc_msgSend(*(id *)(v99 + 8), sel_delegate)) == 0)
  {
    CoreViewSetShadow(2, v15, 0, 0.0, 0.0, 0.0);
  }
  else
  {
    uint64_t v48 = v47;
    uint64_t v49 = CoreViewResolvedSystem(v46, v47);
    CoreViewSetShadow(v49, v48, 0, 0.0, 0.0, 0.0);
    swift_unknownObjectRelease();
  }
  outlined release of (PaintType, ShapeType)((uint64_t)&v119);
  uint64_t v20 = v44;
  uint64_t v21 = v43;
  uint64_t v22 = v42;
  if ((*(unsigned char *)(v45 + 117) & 1) == 0) {
    return (id)outlined consume of ShapeType(v104, v21, v108, v109, LOBYTE(v106), v20, v103, v22, v107, v102, v98);
  }
LABEL_59:
  if (v98)
  {
    char v94 = v98;
    objc_msgSend(v15, sel_setCornerRadius_, 0.0);
    return (id)outlined consume of ShapeType(v104, v21, v108, v109, LOBYTE(v106), v20, v103, v22, v107, v102, v94);
  }
  else
  {
LABEL_61:
    objc_msgSend(v15, sel_setCornerRadius_, v106);
    unint64_t v96 = (void *)MEMORY[0x263F15A20];
    if ((v20 & 1) == 0) {
      unint64_t v96 = (void *)MEMORY[0x263F15A10];
    }
    return objc_msgSend(v15, sel_setCornerCurve_, *v96);
  }
}

void DisplayList.ViewUpdater.Platform.updateShadowView(_:path:shadow:size:)(uint64_t a1, uint64_t a2, int *a3, CGFloat a4, CGFloat a5)
{
  unsigned int v6 = v5;
  uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  char v15 = *(unsigned char *)(a2 + 32);
  unsigned int v28 = *a3;
  unsigned int v29 = a3[1];
  unsigned int v26 = a3[2];
  unsigned int v27 = a3[3];
  uint64_t v17 = *((void *)a3 + 2);
  uint64_t v16 = *((void *)a3 + 3);
  uint64_t v18 = *((void *)a3 + 4);
  int v19 = a3[10];
  unsigned __int8 v20 = *((unsigned char *)a3 + 44);
  uint64_t v21 = *v6;
  Path.boundingRect.getter();
  v49.origin.double x = 0.0;
  v49.origin.CGFloat y = 0.0;
  v49.size.CGFloat width = a4;
  v49.size.CGFloat height = a5;
  if (CGRectEqualToRect(v48, v49))
  {
    id v22 = *(id *)(a1 + 8);
    _s7SwiftUI4PathV7StorageOWOrTm_0(a2, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    specialized ShapeLayerShadowHelper.visitPaint<A>(_:)(1.0, 1.0, 1.0, 1.0);
    v30.i64[0] = v21;
    v30.i64[1] = (uint64_t)v22;
    uint64_t v31 = v11;
    uint64_t v32 = v12;
    uint64_t v33 = v13;
    uint64_t v34 = v14;
    char v35 = v15;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unsigned int v38 = v28;
    unsigned int v39 = v29;
    unsigned int v40 = v26;
    unsigned int v41 = v27;
    uint64_t v42 = v17;
    uint64_t v43 = v16;
    uint64_t v44 = v18;
    int v45 = v19;
    unsigned __int8 v46 = v20;
    char v47 = 1;
    outlined release of ShapeLayerShadowHelper((uint64_t)&v30);
  }
  else
  {
    uint64_t v23 = *(void **)(a1 + 8);
    CGPathRef v24 = Path.cgPath.getter();
    objc_msgSend(v23, sel_setShadowPath_, v24);

    objc_msgSend(v23, sel_setShadowPathIsBounds_, 0);
    v25.i64[0] = v28;
    v25.i64[1] = v26;
    int8x16_t v30 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v27, v29), 0x20uLL), v25);
    uint64_t v31 = v17;
    uint64_t v32 = v16;
    uint64_t v33 = v18;
    WORD2(v34) = v20;
    LODWORD(v34) = v19;
    DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)&v30, v23);
  }
}

uint64_t outlined release of ShapeLayerShadowHelper(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 48);

  outlined consume of Path.Storage(v2, v3, v4, v5, v6);
  return a1;
}

id specialized ShapeLayerShadowHelper.visitPaint<A>(_:)(float a1, float a2, float a3, float a4)
{
  uint64_t v5 = v4;
  long long v6 = *(_OWORD *)(v4 + 32);
  v61[0] = *(_OWORD *)(v4 + 16);
  v61[1] = v6;
  char v62 = *(unsigned char *)(v4 + 48);
  outlined init with take of Path.Storage((uint64_t)v61, (uint64_t)v63);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v63, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v61, (uint64_t)&v64);
  uint64_t v8 = v64.i64[1];
  uint64_t v7 = v64.i64[0];
  uint64_t v10 = *((void *)&v65 + 1);
  uint64_t v9 = v65;
  uint64_t v12 = *((void *)&v66 + 1);
  *(void *)&double v11 = v66;
  uint64_t v13 = v67;
  unsigned long long v15 = v68;
  uint64_t v14 = v69;
  int v16 = BYTE8(v69);
  v17.i64[0] = LODWORD(a1);
  v17.i64[1] = LODWORD(a3);
  int8x16_t v64 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(a4), LODWORD(a2)), 0x20uLL), v17);
  long long v65 = 0u;
  long long v66 = 0u;
  LOBYTE(v67) = 0;
  unsigned long long v68 = __PAIR128__(v8, v7);
  unsigned long long v69 = __PAIR128__(v10, v9);
  unsigned long long v70 = __PAIR128__(v12, *(unint64_t *)&v11);
  uint64_t v71 = v13;
  unsigned long long v72 = v15;
  uint64_t v73 = v14;
  char v74 = v16;
  double v45 = v11;
  uint64_t v44 = v14;
  if (v16)
  {
    if (v16 == 3
      && !(v8 | v7 | v9 | v10 | *(void *)&v11 | v12 | v13 | (unint64_t)v15 | *((void *)&v15 + 1) | v14))
    {
      uint64_t v52 = v9;
      uint64_t v18 = *(void **)(v5 + 8);
      uint64_t v34 = *(unsigned char *)v5 & 3;
      if (v34 == 2
        || (id v35 = objc_msgSend(*(id *)(v5 + 8), sel_delegate)) == 0)
      {
        CoreViewSetShadow(2, v18, 0, 0.0, 0.0, 0.0);
      }
      else
      {
        id v36 = v35;
        uint64_t v37 = v34;
        unsigned int v38 = v36;
        uint64_t v39 = CoreViewResolvedSystem(v37, v36);
        CoreViewSetShadow(v39, v38, 0, 0.0, 0.0, 0.0);
        swift_unknownObjectRelease();
      }
      outlined release of (PaintType, ShapeType)((uint64_t)&v64);
      uint64_t v9 = v52;
      if ((*(unsigned char *)(v5 + 117) & 1) == 0) {
        return (id)outlined consume of ShapeType(v7, v8, v9, v10, LOBYTE(v45), v12, v13, v15, *((uint64_t *)&v15 + 1), v44, v16);
      }
    }
    else
    {
      uint64_t v18 = *(void **)(v5 + 8);
      uint64_t v60 = *(void *)v5;
      uint64_t v19 = *(void *)(v5 + 104);
      int v20 = *(_DWORD *)(v5 + 112);
      char v21 = *(unsigned char *)(v5 + 116);
      long long v22 = *(_OWORD *)(v5 + 88);
      long long v54 = *(_OWORD *)(v5 + 72);
      long long v55 = v22;
      uint64_t v56 = v19;
      char v58 = v21;
      int v57 = v20;
      char v59 = 0;
      double v23 = *(double *)(v5 + 56);
      double v24 = *(double *)(v5 + 64);
      outlined copy of ShapeType(v7, v8, v9, v10, LOBYTE(v11), v12, v13, v15, *((uint64_t *)&v15 + 1), v14, v16);
      updateShadow(platform:layer:shadow:paintOpacity:path:offset:)(&v60, v18, (uint64_t *)&v54, (uint64_t)v61, a4, v23, v24);
      outlined release of (PaintType, ShapeType)((uint64_t)&v64);
      if ((*(unsigned char *)(v5 + 117) & 1) == 0) {
        return (id)outlined consume of ShapeType(v7, v8, v9, v10, LOBYTE(v45), v12, v13, v15, *((uint64_t *)&v15 + 1), v44, v16);
      }
    }
    objc_msgSend(v18, sel_setCornerRadius_, 0.0);
    return (id)outlined consume of ShapeType(v7, v8, v9, v10, LOBYTE(v45), v12, v13, v15, *((uint64_t *)&v15 + 1), v44, v16);
  }
  int8x16_t v25 = *(void **)(v5 + 8);
  uint64_t v41 = *(void *)(v5 + 72);
  uint64_t v49 = v12;
  uint64_t v26 = v7;
  uint64_t v27 = *(unsigned int *)(v5 + 80);
  float v28 = *(float *)(v5 + 84);
  long long v40 = *(_OWORD *)(v5 + 88);
  uint64_t v47 = v8;
  uint64_t v29 = *(void *)(v5 + 104);
  int v42 = *(_DWORD *)(v5 + 112);
  uint64_t v43 = *(void *)v5;
  uint64_t v51 = v9;
  char v30 = *(unsigned char *)(v5 + 116);
  objc_msgSend(v25, sel_setShadowPathIsBounds_, 1);
  objc_msgSend(v25, sel_setShadowPath_, 0);
  uint64_t v60 = v43;
  unint64_t v31 = v27 | ((unint64_t)COERCE_UNSIGNED_INT(v28 * a4) << 32);
  uint64_t v7 = v26;
  uint64_t v12 = v49;
  *(void *)&long long v54 = v41;
  *((void *)&v54 + 1) = v31;
  long long v55 = v40;
  uint64_t v56 = v29;
  uint64_t v8 = v47;
  char v58 = v30;
  int v57 = v42;
  char v59 = 0;
  DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)&v54, v25);
  uint64_t v9 = v51;
  outlined release of (PaintType, ShapeType)((uint64_t)&v64);
  if ((*(unsigned char *)(v5 + 117) & 1) == 0) {
    return (id)outlined consume of ShapeType(v7, v8, v9, v10, LOBYTE(v45), v12, v13, v15, *((uint64_t *)&v15 + 1), v44, v16);
  }
  objc_msgSend(v25, sel_setCornerRadius_, v45);
  uint64_t v32 = (void *)MEMORY[0x263F15A20];
  if ((v49 & 1) == 0) {
    uint64_t v32 = (void *)MEMORY[0x263F15A10];
  }
  return objc_msgSend(v25, sel_setCornerCurve_, *v32);
}

void DisplayList.ViewUpdater.Platform.setShadow(_:layer:)(uint64_t a1, id a2)
{
  if (*(unsigned char *)(a1 + 45))
  {
    uint64_t v4 = *v2 & 3;
    if (v4 == 2 || (id v5 = objc_msgSend(a2, sel_delegate)) == 0)
    {
      CoreViewSetShadow(2, a2, 0, 0.0, 0.0, 0.0);
    }
    else
    {
      long long v6 = v5;
      uint64_t v7 = CoreViewResolvedSystem(v4, v5);
      CoreViewSetShadow(v7, v6, 0, 0.0, 0.0, 0.0);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    double v9 = *(double *)(a1 + 24);
    double v8 = *(double *)(a1 + 32);
    double v10 = *(double *)(a1 + 16);
    float v12 = *(float *)a1;
    float v11 = *(float *)(a1 + 4);
    uint64_t v13 = *v2 & 3;
    float v15 = *(float *)(a1 + 8);
    float v14 = *(float *)(a1 + 12);
    if (v13 == 2 || (id v16 = objc_msgSend(a2, sel_delegate)) == 0)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      id v20 = (id)specialized ObjectCache.subscript.getter(v12, v11, v15, v14);
      CoreViewSetShadow(2, a2, (uint64_t)v20, v10, v9, v8);
    }
    else
    {
      int8x16_t v17 = v16;
      uint64_t v18 = CoreViewResolvedSystem(v13, v16);
      uint64_t v19 = one-time initialization token for cache;
      swift_unknownObjectRetain();
      if (v19 != -1) {
        swift_once();
      }
      id v20 = (id)specialized ObjectCache.subscript.getter(v12, v11, v15, v14);
      CoreViewSetShadow(v18, v17, (uint64_t)v20, v10, v9, v8);
      swift_unknownObjectRelease_n();
    }
  }
}

id CoreMakeNSShadow(void *a1, double a2, double a3, double a4)
{
  id v7 = a1;
  id v8 = objc_alloc_init((Class)CoreShadowClass());
  objc_msgSend(v8, "setShadowOffset:", a2, a3);
  [v8 setShadowBlurRadius:a4];
  [v8 setShadowColor:v7];

  return v8;
}

id CoreShadowClass()
{
  if (CoreShadowClass_once != -1) {
    dispatch_once(&CoreShadowClass_once, &__block_literal_global_0);
  }
  if (!CoreShadowClass_isValid) {
    [MEMORY[0x263EFF940] raise:@"Invalid shadow class" format:&stru_26FA95DA0];
  }
  unint64_t v0 = (void *)CoreShadowClass_shadowClass;

  return v0;
}

uint64_t CoreViewSetShadow(uint64_t result, void *a2, uint64_t a3, double a4, double a5, double a6)
{
  double v8 = a4;
  double v10 = a2;
  if (result != 2)
  {
    if (result) {
      return result;
    }
    double v10 = (void *)[a2 layer];
  }
  if (a3)
  {
    LODWORD(a4) = 1.0;
    [v10 setShadowOpacity:a4];
    [v10 setShadowColor:a3];
    [v10 setShadowRadius:v8];
    return objc_msgSend(v10, "setShadowOffset:", a5, a6);
  }
  else
  {
    return [v10 setShadowOpacity:0.0];
  }
}

uint64_t type metadata completion function for HierarchicalShapeStyleModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t (*EnvironmentValues.redactionReasons.modify(uint64_t *a1))(uint64_t *a1)
{
  a1[3] = (uint64_t)v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<RedactionReasonsKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      uint64_t v7 = *(void *)(v6 + 72);
    }
    else {
      uint64_t v7 = 0;
    }
    *a1 = v7;
  }
  swift_release_n();
  return EnvironmentValues.redactionReasons.modify;
}

uint64_t instantiation function for generic protocol witness table for DynamicViewContainer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for center()
{
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.center;
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  *(void *)&static Alignment.center = v0;
  *((void *)&static Alignment.center + 1) = static VerticalAlignment.center;
  return result;
}

{
  os_unfair_lock_s *v0;
  void *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  unint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA59458, (uint64_t)&protocol witness table for VerticalAlignment.Center, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static VerticalAlignment.center = 2 * v3 + 3;
  return result;
}

{
  os_unfair_lock_s *v0;
  void *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  unint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA5E4D8, (uint64_t)&protocol witness table for HorizontalAlignment.Center, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static HorizontalAlignment.center = 2 * v3 + 2;
  return result;
}

uint64_t Path.init(roundedRect:cornerRadius:style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>)
{
  char v13 = *a1;
  if (CGRectIsNull(*(CGRect *)&a3))
  {
    uint64_t result = 0;
    char v15 = 6;
    a4 = 0.0;
    a5 = 0.0;
    a6 = 0.0;
  }
  else if (a7 == 0.0 {
         || (v16.origin.double x = a3, v16.origin.y = a4, v16.size.width = a5, v16.size.height = a6, CGRectIsInfinite(v16)))
  }
  {
    char v15 = 0;
    uint64_t result = *(void *)&a3;
  }
  else
  {
    uint64_t result = swift_allocObject();
    *(CGFloat *)(result + 16) = a3;
    *(CGFloat *)(result + 24) = a4;
    *(CGFloat *)(result + 32) = a5;
    *(CGFloat *)(result + 40) = a6;
    char v15 = 2;
    a4 = 0.0;
    *(double *)(result + 48) = a7;
    *(double *)(result + 56) = a7;
    a5 = 0.0;
    a6 = 0.0;
    *(unsigned char *)(result + 64) = v13;
  }
  *(void *)a2 = result;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(unsigned char *)(a2 + 32) = v15;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VariableBlurEffect(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && ((uint64_t v2 = *(void *)(a1 + 8),
         int v3 = *(unsigned __int8 *)(a1 + 16),
         int v4 = *(unsigned __int8 *)(a2 + 16),
         v2 == *(void *)(a2 + 8))
     || ((*(uint64_t (**)(double))(*(void *)v2 + 96))(*(double *)a1) & 1) != 0))
  {
    return v3 ^ v4 ^ 1u;
  }
  else
  {
    return 0;
  }
}

void Namespace.ID.hash(into:)(int a1, Swift::UInt a2)
{
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t type metadata completion function for SecondaryLookupTrackedValue()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TruePreferenceWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t instantiation function for generic protocol witness table for Font.PlatformFontProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for TintAdjustmentMode()
{
  return &type metadata for TintAdjustmentMode;
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - v9);
  *(uint64_t *)((char *)&v16 - v9 + 24) = MEMORY[0x263F8D310];
  unint64_t v11 = lazy protocol witness table accessor for type String and conformance String();
  *uint64_t v10 = countAndFlagsBits;
  v10[1] = (uint64_t)object;
  v10[4] = v11;
  v10[5] = 0;
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 16421;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v10, (uint64_t)v7, type metadata accessor for LocalizedStringKey.FormatArgument);
  unint64_t v13 = *(void *)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, v13);
  }
  unint64_t v15 = *(void *)(v13 + 16);
  unint64_t v14 = *(void *)(v13 + 24);
  if (v15 >= v14 >> 1) {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1, v13);
  }
  *(void *)(v13 + 16) = v15 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v15, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(void *)(v1 + 16) = v13;
  _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
}

__n128 one-time initialization function for defaultValue()
{
  __asm { FMOV            V0.2D, #16.0 }
  static DefaultPaddingKey.defaultuint64_t Value = (__int128)result;
  *(__n128 *)&qword_26B0E8938 = result;
  return result;
}

uint64_t type metadata completion function for ApplyTransitionModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MatchedSharedFrame<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t View.variableBlur(maxRadius:mask:opaque:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  *(double *)uint64_t v5 = a4;
  v5[1] = a1;
  char v6 = a2;
  return View.modifier<A>(_:)(v5, a3, &type metadata for VariableBlurEffect);
}

uint64_t Binding.zip<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = _ViewInputs.base.modify(v5[1], *(void *)(a1 + 8));
  uint64_t v25 = v16;
  uint64_t v26 = v15;
  int8x16_t v17 = (char *)v5 + *(int *)(a2 + 32);
  uint64_t v18 = a1 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v19 = &v14[*(int *)(v12 + 56)];
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v14, v17, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v19, v18, a3);
  type metadata accessor for ZipLocation();
  swift_getWitnessTable();
  type metadata accessor for LocationBox();
  v27[0] = v26;
  v27[1] = v25;
  swift_retain();
  swift_retain();
  id v20 = (uint64_t *)LocationBox.__allocating_init(_:)((uint64_t)v27);
  uint64_t v21 = *v20;
  *(void *)a4 = *v5;
  *((void *)a4 + 1) = v20;
  uint64_t v22 = *(void *)(v21 + 88);
  uint64_t v23 = type metadata accessor for Binding();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(&a4[*(int *)(v23 + 32)], v14, v22);
  return swift_retain();
}

uint64_t type metadata accessor for ZipLocation()
{
  return __swift_instantiateGenericMetadata();
}

void one-time initialization function for adjustsForOversizedCharacters()
{
  static Text.Sizing.adjustsForOversizedCharacters = 2;
  qword_268EF02C8 = MEMORY[0x263F8EE78];
}

uint64_t type metadata accessor for PeriodicTimelineSchedule(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for PeriodicTimelineSchedule);
}

uint64_t one-time initialization function for vertical()
{
  uint64_t result = AGMakeUniqueID();
  static ScrollCoordinateSpace.vertical = result;
  return result;
}

uint64_t one-time initialization function for kitAttachment()
{
  uint64_t result = MEMORY[0x24C522820](0x686361747441534ELL, 0xEC000000746E656DLL);
  static NSAttributedStringKey.kitAttachment = result;
  return result;
}

uint64_t type metadata completion function for AutomaticStyleOverrideModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ResolvedTextFilter()
{
  uint64_t result = type metadata accessor for ResolvedTextHelper(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double EnvironmentValues.bodyHeadOutdent.getter(double (*a1)(uint64_t), double (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    double v5 = a2(v7, &v9);
  }
  swift_release_n();
  return v5;
}

uint64_t ViewTraitCollection.groupDepth.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  v4[1] = *MEMORY[0x263EF8340];
  a3(v4);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t DepthTrait.value.getter@<X0>(void *a1@<X8>)
{
  if (*v1 == *MEMORY[0x263F288F8])
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v3 = *(void **)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, (uint64_t)v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
LABEL_11:
    unint64_t v13 = v3[2];
    unint64_t v12 = v3[3];
    if (v13 >= v12 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v3);
    }
    type metadata accessor for _UnaryViewAdaptor<EmptyView>(0, (unint64_t *)&lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<DepthTraitKey>, (uint64_t)&type metadata for DepthTraitKey, (uint64_t)&protocol witness table for DepthTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    uint64_t v19 = v14;
    id v20 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    *(void *)&long long v18 = v5;
    v3[2] = v13 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v18, (uint64_t)&v3[5 * v13 + 4]);
LABEL_18:
    *a1 = v3;
    return result;
  }
  uint64_t v6 = v3[2];
  if (!v6)
  {
LABEL_10:
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    if (v8 >= v3[2])
    {
      __break(1u);
      goto LABEL_20;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v7 + 4], (uint64_t)&v18);
    uint64_t v9 = v19;
    uint64_t v10 = v20;
    __swift_project_boxed_opaque_existential_1(&v18, v19);
    unint64_t v11 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v10[1])(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
    if (v11 == &type metadata for DepthTraitKey) {
      break;
    }
    ++v8;
    v7 += 5;
    if (v6 == v8) {
      goto LABEL_10;
    }
  }
  *(void *)&long long v18 = v5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
  }
  if (v8 < v3[2])
  {
    uint64_t v16 = v3[v7 + 7];
    uint64_t v17 = v3[v7 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v7 + 4], v16);
    uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v17 + 24))(&v18, MEMORY[0x263F8D6C8], v16, v17);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2, void (*a3)(void *__return_ptr, void))
{
  v4[1] = *MEMORY[0x263EF8340];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t SectionedTrait.value.getter@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == a1)
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(void **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v4 = v3[2];
    if (!v4)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
      }
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v3);
      }
      type metadata accessor for _UnaryViewAdaptor<EmptyView>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionedTraitKey>, (uint64_t)&type metadata for IsSectionedTraitKey, (uint64_t)&protocol witness table for IsSectionedTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      uint64_t v17 = v12;
      long long v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v16) = 1;
      v3[2] = v11 + 1;
      uint64_t result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v3[5 * v11 + 4]);
LABEL_17:
      *a2 = v3;
      return result;
    }
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    if (v6 >= v3[2])
    {
      __break(1u);
      goto LABEL_19;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v5 + 4], (uint64_t)&v16);
    uint64_t v7 = v17;
    unint64_t v8 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    uint64_t v9 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v8[1])(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    if (v9 == &type metadata for IsSectionedTraitKey) {
      break;
    }
    ++v6;
    v5 += 5;
    if (v4 == v6) {
      goto LABEL_9;
    }
  }
  LOBYTE(v16) = 1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
  }
  if (v6 < v3[2])
  {
    uint64_t v14 = v3[v5 + 7];
    uint64_t v15 = v3[v5 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v5 + 4], v14);
    uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v15 + 24))(&v16, MEMORY[0x263F8D4F8], v14, v15);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

void type metadata accessor for _UnaryViewAdaptor<EmptyView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys;
  if (!lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys;
  if (!lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys;
  if (!lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys;
  if (!lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys;
  if (!lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityValueStorage()
{
  return &type metadata for AccessibilityValueStorage;
}

uint64_t type metadata completion function for _StrokedShape()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DefaultAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

double one-time initialization function for invalidValue()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v0 = static LayoutComputer.defaultValue;
  uint64_t v1 = *(void *)algn_26B0F4178;
  uint64_t v2 = one-time initialization token for invalidValue;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  double result = *(double *)&static CGSize.invalidValue;
  static ViewDimensions.invaliduint64_t Value = (uint64_t)v0;
  *(void *)algn_26B0F2B48 = v1;
  xmmword_26B0F2B50 = static CGSize.invalidValue;
  xmmword_26B0F2B60 = static CGSize.invalidValue;
  return result;
}

{
  double result;

  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  double result = *(double *)&static CGSize.invalidValue;
  static SizeThatFitsMeasurer.invaliduint64_t Value = static CGSize.invalidValue;
  return result;
}

Swift::Void __swiftcall AGSubgraphRef.willInvalidate(isInserted:)(Swift::Bool isInserted)
{
}

ValueMetadata *type metadata accessor for ViewTraitKeys()
{
  return &type metadata for ViewTraitKeys;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in RoundedRectangle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for GroupElementsOfContent.Storage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

double *CanvasSymbols.SymbolSize.value.getter@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    uint64_t result = (double *)AGGraphGetValue();
    double v4 = *result;
    uint64_t v5 = *((void *)result + 1);
    double v6 = *result;
    uint64_t v7 = v5;
LABEL_10:
    *a2 = v4;
    *((void *)a2 + 1) = v5;
    a2[2] = v6;
    *((void *)a2 + 3) = v7;
    return result;
  }
  uint64_t v8 = *(void *)AGGraphGetValue();
  uint64_t Value = (double *)AGGraphGetValue();
  double v6 = *Value;
  uint64_t v7 = *((void *)Value + 1);
  uint64_t v10 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_9;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_9:
    double v12 = v6;
    char v13 = 0;
    uint64_t v14 = v7;
    char v15 = 0;
    double v4 = (*(double (**)(double *))(*(void *)v8 + 120))(&v12);
    uint64_t v5 = v11;
    uint64_t result = (double *)swift_release();
    goto LABEL_10;
  }
  uint64_t result = (double *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double *static AnyTransition.scale(scale:anchor:)(double a1, double a2, double a3)
{
  type metadata accessor for TransitionBox<ScaleTransition>();
  uint64_t result = (double *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void type metadata accessor for TransitionBox<ScaleTransition>()
{
  if (!lazy cache variable for type metadata for TransitionBox<ScaleTransition>)
  {
    lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
    unint64_t v0 = type metadata accessor for TransitionBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<ScaleTransition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition;
  if (!lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleTransition and conformance ScaleTransition);
  }
  return result;
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA16RedactionReasonsVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<RedactionReasons>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for RedactionReasons);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for Font.TextStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

Swift::Void __swiftcall _ViewListCountInputs.resetCurrentStyleableView()()
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, 0);
  swift_release();
}

void type metadata accessor for _DictionaryStorage<String, CAPresentationModifier>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, CAPresentationModifier>)
  {
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for CAPresentationModifier);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, CAPresentationModifier>);
    }
  }
}

uint64_t type metadata completion function for ArrayAnchorBox()
{
  return swift_initClassMetadata2();
}

{
  return type metadata completion function for ArrayAnchorBox();
}

uint64_t one-time initialization function for v4_4()
{
  uint64_t result = swiftUI_v4_4_os_versions();
  static Semantics.v4_4 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v4_4_os_versions()
{
  return 0x7E62300FFFFFFFFLL;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FillShapeView<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a5(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

uint64_t VisualEffect.rendererEffect<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v9 = *(void *)(a3 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  double v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v15(0, v13, v14, v10);
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  id v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, a3, v18);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v20, v12, a3);
  swift_getWitnessTable();
  VisualEffect.concat<A>(_:)((uint64_t)v20, a2, v16, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

{
  return VisualEffect.rendererEffect<A>(_:)(a1, a2, a3, a4, a5);
}

uint64_t get_witness_table_7SwiftUI12VisualEffectRzs8SendableRd__AA08RendererD0Rd__r__lAA08CombinedcD033_9FFF1526AA410727EB04F8ADBE7663C7LLVyxAA0fcD0AFLLVyqd__GGAaBHPyHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  int v26 = *((_DWORD *)a2 + 20);
  int v38 = *a1;
  int v14 = v38;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  type metadata accessor for CombinedVisualEffect();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  long long v24 = *(_OWORD *)(a2 + 7);
  long long v25 = *(_OWORD *)(a2 + 5);
  uint64_t v20 = a2[9];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:), a6, &v37);
  uint64_t v28 = v15;
  LODWORD(v29) = v16;
  uint64_t v30 = v17;
  uint64_t v31 = v18;
  uint64_t v32 = v19;
  long long v33 = v25;
  long long v34 = v24;
  uint64_t v35 = v20;
  int v36 = v26;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a5;
  *(void *)(v21 + 24) = a6;
  *(void *)(v21 + 32) = a7;
  *(void *)(v21 + 40) = a8;
  *(_DWORD *)(v21 + 48) = v14;
  *(void *)(v21 + 56) = a3;
  *(void *)(v21 + 64) = a4;
  uint64_t v22 = *(void (**)(int *, uint64_t *, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(a8 + 16);
  swift_retain();
  v22(&v37, &v28, partial apply for closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:), v21, a6, a8);
  return swift_release();
}

uint64_t protocol witness for static VisualEffect._makeVisualEffect(effect:inputs:body:) in conformance RendererVisualEffect<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for RendererVisualEffect, (void (*)(uint64_t))partial apply for closure #1 in static RendererVisualEffect._makeVisualEffect(effect:inputs:body:), (uint64_t (*)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t), void (*a8)(uint64_t), uint64_t (*a9)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = *a2;
  int v15 = *((_DWORD *)a2 + 2);
  uint64_t v16 = a2[2];
  int v17 = *((_DWORD *)a2 + 20);
  LODWORD(v25) = *a1;
  a7(255, a5, a6);
  type metadata accessor for _GraphValue();
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  long long v22 = *(_OWORD *)(a2 + 7);
  long long v23 = *(_OWORD *)(a2 + 5);
  uint64_t v20 = a2[9];
  _GraphValue.subscript.getter(a8, a5, v34);
  uint64_t v25 = v14;
  int v26 = v15;
  uint64_t v27 = v16;
  uint64_t v28 = v18;
  uint64_t v29 = v19;
  long long v30 = v23;
  long long v31 = v22;
  uint64_t v32 = v20;
  int v33 = v17;
  return a9(v34, &v25, a3, a4, a5, a6);
}

uint64_t type metadata accessor for RendererVisualEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  int v17 = *(_DWORD *)(a2 + 80);
  v33[1] = a3;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a9;
  type metadata accessor for CombinedVisualEffect();
  type metadata accessor for _GraphValue();
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v19 = *(void *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 56);
  long long v23 = *(_OWORD *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:), a6, v33);
  uint64_t v24 = v14;
  LODWORD(v25) = v15;
  uint64_t v26 = v16;
  uint64_t v27 = v18;
  uint64_t v28 = v19;
  long long v29 = v23;
  long long v30 = v22;
  uint64_t v31 = v20;
  int v32 = v17;
  return (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(v33, &v24, a4, a5, a6, a8);
}

uint64_t type metadata accessor for CombinedVisualEffect()
{
  return swift_getGenericMetadata();
}

uint64_t VisualEffect.concat<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  double v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return CombinedVisualEffect.init(first:second:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t CombinedVisualEffect.init(first:second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for CombinedVisualEffect();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)(a1, *(_DWORD *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2, *(void *)(v2 + 40));
}

uint64_t closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  int v11 = *((_DWORD *)a1 + 2);
  uint64_t v12 = a1[2];
  int v13 = *((_DWORD *)a1 + 6);
  int v14 = *((_DWORD *)a1 + 7);
  int v32 = *((_DWORD *)a1 + 8);
  uint64_t v15 = a1[5];
  uint64_t v16 = a1[6];
  int v17 = *((_DWORD *)a1 + 15);
  int v26 = *((_DWORD *)a1 + 14);
  int v27 = *((_DWORD *)a1 + 9);
  int v24 = *((_DWORD *)a1 + 17);
  int v25 = *((_DWORD *)a1 + 16);
  int v22 = *((_DWORD *)a1 + 19);
  int v23 = *((_DWORD *)a1 + 18);
  int v21 = *((_DWORD *)a1 + 20);
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v39 = a9;
  LODWORD(v56) = a2;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), a5, &v35);
  int v18 = v35;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v56 = v10;
  int v57 = v11;
  uint64_t v58 = v12;
  int v59 = v13;
  int v60 = v14;
  int v62 = v27;
  uint64_t v63 = v15;
  uint64_t v64 = v16;
  int v65 = v26;
  int v66 = v17;
  int v67 = v25;
  int v68 = v24;
  int v69 = v23;
  int v70 = v22;
  int v71 = v21;
  int v34 = v18;
  uint64_t v40 = v10;
  int v41 = v11;
  uint64_t v42 = v12;
  int v43 = v13;
  int v44 = v14;
  int v45 = 0;
  int v46 = v27;
  uint64_t v47 = v15;
  uint64_t v48 = v16;
  int v49 = v26;
  int v50 = v17;
  int v51 = v25;
  int v52 = v24;
  int v53 = v23;
  int v54 = v22;
  int v55 = v21;
  uint64_t v19 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v19(&v34, &v40, a3, a4, a5, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v61 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a8, (uint64_t)&v56);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

__CFString *one-time initialization function for _textScale()
{
  static NSAttributedStringKey._textScale = @"NSTextScale";
  return @"NSTextScale";
}

unint64_t instantiation function for generic protocol witness table for Capsule(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Capsule and conformance Capsule();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Capsule and conformance Capsule();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Capsule and conformance Capsule()
{
  unint64_t result = lazy protocol witness table cache variable for type Capsule and conformance Capsule;
  if (!lazy protocol witness table cache variable for type Capsule and conformance Capsule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule and conformance Capsule);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Capsule and conformance Capsule;
  if (!lazy protocol witness table cache variable for type Capsule and conformance Capsule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule and conformance Capsule);
  }
  return result;
}

uint64_t type metadata accessor for ConcatenatedCollectionIndex()
{
  return swift_getGenericMetadata();
}

uint64_t ViewTraitCollection.isSectionHeader.getter()
{
  return ViewTraitCollection.isSectioned.getter((uint64_t (*)(void, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:));
}

uint64_t ViewTraitCollection.isSectioned.getter()
{
  return ViewTraitCollection.isSectioned.getter((uint64_t (*)(void, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:));
}

uint64_t ViewTraitCollection.isEmptyView.getter()
{
  return ViewTraitCollection.isSectioned.getter((uint64_t (*)(void, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:));
}

ValueMetadata *type metadata accessor for SymbolRenderingMode.Storage()
{
  return &type metadata for SymbolRenderingMode.Storage;
}

uint64_t EllipticalGradient.init(colors:center:startRadiusFraction:endRadiusFraction:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  return EllipticalGradient.init(colors:center:startRadiusFraction:endRadiusFraction:)((uint64_t (*)(void))specialized Gradient.init(colors:), a1, a2, a3, a4, a5);
}

uint64_t base witness table accessor for Equatable in AnimatableArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t Transaction.animationReason.setter(unint64_t a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1 | ((HIDWORD(a1) & 1) << 32));
  return swift_release();
}

void type metadata accessor for TypedElement<TransactionPropertyKey<AnimationReasonKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationReasonKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationReasonKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationReasonKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

uint64_t assignWithCopy for NamedCoordinateSpace(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of CoordinateSpace.Name(a1);
    if (*((unsigned char *)a2 + 40))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t one-time initialization function for firstTextBaseline()
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  unint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA59348, (uint64_t)&protocol witness table for VerticalAlignment.FirstTextBaseline, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static VerticalAlignment.firstTextBaseline = 2 * v3 + 3;
  return result;
}

uint64_t one-time initialization function for lastTextBaseline()
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  unint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA59310, (uint64_t)&protocol witness table for VerticalAlignment.LastTextBaseline, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static VerticalAlignment.lastTextBaseline = 2 * v3 + 3;
  return result;
}

void storeEnumTagSinglePayload for _LayoutRoot(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

id ResolvedStyledText.layers(for:renderer:deviceScale:)(uint64_t a1, double a2, double a3, double a4)
{
  id v5 = ResolvedStyledText.makeRBDisplayList(for:renderer:deviceScale:)(a1, a2, a3, a4);
  if (!ResolvedStyledText.needsStyledRendering.getter()) {
    return 0;
  }
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63878]), sel_init);
  if (one-time initialization token for foregroundKeyColorAnyAlpha != -1) {
    swift_once();
  }
  LODWORD(v8) = HIDWORD(static RBColor.foregroundKeyColorAnyAlpha);
  LODWORD(v7) = static RBColor.foregroundKeyColorAnyAlpha;
  LODWORD(v9) = dword_26B111980;
  LODWORD(v10) = dword_26B111984;
  objc_msgSend(v6, sel_addConditionWithFillColor_colorSpace_, 2, v7, v8, v9, v10);
  id v11 = objc_msgSend(v6, sel_copyFilteredDisplayList_, v5);
  id v30 = v11;
  if (objc_msgSend(v11, sel_isEmpty)) {
    id v11 = 0;
  }
  else {
    swift_unknownObjectRetain();
  }
  uint64_t v13 = *(void *)(*(void *)(v4 + 264) + 16);
  if (v13)
  {
    uint64_t v14 = 0;
    int v15 = *MEMORY[0x263F638E0];
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    do
    {
      objc_msgSend(v6, sel_removeAll, v30);
      *(float *)&double v18 = (float)v14 * 0.00097656;
      LODWORD(v19) = -1.0;
      LODWORD(v20) = -1.0;
      LODWORD(v21) = v15;
      objc_msgSend(v6, sel_addConditionWithFillColor_colorSpace_, 2, v19, v20, v18, v21);
      id v22 = objc_msgSend(v6, sel_copyFilteredDisplayList_, v5);
      if ((objc_msgSend(v22, sel_isEmpty) & 1) == 0)
      {
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        }
        unint64_t v24 = v16[2];
        unint64_t v23 = v16[3];
        if (v24 >= v23 >> 1) {
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v16);
        }
        v16[2] = v24 + 1;
        int v17 = &v16[2 * v24];
        v17[4] = v14;
        v17[5] = v22;
      }
      ++v14;
      swift_unknownObjectRelease();
    }
    while (v13 != v14);
  }
  objc_msgSend(v6, sel_removeAll, v30);
  if (one-time initialization token for keyColorAnyAlpha != -1) {
    swift_once();
  }
  LODWORD(v26) = HIDWORD(static RBColor.keyColorAnyAlpha);
  LODWORD(v25) = static RBColor.keyColorAnyAlpha;
  LODWORD(v27) = dword_26B111960;
  LODWORD(v28) = unk_26B111964;
  objc_msgSend(v6, sel_addConditionWithFillColor_colorSpace_, 2, v25, v26, v27, v28);
  objc_msgSend(v6, sel_setInvertsResult_, 1);
  unsigned __int8 v29 = objc_msgSend(objc_msgSend(v6, sel_copyFilteredDisplayList_, v5), sel_isEmpty);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (v29) {
    swift_unknownObjectRelease();
  }
  return v11;
}

void type metadata accessor for (Int, RBDisplayListContents)()
{
  if (!lazy cache variable for type metadata for (Int, RBDisplayListContents))
  {
    type metadata accessor for RBDisplayListContents();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, RBDisplayListContents));
    }
  }
}

id ResolvedStyledText.makeRBDisplayList(for:renderer:deviceScale:)(uint64_t a1, double a2, double a3, double a4)
{
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  objc_msgSend(v9, sel_setDefaultColorSpace_, 1);
  objc_msgSend(v9, sel_setDeviceScale_, a4);
  LODWORD(v10) = 1.0;
  id v11 = objc_msgSend(v9, sel_beginCGContextWithAlpha_, v10);
  id v12 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v11);
  objc_msgSend(v12, sel_push);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v13 = static TextDrawingContext.shared;
  if (v4[27])
  {
    swift_retain();
    BOOL v14 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    BOOL v14 = 0;
  }
  (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t, double, double, double, double, double, double))(*v4 + 288))(1, v14, v13, a1, 0.0, 0.0, a2, a3, a2, a3);
  swift_release();
  [v12 pop];

  objc_msgSend(v9, sel_endCGContext);
  id v15 = objc_msgSend(v9, sel_moveContents);

  return v15;
}

Swift::UInt PropertyList.override(with:)(Swift::UInt result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v4 = (void *)*v1;
  if (v4)
  {
    if (result)
    {
      if (v4[3])
      {
        type metadata accessor for TypedElement<EmptyKey>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EmptyKey>, (uint64_t)&type metadata for EmptyKey, (uint64_t)&protocol witness table for EmptyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
        swift_allocObject();
        swift_retain();
        uint64_t result = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v3, (uint64_t)v4).value;
        uint64_t v3 = result;
      }
      else
      {
        uint64_t v5 = v4[4];
        id v6 = *(uint64_t (**)(uint64_t, uint64_t))(*v4 + 216);
        swift_retain();
        uint64_t v7 = swift_retain();
        uint64_t v8 = v6(v7, v5);
        swift_release();
        swift_release();
        uint64_t result = swift_release();
        uint64_t v3 = v8;
      }
    }
    else
    {
      uint64_t v3 = (uint64_t)v4;
    }
  }
  else
  {
    uint64_t result = swift_retain();
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t static ScrapeableAttachmentViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unsigned char *))
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  int v8 = *(_DWORD *)(a2 + 56);
  int v23 = *(_DWORD *)(a2 + 60);
  int8x16_t v24 = *(int8x16_t *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v22 = *(_OWORD *)(a2 + 24);
  if ((BYTE12(v22) & 0x20) == 0) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v7 + 16);
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = 32;
  while (*(ValueMetadata **)(v7 + v11) != &type metadata for DisplayList.Key)
  {
    v11 += 16;
    if (!--v10) {
      goto LABEL_10;
    }
  }
  if ((HIDWORD(*(_OWORD *)(a2 + 24)) & 0x2000) == 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v20 = AGMakeUniqueID();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v13 = specialized find<A>(_:key:)(v3);
    if (v13) {
      unsigned int v14 = *(_DWORD *)(v13 + 72);
    }
    else {
      unsigned int v14 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    *(_DWORD *)double v25 = OffsetAttribute2;
    *(int32x2_t *)&v25[4] = vzip1_s32(*(int32x2_t *)v24.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
    int v26 = v23;
    unint64_t v27 = __PAIR64__(v14, v20);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    uint64_t v17 = swift_retain();
    uint64_t v18 = specialized find<A>(_:key:)(v17);
    if (!v18 || (Swift::UInt value = v3, *(_DWORD *)(v18 + 72) != v20))
    {
      type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>();
      *(_DWORD *)(swift_allocObject() + 72) = v20;
      Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _ViewInputs.ScrapeableParentID, 0, v3).value;
    }
    swift_release();
    uint64_t v3 = value;
  }
  else
  {
LABEL_10:
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(void *)double v25 = v3;
  *(_DWORD *)&v25[8] = v4;
  unint64_t v27 = v5;
  long long v28 = v22;
  uint64_t v29 = v6;
  uint64_t v30 = v7;
  int v31 = v8;
  int v32 = v23;
  int8x16_t v33 = v24;
  int v34 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, v25);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment;
  if (!lazy protocol witness table cache variable for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment);
  }
  return result;
}

void type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>()
{
  if (!lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>)
  {
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>);
    }
  }
}

uint64_t type metadata completion function for Text.ResolvedString()
{
  uint64_t result = type metadata accessor for Text.Style(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double static Font.Weight.heavy.getter()
{
  return 0.56;
}

uint64_t type metadata completion function for _MatchedGeometryEffect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SpacerLayoutComputer.Engine()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void static SymbolRenderingMode.hierarchical.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static SymbolRenderingMode.multicolor.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityTraits.startsMediaSession.getter(void *a1@<X8>)
{
  *a1 = 2048;
}

uint64_t type metadata completion function for OffsetShape()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceValueAttribute<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

void storeEnumTagSinglePayload for Group(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

void *assignWithCopy for SafeAreaInsets(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t one-time initialization function for identity()
{
  type metadata accessor for TransitionBox<IdentityTransition>();
  uint64_t result = swift_allocObject();
  static AnyTransition.identitCGFloat y = result;
  return result;
}

void type metadata accessor for TransitionBox<IdentityTransition>()
{
  if (!lazy cache variable for type metadata for TransitionBox<IdentityTransition>)
  {
    unint64_t v0 = type metadata accessor for TransitionBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<IdentityTransition>);
    }
  }
}

uint64_t type metadata completion function for ResolvableTextSegmentAttribute.Value()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static ToggleState.stateFor<A, B>(item:in:)@<X0>(char *a1@<X8>)
{
  uint64_t result = Sequence.allSatisfy(_:)();
  if (result)
  {
    char v3 = 0;
  }
  else
  {
    MEMORY[0x270FA5388](result);
    uint64_t result = Sequence.allSatisfy(_:)();
    if (result) {
      char v3 = 1;
    }
    else {
      char v3 = 2;
    }
  }
  *a1 = v3;
  return result;
}

uint64_t type metadata completion function for AnimatorState()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityTransition()
{
  return &type metadata for IdentityTransition;
}

uint64_t AnyTransition.combined(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  uint64_t v2 = *(uint64_t (**)(uint64_t *, void *, _UNKNOWN **))(*(void *)a2 + 80);
  swift_retain();
  uint64_t result = v2(&v5, &unk_26FA48050, &protocol witness table for AnyTransition.FirstVisitor);
  uint64_t v4 = v6;
  if (v6)
  {
    swift_release();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for KeyframeTrackContentBuilder.Conditional()
{
  uint64_t result = type metadata accessor for KeyframeTrackContentBuilder.Conditional.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for KeyframeTrackContentBuilder.Conditional.Storage()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for DynamicContainerInfo()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for GestureResponder()
{
  return swift_initClassMetadata2();
}

unint64_t instantiation function for generic protocol witness table for _AspectRatioLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for RoundedRectangle._Inset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset);
  }
  return result;
}

double SectionAccumulator.formResult(from:listAttribute:includeEmptySectionsIf:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  outlined destroy of ViewList?(v5 + 24);
  outlined init with copy of AnyTrackedValue((uint64_t)a1, v5 + 24);
  specialized static Update.begin()();
  uint64_t v17 = 0;
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  uint64_t v15 = 2;
  v14[2] = v5;
  v14[3] = a3;
  v14[4] = a4;
  (*(void (**)(uint64_t *, uint64_t *, unint64_t, uint64_t *, uint64_t (*)(), void *, uint64_t, uint64_t))(v11 + 48))(&v17, &v15, a2 | ((HIDWORD(a2) & 1) << 32), &v16, partial apply for closure #1 in SectionAccumulator.formResult(from:listAttribute:includeEmptySectionsIf:), v14, v10, v11);
  swift_bridgeObjectRelease();
  if (*(void *)(v5 + 16) < *(void *)(v5 + 80)) {
    SectionAccumulator.appendImplicitSection()();
  }
  if (!*(void *)(*(void *)(v5 + 72) + 16))
  {
    if (*(uint64_t *)(v5 + 80) < 1)
    {
      uint64_t v12 = MEMORY[0x263F8EE78];
    }
    else
    {
      type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.Item>);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_2461B9DC0;
      static SectionAccumulator.Item.implicitSentinel(_:contentSubgraph:)(a1, 0, v12 + 32);
    }
    swift_bridgeObjectRelease();
    *(void *)(v5 + 72) = v12;
  }
  static Update.end()();
  outlined destroy of ViewList?(v5 + 24);
  double result = 0.0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(void *)(v5 + 56) = 0;
  return result;
}

uint64_t outlined destroy of ViewList?(uint64_t a1)
{
  type metadata accessor for [Scrollable](0, &lazy cache variable for type metadata for ViewList?, (unint64_t *)&lazy cache variable for type metadata for ViewList, (uint64_t)&protocol descriptor for ViewList, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicViewContainer<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata completion function for LinkDestination.Configuration()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t View.fontDesign(_:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = v3;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.fontDesign(_:), v5, a2);
  swift_release();

  return swift_release();
}

Swift::Void __swiftcall ScrollGeometry.translate(by:limit:)(CGSize by, CGSize limit)
{
  double v3 = v2[1];
  double v4 = v2[7] + limit.width - v2[8];
  double v5 = *v2 + by.width;
  if (v4 < 0.0) {
    double v4 = 0.0;
  }
  double v6 = v2[4];
  double v7 = -v2[5];
  if (v5 >= v7) {
    double v7 = v5;
  }
  if (v4 >= v7) {
    double v4 = v7;
  }
  double v8 = v2[11];
  double v9 = v5 - *v2;
  double v10 = v3 - v3;
  double v11 = v4 - v5;
  double v12 = v2[6] + limit.height - v2[9];
  double v13 = v3 + by.height;
  double v14 = v13 - v3;
  if (v12 < 0.0) {
    double v12 = 0.0;
  }
  double v15 = -v6;
  if (v13 >= -v6) {
    double v15 = v13;
  }
  if (v12 >= v15) {
    double v12 = v15;
  }
  v2[10] = v4 - v4 + v4 - v4 + v2[10] + v9 + v11;
  v2[11] = v14 + v10 + v10 + v8 + v12 - v13;
  *uint64_t v2 = v4;
  v2[1] = v12;
}

uint64_t type metadata completion function for Text.Resolved()
{
  uint64_t result = type metadata accessor for Text.Style(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in InternalCustomAnimationModifiedContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in ConcatenatedCollectionIndex<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in ConcatenatedCollection<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ConcatenatedCollection<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in CountingIndex<A>()
{
  return swift_getWitnessTable();
}

uint64_t DisplayList.ViewUpdater.__deallocating_deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  unint64_t v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void storeEnumTagSinglePayload for CombiningTransition(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            int8x16_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            int v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

uint64_t View.paragraphTypesetting(_:isEnabled:)(char *a1, char a2, uint64_t a3)
{
  char v5 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = a2;
  *(unsigned char *)(v7 + 17) = v5;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.textScale(_:isEnabled:), v7, a3);
  swift_release();

  return swift_release();
}

void PlatformDrawableOptions.update(rbLayer:)()
{
  unsigned int v1 = *(_DWORD *)(v0 + 12);
  uint64_t v2 = *(char *)(v0 + 16);
  self;
  double v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v4 = RasterizationOptions.resolvedColorMode.getter();
  id v5 = v3;
  objc_msgSend(v5, sel_setColorMode_, v4);
  objc_msgSend(v5, sel_setRendersAsynchronously_, (v1 >> 2) & 1);
  objc_msgSend(v5, sel_setMaxDrawableCount_, v2);
  objc_msgSend(v5, sel_setAllowsDisplayCompositing_, (v1 >> 3) & 1);
  objc_msgSend(v5, sel_setAllowsPackedDrawable_, (v1 >> 5) & 1);
}

uint64_t RasterizationOptions.resolvedColorMode.getter()
{
  if ((*(unsigned char *)(v0 + 8) & 1) == 0) {
    return *(unsigned int *)(v0 + 4);
  }
  int v1 = *(_DWORD *)(v0 + 12);
  unsigned int v2 = (v1 << 25 >> 31) & 9;
  if ((v1 & 0x40) != 0) {
    int v3 = 10;
  }
  else {
    int v3 = 1;
  }
  if ((v1 & 0x40) != 0) {
    unsigned int v4 = 10;
  }
  else {
    unsigned int v4 = 2;
  }
  if (*(unsigned char *)v0 == 1) {
    unsigned int v4 = v3;
  }
  if (*(unsigned char *)v0) {
    return v4;
  }
  else {
    return v2;
  }
}

double one-time initialization function for defaultValue()
{
  void (*v0)(double *__return_ptr);
  void *v1;
  double result;
  double v3[3];

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = *(void (**)(double *__return_ptr))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x70);
  int v1 = static CoreGlue.shared;
  v0(v3);

  uint64_t result = v3[0];
  static ImplicitRootType.defaultuint64_t Value = *(_OWORD *)v3;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461B9DC0;
  *(_WORD *)(v0 + 32) = 0;
  *(_OWORD *)(v0 + 40) = xmmword_2461C6A90;
  uint64_t result = 0.0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(unsigned char *)(v0 + 120) = 0;
  *(_DWORD *)(v0 + 124) = 1065353216;
  *(void *)(v0 + 128) = 0;
  *(unsigned char *)(v0 + 136) = -1;
  *(void *)(v0 + 144) = MEMORY[0x263F8EE78];
  static _ShapeStyle_Pack.defaultuint64_t Value = v0;
  return result;
}

{
  double result;

  qword_268EF5D20 = 0;
  uint64_t result = 0.0;
  static EnvironmentValues.AccessibilityTextAttributeResolverKey.defaultuint64_t Value = 0u;
  *(_OWORD *)algn_268EF5D10 = 0u;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  double result;
  unsigned char v5[296];
  unsigned char __src[296];

  type metadata accessor for EmptyGesture<()>(0, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for EmptyGesture);
  int v1 = v0;
  _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v5);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v5, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  unsigned int v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), __src, 0x121uLL);
  int v3 = *MEMORY[0x263F288F8];
  LOBYTE(static GestureDebug.Data.defaultValue) = 0;
  *((void *)&static GestureDebug.Data.defaultValue + 1) = v1;
  LOWORD(xmmword_268EFAF28) = 768;
  *(void *)((char *)&xmmword_268EFAF28 + 4) = v3;
  uint64_t result = 0.0;
  xmmword_268EFAF38 = 0u;
  xmmword_268EFAF48 = 0u;
  xmmword_268EFAF58 = 0u;
  xmmword_268EFAF68 = 0u;
  xmmword_268EFAF78 = 0u;
  xmmword_268EFAF88 = 0u;
  LOBYTE(xmmword_268EFAF98) = 3;
  *((void *)&xmmword_268EFAF98 + 1) = v2;
  return result;
}

uint64_t initializeWithCopy for ScrollStateEnqueueRequests(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(void *)(a1 + 33) = *(void *)(a2 + 33);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t key path getter for EnvironmentValues.symbolRenderingMode : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Font.StaticModifierProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for GeometryEffectDisplayList<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for GeometryEffectTransform<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ForegroundEnvironment<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for ArrayAnchorValueBox()
{
  return swift_initClassMetadata2();
}

{
  return type metadata completion function for ArrayAnchorValueBox();
}

uint64_t Text.fontWeight(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  outlined copy of Text.Storage(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
  }
  unint64_t v11 = a6[2];
  unint64_t v10 = a6[3];
  if (v11 >= v10 >> 1) {
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, a6);
  }
  a6[2] = v11 + 1;
  unsigned int v12 = &a6[2 * v11];
  v12[4] = a1;
  *((unsigned char *)v12 + 40) = a2 & 1 | 0x40;
  return a3;
}

uint64_t initializeWithCopy for ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v4 = (_OWORD *)(a1 + 72);
  uint64_t v5 = a2 + 72;
  uint64_t v6 = *(void *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v6;
    *(void *)(a1 + 104) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 72, v5, v6);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    _OWORD *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 88) = v8;
    *(void *)(a1 + 104) = *(void *)(v5 + 32);
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t specialized AnimatableAttribute.updateValue()(uint64_t a1, void (*a2)(_OWORD *, void, void, uint64_t))
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v5 = Value[1];
  v8[0] = *Value;
  v8[1] = v5;
  char v9 = v6 & 1;
  a2(v8, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if (v9) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PinnedScrollableViews and conformance PinnedScrollableViews()
{
  unint64_t result = lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews;
  if (!lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews;
  if (!lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews;
  if (!lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews;
  if (!lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews);
  }
  return result;
}

uint64_t View.colorScheme(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);

  return swift_release();
}

unint64_t instantiation function for generic protocol witness table for Path(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Path and conformance Path();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Path and conformance Path()
{
  unint64_t result = lazy protocol witness table cache variable for type Path and conformance Path;
  if (!lazy protocol witness table cache variable for type Path and conformance Path)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path and conformance Path);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Path and conformance Path;
  if (!lazy protocol witness table cache variable for type Path and conformance Path)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path and conformance Path);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Path and conformance Path;
  if (!lazy protocol witness table cache variable for type Path and conformance Path)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path and conformance Path);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.LeadingModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.LeadingModifier and conformance Font.LeadingModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for FluidSpringAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TranslationElement(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TranslationElement and conformance TranslationElement();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SizedSpaceElement(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SizedSpaceElement and conformance SizedSpaceElement();
  *(void *)(a1 + 8) = result;
  return result;
}

void storeEnumTagSinglePayload for _TraitWritingModifier(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 >= a2)
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          size_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
          v14(a1, a2);
        }
        break;
    }
  }
  else
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
}

uint64_t one-time initialization function for legacyInterpolation()
{
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v0;
  }
  static Color.Resolved.legacyInterpolation = result ^ 1;
  return result;
}

uint64_t type metadata completion function for NamedImage.BitmapKey()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _BackgroundModifier.init(background:alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for _BackgroundModifier();
  int v9 = (void *)(a5 + *(int *)(result + 36));
  *int v9 = a2;
  v9[1] = a3;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContentTransition.State>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContentTransition.State>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContentTransition.State> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContentTransition.State>>);
    }
  }
}

double static ModifiedContent<>._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>)
{
  void (*v19)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t);
  double result;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;

  BOOL v78 = *MEMORY[0x263EF8340];
  int v14 = *a1;
  uint64_t v36 = *a2;
  int v21 = a2[2];
  int v23 = *((_DWORD *)a2 + 6);
  int8x16_t v24 = *((_DWORD *)a2 + 2);
  unint64_t v22 = *((_DWORD *)a2 + 7);
  uint64_t v35 = *((_DWORD *)a2 + 8);
  uint64_t v15 = a2[5];
  int v34 = a2[6];
  int v31 = *((_DWORD *)a2 + 14);
  int v32 = *((_DWORD *)a2 + 9);
  uint64_t v29 = *((_DWORD *)a2 + 16);
  uint64_t v30 = *((_DWORD *)a2 + 15);
  unint64_t v27 = *((_DWORD *)a2 + 18);
  long long v28 = *((_DWORD *)a2 + 17);
  double v25 = *((_DWORD *)a2 + 20);
  int v26 = *((_DWORD *)a2 + 19);
  uint64_t v42 = a5;
  int v43 = a6;
  int v44 = a7;
  int v45 = a8;
  LODWORD(v62) = v14;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:), a6, &v41);
  int v16 = v41;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a5;
  *(void *)(v17 + 24) = a6;
  *(void *)(v17 + 32) = a7;
  *(void *)(v17 + 40) = a8;
  *(_DWORD *)(v17 + 48) = v14;
  *(void *)(v17 + 56) = a3;
  *(void *)(v17 + 64) = a4;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v62 = v36;
  uint64_t v64 = v21;
  uint64_t v63 = v24;
  int v65 = v23;
  int v66 = v22;
  int v68 = v32;
  int v69 = v15;
  int v70 = v34;
  int v71 = v31;
  uint64_t v72 = v30;
  uint64_t v73 = v29;
  char v74 = v28;
  uint64_t v75 = v27;
  uint64_t v76 = v26;
  uint64_t v77 = v25;
  uint64_t v38 = v16;
  int v46 = v36;
  uint64_t v47 = v24;
  uint64_t v48 = v21;
  int v49 = v23;
  int v50 = v22;
  int v51 = 0;
  int v52 = v32;
  int v53 = v15;
  int v54 = v34;
  int v55 = v31;
  uint64_t v56 = v30;
  int v57 = v29;
  uint64_t v58 = v28;
  int v59 = v27;
  int v60 = v26;
  int v61 = v25;
  int v19 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(a8 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v19(&v39, &v38, &v46, partial apply for closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:), v17, a6, a8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v67 = v35;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v39, (uint64_t)&v62);
    AGSubgraphEndTreeElement();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a9 = v39;
  uint64_t result = v40;
  a9[1] = v40;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  return static ModifiedContent<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a6 - 8), *(void *)(a6 - 16), a7);
}

uint64_t type metadata completion function for ForEachState.ForEachViewIDCollection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for leadingText()
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  unint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  unint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA5E490, (uint64_t)&protocol witness table for HorizontalAlignment.LeadingText, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static HorizontalAlignment.leadingText = 2 * v3 + 2;
  return result;
}

uint64_t one-time initialization function for _firstTextLineCenter()
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  unint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  unint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA59380, (uint64_t)&protocol witness table for VerticalAlignment.FirstTextLineCenter, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static VerticalAlignment._firstTextLineCenter = 2 * v3 + 3;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in GeometryVisualEffect<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for DynamicContainer._ItemInfo()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

id one-time initialization function for coreTextRunDelegate()
{
  static NSAttributedStringKey.coreTextRunDelegate = *MEMORY[0x263F03CA8];
  return (id)static NSAttributedStringKey.coreTextRunDelegate;
}

void one-time initialization function for defaultSpacingValue()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v0 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x78);
  unint64_t v1 = static CoreGlue.shared;
  CGFloat v2 = v0();
  CGFloat v4 = v3;

  defaultSpacingValue.CGFloat width = v2;
  defaultSpacingValue.CGFloat height = v4;
}

uint64_t type metadata completion function for ResolvedTextHelper.NextUpdate()
{
  uint64_t v3 = MEMORY[0x263F8CF70] + 64;
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    CGFloat v4 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for NamedImage.VectorKey()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for ImageResolutionContext()
{
  _s7SwiftUI4TextV5StyleVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for Capsule._Inset()
{
  return &type metadata for Capsule._Inset;
}

ValueMetadata *type metadata accessor for MultimodalListStackContext()
{
  return &type metadata for MultimodalListStackContext;
}

ValueMetadata *type metadata accessor for MultimodalListGridContext()
{
  return &type metadata for MultimodalListGridContext;
}

ValueMetadata *type metadata accessor for UpdateScrollStateRequest()
{
  return &type metadata for UpdateScrollStateRequest;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.LabelKey()
{
  return &type metadata for AccessibilityProperties.LabelKey;
}

ValueMetadata *type metadata accessor for ContainerStyleContext()
{
  return &type metadata for ContainerStyleContext;
}

ValueMetadata *type metadata accessor for RectangleCornerRadii()
{
  return &type metadata for RectangleCornerRadii;
}

uint64_t partial apply for closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

ValueMetadata *type metadata accessor for WatchDisplayVariant()
{
  return &type metadata for WatchDisplayVariant;
}

SwiftUI::ViewTraitCollection __swiftcall ViewTraitCollection.init()()
{
  *unint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

ValueMetadata *type metadata accessor for FontDefinitionType()
{
  return &type metadata for FontDefinitionType;
}

ValueMetadata *type metadata accessor for SheetStyleContext()
{
  return &type metadata for SheetStyleContext;
}

ValueMetadata *type metadata accessor for BackgroundContext()
{
  return &type metadata for BackgroundContext;
}

ValueMetadata *type metadata accessor for _ViewList_Group()
{
  return &type metadata for _ViewList_Group;
}

ValueMetadata *type metadata accessor for ForegroundStyle()
{
  return &type metadata for ForegroundStyle;
}

ValueMetadata *type metadata accessor for ContainerValues()
{
  return &type metadata for ContainerValues;
}

void one-time initialization function for circle()
{
  static SymbolVariants.circle = 0;
}

ValueMetadata *type metadata accessor for OpenURLAction.Handler()
{
  return &type metadata for OpenURLAction.Handler;
}

ValueMetadata *type metadata accessor for _ColorMatrix()
{
  return &type metadata for _ColorMatrix;
}

ValueMetadata *type metadata accessor for ViewGeometry()
{
  return &type metadata for ViewGeometry;
}

void *type metadata accessor for PlaybackMode()
{
  return &unk_26FA46420;
}

ValueMetadata *type metadata accessor for ShadowStyle.Kind()
{
  return &type metadata for ShadowStyle.Kind;
}

double *static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(double a1, double a2, double a3, double a4)
{
  type metadata accessor for InternalAnimationBox<SpringAnimation>();
  SwiftUI::ViewTraitCollection result = (double *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

void type metadata accessor for InternalAnimationBox<SpringAnimation>()
{
  if (!lazy cache variable for type metadata for InternalAnimationBox<SpringAnimation>)
  {
    lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation();
    unint64_t v0 = type metadata accessor for InternalAnimationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<SpringAnimation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation;
  if (!lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation;
  if (!lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation;
  if (!lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation;
  if (!lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation);
  }
  return result;
}

unsigned char *assignWithTake for TypesettingConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  int v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 2, v6);
  int v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v18 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 40))(a1, a2, v18);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      goto LABEL_7;
    }
    _s7SwiftUI24TypesettingConfigurationVWOhTm_0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v12 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
  a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = &a1[v14];
  int v16 = &a2[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  return a1;
}

double one-time initialization function for bufferCallbacks()
{
  uint64_t v0 = swift_slowAlloc();
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 8) = @objc closure #1 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(void *)(v0 + 16) = @objc closure #2 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(void *)(v0 + 24) = @objc closure #3 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(void *)(v0 + 32) = @objc closure #4 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(void *)(v0 + 40) = @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(void *)(v0 + 48) = @objc closure #6 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(void *)(v0 + 56) = @objc closure #7 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(void *)(v0 + 64) = @objc closure #8 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  static Path.PathBox.bufferCallbacks = v0;
  return result;
}

id GraphHost.rootSubgraph.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 32);

  return v1;
}

uint64_t getEnumTagSinglePayload for _AspectRatioLayout(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

CAFrameRateRange __swiftcall CAFrameRateRange.init(interval:)(Swift::Double interval)
{
  if (interval == 0.0) {
    goto LABEL_2;
  }
  float v4 = interval;
  float v5 = roundf(1.0 / v4);
  if (v5 <= 40.0)
  {
    *(CAFrameRateRange *)&float v1 = CAFrameRateRange.init(minimum:maximum:preferred:)(v5, 60.0, (Swift::Float_optional *)LODWORD(v5));
  }
  else
  {
    if (v5 < 80.0)
    {
LABEL_2:
      float v1 = *MEMORY[0x263F15738];
      float v2 = *(float *)(MEMORY[0x263F15738] + 4);
      float v3 = *(float *)(MEMORY[0x263F15738] + 8);
      goto LABEL_8;
    }
    *(CAFrameRateRange *)&float v1 = CAFrameRateRange.init(minimum:maximum:preferred:)(80.0, v5, (Swift::Float_optional *)LODWORD(v5));
  }
LABEL_8:
  result.preferred = v3;
  result.maximum = v2;
  result.minimum = v1;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Circle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Circle and conformance Circle();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Circle and conformance Circle();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for LocalizedStringKey.FormatArgument()
{
  uint64_t result = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolRenderingModeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolRenderingModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolRenderingModeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t one-time initialization function for leading()
{
  if (one-time initialization token for leading != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.leading;
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  static Alignment.leading = v0;
  unk_26B0E9AF8 = static VerticalAlignment.center;
  return result;
}

{
  os_unfair_lock_s *v0;
  void *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA5E520, (uint64_t)&protocol witness table for HorizontalAlignment.Leading, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static HorizontalAlignment.leading = 2 * v3 + 2;
  return result;
}

uint64_t instantiation function for generic protocol witness table for LinearGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t Image._prefetch(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = a2;
  _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  MEMORY[0x270FA5388](v3 - 8);
  float v5 = (char *)&v20 - v4;
  uint64_t v20 = (uint64_t)&v20 - v4;
  uint64_t v6 = type metadata accessor for ImageResolutionContext();
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v21 = v13;
  uint64_t v15 = type metadata accessor for Text.Style(0);
  int v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v5, 1, 1, v15);
  LODWORD(v5) = *MEMORY[0x263F288F8];
  v9[2] = 0;
  uint64_t v17 = (uint64_t)v9 + v7[8];
  v16((char *)v17, 1, 1, v15);
  uint64_t v18 = v7[9];
  *(_DWORD *)((char *)v9 + v18) = v5;
  *((unsigned char *)v9 + v7[10]) = 8;
  *((unsigned char *)v9 + v7[11]) = 3;
  *((unsigned char *)v9 + v7[12]) = 1;
  *int v9 = v21;
  v9[1] = v14;
  swift_retain();
  swift_retain();
  outlined assign with take of Text.Style?(v20, v17);
  *(_DWORD *)((char *)v9 + v18) = v5;
  outlined init with take of ImageResolutionContext((uint64_t)v9, (uint64_t)v12);
  (*(void (**)(_OWORD *__return_ptr, char *))(*(void *)v22 + 80))(v23, v12);
  _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
  v25[8] = v23[8];
  v25[9] = v23[9];
  v26[0] = *(_OWORD *)v24;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)&v24[15];
  v25[4] = v23[4];
  v25[5] = v23[5];
  v25[6] = v23[6];
  v25[7] = v23[7];
  v25[0] = v23[0];
  v25[1] = v23[1];
  v25[2] = v23[2];
  v25[3] = v23[3];
  return outlined release of Image.Resolved((uint64_t)v25);
}

uint64_t type metadata completion function for AttributedStringTextStorage()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for _StrokedShape<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t static Spacing.zero.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  *a1 = static Spacing.zero;

  return swift_bridgeObjectRetain();
}

uint64_t base witness table accessor for Equatable in CTFontRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
}

uint64_t base witness table accessor for Hashable in CTFontRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
}

uint64_t one-time initialization function for unlocatedIssuesLog(uint64_t a1)
{
  return one-time initialization function for propertyChangeLog(a1, static Log.unlocatedIssuesLog);
}

uint64_t base witness table accessor for Equatable in ValueToScrollPosition<A>()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of AnyLocation.wasRead.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

void specialized GraphHost.runTransaction(_:do:)(unint64_t a1, uint64_t a2)
{
  GraphHost.instantiateIfNeeded()();
  if (a1 >= 2)
  {
    swift_beginAccess();
    AGGraphSetValue();
  }
  unint64_t v13 = a1;
  *(unsigned char *)(a2 + 152) = 1;
  swift_beginAccess();
  AGGraphGetValue();
  AGGraphSetValue();
  uint64_t v4 = (uint64_t *)(a2 + 160);
  id v5 = *(id *)(a2 + 24);
  swift_beginAccess();
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 160);
  uint64_t v8 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t *v4 = v8;
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9)
    {
      uint64_t v10 = v7 + 40;
      do
      {
        uint64_t v11 = *(void (**)(uint64_t))(v10 - 8);
        uint64_t v12 = swift_retain();
        v11(v12);
        swift_release();
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    ++v6;
    swift_bridgeObjectRelease();
    AGSubgraphUpdate();
    if (v6 == 8) {
      break;
    }
    uint64_t v7 = *v4;
  }
  while (*(void *)(*v4 + 16));
  *(unsigned char *)(a2 + 152) = 0;

  if (v13 >= 2) {
    AGGraphSetValue();
  }
}

BOOL static ProcessEnvironment.BOOL(forKey:defaultValue:)(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v4 = String.utf8CString.getter();
  id v5 = getenv((const char *)(v4 + 32));
  swift_release();
  if (v5) {
    return atoi(v5) != 0;
  }
  return a3;
}

uint64_t one-time initialization function for preferredIfEnabled()
{
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v0;
  }
  if (result) {
    char v2 = 4;
  }
  else {
    char v2 = 8;
  }
  static SymbolRenderingMode.preferredIfEnabled = v2;
  return result;
}

uint64_t type metadata completion function for SpringState()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void one-time initialization function for privateSystemAssetManager()
{
  unsigned int v0 = (void *)private_nofill_to_fill.getter();
  unint64_t v1 = (void *)private_name_aliases.getter();
  char v2 = (void *)private_symbol_order.getter();
  id v3 = objc_allocWithZone(MEMORY[0x263F086E0]);
  uint64_t v4 = (void *)MEMORY[0x24C522820](0xD000000000000035, 0x8000000246221390);
  id v5 = objc_msgSend(v3, sel_initWithPath_, v4);

  id v6 = objc_allocWithZone(MEMORY[0x263F38378]);
  id v7 = v5;
  id v8 = specialized @nonobjc CUICatalog.init(name:from:error:)(0x737465737341, 0xE600000000000000, (uint64_t)v5);

  static Image.Location.privateSystemAssetManager = (uint64_t)v8;
  off_26B0EB010 = v0;
  off_26B0EB018 = v1;
  off_26B0EB020 = v2;
}

void one-time initialization function for systemAssetManager()
{
  unsigned int v0 = (void *)nofill_to_fill.getter();
  unint64_t v1 = (void *)name_aliases.getter();
  char v2 = (void *)symbol_order.getter();
  id v3 = objc_allocWithZone(MEMORY[0x263F086E0]);
  uint64_t v4 = (void *)MEMORY[0x24C522820](0xD00000000000002ELL, 0x8000000246221360);
  id v5 = objc_msgSend(v3, sel_initWithPath_, v4);

  id v6 = objc_allocWithZone(MEMORY[0x263F38378]);
  id v7 = v5;
  id v8 = specialized @nonobjc CUICatalog.init(name:from:error:)(0x737465737341, 0xE600000000000000, (uint64_t)v5);

  static Image.Location.systemAssetManager = (uint64_t)v8;
  off_26B0EE3B8 = v0;
  off_26B0EE3C0 = v1;
  off_26B0EE3C8 = v2;
}

id specialized @nonobjc CUICatalog.init(name:from:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  id v5 = (void *)MEMORY[0x24C522820]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithName_fromBundle_error_, v5, a3, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraits and conformance AccessibilityTraits()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits;
  if (!lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits;
  if (!lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraits and conformance AccessibilityTraits);
  }
  return result;
}

uint64_t type metadata completion function for _BlendModeShapeStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id one-time initialization function for sharedGraph()
{
  id result = closure #1 in variable initialization expression of static GraphHost.sharedGraph();
  static GraphHost.sharedGraph = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static GraphHost.sharedGraph()
{
  unsigned int v0 = (void *)AGGraphCreate();
  unint64_t v1 = getenv("SWIFTUI_ASSERT_LOCKS");
  if (v1 && atoi(v1))
  {
    if (one-time initialization token for threadAssertionTrace != -1) {
      swift_once();
    }
    AGGraphSetTrace();
  }
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v3 = static OS_dispatch_queue.main.getter();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v2;
  v10[4] = partial apply for closure #1 in closure #1 in variable initialization expression of static GraphHost.sharedGraph;
  v10[5] = v4;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  id v10[2] = thunk for @escaping @callee_guaranteed (@unowned Int32) -> ();
  void v10[3] = &block_descriptor_98;
  id v5 = _Block_copy(v10);
  id v6 = v0;
  swift_retain();
  swift_release();
  swift_beginAccess();
  notify_register_dispatch("com.apple.swiftuitrace.state", (int *)(v2 + 16), v3, v5);
  swift_endAccess();
  _Block_release(v5);

  handleTraceNotification(graph:token:)(v6, *(_DWORD *)(v2 + 16));
  if (one-time initialization token for update != -1) {
    swift_once();
  }
  if (AGGraphTraceEventEnabled())
  {
    type metadata accessor for LayoutTrace.Recorder();
    uint64_t v7 = swift_allocObject();
    *(unsigned char *)(v7 + 24) = 0;
    *(void *)(v7 + 40) = 0;
    *(void *)(v7 + 48) = 0;
    *(void *)(v7 + 32) = 0;
    *(_WORD *)(v7 + 56) = 512;
    *(void *)(v7 + 64) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    *(void *)(v7 + 16) = v6;
    swift_beginAccess();
    static LayoutTrace.recorder = (_UNKNOWN *)v7;
    id v8 = v6;
    swift_release();
  }
  swift_release();
  return v6;
}

uint64_t handleTraceNotification(graph:token:)(void *a1, int token)
{
  state64[4] = *MEMORY[0x263EF8340];
  state64[0] = 0;
  uint64_t result = notify_get_state(token, state64);
  if (state64[0] == 1)
  {
    uint64_t result = (uint64_t)dlopen("/AppleInternal/Library/Frameworks/SwiftUITracingSupport.framework/SwiftUITracingSupport", 4);
    if (result)
    {
      uint64_t result = (uint64_t)dlsym((void *)result, "swiftUITraceRegister");
      if (result)
      {
        uint64_t v4 = (void (*)(void *, uint64_t *))result;
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        uint64_t v5 = static Update._lock;
        _MovableLockLock(static Update._lock);
        uint64_t v8 = 0;
        v4(a1, &v8);
        if (v8)
        {
          type metadata accessor for ReuseTrace.Recorder();
          uint64_t v6 = swift_allocObject();
          *(unsigned char *)(v6 + 24) = 0;
          *(void *)(v6 + 16) = a1;
          swift_beginAccess();
          static ReuseTrace.recorder = (_UNKNOWN *)v6;
          id v7 = a1;
          swift_release();
        }
        return _MovableLockUnlock(v5);
      }
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in VisualEffectModifier<A>.Child()
{
  return swift_getWitnessTable();
}

void *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t View.accentColor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t type metadata completion function for Transaction.PendingListeners.WeakListener()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *initializeWithCopy for ViewGraphGeometryObservers.Observer(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v9 = ((v6 + v7) & ~v7) + v6;
  }
  if (v9 > 3) {
    goto LABEL_5;
  }
  unsigned int v11 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v11 > 0xFFFD)
  {
    unsigned int v10 = *(_DWORD *)&a2[v9];
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_5:
      unsigned int v10 = a2[v9];
      goto LABEL_10;
    }
    unsigned int v10 = *(unsigned __int16 *)&a2[v9];
  }
LABEL_10:
  unsigned int v12 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        if (v9 < 4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        if (v9 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v9 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 4:
        int v14 = *(_DWORD *)a2;
        if (v9 < 4) {
LABEL_22:
        }
          v14 |= v12 << (8 * v9);
LABEL_23:
        unsigned int v10 = v14 + 2;
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    uint64_t v16 = ~v7;
    uint64_t v17 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v17(a1, a2, AssociatedTypeWitness);
    v17((unsigned char *)((unint64_t)&a1[v8] & v16), (unsigned __int8 *)((unint64_t)&a2[v8] & v16), AssociatedTypeWitness);
    if (v9 <= 3)
    {
      unsigned int v15 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      if (v15 > 0xFFFD)
      {
        *(_DWORD *)&a1[v9] = 1;
        goto LABEL_50;
      }
      if (v15 > 0xFD)
      {
        *(_WORD *)&a1[v9] = 1;
        goto LABEL_50;
      }
    }
    a1[v9] = 1;
    if (v9 > 3) {
      goto LABEL_43;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      if (v9 > 3) {
        goto LABEL_29;
      }
      unsigned int v15 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      if (v15 > 0xFFFD)
      {
        *(_DWORD *)&a1[v9] = 0;
      }
      else
      {
        if (v15 <= 0xFD)
        {
LABEL_29:
          a1[v9] = 0;
          if (v9 > 3)
          {
LABEL_43:
            uint64_t v21 = 1;
            goto LABEL_52;
          }
          goto LABEL_40;
        }
        *(_WORD *)&a1[v9] = 0;
      }
LABEL_50:
      BOOL v22 = v15 > 0xFFFD;
      uint64_t v21 = 2;
      if (v22) {
        uint64_t v21 = 4;
      }
      goto LABEL_52;
    }
    if (v9 > 3) {
      goto LABEL_38;
    }
    unsigned int v18 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    uint64_t v19 = 2;
    if (v18 > 0xFFFD) {
      uint64_t v19 = 4;
    }
    if (v18 <= 0xFD) {
LABEL_38:
    }
      uint64_t v19 = 1;
    memcpy(a1, a2, v19 + v9);
    if (v9 > 3) {
      goto LABEL_43;
    }
  }
LABEL_40:
  unsigned int v20 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  uint64_t v21 = 2;
  if (v20 > 0xFFFD) {
    uint64_t v21 = 4;
  }
  if (v20 <= 0xFD) {
    goto LABEL_43;
  }
LABEL_52:
  uint64_t v23 = v21 + v9 + 7;
  unint64_t v24 = (unint64_t)&a1[v23];
  double v25 = (uint64_t *)((unint64_t)&a2[v23] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  long long v28 = (void *)(v24 & 0xFFFFFFFFFFFFFFF8);
  void *v28 = v27;
  v28[1] = v26;
  swift_retain();
  return a1;
}

uint64_t type metadata completion function for ResolvedTextHelper()
{
  uint64_t result = type metadata accessor for ResolvedTextHelper.NextUpdate(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned __int8 *closure #1 in ScrollTargetRole.SetLayout.value.getter(void *a1)
{
  type metadata accessor for ScrollTargetRole.Role?();
  uint64_t result = (unsigned __int8 *)AGGraphGetValue();
  int v3 = *result;
  if (v3 == 2) {
    return result;
  }
  uint64_t v4 = v3 & 1;
  type metadata accessor for ScrollableCollection();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v21);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = (void *)*a1;
  unsigned int v20 = (void *)*a1;
  *a1 = 0x8000000000000000;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    char v13 = v8;
    if (v7[3] >= v12)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v7 = v20;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
      uint64_t v7 = v20;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
      if ((v13 & 1) != (v15 & 1))
      {
        uint64_t result = (unsigned __int8 *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v9 = v14;
    }
    *a1 = v7;
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)*a1;
    swift_bridgeObjectRetain();
    if ((v13 & 1) == 0) {
      specialized _NativeDictionary._insert(at:key:value:)(v9, v4, MEMORY[0x263F8EE78], v16);
    }
    uint64_t v4 = v16[7];
    swift_bridgeObjectRelease();
    a1 = *(void **)(v4 + 8 * v9);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v4 + 8 * v9) = a1;
    if (v17) {
      goto LABEL_11;
    }
  }
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
  *(void *)(v4 + 8 * v9) = a1;
LABEL_11:
  unint64_t v19 = a1[2];
  unint64_t v18 = a1[3];
  if (v19 >= v18 >> 1)
  {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, a1);
    *(void *)(v4 + 8 * v9) = a1;
  }
  a1[2] = v19 + 1;
  return (unsigned __int8 *)outlined init with take of ScrollStateRequest(v21, (uint64_t)&a1[5 * v19 + 4]);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  char v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  Swift::Int v3 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if ((((a1 & 1) == 0) ^ *(unsigned char *)(v7 + result))) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2 & 1;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>)
  {
    type metadata accessor for [ScrollableCollection](255, (unint64_t *)&lazy cache variable for type metadata for [ScrollableCollection], (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    lazy protocol witness table accessor for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>);
    }
  }
}

unint64_t type metadata accessor for ScrollableCollection()
{
  unint64_t result = lazy cache variable for type metadata for ScrollableCollection;
  if (!lazy cache variable for type metadata for ScrollableCollection)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  }
  return result;
}

void type metadata accessor for ScrollTargetRole.Role?()
{
  if (!lazy cache variable for type metadata for ScrollTargetRole.Role?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollTargetRole.Role?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for MatchedDisplayList<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CanvasDisplayList<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnchorWriter<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for top()
{
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.center;
  if (one-time initialization token for top != -1) {
    uint64_t result = swift_once();
  }
  static Alignment.top = v0;
  unk_26B0E9448 = static VerticalAlignment.top;
  return result;
}

{
  os_unfair_lock_s *v0;
  void *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA593C8, (uint64_t)&protocol witness table for VerticalAlignment.Top, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static VerticalAlignment.top = 2 * v3 + 3;
  return result;
}

uint64_t View.tint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  v12[2] = a2;
  uint64_t v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in View.tint<A>(_:), (uint64_t)v12, MEMORY[0x263F8E628], (uint64_t)&type metadata for AnyShapeStyle, v10, (uint64_t)&v14);
  uint64_t v13 = v14;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v13, a2, a4);
  swift_release();
  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for Font.TextStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

uint64_t VisualEffectModifier.Child.updateValue()(unint64_t a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = v1[6] + 1;
  v1[6] = v7;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8]) {
    __break(1u);
  }
  int v33 = *v1;
  int v35 = v7;
  uint64_t v36 = v6;
  uint64_t v38 = v4;
  unint64_t v8 = AGCreateWeakAttribute();
  unint64_t v37 = a1;
  int v9 = v8;
  unint64_t v32 = HIDWORD(v8);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v31 = HIDWORD(v10);
  unint64_t v12 = AGCreateWeakAttribute();
  int v13 = v12;
  unint64_t v30 = HIDWORD(v12);
  unint64_t v14 = AGCreateWeakAttribute();
  int v15 = v14;
  unint64_t v29 = HIDWORD(v14);
  unint64_t v16 = AGCreateWeakAttribute();
  int v17 = v16;
  uint64_t v34 = v3;
  unint64_t v28 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for VisualEffectModifier();
  uint64_t v21 = *(void (**)(uint64_t, _DWORD *))AGGraphGetValue();
  v39[0] = v9;
  v39[1] = v32;
  v39[2] = v11;
  _DWORD v39[3] = v31;
  v39[4] = v13;
  v39[5] = v30;
  v39[6] = v15;
  v39[7] = v29;
  v39[8] = v17;
  v39[9] = v28;
  v39[10] = v19;
  v39[11] = v20;
  v39[12] = v35;
  uint64_t v22 = swift_retain();
  uint64_t v23 = (uint64_t)v36;
  v21(v22, v39);
  uint64_t v24 = swift_release();
  MEMORY[0x270FA5388](v24);
  *(&v28 - 2) = v37;
  *(&v28 - 1) = swift_getWitnessTable();
  uint64_t v25 = v34;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v23, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v28 - 4), v34, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v23, v25);
}

uint64_t View.visualEffect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v4 = type metadata accessor for VisualEffectModifier();
  return View.modifier<A>(_:)(v6, a3, v4);
}

uint64_t static VisualEffectModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void))
{
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  long long v13 = *(_OWORD *)(a2 + 5);
  uint64_t v8 = a2[7];
  int v9 = *((_DWORD *)a2 + 16);
  uint64_t v10 = a2[9];
  char v11 = *((unsigned char *)a2 + 80);
  type metadata accessor for VisualEffectModifier();
  int v24 = v4;
  uint64_t v15 = v5;
  int v16 = v6;
  uint64_t v17 = v7;
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v13;
  uint64_t v20 = v8;
  int v21 = v9;
  uint64_t v22 = v10;
  char v23 = v11;
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v24, (uint64_t)&v15, a3);
}

uint64_t type metadata accessor for VisualEffectModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t one-time initialization function for evictByDefault()
{
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v0;
  }
  static ForEachEvictionInput.evictByDefault = result;
  return result;
}

void *initializeWithCopy for StateOrBinding(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (((v8 + 16) & (unint64_t)~v8) + v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v9 = ((v8 + 16) & ~v8) + v7;
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    *a1 = *(void *)a2;
    uint64_t v15 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v16 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    uint64_t v17 = ((unint64_t)v15 + v8 + 8) & ~v8;
    uint64_t v18 = ((unint64_t)v16 + v8 + 8) & ~v8;
    long long v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v19(v17, v18, v5);
    char v20 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    char v20 = 0;
  }
  *((unsigned char *)a1 + v9) = v20;
  return a1;
}

unint64_t instantiation function for generic protocol witness table for Image.CGImageProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.CGImageProvider and conformance Image.CGImageProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for HorizontalAlignment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment;
  if (!lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment;
  if (!lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment);
  }
  return result;
}

void one-time initialization function for staticModifiers()
{
  static AnyFontModifier.staticModifiers = (_UNKNOWN *)MEMORY[0x263F8EE80];
}

void specialized ForEachState.update(view:)(uint64_t a1)
{
  uint64_t v162 = *(void *)(v1 + 104);
  if (!AGSubgraphIsValid()) {
    return;
  }
  *(void *)(v1 + 288) = AGMakeUniqueID();
  int v3 = *(_DWORD *)(v1 + 296);
  *(_DWORD *)(v1 + 296) = v3 + 1;
  uint64_t v170 = v1;
  specialized ForEachState.invalidateViewCounts()();
  uint64_t v4 = v1 + 128;
  swift_beginAccess();
  outlined init with copy of ObservationTracking._AccessList?(v1 + 128, (uint64_t)&v182, &lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?, (void (*)(uint64_t))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  uint64_t v5 = *((void *)&v183 + 1);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)&v182, &lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?, (void (*)(uint64_t))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  v165 = (void *)a1;
  if (!v5) {
    goto LABEL_5;
  }
  if (!*(void *)(v1 + 152))
  {
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  if (*(void *)(v1 + 200))
  {
LABEL_5:
    outlined init with copy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(a1, (uint64_t)&v182, (uint64_t (*)(void))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
    swift_beginAccess();
    outlined assign with take of ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?((uint64_t)&v182, v4, &lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?, (void (*)(uint64_t))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
    swift_endAccess();
    v166 = (uint64_t *)(v1 + 264);
    swift_beginAccess();
    *(void *)(v1 + 264) = MEMORY[0x263F8EE80];
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v1 + 124) & 1) == 0)
    {
      id v6 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v8 = v170;
      *(void *)(v170 + 272) = Counter;
      if ((*(void *)(v8 + 280) & 0x8000000000000000) != 0)
      {
        *(void *)(v8 + 280) = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_177;
      }
      if (one-time initialization token for _lock != -1) {
        goto LABEL_167;
      }
      goto LABEL_8;
    }
    goto LABEL_186;
  }
  outlined init with copy of _VariadicView_Children(v4, (uint64_t)&v182);
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v67 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v83 = *((void *)&v183 + 1);
  uint64_t v84 = v184;
  __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
  uint64_t v85 = ViewList.count.getter(v83, v84);
  static Update.end()();
  _MovableLockUnlock(v67);
  _MovableLockLock(v67);
  specialized static Update.begin()();
  uint64_t v86 = *((void *)&v183 + 1);
  uint64_t v87 = v184;
  __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
  uint64_t v88 = ViewList.count.getter(v86, v87);
  static Update.end()();
  _MovableLockUnlock(v67);
  if (v88 < 0)
  {
    __break(1u);
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  _MovableLockLock(v67);
  specialized static Update.begin()();
  uint64_t v89 = *((void *)&v183 + 1);
  uint64_t v90 = v184;
  __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
  uint64_t v91 = ViewList.count.getter(v89, v90);
  static Update.end()();
  _MovableLockUnlock(v67);
  if (v85 < 0 || v91 < v85) {
    goto LABEL_169;
  }
  outlined destroy of _VariadicView_Children((uint64_t)&v182);
  uint64_t v67 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v92 = *(void *)(a1 + 24);
  uint64_t v93 = *(void *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)a1, v92);
  char v94 = (void *)a1;
  uint64_t v95 = ViewList.count.getter(v92, v93);
  static Update.end()();
  _MovableLockUnlock(v67);
  _MovableLockLock(v67);
  specialized static Update.begin()();
  uint64_t v96 = v94[3];
  uint64_t v97 = v94[4];
  __swift_project_boxed_opaque_existential_1(v94, v96);
  uint64_t v98 = ViewList.count.getter(v96, v97);
  static Update.end()();
  _MovableLockUnlock(v67);
  if (v98 < 0)
  {
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    swift_bridgeObjectRetain();
    uint64_t v139 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v139) {
      goto LABEL_173;
    }
LABEL_139:
    if (v139 >= 1)
    {
      uint64_t v140 = 0;
      unint64_t v141 = v4 & 0xC000000000000001;
      uint64_t v161 = v67;
      v168 = (uint64_t *)(v4 & 0xC000000000000001);
      uint64_t v169 = 0;
      while (1)
      {
        if (v141)
        {
          uint64_t v142 = MEMORY[0x24C523D60](v140, v4);
        }
        else
        {
          uint64_t v142 = *(void *)(v4 + 8 * v140 + 32);
          swift_retain();
        }
        AGSubgraphApply();
        AGSubgraphRemoveChild();
        *(_WORD *)(v142 + 165) = 256;
        swift_beginAccess();
        int v143 = *(_DWORD *)(v142 + 24) - 1;
        *(_DWORD *)(v142 + 24) = v143;
        if (!v143) {
          break;
        }
LABEL_141:
        ++v140;
        swift_release();
        if (v139 == v140) {
          goto LABEL_173;
        }
      }
      uint64_t Strong = swift_weakLoadStrong();
      if (!Strong)
      {
LABEL_153:
        uint64_t IsValid = AGSubgraphIsValid();
        if (IsValid)
        {
          MEMORY[0x270FA5388](IsValid);
          LOBYTE(v157) = 1;
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
        goto LABEL_141;
      }
      uint64_t v145 = Strong;
      uint64_t v146 = v139;
      swift_beginAccess();
      uint64_t v147 = *(void *)(v145 + 256);
      if (*(void *)(v147 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v148 = specialized __RawDictionaryStorage.find<A>(_:)(v142 + 32);
        if (v149)
        {
          unint64_t v150 = v148;
          int v151 = *(_DWORD *)(v147 + 36);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          specialized Dictionary._Variant.remove(at:)((uint64_t)&v182, v150, v151, 0);
          swift_endAccess();
          swift_release();
          swift_release();
          outlined destroy of AnyHashable((uint64_t)&v182);
LABEL_152:
          uint64_t v139 = v146;
          uint64_t v67 = v161;
          unint64_t v141 = (unint64_t)v168;
          goto LABEL_153;
        }
        swift_bridgeObjectRelease();
      }
      swift_retain();
      uint64_t v152 = swift_bridgeObjectRetain();
      uint64_t v153 = v169;
      uint64_t v154 = specialized _NativeDictionary.filter(_:)(v152, v142, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
      uint64_t v169 = v153;
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v145 + 256) = v154;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_152;
    }
    __break(1u);
    goto LABEL_180;
  }
  _MovableLockLock(v67);
  specialized static Update.begin()();
  uint64_t v99 = v94[3];
  uint64_t v100 = v94[4];
  __swift_project_boxed_opaque_existential_1(v94, v99);
  uint64_t v101 = ViewList.count.getter(v99, v100);
  static Update.end()();
  _MovableLockUnlock(v67);
  if (v95 < 0 || v101 < v95) {
    goto LABEL_171;
  }
  if (v85 != v95)
  {
    *(void *)&long long v182 = 0;
    *((void *)&v182 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(204);
    *(_OWORD *)v180 = v182;
    v102._uint64_t countAndFlagsBits = 0xD000000000000035;
    v102._object = (void *)0x8000000246220D00;
    String.append(_:)(v102);
    v103._uint64_t countAndFlagsBits = 0x2820746E756F6320;
    v103._object = (void *)0xE800000000000000;
    String.append(_:)(v103);
    _MovableLockLock(v67);
    specialized static Update.begin()();
    uint64_t v104 = v165[3];
    uint64_t v105 = v165[4];
    __swift_project_boxed_opaque_existential_1(v165, v104);
    uint64_t v106 = ViewList.count.getter(v104, v105);
    static Update.end()();
    _MovableLockUnlock(v67);
    _MovableLockLock(v67);
    specialized static Update.begin()();
    uint64_t v107 = v165[3];
    uint64_t v108 = v165[4];
    __swift_project_boxed_opaque_existential_1(v165, v107);
    uint64_t v109 = ViewList.count.getter(v107, v108);
    static Update.end()();
    _MovableLockUnlock(v67);
    if (v109 < 0)
    {
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
      goto LABEL_183;
    }
    _MovableLockLock(v67);
    specialized static Update.begin()();
    uint64_t v110 = v165[3];
    uint64_t v111 = v165[4];
    __swift_project_boxed_opaque_existential_1(v165, v110);
    uint64_t v112 = ViewList.count.getter(v110, v111);
    static Update.end()();
    _MovableLockUnlock(v67);
    if (v106 < 0 || v112 < v106) {
      goto LABEL_181;
    }
    *(void *)&long long v182 = v106;
    v113._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v113);
    swift_bridgeObjectRelease();
    v114._object = (void *)0x8000000246220B80;
    v114._uint64_t countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v114);
    if (!*(void *)(v170 + 152))
    {
LABEL_191:
      __break(1u);
LABEL_192:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    outlined init with copy of _VariadicView_Children(v4, (uint64_t)&v182);
    uint64_t v115 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    uint64_t v116 = *((void *)&v183 + 1);
    uint64_t v117 = v184;
    __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
    uint64_t v118 = ViewList.count.getter(v116, v117);
    static Update.end()();
    _MovableLockUnlock(v115);
    _MovableLockLock(v115);
    specialized static Update.begin()();
    uint64_t v119 = *((void *)&v183 + 1);
    uint64_t v120 = v184;
    __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
    uint64_t v121 = ViewList.count.getter(v119, v120);
    static Update.end()();
    _MovableLockUnlock(v115);
    if (v121 < 0) {
      goto LABEL_182;
    }
    _MovableLockLock(v115);
    specialized static Update.begin()();
    uint64_t v122 = *((void *)&v183 + 1);
    uint64_t v123 = v184;
    __swift_project_boxed_opaque_existential_1(&v182, *((uint64_t *)&v183 + 1));
    uint64_t v124 = ViewList.count.getter(v122, v123);
    static Update.end()();
    _MovableLockUnlock(v115);
    if (v118 < 0 || v124 < v118)
    {
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    outlined destroy of _VariadicView_Children((uint64_t)&v182);
    *(void *)&long long v172 = v118;
    v125._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v125);
    swift_bridgeObjectRelease();
    v126._uint64_t countAndFlagsBits = 0xD0000000000000A6;
    v126._object = (void *)0x8000000246220BA0;
    String.append(_:)(v126);
    specialized static Log.externalWarning(_:)(v180[0], v180[1]);
    swift_bridgeObjectRelease();
  }
  if (!*(void *)(v170 + 152))
  {
LABEL_189:
    __break(1u);
    goto LABEL_190;
  }
  outlined init with copy of _VariadicView_Children(v4, (uint64_t)v180);
  outlined init with copy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)v165, (uint64_t)&v182, (uint64_t (*)(void))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  swift_beginAccess();
  outlined assign with take of ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?((uint64_t)&v182, v4, &lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?, (void (*)(uint64_t))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  outlined init with copy of _VariadicView_Children((uint64_t)v180, (uint64_t)&v182);
  if (!*(void *)(v170 + 152))
  {
LABEL_190:
    __break(1u);
    goto LABEL_191;
  }
  outlined assign with take of _VariadicView_Children((uint64_t)&v182, v4);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v127 = *(void *)(v170 + 256);
  uint64_t v128 = v127 + 64;
  uint64_t v129 = 1 << *(unsigned char *)(v127 + 32);
  uint64_t v130 = -1;
  if (v129 < 64) {
    uint64_t v130 = ~(-1 << v129);
  }
  unint64_t v131 = v130 & *(void *)(v127 + 64);
  int64_t v132 = (unint64_t)(v129 + 63) >> 6;
  uint64_t v169 = v132 - 1;
  swift_bridgeObjectRetain();
  a1 = 0;
  while (1)
  {
    if (v131)
    {
      unint64_t v133 = __clz(__rbit64(v131));
      v131 &= v131 - 1;
      unint64_t v134 = v133 | (a1 << 6);
      goto LABEL_113;
    }
    int64_t v135 = a1 + 1;
    if (__OFADD__(a1, 1)) {
      break;
    }
    if (v135 < v132)
    {
      unint64_t v136 = *(void *)(v128 + 8 * v135);
      if (v136) {
        goto LABEL_117;
      }
      uint64_t v137 = a1 + 2;
      ++a1;
      if (v135 + 1 < v132)
      {
        unint64_t v136 = *(void *)(v128 + 8 * v137);
        if (v136) {
          goto LABEL_120;
        }
        a1 = v135 + 1;
        if (v135 + 2 < v132)
        {
          unint64_t v136 = *(void *)(v128 + 8 * (v135 + 2));
          if (v136)
          {
            v135 += 2;
LABEL_117:
            unint64_t v131 = (v136 - 1) & v136;
            unint64_t v134 = __clz(__rbit64(v136)) + (v135 << 6);
            a1 = v135;
LABEL_113:
            outlined init with copy of AnyHashable(*(void *)(v127 + 48) + 40 * v134, (uint64_t)&v172);
            *((void *)&v174 + 1) = *(void *)(*(void *)(v127 + 56) + 8 * v134);
            swift_retain();
            goto LABEL_132;
          }
          uint64_t v137 = v135 + 3;
          a1 = v135 + 2;
          if (v135 + 3 < v132)
          {
            unint64_t v136 = *(void *)(v128 + 8 * v137);
            if (v136)
            {
LABEL_120:
              int64_t v135 = v137;
              goto LABEL_117;
            }
            while (1)
            {
              int64_t v135 = v137 + 1;
              if (__OFADD__(v137, 1)) {
                goto LABEL_184;
              }
              if (v135 >= v132) {
                break;
              }
              unint64_t v136 = *(void *)(v128 + 8 * v135);
              ++v137;
              if (v136) {
                goto LABEL_117;
              }
            }
            a1 = v169;
          }
        }
      }
    }
    unint64_t v131 = 0;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v172 = 0u;
LABEL_132:
    outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)&v172, (uint64_t)&v182, &lazy cache variable for type metadata for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?, (void (*)(uint64_t))type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item));
    if (!*((void *)&v183 + 1))
    {
      swift_release();
      outlined destroy of _VariadicView_Children((uint64_t)v180);
      return;
    }
    uint64_t v138 = *((void *)&v184 + 1);
    *(void *)(*((void *)&v184 + 1) + 152) = *(void *)(v170 + 288);
    if (*(_DWORD *)(v138 + 160) == v3) {
      *(_DWORD *)(v138 + 160) = *(_DWORD *)(v170 + 296);
    }
    swift_release();
    outlined destroy of AnyHashable((uint64_t)&v182);
  }
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  swift_once();
LABEL_8:
  uint64_t v9 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)a1, v10);
  uint64_t v12 = ViewList.count.getter(v10, v11);
  static Update.end()();
  _MovableLockUnlock(v9);
  int v13 = (void *)v170;
  v168 = (uint64_t *)(v170 + 256);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v13[32] + 16);
  v164 = v13 + 39;
  swift_beginAccess();
  uint64_t v15 = *(void *)(v13[39] + 16);
  uint64_t v181 = MEMORY[0x263F8EE88];
  v13[35] = 0;
  uint64_t v167 = v15;
  uint64_t v16 = v14 | v15;
  uint64_t v169 = v14;
  BOOL v17 = v14 == 0;
  uint64_t v161 = swift_bridgeObjectRetain();
  if (v16 && v12)
  {
    uint64_t v18 = 0;
    v159 = &v186;
    long long v160 = xmmword_2461B9DC0;
    uint64_t v163 = v12;
    while (1)
    {
      if (!*(void *)(a1 + 72)) {
        goto LABEL_185;
      }
      memset(v180, 0, sizeof(v180));
      uint64_t v19 = static Update._lock;
      swift_retain();
      _MovableLockLock(v19);
      specialized static Update.begin()();
      v171 = (void *)v18;
      unint64_t v179 = *(void *)(a1 + 48);
      outlined init with copy of AnyTrackedValue(a1, (uint64_t)&v172);
      uint64_t v20 = *((void *)&v173 + 1);
      uint64_t v21 = v174;
      uint64_t v22 = __swift_project_boxed_opaque_existential_1(&v172, *((uint64_t *)&v173 + 1));
      MEMORY[0x270FA5388](v22);
      uint64_t v157 = a1;
      v158 = v180;
      swift_bridgeObjectRetain();
      char v178 = 1;
      ViewList.applySublists(from:list:transform:to:)((uint64_t)&v171, 0x100000000, (uint64_t)&v179, (uint64_t)closure #1 in closure #1 in _VariadicView_Children.subscript.getterpartial apply, (uint64_t)&v156, v20, v21);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v172);
      static Update.end()();
      _MovableLockUnlock(v19);
      a1 = (uint64_t)&type metadata for _VariadicView_Children.Element;
      _s7SwiftUI22CoordinateSpaceGestureVy12CoreGraphics7CGFloatVGWOcTm_0((uint64_t)v180, (uint64_t)&v172, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element, MEMORY[0x263F8D8F0]);
      if (*((void *)&v173 + 1))
      {
        long long v184 = v174;
        long long v185 = v175;
        long long v186 = v176;
        long long v187 = v177;
        long long v182 = v172;
        long long v183 = v173;
      }
      else
      {
        _sypSgWOhTm_9((uint64_t)&v172, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
        static os_log_type_t.fault.getter();
        if (one-time initialization token for internalErrorsLog != -1) {
          swift_once();
        }
        swift_beginAccess();
        char v23 = (void *)static Log.internalErrorsLog;
        _s7SwiftUI16TimelineSchedule_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = v160;
        *(void *)(v24 + 56) = MEMORY[0x263F8D6C8];
        *(void *)(v24 + 64) = MEMORY[0x263F8D750];
        *(void *)(v24 + 32) = v18;
        id v25 = v23;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
        *((void *)&v183 + 1) = &type metadata for EmptyViewListElements;
        *(void *)&long long v184 = &protocol witness table for EmptyViewListElements;
        *((void *)&v184 + 1) = 0;
        if ((unint64_t)v18 >> 31) {
          goto LABEL_165;
        }
        LODWORD(v185) = 0;
        DWORD1(v185) = ~v18;
        uint64_t v26 = v159;
        *((void *)v159 + 1) = 0;
        *((void *)v26 + 2) = 0;
        *(void *)uint64_t v26 = 0;
        *((void *)&v185 + 1) = MEMORY[0x263F8EE78];
        *((void *)&v187 + 1) = MEMORY[0x263F8EE78];
      }
      _sypSgWOhTm_9((uint64_t)v180, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
      swift_getAtKeyPath();
      outlined destroy of _VariadicView_Children.Element((uint64_t)&v182);
      swift_release();
      uint64_t v27 = v168;
      swift_beginAccess();
      uint64_t v28 = *v27;
      if (*(void *)(v28 + 16)
        && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v180), (v30 & 1) != 0))
      {
        uint64_t v31 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
        swift_endAccess();
        uint64_t v32 = v170;
        *(void *)(v170 + 280) = v18;
        swift_beginAccess();
        *(void *)(v31 + 136) = v18;
        uint64_t v33 = *(void *)(v32 + 288);
        *(void *)(v31 + 144) = v18;
        *(void *)(v31 + 152) = v33;
        *(_DWORD *)(v31 + 160) = *(_DWORD *)(v32 + 296);
        --v169;
        if (*(unsigned char *)(v31 + 166))
        {
          int v34 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v161 = *v166;
          swift_bridgeObjectRetain();
          int v34 = 1;
        }
      }
      else
      {
        swift_endAccess();
        int v34 = 0;
      }
      uint64_t v35 = *v164;
      if (*(void *)(*v164 + 16))
      {
        Swift::Int v36 = *(void *)(v35 + 40);
        swift_bridgeObjectRetain();
        Swift::Int v37 = AnyHashable._rawHashValue(seed:)(v36);
        uint64_t v38 = -1 << *(unsigned char *)(v35 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v35 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
        {
          uint64_t v40 = ~v38;
          while (1)
          {
            outlined init with copy of AnyHashable(*(void *)(v35 + 48) + 40 * v39, (uint64_t)&v182);
            char v41 = MEMORY[0x24C523BA0](&v182, v180);
            outlined destroy of AnyHashable((uint64_t)&v182);
            if (v41) {
              break;
            }
            unint64_t v39 = (v39 + 1) & v40;
            if (((*(void *)(v35 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0) {
              goto LABEL_28;
            }
          }
          swift_bridgeObjectRelease();
          outlined init with copy of AnyHashable((uint64_t)v180, (uint64_t)&v172);
          specialized Set._Variant.insert(_:)((uint64_t)&v182, (uint64_t)&v172);
          outlined destroy of AnyHashable((uint64_t)&v182);
          --v167;
          goto LABEL_41;
        }
LABEL_28:
        swift_bridgeObjectRelease();
      }
      if (!v34)
      {
        outlined init with copy of AnyHashable((uint64_t)v180, (uint64_t)&v182);
        uint64_t v42 = v166;
        swift_beginAccess();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v171 = (void *)*v42;
        int v44 = v171;
        uint64_t *v42 = 0x8000000000000000;
        unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v182);
        uint64_t v47 = v44[2];
        BOOL v48 = (v45 & 1) == 0;
        uint64_t v49 = v47 + v48;
        a1 = (uint64_t)v165;
        if (__OFADD__(v47, v48)) {
          goto LABEL_163;
        }
        char v50 = v45;
        if (v44[3] >= v49)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            int v53 = v171;
            if ((v45 & 1) == 0) {
              goto LABEL_34;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            int v53 = v171;
            if ((v50 & 1) == 0) {
              goto LABEL_34;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
          unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v182);
          if ((v50 & 1) != (v52 & 1)) {
            goto LABEL_192;
          }
          unint64_t v46 = v51;
          int v53 = v171;
          if ((v50 & 1) == 0)
          {
LABEL_34:
            v53[(v46 >> 6) + 8] |= 1 << v46;
            outlined init with copy of AnyHashable((uint64_t)&v182, v53[6] + 40 * v46);
            *(unsigned char *)(v53[7] + v46) = 0;
            uint64_t v54 = v53[2];
            BOOL v55 = __OFADD__(v54, 1);
            uint64_t v56 = v54 + 1;
            if (v55) {
              goto LABEL_166;
            }
            v53[2] = v56;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(v53[7] + v46) = 0;
LABEL_39:
        uint64_t *v166 = (uint64_t)v53;
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)&v182);
        swift_endAccess();
        goto LABEL_42;
      }
LABEL_41:
      a1 = (uint64_t)v165;
LABEL_42:
      uint64_t v57 = static Update._lock;
      _MovableLockLock(static Update._lock);
      specialized static Update.begin()();
      uint64_t v58 = *(void *)(a1 + 24);
      uint64_t v59 = *(void *)(a1 + 32);
      __swift_project_boxed_opaque_existential_1((void *)a1, v58);
      uint64_t v60 = ViewList.count.getter(v58, v59);
      static Update.end()();
      _MovableLockUnlock(v57);
      if (v18 >= v60)
      {
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }
      outlined destroy of AnyHashable((uint64_t)v180);
      BOOL v17 = v169 == 0;
      if (v169 | v167)
      {
        if (++v18 != v163) {
          continue;
        }
      }
      break;
    }
  }
  if (*(unsigned char *)(v170 + 300))
  {
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_174;
    }
  }
  else
  {
    uint64_t *v166 = v161;
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_174;
    }
  }
  unint64_t v179 = MEMORY[0x263F8EE78];
  uint64_t v61 = *v168;
  uint64_t v62 = specialized Dictionary.startIndex.getter(*v168);
  if (v64) {
    goto LABEL_188;
  }
  unint64_t v65 = v62;
  int v66 = v63;
  uint64_t v67 = 1 << *(unsigned char *)(v61 + 32);
  LODWORD(v165) = *(_DWORD *)(v61 + 36);
  uint64_t v163 = v63;
  uint64_t v68 = v63;
  uint64_t v161 = v67;
  do
  {
    if (v66 != v165) {
      goto LABEL_156;
    }
    if (v65 == v67) {
      goto LABEL_137;
    }
    if ((v65 & 0x8000000000000000) != 0) {
      goto LABEL_157;
    }
    uint64_t v69 = *v168;
    uint64_t v70 = 1 << *(unsigned char *)(*v168 + 32);
    if ((uint64_t)v65 >= v70) {
      goto LABEL_157;
    }
    unint64_t v71 = v65 >> 6;
    a1 = 1 << v65;
    if ((*(void *)(v69 + 8 * (v65 >> 6) + 64) & (1 << v65)) == 0) {
      goto LABEL_158;
    }
    if (*(_DWORD *)(v69 + 36) != v68) {
      goto LABEL_159;
    }
    int v66 = v68;
    uint64_t v167 = v68;
    uint64_t v72 = *(void *)(*(void *)(v69 + 56) + 8 * v65);
    if (*(unsigned char *)(v72 + 166))
    {
      swift_retain();
    }
    else
    {
      int v73 = *(_DWORD *)(v72 + 160);
      int v74 = *(_DWORD *)(v170 + 296);
      swift_retain();
      if (v73 != v74)
      {
        uint64_t v75 = swift_retain();
        MEMORY[0x24C522D60](v75);
        if (*(void *)((v179 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v179 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        --v169;
        outlined init with copy of AnyHashable(v72 + 32, (uint64_t)&v182);
        uint64_t v76 = v166;
        swift_beginAccess();
        char v77 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v172 = *v76;
        *uint64_t v76 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, (uint64_t)&v182, v77);
        *uint64_t v76 = v172;
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)&v182);
        swift_endAccess();
        uint64_t v69 = *v168;
        uint64_t v70 = 1 << *(unsigned char *)(*v168 + 32);
      }
      uint64_t v67 = v161;
    }
    if ((uint64_t)v65 >= v70) {
      goto LABEL_160;
    }
    uint64_t v78 = v69 + 64;
    uint64_t v79 = *(void *)(v69 + 64 + 8 * v71);
    if ((v79 & a1) == 0) {
      goto LABEL_161;
    }
    if (*(_DWORD *)(v69 + 36) != v66) {
      goto LABEL_162;
    }
    unint64_t v80 = v79 & (-2 << (v65 & 0x3F));
    if (v80)
    {
      swift_release();
      unint64_t v65 = __clz(__rbit64(v80)) | v65 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_57;
    }
    a1 = v71 + 1;
    unint64_t v81 = (unint64_t)(v70 + 63) >> 6;
    if (v71 + 1 >= v81) {
      goto LABEL_87;
    }
    unint64_t v82 = *(void *)(v78 + 8 * a1);
    if (!v82)
    {
      a1 = v71 + 2;
      if (v71 + 2 >= v81) {
        goto LABEL_87;
      }
      unint64_t v82 = *(void *)(v78 + 8 * a1);
      if (!v82)
      {
        a1 = v71 + 3;
        if (v71 + 3 >= v81) {
          goto LABEL_87;
        }
        unint64_t v82 = *(void *)(v78 + 8 * a1);
        if (!v82)
        {
          while (v81 - 4 != v71)
          {
            unint64_t v82 = *(void *)(v69 + 96 + 8 * v71++);
            if (v82)
            {
              outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v65, v167, 0);
              swift_release();
              a1 = v71 + 3;
              goto LABEL_78;
            }
          }
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v65, v167, 0);
LABEL_87:
          swift_release();
          unint64_t v65 = v70;
          goto LABEL_57;
        }
      }
    }
    swift_release();
LABEL_78:
    unint64_t v65 = __clz(__rbit64(v82)) | (a1 << 6);
LABEL_57:
    uint64_t v68 = v163;
  }
  while (v169);
  uint64_t v67 = v65;
  uint64_t v68 = v163;
LABEL_137:
  uint64_t v4 = v179;
  uint64_t v167 = v68;
  if (v179 >> 62) {
    goto LABEL_172;
  }
  uint64_t v139 = *(void *)((v179 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v139) {
    goto LABEL_139;
  }
LABEL_173:
  swift_bridgeObjectRelease();
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v67, v167, 0);
LABEL_174:
  uint64_t v8 = v170;
  if ((*(unsigned char *)(v170 + 300) & 1) == 0) {
    *(void *)(v170 + 280) = 0x7FFFFFFFFFFFFFFFLL;
  }
  void *v164 = v181;
  swift_bridgeObjectRelease();
LABEL_177:
  *(unsigned char *)(v8 + 300) = 0;
}

void protocol witness for Collection.subscript.read in conformance _VariadicView_Children(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of _VariadicView_Children.Element(*a1);

  free(v1);
}

uint64_t outlined destroy of _VariadicView_Children.Element(uint64_t a1)
{
  return a1;
}

void specialized ForEachState.update(view:)(uint64_t *a1)
{
  uint64_t v120 = *(void *)(v1 + 104);
  if (!AGSubgraphIsValid()) {
    return;
  }
  *(void *)(v1 + 304) = AGMakeUniqueID();
  int v3 = *(_DWORD *)(v1 + 312);
  *(_DWORD *)(v1 + 312) = v3 + 1;
  uint64_t v131 = v1;
  specialized ForEachState.invalidateViewCounts()();
  uint64_t v4 = v1 + 128;
  swift_beginAccess();
  outlined init with copy of ObservationTracking._AccessList?(v1 + 128, (uint64_t)&v143, &lazy cache variable for type metadata for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?, (void (*)(uint64_t))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
  uint64_t v5 = *((void *)&v145 + 1);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)&v143, &lazy cache variable for type metadata for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?, (void (*)(uint64_t))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
  if (v5)
  {
    if (!*(void *)(v1 + 168))
    {
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }
    if (!*(void *)(v1 + 216))
    {
      outlined init with copy of Slice<SubviewsCollection>(v4, (uint64_t)&v143);
      uint64_t v53 = specialized Slice.distance(from:to:)(v143, *((uint64_t *)&v143 + 1));
      outlined destroy of Slice<SubviewsCollection>((uint64_t)&v143);
      uint64_t v54 = *a1;
      uint64_t v55 = a1[1];
      if (v53 != specialized Slice.distance(from:to:)(*a1, v55))
      {
        *(void *)&long long v143 = 0;
        *((void *)&v143 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(204);
        *(_OWORD *)unint64_t v141 = v143;
        v56._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
        v56._object = (void *)0x8000000246220C90;
        String.append(_:)(v56);
        v57._uint64_t countAndFlagsBits = 0x2820746E756F6320;
        v57._object = (void *)0xE800000000000000;
        String.append(_:)(v57);
        *(void *)&long long v143 = specialized Slice.distance(from:to:)(v54, v55);
        v58._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        v59._object = (void *)0x8000000246220B80;
        v59._uint64_t countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v59);
        if (!*(void *)(v131 + 168))
        {
LABEL_162:
          __break(1u);
          return;
        }
        outlined init with copy of Slice<SubviewsCollection>(v4, (uint64_t)&v143);
        uint64_t v60 = specialized Slice.distance(from:to:)(v143, *((uint64_t *)&v143 + 1));
        outlined destroy of Slice<SubviewsCollection>((uint64_t)&v143);
        *(void *)&long long v133 = v60;
        v61._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        v62._uint64_t countAndFlagsBits = 0xD0000000000000A6;
        v62._object = (void *)0x8000000246220BA0;
        String.append(_:)(v62);
        specialized static Log.externalWarning(_:)(v141[0], v141[1]);
        swift_bridgeObjectRelease();
      }
      if (!*(void *)(v131 + 168)) {
        goto LABEL_159;
      }
      outlined init with copy of Slice<SubviewsCollection>(v4, (uint64_t)v141);
      outlined init with copy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)a1, (uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
      swift_beginAccess();
      outlined assign with take of ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?((uint64_t)&v143, v4, &lazy cache variable for type metadata for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?, (void (*)(uint64_t))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
      outlined init with copy of Slice<SubviewsCollection>((uint64_t)v141, (uint64_t)&v143);
      if (!*(void *)(v131 + 168))
      {
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
        goto LABEL_162;
      }
      outlined assign with take of Slice<SubviewsCollection>((uint64_t)&v143, v4);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v63 = *(void *)(v131 + 272);
      uint64_t v9 = (unint64_t *)(v63 + 64);
      uint64_t v64 = 1 << *(unsigned char *)(v63 + 32);
      uint64_t v65 = -1;
      if (v64 < 64) {
        uint64_t v65 = ~(-1 << v64);
      }
      unint64_t v66 = v65 & *(void *)(v63 + 64);
      int64_t p_cache = (unint64_t)(v64 + 63) >> 6;
      uint64_t v130 = p_cache - 1;
      swift_bridgeObjectRetain();
      uint64_t v67 = 0;
      while (!v66)
      {
        int64_t v70 = v67 + 1;
        if (__OFADD__(v67, 1))
        {
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          swift_bridgeObjectRetain();
          uint64_t v95 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v95) {
            goto LABEL_148;
          }
LABEL_120:
          if (v95 < 1)
          {
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
            goto LABEL_157;
          }
          uint64_t v96 = 0;
          uint64_t v128 = v95;
          uint64_t v129 = 0;
          unint64_t v97 = p_cache & 0xC000000000000001;
          int64_t v127 = p_cache & 0xC000000000000001;
          while (2)
          {
            if (v97)
            {
              uint64_t v98 = MEMORY[0x24C523D60](v96, p_cache);
            }
            else
            {
              uint64_t v98 = *(void *)(p_cache + 8 * v96 + 32);
              swift_retain();
            }
            AGSubgraphApply();
            AGSubgraphRemoveChild();
            *(_WORD *)(v98 + 165) = 256;
            swift_beginAccess();
            int v99 = *(_DWORD *)(v98 + 24) - 1;
            *(_DWORD *)(v98 + 24) = v99;
            if (!v99)
            {
              uint64_t Strong = swift_weakLoadStrong();
              if (Strong)
              {
                uint64_t v101 = Strong;
                swift_beginAccess();
                uint64_t v102 = *(void *)(v101 + 272);
                if (*(void *)(v102 + 16))
                {
                  Swift::String v103 = v9;
                  int64_t v104 = p_cache;
                  swift_bridgeObjectRetain();
                  unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v98 + 32);
                  if (v106)
                  {
                    unint64_t v107 = v105;
                    int v108 = *(_DWORD *)(v102 + 36);
                    swift_bridgeObjectRelease();
                    swift_beginAccess();
                    specialized Dictionary._Variant.remove(at:)((uint64_t)&v143, v107, v108, 0);
                    swift_endAccess();
                    swift_release();
                    swift_release();
                    outlined destroy of Subview.ID((uint64_t)&v143);
                    int64_t p_cache = v104;
                    uint64_t v9 = v103;
                    goto LABEL_133;
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v9 = v103;
                }
                swift_retain();
                uint64_t v109 = swift_bridgeObjectRetain();
                uint64_t v110 = v129;
                uint64_t v111 = specialized _NativeDictionary.filter(_:)(v109, v98, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
                uint64_t v129 = v110;
                swift_bridgeObjectRelease();
                swift_release();
                *(void *)(v101 + 272) = v111;
                swift_release();
                swift_bridgeObjectRelease();
LABEL_133:
                unint64_t v97 = v127;
                uint64_t v95 = v128;
              }
              uint64_t IsValid = AGSubgraphIsValid();
              if (IsValid)
              {
                MEMORY[0x270FA5388](IsValid);
                LOBYTE(v114) = 1;
                AGSubgraphApply();
                AGSubgraphInvalidate();
              }
            }
            ++v96;
            swift_release();
            if (v95 == v96) {
              goto LABEL_148;
            }
            continue;
          }
        }
        if (v70 < p_cache)
        {
          unint64_t v71 = v9[v70];
          if (v71) {
            goto LABEL_63;
          }
          uint64_t v72 = v67 + 2;
          ++v67;
          if (v70 + 1 < p_cache)
          {
            unint64_t v71 = v9[v72];
            if (v71) {
              goto LABEL_66;
            }
            uint64_t v67 = v70 + 1;
            if (v70 + 2 < p_cache)
            {
              unint64_t v71 = v9[v70 + 2];
              if (v71)
              {
                v70 += 2;
LABEL_63:
                unint64_t v66 = (v71 - 1) & v71;
                unint64_t v69 = __clz(__rbit64(v71)) + (v70 << 6);
                uint64_t v67 = v70;
LABEL_59:
                outlined init with copy of Subview.ID(*(void *)(v63 + 48) + 40 * v69, (uint64_t)&v133);
                *((void *)&v135 + 1) = *(void *)(*(void *)(v63 + 56) + 8 * v69);
                swift_retain();
                goto LABEL_78;
              }
              uint64_t v72 = v70 + 3;
              uint64_t v67 = v70 + 2;
              if (v70 + 3 < p_cache)
              {
                unint64_t v71 = v9[v72];
                if (v71)
                {
LABEL_66:
                  int64_t v70 = v72;
                  goto LABEL_63;
                }
                while (1)
                {
                  int64_t v70 = v72 + 1;
                  if (__OFADD__(v72, 1)) {
                    goto LABEL_155;
                  }
                  if (v70 >= p_cache) {
                    break;
                  }
                  unint64_t v71 = v9[v70];
                  ++v72;
                  if (v71) {
                    goto LABEL_63;
                  }
                }
                uint64_t v67 = v130;
              }
            }
          }
        }
        unint64_t v66 = 0;
        long long v134 = 0u;
        long long v135 = 0u;
        long long v133 = 0u;
LABEL_78:
        outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)&v133, (uint64_t)&v143, &lazy cache variable for type metadata for (key: Subview.ID, value: ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item)?, (void (*)(uint64_t))type metadata accessor for (key: Subview.ID, value: ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item));
        if (!*((void *)&v144 + 1))
        {
          swift_release();
          outlined destroy of Slice<SubviewsCollection>((uint64_t)v141);
          return;
        }
        uint64_t v73 = *((void *)&v145 + 1);
        *(void *)(*((void *)&v145 + 1) + 152) = *(void *)(v131 + 304);
        if (*(_DWORD *)(v73 + 160) == v3) {
          *(_DWORD *)(v73 + 160) = *(_DWORD *)(v131 + 312);
        }
        swift_release();
        outlined destroy of Subview.ID((uint64_t)&v143);
      }
      unint64_t v68 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      unint64_t v69 = v68 | (v67 << 6);
      goto LABEL_59;
    }
  }
  outlined init with copy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)a1, (uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
  swift_beginAccess();
  outlined assign with take of ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?((uint64_t)&v143, v4, &lazy cache variable for type metadata for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?, (void (*)(uint64_t))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
  swift_endAccess();
  uint64_t v119 = (uint64_t *)(v1 + 280);
  swift_beginAccess();
  *(void *)(v1 + 280) = MEMORY[0x263F8EE80];
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v1 + 124))
  {
LABEL_157:
    __break(1u);
    goto LABEL_158;
  }
  id v6 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  uint64_t v8 = v131;
  *(void *)(v131 + 288) = Counter;
  if ((*(void *)(v8 + 296) & 0x8000000000000000) != 0)
  {
    *(void *)(v8 + 296) = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_152;
  }
  uint64_t v10 = *a1;
  uint64_t v9 = (unint64_t *)a1[1];
  Swift::String v126 = (uint64_t *)(v8 + 272);
  swift_beginAccess();
  uint64_t v11 = *(void *)(*(void *)(v8 + 272) + 16);
  uint64_t v124 = (uint64_t *)(v8 + 328);
  swift_beginAccess();
  uint64_t v12 = *(unint64_t **)(*(void *)(v8 + 328) + 16);
  uint64_t v13 = *(void *)(v8 + 280);
  uint64_t v142 = MEMORY[0x263F8EE88];
  *(void *)(v8 + 296) = 0;
  Swift::String v125 = v12;
  unint64_t v14 = v11 | (unint64_t)v12;
  uint64_t v129 = v11;
  BOOL v15 = v11 == 0;
  uint64_t v118 = v13;
  swift_bridgeObjectRetain();
  if (v14 && (unint64_t *)v10 != v9)
  {
    int64_t v127 = (int64_t)(a1 + 2);
    uint64_t v128 = 0;
    uint64_t v116 = &v147;
    int64_t p_cache = (int64_t)&OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
    long long v117 = xmmword_2461B9DC0;
    uint64_t v17 = v10;
    int64_t v122 = v10;
    uint64_t v123 = a1;
    uint64_t v121 = v9;
    while (1)
    {
      if (!a1[11]) {
        goto LABEL_156;
      }
      if (v17 < *a1 || v17 >= a1[1])
      {
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
        goto LABEL_144;
      }
      memset(v141, 0, sizeof(v141));
      uint64_t v19 = one-time initialization token for _lock;
      swift_retain();
      if (v19 != -1) {
        swift_once();
      }
      uint64_t v20 = static Update._lock;
      _MovableLockLock(static Update._lock);
      specialized static Update.begin()();
      uint64_t v130 = v17;
      v132[0] = v17;
      unint64_t v140 = a1[8];
      int64_t v21 = v127;
      outlined init with copy of AnyTrackedValue(v127, (uint64_t)&v133);
      uint64_t v22 = *((void *)&v134 + 1);
      uint64_t v23 = v135;
      uint64_t v24 = __swift_project_boxed_opaque_existential_1(&v133, *((uint64_t *)&v134 + 1));
      MEMORY[0x270FA5388](v24);
      int64_t v114 = v21;
      uint64_t v115 = v141;
      swift_bridgeObjectRetain();
      char v139 = 1;
      ViewList.applySublists(from:list:transform:to:)((uint64_t)v132, 0x100000000, (uint64_t)&v140, (uint64_t)partial apply for closure #1 in closure #1 in _VariadicView_Children.subscript.getter, (uint64_t)&v113, v22, v23);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
      static Update.end()();
      _MovableLockUnlock(v20);
      uint64_t v9 = &lazy cache variable for type metadata for _VariadicView_Children.Element?;
      int64_t p_cache = (int64_t)&type metadata for _VariadicView_Children.Element;
      _s7SwiftUI22CoordinateSpaceGestureVy12CoreGraphics7CGFloatVGWOcTm_0((uint64_t)v141, (uint64_t)&v133, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element, MEMORY[0x263F8D8F0]);
      if (*((void *)&v134 + 1))
      {
        long long v145 = v135;
        long long v146 = v136;
        long long v147 = v137;
        long long v148 = v138;
        long long v143 = v133;
        long long v144 = v134;
        int64_t v25 = v122;
        a1 = v123;
      }
      else
      {
        _sypSgWOhTm_9((uint64_t)&v133, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
        static os_log_type_t.fault.getter();
        int64_t v25 = v122;
        if (one-time initialization token for internalErrorsLog != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v26 = (void *)static Log.internalErrorsLog;
        _s7SwiftUI16TimelineSchedule_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
        uint64_t v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = v117;
        *(void *)(v27 + 56) = MEMORY[0x263F8D6C8];
        *(void *)(v27 + 64) = MEMORY[0x263F8D750];
        uint64_t v28 = v130;
        *(void *)(v27 + 32) = v130;
        id v29 = v26;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
        *((void *)&v144 + 1) = &type metadata for EmptyViewListElements;
        *(void *)&long long v145 = &protocol witness table for EmptyViewListElements;
        *((void *)&v145 + 1) = 0;
        a1 = v123;
        if (v28 > 0x7FFFFFFF) {
          goto LABEL_145;
        }
        if (v25 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_146;
        }
        LODWORD(v146) = 0;
        DWORD1(v146) = ~v28;
        char v30 = v116;
        *((void *)v116 + 1) = 0;
        *((void *)v30 + 2) = 0;
        *(void *)char v30 = 0;
        *((void *)&v146 + 1) = MEMORY[0x263F8EE78];
        *((void *)&v148 + 1) = MEMORY[0x263F8EE78];
      }
      _sypSgWOhTm_9((uint64_t)v141, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
      swift_getAtKeyPath();
      outlined destroy of Subview((uint64_t)&v143);
      swift_release();
      uint64_t v31 = v126;
      swift_beginAccess();
      uint64_t v32 = *v31;
      if (*(void *)(v32 + 16)
        && (unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v141), (v34 & 1) != 0))
      {
        uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
        swift_endAccess();
        uint64_t v36 = v131;
        uint64_t v37 = v128;
        *(void *)(v131 + 296) = v128;
        swift_beginAccess();
        *(void *)(v35 + 136) = v130;
        uint64_t v38 = *(void *)(v36 + 304);
        *(void *)(v35 + 144) = v37;
        *(void *)(v35 + 152) = v38;
        *(_DWORD *)(v35 + 160) = *(_DWORD *)(v36 + 312);
        --v129;
        if ((*(unsigned char *)(v35 + 166) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v118 = *v119;
          swift_bridgeObjectRetain();
          int v39 = 1;
          goto LABEL_31;
        }
      }
      else
      {
        swift_endAccess();
      }
      int v39 = 0;
LABEL_31:
      uint64_t v40 = *v124;
      if (!*(void *)(*v124 + 16)) {
        goto LABEL_37;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      AnyHashable.hash(into:)();
      Swift::Int v41 = Hasher._finalize()();
      uint64_t v42 = -1 << *(unsigned char *)(v40 + 32);
      unint64_t v43 = v41 & ~v42;
      if (((*(void *)(v40 + 56 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
      {
LABEL_36:
        swift_bridgeObjectRelease();
LABEL_37:
        if (!v39)
        {
          outlined init with copy of Subview.ID((uint64_t)v141, (uint64_t)&v143);
          unint64_t v46 = v119;
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v132[0] = *v46;
          *unint64_t v46 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, (uint64_t)&v143, isUniquelyReferenced_nonNull_native);
          *unint64_t v46 = v132[0];
          swift_bridgeObjectRelease();
          outlined destroy of Subview.ID((uint64_t)&v143);
          swift_endAccess();
        }
        goto LABEL_40;
      }
      uint64_t v44 = ~v42;
      while (1)
      {
        outlined init with copy of Subview.ID(*(void *)(v40 + 48) + 40 * v43, (uint64_t)&v143);
        char v45 = MEMORY[0x24C523BA0](&v143, v141);
        outlined destroy of Subview.ID((uint64_t)&v143);
        if (v45) {
          break;
        }
        unint64_t v43 = (v43 + 1) & v44;
        if (((*(void *)(v40 + 56 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43) & 1) == 0) {
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease();
      outlined init with copy of Subview.ID((uint64_t)v141, (uint64_t)&v133);
      specialized Set._Variant.insert(_:)((uint64_t)&v143, (uint64_t)&v133);
      outlined destroy of Subview.ID((uint64_t)&v143);
      Swift::String v125 = (unint64_t *)((char *)v125 - 1);
LABEL_40:
      uint64_t v9 = v121;
      int64_t p_cache = (int64_t)&OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
      uint64_t v48 = static Update._lock;
      _MovableLockLock(static Update._lock);
      specialized static Update.begin()();
      uint64_t v49 = a1[5];
      uint64_t v50 = a1[6];
      __swift_project_boxed_opaque_existential_1((void *)v127, v49);
      uint64_t v51 = ViewList.count.getter(v49, v50);
      static Update.end()();
      _MovableLockUnlock(v48);
      uint64_t v52 = v130;
      if (v25 < 0 || v130 >= v51) {
        goto LABEL_136;
      }
      outlined destroy of Subview.ID((uint64_t)v141);
      BOOL v15 = v129 == 0;
      if (v129 | (unint64_t)v125)
      {
        uint64_t v17 = v52 + 1;
        ++v128;
        if ((unint64_t *)v17 != v9) {
          continue;
        }
      }
      break;
    }
  }
  if (*(unsigned char *)(v131 + 316))
  {
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_149;
    }
  }
  else
  {
    *uint64_t v119 = v118;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_149;
    }
  }
  unint64_t v140 = MEMORY[0x263F8EE78];
  uint64_t v74 = *v126;
  uint64_t v75 = specialized Dictionary.startIndex.getter(*v126);
  if (v77) {
    goto LABEL_161;
  }
  unint64_t v78 = v75;
  int64_t p_cache = v76;
  uint64_t v9 = (unint64_t *)(1 << *(unsigned char *)(v74 + 32));
  LODWORD(v128) = *(_DWORD *)(v74 + 36);
  int64_t v127 = v76;
  uint64_t v79 = v76;
  Swift::String v125 = v9;
  do
  {
    if (p_cache != v128) {
      goto LABEL_137;
    }
    if ((unint64_t *)v78 == v9) {
      goto LABEL_118;
    }
    if ((v78 & 0x8000000000000000) != 0) {
      goto LABEL_138;
    }
    uint64_t v80 = *v126;
    uint64_t v81 = 1 << *(unsigned char *)(*v126 + 32);
    if ((uint64_t)v78 >= v81) {
      goto LABEL_138;
    }
    unint64_t v82 = v78 >> 6;
    if ((*(void *)(v80 + 8 * (v78 >> 6) + 64) & (1 << v78)) == 0) {
      goto LABEL_139;
    }
    if (*(_DWORD *)(v80 + 36) != v79) {
      goto LABEL_140;
    }
    int64_t p_cache = v79;
    uint64_t v130 = v79;
    uint64_t v83 = *(void *)(*(void *)(v80 + 56) + 8 * v78);
    if (*(unsigned char *)(v83 + 166))
    {
      swift_retain();
    }
    else
    {
      int v84 = *(_DWORD *)(v83 + 160);
      int v85 = *(_DWORD *)(v131 + 312);
      swift_retain();
      if (v84 != v85)
      {
        uint64_t v86 = swift_retain();
        MEMORY[0x24C522D60](v86);
        if (*(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        --v129;
        outlined init with copy of Subview.ID(v83 + 32, (uint64_t)&v143);
        uint64_t v87 = v119;
        swift_beginAccess();
        char v88 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v133 = *v87;
        *uint64_t v87 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, (uint64_t)&v143, v88);
        *uint64_t v87 = v133;
        swift_bridgeObjectRelease();
        outlined destroy of Subview.ID((uint64_t)&v143);
        swift_endAccess();
        uint64_t v80 = *v126;
        uint64_t v81 = 1 << *(unsigned char *)(*v126 + 32);
      }
      uint64_t v9 = v125;
    }
    if ((uint64_t)v78 >= v81) {
      goto LABEL_141;
    }
    uint64_t v89 = v80 + 64;
    uint64_t v90 = *(void *)(v80 + 64 + 8 * v82);
    if ((v90 & (1 << v78)) == 0) {
      goto LABEL_142;
    }
    if (*(_DWORD *)(v80 + 36) != p_cache) {
      goto LABEL_143;
    }
    unint64_t v91 = v90 & (-2 << (v78 & 0x3F));
    if (v91)
    {
      swift_release();
      unint64_t v78 = __clz(__rbit64(v91)) | v78 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_85;
    }
    unint64_t v92 = v82 + 1;
    unint64_t v93 = (unint64_t)(v81 + 63) >> 6;
    if (v82 + 1 >= v93) {
      goto LABEL_115;
    }
    unint64_t v94 = *(void *)(v89 + 8 * v92);
    if (!v94)
    {
      unint64_t v92 = v82 + 2;
      if (v82 + 2 >= v93) {
        goto LABEL_115;
      }
      unint64_t v94 = *(void *)(v89 + 8 * v92);
      if (!v94)
      {
        unint64_t v92 = v82 + 3;
        if (v82 + 3 >= v93) {
          goto LABEL_115;
        }
        unint64_t v94 = *(void *)(v89 + 8 * v92);
        if (!v94)
        {
          while (v93 - 4 != v82)
          {
            unint64_t v94 = *(void *)(v80 + 96 + 8 * v82++);
            if (v94)
            {
              outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v78, v130, 0);
              swift_release();
              unint64_t v92 = v82 + 3;
              goto LABEL_106;
            }
          }
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v78, v130, 0);
LABEL_115:
          swift_release();
          unint64_t v78 = v81;
          goto LABEL_85;
        }
      }
    }
    swift_release();
LABEL_106:
    unint64_t v78 = __clz(__rbit64(v94)) | (v92 << 6);
LABEL_85:
    uint64_t v79 = v127;
  }
  while (v129);
  uint64_t v9 = (unint64_t *)v78;
  uint64_t v79 = v127;
LABEL_118:
  int64_t p_cache = v140;
  uint64_t v130 = v79;
  if (v140 >> 62) {
    goto LABEL_147;
  }
  uint64_t v95 = *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v95) {
    goto LABEL_120;
  }
LABEL_148:
  swift_bridgeObjectRelease();
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant((uint64_t)v9, v130, 0);
LABEL_149:
  uint64_t v8 = v131;
  if ((*(unsigned char *)(v131 + 316) & 1) == 0) {
    *(void *)(v131 + 296) = 0x7FFFFFFFFFFFFFFFLL;
  }
  *uint64_t v124 = v142;
  swift_bridgeObjectRelease();
LABEL_152:
  *(unsigned char *)(v8 + 316) = 0;
}

uint64_t outlined assign with take of ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

void type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v9[0] = &type metadata for _VariadicView_Children;
    v9[1] = MEMORY[0x263F8DB68];
    v9[2] = &type metadata for _VariadicView_Children.Element;
    v9[3] = v6;
    v9[4] = MEMORY[0x263F8DB70];
    v9[5] = &protocol witness table for _VariadicView_Children.Element;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t (*GraphHost.hostPreferenceValues.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id static Font.PrivateTextStyle.footnote2.getter@<X0>(void *a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = *a2;
  *a3 = *a2;

  return v5;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance GeometryEffectDisplayList<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance GeometryEffectTransform<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ForegroundEnvironment<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

__n128 _ViewListInputs.init(_:options:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *a2;
  int v7 = *MEMORY[0x263F288F8];
  *(void *)a3 = *(void *)a1;
  *(_DWORD *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a3 + 24) = result;
  *(void *)(a3 + 40) = v5;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = v6;
  *(_DWORD *)(a3 + 64) = v7;
  *(void *)(a3 + 72) = MEMORY[0x263F8EE88];
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

uint64_t type metadata completion function for _AnyLayoutBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance EveryMinuteTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of Range<Date>(v1, a1, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
}

uint64_t outlined init with take of Range<Date>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _sSny10Foundation4DateVGWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in EveryMinuteTimelineSchedule.Entries()
{
  return _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule.Entries and conformance EveryMinuteTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for EveryMinuteTimelineSchedule.Entries);
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in EveryMinuteTimelineSchedule()
{
  return _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type EveryMinuteTimelineSchedule.Entries and conformance EveryMinuteTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for EveryMinuteTimelineSchedule.Entries);
}

uint64_t _s10Foundation4DateVACSLAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_3(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_6(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for EveryMinuteTimelineSchedule.Entries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for EveryMinuteTimelineSchedule.Entries);
}

uint64_t static _InsettableBackgroundShapeModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v14 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  int v24 = *(_DWORD *)(a2 + 80);
  v42[1] = *a1;
  uint64_t v17 = *(void *)(a8 + 8);
  type metadata accessor for _BackgroundShapeModifier();
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  type metadata accessor for _InsettableBackgroundShapeModifier();
  type metadata accessor for _GraphValue();
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v19 = *(void *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 56);
  long long v23 = *(_OWORD *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 72);
  _GraphValue.unsafeBitCast<A>(to:)(v42);
  uint64_t v33 = v14;
  LODWORD(v34) = v15;
  uint64_t v35 = v16;
  uint64_t v36 = v18;
  uint64_t v37 = v19;
  long long v38 = v23;
  long long v39 = v22;
  uint64_t v40 = v20;
  int v41 = v24;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  return static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(v42, (uint64_t)&v33, 1, a3, a4, (void (*)(long long *, uint64_t))partial apply for closure #1 in static _InsettableBackgroundShapeModifier._makeView(modifier:inputs:body:), (uint64_t)v28, a5, a9, a6, a7, v17);
}

uint64_t type metadata accessor for _InsettableBackgroundShapeModifier()
{
  return swift_getGenericMetadata();
}

uint64_t static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X3>, uint64_t a5@<X4>, void (*a6)(long long *, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void (*v116)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  int v117;
  void *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned char v124[12];
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned char v132[24];
  uint64_t v133;
  long long v134;
  unint64_t v135;
  int v136;
  long long v137;
  uint64_t v138;
  unsigned char v139[24];
  uint64_t v140;
  long long v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t *v146;
  long long v147;
  uint64_t v148;
  uint64_t v149;
  long long v150;
  unint64_t v151;
  int v152;
  uint64_t v153;

  uint64_t v113 = a7;
  int64_t v114 = (void (*)(long long *, uint64_t))a6;
  uint64_t v115 = a5;
  uint64_t v116 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))a4;
  long long v117 = a3;
  uint64_t v118 = a9;
  uint64_t v153 = *MEMORY[0x263EF8340];
  unsigned int v13 = *a1;
  uint64_t v14 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v16 = *(uint64_t **)(a2 + 16);
  unsigned int v17 = *(_DWORD *)(a2 + 24);
  unsigned int v18 = *(_DWORD *)(a2 + 28);
  unsigned int v19 = *(_DWORD *)(a2 + 32);
  unsigned int v20 = *(_DWORD *)(a2 + 36);
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v21 = *(void *)(a2 + 48);
  unsigned int v23 = *(_DWORD *)(a2 + 56);
  unsigned int v24 = *(_DWORD *)(a2 + 60);
  unsigned int v25 = *(_DWORD *)(a2 + 64);
  unsigned int v26 = *(_DWORD *)(a2 + 68);
  unsigned int v28 = *(_DWORD *)(a2 + 72);
  unsigned int v27 = *(_DWORD *)(a2 + 76);
  int v29 = *(_DWORD *)(a2 + 80);
  long long v144 = v14;
  *(_DWORD *)uint64_t v124 = v17;
  *(_DWORD *)&v124[4] = v15;
  long long v145 = v15;
  long long v146 = v16;
  *(void *)&long long v147 = __PAIR64__(v18, v17);
  int64_t v122 = v20;
  uint64_t v123 = v18;
  unsigned int v110 = v23;
  unsigned int v111 = v19;
  *((void *)&v147 + 1) = __PAIR64__(v20, v19);
  long long v148 = v22;
  char v149 = v21;
  *(void *)&unint64_t v150 = __PAIR64__(v24, v23);
  unsigned int v108 = v25;
  unsigned int v109 = v24;
  *((void *)&v150 + 1) = __PAIR64__(v26, v25);
  unsigned int v106 = v28;
  unsigned int v107 = v26;
  int v151 = __PAIR64__(v27, v28);
  int v104 = v29;
  unsigned int v105 = v27;
  uint64_t v152 = v29;
  swift_retain_n();
  Swift::String v125 = (uint64_t)v16;
  swift_retain();
  uint64_t v119 = v22;
  swift_bridgeObjectRetain();
  uint64_t v121 = v21;
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(&v144, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  uint64_t v112 = v14;
  swift_release();
  uint64_t v30 = *(void *)(*(void *)(a8 - 8) + 64);
  if (v30) {
    closure #1 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(1, a8, a10, a11, a12, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  uint64_t v95 = v30;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v32 = v125;
  swift_beginAccess();
  uint64_t v120 = v13;
  int v33 = *(_DWORD *)(v32 + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a12 + 32))(&v126, a10, a12);
  uint64_t v129 = *(void *)v124;
  LODWORD(v130) = v123;
  uint64_t v131 = 0;
  *(void *)int64_t v132 = 0;
  *(_DWORD *)&v132[8] = 0;
  ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)(OffsetAttribute2, *MEMORY[0x263F288F8], v33, (char *)&v126, v122 & 1, (uint64_t)&v129, (uint64_t)&v137);
  LODWORD(v130) = DWORD2(v137);
  uint64_t v129 = v137;
  WORD2(v130) = WORD6(v137);
  uint64_t v131 = v138;
  *(_DWORD *)int64_t v132 = *(_DWORD *)v139;
  *(_OWORD *)&v132[8] = *(_OWORD *)&v139[8];
  LODWORD(v133) = v140;
  *(void *)&long long v134 = v141;
  MEMORY[0x270FA5388](v34);
  uint64_t v92 = type metadata accessor for ShapeStyleResolver();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<_ShapeStyle_Pack>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v129, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v91, v92, MEMORY[0x263F8E628], v35, MEMORY[0x263F8E658], v36);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  LODWORD(v103) = v126;
  AGGraphSetFlags();
  uint64_t v37 = *(void *)(a12 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v39 = AssociatedTypeWitness - 8;
  uint64_t v41 = *(void *)(v40 + 64);
  uint64_t v97 = a8;
  uint64_t v98 = a11;
  uint64_t v96 = a12;
  if (v41)
  {
    uint64_t v102 = &v94;
    MEMORY[0x270FA5388](v39);
    v91[0] = a8;
    v91[1] = a10;
    uint64_t v92 = a11;
    uint64_t WitnessTable = a12;
    LODWORD(v129) = v120;
    *(void *)&long long v137 = a8;
    *((void *)&v137 + 1) = a10;
    long long v138 = a11;
    *(void *)char v139 = a12;
    type metadata accessor for _BackgroundShapeModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #3 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:), a10, &v126);
    uint64_t v42 = v112;
    *(void *)&long long v137 = v112;
    DWORD2(v137) = *(_DWORD *)&v124[4];
    long long v138 = v125;
    *(_DWORD *)char v139 = *(_DWORD *)v124;
    *(_DWORD *)&v139[4] = v123;
    unsigned int v43 = v111;
    *(_DWORD *)&v139[8] = v111;
    *(_DWORD *)&v139[12] = v122;
    *(void *)&v139[16] = v119;
    uint64_t v44 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v126, (uint64_t *)&v137, a10, v37);
    uint64_t v45 = v42;
    closure #4 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(1, a8, a10, a11, a12);
    uint64_t v46 = v44;
    uint64_t v47 = AGGraphCreateOffsetAttribute2();
    unint64_t v48 = AnimatedShape.Init.init(shape:fillStyle:)(v44, v47);
    uint64_t v49 = type metadata accessor for AnimatedShape();
    *(void *)&long long v137 = v48;
    unsigned int v50 = v43;
    uint64_t v51 = type metadata accessor for AnimatedShape.Init();
    uint64_t v52 = swift_getWitnessTable();
    _GraphValue.init<A>(_:)((uint64_t)&v137, v49, v51, v52, &v126);
    uint64_t v53 = v144;
    uint64_t v54 = v146;
    uint64_t v55 = v148;
    uint64_t v56 = v149;
    *(void *)&long long v137 = v144;
    DWORD2(v137) = v145;
    *(_OWORD *)char v139 = v147;
    long long v138 = (uint64_t)v146;
    *(void *)&v139[16] = v148;
    unint64_t v140 = v149;
    unint64_t v141 = v150;
    uint64_t v142 = v151;
    long long v143 = v152;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)((unsigned int *)&v126, &v137, v103, 0, v57, v49, (uint64_t)&protocol witness table for AnimatedShape<A>, &v129);
    uint64_t v58 = v119;
    uint64_t v100 = v56;
    swift_bridgeObjectRelease();
    uint64_t v101 = v55;
    swift_bridgeObjectRelease();
    uint64_t v102 = v54;
    swift_release();
    uint64_t v103 = v53;
    swift_release();
    unsigned int v60 = v122;
    unsigned int v59 = v123;
    uint64_t v99 = v129;
    int v61 = v130;
    uint64_t v62 = v121;
    char v63 = v117;
    uint64_t v64 = v125;
    int v66 = *(_DWORD *)v124;
    int v65 = *(_DWORD *)&v124[4];
  }
  else
  {
    *(void *)&long long v137 = a8;
    *((void *)&v137 + 1) = a10;
    long long v138 = a11;
    *(void *)char v139 = a12;
    uint64_t v67 = type metadata accessor for _BackgroundShapeModifier();
    uint64_t v68 = v144;
    unint64_t v69 = v146;
    uint64_t v70 = v148;
    uint64_t v71 = v149;
    LODWORD(v126) = v120;
    *(void *)&long long v137 = v144;
    DWORD2(v137) = v145;
    *(_OWORD *)char v139 = v147;
    long long v138 = (uint64_t)v146;
    *(void *)&v139[16] = v148;
    unint64_t v140 = v149;
    unint64_t v141 = v150;
    uint64_t v142 = v151;
    long long v143 = v152;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)((unsigned int *)&v126, &v137, v103, 0, v72, v67, (uint64_t)&protocol witness table for _BackgroundShapeModifier<A, B>, &v129);
    uint64_t v100 = v71;
    swift_bridgeObjectRelease();
    uint64_t v101 = v70;
    swift_bridgeObjectRelease();
    uint64_t v102 = v69;
    swift_release();
    uint64_t v103 = v68;
    swift_release();
    uint64_t v99 = v129;
    int v61 = v130;
    if (*(void *)(*(void *)(a10 - 8) + 64)) {
      closure #2 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(1, a8, a10, a11, a12, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
    }
    uint64_t v62 = v121;
    char v63 = v117;
    uint64_t v64 = v125;
    uint64_t v45 = v112;
    uint64_t v46 = AGGraphCreateOffsetAttribute2();
    uint64_t v58 = v119;
    int v66 = *(_DWORD *)v124;
    int v65 = *(_DWORD *)&v124[4];
    unsigned int v60 = v122;
    unsigned int v59 = v123;
    unsigned int v50 = v111;
  }
  *(void *)&long long v137 = v45;
  DWORD2(v137) = v65;
  long long v138 = v64;
  *(_DWORD *)char v139 = v66;
  *(_DWORD *)&v139[4] = v59;
  *(_DWORD *)&v139[8] = v50;
  *(_DWORD *)&v139[12] = v60;
  *(void *)&v139[16] = v58;
  unint64_t v140 = v62;
  *(void *)&unint64_t v141 = __PAIR64__(v109, v110);
  *((void *)&v141 + 1) = __PAIR64__(v107, v108);
  uint64_t v142 = __PAIR64__(v105, v106);
  long long v143 = v104;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v63)
  {
    if (v95)
    {
      uint64_t v74 = v97;
      uint64_t v73 = v98;
      uint64_t v75 = v96;
      uint64_t v76 = closure #1 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(1, v97, a10, v98, v96, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
    }
    else
    {
      uint64_t v76 = 0;
      uint64_t v74 = v97;
      uint64_t v73 = v98;
      uint64_t v75 = v96;
    }
    uint64_t v129 = v74;
    uint64_t v130 = a10;
    uint64_t v131 = v73;
    *(void *)int64_t v132 = v75;
    uint64_t v77 = type metadata accessor for _BackgroundShapeModifier();
    _ViewInputs.applyBackgroundStyle<A, B>(value:offset:)(v120, v76, v77, v74, v73);
    uint64_t v62 = v121;
  }
  v114(&v137, v46);
  uint64_t v78 = v137;
  uint64_t v129 = v137;
  LODWORD(v130) = DWORD2(v137);
  uint64_t v131 = v138;
  *(_OWORD *)int64_t v132 = *(_OWORD *)v139;
  *(void *)&v132[16] = *(void *)&v139[16];
  long long v133 = v140;
  long long v134 = v141;
  long long v135 = v142;
  long long v136 = v143;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v79 = swift_bridgeObjectRetain();
  v116(&v126, v79, &v129);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v80 = v127;
  LODWORD(v125) = v128;
  uint64_t v81 = v99;
  if (v63) {
    uint64_t v82 = v99;
  }
  else {
    uint64_t v82 = v126;
  }
  if (v63) {
    int v83 = v61;
  }
  else {
    int v83 = v127;
  }
  if (v63) {
    uint64_t v81 = v126;
  }
  else {
    int v80 = v61;
  }
  *(void *)&v132[8] = MEMORY[0x263F8EE78];
  *(_DWORD *)&v132[16] = 0;
  uint64_t v129 = v82;
  LODWORD(v130) = v83;
  uint64_t v131 = v81;
  *(_DWORD *)int64_t v132 = v80;
  uint64_t v84 = *(void *)(v62 + 16);
  if (v84)
  {
    *(void *)&v124[4] = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v85 = (uint64_t *)(v62 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v129, *(v85 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v85, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v85 += 2;
      --v84;
    }
    while (v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v86 = *(void *)&v132[8];
  int v87 = *(_DWORD *)&v132[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v89 = v118;
  *uint64_t v118 = v86;
  int v90 = v125;
  *((_DWORD *)v89 + 2) = v87;
  *((_DWORD *)v89 + 3) = v90;
  return result;
}

uint64_t _ViewInputs.applyBackgroundStyle<A, B>(value:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v25 = *MEMORY[0x263EF8340];
  char v24 = 2;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 40))(&v24, a4, a5);
  if (v24)
  {
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    uint64_t v9 = *(void *)(v5 + 16);
    uint64_t v10 = swift_beginAccess();
    int v11 = *(_DWORD *)(v9 + 16);
    v23[0] = OffsetAttribute2;
    v23[1] = v11;
    MEMORY[0x270FA5388](v10);
    uint64_t v20 = type metadata accessor for ForegroundEnvironment();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<_ShapeStyle_Pack>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v23, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v19, v20, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v13);
    int v14 = v22;
    uint64_t v15 = MEMORY[0x263F8EE78];
    unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    type metadata accessor for Attribute<_ShapeStyle_Pack>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
    uint64_t v17 = swift_allocObject();
    *(_DWORD *)(v17 + 16) = v14;
    *(void *)(v17 + 24) = v15;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_WORD *)(v17 + 80) = 256;
    *(void *)(v17 + 88) = v16;
    uint64_t result = swift_release();
    *(void *)(v6 + 16) = v17;
    int v18 = *(_DWORD *)(v6 + 32);
    if ((v18 & 0x20) == 0) {
      *(_DWORD *)(v6 + 32) = v18 | 0x20;
    }
  }
  return result;
}

uint64_t type metadata accessor for ForegroundEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *protocol witness for static ShapeStyle._apply(to:) in conformance AnyShapeStyle(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t closure #1 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  v12[2] = type metadata accessor for _BackgroundShapeModifier();
  uint64_t v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t type metadata accessor for _BackgroundShapeModifier()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in static _InsettableBackgroundShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.setContainerShape<A>(_:isSystemShape:)(a2, 0, *(ValueMetadata **)(v2 + 24));
}

uint64_t closure #4 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v6 = type metadata accessor for _BackgroundShapeModifier();
  uint64_t v7 = a1 + *(int *)(v6 + 56);
  v11[2] = v6;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, (uint64_t)&type metadata for FillStyle, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  return v12;
}

unint64_t AnimatedShape.Init.init(shape:fillStyle:)(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t _ViewInputs.setContainerShape<A>(_:isSystemShape:)(uint64_t a1, char a2, ValueMetadata *a3)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  if (a3 != &type metadata for ContainerRelativeShape)
  {
    uint64_t v4 = v3;
    uint64_t v5 = AGMakeUniqueID();
    unint64_t v6 = *(void *)v4;
    int v96 = *(_DWORD *)(v4 + 8);
    uint64_t v7 = *(void *)(v4 + 16);
    unint64_t v93 = *(void *)(v4 + 24);
    unsigned int v9 = *(_DWORD *)(v4 + 32);
    unsigned int v8 = *(_DWORD *)(v4 + 36);
    unint64_t v11 = *(void *)(v4 + 40);
    unint64_t v10 = *(void *)(v4 + 48);
    int v13 = *(_DWORD *)(v4 + 56);
    unsigned int v12 = *(_DWORD *)(v4 + 60);
    int v101 = *(_DWORD *)(v4 + 64);
    int v90 = *(_DWORD *)(v4 + 68);
    int v84 = *(_DWORD *)(v4 + 76);
    unsigned int v87 = *(_DWORD *)(v4 + 72);
    int v81 = *(_DWORD *)(v4 + 80);
    swift_beginAccess();
    uint64_t v100 = v5;
    if ((v8 & 0x20) == 0)
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LODWORD(v14) = v101;
      unsigned int v15 = v12;
      goto LABEL_16;
    }
    unint64_t v111 = v6;
    LODWORD(v112) = v96;
    uint64_t v113 = (_UNKNOWN **)v7;
    unint64_t v114 = v93;
    unint64_t v115 = __PAIR64__(v8, v9);
    unint64_t v116 = v11;
    unint64_t v117 = v10;
    int v118 = v13;
    int v119 = v12;
    int v120 = v101;
    int v121 = v90;
    unsigned int v122 = v87;
    int v123 = v84;
    int v124 = v81;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v75 = v10;
    swift_bridgeObjectRetain_n();
    unsigned int v16 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v18 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v7 + 81) & 1) == 0
      && v101 == *(_DWORD *)(v7 + 32)
      && v87 == *(_DWORD *)(v7 + 36)
      && v18 == *(_DWORD *)(v7 + 40)
      && v96 == *(_DWORD *)(v7 + 44)
      && v16 == *(_DWORD *)(v7 + 48)
      && v93 == *(_DWORD *)(v7 + 52))
    {
      unsigned int v15 = v12;
      if ((*(unsigned char *)(v7 + 64) & 1) == 0)
      {
        LODWORD(v14) = *(_DWORD *)(v7 + 60);
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v111 = v6;
      LODWORD(v112) = v96;
      uint64_t v113 = (_UNKNOWN **)v7;
      unint64_t v114 = __PAIR64__(v16, v93);
      unint64_t v115 = __PAIR64__(v8, v9);
      unint64_t v116 = v11;
      unint64_t v117 = v75;
      unsigned int v15 = v12;
      int v118 = v13;
      int v119 = v12;
      int v120 = v101;
      int v121 = v90;
      unsigned int v122 = v87;
      int v123 = v84;
      int v124 = v81;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v111, v18, (uint64_t)&v104);
      long long v19 = v105;
      uint64_t v20 = v106;
      unsigned __int8 v21 = v110;
      unint64_t v22 = v106 | ((unint64_t)v107 << 32);
      unint64_t v23 = v108 | ((unint64_t)v109 << 32);
      *(_OWORD *)(v7 + 32) = v104;
      *(_OWORD *)(v7 + 48) = v19;
      *(void *)(v7 + 64) = v22;
      *(void *)(v7 + 72) = v23;
      *(_WORD *)(v7 + 80) = v21;
      if (v20 != 1)
      {
        uint64_t v14 = HIDWORD(*((void *)&v19 + 1));
LABEL_15:
        uint64_t v5 = v100;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_16:
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v111 = __PAIR64__(v14, v15);
        uint64_t v112 = v5;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type ContainerShapeTransform and conformance ContainerShapeTransform();
        int v24 = Attribute.init<A>(body:value:flags:update:)();
        *(_DWORD *)(v4 + 60) = v24;
        unsigned int v25 = *(_DWORD *)(v4 + 36);
        int v26 = *(_DWORD *)(v4 + 32) | 4;
        *(_DWORD *)(v4 + 32) = v26;
        unint64_t v27 = *(void *)v4;
        int v28 = *(_DWORD *)(v4 + 8);
        uint64_t v29 = *(void *)(v4 + 16);
        unint64_t v97 = *(void *)(v4 + 24);
        unint64_t v30 = *(void *)(v4 + 40);
        unint64_t v31 = *(void *)(v4 + 48);
        int v102 = *(_DWORD *)(v4 + 64);
        int v91 = *(_DWORD *)(v4 + 68);
        int v94 = *(_DWORD *)(v4 + 56);
        int v82 = *(_DWORD *)(v4 + 76);
        unsigned int v85 = *(_DWORD *)(v4 + 72);
        int v88 = *(_DWORD *)(v4 + 80);
        swift_beginAccess();
        if ((v25 & 0x20) == 0)
        {
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_30;
        }
        unint64_t v111 = v27;
        LODWORD(v112) = v28;
        uint64_t v113 = (_UNKNOWN **)v29;
        unint64_t v114 = v97;
        unint64_t v115 = __PAIR64__(v25, v26);
        unint64_t v116 = v30;
        unint64_t v117 = v31;
        int v118 = v94;
        int v119 = v24;
        int v120 = v102;
        int v121 = v91;
        unsigned int v122 = v85;
        int v123 = v82;
        int v124 = v88;
        unint64_t v77 = v27;
        swift_retain_n();
        swift_retain_n();
        unint64_t v79 = v30;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unsigned int v32 = _ViewInputs.geometryTransaction()();
        uint64_t v33 = swift_getKeyPath();
        int v34 = specialized CachedEnvironment.attribute<A>(keyPath:)(v33);
        swift_release();
        if ((*(unsigned char *)(v29 + 81) & 1) == 0
          && v102 == *(_DWORD *)(v29 + 32)
          && v85 == *(_DWORD *)(v29 + 36)
          && v34 == *(_DWORD *)(v29 + 40)
          && v28 == *(_DWORD *)(v29 + 44)
          && v32 == *(_DWORD *)(v29 + 48)
          && v97 == *(_DWORD *)(v29 + 52))
        {
          if ((*(unsigned char *)(v29 + 64) & 1) == 0) {
            goto LABEL_29;
          }
        }
        else
        {
          unint64_t v111 = v77;
          LODWORD(v112) = v28;
          uint64_t v113 = (_UNKNOWN **)v29;
          unint64_t v114 = __PAIR64__(v32, v97);
          unint64_t v115 = __PAIR64__(v25, v26);
          unint64_t v116 = v79;
          unint64_t v117 = v31;
          int v118 = v94;
          int v119 = v24;
          int v120 = v102;
          int v121 = v91;
          unsigned int v122 = v85;
          int v123 = v82;
          int v124 = v88;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v111, v34, (uint64_t)&v104);
          long long v35 = v105;
          uint64_t v36 = v106;
          unsigned __int8 v37 = v110;
          unint64_t v38 = v106 | ((unint64_t)v107 << 32);
          unint64_t v39 = v108 | ((unint64_t)v109 << 32);
          *(_OWORD *)(v29 + 32) = v104;
          *(_OWORD *)(v29 + 48) = v35;
          *(void *)(v29 + 64) = v38;
          *(void *)(v29 + 72) = v39;
          *(_WORD *)(v29 + 80) = v37;
          if (v36 != 1) {
            goto LABEL_29;
          }
        }
        *(_DWORD *)(v29 + 60) = AGGraphCreateOffsetAttribute2();
        *(unsigned char *)(v29 + 64) = 0;
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_30:
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v40 = AGCreateWeakAttribute();
        unint64_t v41 = *(void *)v4;
        unsigned int v103 = v40;
        unint64_t v98 = HIDWORD(v40);
        int v92 = *(_DWORD *)(v4 + 8);
        uint64_t v42 = *(void *)(v4 + 16);
        unint64_t v89 = *(void *)(v4 + 24);
        unsigned int v43 = *(_DWORD *)(v4 + 32);
        unsigned int v44 = *(_DWORD *)(v4 + 36);
        unint64_t v46 = *(void *)(v4 + 40);
        unint64_t v45 = *(void *)(v4 + 48);
        int v47 = *(_DWORD *)(v4 + 56);
        int v48 = *(_DWORD *)(v4 + 60);
        int v49 = *(_DWORD *)(v4 + 68);
        int v80 = *(_DWORD *)(v4 + 64);
        unsigned int v95 = *(_DWORD *)(v4 + 72);
        int v83 = *(_DWORD *)(v4 + 80);
        int v86 = *(_DWORD *)(v4 + 76);
        swift_beginAccess();
        if ((v44 & 0x20) == 0)
        {
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_43;
        }
        unint64_t v111 = v41;
        LODWORD(v112) = v92;
        uint64_t v113 = (_UNKNOWN **)v42;
        unint64_t v114 = v89;
        unint64_t v115 = __PAIR64__(v44, v43);
        unint64_t v116 = v46;
        unint64_t v117 = v45;
        int v118 = v47;
        int v119 = v48;
        int v120 = v80;
        int v121 = v49;
        unsigned int v122 = v95;
        int v123 = v86;
        int v124 = v83;
        unint64_t v78 = v41;
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v76 = v45;
        swift_bridgeObjectRetain_n();
        unsigned int v50 = _ViewInputs.geometryTransaction()();
        uint64_t v51 = swift_getKeyPath();
        int v52 = specialized CachedEnvironment.attribute<A>(keyPath:)(v51);
        swift_release();
        if ((*(unsigned char *)(v42 + 81) & 1) == 0
          && v80 == *(_DWORD *)(v42 + 32)
          && __PAIR64__(v52, v95) == *(void *)(v42 + 36)
          && v92 == *(_DWORD *)(v42 + 44)
          && v50 == *(_DWORD *)(v42 + 48)
          && v89 == *(_DWORD *)(v42 + 52))
        {
          if ((*(unsigned char *)(v42 + 72) & 1) == 0) {
            goto LABEL_42;
          }
        }
        else
        {
          unint64_t v111 = v78;
          LODWORD(v112) = v92;
          uint64_t v113 = (_UNKNOWN **)v42;
          unint64_t v114 = __PAIR64__(v50, v89);
          unint64_t v115 = __PAIR64__(v44, v43);
          unint64_t v116 = v46;
          unint64_t v117 = v76;
          int v118 = v47;
          int v119 = v48;
          int v120 = v80;
          int v121 = v49;
          unsigned int v122 = v95;
          int v123 = v86;
          int v124 = v83;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v111, v52, (uint64_t)&v104);
          uint64_t v53 = v108;
          unsigned __int8 v54 = v110;
          unint64_t v55 = v106 | ((unint64_t)v107 << 32);
          unint64_t v56 = v108 | ((unint64_t)v109 << 32);
          long long v57 = v105;
          *(_OWORD *)(v42 + 32) = v104;
          *(_OWORD *)(v42 + 48) = v57;
          *(void *)(v42 + 64) = v55;
          *(void *)(v42 + 72) = v56;
          *(_WORD *)(v42 + 80) = v54;
          if (v53 != 1) {
            goto LABEL_42;
          }
        }
        *(_DWORD *)(v42 + 68) = AGGraphCreateOffsetAttribute2();
        *(unsigned char *)(v42 + 72) = 0;
LABEL_42:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_43:
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v58 = AGCreateWeakAttribute();
        unsigned int v59 = v58;
        unint64_t v60 = HIDWORD(v58);
        unint64_t v61 = AGCreateWeakAttribute();
        int v62 = v61;
        unint64_t v63 = HIDWORD(v61);
        uint64_t v64 = type metadata accessor for ContainerShapeType();
        unint64_t v65 = AGCreateWeakAttribute();
        unsigned int v66 = v65;
        unint64_t v67 = HIDWORD(v65);
        uint64_t v68 = *(void *)(v4 + 16);
        swift_beginAccess();
        LODWORD(v111) = *(_DWORD *)(v68 + 16);
        uint64_t v112 = v64;
        uint64_t v113 = &protocol witness table for ContainerShapeType<A>;
        unint64_t v114 = __PAIR64__(v67, v66);
        unint64_t v115 = v100;
        unint64_t v116 = __PAIR64__(v98, v103);
        unint64_t v117 = __PAIR64__(v60, v59);
        int v118 = v62;
        int v119 = v63;
        LOBYTE(v120) = a2 & 1;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment();
        int v69 = Attribute.init<A>(body:value:flags:update:)();
        uint64_t v70 = MEMORY[0x263F8EE78];
        unint64_t v71 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        type metadata accessor for MutableBox<CachedEnvironment>();
        uint64_t v72 = swift_allocObject();
        *(_DWORD *)(v72 + 16) = v69;
        *(void *)(v72 + 24) = v70;
        *(_OWORD *)(v72 + 32) = 0u;
        *(_OWORD *)(v72 + 48) = 0u;
        *(_OWORD *)(v72 + 64) = 0u;
        *(_WORD *)(v72 + 80) = 256;
        *(void *)(v72 + 88) = v71;
        uint64_t result = swift_release();
        *(void *)(v4 + 16) = v72;
        int v74 = *(_DWORD *)(v4 + 32);
        if ((v74 & 0x20) == 0) {
          *(_DWORD *)(v4 + 32) = v74 | 0x20;
        }
        return result;
      }
    }
    LODWORD(v14) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v7 + 60) = v14;
    *(unsigned char *)(v7 + 64) = 0;
    goto LABEL_15;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment;
  if (!lazy protocol witness table cache variable for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerShapeTransform and conformance ContainerShapeTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerShapeTransform and conformance ContainerShapeTransform;
  if (!lazy protocol witness table cache variable for type ContainerShapeTransform and conformance ContainerShapeTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerShapeTransform and conformance ContainerShapeTransform);
  }
  return result;
}

uint64_t type metadata accessor for ContainerShapeType()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *static HierarchicalShapeStyleModifier._apply(to:)(unsigned char *result)
{
  *unint64_t result = 1;
  return result;
}

uint64_t AnyStaticFontModifier.modify(descriptor:in:)(uint64_t a1, __int16 *a2)
{
  char v3 = *((unsigned char *)a2 + 24);
  char v4 = *((unsigned char *)a2 + 25);
  uint64_t v5 = *v2;
  __int16 v7 = *a2;
  long long v8 = *(_OWORD *)(a2 + 4);
  char v9 = v3;
  char v10 = v4;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)(v5 + 144) + 8))(a1, &v7);
}

void protocol witness for static StaticFontModifier.modify(descriptor:in:) in conformance Font.MonospacedDigitModifier(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    char v3 = *a1;
    CFNumberRef isa = Int._bridgeToObjectiveC()().super.super.isa;
    CFNumberRef v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CTFontDescriptorRef CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

uint64_t @objc closure #4 in AnyCustomTextAttachment.runDelegate.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t ConcreteCustomTextAttachment.length.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 128) + 24))(*(void *)(*(void *)v0 + 120));
}

double protocol witness for TextAttachment.length.getter in conformance LineAttachment()
{
  return *(double *)(v0 + 64);
}

double ScrollStateRequestTransform.init(collection:inputs:)@<D0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 100) = 0u;
  *(int32x2_t *)a3 = vrev64_s32(*(int32x2_t *)((char *)a2 + 60));
  *(_DWORD *)(a3 + 12) = a1;
  uint64_t KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v10 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)(a3 + 16) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 32) = v6;
  *(void *)(a3 + 40) = v7;
  double result = *((double *)a2 + 3);
  uint64_t v12 = a2[4];
  *(_DWORD *)(a3 + 8) = LODWORD(result);
  *(double *)(a3 + 48) = result;
  *(void *)(a3 + 56) = v12;
  *(void *)(a3 + 64) = v8;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ScaledShape<A>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t ViewRendererHost.responderNode.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *(*)@<X0>(uint64_t *@<X8>), void, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *(*)@<X0>(uint64_t *@<X8>), void, uint64_t, uint64_t, uint64_t))(v3 + 24);
  _sSay7SwiftUI13ViewResponderCGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for ResponderNode?, (uint64_t (*)(uint64_t))type metadata accessor for ResponderNode, MEMORY[0x263F8D8F0]);
  v4(&v7, closure #1 in ViewRendererHost.responderNode.getter, 0, v5, a1, v3);
  return v7;
}

void type metadata completion function for Text.Style()
{
  type metadata accessor for TypesettingConfiguration();
  if (v0 <= 0x3F)
  {
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(319, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t specialized static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)@<X0>(long long *a1@<X0>, void (*a2)(uint64_t *__return_ptr, long long *)@<X1>, char a3@<W3>, char a4@<W4>, uint64_t a5@<X5>, void (*a6)(uint64_t *__return_ptr, uint64_t, long long *)@<X6>, void *a7@<X8>)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  int v172 = *((_DWORD *)a1 + 20);
  long long v9 = a1[4];
  long long v10 = a1[2];
  long long v170 = a1[3];
  long long v171 = v9;
  long long v11 = *a1;
  long long v168 = a1[1];
  long long v169 = v10;
  long long v167 = v11;
  uint64_t v12 = *(void *)(v170 + 16);
  if (v12)
  {
    int v13 = (ValueMetadata **)(v170 + 32);
    uint64_t v14 = v12 - 1;
    do
    {
      unsigned int v15 = *v13;
      v13 += 2;
      BOOL v16 = v15 == &type metadata for DisplayList.Key;
    }
    while (v15 != &type metadata for DisplayList.Key && v14-- != 0);
  }
  else
  {
    BOOL v16 = 0;
  }
  long long v18 = a1[2];
  long long v19 = a1[3];
  long long v20 = a1[1];
  long long v173 = *a1;
  long long v174 = v20;
  long long v175 = v18;
  int v21 = DWORD1(v18);
  long long v163 = v18;
  long long v164 = v19;
  long long v165 = a1[4];
  int v166 = *((_DWORD *)a1 + 20);
  long long v161 = v173;
  long long v162 = v20;
  outlined retain of _ViewInputs((uint64_t)&v167);
  if ((v21 & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)(0);
  }
  __int16 v116 = v21;
  char v117 = a3;
  if ((v21 & 0x20) == 0)
  {
    int v22 = DWORD1(v163);
    unsigned int v23 = v165;
    unsigned int v24 = DWORD1(v165);
    unsigned int v25 = DWORD2(v165);
    goto LABEL_30;
  }
  uint64_t v131 = a5;
  DWORD1(v163) = v21 | 2;
  uint64_t v26 = v174;
  swift_beginAccess();
  uint64_t v128 = v167;
  int v27 = DWORD2(v167);
  unsigned int v28 = DWORD2(v168);
  long long v29 = v169;
  uint64_t v134 = v170;
  uint64_t v136 = v168;
  uint64_t v30 = *((void *)&v170 + 1);
  uint64_t v121 = *((void *)&v171 + 1);
  uint64_t v123 = v171;
  int v31 = v172;
  v158[1] = v169;
  v159[0] = v170;
  v159[1] = v171;
  int v160 = v172;
  long long v157 = v167;
  v158[0] = v168;
  outlined retain of _ViewInputs((uint64_t)&v167);
  unsigned int v32 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v34 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v26 + 81) & 1) != 0
    || v123 != *(_DWORD *)(v26 + 32)
    || v121 != *(_DWORD *)(v26 + 36)
    || v34 != *(_DWORD *)(v26 + 40)
    || v27 != *(_DWORD *)(v26 + 44)
    || v32 != *(_DWORD *)(v26 + 48)
    || v28 != *(_DWORD *)(v26 + 52))
  {
    *(void *)&long long v157 = v128;
    DWORD2(v157) = v27;
    *(void *)&v158[0] = v136;
    *((void *)&v158[0] + 1) = __PAIR64__(v32, v28);
    v158[1] = v29;
    *(void *)&v159[0] = v134;
    *((void *)&v159[0] + 1) = v30;
    *(void *)&v159[1] = v123;
    *((void *)&v159[1] + 1) = v121;
    int v160 = v31;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v34, (uint64_t)&v153);
    long long v37 = v154[0];
    uint64_t v38 = LOBYTE(v154[1]);
    unsigned __int8 v39 = v155[0];
    unint64_t v40 = LOBYTE(v154[1]) | ((unint64_t)DWORD1(v154[1]) << 32);
    unint64_t v41 = BYTE8(v154[1]) | ((unint64_t)HIDWORD(v154[1]) << 32);
    *(_OWORD *)(v26 + 32) = v153;
    *(_OWORD *)(v26 + 48) = v37;
    *(void *)(v26 + 64) = v40;
    *(void *)(v26 + 72) = v41;
    *(_WORD *)(v26 + 80) = v39;
    uint64_t v35 = v131;
    if (v38 != 1)
    {
      uint64_t v36 = HIDWORD(*((void *)&v37 + 1));
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v35 = v131;
  if (*(unsigned char *)(v26 + 64))
  {
LABEL_24:
    LODWORD(v36) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v26 + 60) = v36;
    *(unsigned char *)(v26 + 64) = 0;
    goto LABEL_26;
  }
  LODWORD(v36) = *(_DWORD *)(v26 + 60);
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  DWORD1(v165) = v36;
  uint64_t v42 = swift_getKeyPath();
  outlined retain of _GraphInputs((uint64_t)&v173);
  unsigned int v43 = specialized CachedEnvironment.attribute<A>(keyPath:)(v42);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v173);
  swift_release();
  int v44 = *MEMORY[0x263F288F8];
  if ((v35 & 0x100000000) != 0) {
    unsigned int v45 = *MEMORY[0x263F288F8];
  }
  else {
    unsigned int v45 = v35;
  }
  unsigned int v23 = v165;
  unsigned int v46 = DWORD2(v165);
  *(void *)&long long v157 = __PAIR64__(v43, v45);
  *((void *)&v157 + 1) = __PAIR64__(DWORD2(v165), v165);
  LODWORD(v158[0]) = v44;
  DWORD1(v158[0]) = v44;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  unsigned int v25 = v46;
  int v22 = v21 | 2;
  unsigned int v24 = v36;
LABEL_30:
  uint64_t v47 = v161;
  uint64_t v48 = v162;
  int v49 = v163;
  uint64_t v50 = *((void *)&v163 + 1);
  uint64_t v51 = v164;
  *(void *)&long long v157 = v161;
  int v118 = DWORD2(v161);
  unsigned int v119 = HIDWORD(v162);
  DWORD2(v157) = DWORD2(v161);
  v158[0] = v162;
  unsigned int v120 = DWORD2(v162);
  *(void *)&v158[1] = __PAIR64__(v22, v163);
  *((void *)&v158[1] + 1) = *((void *)&v163 + 1);
  v159[0] = v164;
  unsigned int v124 = HIDWORD(v164);
  unsigned int v122 = DWORD2(v164);
  unsigned int v135 = v23;
  *(void *)&v159[1] = __PAIR64__(v24, v23);
  unsigned int v137 = v24;
  unsigned int v132 = v25;
  *((void *)&v159[1] + 1) = __PAIR64__(HIDWORD(v165), v25);
  unsigned int v129 = HIDWORD(v165);
  int v126 = v166;
  int v160 = v166;
  swift_retain();
  uint64_t v115 = v48;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v139 = v22;
  if ((v22 & 0x100) == 0)
  {
    int v52 = v49;
    if ((v21 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  specialized _GraphInputs.pushScope<A>(id:)((void *)1);
  int v52 = v49;
  if ((v21 & 0x20) != 0)
  {
LABEL_32:
    LODWORD(v159[1]) = AGGraphCreateOffsetAttribute2();
    int v52 = v49 | 0x18;
    DWORD2(v159[1]) = AGGraphCreateOffsetAttribute2();
    LODWORD(v158[1]) = v49 | 0x18;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  uint64_t v53 = MEMORY[0x263F8EE78];
  *(void *)&v159[0] = MEMORY[0x263F8EE78];
  if (v16) {
    specialized PreferencesInputs.add<A>(_:)();
  }
  if (v117)
  {
    uint64_t v54 = v157;
    int v55 = DWORD2(v157);
    *(void *)&long long v157 = v47;
    DWORD2(v157) = v118;
    unsigned int v56 = DWORD2(v158[0]);
    unsigned int v57 = HIDWORD(v158[0]);
    *((void *)&v158[0] + 1) = __PAIR64__(v119, v120);
    int v58 = DWORD1(v158[1]);
    uint64_t v59 = *((void *)&v158[1] + 1);
    uint64_t v60 = *(void *)&v159[0];
    *((void *)&v158[1] + 1) = v50;
    *(void *)&v159[0] = v51;
    unsigned int v61 = DWORD2(v159[0]);
    unsigned int v62 = HIDWORD(v159[0]);
    *((void *)&v159[0] + 1) = __PAIR64__(v124, v122);
    unsigned int v63 = v159[1];
    unsigned int v64 = DWORD1(v159[1]);
    *(void *)&v159[1] = __PAIR64__(v137, v135);
    unsigned int v65 = DWORD2(v159[1]);
    unsigned int v66 = HIDWORD(v159[1]);
    *((void *)&v159[1] + 1) = __PAIR64__(v129, v132);
    int v67 = v158[1];
    *(void *)&v158[1] = __PAIR64__(v22, v49);
    int v68 = v160;
    int v160 = v126;
    uint64_t v48 = *(void *)&v158[0];
    *(void *)&long long v161 = v54;
    DWORD2(v161) = v55;
    *(void *)&long long v162 = *(void *)&v158[0];
    *((void *)&v162 + 1) = __PAIR64__(v57, v56);
    *((void *)&v163 + 1) = v59;
    *(void *)&long long v164 = v60;
    *((void *)&v164 + 1) = __PAIR64__(v62, v61);
    uint64_t v51 = v60;
    *(void *)&long long v165 = __PAIR64__(v64, v63);
    unsigned int v122 = v61;
    unsigned int v124 = v62;
    unsigned int v135 = v63;
    unsigned int v137 = v64;
    *((void *)&v165 + 1) = __PAIR64__(v66, v65);
    unsigned int v129 = v66;
    int v166 = v68;
    int v126 = v68;
    uint64_t v47 = v54;
    int v118 = v55;
    unsigned int v119 = v57;
    unsigned int v120 = v56;
    *(void *)&long long v163 = __PAIR64__(v58, v67);
    int v139 = v58;
    uint64_t v50 = v59;
    *(void *)&v158[0] = v115;
    if ((a4 & 1) == 0)
    {
LABEL_37:
      uint64_t v69 = *(void *)&v158[0];
      goto LABEL_42;
    }
  }
  else
  {
    int v67 = v49;
    int v49 = v52;
    unsigned int v65 = v132;
    if ((a4 & 1) == 0) {
      goto LABEL_37;
    }
  }
  int v112 = v67;
  unsigned int v133 = v65;
  uint64_t v70 = v174;
  swift_beginAccess();
  LODWORD(v153) = *(_DWORD *)(v70 + 16);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground();
  LODWORD(v70) = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v71 = specialized Dictionary.init(dictionaryLiteral:)(v53);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v72 = swift_allocObject();
  uint64_t v73 = v53;
  uint64_t v69 = v72;
  *(_DWORD *)(v72 + 16) = v70;
  *(void *)(v72 + 24) = v73;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  *(_OWORD *)(v72 + 64) = 0u;
  *(_WORD *)(v72 + 80) = 256;
  *(void *)(v72 + 88) = v71;
  swift_release();
  *(void *)&v158[0] = v69;
  if ((v49 & 0x20) == 0) {
    LODWORD(v158[1]) = v49 | 0x20;
  }
  unsigned int v65 = v133;
  int v67 = v112;
LABEL_42:
  *(void *)&long long v153 = v47;
  DWORD2(v153) = v118;
  *(void *)&v154[0] = v48;
  *((void *)&v154[0] + 1) = __PAIR64__(v119, v120);
  *(void *)&v154[1] = __PAIR64__(v139, v67);
  *((void *)&v154[1] + 1) = v50;
  *(void *)&v155[0] = v51;
  *((void *)&v155[0] + 1) = __PAIR64__(v124, v122);
  *(void *)&v155[1] = __PAIR64__(v137, v135);
  *((void *)&v155[1] + 1) = __PAIR64__(v129, v65);
  int v156 = v126;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(&v143, &v153);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)&long long v153 = v157;
  DWORD2(v153) = DWORD2(v157);
  *(_OWORD *)((char *)v154 + 8) = *(_OWORD *)((char *)v158 + 8);
  *(void *)&v154[0] = v69;
  *((void *)&v154[1] + 1) = *((void *)&v158[1] + 1);
  *(void *)&v155[0] = *(void *)&v159[0];
  *(_OWORD *)((char *)v155 + 8) = *(_OWORD *)((char *)v159 + 8);
  *((void *)&v155[1] + 1) = *((void *)&v159[1] + 1);
  int v156 = v160;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v74 = swift_bridgeObjectRetain();
  a6(&v141, v74, &v153);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v75 = swift_release();
  if (!v16)
  {
    uint64_t v81 = 0;
    char v77 = v116;
    if ((v117 & 1) == 0) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  Swift::UInt32 v76 = ++lastIdentity;
  char v77 = v116;
  if ((v116 & 0x100) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)&v167);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v167);
    if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8]) {
      __break(1u);
    }
    LODWORD(v145) = v76;
    unint64_t v78 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v145);
    v78(&v153, 0);
  }
  uint64_t v79 = v174;
  swift_beginAccess();
  Swift::UInt32 v140 = v76;
  if ((v116 & 0x20) == 0)
  {
    LODWORD(v80) = v171;
    goto LABEL_69;
  }
  int v86 = DWORD2(v167);
  unsigned int v87 = DWORD2(v168);
  long long v88 = v169;
  uint64_t v138 = v167;
  uint64_t v130 = v168;
  long long v89 = v170;
  uint64_t v125 = *((void *)&v171 + 1);
  uint64_t v127 = v171;
  int v90 = v172;
  v154[1] = v169;
  v155[0] = v170;
  v155[1] = v171;
  int v156 = v172;
  long long v153 = v167;
  v154[0] = v168;
  outlined retain of _ViewInputs((uint64_t)&v167);
  unsigned int v91 = _ViewInputs.geometryTransaction()();
  uint64_t v92 = swift_getKeyPath();
  int v93 = specialized CachedEnvironment.attribute<A>(keyPath:)(v92);
  swift_release();
  if ((*(unsigned char *)(v79 + 81) & 1) != 0
    || v127 != *(_DWORD *)(v79 + 32)
    || v125 != *(_DWORD *)(v79 + 36)
    || v93 != *(_DWORD *)(v79 + 40)
    || v86 != *(_DWORD *)(v79 + 44)
    || v91 != *(_DWORD *)(v79 + 48)
    || v87 != *(_DWORD *)(v79 + 52))
  {
    *(void *)&long long v153 = v138;
    DWORD2(v153) = v86;
    *(void *)&v154[0] = v130;
    *((void *)&v154[0] + 1) = __PAIR64__(v91, v87);
    v154[1] = v88;
    v155[0] = v89;
    *(void *)&v155[1] = v127;
    *((void *)&v155[1] + 1) = v125;
    int v156 = v90;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v153, v93, (uint64_t)&v145);
    uint64_t v95 = v146;
    unint64_t v94 = v147;
    uint64_t v96 = v148;
    unsigned __int8 v97 = v152;
    unint64_t v98 = v148 | ((unint64_t)v149 << 32);
    unint64_t v99 = v150 | ((unint64_t)v151 << 32);
    *(_OWORD *)(v79 + 32) = v145;
    *(void *)(v79 + 48) = v95;
    *(void *)(v79 + 56) = v94;
    *(void *)(v79 + 64) = v98;
    *(void *)(v79 + 72) = v99;
    *(_WORD *)(v79 + 80) = v97;
    if (v96 != 1)
    {
      unint64_t v80 = HIDWORD(v94);
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  if (*(unsigned char *)(v79 + 64))
  {
LABEL_66:
    LODWORD(v80) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v79 + 60) = v80;
    *(unsigned char *)(v79 + 64) = 0;
    goto LABEL_68;
  }
  LODWORD(v80) = *(_DWORD *)(v79 + 60);
LABEL_68:
  char v77 = v116;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
LABEL_69:
  v154[1] = v169;
  v155[0] = v170;
  v155[1] = v171;
  int v156 = v172;
  long long v153 = v167;
  v154[0] = v168;
  unsigned int v100 = CachedEnvironment.animatedCGSize(for:)((uint64_t *)&v153);
  swift_endAccess();
  *(void *)&long long v153 = v143;
  DWORD2(v153) = v144;
  unint64_t v101 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
  unsigned int v102 = *MEMORY[0x263F288F8];
  if ((v101 & 0x100000000) != 0) {
    unsigned int v103 = *MEMORY[0x263F288F8];
  }
  else {
    unsigned int v103 = v101;
  }
  *(void *)&long long v153 = v141;
  DWORD2(v153) = v142;
  unint64_t v104 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
  if ((v104 & 0x100000000) != 0) {
    unsigned int v105 = v102;
  }
  else {
    unsigned int v105 = v104;
  }
  uint64_t v106 = v173;
  *(void *)&long long v145 = v173;
  outlined retain of _ViewInputs((uint64_t)&v167);
  outlined retain of _GraphInputs((uint64_t)&v173);
  outlined retain of ViewTransform((uint64_t)&v145);
  uint64_t v107 = specialized find<A>(_:key:)(v106);
  if (v107) {
    char v108 = *(unsigned char *)(v107 + 72);
  }
  else {
    char v108 = 0;
  }
  unsigned int v109 = DWORD1(v171);
  outlined release of ViewTransform((uint64_t)&v145);
  outlined release of _GraphInputs((uint64_t)&v173);
  outlined release of _ViewInputs((uint64_t)&v167);
  *(void *)&long long v153 = __PAIR64__(v80, v140);
  *((void *)&v153 + 1) = __PAIR64__(v109, v100);
  *(void *)&v154[0] = __PAIR64__(v105, v103);
  BYTE8(v154[0]) = v108;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MaskDisplayList and conformance MaskDisplayList();
  uint64_t v75 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v81 = v75;
  if (v117)
  {
LABEL_49:
    uint64_t v82 = v143;
    uint64_t v143 = v141;
    uint64_t v141 = v82;
    uint64_t v83 = v144;
    uint64_t v144 = v142;
    uint64_t v142 = v83;
  }
LABEL_50:
  if ((v77 & 0x20) != 0)
  {
    MEMORY[0x270FA5388](v75);
    MEMORY[0x270FA5388](v85);
    AGGraphMutateAttribute();
    if (!v16) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v16)
  {
LABEL_52:
    LOBYTE(v153) = !v16;
    PreferencesOutputs.subscript.setter(v81 | ((unint64_t)!v16 << 32), &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  }
LABEL_53:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a7 = v143;
  a7[1] = v144;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  ValueMetadata **v13;
  uint64_t v14;
  ValueMetadata *v15;
  BOOL v16;
  long long v18;
  long long v19;
  long long v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  long long v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t KeyPath;
  int v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::UInt32 v76;
  char v77;
  void (*v78)(long long *, void);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  int v86;
  unsigned int v87;
  long long v88;
  long long v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  int v112;
  uint64_t v115;
  __int16 v116;
  char v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  Swift::UInt32 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  long long v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 v148;
  unsigned int v149;
  unsigned __int8 v150;
  unsigned int v151;
  unsigned __int8 v152;
  long long v153;
  _OWORD v154[2];
  _OWORD v155[2];
  int v156;
  long long v157;
  _OWORD v158[2];
  _OWORD v159[2];
  int v160;
  long long v161;
  long long v162;
  long long v163;
  long long v164;
  long long v165;
  int v166;
  long long v167;
  long long v168;
  long long v169;
  long long v170;
  long long v171;
  int v172;
  long long v173;
  long long v174;
  long long v175;
  uint64_t v176;

  uint64_t v176 = *MEMORY[0x263EF8340];
  int v172 = *((_DWORD *)a1 + 20);
  long long v9 = a1[4];
  long long v10 = a1[2];
  long long v170 = a1[3];
  long long v171 = v9;
  long long v11 = *a1;
  long long v168 = a1[1];
  long long v169 = v10;
  long long v167 = v11;
  uint64_t v12 = *(void *)(v170 + 16);
  if (v12)
  {
    int v13 = (ValueMetadata **)(v170 + 32);
    uint64_t v14 = v12 - 1;
    do
    {
      unsigned int v15 = *v13;
      v13 += 2;
      BOOL v16 = v15 == &type metadata for DisplayList.Key;
    }
    while (v15 != &type metadata for DisplayList.Key && v14-- != 0);
  }
  else
  {
    BOOL v16 = 0;
  }
  long long v18 = a1[2];
  long long v19 = a1[3];
  long long v20 = a1[1];
  long long v173 = *a1;
  long long v174 = v20;
  long long v175 = v18;
  int v21 = DWORD1(v18);
  long long v163 = v18;
  long long v164 = v19;
  long long v165 = a1[4];
  int v166 = *((_DWORD *)a1 + 20);
  long long v161 = v173;
  long long v162 = v20;
  outlined retain of _ViewInputs((uint64_t)&v167);
  if ((v21 & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)(0);
  }
  __int16 v116 = v21;
  char v117 = a3;
  if ((v21 & 0x20) == 0)
  {
    int v22 = DWORD1(v163);
    unsigned int v23 = v165;
    unsigned int v24 = DWORD1(v165);
    unsigned int v25 = DWORD2(v165);
    goto LABEL_30;
  }
  uint64_t v131 = a5;
  DWORD1(v163) = v21 | 2;
  uint64_t v26 = v174;
  swift_beginAccess();
  uint64_t v128 = v167;
  int v27 = DWORD2(v167);
  unsigned int v28 = DWORD2(v168);
  long long v29 = v169;
  uint64_t v134 = v170;
  uint64_t v136 = v168;
  uint64_t v30 = *((void *)&v170 + 1);
  uint64_t v121 = *((void *)&v171 + 1);
  uint64_t v123 = v171;
  int v31 = v172;
  v158[1] = v169;
  v159[0] = v170;
  v159[1] = v171;
  int v160 = v172;
  long long v157 = v167;
  v158[0] = v168;
  outlined retain of _ViewInputs((uint64_t)&v167);
  unsigned int v32 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v34 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v26 + 81) & 1) != 0
    || v123 != *(_DWORD *)(v26 + 32)
    || v121 != *(_DWORD *)(v26 + 36)
    || v34 != *(_DWORD *)(v26 + 40)
    || v27 != *(_DWORD *)(v26 + 44)
    || v32 != *(_DWORD *)(v26 + 48)
    || v28 != *(_DWORD *)(v26 + 52))
  {
    *(void *)&long long v157 = v128;
    DWORD2(v157) = v27;
    *(void *)&v158[0] = v136;
    *((void *)&v158[0] + 1) = __PAIR64__(v32, v28);
    v158[1] = v29;
    *(void *)&v159[0] = v134;
    *((void *)&v159[0] + 1) = v30;
    *(void *)&v159[1] = v123;
    *((void *)&v159[1] + 1) = v121;
    int v160 = v31;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v157, v34, (uint64_t)&v153);
    long long v37 = v154[0];
    uint64_t v38 = LOBYTE(v154[1]);
    unsigned __int8 v39 = v155[0];
    unint64_t v40 = LOBYTE(v154[1]) | ((unint64_t)DWORD1(v154[1]) << 32);
    unint64_t v41 = BYTE8(v154[1]) | ((unint64_t)HIDWORD(v154[1]) << 32);
    *(_OWORD *)(v26 + 32) = v153;
    *(_OWORD *)(v26 + 48) = v37;
    *(void *)(v26 + 64) = v40;
    *(void *)(v26 + 72) = v41;
    *(_WORD *)(v26 + 80) = v39;
    uint64_t v35 = v131;
    if (v38 != 1)
    {
      uint64_t v36 = HIDWORD(*((void *)&v37 + 1));
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v35 = v131;
  if (*(unsigned char *)(v26 + 64))
  {
LABEL_24:
    LODWORD(v36) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v26 + 60) = v36;
    *(unsigned char *)(v26 + 64) = 0;
    goto LABEL_26;
  }
  LODWORD(v36) = *(_DWORD *)(v26 + 60);
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  DWORD1(v165) = v36;
  uint64_t v42 = swift_getKeyPath();
  outlined retain of _GraphInputs((uint64_t)&v173);
  unsigned int v43 = specialized CachedEnvironment.attribute<A>(keyPath:)(v42);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v173);
  swift_release();
  int v44 = *MEMORY[0x263F288F8];
  if ((v35 & 0x100000000) != 0) {
    unsigned int v45 = *MEMORY[0x263F288F8];
  }
  else {
    unsigned int v45 = v35;
  }
  unsigned int v23 = v165;
  unsigned int v46 = DWORD2(v165);
  *(void *)&long long v157 = __PAIR64__(v43, v45);
  *((void *)&v157 + 1) = __PAIR64__(DWORD2(v165), v165);
  LODWORD(v158[0]) = v44;
  DWORD1(v158[0]) = v44;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  unsigned int v25 = v46;
  int v22 = v21 | 2;
  unsigned int v24 = v36;
LABEL_30:
  uint64_t v47 = v161;
  uint64_t v48 = v162;
  int v49 = v163;
  uint64_t v50 = *((void *)&v163 + 1);
  uint64_t v51 = v164;
  *(void *)&long long v157 = v161;
  int v118 = DWORD2(v161);
  unsigned int v119 = HIDWORD(v162);
  DWORD2(v157) = DWORD2(v161);
  v158[0] = v162;
  unsigned int v120 = DWORD2(v162);
  *(void *)&v158[1] = __PAIR64__(v22, v163);
  *((void *)&v158[1] + 1) = *((void *)&v163 + 1);
  v159[0] = v164;
  unsigned int v124 = HIDWORD(v164);
  unsigned int v122 = DWORD2(v164);
  unsigned int v135 = v23;
  *(void *)&v159[1] = __PAIR64__(v24, v23);
  unsigned int v137 = v24;
  unsigned int v132 = v25;
  *((void *)&v159[1] + 1) = __PAIR64__(HIDWORD(v165), v25);
  unsigned int v129 = HIDWORD(v165);
  int v126 = v166;
  int v160 = v166;
  swift_retain();
  uint64_t v115 = v48;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v139 = v22;
  if ((v22 & 0x100) == 0)
  {
    int v52 = v49;
    if ((v21 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  specialized _GraphInputs.pushScope<A>(id:)((void *)1);
  int v52 = v49;
  if ((v21 & 0x20) != 0)
  {
LABEL_32:
    LODWORD(v159[1]) = AGGraphCreateOffsetAttribute2();
    int v52 = v49 | 0x18;
    DWORD2(v159[1]) = AGGraphCreateOffsetAttribute2();
    LODWORD(v158[1]) = v49 | 0x18;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  uint64_t v53 = MEMORY[0x263F8EE78];
  *(void *)&v159[0] = MEMORY[0x263F8EE78];
  if (v16) {
    specialized PreferencesInputs.add<A>(_:)();
  }
  if (v117)
  {
    uint64_t v54 = v157;
    int v55 = DWORD2(v157);
    *(void *)&long long v157 = v47;
    DWORD2(v157) = v118;
    unsigned int v56 = DWORD2(v158[0]);
    unsigned int v57 = HIDWORD(v158[0]);
    *((void *)&v158[0] + 1) = __PAIR64__(v119, v120);
    int v58 = DWORD1(v158[1]);
    uint64_t v59 = *((void *)&v158[1] + 1);
    uint64_t v60 = *(void *)&v159[0];
    *((void *)&v158[1] + 1) = v50;
    *(void *)&v159[0] = v51;
    unsigned int v61 = DWORD2(v159[0]);
    unsigned int v62 = HIDWORD(v159[0]);
    *((void *)&v159[0] + 1) = __PAIR64__(v124, v122);
    unsigned int v63 = v159[1];
    unsigned int v64 = DWORD1(v159[1]);
    *(void *)&v159[1] = __PAIR64__(v137, v135);
    unsigned int v65 = DWORD2(v159[1]);
    unsigned int v66 = HIDWORD(v159[1]);
    *((void *)&v159[1] + 1) = __PAIR64__(v129, v132);
    int v67 = v158[1];
    *(void *)&v158[1] = __PAIR64__(v22, v49);
    int v68 = v160;
    int v160 = v126;
    uint64_t v48 = *(void *)&v158[0];
    *(void *)&long long v161 = v54;
    DWORD2(v161) = v55;
    *(void *)&long long v162 = *(void *)&v158[0];
    *((void *)&v162 + 1) = __PAIR64__(v57, v56);
    *((void *)&v163 + 1) = v59;
    *(void *)&long long v164 = v60;
    *((void *)&v164 + 1) = __PAIR64__(v62, v61);
    uint64_t v51 = v60;
    *(void *)&long long v165 = __PAIR64__(v64, v63);
    unsigned int v122 = v61;
    unsigned int v124 = v62;
    unsigned int v135 = v63;
    unsigned int v137 = v64;
    *((void *)&v165 + 1) = __PAIR64__(v66, v65);
    unsigned int v129 = v66;
    int v166 = v68;
    int v126 = v68;
    uint64_t v47 = v54;
    int v118 = v55;
    unsigned int v119 = v57;
    unsigned int v120 = v56;
    *(void *)&long long v163 = __PAIR64__(v58, v67);
    int v139 = v58;
    uint64_t v50 = v59;
    *(void *)&v158[0] = v115;
    if ((a4 & 1) == 0)
    {
LABEL_37:
      uint64_t v69 = *(void *)&v158[0];
      goto LABEL_42;
    }
  }
  else
  {
    int v67 = v49;
    int v49 = v52;
    unsigned int v65 = v132;
    if ((a4 & 1) == 0) {
      goto LABEL_37;
    }
  }
  int v112 = v67;
  unsigned int v133 = v65;
  uint64_t v70 = v174;
  swift_beginAccess();
  LODWORD(v153) = *(_DWORD *)(v70 + 16);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground();
  LODWORD(v70) = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v71 = specialized Dictionary.init(dictionaryLiteral:)(v53);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v72 = swift_allocObject();
  uint64_t v73 = v53;
  uint64_t v69 = v72;
  *(_DWORD *)(v72 + 16) = v70;
  *(void *)(v72 + 24) = v73;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  *(_OWORD *)(v72 + 64) = 0u;
  *(_WORD *)(v72 + 80) = 256;
  *(void *)(v72 + 88) = v71;
  swift_release();
  *(void *)&v158[0] = v69;
  if ((v49 & 0x20) == 0) {
    LODWORD(v158[1]) = v49 | 0x20;
  }
  unsigned int v65 = v133;
  int v67 = v112;
LABEL_42:
  *(void *)&long long v153 = v47;
  DWORD2(v153) = v118;
  *(void *)&v154[0] = v48;
  *((void *)&v154[0] + 1) = __PAIR64__(v119, v120);
  *(void *)&v154[1] = __PAIR64__(v139, v67);
  *((void *)&v154[1] + 1) = v50;
  *(void *)&v155[0] = v51;
  *((void *)&v155[0] + 1) = __PAIR64__(v124, v122);
  *(void *)&v155[1] = __PAIR64__(v137, v135);
  *((void *)&v155[1] + 1) = __PAIR64__(v129, v65);
  int v156 = v126;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v74 = swift_bridgeObjectRetain();
  a6(&v143, v74, &v153);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)&long long v153 = v157;
  DWORD2(v153) = DWORD2(v157);
  *(_OWORD *)((char *)v154 + 8) = *(_OWORD *)((char *)v158 + 8);
  *(void *)&v154[0] = v69;
  *((void *)&v154[1] + 1) = *((void *)&v158[1] + 1);
  *(void *)&v155[0] = *(void *)&v159[0];
  *(_OWORD *)((char *)v155 + 8) = *(_OWORD *)((char *)v159 + 8);
  *((void *)&v155[1] + 1) = *((void *)&v159[1] + 1);
  int v156 = v160;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(&v141, &v153);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v75 = swift_release();
  if (!v16)
  {
    uint64_t v81 = 0;
    char v77 = v116;
    if ((v117 & 1) == 0) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  Swift::UInt32 v76 = ++lastIdentity;
  char v77 = v116;
  if ((v116 & 0x100) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)&v167);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v167);
    if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8]) {
      __break(1u);
    }
    LODWORD(v145) = v76;
    unint64_t v78 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v145);
    v78(&v153, 0);
  }
  uint64_t v79 = v174;
  swift_beginAccess();
  Swift::UInt32 v140 = v76;
  if ((v116 & 0x20) == 0)
  {
    LODWORD(v80) = v171;
    goto LABEL_69;
  }
  int v86 = DWORD2(v167);
  unsigned int v87 = DWORD2(v168);
  long long v88 = v169;
  uint64_t v138 = v167;
  uint64_t v130 = v168;
  long long v89 = v170;
  uint64_t v125 = *((void *)&v171 + 1);
  uint64_t v127 = v171;
  int v90 = v172;
  v154[1] = v169;
  v155[0] = v170;
  v155[1] = v171;
  int v156 = v172;
  long long v153 = v167;
  v154[0] = v168;
  outlined retain of _ViewInputs((uint64_t)&v167);
  unsigned int v91 = _ViewInputs.geometryTransaction()();
  uint64_t v92 = swift_getKeyPath();
  int v93 = specialized CachedEnvironment.attribute<A>(keyPath:)(v92);
  swift_release();
  if ((*(unsigned char *)(v79 + 81) & 1) != 0
    || v127 != *(_DWORD *)(v79 + 32)
    || v125 != *(_DWORD *)(v79 + 36)
    || v93 != *(_DWORD *)(v79 + 40)
    || v86 != *(_DWORD *)(v79 + 44)
    || v91 != *(_DWORD *)(v79 + 48)
    || v87 != *(_DWORD *)(v79 + 52))
  {
    *(void *)&long long v153 = v138;
    DWORD2(v153) = v86;
    *(void *)&v154[0] = v130;
    *((void *)&v154[0] + 1) = __PAIR64__(v91, v87);
    v154[1] = v88;
    v155[0] = v89;
    *(void *)&v155[1] = v127;
    *((void *)&v155[1] + 1) = v125;
    int v156 = v90;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v153, v93, (uint64_t)&v145);
    uint64_t v95 = v146;
    unint64_t v94 = v147;
    uint64_t v96 = v148;
    unsigned __int8 v97 = v152;
    unint64_t v98 = v148 | ((unint64_t)v149 << 32);
    unint64_t v99 = v150 | ((unint64_t)v151 << 32);
    *(_OWORD *)(v79 + 32) = v145;
    *(void *)(v79 + 48) = v95;
    *(void *)(v79 + 56) = v94;
    *(void *)(v79 + 64) = v98;
    *(void *)(v79 + 72) = v99;
    *(_WORD *)(v79 + 80) = v97;
    if (v96 != 1)
    {
      unint64_t v80 = HIDWORD(v94);
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  if (*(unsigned char *)(v79 + 64))
  {
LABEL_66:
    LODWORD(v80) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v79 + 60) = v80;
    *(unsigned char *)(v79 + 64) = 0;
    goto LABEL_68;
  }
  LODWORD(v80) = *(_DWORD *)(v79 + 60);
LABEL_68:
  char v77 = v116;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
LABEL_69:
  v154[1] = v169;
  v155[0] = v170;
  v155[1] = v171;
  int v156 = v172;
  long long v153 = v167;
  v154[0] = v168;
  unsigned int v100 = CachedEnvironment.animatedCGSize(for:)((uint64_t *)&v153);
  swift_endAccess();
  *(void *)&long long v153 = v143;
  DWORD2(v153) = v144;
  unint64_t v101 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
  unsigned int v102 = *MEMORY[0x263F288F8];
  if ((v101 & 0x100000000) != 0) {
    unsigned int v103 = *MEMORY[0x263F288F8];
  }
  else {
    unsigned int v103 = v101;
  }
  *(void *)&long long v153 = v141;
  DWORD2(v153) = v142;
  unint64_t v104 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
  if ((v104 & 0x100000000) != 0) {
    unsigned int v105 = v102;
  }
  else {
    unsigned int v105 = v104;
  }
  uint64_t v106 = v173;
  *(void *)&long long v145 = v173;
  outlined retain of _ViewInputs((uint64_t)&v167);
  outlined retain of _GraphInputs((uint64_t)&v173);
  outlined retain of ViewTransform((uint64_t)&v145);
  uint64_t v107 = specialized find<A>(_:key:)(v106);
  if (v107) {
    char v108 = *(unsigned char *)(v107 + 72);
  }
  else {
    char v108 = 0;
  }
  unsigned int v109 = DWORD1(v171);
  outlined release of ViewTransform((uint64_t)&v145);
  outlined release of _GraphInputs((uint64_t)&v173);
  outlined release of _ViewInputs((uint64_t)&v167);
  *(void *)&long long v153 = __PAIR64__(v80, v140);
  *((void *)&v153 + 1) = __PAIR64__(v109, v100);
  *(void *)&v154[0] = __PAIR64__(v105, v103);
  BYTE8(v154[0]) = v108;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MaskDisplayList and conformance MaskDisplayList();
  uint64_t v75 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v81 = v75;
  if (v117)
  {
LABEL_49:
    uint64_t v82 = v143;
    uint64_t v143 = v141;
    uint64_t v141 = v82;
    uint64_t v83 = v144;
    uint64_t v144 = v142;
    uint64_t v142 = v83;
  }
LABEL_50:
  if ((v77 & 0x20) != 0)
  {
    MEMORY[0x270FA5388](v75);
    MEMORY[0x270FA5388](v85);
    AGGraphMutateAttribute();
    if (!v16) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v16)
  {
LABEL_52:
    LOBYTE(v153) = !v16;
    PreferencesOutputs.subscript.setter(v81 | ((unint64_t)!v16 << 32), &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  }
LABEL_53:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a7 = v143;
  a7[1] = v144;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static _MaskAlignmentEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 80);
  *(void *)&long long v10 = *(void *)a1;
  DWORD2(v10) = v5;
  uint64_t v11 = v6;
  long long v12 = *(_OWORD *)(a1 + 24);
  long long v13 = *(_OWORD *)(a1 + 40);
  long long v14 = *(_OWORD *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  int v16 = v7;
  type metadata accessor for _MaskAlignmentEffect();
  type metadata accessor for _GraphValue();
  swift_retain();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _MaskAlignmentEffect._makeView(modifier:inputs:body:), (uint64_t)&type metadata for Alignment, &v9);
  return specialized static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)(&v10, (void (*)(uint64_t *__return_ptr, long long *))partial apply for makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:), 0, 1, v9, a2, a3);
}

uint64_t static _MaskEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 80);
  *(void *)&long long v10 = *(void *)a1;
  DWORD2(v10) = v5;
  uint64_t v11 = v6;
  long long v8 = *(_OWORD *)(a1 + 40);
  long long v12 = *(_OWORD *)(a1 + 24);
  long long v13 = v8;
  long long v14 = *(_OWORD *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  int v16 = v7;
  swift_retain();
  return specialized static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)(&v10, (void (*)(uint64_t *__return_ptr, long long *))partial apply for makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:), 0, 1, 0x100000000, a2, a3);
}

uint64_t CachedEnvironment.animatedCGSize(for:)(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 9);
  int v3 = *((_DWORD *)a1 + 18);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v5 = v1;
    int v6 = *((_DWORD *)a1 + 2);
    uint64_t v7 = a1[2];
    int v8 = *((_DWORD *)a1 + 7);
    int v9 = *((_DWORD *)a1 + 8);
    uint64_t v11 = a1[5];
    uint64_t v10 = a1[6];
    int v12 = *((_DWORD *)a1 + 14);
    int v13 = *((_DWORD *)a1 + 15);
    int v15 = *((_DWORD *)a1 + 16);
    int v14 = *((_DWORD *)a1 + 17);
    int v16 = *((_DWORD *)a1 + 19);
    int v17 = *((_DWORD *)a1 + 20);
    int v18 = *((_DWORD *)a1 + 6);
    uint64_t v41 = *a1;
    int v42 = v6;
    uint64_t v43 = v7;
    int v44 = v18;
    int v45 = v8;
    int v31 = v12;
    int v32 = v9;
    int v46 = v9;
    int v47 = v2;
    uint64_t v48 = v11;
    uint64_t v49 = v10;
    int v50 = v12;
    int v51 = v13;
    int v29 = v16;
    int v30 = v13;
    int v52 = v15;
    int v53 = v14;
    int v27 = v14;
    int v28 = v17;
    int v54 = v3;
    int v55 = v16;
    int v56 = v17;
    swift_retain();
    uint64_t v34 = v7;
    swift_retain();
    uint64_t v33 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v19 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v21 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v5 + 65) & 1) == 0
      && v15 == *(_DWORD *)(v5 + 16)
      && v3 == *(_DWORD *)(v5 + 20)
      && v21 == *(_DWORD *)(v5 + 24)
      && v6 == *(_DWORD *)(v5 + 28)
      && v19 == *(_DWORD *)(v5 + 32)
      && v18 == *(_DWORD *)(v5 + 36))
    {
      if ((*(unsigned char *)(v5 + 64) & 1) == 0)
      {
        uint64_t OffsetAttribute2 = *(unsigned int *)(v5 + 60);
LABEL_16:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return OffsetAttribute2;
      }
    }
    else
    {
      int v42 = v6;
      uint64_t v43 = v34;
      int v44 = v18;
      int v45 = v19;
      int v46 = v32;
      int v47 = v2;
      uint64_t v48 = v33;
      uint64_t v49 = v10;
      int v50 = v31;
      int v51 = v30;
      int v52 = v15;
      int v53 = v27;
      int v54 = v3;
      int v55 = v29;
      int v56 = v28;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v41, v21, (uint64_t)v35);
      uint64_t OffsetAttribute2 = v39;
      int v23 = v40;
      unint64_t v24 = v36 | ((unint64_t)v37 << 32);
      unint64_t v25 = v38 | ((unint64_t)v39 << 32);
      long long v26 = v35[1];
      *(_OWORD *)(v5 + 16) = v35[0];
      *(_OWORD *)(v5 + 32) = v26;
      *(void *)(v5 + 48) = v24;
      *(void *)(v5 + 56) = v25;
      *(_WORD *)(v5 + 64) = v23;
      if (v23 != 1) {
        goto LABEL_16;
      }
    }
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v5 + 60) = OffsetAttribute2;
    *(unsigned char *)(v5 + 64) = 0;
    goto LABEL_16;
  }

  return AGGraphCreateOffsetAttribute2();
}

unint64_t lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground()
{
  unint64_t result = lazy protocol witness table cache variable for type MaskDefaultForeground and conformance MaskDefaultForeground;
  if (!lazy protocol witness table cache variable for type MaskDefaultForeground and conformance MaskDefaultForeground)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaskDefaultForeground and conformance MaskDefaultForeground);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaskDisplayList and conformance MaskDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type MaskDisplayList and conformance MaskDisplayList;
  if (!lazy protocol witness table cache variable for type MaskDisplayList and conformance MaskDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaskDisplayList and conformance MaskDisplayList);
  }
  return result;
}

uint64_t partial apply for makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, *(_DWORD *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _MaskEffect, (void (*)(uint64_t))partial apply for closure #1 in makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:), a2);
}

uint64_t makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t)@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  int v11 = *((_DWORD *)a1 + 2);
  uint64_t v12 = a1[2];
  int v13 = *((_DWORD *)a1 + 6);
  int v29 = *((_DWORD *)a1 + 8);
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  int v26 = *((_DWORD *)a1 + 14);
  int v27 = *((_DWORD *)a1 + 9);
  int v24 = *((_DWORD *)a1 + 16);
  int v25 = *((_DWORD *)a1 + 15);
  int v22 = *((_DWORD *)a1 + 18);
  int v23 = *((_DWORD *)a1 + 17);
  int v21 = *((_DWORD *)a1 + 19);
  int v19 = *((_DWORD *)a1 + 7);
  int v20 = *((_DWORD *)a1 + 20);
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  LODWORD(v51) = a2;
  a5(255, a3, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter(a6, a3, &v32);
  int v16 = v32;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v51 = v10;
  int v52 = v11;
  uint64_t v53 = v12;
  int v54 = v13;
  int v55 = v19;
  int v57 = v27;
  uint64_t v58 = v14;
  uint64_t v59 = v15;
  int v60 = v26;
  int v61 = v25;
  int v62 = v24;
  int v63 = v23;
  int v64 = v22;
  int v65 = v21;
  int v66 = v20;
  int v31 = v16;
  uint64_t v35 = v10;
  int v36 = v11;
  uint64_t v37 = v12;
  int v38 = v13;
  int v39 = v19;
  int v40 = 0;
  int v41 = v27;
  uint64_t v42 = v14;
  uint64_t v43 = v15;
  int v44 = v26;
  int v45 = v25;
  int v46 = v24;
  int v47 = v23;
  int v48 = v22;
  int v49 = v21;
  int v50 = v20;
  int v17 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17(&v31, &v35, a3, a4);
  int v56 = v29;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v51);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for _MaskEffect();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t type metadata accessor for _MaskEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, *(_DWORD *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _MaskAlignmentEffect, (void (*)(uint64_t))partial apply for closure #1 in makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:), a2);
}

uint64_t closure #1 in makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _MaskAlignmentEffect();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  v9[2] = v4;
  v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v9[5];
}

uint64_t type metadata accessor for _MaskAlignmentEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)(a1, *(_DWORD *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  int v8 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1[2];
  int v10 = *((_DWORD *)a1 + 6);
  int v11 = *((_DWORD *)a1 + 9);
  uint64_t v12 = a1[5];
  uint64_t v13 = a1[6];
  int v25 = *((_DWORD *)a1 + 14);
  int v26 = *((_DWORD *)a1 + 8);
  int v23 = *((_DWORD *)a1 + 16);
  int v24 = *((_DWORD *)a1 + 15);
  int v21 = *((_DWORD *)a1 + 18);
  int v22 = *((_DWORD *)a1 + 17);
  int v20 = *((_DWORD *)a1 + 19);
  int v18 = *((_DWORD *)a1 + 7);
  int v19 = *((_DWORD *)a1 + 20);
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  LODWORD(v48) = a2;
  type metadata accessor for _BackdropEffect();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:), a3, &v29);
  int v14 = v29;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v48 = v7;
  int v49 = v8;
  uint64_t v50 = v9;
  int v51 = v10;
  int v52 = v18;
  int v54 = v11;
  uint64_t v55 = v12;
  uint64_t v56 = v13;
  int v57 = v25;
  int v58 = v24;
  int v59 = v23;
  int v60 = v22;
  int v61 = v21;
  int v62 = v20;
  int v63 = v19;
  int v28 = v14;
  uint64_t v32 = v7;
  int v33 = v8;
  uint64_t v34 = v9;
  int v35 = v10;
  int v36 = v18;
  int v37 = 0;
  int v38 = v11;
  uint64_t v39 = v12;
  uint64_t v40 = v13;
  int v41 = v25;
  int v42 = v24;
  int v43 = v23;
  int v44 = v22;
  int v45 = v21;
  int v46 = v20;
  int v47 = v19;
  uint64_t v15 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(&v28, &v32, a3, a4);
  int v53 = v26;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, (uint64_t)&v48);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for _BackdropEffect();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t type metadata accessor for _BackdropEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t one-time initialization function for v3_2()
{
  uint64_t result = swiftUI_v3_2_os_versions();
  static Semantics.v3_2 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v3_2_os_versions()
{
  return 0x7E51201FFFFFFFFLL;
}

double _PositionAwarePlacementContext.safeAreaInsets(matching:)(uint64_t a1)
{
  int v2 = *((_DWORD *)v1 + 6);
  double result = 0.0;
  if (v2 != *MEMORY[0x263F288F8])
  {
    long long v7 = *v1;
    Inputuint64_t Value = AGGraphGetInputValue();
    uint64_t v6 = *(void *)(InputValue + 16);
    long long v11 = *(_OWORD *)InputValue;
    uint64_t v12 = v6;
    long long v8 = v7;
    uint64_t v9 = *((void *)v1 + 2);
    int v10 = v2;
    return SafeAreaInsets.resolve(regions:in:)(a1, (int *)&v8);
  }
  return result;
}

uint64_t _AnyLayoutBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 184) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 200));

  return swift_deallocClassInstance();
}

void static Material.thin.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
}

double one-time initialization function for standard()
{
  double result = *MEMORY[0x263F03C48];
  static Font.Width.standard = *MEMORY[0x263F03C48];
  return result;
}

unint64_t instantiation function for generic protocol witness table for _SafeAreaIgnoringLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for LinearKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CubicKeyframe(a1, a2, a3, (uint64_t (*)(uint64_t, void, void))type metadata accessor for _ResolvedKeyframeTrackContent.Linear);
}

uint64_t type metadata accessor for ImageRenderer()
{
  return __swift_instantiateGenericMetadata();
}

void DisplayList.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
}

uint64_t type metadata completion function for ViewGraphGeometryObservers.Observer.Storage()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreferenceValueAttribute<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for RawRepresentableProxy<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t View.redacted(reason:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.redacted(reason:), v5, a2);
  swift_release();

  return swift_release();
}

uint64_t *PairwisePreferenceCombinerVisitor.init(outputs:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  *(void *)(a3 + 32) = MEMORY[0x263F8EE78];
  *(_DWORD *)(a3 + 40) = 0;
  *(void *)a3 = v3;
  *(_DWORD *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 24) = v6;
  return result;
}

uint64_t type metadata completion function for KeyframeTrack()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall PreferenceBridge.removedStateDidChange()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 8 * i + 32);
      swift_beginAccess();
      LOBYTE(v5) = *(unsigned char *)(v4 + 169);
      if ((_BYTE)v5)
      {
        int v6 = 1;
      }
      else
      {
        uint64_t Strong = swift_weakLoadStrong();
        LOBYTE(v5) = Strong;
        if (Strong)
        {
          swift_beginAccess();
          uint64_t v9 = swift_weakLoadStrong();
          swift_release();
          if (v9)
          {
            swift_beginAccess();
            unsigned int v5 = *(unsigned __int8 *)(v9 + 169);
            swift_release();
            int v6 = (v5 >> 1) & 1;
          }
          else
          {
            int v6 = 0;
            LOBYTE(v5) = 0;
          }
        }
        else
        {
          int v6 = 0;
        }
      }
      swift_beginAccess();
      if (v6 != *(unsigned __int8 *)(v4 + 40))
      {
        if (v6)
        {
          id v7 = *(id *)(v4 + 32);
          AGSubgraphApply();

          AGSubgraphRemoveChild();
        }
        else
        {
          AGSubgraphAddChild();
          id v10 = *(id *)(v4 + 32);
          AGSubgraphApply();
        }
        *(unsigned char *)(v4 + 40) = v6;
      }
      if (((v5 & 2) != 0) != *(unsigned char *)(v4 + 41))
      {
        *(unsigned char *)(v4 + 41) = (v5 & 2) >> 1;
        ViewGraph.isHiddenForReuseDidChange()();
      }
    }
    swift_bridgeObjectRelease();
  }
}

void type metadata accessor for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>);
    }
  }
}

uint64_t ColorBox.kitColor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 168) + 40))(*(void *)(*(void *)v0 + 160));
}

id SystemColorType.kitColor.getter()
{
  unint64_t v1 = *v0;
  if (v1 > 0xC) {
    return 0;
  }
  else {
    return objc_msgSend(self, *off_2651D57E0[v1], 0);
  }
}

uint64_t type metadata completion function for LocalizedStringKey.FormatArgument.Storage()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for LocalizedStringResource();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *one-time initialization function for ratioCache()
{
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static Font.ratioCache = result;
  return result;
}

uint64_t ViewTraitCollection.isSectioned.getter(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  LOBYTE(a1) = a1(0, v3);
  swift_bridgeObjectRelease();
  return a1 & 1;
}

Swift::Void __swiftcall ViewRendererHost.invalidate()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v33 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v34 = (char *)&v31 - v10;
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, double))(v3 + 16);
  uint64_t v12 = v11(v4, v3, v9);
  swift_beginAccess();
  *(void *)(v12 + 208) = 0;
  swift_unknownObjectWeakAssign();
  swift_release();
  int v13 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    int v32 = v13;
    uint64_t v14 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v14 != -1) {
      swift_once();
    }
    id v15 = (id)_signpostLog;
    int v16 = v34;
    OSSignpostID.init(log:object:)();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v18 = ((uint64_t (*)(uint64_t, uint64_t))v11)(v4, v3);
    swift_beginAccess();
    if (!*(void *)(v18 + 16))
    {
      __break(1u);
      return;
    }
    uint64_t Counter = AGGraphGetCounter();
    swift_release();
    uint64_t v20 = MEMORY[0x263F8D9D0];
    *(void *)(inited + 72) = v2;
    uint64_t v21 = inited + 72;
    uint64_t v22 = MEMORY[0x263F8DA20];
    *(void *)(inited + 56) = v20;
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 32) = Counter;
    *(void *)(inited + 96) = v20;
    *(void *)(inited + 104) = v22;
    int v23 = (void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v7, v16, v5);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v24 = swift_initStackObject();
    long long v35 = xmmword_2461BE2B0;
    *(_OWORD *)(v24 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v25 = v24;
      outlined init with copy of AnyTrackedValue(inited + 32, v24 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v31 = inited;
        uint64_t inited = v32 | 0x14110024u;
        outlined init with copy of AnyTrackedValue(v21, v25 + 72);
        *(_OWORD *)(v25 + 128) = 0u;
        *(void *)(v25 + 144) = 0;
        *(_OWORD *)(v25 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v25, inited, (uint64_t)v7);
        outlined init with copy of CVarArg?(v25 + 112, (uint64_t)v36);
        swift_bridgeObjectRelease();
        if (!v37)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v36);
          swift_bridgeObjectRelease();
          uint64_t v30 = *(void (**)(char *, uint64_t))(v33 + 8);
          v30(v34, v5);
          v30(v7, v5);
          return;
        }
        ++v23;
        outlined destroy of CVarArg?((uint64_t)v36);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v26 = __swift_project_value_buffer(v5, (uint64_t)static OSSignpostID.continuation);
          int v27 = *v23;
          while (1)
          {
            v27(v7, v26, v5);
            uint64_t v28 = swift_initStackObject();
            *(_OWORD *)(v28 + 16) = v35;
            *(_OWORD *)(v28 + 32) = 0u;
            *(_OWORD *)(v28 + 48) = 0u;
            *(_OWORD *)(v28 + 64) = 0u;
            *(_OWORD *)(v28 + 80) = 0u;
            *(_OWORD *)(v28 + 96) = 0u;
            *(_OWORD *)(v28 + 128) = 0u;
            *(void *)(v28 + 144) = 0;
            *(_OWORD *)(v28 + 112) = 0u;
            uint64_t v29 = v28 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v28, inited, (uint64_t)v7);
            outlined init with copy of CVarArg?(v29, (uint64_t)v36);
            swift_bridgeObjectRelease();
            if (!v37) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v36);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v26 = __swift_project_value_buffer(v5, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_18:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
}

uint64_t one-time initialization function for trailing()
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA5E568, (uint64_t)&protocol witness table for HorizontalAlignment.Trailing, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static HorizontalAlignment.trailing = 2 * v3 + 2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for trailing != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.trailing;
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  static Alignment.trailing = v0;
  *(void *)algn_26B0E5DA8 = static VerticalAlignment.center;
  return result;
}

void storeEnumTagSinglePayload for HStack(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 17) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 >= a2)
  {
    switch(v12)
    {
      case 1:
        a1[v9] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          unint64_t v17 = (unint64_t)&a1[v8 + 17] & ~v8;
          uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
          v18(v17);
        }
        break;
    }
  }
  else
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        break;
      default:
        return;
    }
  }
}

uint64_t associated type witness table accessor for Transition.Body : View in AsymmetricTransition<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t one-time initialization function for bottom()
{
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.center;
  if (one-time initialization token for bottom != -1) {
    uint64_t result = swift_once();
  }
  static Alignment.bottom = v0;
  *(void *)algn_26B0E7590 = static VerticalAlignment.bottom;
  return result;
}

{
  os_unfair_lock_s *v0;
  void *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA59410, (uint64_t)&protocol witness table for VerticalAlignment.Bottom, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static VerticalAlignment.bottom = 2 * v3 + 3;
  return result;
}

uint64_t View.shadow(color:radius:x:y:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  v6[0] = a1;
  *(double *)&v6[1] = a3;
  *(double *)&void v6[2] = a4;
  *(double *)&v6[3] = a5;
  return View.modifier<A>(_:)(v6, a2, &type metadata for _ShadowEffect);
}

unint64_t lazy protocol witness table accessor for type Color and conformance Color()
{
  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MatchedDisplayList<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CanvasDisplayList<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge;
  if (!lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge;
  if (!lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnchorWriter<A, B>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

unint64_t closure #1 in PreferenceBridge.removeHostValues(for:isInvalidating:)(unint64_t result, char *a2, int a3)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(v4 + 32) != a3)
  {
    if (v5 != 1)
    {
      if (*(_DWORD *)(v4 + 48) == a3)
      {
        unint64_t result = 1;
        goto LABEL_4;
      }
      if (v5 != 2)
      {
        unsigned int v7 = (int *)(v4 + 64);
        unint64_t result = 2;
        while (1)
        {
          int v8 = *v7;
          v7 += 4;
          if (v8 == a3) {
            goto LABEL_4;
          }
          unint64_t v9 = result + 1;
          if (__OFADD__(result, 1))
          {
            __break(1u);
            return result;
          }
          char v6 = 0;
          ++result;
          if (v9 == v5) {
            goto LABEL_10;
          }
        }
      }
    }
LABEL_9:
    char v6 = 0;
    goto LABEL_10;
  }
  unint64_t result = 0;
LABEL_4:
  unint64_t result = specialized Array.remove(at:)(result);
  char v6 = 1;
LABEL_10:
  *a2 = v6;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in Capsule()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in _ContainerValueWritingModifier<A>.AddTrait()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TextAccessibilityProvider.Body : View in EmptyTextAccessibilityProvider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in UnaryLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ResolvedShadowStyle()
{
  return &type metadata for ResolvedShadowStyle;
}

uint64_t base witness table accessor for _AttributeBody in UnaryChildGeometry<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _ScrollClipEffect<A>.ChildTransform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in BindingOperations.ToOptional<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AnimatorAttribute<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t _ViewListInputs.traits.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 64) = v2;
  return result;
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t type metadata completion function for KeyframeTrackContentBuilder.Conditional.Storage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for EnvironmentValues.CapitalizationContext()
{
  uint64_t result = type metadata accessor for FormatStyleCapitalizationContext();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t _ViewList_ID.allExplicitIDs.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12_ViewList_IDV8Explicit33_E479C0E92CDD045BAF2EF653123E2E0BLLVG_AF12AnyHashable2Vs5NeverOTg503_s7d5UI12_fg9_IDV14alli10IDsSayAA12rs6VGvgAfk5G033_jklmnopQ56BLLVcfu_33_9e41cf4a1fd9b43cf13e2534f667327eAjFTf3nnnpk_nTf1cn_n(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12_ViewList_IDV8Explicit33_E479C0E92CDD045BAF2EF653123E2E0BLLVG_AF12AnyHashable2Vs5NeverOTg503_s7d5UI12_fg9_IDV14alli10IDsSayAA12rs6VGvgAfk5G033_jklmnopQ56BLLVcfu_33_9e41cf4a1fd9b43cf13e2534f667327eAjFTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      swift_retain();
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t instantiation function for generic protocol witness table for InternalCustomAnimationModifiedContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnchorGeometryTransform<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ValueToScrollPosition<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t Text.monospacedDigit()(uint64_t a1, uint64_t a2, char a3, void *a4, void (*a5)(void))
{
  a5(0);
  uint64_t v9 = swift_allocObject();
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  }
  unint64_t v11 = a4[2];
  unint64_t v10 = a4[3];
  if (v11 >= v10 >> 1) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, a4);
  }
  a4[2] = v11 + 1;
  int v12 = &a4[2 * v11];
  v12[4] = v9;
  *((unsigned char *)v12 + 40) = -64;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for MonospacedDigitTextModifier()
{
  return self;
}

id withDelay(_:do:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  v12[4] = partial apply for closure #1 in Transaction.addAnimationListener(allFinished:);
  v12[5] = v6;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ();
  uint64_t v12[3] = &block_descriptor_30;
  unint64_t v7 = _Block_copy(v12);
  int v8 = self;
  swift_retain();
  id v9 = objc_msgSend(v8, sel_timerWithTimeInterval_repeats_block_, 0, v7, a3);
  _Block_release(v7);
  swift_release();
  id v10 = objc_msgSend(self, sel_mainRunLoop);
  objc_msgSend(v10, sel_addTimer_forMode_, v9, *MEMORY[0x263EFF588]);

  return v9;
}

unint64_t instantiation function for generic protocol witness table for Rectangle._Inset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset;
  if (!lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset;
  if (!lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset;
  if (!lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle._Inset and conformance Rectangle._Inset);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Circle._Inset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset;
  if (!lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset;
  if (!lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset;
  if (!lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle._Inset and conformance Circle._Inset);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityProgressValue(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SpacingLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for HStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout;
  if (!lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout;
  if (!lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout);
  }
  return result;
}

uint64_t Font.platformFont(in:)(__int16 *a1, uint64_t a2)
{
  __int16 v2 = *a1;
  char v3 = *((unsigned char *)a1 + 24);
  char v4 = *((unsigned char *)a1 + 25);
  v8[0] = a2;
  v8[1] = MEMORY[0x263F8EE78];
  __int16 v9 = v2;
  long long v10 = *(_OWORD *)(a1 + 4);
  char v11 = v3;
  char v12 = v4;
  uint64_t v5 = one-time initialization token for fontCache;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized ObjectCache.subscript.getter((uint64_t)v8);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v6;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unsigned int v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v16 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 40))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v18) {
      double v16 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 17) = 1;
LABEL_11:
    double v6 = *(double *)a1;
    double v7 = *(double *)(a1 + 8);
    if (*(unsigned char *)(a4 + 32)) {
      goto LABEL_37;
    }
    double v5 = *(double *)(a4 + 16);
    double v4 = *(double *)(a4 + 24);
    if (v6 == v5 && v7 == v4) {
      goto LABEL_37;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v21 = swift_retain();
    uint64_t v22 = specialized find<A>(_:key:)(v21);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 72);
      swift_retain();
      swift_release();
      if (v23) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v24 = swift_retain();
    char v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release();
    if ((v25 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      uint64_t v23 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 17) == 1) {
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(a4 + 40);
  if (!v19) {
    return;
  }
  while (1)
  {
    v80[0] = *(float64x2_t *)a1;
    swift_retain();
    LOBYTE(v77) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v80, a3, v16) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v47 = *(double *)(v19 + 56);
      unint64_t v71 = *(const char **)(v19 + 64);
      uint64_t v48 = *(unsigned int *)(v19 + 88);
      unsigned __int8 v49 = *(unsigned char *)(v19 + 92);
      uint64_t v50 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      int v51 = static CoreGlue.shared;
      LOBYTE(v75) = v49;
      v50(&v71, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    a3 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v37 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      uint64_t v46 = swift_release();
      if (*(void *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v46);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 40) = 0;
LABEL_53:
      *(float64x2_t *)a1 = v80[0];
      *(unsigned char *)(a1 + 17) = 1;
      return;
    }
    uint64_t v69 = v13;
    swift_retain();
    id v38 = v37;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v13 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v13)
    {
      __break(1u);
    }
    else
    {
      id v41 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v43 = MEMORY[0x263F8DA20];
      *(void *)(v39 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v39 + 64) = v43;
      *(void *)(v39 + 32) = Counter;
      int v44 = AGGraphGetCurrentAttribute();
      if (v44 != v13)
      {
        uint64_t v45 = MEMORY[0x263F8E960];
        *(void *)(v39 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v39 + 104) = v45;
        *(_DWORD *)(v39 + 72) = v44;
        *(void *)(v39 + 136) = MEMORY[0x263F8D310];
        *(void *)(v39 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v39 + 112) = 0xD000000000000010;
        *(void *)(v39 + 120) = 0x800000024621FE60;
        char v76 = a3;
        uint64_t v74 = _signpostLog;
        uint64_t v75 = &dword_245728000;
        char v77 = "AnimationState";
        uint64_t v78 = 14;
        char v79 = 2;
        unint64_t v71 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v72 = 37;
        char v73 = 2;
        uint64_t v70 = v39;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v15, v12);
        uint64_t v46 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 40)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    uint64_t v23 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    double v5 = v6 - v5;
    double v4 = v7 - v4;
    double v16 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 40)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v52 = swift_retain();
    uint64_t v53 = specialized AnimatorState.init(animation:interval:at:in:)(v52, v5, v4, v16);
    swift_retain();
    int v54 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    int v67 = v54;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v55 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v68 = v23;
      uint64_t v69 = v13;
      swift_retain();
      id v56 = v55;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16) = xmmword_2461BE2B0;
      int v58 = AGGraphGetCurrentAttribute();
      int v66 = *MEMORY[0x263F288F8];
      if (v58 == v66) {
        goto LABEL_71;
      }
      id v59 = (id)AGGraphGetAttributeGraph();
      uint64_t v60 = AGGraphGetCounter();

      uint64_t v61 = MEMORY[0x263F8DA20];
      *(void *)(v57 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v57 + 64) = v61;
      *(void *)(v57 + 32) = v60;
      int v62 = AGGraphGetCurrentAttribute();
      if (v62 == v66) {
        goto LABEL_72;
      }
      uint64_t v63 = MEMORY[0x263F8E960];
      *(void *)(v57 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v57 + 104) = v63;
      *(_DWORD *)(v57 + 72) = v62;
      *(void *)(v57 + 136) = MEMORY[0x263F8D310];
      *(void *)(v57 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v57 + 112) = 0xD000000000000010;
      *(void *)(v57 + 120) = 0x800000024621FE60;
      LOBYTE(v70) = v67;
      *(void *)&v80[0].f64[0] = &dword_245728000;
      uint64_t v74 = v57;
      uint64_t v75 = (int *)_signpostLog;
      char v77 = "AnimationState";
      uint64_t v78 = 14;
      char v79 = 2;
      unint64_t v71 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v72 = 39;
      char v73 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v64 = v69;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v15, v12);
      uint64_t v13 = v64;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 40) = v53;
    if (v53)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
LABEL_37:
    *(double *)(a4 + 16) = v6;
    *(double *)(a4 + 24) = v7;
    *(unsigned char *)(a4 + 32) = 0;
    uint64_t v19 = *(void *)(a4 + 40);
    if (!v19) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v77) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v23, v5, v4, v16);
  swift_retain();
  int v26 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  int v67 = v26;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  int v27 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  uint64_t v68 = v23;
  uint64_t v69 = v13;
  swift_retain();
  id v28 = v27;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2461BE2B0;
  int v30 = AGGraphGetCurrentAttribute();
  int v66 = *MEMORY[0x263F288F8];
  if (v30 != v66)
  {
    id v31 = (id)AGGraphGetAttributeGraph();
    uint64_t v32 = AGGraphGetCounter();

    uint64_t v33 = MEMORY[0x263F8DA20];
    *(void *)(v29 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v29 + 64) = v33;
    *(void *)(v29 + 32) = v32;
    int v34 = AGGraphGetCurrentAttribute();
    if (v34 == v66) {
      goto LABEL_70;
    }
    uint64_t v35 = MEMORY[0x263F8E960];
    *(void *)(v29 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v29 + 104) = v35;
    *(_DWORD *)(v29 + 72) = v34;
    *(void *)(v29 + 136) = MEMORY[0x263F8D310];
    *(void *)(v29 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v29 + 112) = 0xD000000000000010;
    *(void *)(v29 + 120) = 0x800000024621FE60;
    LOBYTE(v70) = v67;
    *(void *)&v80[0].f64[0] = &dword_245728000;
    uint64_t v74 = v29;
    uint64_t v75 = (int *)_signpostLog;
    char v77 = "AnimationState";
    uint64_t v78 = 14;
    char v79 = 2;
    unint64_t v71 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v72 = 39;
    char v73 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v36 = v69;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v15, v12);
    uint64_t v13 = v36;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 40)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v12;
  uint64_t Counter;
  uint64_t v14;
  char *v15;
  double v16;
  double *Value;
  char v18;
  double *v19;
  double *v20;
  float v21;
  float v22;
  float v23;
  int8x16_t v24;
  int8x16_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  float v39;
  float v40;
  float v41;
  float v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  int v47;
  void *v48;
  char v49;
  id v50;
  uint64_t v51;
  int v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  char v60;
  id v61;
  uint64_t v62;
  int v63;
  id v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  int CurrentAttribute;
  int v76;
  id v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  unsigned __int8 v84;
  void (*v85)(float32x4_t *, unint64_t, double);
  void *v86;
  double v87;
  float32x4_t v88;
  float32x4_t v89;
  __int32 v90;
  __int32 v91;
  __int32 v92;
  __int32 v93;
  uint64_t v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  uint64_t v107;
  double v108;
  float32x4_t v109;
  int8x16_t v110;
  uint64_t v111;
  float32x4_t v112;
  char v113;
  uint64_t v114;
  int *v115;
  char v116;
  int *v117;
  uint64_t v118;
  char v119;
  const char *v120;
  uint64_t v121;
  char v122;
  float32x4_t v123;
  int8x16_t v124;
  double v125;
  float v126;
  float v127;
  float v128;
  float v129;
  double v130;
  double v131;
  double v132;

  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t Counter = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unsigned int v15 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
LABEL_83:
  swift_once();
LABEL_2:
  double v16 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 64))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v18) {
      double v16 = *Value;
    }
  }
  uint64_t v19 = (double *)&unk_26B0EB000;
  if (*(_DWORD *)(a4 + 72) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(unsigned char *)(a1 + 45) != 1)
    {
      uint64_t v20 = (double *)&unk_26B0EB000;
      uint64_t v19 = *(double **)(a4 + 64);
      if (v19) {
        goto LABEL_54;
      }
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 45) = 1;
  }
  uint64_t v21 = *(float *)a1;
  uint64_t v22 = *(float *)(a1 + 4);
  uint64_t v23 = *(float *)(a1 + 8);
  LODWORD(v4) = *(_DWORD *)(a1 + 12);
  double v5 = *(double *)(a1 + 16);
  double v6 = *(void *)(a1 + 24);
  double v7 = *(double *)(a1 + 32);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v123.i8[0] = 2;
    *(float *)v24.i32 = v21;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v126, v24, v22, LODWORD(v23), *(float *)&v4, v25);
    uint64_t v21 = v126;
    uint64_t v22 = v127;
    uint64_t v23 = v128;
    *(float *)&double v4 = v129;
  }
  int v26 = v21 * 128.0;
  int v27 = v22 * 128.0;
  id v28 = v23 * 128.0;
  uint64_t v29 = *(float *)&v4 * 128.0;
  if ((*(unsigned char *)(a4 + 56) & 1) == 0)
  {
    char v108 = v7;
    v109.i64[0] = v6;
    *(double *)v110.i64 = v5;
    double v4 = *(double *)(a4 + 40);
    int v30 = *(double *)(a4 + 48);
    double v5 = *(double *)(a4 + 32);
    LODWORD(v31) = *(_DWORD *)(a4 + 16);
    LODWORD(v32) = *(_DWORD *)(a4 + 20);
    LODWORD(v7) = *(_DWORD *)(a4 + 24);
    LODWORD(v6) = *(_DWORD *)(a4 + 28);
    if (v26 == *(float *)&v31
      && v27 == *(float *)&v32
      && v28 == *(float *)&v7
      && v29 == *(float *)&v6
      && *(double *)v110.i64 == v5
      && *(double *)v109.i64 == v4
      && v108 == v30)
    {
      double v5 = *(double *)v110.i64;
      double v6 = v109.i64[0];
      double v7 = v108;
      goto LABEL_53;
    }
    unsigned int v103 = v26;
    unint64_t v104 = v27;
    unsigned int v105 = v28;
    uint64_t v106 = v29;
    uint64_t v107 = Counter;
    AGGraphClearUpdate();
    uint64_t Counter = *(void *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v33 = swift_retain();
    int v34 = specialized find<A>(_:key:)(v33);
    if (v34)
    {
      uint64_t v35 = *(void *)(v34 + 72);
      swift_retain();
      swift_release();
      if (v35) {
        goto LABEL_32;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v36 = swift_retain();
    uint64_t v37 = specialized closure #1 in PropertyList.subscript.getter(v36);
    swift_release();
    if (v37)
    {
      uint64_t v19 = (double *)&unk_26B0EB000;
      if (one-time initialization token for velocityTracking != -1) {
        goto LABEL_86;
      }
      goto LABEL_29;
    }
    uint64_t v19 = (double *)&unk_26B0EB000;
    if (a2)
    {
      swift_retain();
      uint64_t v35 = a2;
      goto LABEL_32;
    }
    swift_release();
    uint64_t Counter = v107;
    double v5 = *(double *)v110.i64;
    double v6 = v109.i64[0];
    double v7 = v108;
    goto LABEL_52;
  }
  while (1)
  {
LABEL_53:
    uint64_t v20 = v19;
    *(void *)(a4 + 16) = LODWORD(v26) | ((unint64_t)LODWORD(v27) << 32);
    *(void *)(a4 + 24) = LODWORD(v28) | ((unint64_t)LODWORD(v29) << 32);
    *(double *)(a4 + 32) = v5;
    *(void *)(a4 + 40) = v6;
    *(double *)(a4 + 48) = v7;
    *(unsigned char *)(a4 + 56) = 0;
    uint64_t v19 = *(double **)(a4 + 64);
    if (!v19) {
      return;
    }
LABEL_54:
    unsigned __int8 v110 = *(int8x16_t *)a1;
    id v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(void *)(a1 + 24);
    int v30 = *(double *)(a1 + 32);
    uint64_t v68 = *((void *)v20 + 229);
    swift_retain();
    if (v68 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      uint64_t v70 = (float32x4_t)v110;
    }
    else
    {
      LOBYTE(v117) = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v123.f32, v110, *(float *)&v110.i32[1], v110.u32[2], *(float *)&v110.i32[3], v69);
      uint64_t v70 = v123;
    }
    v71.i64[0] = 0x4300000043000000;
    v71.i64[1] = 0x4300000043000000;
    uint64_t v123 = vmulq_f32(v70, v71);
    v124.i64[0] = v31;
    v124.i64[1] = v32;
    uint64_t v125 = v30;
    LOBYTE(v117) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v123, a3, v16) & 1) == 0) {
      break;
    }
    swift_retain();
    a3 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_71;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v72 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_71:
      uint64_t v81 = swift_release();
      if (!*(void *)(a4 + 64))
      {
LABEL_73:
        *(void *)(a4 + 64) = 0;
        goto LABEL_74;
      }
LABEL_72:
      specialized AnimatorState.removeListeners()(v81);
      swift_release();
      goto LABEL_73;
    }
    uint64_t v107 = Counter;
    swift_retain();
    char v73 = v72;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    char v76 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      char v77 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v78 = MEMORY[0x263F8DA20];
      *(void *)(v74 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v74 + 64) = v78;
      *(void *)(v74 + 32) = Counter;
      char v79 = AGGraphGetCurrentAttribute();
      if (v79 != v76)
      {
        unint64_t v80 = MEMORY[0x263F8E960];
        *(void *)(v74 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v74 + 104) = v80;
        *(_DWORD *)(v74 + 72) = v79;
        *(void *)(v74 + 136) = MEMORY[0x263F8D310];
        *(void *)(v74 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v74 + 112) = 0x65766C6F7365525FLL;
        *(void *)(v74 + 120) = 0xE900000000000064;
        __int16 v116 = a3;
        uint64_t v115 = &dword_245728000;
        unint64_t v114 = _signpostLog;
        char v117 = (int *)"AnimationState";
        int v118 = 14;
        unsigned int v119 = 2;
        v112.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ ended";
        v112.i64[1] = 37;
        uint64_t v113 = 2;
        unint64_t v111 = v74;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v107 + 8))(v15, v12);
        uint64_t v81 = swift_bridgeObjectRelease();
        if (!*(void *)(a4 + 64)) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
    }
    __break(1u);
LABEL_86:
    swift_once();
LABEL_29:
    uint64_t v35 = static Animation.velocityTracking;
    swift_retain();
LABEL_32:
    id v38 = v30;
    uint64_t v39 = v103 - *(float *)&v31;
    uint64_t v40 = v104 - *(float *)&v32;
    id v41 = v105 - *(float *)&v7;
    int v42 = v106 - *(float *)&v6;
    uint64_t v43 = *(double *)v110.i64 - v5;
    int v44 = *(double *)v109.i64 - v4;
    uint64_t v45 = v108 - v38;
    double v4 = *(double *)AGGraphGetValue();
    uint64_t v46 = *(void *)(a4 + 64);
    unsigned int v102 = v35;
    if (v46)
    {
      int v126 = v39;
      uint64_t v127 = v40;
      uint64_t v128 = v41;
      unsigned int v129 = v42;
      uint64_t v130 = v43;
      uint64_t v131 = v44;
      unsigned int v132 = v45;
      swift_retain();
      v123.i8[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v35, (uint64_t)&v126, v4);
      swift_retain();
      double v47 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      double v16 = v4;
      if (kdebug_is_enabled())
      {
        unint64_t v101 = v47;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v48 = (void *)_signpostLog;
        unsigned __int8 v49 = OS_os_log.signpostsEnabled.getter();
        double v5 = *(double *)v110.i64;
        double v6 = v109.i64[0];
        double v7 = v108;
        if (v49)
        {
          swift_retain();
          uint64_t v50 = v48;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          int v51 = swift_allocObject();
          *(_OWORD *)(v51 + 16) = xmmword_2461BE2B0;
          uint64_t v52 = AGGraphGetCurrentAttribute();
          unsigned int v100 = *MEMORY[0x263F288F8];
          if (v52 == v100)
          {
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            return;
          }
          uint64_t v53 = (id)AGGraphGetAttributeGraph();
          unint64_t v99 = AGGraphGetCounter();

          int v54 = MEMORY[0x263F8DA20];
          *(void *)(v51 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v51 + 64) = v54;
          *(void *)(v51 + 32) = v99;
          uint64_t v55 = AGGraphGetCurrentAttribute();
          if (v55 == v100) {
            goto LABEL_88;
          }
          id v56 = MEMORY[0x263F8E960];
          *(void *)(v51 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v51 + 104) = v56;
          *(_DWORD *)(v51 + 72) = v55;
          *(void *)(v51 + 136) = MEMORY[0x263F8D310];
          *(void *)(v51 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v51 + 112) = 0x65766C6F7365525FLL;
          *(void *)(v51 + 120) = 0xE900000000000064;
          LOBYTE(v114) = v101;
          char v117 = &dword_245728000;
          v112.i64[0] = _signpostLog;
          v123.i64[0] = (uint64_t)"AnimationState";
          v123.i64[1] = 14;
          v124.i8[0] = 2;
          unsigned int v120 = "Animation: (%p) [%d] %{public}@ updated";
          uint64_t v121 = 39;
          unsigned int v122 = 2;
          uint64_t v115 = (int *)v51;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release_n();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v15, v12);
          swift_bridgeObjectRelease();
          uint64_t v19 = (double *)&unk_26B0EB000;
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        double v5 = *(double *)v110.i64;
        double v6 = v109.i64[0];
        double v7 = v108;
      }
      a2 = *(void *)(a4 + 64);
      if (!a2)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
    }
    else
    {
      int v126 = v39;
      uint64_t v127 = v40;
      uint64_t v128 = v41;
      unsigned int v129 = v42;
      uint64_t v130 = v43;
      uint64_t v131 = v44;
      unsigned int v132 = v45;
      type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      uint64_t v57 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v57, (uint64_t)&v126, v4);
      swift_retain();
      int v58 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      double v16 = v4;
      if (kdebug_is_enabled())
      {
        unint64_t v101 = v58;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        id v59 = (void *)_signpostLog;
        uint64_t v60 = OS_os_log.signpostsEnabled.getter();
        double v5 = *(double *)v110.i64;
        double v6 = v109.i64[0];
        double v7 = v108;
        if (v60)
        {
          swift_retain();
          uint64_t v61 = v59;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          int v62 = swift_allocObject();
          *(_OWORD *)(v62 + 16) = xmmword_2461BE2B0;
          uint64_t v63 = AGGraphGetCurrentAttribute();
          unsigned int v100 = *MEMORY[0x263F288F8];
          if (v63 == v100) {
            goto LABEL_89;
          }
          uint64_t v64 = (id)AGGraphGetAttributeGraph();
          unint64_t v99 = AGGraphGetCounter();

          uint64_t v65 = MEMORY[0x263F8DA20];
          *(void *)(v62 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v62 + 64) = v65;
          *(void *)(v62 + 32) = v99;
          int v66 = AGGraphGetCurrentAttribute();
          if (v66 == v100) {
            goto LABEL_90;
          }
          int v67 = MEMORY[0x263F8E960];
          *(void *)(v62 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v62 + 104) = v67;
          *(_DWORD *)(v62 + 72) = v66;
          *(void *)(v62 + 136) = MEMORY[0x263F8D310];
          *(void *)(v62 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v62 + 112) = 0x65766C6F7365525FLL;
          *(void *)(v62 + 120) = 0xE900000000000064;
          LOBYTE(v114) = v101;
          char v117 = &dword_245728000;
          v112.i64[0] = _signpostLog;
          v123.i64[0] = (uint64_t)"AnimationState";
          v123.i64[1] = 14;
          v124.i8[0] = 2;
          unsigned int v120 = "Animation: (%p) [%d] %{public}@ started";
          uint64_t v121 = 39;
          unsigned int v122 = 2;
          uint64_t v115 = (int *)v62;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v15, v12);
          swift_bridgeObjectRelease();
          uint64_t v19 = (double *)&unk_26B0EB000;
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        double v5 = *(double *)v110.i64;
        double v6 = v109.i64[0];
        double v7 = v108;
      }
      swift_release();
      *(void *)(a4 + 64) = a2;
      if (!a2) {
        goto LABEL_82;
      }
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t Counter = v107;
LABEL_52:
    uint64_t v29 = v106;
    id v28 = v105;
    int v27 = v104;
    int v26 = v103;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v82 = v19[10];
  v112.i64[0] = (uint64_t)v19[11];
  uint64_t v83 = *((unsigned int *)v19 + 34);
  int v84 = *((unsigned char *)v19 + 140);
  uint64_t v85 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                       + 0x58);
  int v86 = static CoreGlue.shared;
  LOBYTE(v115) = v84;
  v85(&v112, v83 | ((unint64_t)v84 << 32), v82);

LABEL_74:
  unsigned __int8 v110 = v124;
  unsigned int v87 = v125;
  v88.i64[0] = 0x3C0000003C000000;
  v88.i64[1] = 0x3C0000003C000000;
  long long v89 = vmulq_f32(v123, v88);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    unsigned int v109 = v89;
    swift_release();
    unsigned int v91 = v109.i32[1];
    int v90 = v109.i32[0];
    int v93 = v109.i32[3];
    uint64_t v92 = v109.i32[2];
  }
  else
  {
    LOBYTE(v115) = 2;
    int v112 = v89;
    *(float *)&unint64_t v94 = ResolvedGradient.ColorSpace.convertOut(_:)(v112.f32);
    v109.i64[0] = v94;
    unsigned int v91 = v95;
    uint64_t v92 = v96;
    int v93 = v97;
    swift_release();
    int v90 = v109.i32[0];
  }
  *(_DWORD *)a1 = v90;
  *(_DWORD *)(a1 + 4) = v91;
  *(_DWORD *)(a1 + 8) = v92;
  *(_DWORD *)(a1 + 12) = v93;
  *(int8x16_t *)(a1 + 16) = v110;
  *(double *)(a1 + 32) = v87;
  *(unsigned char *)(a1 + 45) = 1;
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  float64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  int CurrentAttribute;
  id v44;
  uint64_t Counter;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unsigned __int8 v52;
  void (*v53)(void *, unint64_t, double);
  void *v54;
  float64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  id v61;
  uint64_t v62;
  int v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void v76[2];
  char v77;
  uint64_t v78;
  int *v79;
  char v80;
  const char *v81;
  uint64_t v82;
  char v83;
  float64x2_t v84;
  uint64_t v85;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  unsigned int v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  char v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 48))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      char v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 56) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 40) = 1;
LABEL_11:
    double v7 = *(double *)a1;
    int v8 = *(double *)(a1 + 16);
    __int16 v9 = *(double *)(a1 + 32);
    if (*(unsigned char *)(a4 + 40)) {
      goto LABEL_36;
    }
    double v5 = *(double *)(a4 + 24);
    double v4 = *(double *)(a4 + 32);
    double v6 = *(double *)(a4 + 16);
    if (v7 == v6 && v8 == v5 && v9 == v4) {
      goto LABEL_36;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v22 = swift_retain();
    uint64_t v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24) {
        goto LABEL_24;
      }
    }
    else
    {
      swift_release();
    }
    char v25 = swift_retain();
    int v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_35;
      }
      swift_retain();
      uint64_t v24 = a2;
      goto LABEL_24;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_67;
    }
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 40) == 1) {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(a4 + 48);
  if (!v21) {
    return;
  }
  while (1)
  {
    id v38 = *(double *)(a1 + 16);
    uint64_t v39 = *(void *)(a1 + 32);
    v84.f64[0] = *(float64_t *)a1;
    v84.f64[1] = v38;
    uint64_t v85 = v39;
    swift_retain();
    LOBYTE(v81) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v84, a3, (uint64_t (*)(void *, uint64_t, double, double, double, double))specialized Animation.animate<A>(value:time:context:), (void (*)(void, uint64_t, double))specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:), v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v50 = *(double *)(v21 + 64);
      v76[0] = *(void *)(v21 + 72);
      int v51 = *(unsigned int *)(v21 + 104);
      uint64_t v52 = *(unsigned char *)(v21 + 108);
      uint64_t v53 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      int v54 = static CoreGlue.shared;
      LOBYTE(v79) = v52;
      v53(v76, v51 | ((unint64_t)v52 << 32), v50);
      swift_release();

      goto LABEL_52;
    }
    swift_retain();
    a3 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_49;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v40 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_49:
      unsigned __int8 v49 = swift_release();
      if (*(void *)(a4 + 48))
      {
LABEL_50:
        specialized AnimatorState.removeListeners()(v49);
        swift_release();
      }
LABEL_51:
      swift_release();
      *(void *)(a4 + 48) = 0;
LABEL_52:
      uint64_t v55 = v84.f64[1];
      id v56 = v85;
      *(float64_t *)a1 = v84.f64[0];
      *(float64_t *)(a1 + 16) = v55;
      *(void *)(a1 + 32) = v56;
      *(unsigned char *)(a1 + 40) = 1;
      return;
    }
    uint64_t v74 = v15;
    swift_retain();
    id v41 = v40;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    int v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    unsigned int v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      int v44 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v46 = MEMORY[0x263F8DA20];
      *(void *)(v42 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v42 + 64) = v46;
      *(void *)(v42 + 32) = Counter;
      double v47 = AGGraphGetCurrentAttribute();
      if (v47 != v15)
      {
        uint64_t v48 = MEMORY[0x263F8E960];
        *(void *)(v42 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v42 + 104) = v48;
        *(_DWORD *)(v42 + 72) = v47;
        *(void *)(v42 + 136) = MEMORY[0x263F8D310];
        *(void *)(v42 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v42 + 112) = 0x7453656B6F727453;
        *(void *)(v42 + 120) = 0xEB00000000656C79;
        unint64_t v80 = a3;
        uint64_t v78 = _signpostLog;
        char v79 = &dword_245728000;
        uint64_t v81 = "AnimationState";
        uint64_t v82 = 14;
        uint64_t v83 = 2;
        v76[0] = "Animation: (%p) [%d] %{public}@ ended";
        v76[1] = 37;
        char v77 = 2;
        uint64_t v75 = v42;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
        unsigned __int8 v49 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 48)) {
          goto LABEL_50;
        }
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_67:
    swift_once();
LABEL_21:
    uint64_t v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_24:
    double v6 = v7 - v6;
    double v5 = v8 - v5;
    double v4 = v9 - v4;
    char v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 48)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v57 = swift_retain();
    int v58 = specialized AnimatorState.init(animation:interval:at:in:)(v57, v6, v5, v4, v18);
    swift_retain();
    id v59 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_61;
    }
    uint64_t v72 = v59;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v60 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      char v73 = v24;
      uint64_t v74 = v15;
      swift_retain();
      uint64_t v61 = v60;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      int v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_2461BE2B0;
      uint64_t v63 = AGGraphGetCurrentAttribute();
      unint64_t v71 = *MEMORY[0x263F288F8];
      if (v63 == v71) {
        goto LABEL_70;
      }
      uint64_t v64 = (id)AGGraphGetAttributeGraph();
      uint64_t v65 = AGGraphGetCounter();

      int v66 = MEMORY[0x263F8DA20];
      *(void *)(v62 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v62 + 64) = v66;
      *(void *)(v62 + 32) = v65;
      int v67 = AGGraphGetCurrentAttribute();
      if (v67 == v71) {
        goto LABEL_71;
      }
      uint64_t v68 = MEMORY[0x263F8E960];
      *(void *)(v62 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v62 + 104) = v68;
      *(_DWORD *)(v62 + 72) = v67;
      *(void *)(v62 + 136) = MEMORY[0x263F8D310];
      *(void *)(v62 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v62 + 112) = 0x7453656B6F727453;
      *(void *)(v62 + 120) = 0xEB00000000656C79;
      LOBYTE(v75) = v72;
      v76[0] = &dword_245728000;
      uint64_t v78 = v62;
      char v79 = (int *)_signpostLog;
      *(void *)&v84.f64[0] = "AnimationState";
      *(void *)&v84.f64[1] = 14;
      LOBYTE(v85) = 2;
      uint64_t v81 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v82 = 39;
      uint64_t v83 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v69 = v74;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
      unsigned int v15 = v69;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_61:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 48) = v58;
    if (v58)
    {
LABEL_34:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_35;
    }
LABEL_63:
    __break(1u);
LABEL_35:
    swift_release();
LABEL_36:
    *(double *)(a4 + 16) = v7;
    *(double *)(a4 + 24) = v8;
    *(double *)(a4 + 32) = v9;
    *(unsigned char *)(a4 + 40) = 0;
    uint64_t v21 = *(void *)(a4 + 48);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v84.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, v6, v5, v4, v18);
  swift_retain();
  int v27 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v72 = v27;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  id v28 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_32:
    swift_release_n();
    goto LABEL_33;
  }
  char v73 = v24;
  uint64_t v74 = v15;
  swift_retain();
  uint64_t v29 = v28;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  int v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2461BE2B0;
  id v31 = AGGraphGetCurrentAttribute();
  unint64_t v71 = *MEMORY[0x263F288F8];
  if (v31 != v71)
  {
    uint64_t v32 = (id)AGGraphGetAttributeGraph();
    uint64_t v33 = AGGraphGetCounter();

    int v34 = MEMORY[0x263F8DA20];
    *(void *)(v30 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v30 + 64) = v34;
    *(void *)(v30 + 32) = v33;
    uint64_t v35 = AGGraphGetCurrentAttribute();
    if (v35 == v71) {
      goto LABEL_69;
    }
    uint64_t v36 = MEMORY[0x263F8E960];
    *(void *)(v30 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v30 + 104) = v36;
    *(_DWORD *)(v30 + 72) = v35;
    *(void *)(v30 + 136) = MEMORY[0x263F8D310];
    *(void *)(v30 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v30 + 112) = 0x7453656B6F727453;
    *(void *)(v30 + 120) = 0xEB00000000656C79;
    LOBYTE(v75) = v72;
    v76[0] = &dword_245728000;
    uint64_t v78 = v30;
    char v79 = (int *)_signpostLog;
    *(void *)&v84.f64[0] = "AnimationState";
    *(void *)&v84.f64[1] = 14;
    LOBYTE(v85) = 2;
    uint64_t v81 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v82 = 39;
    uint64_t v83 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v37 = v74;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
    unsigned int v15 = v37;
    swift_bridgeObjectRelease();
LABEL_33:
    if (*(void *)(a4 + 48)) {
      goto LABEL_34;
    }
    goto LABEL_63;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  int CurrentAttribute;
  id v43;
  uint64_t Counter;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unsigned __int8 v51;
  void (*v52)(void *, unint64_t, double);
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  void *v58;
  id v59;
  uint64_t v60;
  int v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void v74[2];
  char v75;
  uint64_t v76;
  int *v77;
  char v78;
  const char *v79;
  uint64_t v80;
  char v81;
  float64x2_t v82;
  uint64_t v83;

  uint64_t v14 = type metadata accessor for OSSignpostID();
  unsigned int v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  char v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 48))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      char v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 56) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 32) = 1;
LABEL_11:
    double v7 = *(double *)a1;
    int v8 = *(double *)(a1 + 8);
    __int16 v9 = *(double *)(a1 + 24);
    if (*(unsigned char *)(a4 + 40)) {
      goto LABEL_36;
    }
    double v5 = *(double *)(a4 + 24);
    double v4 = *(double *)(a4 + 32);
    double v6 = *(double *)(a4 + 16);
    if (v7 == v6 && v8 == v5 && v9 == v4) {
      goto LABEL_36;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v22 = swift_retain();
    uint64_t v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24) {
        goto LABEL_24;
      }
    }
    else
    {
      swift_release();
    }
    char v25 = swift_retain();
    int v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_35;
      }
      swift_retain();
      uint64_t v24 = a2;
      goto LABEL_24;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_67;
    }
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 32) == 1) {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(a4 + 48);
  if (!v21) {
    return;
  }
  while (1)
  {
    id v38 = *(void *)(a1 + 24);
    uint64_t v82 = *(float64x2_t *)a1;
    uint64_t v83 = v38;
    swift_retain();
    LOBYTE(v79) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v82, a3, (uint64_t (*)(void *, uint64_t, double, double, double, double))specialized Animation.animate<A>(value:time:context:), (void (*)(void, uint64_t, double))specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:), v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      unsigned __int8 v49 = *(double *)(v21 + 64);
      v74[0] = *(void *)(v21 + 72);
      uint64_t v50 = *(unsigned int *)(v21 + 104);
      int v51 = *(unsigned char *)(v21 + 108);
      uint64_t v52 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      uint64_t v53 = static CoreGlue.shared;
      LOBYTE(v77) = v51;
      v52(v74, v50 | ((unint64_t)v51 << 32), v49);
      swift_release();

      goto LABEL_52;
    }
    swift_retain();
    a3 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_49;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v39 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_49:
      uint64_t v48 = swift_release();
      if (*(void *)(a4 + 48))
      {
LABEL_50:
        specialized AnimatorState.removeListeners()(v48);
        swift_release();
      }
LABEL_51:
      swift_release();
      *(void *)(a4 + 48) = 0;
LABEL_52:
      int v54 = v83;
      *(float64x2_t *)a1 = v82;
      *(void *)(a1 + 24) = v54;
      *(unsigned char *)(a1 + 32) = 1;
      return;
    }
    uint64_t v72 = v15;
    swift_retain();
    uint64_t v40 = v39;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    id v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    unsigned int v15 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v43 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v45 = MEMORY[0x263F8DA20];
      *(void *)(v41 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v41 + 64) = v45;
      *(void *)(v41 + 32) = Counter;
      uint64_t v46 = AGGraphGetCurrentAttribute();
      if (v46 != v15)
      {
        double v47 = MEMORY[0x263F8E960];
        *(void *)(v41 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v41 + 104) = v47;
        *(_DWORD *)(v41 + 72) = v46;
        *(void *)(v41 + 136) = MEMORY[0x263F8D310];
        *(void *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v41 + 112) = 0x7465736E495FLL;
        *(void *)(v41 + 120) = 0xE600000000000000;
        uint64_t v78 = a3;
        char v76 = _signpostLog;
        char v77 = &dword_245728000;
        char v79 = "AnimationState";
        unint64_t v80 = 14;
        uint64_t v81 = 2;
        v74[0] = "Animation: (%p) [%d] %{public}@ ended";
        v74[1] = 37;
        uint64_t v75 = 2;
        char v73 = v41;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
        uint64_t v48 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 48)) {
          goto LABEL_50;
        }
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_67:
    swift_once();
LABEL_21:
    uint64_t v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_24:
    double v6 = v7 - v6;
    double v5 = v8 - v5;
    double v4 = v9 - v4;
    char v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 48)) {
      break;
    }
    type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>();
    swift_allocObject();
    swift_retain();
    uint64_t v55 = swift_retain();
    id v56 = specialized AnimatorState.init(animation:interval:at:in:)(v55, v6, v5, v4, v18);
    swift_retain();
    uint64_t v57 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_61;
    }
    uint64_t v70 = v57;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int v58 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      unint64_t v71 = v24;
      uint64_t v72 = v15;
      swift_retain();
      id v59 = v58;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = xmmword_2461BE2B0;
      uint64_t v61 = AGGraphGetCurrentAttribute();
      uint64_t v69 = *MEMORY[0x263F288F8];
      if (v61 == v69) {
        goto LABEL_70;
      }
      int v62 = (id)AGGraphGetAttributeGraph();
      uint64_t v63 = AGGraphGetCounter();

      uint64_t v64 = MEMORY[0x263F8DA20];
      *(void *)(v60 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v60 + 64) = v64;
      *(void *)(v60 + 32) = v63;
      uint64_t v65 = AGGraphGetCurrentAttribute();
      if (v65 == v69) {
        goto LABEL_71;
      }
      int v66 = MEMORY[0x263F8E960];
      *(void *)(v60 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v60 + 104) = v66;
      *(_DWORD *)(v60 + 72) = v65;
      *(void *)(v60 + 136) = MEMORY[0x263F8D310];
      *(void *)(v60 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v60 + 112) = 0x7465736E495FLL;
      *(void *)(v60 + 120) = 0xE600000000000000;
      LOBYTE(v73) = v70;
      v74[0] = &dword_245728000;
      char v76 = v60;
      char v77 = (int *)_signpostLog;
      *(void *)&v82.f64[0] = "AnimationState";
      *(void *)&v82.f64[1] = 14;
      LOBYTE(v83) = 2;
      char v79 = "Animation: (%p) [%d] %{public}@ started";
      unint64_t v80 = 39;
      uint64_t v81 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      int v67 = v72;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
      unsigned int v15 = v67;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_61:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 48) = v56;
    if (v56)
    {
LABEL_34:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_35;
    }
LABEL_63:
    __break(1u);
LABEL_35:
    swift_release();
LABEL_36:
    *(double *)(a4 + 16) = v7;
    *(double *)(a4 + 24) = v8;
    *(double *)(a4 + 32) = v9;
    *(unsigned char *)(a4 + 40) = 0;
    uint64_t v21 = *(void *)(a4 + 48);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v82.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, v6, v5, v4, v18);
  swift_retain();
  int v27 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v70 = v27;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  id v28 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_32:
    swift_release_n();
    goto LABEL_33;
  }
  unint64_t v71 = v24;
  uint64_t v72 = v15;
  swift_retain();
  uint64_t v29 = v28;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  int v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2461BE2B0;
  id v31 = AGGraphGetCurrentAttribute();
  uint64_t v69 = *MEMORY[0x263F288F8];
  if (v31 != v69)
  {
    uint64_t v32 = (id)AGGraphGetAttributeGraph();
    uint64_t v33 = AGGraphGetCounter();

    int v34 = MEMORY[0x263F8DA20];
    *(void *)(v30 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v30 + 64) = v34;
    *(void *)(v30 + 32) = v33;
    uint64_t v35 = AGGraphGetCurrentAttribute();
    if (v35 == v69) {
      goto LABEL_69;
    }
    uint64_t v36 = MEMORY[0x263F8E960];
    *(void *)(v30 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v30 + 104) = v36;
    *(_DWORD *)(v30 + 72) = v35;
    *(void *)(v30 + 136) = MEMORY[0x263F8D310];
    *(void *)(v30 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v30 + 112) = 0x7465736E495FLL;
    *(void *)(v30 + 120) = 0xE600000000000000;
    LOBYTE(v73) = v70;
    v74[0] = &dword_245728000;
    char v76 = v30;
    char v77 = (int *)_signpostLog;
    *(void *)&v82.f64[0] = "AnimationState";
    *(void *)&v82.f64[1] = 14;
    LOBYTE(v83) = 2;
    char v79 = "Animation: (%p) [%d] %{public}@ updated";
    unint64_t v80 = 39;
    uint64_t v81 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v37 = v72;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
    unsigned int v15 = v37;
    swift_bridgeObjectRelease();
LABEL_33:
    if (*(void *)(a4 + 48)) {
      goto LABEL_34;
    }
    goto LABEL_63;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double *Value;
  char v16;
  uint64_t v17;
  int64x2_t v18;
  char v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  float v26;
  unsigned __int8 v27;
  float32x2_t v28;
  int8x16_t v29;
  float v30;
  char v31;
  char v32;
  void *v33;
  id v34;
  uint64_t v35;
  int v36;
  int v37;
  id v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  void *v45;
  id v46;
  uint64_t v47;
  int v48;
  int v49;
  id v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  void *v56;
  id v57;
  uint64_t v58;
  int CurrentAttribute;
  id v60;
  uint64_t Counter;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  double v66;
  uint64_t v67;
  unsigned __int8 v68;
  void (*v69)(const char **, unint64_t, double);
  void *v70;
  int64x2_t v71;
  long long v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  int8x16_t v76;
  char v77;
  long long v78;
  uint64_t v79;
  uint64_t v80;
  float32x2_t v81;
  float32x2_t v82;
  unint64_t v83;
  int32x2_t v84;
  float *v85;
  int64x2_t v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  int8x16_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t v93;
  uint64_t v94;
  long long v95;
  int64x2_t v96;
  long long v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  void v101[2];
  const char *v102;
  uint64_t v103;
  char v104;
  const char *v105;
  uint64_t v106;
  char v107;
  _OWORD v108[3];
  unsigned __int8 v109;
  float v110;
  int64x2_t v111;
  double v112;
  double v113;
  double v114;
  unsigned __int8 v115;
  unsigned char v116[32];
  long long v117;
  unsigned __int8 v118;
  float v119;
  int64x2_t v120;
  double v121;
  double v122;
  double v123;
  char v124;
  float32x2x2_t v125;

  char v11 = type metadata accessor for OSSignpostID();
  v96.i64[0] = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
LABEL_77:
  swift_once();
LABEL_2:
  uint64_t v14 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 72))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v16) {
      uint64_t v14 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 80) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(unsigned char *)(a1 + 65) != 1)
    {
      unint64_t v17 = *(void *)(a4 + 72);
      if (v17) {
        goto LABEL_47;
      }
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 65) = 1;
  }
  _ShapeStyle_Pack.Effect.animatableData.getter((uint64_t)v108);
  if ((*(unsigned char *)(a4 + 65) & 1) == 0)
  {
    LODWORD(v94) = a3;
    *(void *)&uint64_t v95 = v11;
    char v18 = *(int64x2_t *)(a4 + 24);
    double v4 = *(double *)(a4 + 40);
    double v5 = *(double *)(a4 + 48);
    double v6 = *(double *)(a4 + 56);
    uint64_t v19 = *(unsigned char *)(a4 + 64);
    uint64_t v20 = *(float *)(a4 + 16);
    unsigned int v119 = v20;
    int v93 = (int8x16_t)v18;
    unsigned int v120 = v18;
    uint64_t v121 = v4;
    unsigned int v122 = v5;
    uint64_t v123 = v6;
    unsigned int v124 = v19 & 1;
    *(_OWORD *)__int16 v116 = v108[0];
    *(_OWORD *)&v116[16] = v108[1];
    char v117 = v108[2];
    int v118 = v109;
    if (specialized static AnimatablePair.== infix(_:_:)((float *)v116, &v119)) {
      goto LABEL_12;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v21 = swift_retain();
    uint64_t v22 = specialized find<A>(_:key:)(v21);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 72);
      swift_retain();
      swift_release();
      if (v23) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v24 = swift_retain();
    char v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release();
    if (v25)
    {
      if (one-time initialization token for velocityTracking != -1) {
        goto LABEL_80;
      }
      goto LABEL_19;
    }
    if (!a2)
    {
      swift_release();
LABEL_12:
      char v11 = v95;
      a3 = v94;
      goto LABEL_46;
    }
    swift_retain();
    uint64_t v23 = a2;
    goto LABEL_22;
  }
  while (1)
  {
LABEL_46:
    int v54 = *((void *)&v108[2] + 1);
    uint64_t v55 = v109;
    *(void *)(a4 + 16) = LODWORD(v108[0]);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)((char *)v108 + 8);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)((char *)&v108[1] + 8);
    *(void *)(a4 + 56) = v54;
    *(_WORD *)(a4 + 64) = v55;
    unint64_t v17 = *(void *)(a4 + 72);
    if (!v17) {
      return;
    }
LABEL_47:
    swift_retain();
    _ShapeStyle_Pack.Effect.animatableData.getter((uint64_t)v108);
    LOBYTE(v105) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)v108, a3, v14) & 1) == 0) {
      break;
    }
    swift_retain();
    uint64_t v19 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_59:
      swift_release();
      if (!*(void *)(a4 + 72))
      {
LABEL_61:
        *(void *)(a4 + 72) = 0;
        goto LABEL_62;
      }
LABEL_60:
      specialized AnimatorState.removeListeners()();
      swift_release();
      goto LABEL_61;
    }
    *(void *)&uint64_t v95 = v11;
    swift_retain();
    uint64_t v57 = v56;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    int v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v20 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      uint64_t v60 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      int v62 = MEMORY[0x263F8DA20];
      *(void *)(v58 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v58 + 64) = v62;
      *(void *)(v58 + 32) = Counter;
      uint64_t v63 = AGGraphGetCurrentAttribute();
      if (v63 != LODWORD(v20))
      {
        uint64_t v64 = MEMORY[0x263F8E960];
        *(void *)(v58 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v58 + 104) = v64;
        *(_DWORD *)(v58 + 72) = v63;
        *(void *)(v58 + 136) = MEMORY[0x263F8D310];
        *(void *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v58 + 112) = 0x746365666645;
        *(void *)(v58 + 120) = 0xE600000000000000;
        unsigned int v100 = v19;
        v101[0] = &dword_245728000;
        unint64_t v98 = v58;
        unint64_t v99 = _signpostLog;
        unsigned int v105 = "AnimationState";
        uint64_t v106 = 14;
        uint64_t v107 = 2;
        unsigned int v102 = "Animation: (%p) [%d] %{public}@ ended";
        unsigned int v103 = 37;
        unint64_t v104 = 2;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, void))(v96.i64[0] + 8))(v13, v95);
        swift_bridgeObjectRelease();
        if (!*(void *)(a4 + 72)) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
    }
    __break(1u);
LABEL_80:
    swift_once();
LABEL_19:
    uint64_t v23 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    int v26 = v20;
    int v27 = v118;
    if (v19)
    {
      double v4 = *(double *)&v116[24];
      double v6 = *((double *)&v117 + 1);
      double v5 = *(double *)&v117;
      int v93 = *(int8x16_t *)&v116[8];
      char v11 = v95;
    }
    else
    {
      char v11 = v95;
      int v27 = 0;
      if ((v118 & 1) == 0)
      {
        double v4 = *(double *)&v116[24] - v4;
        double v5 = *(double *)&v117 - v5;
        double v6 = *((double *)&v117 + 1) - v6;
        id v28 = vsub_f32((float32x2_t)vmovn_s64(*(int64x2_t *)&v116[8]), (float32x2_t)vmovn_s64((int64x2_t)v93));
        v29.i64[0] = v28.u32[0];
        v29.i64[1] = v28.u32[1];
        int v93 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)&v116[8], 0x20uLL), (float32x2_t)vshrn_n_s64((int64x2_t)v93, 0x20uLL)), 0x20uLL), v29);
      }
    }
    a3 = v94;
    int v30 = *(float *)v116 - v26;
    uint64_t v14 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 72))
    {
      unsigned __int8 v110 = v30;
      unint64_t v111 = (int64x2_t)v93;
      int v112 = v4;
      uint64_t v113 = v5;
      unint64_t v114 = v6;
      uint64_t v115 = v27;
      swift_retain();
      LOBYTE(v105) = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v23, (uint64_t)&v110, v14);
      swift_retain();
      id v31 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        uint64_t v32 = v31;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v33 = (void *)_signpostLog;
        if (OS_os_log.signpostsEnabled.getter())
        {
          v93.i64[0] = v23;
          swift_retain();
          int v34 = v33;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v35 = swift_allocObject();
          *(_OWORD *)(v35 + 16) = xmmword_2461BE2B0;
          uint64_t v36 = AGGraphGetCurrentAttribute();
          uint64_t v37 = *MEMORY[0x263F288F8];
          if (v36 == *MEMORY[0x263F288F8])
          {
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
            return;
          }
          id v38 = (id)AGGraphGetAttributeGraph();
          uint64_t v92 = AGGraphGetCounter();

          uint64_t v39 = MEMORY[0x263F8DA20];
          *(void *)(v35 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v35 + 64) = v39;
          *(void *)(v35 + 32) = v92;
          uint64_t v40 = AGGraphGetCurrentAttribute();
          if (v40 == v37) {
            goto LABEL_82;
          }
          id v41 = MEMORY[0x263F8E960];
          *(void *)(v35 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v35 + 104) = v41;
          *(_DWORD *)(v35 + 72) = v40;
          *(void *)(v35 + 136) = MEMORY[0x263F8D310];
          *(void *)(v35 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v35 + 112) = 0x746365666645;
          *(void *)(v35 + 120) = 0xE600000000000000;
          unsigned int v100 = v32;
          v101[0] = &dword_245728000;
          unint64_t v98 = v35;
          unint64_t v99 = _signpostLog;
          unsigned int v105 = "AnimationState";
          uint64_t v106 = 14;
          uint64_t v107 = 2;
          unsigned int v102 = "Animation: (%p) [%d] %{public}@ updated";
          unsigned int v103 = 39;
          unint64_t v104 = 2;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release_n();
          char v11 = v95;
          (*(void (**)(char *, void))(v96.i64[0] + 8))(v13, v95);
          swift_bridgeObjectRelease();
          a3 = v94;
        }
        else
        {
          swift_release_n();
          char v11 = v95;
        }
      }
      else
      {
        swift_release_n();
      }
      a2 = *(void *)(a4 + 72);
      if (!a2)
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
    }
    else
    {
      unsigned __int8 v110 = v30;
      unint64_t v111 = (int64x2_t)v93;
      int v112 = v4;
      uint64_t v113 = v5;
      unint64_t v114 = v6;
      uint64_t v115 = v27;
      type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      int v42 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v42, (uint64_t)&v110, v14);
      swift_retain();
      uint64_t v43 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        int v44 = v43;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v45 = (void *)_signpostLog;
        if (OS_os_log.signpostsEnabled.getter())
        {
          v93.i64[0] = v23;
          swift_retain();
          uint64_t v46 = v45;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          double v47 = swift_allocObject();
          *(_OWORD *)(v47 + 16) = xmmword_2461BE2B0;
          uint64_t v48 = AGGraphGetCurrentAttribute();
          unsigned __int8 v49 = *MEMORY[0x263F288F8];
          if (v48 == *MEMORY[0x263F288F8]) {
            goto LABEL_83;
          }
          uint64_t v50 = (id)AGGraphGetAttributeGraph();
          uint64_t v92 = AGGraphGetCounter();

          int v51 = MEMORY[0x263F8DA20];
          *(void *)(v47 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v47 + 64) = v51;
          *(void *)(v47 + 32) = v92;
          uint64_t v52 = AGGraphGetCurrentAttribute();
          if (v52 == v49) {
            goto LABEL_84;
          }
          uint64_t v53 = MEMORY[0x263F8E960];
          *(void *)(v47 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v47 + 104) = v53;
          *(_DWORD *)(v47 + 72) = v52;
          *(void *)(v47 + 136) = MEMORY[0x263F8D310];
          *(void *)(v47 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v47 + 112) = 0x746365666645;
          *(void *)(v47 + 120) = 0xE600000000000000;
          unsigned int v100 = v44;
          v101[0] = &dword_245728000;
          unint64_t v98 = v47;
          unint64_t v99 = _signpostLog;
          unsigned int v105 = "AnimationState";
          uint64_t v106 = 14;
          uint64_t v107 = 2;
          unsigned int v102 = "Animation: (%p) [%d] %{public}@ started";
          unsigned int v103 = 39;
          unint64_t v104 = 2;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          char v11 = v95;
          (*(void (**)(char *, void))(v96.i64[0] + 8))(v13, v95);
          swift_bridgeObjectRelease();
          a3 = v94;
        }
        else
        {
          swift_release();
          char v11 = v95;
        }
      }
      else
      {
        swift_release();
      }
      swift_release();
      *(void *)(a4 + 72) = a2;
      if (!a2) {
        goto LABEL_76;
      }
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  int v66 = *(double *)(v17 + 96);
  unsigned int v102 = *(const char **)(v17 + 104);
  int v67 = *(unsigned int *)(v17 + 164);
  uint64_t v68 = *(unsigned char *)(v17 + 168);
  uint64_t v69 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                       + 0x58);
  uint64_t v70 = static CoreGlue.shared;
  LOBYTE(v101[0]) = v68;
  v69(&v102, v67 | ((unint64_t)v68 << 32), v66);

LABEL_62:
  unint64_t v71 = *(int64x2_t *)((char *)v108 + 8);
  uint64_t v72 = *(_OWORD *)((char *)&v108[1] + 8);
  char v73 = *((void *)&v108[2] + 1);
  uint64_t v74 = v109;
  *(_DWORD *)(a1 + 48) = v108[0];
  if (*(unsigned char *)(a1 + 45) & 1) != 0 || (v74)
  {
    swift_release();
    char v73 = 0;
    uint64_t v75 = 0;
    char v76 = 0uLL;
    char v77 = 1;
    uint64_t v78 = 0uLL;
  }
  else
  {
    uint64_t v95 = v72;
    char v79 = *(unsigned __int8 *)(a1 + 44);
    unint64_t v80 = *(unsigned int *)(a1 + 40);
    uint64_t v81 = (float32x2_t)vmovn_s64(v71);
    uint64_t v82 = (float32x2_t)vshrn_n_s64(v71, 0x20uLL);
    if (one-time initialization token for legacyInterpolation != -1) {
      swift_once();
    }
    uint64_t v75 = v80 | (v79 << 32);
    *(float32x2_t *)v71.i8 = vmul_f32(v81, (float32x2_t)0x3C0000003C000000);
    *(float32x2_t *)&uint64_t v65 = vmul_f32(v82, (float32x2_t)0x3C0000003C000000);
    uint64_t v96 = v71;
    unsigned __int8 v97 = v65;
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      swift_release();
      uint64_t v83 = v96.i64[0];
      int v84 = (int32x2_t)v97;
    }
    else
    {
      LOBYTE(v99) = 2;
      uint64_t v85 = (float *)v101;
      v125.val[0] = (float32x2_t)v96.i64[0];
      v125.val[1] = (float32x2_t)v97;
      vst2_f32(v85, v125);
      *(float *)v86.i32 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)v101);
      unint64_t v94 = v87;
      v93.i64[0] = v88;
      uint64_t v96 = v86;
      unsigned __int8 v97 = v89;
      swift_release();
      uint64_t v83 = __PAIR64__(v94, v96.u32[0]);
      int v84 = (int32x2_t)__PAIR64__(v93.u32[0], v97);
    }
    char v77 = 0;
    v90.i64[0] = v83;
    v90.i64[1] = HIDWORD(v83);
    char v76 = vorrq_s8((int8x16_t)vshll_n_s32(v84, 0x20uLL), v90);
    uint64_t v78 = v95;
  }
  *(int8x16_t *)a1 = v76;
  *(_OWORD *)(a1 + 16) = v78;
  *(void *)(a1 + 32) = v73;
  *(_DWORD *)(a1 + 40) = v75;
  *(unsigned char *)(a1 + 44) = BYTE4(v75);
  *(unsigned char *)(a1 + 45) = v77;
  *(unsigned char *)(a1 + 65) = 1;
}

{
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v12;
  uint64_t Counter;
  uint64_t v14;
  char *v15;
  double v16;
  double *Value;
  char v18;
  double *v19;
  double *v20;
  float v21;
  float v22;
  float v23;
  int8x16_t v24;
  int8x16_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  float v39;
  float v40;
  float v41;
  float v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  int v47;
  void *v48;
  char v49;
  id v50;
  uint64_t v51;
  int v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  char v60;
  id v61;
  uint64_t v62;
  int v63;
  id v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  int CurrentAttribute;
  int v76;
  id v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  unsigned __int8 v84;
  void (*v85)(float32x4_t *, unint64_t, double);
  void *v86;
  double v87;
  float32x4_t v88;
  float32x4_t v89;
  __int32 v90;
  __int32 v91;
  __int32 v92;
  __int32 v93;
  uint64_t v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  uint64_t v107;
  double v108;
  float32x4_t v109;
  int8x16_t v110;
  uint64_t v111;
  float32x4_t v112;
  char v113;
  uint64_t v114;
  int *v115;
  char v116;
  int *v117;
  uint64_t v118;
  char v119;
  const char *v120;
  uint64_t v121;
  char v122;
  float32x4_t v123;
  int8x16_t v124;
  double v125;
  float v126;
  float v127;
  float v128;
  float v129;
  double v130;
  double v131;
  double v132;

  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t Counter = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unsigned int v15 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
LABEL_83:
  swift_once();
LABEL_2:
  double v16 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 64))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v18) {
      double v16 = *Value;
    }
  }
  uint64_t v19 = (double *)&unk_26B0EB000;
  if (*(_DWORD *)(a4 + 72) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(unsigned char *)(a1 + 45) != 1)
    {
      uint64_t v20 = (double *)&unk_26B0EB000;
      uint64_t v19 = *(double **)(a4 + 64);
      if (v19) {
        goto LABEL_54;
      }
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 45) = 1;
  }
  uint64_t v21 = *(float *)a1;
  uint64_t v22 = *(float *)(a1 + 4);
  uint64_t v23 = *(float *)(a1 + 8);
  LODWORD(v4) = *(_DWORD *)(a1 + 12);
  double v5 = *(double *)(a1 + 16);
  double v6 = *(void *)(a1 + 24);
  double v7 = *(double *)(a1 + 32);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v123.i8[0] = 2;
    *(float *)v24.i32 = v21;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v126, v24, v22, LODWORD(v23), *(float *)&v4, v25);
    uint64_t v21 = v126;
    uint64_t v22 = v127;
    uint64_t v23 = v128;
    *(float *)&double v4 = v129;
  }
  int v26 = v21 * 128.0;
  int v27 = v22 * 128.0;
  id v28 = v23 * 128.0;
  uint64_t v29 = *(float *)&v4 * 128.0;
  if ((*(unsigned char *)(a4 + 56) & 1) == 0)
  {
    char v108 = v7;
    v109.i64[0] = v6;
    *(double *)v110.i64 = v5;
    double v4 = *(double *)(a4 + 40);
    int v30 = *(double *)(a4 + 48);
    double v5 = *(double *)(a4 + 32);
    LODWORD(v31) = *(_DWORD *)(a4 + 16);
    LODWORD(v32) = *(_DWORD *)(a4 + 20);
    LODWORD(v7) = *(_DWORD *)(a4 + 24);
    LODWORD(v6) = *(_DWORD *)(a4 + 28);
    if (v26 == *(float *)&v31
      && v27 == *(float *)&v32
      && v28 == *(float *)&v7
      && v29 == *(float *)&v6
      && *(double *)v110.i64 == v5
      && *(double *)v109.i64 == v4
      && v108 == v30)
    {
      double v5 = *(double *)v110.i64;
      double v6 = v109.i64[0];
      double v7 = v108;
      goto LABEL_53;
    }
    unsigned int v103 = v26;
    unint64_t v104 = v27;
    unsigned int v105 = v28;
    uint64_t v106 = v29;
    uint64_t v107 = Counter;
    AGGraphClearUpdate();
    uint64_t Counter = *(void *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v33 = swift_retain();
    int v34 = specialized find<A>(_:key:)(v33);
    if (v34)
    {
      uint64_t v35 = *(void *)(v34 + 72);
      swift_retain();
      swift_release();
      if (v35) {
        goto LABEL_32;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v36 = swift_retain();
    uint64_t v37 = specialized closure #1 in PropertyList.subscript.getter(v36);
    swift_release();
    if (v37)
    {
      uint64_t v19 = (double *)&unk_26B0EB000;
      if (one-time initialization token for velocityTracking != -1) {
        goto LABEL_86;
      }
      goto LABEL_29;
    }
    uint64_t v19 = (double *)&unk_26B0EB000;
    if (a2)
    {
      swift_retain();
      uint64_t v35 = a2;
      goto LABEL_32;
    }
    swift_release();
    uint64_t Counter = v107;
    double v5 = *(double *)v110.i64;
    double v6 = v109.i64[0];
    double v7 = v108;
    goto LABEL_52;
  }
  while (1)
  {
LABEL_53:
    uint64_t v20 = v19;
    *(void *)(a4 + 16) = LODWORD(v26) | ((unint64_t)LODWORD(v27) << 32);
    *(void *)(a4 + 24) = LODWORD(v28) | ((unint64_t)LODWORD(v29) << 32);
    *(double *)(a4 + 32) = v5;
    *(void *)(a4 + 40) = v6;
    *(double *)(a4 + 48) = v7;
    *(unsigned char *)(a4 + 56) = 0;
    uint64_t v19 = *(double **)(a4 + 64);
    if (!v19) {
      return;
    }
LABEL_54:
    unsigned __int8 v110 = *(int8x16_t *)a1;
    id v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(void *)(a1 + 24);
    int v30 = *(double *)(a1 + 32);
    uint64_t v68 = *((void *)v20 + 229);
    swift_retain();
    if (v68 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      uint64_t v70 = (float32x4_t)v110;
    }
    else
    {
      LOBYTE(v117) = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v123.f32, v110, *(float *)&v110.i32[1], v110.u32[2], *(float *)&v110.i32[3], v69);
      uint64_t v70 = v123;
    }
    v71.i64[0] = 0x4300000043000000;
    v71.i64[1] = 0x4300000043000000;
    uint64_t v123 = vmulq_f32(v70, v71);
    v124.i64[0] = v31;
    v124.i64[1] = v32;
    uint64_t v125 = v30;
    LOBYTE(v117) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v123, a3, v16) & 1) == 0) {
      break;
    }
    swift_retain();
    a3 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_71;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v72 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_71:
      uint64_t v81 = swift_release();
      if (!*(void *)(a4 + 64))
      {
LABEL_73:
        *(void *)(a4 + 64) = 0;
        goto LABEL_74;
      }
LABEL_72:
      specialized AnimatorState.removeListeners()(v81);
      swift_release();
      goto LABEL_73;
    }
    uint64_t v107 = Counter;
    swift_retain();
    char v73 = v72;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    char v76 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      char v77 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v78 = MEMORY[0x263F8DA20];
      *(void *)(v74 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v74 + 64) = v78;
      *(void *)(v74 + 32) = Counter;
      char v79 = AGGraphGetCurrentAttribute();
      if (v79 != v76)
      {
        unint64_t v80 = MEMORY[0x263F8E960];
        *(void *)(v74 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v74 + 104) = v80;
        *(_DWORD *)(v74 + 72) = v79;
        *(void *)(v74 + 136) = MEMORY[0x263F8D310];
        *(void *)(v74 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v74 + 112) = 0xD000000000000013;
        *(void *)(v74 + 120) = 0x8000000246222D20;
        __int16 v116 = a3;
        uint64_t v115 = &dword_245728000;
        unint64_t v114 = _signpostLog;
        char v117 = (int *)"AnimationState";
        int v118 = 14;
        unsigned int v119 = 2;
        v112.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ ended";
        v112.i64[1] = 37;
        uint64_t v113 = 2;
        unint64_t v111 = v74;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v107 + 8))(v15, v12);
        uint64_t v81 = swift_bridgeObjectRelease();
        if (!*(void *)(a4 + 64)) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
    }
    __break(1u);
LABEL_86:
    swift_once();
LABEL_29:
    uint64_t v35 = static Animation.velocityTracking;
    swift_retain();
LABEL_32:
    id v38 = v30;
    uint64_t v39 = v103 - *(float *)&v31;
    uint64_t v40 = v104 - *(float *)&v32;
    id v41 = v105 - *(float *)&v7;
    int v42 = v106 - *(float *)&v6;
    uint64_t v43 = *(double *)v110.i64 - v5;
    int v44 = *(double *)v109.i64 - v4;
    uint64_t v45 = v108 - v38;
    double v4 = *(double *)AGGraphGetValue();
    uint64_t v46 = *(void *)(a4 + 64);
    unsigned int v102 = v35;
    if (v46)
    {
      int v126 = v39;
      uint64_t v127 = v40;
      uint64_t v128 = v41;
      unsigned int v129 = v42;
      uint64_t v130 = v43;
      uint64_t v131 = v44;
      unsigned int v132 = v45;
      swift_retain();
      v123.i8[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v35, (uint64_t)&v126, v4);
      swift_retain();
      double v47 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      double v16 = v4;
      if (kdebug_is_enabled())
      {
        unint64_t v101 = v47;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v48 = (void *)_signpostLog;
        unsigned __int8 v49 = OS_os_log.signpostsEnabled.getter();
        double v5 = *(double *)v110.i64;
        double v6 = v109.i64[0];
        double v7 = v108;
        if (v49)
        {
          swift_retain();
          uint64_t v50 = v48;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          int v51 = swift_allocObject();
          *(_OWORD *)(v51 + 16) = xmmword_2461BE2B0;
          uint64_t v52 = AGGraphGetCurrentAttribute();
          unsigned int v100 = *MEMORY[0x263F288F8];
          if (v52 == v100)
          {
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            return;
          }
          uint64_t v53 = (id)AGGraphGetAttributeGraph();
          unint64_t v99 = AGGraphGetCounter();

          int v54 = MEMORY[0x263F8DA20];
          *(void *)(v51 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v51 + 64) = v54;
          *(void *)(v51 + 32) = v99;
          uint64_t v55 = AGGraphGetCurrentAttribute();
          if (v55 == v100) {
            goto LABEL_88;
          }
          id v56 = MEMORY[0x263F8E960];
          *(void *)(v51 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v51 + 104) = v56;
          *(_DWORD *)(v51 + 72) = v55;
          *(void *)(v51 + 136) = MEMORY[0x263F8D310];
          *(void *)(v51 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v51 + 112) = 0xD000000000000013;
          *(void *)(v51 + 120) = 0x8000000246222D20;
          LOBYTE(v114) = v101;
          char v117 = &dword_245728000;
          v112.i64[0] = _signpostLog;
          v123.i64[0] = (uint64_t)"AnimationState";
          v123.i64[1] = 14;
          v124.i8[0] = 2;
          unsigned int v120 = "Animation: (%p) [%d] %{public}@ updated";
          uint64_t v121 = 39;
          unsigned int v122 = 2;
          uint64_t v115 = (int *)v51;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release_n();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v15, v12);
          swift_bridgeObjectRelease();
          uint64_t v19 = (double *)&unk_26B0EB000;
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        double v5 = *(double *)v110.i64;
        double v6 = v109.i64[0];
        double v7 = v108;
      }
      a2 = *(void *)(a4 + 64);
      if (!a2)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
    }
    else
    {
      int v126 = v39;
      uint64_t v127 = v40;
      uint64_t v128 = v41;
      unsigned int v129 = v42;
      uint64_t v130 = v43;
      uint64_t v131 = v44;
      unsigned int v132 = v45;
      type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      uint64_t v57 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v57, (uint64_t)&v126, v4);
      swift_retain();
      int v58 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      double v16 = v4;
      if (kdebug_is_enabled())
      {
        unint64_t v101 = v58;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        id v59 = (void *)_signpostLog;
        uint64_t v60 = OS_os_log.signpostsEnabled.getter();
        double v5 = *(double *)v110.i64;
        double v6 = v109.i64[0];
        double v7 = v108;
        if (v60)
        {
          swift_retain();
          uint64_t v61 = v59;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          int v62 = swift_allocObject();
          *(_OWORD *)(v62 + 16) = xmmword_2461BE2B0;
          uint64_t v63 = AGGraphGetCurrentAttribute();
          unsigned int v100 = *MEMORY[0x263F288F8];
          if (v63 == v100) {
            goto LABEL_89;
          }
          uint64_t v64 = (id)AGGraphGetAttributeGraph();
          unint64_t v99 = AGGraphGetCounter();

          uint64_t v65 = MEMORY[0x263F8DA20];
          *(void *)(v62 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v62 + 64) = v65;
          *(void *)(v62 + 32) = v99;
          int v66 = AGGraphGetCurrentAttribute();
          if (v66 == v100) {
            goto LABEL_90;
          }
          int v67 = MEMORY[0x263F8E960];
          *(void *)(v62 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v62 + 104) = v67;
          *(_DWORD *)(v62 + 72) = v66;
          *(void *)(v62 + 136) = MEMORY[0x263F8D310];
          *(void *)(v62 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v62 + 112) = 0xD000000000000013;
          *(void *)(v62 + 120) = 0x8000000246222D20;
          LOBYTE(v114) = v101;
          char v117 = &dword_245728000;
          v112.i64[0] = _signpostLog;
          v123.i64[0] = (uint64_t)"AnimationState";
          v123.i64[1] = 14;
          v124.i8[0] = 2;
          unsigned int v120 = "Animation: (%p) [%d] %{public}@ started";
          uint64_t v121 = 39;
          unsigned int v122 = 2;
          uint64_t v115 = (int *)v62;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v15, v12);
          swift_bridgeObjectRelease();
          uint64_t v19 = (double *)&unk_26B0EB000;
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        double v5 = *(double *)v110.i64;
        double v6 = v109.i64[0];
        double v7 = v108;
      }
      swift_release();
      *(void *)(a4 + 64) = a2;
      if (!a2) {
        goto LABEL_82;
      }
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t Counter = v107;
LABEL_52:
    uint64_t v29 = v106;
    id v28 = v105;
    int v27 = v104;
    int v26 = v103;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v82 = v19[10];
  v112.i64[0] = (uint64_t)v19[11];
  uint64_t v83 = *((unsigned int *)v19 + 34);
  int v84 = *((unsigned char *)v19 + 140);
  uint64_t v85 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                       + 0x58);
  int v86 = static CoreGlue.shared;
  LOBYTE(v115) = v84;
  v85(&v112, v83 | ((unint64_t)v84 << 32), v82);

LABEL_74:
  unsigned __int8 v110 = v124;
  unsigned int v87 = v125;
  v88.i64[0] = 0x3C0000003C000000;
  v88.i64[1] = 0x3C0000003C000000;
  long long v89 = vmulq_f32(v123, v88);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    unsigned int v109 = v89;
    swift_release();
    unsigned int v91 = v109.i32[1];
    int v90 = v109.i32[0];
    int v93 = v109.i32[3];
    uint64_t v92 = v109.i32[2];
  }
  else
  {
    LOBYTE(v115) = 2;
    int v112 = v89;
    *(float *)&unint64_t v94 = ResolvedGradient.ColorSpace.convertOut(_:)(v112.f32);
    v109.i64[0] = v94;
    unsigned int v91 = v95;
    uint64_t v92 = v96;
    int v93 = v97;
    swift_release();
    int v90 = v109.i32[0];
  }
  *(_DWORD *)a1 = v90;
  *(_DWORD *)(a1 + 4) = v91;
  *(_DWORD *)(a1 + 8) = v92;
  *(_DWORD *)(a1 + 12) = v93;
  *(int8x16_t *)(a1 + 16) = v110;
  *(double *)(a1 + 32) = v87;
  *(unsigned char *)(a1 + 45) = 1;
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double *Value;
  char v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  void *v27;
  id v28;
  uint64_t v29;
  int v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  int CurrentAttribute;
  id v41;
  uint64_t Counter;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  void (*v50)(const char **, unint64_t, double);
  void *v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int *v76;
  char v77;
  const char *v78;
  uint64_t v79;
  char v80;
  float64x2_t v81[2];

  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unsigned int v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v16 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 40))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v18) {
      double v16 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 32) = 1;
LABEL_11:
    double v6 = *(double *)a1;
    double v7 = *(double *)(a1 + 8);
    if (*(unsigned char *)(a4 + 32)) {
      goto LABEL_37;
    }
    double v5 = *(double *)(a4 + 16);
    double v4 = *(double *)(a4 + 24);
    if (v6 == v5 && v7 == v4) {
      goto LABEL_37;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v21 = swift_retain();
    uint64_t v22 = specialized find<A>(_:key:)(v21);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 72);
      swift_retain();
      swift_release();
      if (v23) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v24 = swift_retain();
    char v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release();
    if ((v25 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      uint64_t v23 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 32) == 1) {
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(a4 + 40);
  if (!v19) {
    return;
  }
  while (1)
  {
    v81[0] = *(float64x2_t *)a1;
    swift_retain();
    LOBYTE(v78) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v81, a3, v16) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v47 = *(double *)(v19 + 56);
      uint64_t v72 = *(const char **)(v19 + 64);
      uint64_t v48 = *(unsigned int *)(v19 + 88);
      unsigned __int8 v49 = *(unsigned char *)(v19 + 92);
      uint64_t v50 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      int v51 = static CoreGlue.shared;
      LOBYTE(v76) = v49;
      v50(&v72, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    a3 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v37 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      uint64_t v46 = swift_release();
      if (*(void *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v46);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 40) = 0;
LABEL_53:
      uint64_t v52 = v81[0];
      *(float64x2_t *)a1 = v81[0];
      *(float64x2_t *)(a1 + 16) = v52;
      *(unsigned char *)(a1 + 32) = 1;
      return;
    }
    uint64_t v70 = v13;
    swift_retain();
    id v38 = v37;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v13 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v13)
    {
      __break(1u);
    }
    else
    {
      id v41 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v43 = MEMORY[0x263F8DA20];
      *(void *)(v39 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v39 + 64) = v43;
      *(void *)(v39 + 32) = Counter;
      int v44 = AGGraphGetCurrentAttribute();
      if (v44 != v13)
      {
        uint64_t v45 = MEMORY[0x263F8E960];
        *(void *)(v39 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v39 + 104) = v45;
        *(_DWORD *)(v39 + 72) = v44;
        *(void *)(v39 + 136) = MEMORY[0x263F8D310];
        *(void *)(v39 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v39 + 112) = 0x657A695377656956;
        *(void *)(v39 + 120) = 0xE800000000000000;
        char v77 = a3;
        uint64_t v75 = _signpostLog;
        char v76 = &dword_245728000;
        uint64_t v78 = "AnimationState";
        char v79 = 14;
        unint64_t v80 = 2;
        uint64_t v72 = "Animation: (%p) [%d] %{public}@ ended";
        char v73 = 37;
        uint64_t v74 = 2;
        unint64_t v71 = v39;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v12);
        uint64_t v46 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 40)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    uint64_t v23 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    double v5 = v6 - v5;
    double v4 = v7 - v4;
    double v16 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 40)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v53 = swift_retain();
    int v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v5, v4, v16);
    swift_retain();
    uint64_t v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    uint64_t v68 = v55;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v56 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v69 = v23;
      uint64_t v70 = v13;
      swift_retain();
      uint64_t v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      int v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_2461BE2B0;
      id v59 = AGGraphGetCurrentAttribute();
      int v67 = *MEMORY[0x263F288F8];
      if (v59 == v67) {
        goto LABEL_71;
      }
      uint64_t v60 = (id)AGGraphGetAttributeGraph();
      uint64_t v61 = AGGraphGetCounter();

      int v62 = MEMORY[0x263F8DA20];
      *(void *)(v58 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v58 + 64) = v62;
      *(void *)(v58 + 32) = v61;
      uint64_t v63 = AGGraphGetCurrentAttribute();
      if (v63 == v67) {
        goto LABEL_72;
      }
      uint64_t v64 = MEMORY[0x263F8E960];
      *(void *)(v58 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v58 + 104) = v64;
      *(_DWORD *)(v58 + 72) = v63;
      *(void *)(v58 + 136) = MEMORY[0x263F8D310];
      *(void *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v58 + 112) = 0x657A695377656956;
      *(void *)(v58 + 120) = 0xE800000000000000;
      LOBYTE(v71) = v68;
      *(void *)&v81[0].f64[0] = &dword_245728000;
      uint64_t v75 = v58;
      char v76 = (int *)_signpostLog;
      uint64_t v78 = "AnimationState";
      char v79 = 14;
      unint64_t v80 = 2;
      uint64_t v72 = "Animation: (%p) [%d] %{public}@ started";
      char v73 = 39;
      uint64_t v74 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v65 = v70;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v12);
      uint64_t v13 = v65;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 40) = v54;
    if (v54)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
LABEL_37:
    *(double *)(a4 + 16) = v6;
    *(double *)(a4 + 24) = v7;
    *(unsigned char *)(a4 + 32) = 0;
    uint64_t v19 = *(void *)(a4 + 40);
    if (!v19) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v78) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v23, v5, v4, v16);
  swift_retain();
  int v26 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v68 = v26;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  int v27 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  uint64_t v69 = v23;
  uint64_t v70 = v13;
  swift_retain();
  id v28 = v27;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2461BE2B0;
  int v30 = AGGraphGetCurrentAttribute();
  int v67 = *MEMORY[0x263F288F8];
  if (v30 != v67)
  {
    id v31 = (id)AGGraphGetAttributeGraph();
    uint64_t v32 = AGGraphGetCounter();

    uint64_t v33 = MEMORY[0x263F8DA20];
    *(void *)(v29 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v29 + 64) = v33;
    *(void *)(v29 + 32) = v32;
    int v34 = AGGraphGetCurrentAttribute();
    if (v34 == v67) {
      goto LABEL_70;
    }
    uint64_t v35 = MEMORY[0x263F8E960];
    *(void *)(v29 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v29 + 104) = v35;
    *(_DWORD *)(v29 + 72) = v34;
    *(void *)(v29 + 136) = MEMORY[0x263F8D310];
    *(void *)(v29 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v29 + 112) = 0x657A695377656956;
    *(void *)(v29 + 120) = 0xE800000000000000;
    LOBYTE(v71) = v68;
    *(void *)&v81[0].f64[0] = &dword_245728000;
    uint64_t v75 = v29;
    char v76 = (int *)_signpostLog;
    uint64_t v78 = "AnimationState";
    char v79 = 14;
    unint64_t v80 = 2;
    uint64_t v72 = "Animation: (%p) [%d] %{public}@ updated";
    char v73 = 39;
    uint64_t v74 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v36 = v70;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v12);
    uint64_t v13 = v36;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 40)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  double *Value;
  char v17;
  uint64_t v18;
  float64x2_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  void *v27;
  id v28;
  uint64_t v29;
  int v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  int CurrentAttribute;
  id v41;
  uint64_t Counter;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  void (*v50)(const char **, unint64_t, double);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void *v55;
  id v56;
  uint64_t v57;
  int v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  float64x2_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int *v76;
  char v77;
  const char *v78;
  uint64_t v79;
  char v80;
  float64x2_t v81[2];

  char v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  unsigned int v15 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 40))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v17) {
      unsigned int v15 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 16) = 1;
LABEL_11:
    uint64_t v19 = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    if (*(unsigned char *)(a4 + 32)) {
      goto LABEL_37;
    }
    double v5 = *(double *)(a4 + 16);
    double v4 = *(double *)(a4 + 24);
    double v6 = v19.f64[1];
    if (v19.f64[0] == v5 && v19.f64[1] == v4) {
      goto LABEL_37;
    }
    uint64_t v70 = v19;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v21 = swift_retain();
    uint64_t v22 = specialized find<A>(_:key:)(v21);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 72);
      swift_retain();
      swift_release();
      if (v23) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v24 = swift_retain();
    char v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release();
    if ((v25 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      uint64_t v23 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 16) == 1) {
    goto LABEL_11;
  }
  char v18 = *(void *)(a4 + 40);
  if (!v18) {
    return;
  }
  while (1)
  {
    v81[0] = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    swift_retain();
    LOBYTE(v78) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v81, a3, v15) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v47 = *(double *)(v18 + 56);
      uint64_t v72 = *(const char **)(v18 + 64);
      uint64_t v48 = *(unsigned int *)(v18 + 88);
      unsigned __int8 v49 = *(unsigned char *)(v18 + 92);
      uint64_t v50 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      int v51 = static CoreGlue.shared;
      LOBYTE(v76) = v49;
      v50(&v72, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    a3 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v37 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      uint64_t v46 = swift_release();
      if (*(void *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v46);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 40) = 0;
LABEL_53:
      *(float64x2_t *)a1 = vmulq_f64(v81[0], (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
      *(unsigned char *)(a1 + 16) = 1;
      return;
    }
    uint64_t v69 = v12;
    swift_retain();
    id v38 = v37;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v12 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v12)
    {
      __break(1u);
    }
    else
    {
      id v41 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v43 = MEMORY[0x263F8DA20];
      *(void *)(v39 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v39 + 64) = v43;
      *(void *)(v39 + 32) = Counter;
      int v44 = AGGraphGetCurrentAttribute();
      if (v44 != v12)
      {
        uint64_t v45 = MEMORY[0x263F8E960];
        *(void *)(v39 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v39 + 104) = v45;
        *(_DWORD *)(v39 + 72) = v44;
        *(void *)(v39 + 136) = MEMORY[0x263F8D310];
        *(void *)(v39 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v39 + 112) = 0x6E696F5074696E55;
        *(void *)(v39 + 120) = 0xE900000000000074;
        char v77 = a3;
        uint64_t v75 = _signpostLog;
        char v76 = &dword_245728000;
        uint64_t v78 = "AnimationState";
        char v79 = 14;
        unint64_t v80 = 2;
        uint64_t v72 = "Animation: (%p) [%d] %{public}@ ended";
        char v73 = 37;
        uint64_t v74 = 2;
        unint64_t v71 = v39;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v14, v11);
        uint64_t v46 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 40)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    uint64_t v23 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    double v5 = v70.f64[0] - v5;
    double v4 = v6 - v4;
    unsigned int v15 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 40)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v52 = swift_retain();
    uint64_t v53 = specialized AnimatorState.init(animation:interval:at:in:)(v52, v5, v4, v15);
    swift_retain();
    int v54 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    int v67 = v54;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v55 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v68 = v23;
      uint64_t v69 = v12;
      swift_retain();
      id v56 = v55;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16) = xmmword_2461BE2B0;
      int v58 = AGGraphGetCurrentAttribute();
      int v66 = *MEMORY[0x263F288F8];
      if (v58 == v66) {
        goto LABEL_71;
      }
      id v59 = (id)AGGraphGetAttributeGraph();
      uint64_t v60 = AGGraphGetCounter();

      uint64_t v61 = MEMORY[0x263F8DA20];
      *(void *)(v57 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v57 + 64) = v61;
      *(void *)(v57 + 32) = v60;
      int v62 = AGGraphGetCurrentAttribute();
      if (v62 == v66) {
        goto LABEL_72;
      }
      uint64_t v63 = MEMORY[0x263F8E960];
      *(void *)(v57 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v57 + 104) = v63;
      *(_DWORD *)(v57 + 72) = v62;
      *(void *)(v57 + 136) = MEMORY[0x263F8D310];
      *(void *)(v57 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v57 + 112) = 0x6E696F5074696E55;
      *(void *)(v57 + 120) = 0xE900000000000074;
      LOBYTE(v71) = v67;
      *(void *)&v81[0].f64[0] = &dword_245728000;
      uint64_t v75 = v57;
      char v76 = (int *)_signpostLog;
      uint64_t v78 = "AnimationState";
      char v79 = 14;
      unint64_t v80 = 2;
      uint64_t v72 = "Animation: (%p) [%d] %{public}@ started";
      char v73 = 39;
      uint64_t v74 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v64 = v69;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v14, v11);
      uint64_t v12 = v64;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 40) = v53;
    if (v53)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    uint64_t v19 = v70;
LABEL_37:
    *(float64x2_t *)(a4 + 16) = v19;
    *(unsigned char *)(a4 + 32) = 0;
    char v18 = *(void *)(a4 + 40);
    if (!v18) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v78) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v23, v5, v4, v15);
  swift_retain();
  int v26 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  int v67 = v26;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  int v27 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  uint64_t v68 = v23;
  uint64_t v69 = v12;
  swift_retain();
  id v28 = v27;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2461BE2B0;
  int v30 = AGGraphGetCurrentAttribute();
  int v66 = *MEMORY[0x263F288F8];
  if (v30 != v66)
  {
    id v31 = (id)AGGraphGetAttributeGraph();
    uint64_t v32 = AGGraphGetCounter();

    uint64_t v33 = MEMORY[0x263F8DA20];
    *(void *)(v29 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v29 + 64) = v33;
    *(void *)(v29 + 32) = v32;
    int v34 = AGGraphGetCurrentAttribute();
    if (v34 == v66) {
      goto LABEL_70;
    }
    uint64_t v35 = MEMORY[0x263F8E960];
    *(void *)(v29 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v29 + 104) = v35;
    *(_DWORD *)(v29 + 72) = v34;
    *(void *)(v29 + 136) = MEMORY[0x263F8D310];
    *(void *)(v29 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v29 + 112) = 0x6E696F5074696E55;
    *(void *)(v29 + 120) = 0xE900000000000074;
    LOBYTE(v71) = v67;
    *(void *)&v81[0].f64[0] = &dword_245728000;
    uint64_t v75 = v29;
    char v76 = (int *)_signpostLog;
    uint64_t v78 = "AnimationState";
    char v79 = 14;
    unint64_t v80 = 2;
    uint64_t v72 = "Animation: (%p) [%d] %{public}@ updated";
    char v73 = 39;
    uint64_t v74 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v36 = v69;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v14, v11);
    uint64_t v12 = v36;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 40)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

Swift::Void __swiftcall MaskLayer.setClips(_:transform:)(Swift::OpaquePointer _, CGAffineTransform *transform)
{
  char v3 = v2;
  *(Swift::OpaquePointer *)&v2[OBJC_IVAR____TtC7SwiftUI9MaskLayer_clips] = _;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  double v6 = &v2[OBJC_IVAR____TtC7SwiftUI9MaskLayer_clipTransform];
  long long v7 = *(_OWORD *)&transform->tx;
  long long v8 = *(_OWORD *)&transform->a;
  *((_OWORD *)v6 + 1) = *(_OWORD *)&transform->c;
  *((_OWORD *)v6 + 2) = v7;
  *(_OWORD *)double v6 = v8;
  __int16 v9 = (char *)*((void *)_._rawValue + 2);
  long long v10 = v9 - 1;
  if (v9 == (char *)1)
  {
    long long v11 = *((_OWORD *)_._rawValue + 5);
    long long v35 = *((_OWORD *)_._rawValue + 4);
    long long v36 = v11;
    v37[0] = *((_OWORD *)_._rawValue + 6);
    *(_OWORD *)((char *)v37 + 11) = *(_OWORD *)((char *)_._rawValue + 107);
    long long v12 = *((_OWORD *)_._rawValue + 3);
    long long v33 = *((_OWORD *)_._rawValue + 2);
    long long v34 = v12;
    _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v33, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    specialized static MaskLayer.update(layer:clip:transform:)(v3, (uint64_t)&v33, &transform->a);
    _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v33, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    type metadata accessor for CALayer();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_setSublayers_, isa);

    return;
  }
  if (!v9)
  {
    objc_msgSend(v3, sel_setPath_, 0);
    type metadata accessor for CALayer();
    Class v30 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_setSublayers_, v30);

    return;
  }
  objc_msgSend(v3, sel_setPath_, 0);
  id v14 = objc_msgSend(v3, sel_sublayers);
  id v31 = v9;
  if (v14)
  {
    unsigned int v15 = v14;
    type metadata accessor for CALayer();
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v16 = MEMORY[0x263F8EE78];
  }
  unint64_t v32 = v16;
  swift_bridgeObjectRetain();
  char v17 = 0;
  uint64_t v18 = 0;
  for (uint64_t i = 32; ; i += 96)
  {
    long long v20 = *(_OWORD *)((char *)_._rawValue + i + 48);
    long long v35 = *(_OWORD *)((char *)_._rawValue + i + 32);
    long long v36 = v20;
    v37[0] = *(_OWORD *)((char *)_._rawValue + i + 64);
    *(_OWORD *)((char *)v37 + 11) = *(_OWORD *)((char *)_._rawValue + i + 75);
    long long v21 = *(_OWORD *)((char *)_._rawValue + i + 16);
    long long v33 = *(_OWORD *)((char *)_._rawValue + i);
    long long v34 = v21;
    if (v16 >> 62)
    {
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v33, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v18 >= v25)
      {
LABEL_19:
        id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F15880]), sel_init);
        objc_msgSend(v24, sel_setAnchorPoint_, 0.0, 0.0);
        MEMORY[0x24C522D60](objc_msgSend(v24, sel_setNoAnimationDelegate));
        if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        char v17 = 1;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v33, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      if (v18 >= v22) {
        goto LABEL_19;
      }
    }
    if ((v16 & 0xC000000000000001) != 0)
    {
      MEMORY[0x24C523D60](v18, v16);
    }
    else
    {
      if (v18 < 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if ((unint64_t)v18 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_36;
      }
      id v23 = *(id *)(v16 + 8 * v18 + 32);
    }
    self;
    id v24 = (id)swift_dynamicCastObjCClassUnconditional();
LABEL_22:
    specialized static MaskLayer.update(layer:clip:transform:)(v24, (uint64_t)&v33, &transform->a);
    id v26 = v24;
    uint64_t v27 = v18 ? _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() : 0;
    objc_msgSend(v24, sel_setCompositingFilter_, v27);
    swift_unknownObjectRelease();

    _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v33, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    if (v10 == (char *)v18) {
      break;
    }
    unint64_t v16 = v32;
    ++v18;
  }
  swift_bridgeObjectRelease();
  if (!(v32 >> 62))
  {
    uint64_t v28 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_30;
  }
LABEL_37:
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_30:
  if ((uint64_t)v31 < v28)
  {
    specialized Array.replaceSubrange<A>(_:with:)((uint64_t)v31, v28);
    goto LABEL_33;
  }
  if (v17)
  {
LABEL_33:
    type metadata accessor for CALayer();
    swift_bridgeObjectRetain();
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setSublayers_, v29);
  }
  swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for CALayer()
{
  unint64_t result = lazy cache variable for type metadata for CALayer;
  if (!lazy cache variable for type metadata for CALayer)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CALayer);
  }
  return result;
}

id specialized static MaskLayer.update(layer:clip:transform:)(void *a1, uint64_t a2, double *a3)
{
  double v5 = *a3;
  double v6 = a3[1];
  double v8 = a3[2];
  double v7 = a3[3];
  double v10 = a3[4];
  tCGFloat y = a3[5];
  long long v11 = *(_OWORD *)(a2 + 16);
  v55[0] = *(_OWORD *)a2;
  v55[1] = v11;
  char v56 = *(unsigned char *)(a2 + 32);
  outlined init with take of Path.Storage((uint64_t)v55, (uint64_t)v57);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v57, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v55, (uint64_t)&v48);
  char ty_low = LOBYTE(v48.ty);
  if (v53)
  {
    if (v53 == 1)
    {
      double b = v48.b;
      double a = v48.a;
      double v42 = v10;
      double v44 = v8;
      double v28 = v6;
      double v29 = ty;
      CGFloat c = v48.c;
      double v31 = v7;
      double v32 = v5;
      CGFloat d = v48.d;
      tdouble x = v48.tx;
      double v40 = v49;
      objc_msgSend(a1, sel_setPosition_, *(_OWORD *)&v48.a);
      double v34 = c;
      tCGFloat y = v29;
      double v6 = v28;
      double v35 = d;
      double v5 = v32;
      double v7 = v31;
      double v10 = v42;
      double v8 = v44;
      objc_msgSend(a1, sel_setBounds_, 0.0, 0.0, v34, v35);
      objc_msgSend(a1, sel_setPath_, 0);
      objc_msgSend(a1, sel_setCornerRadius_, tx);
      long long v36 = (void *)MEMORY[0x263F15A20];
      if ((ty_low & 1) == 0) {
        long long v36 = (void *)MEMORY[0x263F15A10];
      }
      objc_msgSend(a1, sel_setCornerCurve_, *v36);
      objc_msgSend(a1, sel_setBorderWidth_, v40);
      objc_msgSend(a1, sel_setBackgroundColor_, 0);
    }
    else
    {
      if (v53 == 3
        && !(*(void *)&v48.b | *(void *)&v48.a | *(void *)&v48.c | *(void *)&v48.d | *(void *)&v48.tx | *(void *)&v48.ty | *(void *)&v49 | v50 | v51 | v52))
      {
        objc_msgSend(a1, sel_setPath_, 0, *(void *)&v48.d, *(void *)&v48.tx);
        double b = 0.0;
        objc_msgSend(a1, sel_setBorderWidth_, 0.0);
        objc_msgSend(a1, sel_setBackgroundColor_, 0);
      }
      else
      {
        outlined consume of ShapeType(*(uint64_t *)&v48.a, *(uint64_t *)&v48.b, *(uint64_t *)&v48.c, *(uint64_t *)&v48.d, LOBYTE(v48.tx), *(uint64_t *)&v48.ty, *(uint64_t *)&v49, v50, v51, v52, v53);
        double b = 0.0;
        objc_msgSend(a1, sel_setPosition_, 0.0, 0.0);
        objc_msgSend(a1, sel_setBorderWidth_, 0.0);
        objc_msgSend(a1, sel_setBackgroundColor_, 0);
        CGPathRef v14 = Path.cgPath.getter();
        objc_msgSend(a1, sel_setPath_, v14);

        unsigned int v15 = (id *)MEMORY[0x263F15AC0];
        if ((*(_WORD *)(a2 + 89) & 1) == 0) {
          unsigned int v15 = (id *)MEMORY[0x263F15AC8];
        }
        id v16 = *v15;
        objc_msgSend(a1, sel_setFillRule_, v16);
      }
      double a = 0.0;
    }
  }
  else
  {
    double b = v48.b;
    double a = v48.a;
    double v41 = v10;
    double v43 = v8;
    double v18 = v6;
    double v19 = ty;
    CGFloat v20 = v48.c;
    double v21 = v7;
    double v22 = v5;
    CGFloat v23 = v48.d;
    double v39 = v48.tx;
    objc_msgSend(a1, sel_setPosition_, *(_OWORD *)&v48.a);
    double v24 = v20;
    tCGFloat y = v19;
    double v6 = v18;
    double v25 = v23;
    double v5 = v22;
    double v7 = v21;
    double v10 = v41;
    double v8 = v43;
    objc_msgSend(a1, sel_setBounds_, 0.0, 0.0, v24, v25);
    objc_msgSend(a1, sel_setPath_, 0);
    objc_msgSend(a1, sel_setCornerRadius_, v39);
    id v26 = (void *)MEMORY[0x263F15A20];
    if ((ty_low & 1) == 0) {
      id v26 = (void *)MEMORY[0x263F15A10];
    }
    objc_msgSend(a1, sel_setCornerCurve_, *v26);
    objc_msgSend(a1, sel_setBorderWidth_, 0.0);
    id v27 = objc_msgSend(a1, sel_borderColor);
    objc_msgSend(a1, sel_setBackgroundColor_, v27);
  }
  outlined init with take of CGAffineTransform?(a2 + 40, (uint64_t)v54);
  outlined init with take of CGAffineTransform?((uint64_t)v54, (uint64_t)&v48);
  if ((LOBYTE(v49) & 1) == 0)
  {
    CGAffineTransform t1 = v48;
    t2.double a = v5;
    t2.double b = v6;
    t2.CGFloat c = v8;
    t2.CGFloat d = v7;
    t2.tdouble x = v10;
    t2.tCGFloat y = ty;
    CGAffineTransformConcat(&v45, &t1, &t2);
    double v5 = v45.a;
    double v6 = v45.b;
    double v8 = v45.c;
    double v7 = v45.d;
    double v10 = v45.tx;
    tCGFloat y = v45.ty;
  }
  t1.double a = v5;
  t1.double b = v6;
  t1.CGFloat c = v8;
  t1.CGFloat d = v7;
  t1.tdouble x = v10 + b * v8 + a * v5 - a;
  t1.tCGFloat y = ty + b * v7 + a * v6 - b;
  return objc_msgSend(a1, sel_setAffineTransform_, &t1);
}

uint64_t outlined init with take of CGAffineTransform?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGAffineTransform?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGAffineTransform?()
{
  if (!lazy cache variable for type metadata for CGAffineTransform?)
  {
    type metadata accessor for CGAffineTransform(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGAffineTransform?);
    }
  }
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

uint64_t instantiation function for generic protocol witness table for AnyAccessibilityValue.ConcreteBase<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata completion function for DynamicViewContainer.Value()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id one-time initialization function for compactRounded()
{
  id result = (id)*MEMORY[0x263F03B70];
  if (*MEMORY[0x263F03B70])
  {
    static Font.PrivateDesign.compactRoundeCGFloat d = *MEMORY[0x263F03B70];
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for OpenURLAction.Result(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for OpenURLAction.Result);
}

uint64_t (*_Placement.anchorPosition.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MaskDisplayList.value.getter@<X0>(uint64_t a1@<X8>)
{
  void (*v65)(__int16 *__return_ptr, uint64_t, uint64_t);
  void (*v66)(__int16 *__return_ptr, uint64_t, uint64_t);
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  char v70;
  int v71;
  uint64_t v72;
  long long v73;
  long long v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  __int16 v79;
  char v80;
  int v81;
  __int16 v82;
  double v83;
  double v84;
  long long v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int16 v90;
  unsigned __int8 v91;
  int v92;

  int v3 = *v1;
  int v5 = v1[4];
  int v4 = v1[5];
  char v6 = *((unsigned char *)v1 + 24);
  int v7 = *MEMORY[0x263F288F8];
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v70 = v6;
  unint64_t v71 = v3;
  if (v4 == *MEMORY[0x263F288F8])
  {
    __int16 v9 = 0;
    char v10 = 0;
    uint64_t v11 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v8;
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v11 = *(void *)Value;
  __int16 v9 = *(_WORD *)(Value + 8);
  char v10 = *(unsigned char *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v11 + 16)) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v69 = a1;
  if (v5 != v7)
  {
    uint64_t v38 = AGGraphGetValue();
    uint64_t v14 = *(void *)v38;
    unsigned __int16 v12 = *(_WORD *)(v38 + 8);
    unsigned __int8 v13 = *(unsigned char *)(v38 + 10);
    swift_bridgeObjectRetain();
    if (*(void *)(v14 + 16)) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v69 = v8;
    *(_WORD *)(v69 + 8) = 0;
    *(unsigned char *)(v69 + 10) = 0;
    return result;
  }
  unsigned __int16 v12 = 0;
  unsigned __int8 v13 = 0;
  uint64_t v14 = v8;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_13;
  }
LABEL_5:
  unsigned int v15 = (double *)AGGraphGetValue();
  double v16 = *v15;
  double v17 = v15[1];
  double v18 = (double *)AGGraphGetValue();
  double v19 = v16 - *v18;
  double v20 = v17 - v18[1];
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v11;
  *(_WORD *)(v21 + 24) = v9;
  *(unsigned char *)(v21 + 26) = v10;
  *(_DWORD *)(v21 + 28) = 0;
  type metadata accessor for CGSize(0);
  uint64_t v83 = v19;
  int v84 = v20;
  long long v22 = *(_OWORD *)AGGraphGetValue();
  ++static DisplayList.Version.lastValue;
  uint64_t v85 = v22;
  int v86 = static DisplayList.Version.lastValue;
  unsigned int v87 = v21;
  long long v88 = 0x4000000700000000;
  long long v89 = v14;
  unsigned int v91 = v13;
  int v90 = v12;
  uint64_t v92 = v71;
  LOBYTE(v73) = v70;
  DisplayList.Item.canonicalize(options:)((char *)&v73);
  double v23 = v83;
  double v24 = v84;
  long long v25 = v85;
  uint64_t v27 = v86;
  unint64_t v26 = v87;
  unint64_t v28 = v88;
  uint64_t v29 = v89;
  unsigned int v30 = v90 | (v91 << 16);
  int v31 = v92;
  unint64_t v32 = v88 >> 62;
  if (v88 >> 62 != 3 || (v30 & 0xFFFFFF) != 0 || v88 != 0xC000000000000000 || (char v33 = v89 | v87, v89 | v87))
  {
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_2461B9DC0;
    *(double *)(v39 + 32) = v23;
    *(double *)(v39 + 40) = v24;
    *(_OWORD *)(v39 + 48) = v25;
    *(void *)(v39 + 64) = v27;
    *(void *)(v39 + 72) = v26;
    *(void *)(v39 + 80) = v28;
    *(void *)(v39 + 88) = v29;
    unsigned int v40 = HIWORD(v30);
    *(unsigned char *)(v39 + 98) = BYTE2(v30);
    *(_WORD *)(v39 + 96) = v30;
    *(_DWORD *)(v39 + 100) = v31;
    uint64_t v35 = v39;
    switch((int)v32)
    {
      case 1:
        uint64_t v42 = outlined copy of DisplayList.Item.Value(v26, v28);
        switch(BYTE4(v28))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v26, v28, 2);
            LODWORD(v43) = (v26 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v26 + 16, (uint64_t)&v73);
            uint64_t v43 = v75;
            int v67 = *((void *)&v74 + 1);
            __swift_project_boxed_opaque_existential_1(&v73, *((uint64_t *)&v74 + 1));
            uint64_t v65 = *(void (**)(__int16 *__return_ptr, uint64_t, uint64_t))(v43 + 56);
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            v65(&v82, v67, v43);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v26, v28, 3);
            LOWORD(v43) = v82;
            break;
          case 7:
            LOWORD(v43) = *(_WORD *)(v26 + 24);
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v26, v28, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v26, v28, 10);
            LOWORD(v43) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v26, v28, 12);
            LOWORD(v43) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            uint64_t v59 = v26;
            char v60 = v28;
            LOBYTE(v61) = 14;
            goto LABEL_49;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v26, v28, 15);
            LOWORD(v43) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v26, v28, 16);
            LOWORD(v43) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v26 + 112))(&v73, v42);
            uint64_t v68 = v73;
            unsigned int v40 = (unsigned __int16)word_26FA429C8;
            int v62 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v26, v28, 17);
            if ((v62 & ~v40) != 0) {
              __int16 v63 = v62;
            }
            else {
              __int16 v63 = 0;
            }
            __int16 v64 = v68 | v40;
            LOBYTE(v40) = BYTE2(v30);
            LOWORD(v43) = v64 | v63;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_bridgeObjectRelease();
            uint64_t v59 = v26;
            char v60 = v28;
            unint64_t v61 = HIDWORD(v28);
LABEL_49:
            outlined consume of DisplayList.Effect(v59, v60, v61);
            LOWORD(v43) = 0;
            break;
        }
        __int16 v34 = v43 | v30;
        goto LABEL_57;
      case 2:
        uint64_t v44 = *(void *)(v26 + 16);
        if (!v44)
        {
          __int16 v34 = 128;
          goto LABEL_40;
        }
        if (v44 == 1)
        {
          uint64_t v45 = 0;
          __int16 v34 = 128;
LABEL_27:
          uint64_t v52 = v44 - v45;
          char v53 = (__int16 *)(v26 + 40 * v45 + 64);
          do
          {
            __int16 v54 = *v53;
            v53 += 20;
            v34 |= v54;
            --v52;
          }
          while (v52);
          goto LABEL_40;
        }
        __int16 v46 = 0;
        uint64_t v45 = v44 & 0x7FFFFFFFFFFFFFFELL;
        double v47 = (__int16 *)(v26 + 104);
        __int16 v48 = 128;
        uint64_t v49 = v44 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v50 = *(v47 - 20);
          __int16 v51 = *v47;
          v47 += 40;
          v48 |= v50;
          v46 |= v51;
          v49 -= 2;
        }
        while (v49);
        __int16 v34 = v46 | v48;
        if (v44 != v45) {
          goto LABEL_27;
        }
LABEL_40:
        outlined copy of DisplayList.Item.Value(v26, v28);
        outlined copy of DisplayList.Item.Value(v26, v28);
        goto LABEL_57;
      case 3:
        outlined copy of DisplayList.Item.Value(v26, v28);
        __int16 v34 = 0;
        goto LABEL_57;
      default:
        switch(v26 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v26 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v73);
            uint64_t v41 = v75;
            uint64_t v72 = *((void *)&v74 + 1);
            __swift_project_boxed_opaque_existential_1(&v73, *((uint64_t *)&v74 + 1));
            int v66 = *(void (**)(__int16 *__return_ptr, uint64_t, uint64_t))(v41 + 40);
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            v66(&v82, v72, v41);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
            __int16 v34 = v82;
            goto LABEL_57;
          case 8uLL:
            uint64_t v55 = *(void *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            char v56 = *(void **)(v55 + 216);
            if (!v56) {
              goto LABEL_37;
            }
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            swift_retain();
            swift_retain();
            if ((uint64_t)objc_msgSend(v56, sel_length) <= 0)
            {
              outlined consume of DisplayList.Item.Value(v26, v28);
              swift_release();
            }
            else
            {
              if (one-time initialization token for updateSchedule != -1) {
                swift_once();
              }
              uint64_t v57 = static NSAttributedStringKey.updateSchedule;
              objc_msgSend(v56, sel_length);
              if (objc_msgSend(v56, sel_attribute_atIndex_effectiveRange_, v57, 0, 0))
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
                outlined destroy of Any?((uint64_t)&v73);
                char v58 = *(unsigned char *)(v55 + 256);
                outlined consume of DisplayList.Item.Value(v26, v28);
                swift_release();
                swift_release();
                outlined consume of DisplayList.Item.Value(v26, v28);
                LOBYTE(v40) = BYTE2(v30);
                if (v58) {
                  __int16 v34 = 8;
                }
                else {
LABEL_38:
                }
                  __int16 v34 = 0;
LABEL_57:
                *(double *)&char v73 = v23;
                *((double *)&v73 + 1) = v24;
                uint64_t v74 = v25;
                uint64_t v75 = v27;
                char v76 = v26;
                char v77 = v28;
                uint64_t v78 = v29;
                unint64_t v80 = v40;
                char v79 = v30;
                uint64_t v81 = v31;
                DisplayList.Item.properties.getter(&v82);
                outlined consume of DisplayList.Item.Value(v26, v28);
                char v33 = v82;
                goto LABEL_58;
              }
              char v73 = 0u;
              uint64_t v74 = 0u;
              outlined destroy of Any?((uint64_t)&v73);
              outlined consume of DisplayList.Item.Value(v26, v28);
              swift_release();
            }
            swift_release();
            outlined consume of DisplayList.Item.Value(v26, v28);
            LOBYTE(v40) = BYTE2(v30);
            __int16 v34 = 0;
            goto LABEL_57;
          case 9uLL:
            __int16 v34 = *(_WORD *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_40;
          case 0xBuLL:
            goto LABEL_42;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v26, v28);
LABEL_42:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            __int16 v34 = 2;
            goto LABEL_57;
          default:
LABEL_37:
            outlined copy of DisplayList.Item.Value(v26, v28);
            outlined copy of DisplayList.Item.Value(v26, v28);
            goto LABEL_38;
        }
    }
  }
  __int16 v34 = 0;
  uint64_t v35 = MEMORY[0x263F8EE78];
LABEL_58:
  *(void *)uint64_t v69 = v35;
  *(_WORD *)(v69 + 8) = v34;
  *(unsigned char *)(v69 + 10) = v33;
  return outlined consume of DisplayList.Item.Value(v26, v28);
}

BOOL Path.init(ellipseIn:)@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGFloat v8 = a2;
  BOOL result = CGRectIsNull(*(CGRect *)&a2);
  if (result)
  {
    char v11 = 6;
    CGFloat v8 = 0.0;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else
  {
    v12.origin.double x = v8;
    v12.origin.CGFloat y = a3;
    v12.size.CGFloat width = a4;
    v12.size.CGFloat height = a5;
    BOOL result = CGRectIsInfinite(v12);
    char v11 = !result;
  }
  *(CGFloat *)a1 = v8;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

uint64_t one-time initialization function for _shared()
{
  _sypSgMaTm_2(0, &lazy cache variable for type metadata for AtomicBuffer<CoreMaterialCache>, (uint64_t)&unk_26FA56C80, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  uint64_t v1 = MEMORY[0x263F8EE80];
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  *(void *)(result + 32) = v1;
  static CoreMaterialCache._shareCGFloat d = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for AtomicBuffer<ViewDecoders>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  *(unsigned char *)(result + 32) = 0;
  static ViewDecoders._shareCGFloat d = (_UNKNOWN *)result;
  return result;
}

uint64_t one-time initialization function for topLeading()
{
  if (one-time initialization token for leading != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.leading;
  if (one-time initialization token for top != -1) {
    uint64_t result = swift_once();
  }
  *(void *)&static Alignment.topLeading = v0;
  *((void *)&static Alignment.topLeading + 1) = static VerticalAlignment.top;
  return result;
}

uint64_t type metadata completion function for AnyTransition.RemovalVisitor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined release of PlatformImageRepresentableContext(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  int v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(unsigned char *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return a1;
}

uint64_t initializeWithCopy for PlatformImageRepresentableContext(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  }
  else
  {
    uint64_t v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((unsigned char *)a2 + 8));
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
  long long v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  unint64_t v7 = a2[15];
  *(unsigned char *)(a1 + 99) = *((unsigned char *)a2 + 99);
  if (v7 >> 1 == 0xFFFFFFFF)
  {
    long long v8 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = v8;
  }
  else
  {
    uint64_t v9 = a2[13];
    uint64_t v10 = a2[14];
    uint64_t v11 = a2[16];
    outlined copy of AccessibilityImageLabel(v9, v10, v7);
    *(void *)(a1 + 104) = v9;
    *(void *)(a1 + 112) = v10;
    *(void *)(a1 + 120) = v7;
    *(void *)(a1 + 128) = v11;
  }
  uint64_t v12 = a2[18];
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = v12;
  *(_WORD *)(a1 + 152) = *((_WORD *)a2 + 76);
  *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 39);
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  unsigned __int8 v13 = (void *)a2[21];
  *(void *)(a1 + 168) = v13;
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(unsigned char *)(a1 + 178) = *((unsigned char *)a2 + 178);
  uint64_t v15 = a2[23];
  uint64_t v14 = a2[24];
  *(void *)(a1 + 184) = v15;
  *(void *)(a1 + 192) = v14;
  swift_unknownObjectRetain();
  swift_retain();
  id v16 = v13;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata completion function for DynamicViewContainer()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Text.TruncationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubviewsCollectionSlice()
{
  return &type metadata for SubviewsCollectionSlice;
}

uint64_t AnimatorState.__deallocating_deinit()
{
  AnimatorState.deinit();

  return swift_deallocClassInstance();
}

char *AnimatorState.deinit()
{
  uint64_t v1 = *(void *)v0;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 80);
  int v3 = *(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(&v0[*(void *)(*(void *)v0 + 112)], v2);
  v3(&v0[*(void *)(*(void *)v0 + 144)], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Void __swiftcall AGSubgraphRef.didReinsert()()
{
}

void *static Semantics.v7.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v7, &static Semantics.v7, a1);
}

uint64_t static Font.callout.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(one-time initialization token for callout);
}

double static Font.Width.standard.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for standard, (double *)&static Font.Width.standard, a1);
}

double static Font.Width.expanded.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(one-time initialization token for expanded, (double *)&static Font.Width.expanded, a1);
}

uint64_t static GraphicsContext.Shading.linearGradient(_:startPoint:endPoint:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = a2 << 32;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = a2 << 32;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t type metadata accessor for AnyEquatableBox()
{
  return self;
}

uint64_t type metadata accessor for AnyGradientBox()
{
  return self;
}

uint64_t one-time initialization function for customAttachment()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000018, 0x8000000246220F40);
  static NSAttributedStringKey.customAttachment = result;
  return result;
}

uint64_t one-time initialization function for bottomLeading()
{
  if (one-time initialization token for leading != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.leading;
  if (one-time initialization token for bottom != -1) {
    uint64_t result = swift_once();
  }
  static Alignment.bottomLeading = v0;
  unk_26B0E44D0 = static VerticalAlignment.bottom;
  return result;
}

id ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(id a1, double a2)
{
  if (a2 == 1.0)
  {
    if (*(unsigned char *)(v2 + 32) == 1)
    {
      objc_msgSend(*(id *)v2, sel_setAttributedString_, a1);
      uint64_t v5 = *(void **)(v2 + 8);
      id v6 = objc_msgSend(v5, sel_documentRange);
      objc_msgSend(v5, sel_invalidateLayoutForRange_, v6);

      uint64_t v7 = 0;
      *(unsigned char *)(v2 + 32) = 0;
LABEL_20:
      id v24 = *(id *)(v2 + 8);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
      return v24;
    }
LABEL_19:
    uint64_t v7 = 0;
    goto LABEL_20;
  }
  long long v8 = *(void **)(v2 + 24);
  if (v8)
  {
    id v9 = v8;
  }
  else
  {
    if (!a1) {
      goto LABEL_19;
    }
    objc_msgSend(a1, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_19;
    }
    long long v8 = v26;
    if (!v26) {
      goto LABEL_19;
    }
  }
  if (*(void *)(v2 + 24) && *(double *)(v2 + 16) == a2)
  {
    uint64_t v10 = 0;
    uint64_t v7 = 0;
    if (*(unsigned char *)(v2 + 32)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (one-time initialization token for kitFont != -1) {
    swift_once();
  }
  uint64_t v11 = static NSAttributedStringKey.kitFont;
  id v12 = v8;
  id v13 = objc_msgSend(v12, sel_length);

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(double *)(v14 + 24) = a2;
  *(void *)(v14 + 32) = v12;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:);
  *(void *)(v15 + 24) = v14;
  aBlock[4] = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_14_1;
  id v16 = _Block_copy(aBlock);
  id v17 = a1;
  swift_retain();
  id v18 = v12;
  swift_release();
  objc_msgSend(v18, sel_enumerateAttribute_inRange_options_usingBlock_, v11, 0, v13, 0, v16);
  _Block_release(v16);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  id result = (id)swift_release();
  if ((v11 & 1) == 0)
  {
    double v20 = *(void **)(v2 + 24);
    id v21 = v18;

    *(double *)(v2 + 16) = a2;
    *(void *)(v2 + 24) = v8;
    uint64_t v10 = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:);
LABEL_14:
    objc_msgSend(*(id *)v2, sel_setAttributedString_, v8);
    long long v22 = *(void **)(v2 + 8);
    id v23 = objc_msgSend(v22, sel_documentRange);
    objc_msgSend(v22, sel_invalidateLayoutForRange_, v23);

    uint64_t v7 = (uint64_t)v10;
LABEL_15:

    *(unsigned char *)(v2 + 32) = 1;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t NSAttributedString.Metrics.update(layoutMargins:pixelLength:)(double a1, double a2, double a3, double a4, double a5)
{
  id v6 = v5;
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = a1 + a3 + v5[1];
  *uint64_t v5 = a2 + a4 + *v5;
  v5[1] = v16;
  id v17 = v5 + 4;
  v5[4] = v5[4] + a1;
  double v19 = v5[3];
  id v18 = v5 + 3;
  double v20 = v19 + a1;
  *id v18 = v19 + a1;
  id v21 = *(void (**)(char *, void, uint64_t))(v13 + 104);
  v21(v15, *MEMORY[0x263F8E210], v12);
  specialized FloatingPoint.round(_:toMultipleOf:)(v15, a5);
  long long v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v15, v12);
  double v23 = *v18 - v20;
  v6[5] = v23;
  *id v17 = v23 + *v17;
  v21(v15, *MEMORY[0x263F8E218], v12);
  specialized FloatingPoint.round(_:toMultipleOf:)(v15, a5);
  return ((uint64_t (*)(char *, uint64_t))v22)(v15, v12);
}

uint64_t _MovableLockWait(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  int v4 = *(_DWORD *)(a1 + 224);
  int v3 = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = 0;
  if (v3) {
    pthread_cond_broadcast((pthread_cond_t *)(a1 + 64));
  }
  uint64_t result = pthread_cond_wait((pthread_cond_t *)(a1 + 160), (pthread_mutex_t *)a1);
  while (*(void *)(a1 + 216))
    uint64_t result = wait_for_lock((pthread_mutex_t *)a1, (uint64_t)v2);
  *(void *)(a1 + 216) = v2;
  *(_DWORD *)(a1 + 224) = v4;
  return result;
}

uint64_t _GraphInputs.scrollPhaseState.setter(int a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1, (uint64_t)&v4);
  return swift_release();
}

uint64_t instantiation function for generic protocol witness table for VisualEffectModifier<A>.Child(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for RendererVisualEffect<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CombinedVisualEffect<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t View.matchedGeometryEffect<A>(id:in:properties:anchor:isSource:)(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  uint64_t v28 = a7;
  uint64_t v27 = a5;
  int v26 = a4;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  id v17 = &v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for _MatchedGeometryEffect();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x270FA5388](v18);
  long long v22 = &v25[-v21];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v15 + 16))(v17, a1, a6, v20);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 32))(v22, v17, a6);
  *(void *)&v22[*(int *)(v18 + 36)] = a2;
  double v23 = (double *)&v22[*(int *)(v18 + 40)];
  *(_DWORD *)double v23 = a3;
  v23[1] = a8;
  _DWORD v23[2] = a9;
  *((unsigned char *)v23 + 24) = v26;
  View.modifier<A>(_:)(v22, v27, v18);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v19 + 8))(v22, v18);
}

void type metadata accessor for AXAutomationType(uint64_t a1)
{
}

unint64_t instantiation function for generic protocol witness table for EmptyVisualEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EmptyVisualEffect and conformance EmptyVisualEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyVisualEffect and conformance EmptyVisualEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyVisualEffect and conformance EmptyVisualEffect;
  if (!lazy protocol witness table cache variable for type EmptyVisualEffect and conformance EmptyVisualEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyVisualEffect and conformance EmptyVisualEffect);
  }
  return result;
}

uint64_t GraphicsContext.blendMode.setter(int a1)
{
  uint64_t result = *v1;
  if (*(_DWORD *)(*v1 + 52) != a1)
  {
    uint64_t v4 = v1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t v5 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v6 = swift_retain();
      uint64_t *v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
      uint64_t result = swift_release();
    }
    *(_DWORD *)(*v4 + 52) = a1;
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in AnchorGeometryTransform<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnchorGeometryTransform<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ShadowEffect(int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v32);
  long long v7 = v32;
  unsigned __int8 v8 = v33;
  unsigned int v9 = DWORD1(v33);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v28 = *(_OWORD *)(a2 + 32);
  long long v29 = v10;
  long long v30 = *(_OWORD *)(a2 + 64);
  char v31 = *(unsigned char *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v26 = *(_OWORD *)a2;
  long long v27 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v32) = v8;
  int v19 = a1;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v20, (uint64_t)&v32, a1, (uint64_t)&v26, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  uint64_t v12 = v20;
  unint64_t v17 = *((void *)&v32 + 1);
  uint64_t v18 = v32;
  char v13 = v33;
  long long v34 = v28;
  long long v35 = v29;
  long long v36 = v30;
  char v37 = v31;
  long long v32 = v26;
  long long v33 = v27;
  LODWORD(a2) = AGSubgraphShouldRecordTree();
  uint64_t v14 = outlined retain of _ViewListInputs((uint64_t)&v32);
  if (a2)
  {
    uint64_t v15 = AGSubgraphBeginTreeElement();
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    char v25 = v37;
    long long v20 = v32;
    long long v21 = v33;
    a3(v15, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
    AGSubgraphEndTreeElement();
  }
  else
  {
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    char v25 = v37;
    long long v20 = v32;
    long long v21 = v33;
    a3(v14, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  if ((v13 & 1) == 0)
  {
    LOBYTE(v20) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v19, v7, *((uint64_t *)&v7 + 1), v8, v18, v17);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v7;
  unsigned __int8 v8;
  unsigned int v9;
  long long v10;
  long long v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  int v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  char v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  char v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  char v37;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v32);
  long long v7 = v32;
  unsigned __int8 v8 = v33;
  unsigned int v9 = DWORD1(v33);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v28 = *(_OWORD *)(a2 + 32);
  long long v29 = v10;
  long long v30 = *(_OWORD *)(a2 + 64);
  char v31 = *(unsigned char *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v26 = *(_OWORD *)a2;
  long long v27 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v32) = v8;
  int v19 = a1;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v20, (uint64_t)&v32, a1, (uint64_t)&v26, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  uint64_t v12 = v20;
  unint64_t v17 = *((void *)&v32 + 1);
  uint64_t v18 = (char *)v32;
  char v13 = v33;
  long long v34 = v28;
  long long v35 = v29;
  long long v36 = v30;
  char v37 = v31;
  long long v32 = v26;
  long long v33 = v27;
  LODWORD(a2) = AGSubgraphShouldRecordTree();
  uint64_t v14 = outlined retain of _ViewListInputs((uint64_t)&v32);
  if (a2)
  {
    uint64_t v15 = AGSubgraphBeginTreeElement();
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    char v25 = v37;
    long long v20 = v32;
    long long v21 = v33;
    a3(v15, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
    AGSubgraphEndTreeElement();
  }
  else
  {
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    char v25 = v37;
    long long v20 = v32;
    long long v21 = v33;
    a3(v14, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  if ((v13 & 1) == 0)
  {
    LOBYTE(v20) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v19, v7, *((uint64_t *)&v7 + 1), v8, v18, v17);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v7;
  unsigned __int8 v8;
  unsigned int v9;
  long long v10;
  long long v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  int v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  char v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  char v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  char v37;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v32);
  long long v7 = v32;
  unsigned __int8 v8 = v33;
  unsigned int v9 = DWORD1(v33);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v28 = *(_OWORD *)(a2 + 32);
  long long v29 = v10;
  long long v30 = *(_OWORD *)(a2 + 64);
  char v31 = *(unsigned char *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v26 = *(_OWORD *)a2;
  long long v27 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v32) = v8;
  int v19 = a1;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v20, (uint64_t)&v32, a1, (uint64_t)&v26, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  uint64_t v12 = v20;
  unint64_t v17 = *((void *)&v32 + 1);
  uint64_t v18 = v32;
  char v13 = v33;
  long long v34 = v28;
  long long v35 = v29;
  long long v36 = v30;
  char v37 = v31;
  long long v32 = v26;
  long long v33 = v27;
  LODWORD(a2) = AGSubgraphShouldRecordTree();
  uint64_t v14 = outlined retain of _ViewListInputs((uint64_t)&v32);
  if (a2)
  {
    uint64_t v15 = AGSubgraphBeginTreeElement();
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    char v25 = v37;
    long long v20 = v32;
    long long v21 = v33;
    a3(v15, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
    AGSubgraphEndTreeElement();
  }
  else
  {
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    char v25 = v37;
    long long v20 = v32;
    long long v21 = v33;
    a3(v14, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  if ((v13 & 1) == 0)
  {
    LOBYTE(v20) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v19, v7, *((uint64_t *)&v7 + 1), v8, v18, v17);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v7;
  unsigned __int8 v8;
  unsigned int v9;
  long long v10;
  long long v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  int v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  char v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  char v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  char v37;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v32);
  long long v7 = v32;
  unsigned __int8 v8 = v33;
  unsigned int v9 = DWORD1(v33);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v28 = *(_OWORD *)(a2 + 32);
  long long v29 = v10;
  long long v30 = *(_OWORD *)(a2 + 64);
  char v31 = *(unsigned char *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v26 = *(_OWORD *)a2;
  long long v27 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v32) = v8;
  int v19 = a1;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v20, (uint64_t)&v32, a1, (uint64_t)&v26, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  uint64_t v12 = v20;
  unint64_t v17 = *((void *)&v32 + 1);
  uint64_t v18 = v32;
  char v13 = v33;
  long long v34 = v28;
  long long v35 = v29;
  long long v36 = v30;
  char v37 = v31;
  long long v32 = v26;
  long long v33 = v27;
  LODWORD(a2) = AGSubgraphShouldRecordTree();
  uint64_t v14 = outlined retain of _ViewListInputs((uint64_t)&v32);
  if (a2)
  {
    uint64_t v15 = AGSubgraphBeginTreeElement();
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    char v25 = v37;
    long long v20 = v32;
    long long v21 = v33;
    a3(v15, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
    AGSubgraphEndTreeElement();
  }
  else
  {
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    char v25 = v37;
    long long v20 = v32;
    long long v21 = v33;
    a3(v14, &v20);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v12, &v32);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  if ((v13 & 1) == 0)
  {
    LOBYTE(v20) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v19, v7, *((uint64_t *)&v7 + 1), v8, v18, v17);
  }
  outlined release of _ViewListInputs((uint64_t)&v32);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t outlined release of _ViewListInputs(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ShadowEffect@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v64);
  unint64_t v7 = v64;
  uint64_t v8 = v65;
  unsigned __int8 v9 = v66;
  unsigned int v10 = HIDWORD(v66);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v60 = *(_OWORD *)(a2 + 32);
  long long v61 = v11;
  long long v62 = *(_OWORD *)(a2 + 64);
  int v63 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v58 = *(_OWORD *)a2;
  long long v59 = v12;
  outlined retain of _ViewInputs(a2);
  char v37 = v9;
  LOBYTE(v64) = v9;
  int v28 = a1;
  uint64_t v38 = v8;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v42, (uint64_t)&v64, a1, (uint64_t)&v58, v7, v8, v9 | ((unint64_t)v10 << 32));
  unsigned int v40 = v42;
  unint64_t v26 = v65;
  uint64_t v27 = v64;
  char v36 = v66;
  unint64_t v13 = v58;
  uint64_t v14 = v59;
  int v32 = HIDWORD(v59);
  int v33 = DWORD2(v59);
  uint64_t v15 = v60;
  int v34 = DWORD2(v58);
  uint64_t v16 = *((void *)&v60 + 1);
  uint64_t v17 = v61;
  int v30 = HIDWORD(v61);
  int v31 = DWORD2(v61);
  int v18 = v62;
  int v19 = DWORD1(v62);
  int v20 = DWORD2(v62);
  int v21 = HIDWORD(v62);
  int v29 = v63;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v42 = v13;
  int v43 = v34;
  uint64_t v44 = v14;
  int v45 = v33;
  int v46 = v32;
  int v48 = HIDWORD(v15);
  uint64_t v49 = v16;
  uint64_t v50 = v17;
  int v51 = v31;
  int v52 = v30;
  int v53 = v18;
  int v54 = v19;
  int v55 = v20;
  int v56 = v21;
  int v57 = v29;
  unint64_t v64 = v13;
  LODWORD(v65) = v34;
  uint64_t v66 = v14;
  int v67 = v33;
  int v68 = v32;
  int v69 = 0;
  int v70 = HIDWORD(v15);
  uint64_t v71 = v16;
  uint64_t v72 = v17;
  int v73 = v31;
  int v74 = v30;
  int v75 = v18;
  int v76 = v19;
  int v77 = v20;
  int v78 = v21;
  int v79 = v29;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v40, (uint64_t)&v64, a3, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v47 = v15;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v41, &v42);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v23 = v41[0];
  uint64_t v24 = v41[1];
  if ((v36 & 1) == 0)
  {
    LOBYTE(v42) = v37;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v28, v7, v38, v37, v27, v26);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a4 = v23;
  a4[1] = v24;
  return result;
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  int ShouldRecordTree;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  void v42[2];
  char *v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;

  uint64_t v80 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v65);
  unint64_t v7 = (uint64_t)v65;
  uint64_t v8 = v66;
  unsigned __int8 v9 = v67;
  unsigned int v10 = HIDWORD(v67);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v61 = *(_OWORD *)(a2 + 32);
  long long v62 = v11;
  int v63 = *(_OWORD *)(a2 + 64);
  unint64_t v64 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v59 = *(_OWORD *)a2;
  long long v60 = v12;
  outlined retain of _ViewInputs(a2);
  char v37 = v9;
  LOBYTE(v65) = v9;
  int v29 = a1;
  uint64_t v38 = v8;
  uint64_t v39 = v7;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v43, (uint64_t)&v65, a1, (uint64_t)&v59, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v41 = v43;
  uint64_t v27 = v66;
  int v28 = v65;
  char v36 = v67;
  int v32 = HIDWORD(v60);
  int v33 = DWORD2(v60);
  int v34 = DWORD2(v59);
  uint64_t v14 = *((void *)&v61 + 1);
  uint64_t v15 = v61;
  unint64_t v13 = v62;
  uint64_t v16 = HIDWORD(v62);
  uint64_t v17 = v63;
  int v18 = DWORD1(v63);
  int v19 = DWORD2(v63);
  int v30 = HIDWORD(v63);
  int v31 = DWORD2(v62);
  int v20 = v64;
  int v21 = (char *)v59;
  long long v22 = v60;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v43 = v21;
  uint64_t v44 = v34;
  int v45 = v22;
  int v46 = v33;
  int v47 = v32;
  uint64_t v49 = HIDWORD(v15);
  uint64_t v50 = v14;
  int v51 = v13;
  int v52 = v31;
  int v53 = v16;
  int v54 = v17;
  int v55 = v18;
  int v56 = v19;
  int v57 = v30;
  long long v58 = v20;
  unint64_t v65 = v21;
  LODWORD(v66) = v34;
  int v67 = v22;
  int v68 = v33;
  int v69 = v32;
  int v70 = HIDWORD(v15);
  uint64_t v71 = v14;
  uint64_t v72 = v13;
  int v73 = v31;
  int v74 = v16;
  int v75 = v17;
  int v76 = v18;
  int v77 = v19;
  int v78 = v30;
  int v79 = v20;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v41, (uint64_t)&v65, a3, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v48 = v15;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v42, &v43);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v24 = v42[0];
  char v25 = v42[1];
  if ((v36 & 1) == 0)
  {
    LOBYTE(v43) = v37;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v29, v39, v38, v37, v28, v27);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a4 = v24;
  a4[1] = v25;
  return result;
}

{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int ShouldRecordTree;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v36;
  char v37;
  uint64_t v38;
  unsigned int v40;
  void v41[2];
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;

  uint64_t v80 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v64);
  unint64_t v7 = v64;
  uint64_t v8 = v65;
  unsigned __int8 v9 = v66;
  unsigned int v10 = HIDWORD(v66);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v60 = *(_OWORD *)(a2 + 32);
  long long v61 = v11;
  long long v62 = *(_OWORD *)(a2 + 64);
  int v63 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v58 = *(_OWORD *)a2;
  long long v59 = v12;
  outlined retain of _ViewInputs(a2);
  char v37 = v9;
  LOBYTE(v64) = v9;
  int v28 = a1;
  uint64_t v38 = v8;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v42, (uint64_t)&v64, a1, (uint64_t)&v58, v7, v8, v9 | ((unint64_t)v10 << 32));
  unsigned int v40 = v42;
  unint64_t v26 = v65;
  uint64_t v27 = v64;
  char v36 = v66;
  unint64_t v13 = v58;
  uint64_t v14 = v59;
  int v32 = HIDWORD(v59);
  int v33 = DWORD2(v59);
  uint64_t v15 = v60;
  int v34 = DWORD2(v58);
  uint64_t v16 = *((void *)&v60 + 1);
  uint64_t v17 = v61;
  int v30 = HIDWORD(v61);
  int v31 = DWORD2(v61);
  int v18 = v62;
  int v19 = DWORD1(v62);
  int v20 = DWORD2(v62);
  int v21 = HIDWORD(v62);
  int v29 = v63;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v42 = v13;
  int v43 = v34;
  uint64_t v44 = v14;
  int v45 = v33;
  int v46 = v32;
  int v48 = HIDWORD(v15);
  uint64_t v49 = v16;
  uint64_t v50 = v17;
  int v51 = v31;
  int v52 = v30;
  int v53 = v18;
  int v54 = v19;
  int v55 = v20;
  int v56 = v21;
  int v57 = v29;
  unint64_t v64 = v13;
  LODWORD(v65) = v34;
  uint64_t v66 = v14;
  int v67 = v33;
  int v68 = v32;
  int v69 = 0;
  int v70 = HIDWORD(v15);
  uint64_t v71 = v16;
  uint64_t v72 = v17;
  int v73 = v31;
  int v74 = v30;
  int v75 = v18;
  int v76 = v19;
  int v77 = v20;
  int v78 = v21;
  int v79 = v29;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v40, (uint64_t)&v64, a3, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v47 = v15;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v41, &v42);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v23 = v41[0];
  uint64_t v24 = v41[1];
  if ((v36 & 1) == 0)
  {
    LOBYTE(v42) = v37;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v28, v7, v38, v37, v27, v26);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a4 = v23;
  a4[1] = v24;
  return result;
}

{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int ShouldRecordTree;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v36;
  char v37;
  uint64_t v38;
  unsigned int v40;
  void v41[2];
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;

  uint64_t v80 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v64);
  unint64_t v7 = v64;
  uint64_t v8 = v65;
  unsigned __int8 v9 = v66;
  unsigned int v10 = HIDWORD(v66);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v60 = *(_OWORD *)(a2 + 32);
  long long v61 = v11;
  long long v62 = *(_OWORD *)(a2 + 64);
  int v63 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v58 = *(_OWORD *)a2;
  long long v59 = v12;
  outlined retain of _ViewInputs(a2);
  char v37 = v9;
  LOBYTE(v64) = v9;
  int v28 = a1;
  uint64_t v38 = v8;
  specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(&v42, (uint64_t)&v64, a1, (uint64_t)&v58, v7, v8, v9 | ((unint64_t)v10 << 32));
  unsigned int v40 = v42;
  unint64_t v26 = v65;
  uint64_t v27 = v64;
  char v36 = v66;
  unint64_t v13 = v58;
  uint64_t v14 = v59;
  int v32 = HIDWORD(v59);
  int v33 = DWORD2(v59);
  uint64_t v15 = v60;
  int v34 = DWORD2(v58);
  uint64_t v16 = *((void *)&v60 + 1);
  uint64_t v17 = v61;
  int v30 = HIDWORD(v61);
  int v31 = DWORD2(v61);
  int v18 = v62;
  int v19 = DWORD1(v62);
  int v20 = DWORD2(v62);
  int v21 = HIDWORD(v62);
  int v29 = v63;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v42 = v13;
  int v43 = v34;
  uint64_t v44 = v14;
  int v45 = v33;
  int v46 = v32;
  int v48 = HIDWORD(v15);
  uint64_t v49 = v16;
  uint64_t v50 = v17;
  int v51 = v31;
  int v52 = v30;
  int v53 = v18;
  int v54 = v19;
  int v55 = v20;
  int v56 = v21;
  int v57 = v29;
  unint64_t v64 = v13;
  LODWORD(v65) = v34;
  uint64_t v66 = v14;
  int v67 = v33;
  int v68 = v32;
  int v69 = 0;
  int v70 = HIDWORD(v15);
  uint64_t v71 = v16;
  uint64_t v72 = v17;
  int v73 = v31;
  int v74 = v30;
  int v75 = v18;
  int v76 = v19;
  int v77 = v20;
  int v78 = v21;
  int v79 = v29;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v40, (uint64_t)&v64, a3, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v47 = v15;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v41, &v42);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v23 = v41[0];
  uint64_t v24 = v41[1];
  if ((v36 & 1) == 0)
  {
    LOBYTE(v42) = v37;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v28, v7, v38, v37, v27, v26);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a4 = v23;
  a4[1] = v24;
  return result;
}

uint64_t specialized static EnvironmentalModifier.makeResolvedModifier(modifier:inputs:fields:)(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 0x45776F646168535FLL;
    v19._object = (void *)0xED00007463656666;
    String.append(_:)(v19);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for PropertyList.Tracker();
    uint64_t v14 = swift_allocObject();
    type metadata accessor for AtomicBuffer<TrackerData>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
    uint64_t v15 = swift_allocObject();
    *(_DWORD *)(v15 + 16) = 0;
    uint64_t v16 = MEMORY[0x263F8EE80];
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = v16;
    uint64_t v17 = MEMORY[0x263F8EE78];
    *(void *)(v15 + 40) = v16;
    *(void *)(v15 + 48) = v17;
    *(unsigned char *)(v15 + 56) = 0;
    *(void *)(v14 + 16) = v15;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v14 = a7 & 1;
    uint64_t v15 = a7 & 0xFFFFFFFF00000000;
    uint64_t v16 = *(void *)(a4 + 16);
    swift_beginAccess();
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
    type metadata accessor for PropertyList.Tracker();
    uint64_t v17 = swift_allocObject();
    type metadata accessor for AtomicBuffer<TrackerData>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
    int v18 = swift_allocObject();
    *(_DWORD *)(v18 + 16) = 0;
    Swift::String v19 = MEMORY[0x263F8EE80];
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = v19;
    int v20 = MEMORY[0x263F8EE78];
    *(void *)(v18 + 40) = v19;
    *(void *)(v18 + 48) = v20;
    *(unsigned char *)(v18 + 56) = 0;
    *(void *)(v17 + 16) = v18;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, v15 | v14, v16, v17, 1);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::String v19;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x800000024621DDE0;
    v19._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v19);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for PropertyList.Tracker();
    uint64_t v14 = swift_allocObject();
    type metadata accessor for AtomicBuffer<TrackerData>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
    uint64_t v15 = swift_allocObject();
    *(_DWORD *)(v15 + 16) = 0;
    uint64_t v16 = MEMORY[0x263F8EE80];
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = v16;
    uint64_t v17 = MEMORY[0x263F8EE78];
    *(void *)(v15 + 40) = v16;
    *(void *)(v15 + 48) = v17;
    *(unsigned char *)(v15 + 56) = 0;
    *(void *)(v14 + 16) = v15;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::String v19;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x800000024621DDA0;
    v19._uint64_t countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v19);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for PropertyList.Tracker();
    uint64_t v14 = swift_allocObject();
    type metadata accessor for AtomicBuffer<TrackerData>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
    uint64_t v15 = swift_allocObject();
    *(_DWORD *)(v15 + 16) = 0;
    uint64_t v16 = MEMORY[0x263F8EE80];
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = v16;
    uint64_t v17 = MEMORY[0x263F8EE78];
    *(void *)(v15 + 40) = v16;
    *(void *)(v15 + 48) = v17;
    *(unsigned char *)(v15 + 56) = 0;
    *(void *)(v14 + 16) = v15;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    return swift_release();
  }
  return result;
}

void type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShadowEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>);
  }
  return result;
}

uint64_t one-time initialization function for isDebuggerAttached()
{
  uint64_t result = closure #1 in variable initialization expression of isDebuggerAttached();
  isDebuggerAttacheCGFloat d = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of isDebuggerAttached()
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  int v20 = 0;
  uint64_t v25 = 0;
  int v26 = 0;
  uint64_t v39 = 0;
  __int16 v40 = 0;
  uint64_t v53 = 0;
  int v45 = 0;
  type metadata accessor for _ContiguousArrayStorage<Int32>();
  memset(v8, 0, sizeof(v8));
  long long v11 = 0u;
  long long v12 = 0u;
  int v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  int v16 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  int v24 = 0;
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  int v31 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  long long v37 = 0u;
  memset(v38, 0, sizeof(v38));
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v32 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  uint64_t v47 = 0;
  uint64_t v46 = 0;
  int v49 = 0;
  uint64_t v48 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  __int16 v52 = 0;
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  __int16 v57 = 0;
  uint64_t v56 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461C6AA0;
  *(void *)(v0 + 32) = 0xE00000001;
  *(_DWORD *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 44) = getpid();
  size_t v7 = 648;
  int v1 = sysctl((int *)(v0 + 32), 4u, v8, &v7, 0, 0);
  swift_bridgeObjectRelease();
  if (!v1) {
    return (v8[33] >> 3) & 1;
  }
  static os_log_type_t.error.getter();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  int v3 = MEMORY[0x24C521F80]();
  uint64_t v4 = MEMORY[0x263F8E5B0];
  *(void *)(v2 + 56) = MEMORY[0x263F8E548];
  *(void *)(v2 + 64) = v4;
  *(_DWORD *)(v2 + 32) = v3;
  type metadata accessor for OS_os_log();
  long long v5 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  return 0;
}

void type metadata accessor for _ContiguousArrayStorage<Int32>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Int32>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Int32>);
    }
  }
}

uint64_t type metadata completion function for AttributeScopes.SwiftUIAttributes()
{
  uint64_t result = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AttributeScopes.FoundationAttributes();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t @objc closure #3 in AnyCustomTextAttachment.runDelegate.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t ConcreteCustomTextAttachment.descent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 128) + 16))(*(void *)(*(void *)v0 + 120));
}

double protocol witness for TextAttachment.descent.getter in conformance LineAttachment()
{
  return *(double *)(v0 + 80);
}

uint64_t @objc closure #2 in AnyCustomTextAttachment.runDelegate.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t ConcreteCustomTextAttachment.ascent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 128) + 8))(*(void *)(*(void *)v0 + 120));
}

double protocol witness for TextAttachment.ascent.getter in conformance LineAttachment()
{
  return *(double *)(v0 + 72);
}

uint64_t specialized static Font.PrivateTextStyleProvider.== infix(_:_:)(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  if ((static _CFObject.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if (a2)
  {
    if (!a6) {
      return 0;
    }
    id v14 = a6;
    id v15 = a2;
    char v16 = static _CFObject.== infix(_:_:)();

    if ((v16 & 1) == 0) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a4)
  {
    if (a8) {
      return 1;
    }
  }
  else if ((a8 & 1) == 0 && *(double *)&a3 == *(double *)&a7)
  {
    return 1;
  }
  return 0;
}

void protocol witness for Hashable.hash(into:) in conformance Font.PrivateTextStyleProvider()
{
  unint64_t v1 = *(void **)(v0 + 8);
  Swift::UInt64 v2 = *(void *)(v0 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 24);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  _CFObject.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v4 = v1;
    _CFObject.hash(into:)();

    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(0);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(1u);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

float one-time initialization function for foregroundKeyColorAnyAlpha()
{
  float result = *MEMORY[0x263F638E0];
  __asm { FMOV            V1.2S, #-1.0 }
  static RBColor.foregroundKeyColorAnyAlphdouble a = _D1;
  dword_26B111980 = -1082130432;
  dword_26B111984 = LODWORD(result);
  return result;
}

uint64_t instantiation function for generic protocol witness table for EllipticalGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for LinearGradient._Paint(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint);
}

uint64_t instantiation function for generic protocol witness table for OffsetShape<A>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, _OWORD *a2)
{
  if (!specialized find<A>(_:key:)(*a1) || (uint64_t result = AGCompareValues(), !result))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ContainerShapeKey>>();
    uint64_t v6 = swift_allocObject();
    long long v7 = a2[1];
    *(_OWORD *)(v6 + 72) = *a2;
    *(_OWORD *)(v6 + 88) = v7;
    *(_OWORD *)(v6 + 104) = a2[2];
    *(_OWORD *)(v6 + 113) = *(_OWORD *)((char *)a2 + 41);
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    Swift::Int v9 = v8;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v9, 0, v5.value);
    return swift_release();
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ContainerShapeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContainerShapeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContainerShapeKey>>);
    }
  }
}

uint64_t instantiation function for generic protocol witness table for CGColorRef(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CGColorRef(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for ObservedObjectPropertyBox()
{
  swift_release();
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t (*partial apply for closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_allocObject();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 16) = v3;
  *(void *)(v2 + 32) = v1;
  *(void *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:);
}

unint64_t instantiation function for generic protocol witness table for DelayAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DelayAnimation and conformance DelayAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for RawRepresentableProxy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _ViewInputs.implicitRootType.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t base witness table accessor for Equatable in CGColorRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
}

uint64_t base witness table accessor for Hashable in CGColorRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
}

uint64_t one-time initialization function for blue()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 7;
  static Color.blue = (_UNKNOWN *)result;
  return result;
}

uint64_t _ViewList_ID.containsID<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v22 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v22);
  SwiftUI::BloomFilter v5 = (char *)&v19 - v4;
  MEMORY[0x270FA5388](v6);
  int v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(*(void *)(v2 + 8) + 16);
  if (!v11) {
    return 0;
  }
  long long v12 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v20 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v21 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v19 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = 32;
  do
  {
    uint64_t v15 = v13;
    uint64_t v24 = *(void *)(v13 + v14);
    swift_retain();
    AnyHashable2.as<A>(type:)();
    if ((*v12)(v5, 1, a2) == 1)
    {
      swift_release();
      (*v19)(v5, v22);
    }
    else
    {
      (*v21)(v10, v5, a2);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      (*v20)(v10, a2);
      if (v16)
      {
        uint64_t v17 = 1;
        goto LABEL_9;
      }
    }
    v14 += 24;
    --v11;
    uint64_t v13 = v15;
  }
  while (v11);
  uint64_t v17 = 0;
LABEL_9:
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t one-time initialization function for kitShadow()
{
  uint64_t result = MEMORY[0x24C522820](0x776F64616853534ELL, 0xE800000000000000);
  static NSAttributedStringKey.kitShadow = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, type metadata accessor for AGSubgraphRef);
}

uint64_t Material.applyingFiltersInPlace(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)v2;
  int v4 = *(_DWORD *)(v2 + 12);
  *(void *)a2 = *(void *)v2;
  unsigned __int8 v5 = *(unsigned char *)(v2 + 8);
  *(unsigned char *)(a2 + 8) = v5;
  unsigned int v6 = v4 & 0xFFFFFF7F;
  if (a1) {
    int v7 = 128;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a2 + 12) = v6 | v7;
  return outlined copy of Material.ID(v3, v5);
}

unint64_t _ViewListInputs.traits.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 64);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

void PlatformDrawableContent.draw(in:size:state:)(void *a1, uint64_t a2, double a3, double a4)
{
  int v7 = *(void **)v4;
  unint64_t v6 = *(void *)(v4 + 8);
  uint64_t v9 = *(uint64_t *)(v4 + 16);
  uint64_t v8 = *(uint64_t *)(v4 + 24);
  uint64_t v10 = *(void *)(v4 + 32);
  int v11 = *(unsigned __int8 *)(v4 + 40);
  if (v11 == 4)
  {
    id v18 = v7;
    objc_msgSend(a1, sel_translateByX_Y_, COERCE_DOUBLE(v9 ^ 0x8000000000000000), COERCE_DOUBLE(v8 ^ 0x8000000000000000));
    uint64_t State = RBDisplayListGetState();
    LODWORD(v20) = v6;
    objc_msgSend(v18, sel_drawInState_by_, State, v20);
    long long v12 = v7;
    uint64_t v13 = (void *)v6;
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    uint64_t v16 = v10;
    char v17 = 4;
    goto LABEL_5;
  }
  if (v11 == 3)
  {
    swift_unknownObjectRetain();
    objc_msgSend(a1, sel_translateByX_Y_, COERCE_DOUBLE(v6 ^ 0x8000000000000000), COERCE_DOUBLE(v9 ^ 0x8000000000000000));
    objc_msgSend(a1, sel_drawDisplayList_, v7);
    long long v12 = v7;
    uint64_t v13 = (void *)v6;
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    uint64_t v16 = v10;
    char v17 = 3;
LABEL_5:
    outlined consume of PlatformDrawableContent.Storage(v12, v13, v14, v15, v16, v17);
    return;
  }
  uint64_t v42 = *(void *)(v4 + 32);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v23 = one-time initialization token for shared;
  id v24 = a1;
  if (v23 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v25 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  int v26 = static CoreGlue2.shared;
  v25(&v44);

  uint64_t v28 = v44;
  uint64_t v27 = v45;
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 32) = xmmword_24619B520;
  *(void *)(v29 + 48) = 1065353216;
  *(void *)(v29 + 56) = 0x7FF8000000000000;
  v43[0] = v28;
  v43[1] = v27;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  id v30 = v24;
  *(void *)(v29 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v30, v43);
  *(void *)(v29 + 24) = RBDisplayListGetState();
  *(unsigned char *)(v29 + 64) = 0;

  uint64_t v44 = v29;
  switch(v11)
  {
    case 1:
      outlined copy of PlatformDrawableContent.Storage(v7, (id)v6, v9, v8, v42, 1);
      uint64_t v40 = swift_retain();
      specialized GraphicsContext.withPlatformContext(content:)(v40, (void (*)(id, double, double))v7, a3, a4);
      swift_release_n();
      long long v34 = v7;
      long long v35 = (void *)v6;
      uint64_t v36 = v9;
      uint64_t v37 = v8;
      uint64_t v38 = v42;
      char v39 = 1;
      goto LABEL_22;
    case 2:
      swift_bridgeObjectRetain();
      if (*(double *)&v9 != 0.0 || *(double *)&v8 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v31 = RBDrawingStateInit();
          swift_allocObject();
          uint64_t v32 = swift_retain();
          uint64_t v44 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v32, v31, 1, 0);
          swift_release();
        }
        RBDrawingStateTranslateCTM();
      }
      long long v33 = *(__n128 **)(a2 + 8);
      if (!v33)
      {
        LOBYTE(v43[0]) = *(unsigned char *)a2;
        type metadata accessor for DisplayList.GraphicsRenderer();
        swift_allocObject();
        long long v33 = (__n128 *)DisplayList.GraphicsRenderer.init(platformViewMode:)((char *)v43);
        *(void *)(a2 + 8) = v33;
      }
      v43[0] = v42;
      outlined copy of PlatformDrawableContent.Storage(v7, (id)v6, v9, v8, v42, 2);
      swift_retain();
      specialized DisplayList.GraphicsRenderer.render(at:do:)((unint64_t *)v43, v33, (uint64_t)v33, (uint64_t)v7, v6 & 0xFFFFFF, (unint64_t *)&v44);
      outlined consume of PlatformDrawableContent.Storage(v7, (id)v6, v9, v8, v42, 2);
      swift_release();
      swift_release();
      long long v34 = v7;
      long long v35 = (void *)v6;
      uint64_t v36 = v9;
      uint64_t v37 = v8;
      uint64_t v38 = v42;
      char v39 = 2;
LABEL_22:
      outlined consume of PlatformDrawableContent.Storage(v34, v35, v36, v37, v38, v39);
      return;
    case 3:
    case 4:
      __break(1u);
      return;
    case 5:
      goto LABEL_20;
    default:
      swift_retain();
      ((void (*)(uint64_t *, double, double))v7)(&v44, a3, a4);
      outlined consume of PlatformDrawableContent.Storage(v7, (id)v6, v9, v8, v42, 0);
LABEL_20:
      swift_release();
      break;
  }
}

uint64_t type metadata completion function for AnchorValueBox()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t specialized StaticBody.updateValue()(uint64_t a1, void (*a2)(uint64_t *, uint64_t), void (*a3)(char *, uint64_t))
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  long long v41 = (char *)&v40 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v45 = (char *)&v40 - v13;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = CurrentAttribute;
    uint64_t v42 = a3;
    long long v43 = a2;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v44 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v19, 1, 1, v6);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v22 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v19;
  uint64_t Value = AGGraphGetValue();
  uint64_t v46 = *(void *)Value;
  long long v47 = *(_OWORD *)(Value + 8);
  long long v48 = *(_OWORD *)(Value + 24);
  swift_bridgeObjectRetain();
  v43(&v46, 1);
  swift_bridgeObjectRelease();
  *(void *)(StatusReg + 848) = v22;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v19, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  int64_t p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v16);
  }
  else
  {
    uint64_t v25 = v45;
    long long v43 = *(void (**)(uint64_t *, uint64_t))(v7 + 32);
    ((void (*)(char *, char *, uint64_t))v43)(v45, v16, v6);
    int v26 = v41;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v41, v25, v6);
    swift_beginAccess();
    uint64_t v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    unint64_t v30 = *((void *)v27 + 2);
    unint64_t v29 = *((void *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((void *)v27 + 2) = v30 + 1;
    ((void (*)(char *, char *, uint64_t))v43)(&v27[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v30], v26, v6);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v45, v6);
    int64_t p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v19);
  uint64_t v31 = p_cache[338];
  uint64_t v32 = v31[2];
  if (v32)
  {
    long long v35 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v34 = v7 + 16;
    long long v33 = v35;
    uint64_t v36 = (char *)v31 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v37 = *(void *)(v34 + 56);
    uint64_t v45 = (char *)p_cache[338];
    swift_bridgeObjectRetain();
    uint64_t v38 = v42;
    do
    {
      v33(v9, v36, v6);
      v38(v9, v3);
      (*(void (**)(char *, uint64_t))(v34 - 8))(v9, v6);
      v36 += v37;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    int64_t p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v44;
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(uint64_t (*a1)(_OWORD *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  long long v4 = *(_OWORD *)(v3 + 16);
  v21[0] = *(_OWORD *)v3;
  v21[1] = v4;
  long long v5 = *(_OWORD *)(v3 + 32);
  long long v6 = *(_OWORD *)(v3 + 48);
  long long v7 = *(_OWORD *)(v3 + 80);
  v21[4] = *(_OWORD *)(v3 + 64);
  v21[5] = v7;
  long long v21[2] = v5;
  v21[3] = v6;
  long long v8 = *(_OWORD *)(v3 + 96);
  long long v9 = *(_OWORD *)(v3 + 112);
  long long v10 = *(_OWORD *)(v3 + 144);
  v21[8] = *(_OWORD *)(v3 + 128);
  v21[9] = v10;
  v21[6] = v8;
  v21[7] = v9;
  long long v11 = *(_OWORD *)(v3 + 160);
  long long v12 = *(_OWORD *)(v3 + 176);
  long long v13 = *(_OWORD *)(v3 + 192);
  char v22 = *(unsigned char *)(v3 + 208);
  v21[11] = v12;
  v21[12] = v13;
  v21[10] = v11;
  long long v14 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(a2 + 176) = v14;
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(v3 + 192);
  *(unsigned char *)(a2 + 208) = *(unsigned char *)(v3 + 208);
  long long v15 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(a2 + 112) = v15;
  long long v16 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(a2 + 144) = v16;
  long long v17 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a2 + 48) = v17;
  long long v18 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(a2 + 80) = v18;
  long long v19 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v19;
  return a1(v21);
}

double protocol witness for static View._makeView(view:inputs:) in conformance RadialGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>)
  {
    _sSnySiGMaTm_2(255, &lazy cache variable for type metadata for ShapeStyleResolver<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>);
    }
  }
}

uint64_t specialized ShapeStyledDisplayList.updateValue()(void (*a1)(void))
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  int v10 = *((_DWORD *)v1 + 3);
  a1(0);
  uint64_t Value = AGGraphGetValue();
  uint64_t v12 = *(void *)Value;
  uint64_t v13 = *(unsigned __int8 *)(Value + 40);
  uint64_t v14 = *(unsigned __int8 *)(Value + 41);
  if ((v15 & 1) != 0 || !*((_WORD *)v1 + 25))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&v95[0] = *(uint64_t *)((char *)v1 + 28);
    DWORD2(v95[0]) = v10;
    swift_bridgeObjectRetain();
    int v16 = AGGraphAnyInputsChanged();
    unint64_t v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v1 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_20;
  }
  int v60 = v14;
  int v61 = v13;
  int v19 = *((_DWORD *)v1 + 10);
  unint64_t v20 = AGCreateWeakAttribute();
  int v21 = v20;
  unint64_t v58 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  int v23 = v22;
  unint64_t v57 = HIDWORD(v22);
  int v59 = v19;
  unint64_t v24 = AGCreateWeakAttribute();
  int v25 = v24;
  unint64_t v56 = HIDWORD(v24);
  unint64_t v26 = AGCreateWeakAttribute();
  int v27 = v26;
  unint64_t v55 = HIDWORD(v26);
  unint64_t v28 = AGCreateWeakAttribute();
  int v29 = v28;
  unint64_t v54 = HIDWORD(v28);
  unint64_t v30 = AGCreateWeakAttribute();
  int v31 = v30;
  unint64_t v53 = HIDWORD(v30);
  uint64_t v32 = (double *)AGGraphGetValue();
  double v33 = *v32;
  double v34 = v32[1];
  long long v35 = (double *)AGGraphGetValue();
  double v36 = v33 - *v35;
  double v37 = v34 - v35[1];
  uint64_t v38 = AGGraphGetValue();
  CGFloat v39 = *(double *)v38;
  CGFloat v40 = *(double *)(v38 + 8);
  _threadGeometryProxyData();
  int v65 = v21;
  int v66 = v58;
  int v67 = v23;
  int v68 = v57;
  int v69 = v25;
  int v70 = v56;
  int v71 = v27;
  int v72 = v55;
  int v73 = v29;
  long long v4 = &v89;
  int v74 = v54;
  int v75 = v31;
  unint64_t v5 = v17;
  int v76 = v53;
  int v77 = v17;
  _setThreadGeometryProxyData();
  v97.origin.CGFloat x = 0.0;
  v97.origin.CGFloat y = 0.0;
  v97.size.CGFloat width = v39;
  v97.size.CGFloat height = v40;
  BOOL IsNull = CGRectIsNull(v97);
  if (IsNull) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)&v39;
  }
  if (IsNull) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(void *)&v40;
  }
  if (IsNull) {
    uint64_t v2 = 6;
  }
  else {
    uint64_t v2 = 0;
  }
  _setThreadGeometryProxyData();
  uint64_t v42 = *v1;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  uint64_t v89 = v42;
  uint64_t v94 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(0, 0, v13, v14, v2);
  v98.origin.CGFloat x = 0.0;
  v98.origin.CGFloat y = 0.0;
  v98.size.CGFloat width = v39;
  v98.size.CGFloat height = v40;
  CGRect v99 = CGRectOffset(v98, v36, v37);
  CGFloat x = v99.origin.x;
  CGFloat y = v99.origin.y;
  CGFloat width = v99.size.width;
  CGFloat height = v99.size.height;
  LODWORD(v12) = *((_DWORD *)v1 + 2);
  __int16 v3 = *((_WORD *)v1 + 25);
  LOBYTE(v17) = *((unsigned char *)v1 + 48);
  if (one-time initialization token for normal != -1) {
    goto LABEL_26;
  }
LABEL_20:
  uint64_t v43 = 0x10000;
  if (!v60) {
    uint64_t v43 = 0;
  }
  uint64_t v44 = 256;
  if (!v61) {
    uint64_t v44 = 0;
  }
  long long v78 = 0uLL;
  *(void *)&long long v79 = v13;
  *((void *)&v79 + 1) = v14;
  *(void *)uint64_t v80 = v43 | v44 | v2;
  memset(&v80[8], 0, 60);
  *(_WORD *)&v80[68] = v3;
  *(CGFloat *)&v80[72] = x;
  *(CGFloat *)&long long v81 = y;
  *((CGFloat *)&v81 + 1) = width;
  long long v82 = *(unint64_t *)&height;
  LODWORD(v83) = 0;
  *((CGFloat *)&v83 + 1) = x;
  *(CGFloat *)&long long v84 = y;
  *((CGFloat *)&v84 + 1) = width;
  *(CGFloat *)&long long v85 = height;
  long long v86 = xmmword_2461B9DE0;
  *((void *)&v85 + 1) = v5;
  *(void *)&long long v87 = 0;
  BYTE10(v87) = 0;
  WORD4(v87) = 0;
  HIDWORD(v87) = v12;
  v88[0] = v17;
  *(_DWORD *)&v88[4] = v59;
  *(void *)&v88[8] = static GraphicsBlendMode.normal;
  v88[16] = byte_26B0EB4A0;
  *(_DWORD *)&v88[20] = 1065353216;
  v88[24] = 0;
  LOBYTE(v95[0]) = 0;
  uint64_t v45 = *((unsigned int *)v1 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)v95, v45, (uint64_t)&v89);
  LOBYTE(v95[0]) = v17;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v78, (char *)v95, (uint64_t)&v62);
  *(void *)&v95[0] = v62;
  WORD4(v95[0]) = v63;
  BYTE10(v95[0]) = v64;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(0, 0, v13, v14, v2);
  swift_bridgeObjectRelease();
  long long v46 = v87;
  *((_OWORD *)v4 + 17) = v86;
  *((_OWORD *)v4 + 18) = v46;
  *((_OWORD *)v4 + 19) = *(_OWORD *)v88;
  *(_OWORD *)((char *)&v95[14] + 9) = *(_OWORD *)&v88[9];
  v95[8] = v82;
  v95[9] = v83;
  v95[10] = v84;
  v95[11] = v85;
  v95[4] = *(_OWORD *)&v80[32];
  v95[5] = *(_OWORD *)&v80[48];
  v95[6] = *(_OWORD *)&v80[64];
  v95[7] = v81;
  v95[0] = v78;
  v95[1] = v79;
  int v95[2] = *(_OWORD *)v80;
  v95[3] = *(_OWORD *)&v80[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)v95);
  long long v47 = v90;
  long long v48 = v91;
  long long v49 = v92;
  long long v51 = v93;
  unsigned int v50 = v94;
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v51, *((uint64_t *)&v51 + 1), v50);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for _ShapeView<Rectangle, RadialGradient>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, RadialGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, RadialGradient>);
    }
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance VisualEffectModifier<A>.Child()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

Class __CoreShadowClass_block_invoke()
{
  Class result = NSClassFromString(&cfstr_Nsshadow.isa);
  CoreShadowClass_shadowClass = (uint64_t)result;
  CoreShadowClass_isValiCGFloat d = result != 0;
  return result;
}

uint64_t type metadata completion function for Canvas()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for _ContainerValueWritingModifier<A>.AddTrait(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for BindingOperations.ToOptional<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnimatorAttribute<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for bottomTrailing()
{
  if (one-time initialization token for trailing != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.trailing;
  if (one-time initialization token for bottom != -1) {
    uint64_t result = swift_once();
  }
  static Alignment.bottomTrailing = v0;
  *(void *)algn_268EF2570 = static VerticalAlignment.bottom;
  return result;
}

uint64_t *specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, double a3, double a4, double a5, uint64_t a6, unint64_t a7, char a8)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v64 = type metadata accessor for OSSignpostID();
  uint64_t v60 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  int v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  int v19 = (char *)&v54 - v18;
  uint64_t result = (uint64_t *)AGGraphGetValue();
  uint64_t v22 = *result;
  uint64_t v23 = result[1];
  if (a2) {
    goto LABEL_2;
  }
  if ((v21 & 1) == 0) {
    return result;
  }
  if ((a8 & 1) == 0)
  {
LABEL_2:
    swift_retain();
    swift_retain();
    goto LABEL_3;
  }
  swift_retain();
  uint64_t v25 = swift_retain_n();
  char v26 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v25);
  swift_release();
  if (v26)
  {
LABEL_3:
    PropertyList.Tracker.reset()();
    int v61 = v19;
    if (v22) {
      uint64_t v24 = *(void *)(v22 + 64);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v27 = *(void *)(a7 + 16);
    swift_retain_n();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v27 + 16));
    *(void *)(v27 + 24) = v24;
    os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 16));
    swift_release();
    swift_release();
    int v28 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled()) {
      goto LABEL_25;
    }
    int v56 = v28;
    uint64_t v57 = a1;
    uint64_t v58 = v23;
    uint64_t v59 = v22;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v30 = AGTypeID.description.getter();
    uint64_t v32 = v31;
    uint64_t v33 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    double v34 = (void (**)(char *, uint64_t, uint64_t))lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v30;
    uint64_t v35 = inited + 32;
    *(void *)(inited + 64) = v34;
    *(void *)(inited + 40) = v32;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v33;
    *(void *)(inited + 104) = v34;
    *(void *)(inited + 80) = v36;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v37 = v60 + 16;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v16, v61, v64);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v63 = v38;
    uint64_t v39 = swift_initStackObject();
    long long v62 = xmmword_2461BE2B0;
    *(_OWORD *)(v39 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v40 = v39;
      outlined init with copy of AnyTrackedValue(inited + 32, v39 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v54 = inited;
        unint64_t v55 = a7;
        uint64_t v35 = v56 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v40 + 72);
        *(_OWORD *)(v40 + 128) = 0u;
        *(void *)(v40 + 144) = 0;
        *(_OWORD *)(v40 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v35, v40, v35, (uint64_t)v16);
        outlined init with copy of CVarArg?(v40 + 112, (uint64_t)&v65, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (v68 == 0.0)
        {
LABEL_24:
          outlined destroy of CVarArg?((uint64_t)&v65, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          long long v49 = *(void (**)(char *, uint64_t))(v60 + 8);
          uint64_t v50 = v64;
          v49(v61, v64);
          v49(v16, v50);
          a7 = v55;
          uint64_t v22 = v59;
          a1 = v57;
LABEL_25:
          AGGraphClearUpdate();
          uint64_t v65 = v22;
          unint64_t v66 = a7;
          LODWORD(v65) = (*(float (**)(uint64_t *))(*(void *)a1 + 104))(&v65);
          HIDWORD(v65) = v51;
          unint64_t v66 = __PAIR64__(v53, v52);
          double v67 = a3;
          double v68 = a4;
          double v69 = a5;
          int v70 = 1056964608;
          char v71 = 0;
          AGGraphSetUpdate();
          $defer #1 <A>() in traceRuleBody<A>(_:body:)();
          AGGraphSetOutputValue();
          swift_release();
          swift_release_n();
          return (uint64_t *)swift_release();
        }
        double v34 = (void (**)(char *, uint64_t, uint64_t))(v37 + 8);
        outlined destroy of CVarArg?((uint64_t)&v65, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_19:
          uint64_t v41 = v64;
          uint64_t v42 = __swift_project_value_buffer(v64, (uint64_t)static OSSignpostID.continuation);
          uint64_t v43 = *v34;
          (*v34)(v16, v42, v41);
          uint64_t v44 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v45 = swift_initStackObject();
            *(_OWORD *)(v45 + 16) = v62;
            *(_OWORD *)(v45 + 32) = 0u;
            *(_OWORD *)(v45 + 48) = 0u;
            *(_OWORD *)(v45 + 64) = 0u;
            *(_OWORD *)(v45 + 80) = 0u;
            *(_OWORD *)(v45 + 96) = 0u;
            *(_OWORD *)(v45 + 128) = 0u;
            *(void *)(v45 + 144) = 0;
            *(_OWORD *)(v45 + 112) = 0u;
            uint64_t v46 = v45 + 112;
            specialized withKDebugValues(_:_:closure:)(v35, v45, v35, (uint64_t)v16);
            outlined init with copy of CVarArg?(v46, (uint64_t)&v65, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v44);
            swift_bridgeObjectRelease();
            if (v68 == 0.0) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v65, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v44);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v47 = v64;
            uint64_t v48 = __swift_project_value_buffer(v64, (uint64_t)static OSSignpostID.continuation);
            v43(v16, v48, v47);
          }
          goto LABEL_24;
        }
LABEL_29:
        swift_once();
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
  swift_release();

  return (uint64_t *)swift_release();
}

__n128 __swift_memcpy45_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Capsule._Inset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset;
  if (!lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset;
  if (!lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset;
  if (!lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.SymbolRenderingModeProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.RenderingModeProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.DisplayP3(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.DisplayP3 and conformance Color.DisplayP3();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.OpenTypeFeatureSettingModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.PrivateTextStyleProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.FeatureSettingModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.DesignModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.WidthModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for LanguageAwareLineHeightRatioFontModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityToggleValue(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AffineTransformElement(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for VerticalAlignment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment;
  if (!lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment;
  if (!lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SpringAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for SymbolVariants.Shape()
{
  return &type metadata for SymbolVariants.Shape;
}

Swift::Void __swiftcall GraphHost.instantiate()()
{
  uint64_t v1 = swift_beginAccess();
  if ((v0[128] & 1) == 0)
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 192))(v1);
    if (v2)
    {
      uint64_t v4 = v3;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t (*)(void, void), void, uint64_t, uint64_t, uint64_t))(v4 + 8))(_ViewInputs.base.modify, 0, MEMORY[0x263F8EE60] + 8, ObjectType, v4);
      uint64_t v2 = swift_unknownObjectRelease();
    }
    (*(void (**)(uint64_t))(*(void *)v0 + 208))(v2);
    v0[128] = 1;
  }
}

unint64_t lazy protocol witness table accessor for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Focus<EnvironmentValues, Color?> and conformance Focus<A, B>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Focus<EnvironmentValues, AnyShapeStyle?>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Focus<EnvironmentValues, AnyShapeStyle?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for AnyShapeStyle?(255, a3, a4, MEMORY[0x263F8D8F0]);
    unint64_t v5 = type metadata accessor for Focus();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  char v4 = v2();

  return v4 & 1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t _sSo20NSTextLayoutFragmentCSbIggd_ABSbIeggd_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

BOOL partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:)(void *a1)
{
  return closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:)(a1, *(void ***)(v1 + 32), *(_DWORD *)(v1 + 40), *(BOOL **)(v1 + 48), *(double *)(v1 + 16), *(double *)(v1 + 24));
}

BOOL closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:)(void *a1, void **a2, int a3, BOOL *a4, double a5, double a6)
{
  unint64_t v12 = (unint64_t)objc_msgSend(a1, sel_state);
  if (v12 == 3)
  {
    objc_msgSend(a1, sel_layoutFragmentFrame);
    double v14 = v13;
    double v16 = v15;
    id v43 = a1;
    id v17 = objc_msgSend(a1, sel_textLineFragments);
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v18) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v18) {
        goto LABEL_16;
      }
    }
    if (v18 < 1)
    {
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v19 = 0;
    double v20 = v14 + a5;
    double v21 = v16 + a6;
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v22 = (id)MEMORY[0x24C523D60](v19, v12);
      }
      else {
        id v22 = *(id *)(v12 + 8 * v19 + 32);
      }
      id v23 = v22;
      objc_msgSend(v23, sel_typographicBounds);
      double v25 = v24;
      double v27 = v26;
      objc_msgSend(v23, sel_glyphOrigin);
      double v29 = v28;
      double v31 = v30;
      uint64_t v32 = *a2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v32;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        *a2 = v32;
      }
      unint64_t v35 = v32[2];
      unint64_t v34 = v32[3];
      if (v35 >= v34 >> 1) {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v32);
      }
      ++v19;
      v32[2] = v35 + 1;
      uint64_t v36 = &v32[6 * v35];
      v36[4] = v23;
      v36[5] = 0;
      *((unsigned char *)v36 + 48) = 1;
      *((double *)v36 + 7) = v20 + v25 + v29;
      *((double *)v36 + 8) = v21 + v27 + v31;
      *((_DWORD *)v36 + 18) = a3;
      *a2 = v32;
    }
    while (v18 != v19);
LABEL_16:
    swift_bridgeObjectRelease();
    if (*a4)
    {
      BOOL v37 = 1;
      unint64_t v12 = 3;
LABEL_23:
      *a4 = v37;
      return v12 == 3;
    }
    id v38 = objc_msgSend(v43, sel_truncatedRanges);
    unint64_t v12 = 3;
    if (!v38)
    {
      BOOL v37 = 0;
      goto LABEL_23;
    }
    uint64_t v39 = v38;
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSTextRange);
    unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v40 >> 62))
    {
      uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_21:
      swift_bridgeObjectRelease();
      BOOL v37 = v41 != 0;
      goto LABEL_23;
    }
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  return v12 == 3;
}

uint64_t Canvas<>.init(opaque:colorMode:rendersAsynchronously:renderer:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a2;
  if (result) {
    int v7 = 163;
  }
  else {
    int v7 = 161;
  }
  *(void *)a6 = a4;
  *(void *)(a6 + 8) = a5;
  *(unsigned char *)(a6 + 16) = v6;
  if (a3) {
    int v8 = v7 | 4;
  }
  else {
    int v8 = v7;
  }
  *(_DWORD *)(a6 + 20) = 0;
  *(unsigned char *)(a6 + 24) = 1;
  *(_DWORD *)(a6 + 28) = v8;
  *(_WORD *)(a6 + 32) = 3;
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in CombiningTransition<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Transition.Body : View in ModifierTransition<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Transition.Body : View in FilteredTransition<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _PreferenceWritingModifier(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        long long v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

uint64_t type metadata completion function for _BackgroundShapeModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t _AnyResolvedPaint.isOpaque.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 176) + 48))(*(void *)(*(void *)v0 + 168)) & 1;
}

BOOL protocol witness for ResolvedPaint.isOpaque.getter in conformance Color.Resolved()
{
  return *(float *)(v0 + 12) == 1.0;
}

uint64_t base witness table accessor for Equatable in AGSubgraphRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, type metadata accessor for AGSubgraphRef);
}

uint64_t View._colorMatrix(_:)(_OWORD *a1, uint64_t a2)
{
  long long v2 = a1[3];
  void v5[2] = a1[2];
  v5[3] = v2;
  v5[4] = a1[4];
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  return View.modifier<A>(_:)(v5, a2, &type metadata for _ColorMatrixEffect);
}

unint64_t lazy protocol witness table accessor for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>;
  if (!lazy protocol witness table cache variable for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>)
  {
    type metadata accessor for Pair<Int, AGAttribute>();
    lazy protocol witness table accessor for type AGAttribute and conformance AGAttribute();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>);
  }
  return result;
}

void type metadata accessor for Pair<Int, AGAttribute>()
{
  if (!lazy cache variable for type metadata for Pair<Int, AGAttribute>)
  {
    type metadata accessor for AGAttribute(255);
    unint64_t v0 = type metadata accessor for Pair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Pair<Int, AGAttribute>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AGAttribute and conformance AGAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute;
  if (!lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute)
  {
    type metadata accessor for AGAttribute(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute);
  }
  return result;
}

uint64_t one-time initialization function for topTrailing()
{
  if (one-time initialization token for trailing != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = static HorizontalAlignment.trailing;
  if (one-time initialization token for top != -1) {
    uint64_t result = swift_once();
  }
  static Alignment.topTrailing = v0;
  *(void *)algn_26B0E2E88 = static VerticalAlignment.top;
  return result;
}

uint64_t type metadata completion function for PeriodicTimelineSchedule()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for CountingIndex()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in ScaleTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for _BindingActionModifier()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Scale and conformance Text.Scale()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale;
  if (!lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale;
  if (!lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ContainerValueWritingModifier<A>.AddTrait()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentShapeKinds and conformance ContentShapeKinds()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds;
  if (!lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds;
  if (!lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds;
  if (!lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds;
  if (!lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentShapeKinds and conformance ContentShapeKinds);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnimatorAttribute<A, B, C>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

unint64_t lazy protocol witness table accessor for type HorizontalEdge and conformance HorizontalEdge()
{
  unint64_t result = lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge;
  if (!lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge;
  if (!lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge and conformance HorizontalEdge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle;
  if (!lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle;
  if (!lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorScheme and conformance ColorScheme()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorScheme and conformance ColorScheme;
  if (!lazy protocol witness table cache variable for type ColorScheme and conformance ColorScheme)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorScheme and conformance ColorScheme);
  }
  return result;
}

uint64_t type metadata completion function for OpenURLAction.Result()
{
  uint64_t result = type metadata accessor for OpenURLAction.Result.ActionResult(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for OpenURLAction.Result.ActionResult(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for OpenURLAction.Result.ActionResult);
}

uint64_t type metadata completion function for CubicKeyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void))
{
  uint64_t result = a4(319, *(void *)(a1 + 16), *(void *)(a1 + 24));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent.Linear()
{
  return __swift_instantiateGenericMetadata();
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, double a3, double a4, double a5, double a6, double a7)
{
  char v7 = a2;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)a1;
  double v15 = (void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 8);
  int v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 != 5)
  {
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(unsigned char *)(v24 + 16) = 2;
    RBPathStorageInit();
    int v25 = *(unsigned __int8 *)(v24 + 16);
    swift_retain();
    if (v25 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    v36[5] = v14;
    v36[6] = v16;
    v36[7] = v22;
    v36[8] = v23;
    char v37 = v17;
    outlined copy of Path.Storage(v14, v16, v22, v23, v17);
    Path.append(to:)(v24 + 24);
    outlined consume of Path.Storage(v14, v16, v22, v23, v17);
    uint64_t v18 = v24;
    char v7 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v18 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    uint64_t result = (void *)(v18 + 24);
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    int v20 = *(unsigned __int8 *)(v14 + 16);
    *(unsigned char *)(v18 + 16) = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        swift_retain();
        *(void *)(v18 + 24) = RBPathRetain();
        *(void *)(v18 + 32) = v21;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      double v26 = *(void **)(v14 + 24);
      if (!v26)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v26;
      id v27 = v26;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(a1 + 24);
  unsigned __int8 v32 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v28, v29, v30, v31, v32);
  *(void *)a1 = v18;
  v15[1] = 0;
  v15[2] = 0;
  *double v15 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v18 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  *(double *)uint64_t v36 = a3;
  *(double *)&v36[1] = a4;
  *(double *)&void v36[2] = a5;
  *(double *)&v36[3] = a6;
  *(double *)&v36[4] = a7;
  long long v33 = v7[1];
  v35[0] = *v7;
  v35[1] = v33;
  _OWORD v35[2] = v7[2];
  MEMORY[0x24C526C30](v18 + 24, 12, v36, v35);
  return (void *)swift_release();
}

{
  _OWORD *v7;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  long long v33;
  _OWORD v35[3];
  void v36[9];
  char v37;
  uint64_t v38;

  char v7 = a2;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)a1;
  double v15 = (void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 8);
  int v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 != 5)
  {
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(unsigned char *)(v24 + 16) = 2;
    RBPathStorageInit();
    int v25 = *(unsigned __int8 *)(v24 + 16);
    swift_retain();
    if (v25 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    v36[5] = v14;
    v36[6] = v16;
    v36[7] = v22;
    v36[8] = v23;
    char v37 = v17;
    outlined copy of Path.Storage(v14, v16, v22, v23, v17);
    Path.append(to:)(v24 + 24);
    outlined consume of Path.Storage(v14, v16, v22, v23, v17);
    uint64_t v18 = v24;
    char v7 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v18 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    uint64_t result = (void *)(v18 + 24);
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    int v20 = *(unsigned __int8 *)(v14 + 16);
    *(unsigned char *)(v18 + 16) = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        swift_retain();
        *(void *)(v18 + 24) = RBPathRetain();
        *(void *)(v18 + 32) = v21;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      double v26 = *(void **)(v14 + 24);
      if (!v26)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v26;
      id v27 = v26;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(a1 + 24);
  unsigned __int8 v32 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v28, v29, v30, v31, v32);
  *(void *)a1 = v18;
  v15[1] = 0;
  v15[2] = 0;
  *double v15 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v18 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  *(double *)uint64_t v36 = a3;
  *(double *)&v36[1] = a4;
  *(double *)&void v36[2] = a5;
  *(double *)&v36[3] = a6;
  *(double *)&v36[4] = a7;
  long long v33 = v7[1];
  v35[0] = *v7;
  v35[1] = v33;
  _OWORD v35[2] = v7[2];
  MEMORY[0x24C526C30](v18 + 24, 15, v36, v35);
  return (void *)swift_release();
}

uint64_t assignWithCopy for VariableBlurStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v4 = a1 + 16;
  unint64_t v5 = (uint64_t *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 113) << 8;
  if (*(unsigned __int8 *)(a1 + 113) << 8 != 512)
  {
    if (v6 == 512)
    {
      outlined destroy of GraphicsImage(a1 + 16);
      long long v13 = *((_OWORD *)v5 + 1);
      long long v12 = *((_OWORD *)v5 + 2);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      *(_OWORD *)(v4 + 16) = v13;
      *(_OWORD *)(v4 + 32) = v12;
      long long v15 = *((_OWORD *)v5 + 4);
      long long v14 = *((_OWORD *)v5 + 5);
      long long v16 = *((_OWORD *)v5 + 3);
      *(_DWORD *)(v4 + 96) = *((_DWORD *)v5 + 24);
      *(_OWORD *)(v4 + 64) = v15;
      *(_OWORD *)(v4 + 80) = v14;
      *(_OWORD *)(v4 + 48) = v16;
      return a1;
    }
    int v19 = *(unsigned __int8 *)(a2 + 24);
    if (*(unsigned __int8 *)(a1 + 24) == 255)
    {
      if (v19 == 255)
      {
        uint64_t v26 = *v5;
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)uint64_t v4 = v26;
      }
      else
      {
        uint64_t v24 = *v5;
        outlined copy of GraphicsImage.Contents((id)*v5, *(unsigned char *)(a2 + 24));
        *(void *)(a1 + 16) = v24;
        *(unsigned char *)(a1 + 24) = v19;
      }
    }
    else if (v19 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 16);
      char v25 = *((unsigned char *)v5 + 8);
      *(void *)uint64_t v4 = *v5;
      *(unsigned char *)(v4 + 8) = v25;
    }
    else
    {
      id v20 = (id)*v5;
      outlined copy of GraphicsImage.Contents((id)*v5, *(unsigned char *)(a2 + 24));
      uint64_t v21 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v20;
      char v22 = *(unsigned char *)(a1 + 24);
      *(unsigned char *)(a1 + 24) = v19;
      outlined consume of GraphicsImage.Contents(v21, v22);
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
LABEL_18:
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    long long v27 = *(_OWORD *)(a2 + 60);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
    *(_OWORD *)(a1 + 60) = v27;
    long long v28 = *(_OWORD *)(a2 + 80);
    long long v29 = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v28;
    *(_OWORD *)(a1 + 96) = v29;
    *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
    *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
    *(unsigned char *)(a1 + 115) = *(unsigned char *)(a2 + 115);
    return a1;
  }
  if (v6 != 512)
  {
    int v17 = *(unsigned __int8 *)(a2 + 24);
    if (v17 == 255)
    {
      id v23 = (id)*v5;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)uint64_t v4 = v23;
    }
    else
    {
      id v18 = (id)*v5;
      outlined copy of GraphicsImage.Contents((id)*v5, *(unsigned char *)(a2 + 24));
      *(void *)(a1 + 16) = v18;
      *(unsigned char *)(a1 + 24) = v17;
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_18;
  }
  long long v7 = *(_OWORD *)v5;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)uint64_t v4 = v7;
  long long v9 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 64) = v9;
  return a1;
}

uint64_t assignWithCopy for PlatformImageRepresentableContext(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      id v10 = *(id *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a1 = v10;
    }
    else
    {
      id v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
      *(void *)a1 = v8;
      *(unsigned char *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    char v9 = *(unsigned char *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = v9;
  }
  else
  {
    id v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
    int v6 = *(void **)a1;
    *(void *)a1 = v5;
    char v7 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  long long v14 = (_OWORD *)(a1 + 104);
  long long v15 = (_OWORD *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 120);
  unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 120) >> 1 == 0xFFFFFFFFLL)
  {
    if (v17 == 0x1FFFFFFFELL)
    {
      long long v18 = *(_OWORD *)(a2 + 120);
      *long long v14 = *v15;
      *(_OWORD *)(a1 + 120) = v18;
    }
    else
    {
      uint64_t v20 = *(void *)(a2 + 104);
      uint64_t v21 = *(void *)(a2 + 112);
      uint64_t v22 = *(void *)(a2 + 128);
      outlined copy of AccessibilityImageLabel(v20, v21, *(void *)(a2 + 120));
      *(void *)(a1 + 104) = v20;
      *(void *)(a1 + 112) = v21;
      *(void *)(a1 + 120) = v16;
      *(void *)(a1 + 128) = v22;
    }
  }
  else if (v17 == 0x1FFFFFFFELL)
  {
    outlined destroy of AccessibilityImageLabel(a1 + 104);
    long long v19 = *(_OWORD *)(a2 + 120);
    *long long v14 = *v15;
    *(_OWORD *)(a1 + 120) = v19;
  }
  else
  {
    uint64_t v23 = *(void *)(a2 + 104);
    uint64_t v24 = *(void *)(a2 + 112);
    uint64_t v25 = *(void *)(a2 + 128);
    outlined copy of AccessibilityImageLabel(v23, v24, *(void *)(a2 + 120));
    uint64_t v26 = *(void *)(a1 + 104);
    uint64_t v27 = *(void *)(a1 + 112);
    uint64_t v28 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = v23;
    *(void *)(a1 + 112) = v24;
    *(void *)(a1 + 120) = v16;
    *(void *)(a1 + 128) = v25;
    outlined consume of AccessibilityImageLabel(v26, v27, v28);
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  int v29 = *(_DWORD *)(a2 + 156);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = v29;
  uint64_t v30 = *(void **)(a1 + 168);
  uint64_t v31 = *(void **)(a2 + 168);
  *(void *)(a1 + 168) = v31;
  id v32 = v31;

  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_retain();
  swift_release();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_retain();
  swift_release();
  return a1;
}

void type metadata completion function for OpenURLAction.Result.ActionResult()
{
  type metadata accessor for URL?(319);
  if (v0 <= 0x3F) {
    swift_initEnumMetadataSinglePayload();
  }
}

void type metadata accessor for [ResolvableTextSegmentAttribute.Value](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for URL?(uint64_t a1)
{
}

uint64_t type metadata completion function for BindingActionDispatcher()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for yellow()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  static Color.yellow = result;
  return result;
}

uint64_t one-time initialization function for indigo()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 8;
  static Color.indigo = result;
  return result;
}

uint64_t one-time initialization function for gray()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 12;
  static Color.graCGFloat y = result;
  return result;
}

uint64_t type metadata accessor for TextAnimationsProvider()
{
  return self;
}

uint64_t default argument 1 of ResolvedGradient.init(stops:colorSpace:)@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ResolvedGradient.ColorSpace.default;
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WritingModeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WritingModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WritingModeKey>>);
    }
  }
}

float one-time initialization function for keyColorAnyAlpha()
{
  float result = *MEMORY[0x263F638E0];
  __asm { FMOV            V1.2S, #-1.0 }
  static RBColor.keyColorAnyAlphdouble a = _D1;
  dword_26B111960 = LODWORD(result);
  unk_26B111964 = LODWORD(result);
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<ScaleTransition>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<ScaleTransition>, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<ScaleTransition>, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<ScaleTransition>, _ScaleEffect>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<ScaleTransition>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<ScaleTransition>, _ScaleEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<ScaleTransition>, _ScaleEffect>)
  {
    type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(255, &lazy cache variable for type metadata for PlaceholderContentView<ScaleTransition>, (uint64_t)&type metadata for ScaleTransition, (uint64_t (*)(void, uint64_t))type metadata accessor for PlaceholderContentView);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<ScaleTransition>, _ScaleEffect>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCy7SwiftUI17ContentTransitionV6EffectVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void protocol witness for Collection.distance(from:to:) in conformance CountingIndexCollection<A>()
{
  swift_getWitnessTable();

  JUMPOUT(0x24C5225F0);
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextJustificationKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextJustificationKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextJustificationKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextJustificationKey>>);
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in BindingActionDispatcher<A>()
{
  return swift_getWitnessTable();
}

uint64_t key path getter for EnvironmentValues.textJustification : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

NSAttributedString __swiftcall AnyCustomTextAttachment.nsAttributedString(with:)(Swift::OpaquePointer with)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = one-time initialization token for coreTextRunDelegate;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  callbacks.version = 1;
  callbacks.dealloCGFloat c = (CTRunDelegateDeallocateCallback)@objc closure #1 in AnyCustomTextAttachment.runDelegate.getter;
  callbacks.getAscent = (CTRunDelegateGetAscentCallback)@objc closure #2 in AnyCustomTextAttachment.runDelegate.getter;
  callbacks.getDescent = (CTRunDelegateGetDescentCallback)@objc closure #3 in AnyCustomTextAttachment.runDelegate.getter;
  callbacks.getWidth = (CTRunDelegateGetWidthCallback)@objc closure #4 in AnyCustomTextAttachment.runDelegate.getter;
  id v3 = (id)static NSAttributedStringKey.coreTextRunDelegate;
  swift_retain();
  CTRunDelegateRef v4 = CTRunDelegateCreate(&callbacks, v1);
  if (!v4) {
    __break(1u);
  }
  CFIndex v5 = (CFIndex)v4;
  type metadata accessor for CTRunDelegateRef(0);
  callbacks.getDescent = v6;
  callbacks.version = v5;
  outlined init with take of Any(&callbacks, v16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  if (one-time initialization token for customAttachment != -1) {
    swift_once();
  }
  unint64_t v8 = (void *)static NSAttributedStringKey.customAttachment;
  callbacks.getDescent = (CTRunDelegateGetDescentCallback)type metadata accessor for AnyCustomTextAttachment();
  callbacks.version = (CFIndex)v1;
  outlined init with take of Any(&callbacks, v16);
  swift_retain();
  id v9 = v8;
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v9, v10);

  swift_bridgeObjectRelease();
  id v11 = objc_allocWithZone(MEMORY[0x263F086A0]);
  long long v12 = (void *)MEMORY[0x24C522820](12369903, 0xA300000000000000);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v11, sel_initWithString_attributes_, v12, isa);

  return (NSAttributedString)v14;
}

uint64_t type metadata accessor for AnyCustomTextAttachment()
{
  return self;
}

void type metadata accessor for CTRunDelegateRef(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type TintPlacement and conformance TintPlacement()
{
  unint64_t result = lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement;
  if (!lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement;
  if (!lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TintPlacement and conformance TintPlacement);
  }
  return result;
}

ValueMetadata *type metadata accessor for _BlurEffect()
{
  return &type metadata for _BlurEffect;
}

uint64_t type metadata completion function for AccessibilityCustomAttributes.Value()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScaleTransition()
{
  return &type metadata for ScaleTransition;
}

unsigned char *storeEnumTagSinglePayload for Edge(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SymbolVariants.Shape(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unsigned __int128)(a3 * (__int128)a4) >> 64 == (a3 * a4) >> 63)
  {
    MEMORY[0x270FA5388](result);
    return AGTupleWithBuffer();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)a1;
  uint64_t v16 = (void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 8);
  int v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 != 5)
  {
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(unsigned char *)(v24 + 16) = 2;
    RBPathStorageInit();
    int v25 = *(unsigned __int8 *)(v24 + 16);
    swift_retain();
    if (v25 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    v33[6] = v14;
    v33[7] = v15;
    v33[8] = v22;
    v33[9] = v23;
    char v34 = v17;
    outlined copy of Path.Storage(v14, v15, v22, v23, v17);
    Path.append(to:)(v24 + 24);
    outlined consume of Path.Storage(v14, v15, v22, v23, v17);
    uint64_t v18 = v24;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v18 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    uint64_t result = (void *)(v18 + 24);
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    int v20 = *(unsigned __int8 *)(v14 + 16);
    *(unsigned char *)(v18 + 16) = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        swift_retain();
        *(void *)(v18 + 24) = RBPathRetain();
        *(void *)(v18 + 32) = v21;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      uint64_t v26 = *(void **)(v14 + 24);
      if (!v26)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v26;
      id v27 = v26;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(a1 + 24);
  unsigned __int8 v32 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v28, v29, v30, v31, v32);
  *(void *)a1 = v18;
  v16[1] = 0;
  _OWORD v16[2] = 0;
  *uint64_t v16 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v18 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  *(double *)long long v33 = a2;
  *(double *)&v33[1] = a3;
  *(double *)&v33[2] = a4;
  *(double *)&_DWORD v33[3] = a5;
  *(double *)&_DWORD v33[4] = a6;
  *(double *)&v33[5] = a7;
  MEMORY[0x24C526C30](v18 + 24, 3, v33, 0);
  return (void *)swift_release();
}

unint64_t one-time initialization function for namedTypes()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for namedTypes);
  static SystemColorType.namedTypes = result;
  return result;
}

void type metadata accessor for _DictionaryStorage<String, SystemColorType>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, SystemColorType>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, SystemColorType>);
    }
  }
}

uint64_t type metadata completion function for ModifierTransition()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static Text.System.search.getter()
{
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.search;
  outlined copy of Text.Storage(static Text.System.search, unk_268EEBA40, byte_268EEBA48);
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static Text.System.off.getter()
{
  if (one-time initialization token for off != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.off;
  outlined copy of Text.Storage(static Text.System.off, unk_268EEBA10, byte_268EEBA18);
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t type metadata completion function for AnyTransition.SecondVisitor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _MaskAlignmentEffect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for KeyframeTimeline()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for IDPhase()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata completion function for EveryMinuteTimelineSchedule.Entries()
{
  _s10Foundation4DateVSgMaTm_1(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for KeyframeAnimator()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AnimatorState.Fork()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextAlignment>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

id static Material.coreMaterial(bundle:provider:)@<X0>(void *a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X8>)
{
  char v15 = 0;
  uint64_t v5 = a2(&v15);
  uint64_t v7 = v6;
  char v14 = 1;
  uint64_t v8 = a2(&v14);
  uint64_t v10 = v9;
  id v11 = (void *)swift_allocObject();
  v11[2] = v5;
  v11[3] = v7;
  void v11[4] = v8;
  v11[5] = v10;
  v11[6] = a1;
  *(void *)a3 = v11;
  *(unsigned char *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = 0;

  return a1;
}

uint64_t type metadata completion function for _ResolvedKeyframeTrackContent.Linear()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void specialized AnimatableAttribute.updateValue()()
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  char v2 = *(unsigned char *)(Value + 8);
  char v3 = *(unsigned char *)(Value + 9);
  unsigned int v4 = *(void **)(Value + 16);
  uint64_t v5 = *(void *)(Value + 24);
  uint64_t v6 = *(void *)(Value + 32);
  uint64_t v7 = *(void *)(Value + 40);
  uint64_t v8 = *(void *)(Value + 48);
  uint64_t v9 = *(void *)(Value + 56);
  uint64_t v10 = *(void *)(Value + 64);
  uint64_t v11 = *(void *)(Value + 72);
  uint64_t v12 = *(void *)(Value + 80);
  uint64_t v13 = *(void *)(Value + 88);
  uint64_t v14 = *(void *)(Value + 96);
  uint64_t v15 = *(void *)(Value + 104);
  int v16 = *(_DWORD *)(Value + 112);
  uint64_t v33 = *(void *)Value;
  char v34 = v2;
  char v35 = v3;
  uint64_t v36 = v4;
  uint64_t v37 = v5;
  uint64_t v38 = v6;
  uint64_t v39 = v7;
  uint64_t v40 = v8;
  uint64_t v41 = v9;
  uint64_t v42 = v10;
  uint64_t v43 = v11;
  uint64_t v44 = v12;
  uint64_t v45 = v13;
  uint64_t v46 = v14;
  uint64_t v47 = v15;
  int v48 = v16;
  char v49 = v17 & 1;
  uint64_t v18 = v0 + 8;
  uint64_t v19 = *(unsigned int *)(v0 + 4);
  outlined copy of VariableBlurStyle.Mask(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, BYTE1(v16));
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v33, 0, v19, v18);
  if ((v49 & 1) != 0 || !AGGraphGetOutputValue())
  {
    char v31 = v37;
    unsigned __int8 v32 = v36;
    uint64_t v20 = v39;
    uint64_t v30 = v38;
    uint64_t v21 = v40;
    uint64_t v22 = v41;
    uint64_t v23 = v42;
    uint64_t v24 = v43;
    uint64_t v25 = v44;
    uint64_t v26 = v45;
    uint64_t v27 = v46;
    uint64_t v28 = v47;
    __int16 v29 = v48;
    AGGraphSetOutputValue();
    outlined consume of VariableBlurStyle.Mask(v32, v31, v30, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, HIBYTE(v29));
  }
  else
  {
    outlined consume of VariableBlurStyle.Mask(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, BYTE1(v48));
  }
}

{
  uint64_t v0;
  uint64_t Value;
  int v2;
  char v3;
  int v4;
  id v5;
  id v6;
  id v7;
  id v8;
  long long v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  char v2 = *(_DWORD *)(Value + 24);
  uint64_t v8 = *(id *)Value;
  uint64_t v9 = *(_OWORD *)(Value + 8);
  uint64_t v10 = v2;
  uint64_t v11 = v3 & 1;
  unsigned int v4 = *(_DWORD *)(v0 + 4);
  uint64_t v5 = v8;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v8, 0, v4, v0 + 8);
  if ((v11 & 1) != 0 || !AGGraphGetOutputValue())
  {
    uint64_t v7 = v8;
    AGGraphSetOutputValue();
  }
  else
  {
    uint64_t v6 = v8;
  }
}

uint64_t type metadata completion function for ImageRenderer()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t HorizontalAlignment.init(_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  unsigned int v4 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v5 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in AlignmentKey.init(id:axis:)(v5, a1, a2, &v7);
  os_unfair_lock_unlock(v4);
  swift_release();
  swift_release();
  return 2 * v7 + 2;
}

uint64_t one-time initialization function for listRowSeparatorTrailing()
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  unint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA8FD70, (uint64_t)&protocol witness table for HorizontalAlignment.TrailingListSeparator, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static HorizontalAlignment.listRowSeparatorTrailing = 2 * v3 + 2;
  return result;
}

uint64_t one-time initialization function for listRowSeparatorLeading()
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  unint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA8FD50, (uint64_t)&protocol witness table for HorizontalAlignment.LeadingListSeparator, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static HorizontalAlignment.listRowSeparatorLeading = 2 * v3 + 2;
  return result;
}

uint64_t VerticalAlignment.init(_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  unsigned int v4 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v5 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in AlignmentKey.init(id:axis:)(v5, a1, a2, &v7);
  os_unfair_lock_unlock(v4);
  swift_release();
  swift_release();
  return 2 * v7 + 3;
}

uint64_t type metadata completion function for MatchedGeometryEffect2()
{
  uint64_t result = type metadata accessor for _MatchedGeometryEffect();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t Text.tracking(_:)(uint64_t a1, uint64_t a2, char a3, void *a4, double a5)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  }
  unint64_t v9 = a4[2];
  unint64_t v8 = a4[3];
  if (v9 >= v8 >> 1) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, a4);
  }
  a4[2] = v9 + 1;
  uint64_t v10 = (double *)&a4[2 * v9];
  v10[4] = a5;
  *((unsigned char *)v10 + 40) = 0x80;
  return a1;
}

uint64_t destroy for StateOrBinding(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  if (((v7 + 16) & (unint64_t)~v7) + v5 > v6) {
    unint64_t v6 = ((v7 + 16) & ~v7) + v5;
  }
  unsigned int v8 = a1[v6];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_12;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_12:
        int v12 = (v11 | (v9 << (8 * v6))) + 2;
        unsigned int v8 = v11 + 2;
        if (v6 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    uint64_t v15 = *(void *)(*(void *)(a2 + 16) - 8);
    swift_release();
    swift_release();
    uint64_t v13 = *(uint64_t (**)(unint64_t, uint64_t))(v15 + 8);
    return v13((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v3);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(a1, v3);
    return swift_release();
  }
}

void type metadata accessor for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(255, &lazy cache variable for type metadata for [DisplayList.Effect], (uint64_t)&type metadata for DisplayList.Effect, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>);
    }
  }
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v4 = a1[1];
  long long v7 = *a1;
  long long v8 = v4;
  long long v9 = a1[2];
  specialized RendererEffectDisplayList.value.getter(a4, (unint64_t)&v6);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  long long v4;
  uint64_t v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v4 = a1[1];
  long long v7 = *a1;
  long long v8 = v4;
  long long v9 = a1[2];
  specialized RendererEffectDisplayList.value.getter(a4, (unint64_t)&v6);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  void (*v84)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v85)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  id v90;
  unsigned __int16 v91;
  unint64_t v92;
  unsigned int v93;
  __int16 v94;
  long long v95;
  long long v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  __int16 v101;
  char v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  long long v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned __int16 v111;
  unsigned __int8 v112;
  int v113;
  uint64_t v114;

  unint64_t v114 = *MEMORY[0x263EF8340];
  int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v2[8] == *MEMORY[0x263F288F8])
  {
    unint64_t v13 = 0;
    LOBYTE(v93) = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v12;
    *(_WORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  unint64_t v13 = *(unsigned __int16 *)(Value + 8);
  LOBYTE(v93) = *(unsigned char *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    uint64_t v65 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v90, sel_length, (void)v74);
    if (objc_msgSend(v90, sel_attribute_atIndex_effectiveRange_, v65, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v95, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      char v66 = *(unsigned char *)(v86 + 256);
      outlined consume of DisplayList.Item.Value(a2, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a2, v13);
      if (v66)
      {
        __int16 v45 = 8;
LABEL_51:
        LOBYTE(v53) = v93;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v95 = 0u;
      uint64_t v96 = 0u;
      _sypSgWOhTm_9((uint64_t)&v95, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a2, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a2, v13);
    }
    __int16 v45 = 0;
    goto LABEL_51;
  }
  long long v92 = a2;
  uint64_t v82 = a1;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unint64_t v78 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  long long v91 = v13;
  unsigned int v19 = v18;
  unint64_t v76 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v75 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unint64_t v80 = v15;
  unsigned int v23 = v22;
  unint64_t v24 = HIDWORD(v22);
  unint64_t v25 = AGCreateWeakAttribute();
  uint64_t v83 = v14;
  unsigned int v26 = v25;
  unint64_t v27 = HIDWORD(v25);
  unint64_t v28 = AGCreateWeakAttribute();
  unsigned int v29 = v28;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  unint64_t v104 = __PAIR64__(v78, v17);
  unsigned int v105 = __PAIR64__(v76, v19);
  *(void *)&uint64_t v106 = __PAIR64__(v75, v21);
  *((void *)&v106 + 1) = __PAIR64__(v24, v23);
  uint64_t v107 = __PAIR64__(v27, v26);
  char v108 = __PAIR64__(v30, v29);
  LODWORD(v109) = v80;
  _setThreadGeometryProxyData();
  uint64_t v31 = AGGraphGetValue();
  long long v81 = *(_OWORD *)v31;
  long long v77 = *(_OWORD *)(v31 + 32);
  long long v79 = *(_OWORD *)(v31 + 16);
  long long v74 = *(_OWORD *)(v31 + 48);
  uint64_t v32 = *(void *)(v31 + 64);
  uint64_t v33 = *(void *)(v31 + 72);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v81;
  *(_OWORD *)(v34 + 32) = v79;
  *(_OWORD *)(v34 + 48) = v77;
  *(_OWORD *)(v34 + 64) = v74;
  *(void *)(v34 + 80) = v32;
  *(void *)(v34 + 88) = v33;
  *(void *)(v34 + 96) = v82;
  *(unsigned char *)(v34 + 132) = 4;
  _setThreadGeometryProxyData();
  char v35 = (double *)AGGraphGetValue();
  double v36 = *v35;
  double v37 = v35[1];
  uint64_t v38 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v39 = v36 - *v38;
  *(double *)&unint64_t v40 = v37 - v38[1];
  uint64_t v41 = (long long *)AGGraphGetValue();
  int v42 = *v2;
  unint64_t v104 = v39;
  unsigned int v105 = v40;
  uint64_t v106 = *v41;
  uint64_t v107 = v80;
  char v108 = v34;
  unsigned int v109 = 0x4000000900000000;
  unsigned __int8 v110 = v83;
  int v112 = v93;
  unint64_t v111 = v91;
  uint64_t v113 = v42;
  LOBYTE(v95) = *((unsigned char *)v2 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v95);
  unint64_t v5 = v104;
  unint64_t v6 = v105;
  uint64_t v8 = *((void *)&v106 + 1);
  uint64_t v7 = v106;
  unint64_t v4 = v107;
  a2 = v108;
  unint64_t v13 = v109;
  uint64_t v14 = v110;
  unsigned int v3 = v111 | (v112 << 16);
  int v11 = v113;
  unint64_t v43 = v109 >> 62;
  if (v109 >> 62 != 3 || (v3 & 0xFFFFFF) != 0 || v109 != 0xC000000000000000 || v110 | v108)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_2461B9DC0;
    *(void *)(v48 + 32) = v5;
    *(void *)(v48 + 40) = v6;
    *(void *)(v48 + 48) = v7;
    *(void *)(v48 + 56) = v8;
    *(void *)(v48 + 64) = v4;
    *(void *)(v48 + 72) = a2;
    *(void *)(v48 + 80) = v13;
    *(void *)(v48 + 88) = v14;
    *(unsigned char *)(v48 + 98) = BYTE2(v3);
    *(_WORD *)(v48 + 96) = v3;
    *(_DWORD *)(v48 + 100) = v11;
    a1 = v48;
    switch((int)v43)
    {
      case 1:
        long long v93 = HIWORD(v3);
        uint64_t v50 = outlined copy of DisplayList.Item.Value(a2, v13);
        switch(BYTE4(v13))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 2);
            unsigned int v51 = (a2 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a2 + 16, (uint64_t)&v95);
            unint64_t v67 = v97;
            long long v88 = *((void *)&v96 + 1);
            __swift_project_boxed_opaque_existential_1(&v95, *((uint64_t *)&v96 + 1));
            long long v85 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v67 + 56);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            v85(&v94, v88, v67);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 3);
            LOWORD(v51) = v94;
            break;
          case 7:
            LOWORD(v51) = *(_WORD *)(a2 + 24);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 10);
            LOWORD(v51) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 12);
            LOWORD(v51) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            uint64_t v68 = a2;
            char v69 = v13;
            LOBYTE(v70) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 15);
            LOWORD(v51) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 16);
            LOWORD(v51) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 112))(&v95, v50);
            uint64_t v89 = v95;
            int v71 = (unsigned __int16)word_26FA429C8;
            int v72 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 17);
            if ((v72 & ~v71) != 0) {
              __int16 v73 = v72;
            }
            else {
              __int16 v73 = 0;
            }
            LOWORD(v51) = v89 | v71 | v73;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            uint64_t v68 = a2;
            char v69 = v13;
            unint64_t v70 = HIDWORD(v13);
LABEL_43:
            outlined consume of DisplayList.Effect(v68, v69, v70);
            LOWORD(v51) = 0;
            break;
        }
        __int16 v45 = v51 | v3;
        goto LABEL_51;
      case 2:
        uint64_t v52 = *(void *)(a2 + 16);
        if (!v52)
        {
          unsigned int v53 = HIWORD(v3);
          __int16 v45 = 128;
          goto LABEL_26;
        }
        unsigned int v53 = HIWORD(v3);
        if (v52 == 1)
        {
          uint64_t v54 = 0;
          __int16 v45 = 128;
LABEL_24:
          uint64_t v61 = v52 - v54;
          long long v62 = (__int16 *)(a2 + 40 * v54 + 64);
          do
          {
            __int16 v63 = *v62;
            v62 += 20;
            v45 |= v63;
            --v61;
          }
          while (v61);
          goto LABEL_26;
        }
        __int16 v55 = 0;
        uint64_t v54 = v52 & 0x7FFFFFFFFFFFFFFELL;
        int v56 = (__int16 *)(a2 + 104);
        __int16 v57 = 128;
        uint64_t v58 = v52 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v59 = *(v56 - 20);
          __int16 v60 = *v56;
          v56 += 40;
          v57 |= v59;
          v55 |= v60;
          v58 -= 2;
        }
        while (v58);
        __int16 v45 = v55 | v57;
        if (v52 != v54) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(a2, v13);
        outlined copy of DisplayList.Item.Value(a2, v13);
        break;
      case 3:
        unsigned int v53 = HIWORD(v3);
        outlined copy of DisplayList.Item.Value(a2, v13);
        __int16 v45 = 0;
        break;
      default:
        long long v93 = HIWORD(v3);
        switch(a2 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a2 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v95);
            unint64_t v49 = v97;
            long long v87 = *((void *)&v96 + 1);
            __swift_project_boxed_opaque_existential_1(&v95, *((uint64_t *)&v96 + 1));
            long long v84 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v49 + 40);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            v84(&v94, v87, v49);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
            __int16 v45 = v94;
            goto LABEL_51;
          case 8uLL:
            uint64_t v64 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v64 + 216)) {
              goto LABEL_33;
            }
            long long v90 = *(id *)(v64 + 216);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_retain();
            long long v86 = v64;
            swift_retain();
            if ((uint64_t)objc_msgSend(v90, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            __int16 v45 = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a2, v13);
LABEL_36:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            __int16 v45 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            __int16 v45 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v95 = v5;
    *((void *)&v95 + 1) = v6;
    *(void *)&uint64_t v96 = v7;
    *((void *)&v96 + 1) = v8;
    CGRect v97 = v4;
    CGRect v98 = a2;
    CGRect v99 = v13;
    unsigned int v100 = v14;
    unsigned int v102 = v53;
    unint64_t v101 = v3;
    unsigned int v103 = v11;
    DisplayList.Item.properties.getter(&v94);
    outlined consume of DisplayList.Item.Value(a2, v13);
    swift_release();
    char v44 = v94;
    goto LABEL_53;
  }
  swift_release();
  char v44 = 0;
  __int16 v45 = 0;
  a1 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)long long v92 = a1;
  *(_WORD *)(v92 + 8) = v45;
  *(unsigned char *)(v92 + 10) = v44;
  return outlined consume of DisplayList.Item.Value(a2, v13);
}

{
  int *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  unint64_t v37;
  unint64_t v38;
  long long *v39;
  int v40;
  unint64_t v41;
  char v42;
  __int16 v43;
  uint64_t Value;
  uint64_t result;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  __int16 v53;
  __int16 *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 *v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  int v69;
  int v70;
  __int16 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  void (*v78)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v79)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  id v84;
  unsigned __int16 v85;
  unint64_t v86;
  unsigned int v87;
  __int16 v88;
  long long v89;
  long long v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __int16 v95;
  char v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  long long v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned __int16 v105;
  unsigned __int8 v106;
  int v107;
  uint64_t v108;

  char v108 = *MEMORY[0x263EF8340];
  int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v2[8] == *MEMORY[0x263F288F8])
  {
    unint64_t v13 = 0;
    LOBYTE(v87) = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v12;
    *(_WORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  unint64_t v13 = *(unsigned __int16 *)(Value + 8);
  LOBYTE(v87) = *(unsigned char *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    __int16 v63 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v84, sel_length);
    if (objc_msgSend(v84, sel_attribute_atIndex_effectiveRange_, v63, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v89, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      uint64_t v64 = *(unsigned char *)(v80 + 256);
      outlined consume of DisplayList.Item.Value(a2, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a2, v13);
      if (v64)
      {
        unint64_t v43 = 8;
LABEL_51:
        LOBYTE(v51) = v87;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v89 = 0u;
      long long v90 = 0u;
      _sypSgWOhTm_9((uint64_t)&v89, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a2, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a2, v13);
    }
    unint64_t v43 = 0;
    goto LABEL_51;
  }
  long long v86 = a2;
  unint64_t v76 = a1;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  long long v74 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  long long v85 = v13;
  unsigned int v19 = v18;
  __int16 v73 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  int v72 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unint64_t v75 = v15;
  unsigned int v23 = v22;
  unint64_t v24 = HIDWORD(v22);
  unint64_t v25 = AGCreateWeakAttribute();
  long long v77 = v14;
  unsigned int v26 = v25;
  unint64_t v27 = HIDWORD(v25);
  unint64_t v28 = AGCreateWeakAttribute();
  unsigned int v29 = v28;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  CGRect v98 = __PAIR64__(v74, v17);
  CGRect v99 = __PAIR64__(v73, v19);
  *(void *)&unsigned int v100 = __PAIR64__(v72, v21);
  *((void *)&v100 + 1) = __PAIR64__(v24, v23);
  unint64_t v101 = __PAIR64__(v27, v26);
  unsigned int v102 = __PAIR64__(v30, v29);
  LODWORD(v103) = v75;
  _setThreadGeometryProxyData();
  uint64_t v31 = *(void *)AGGraphGetValue();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v31;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_OWORD *)(v32 + 40) = 0u;
  *(_OWORD *)(v32 + 56) = 0u;
  *(_OWORD *)(v32 + 72) = 0u;
  *(_OWORD *)(v32 + 88) = 0u;
  *(_OWORD *)(v32 + 104) = 0u;
  *(_OWORD *)(v32 + 116) = 0u;
  *(unsigned char *)(v32 + 132) = v76;
  _setThreadGeometryProxyData();
  uint64_t v33 = (double *)AGGraphGetValue();
  uint64_t v34 = *v33;
  char v35 = v33[1];
  double v36 = (double *)AGGraphGetValue();
  *(double *)&double v37 = v34 - *v36;
  *(double *)&uint64_t v38 = v35 - v36[1];
  unint64_t v39 = (long long *)AGGraphGetValue();
  unint64_t v40 = *v2;
  CGRect v98 = v37;
  CGRect v99 = v38;
  unsigned int v100 = *v39;
  unint64_t v101 = v75;
  unsigned int v102 = v32;
  unsigned int v103 = 0x4000000900000000;
  unint64_t v104 = v77;
  uint64_t v106 = v87;
  unsigned int v105 = v85;
  uint64_t v107 = v40;
  LOBYTE(v89) = *((unsigned char *)v2 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v89);
  unint64_t v5 = v98;
  unint64_t v6 = v99;
  uint64_t v8 = *((void *)&v100 + 1);
  uint64_t v7 = v100;
  unint64_t v4 = v101;
  a2 = v102;
  unint64_t v13 = v103;
  uint64_t v14 = v104;
  unsigned int v3 = v105 | (v106 << 16);
  int v11 = v107;
  uint64_t v41 = v103 >> 62;
  if (v103 >> 62 != 3 || (v3 & 0xFFFFFF) != 0 || v103 != 0xC000000000000000 || v104 | v102)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_2461B9DC0;
    *(void *)(v46 + 32) = v5;
    *(void *)(v46 + 40) = v6;
    *(void *)(v46 + 48) = v7;
    *(void *)(v46 + 56) = v8;
    *(void *)(v46 + 64) = v4;
    *(void *)(v46 + 72) = a2;
    *(void *)(v46 + 80) = v13;
    *(void *)(v46 + 88) = v14;
    *(unsigned char *)(v46 + 98) = BYTE2(v3);
    *(_WORD *)(v46 + 96) = v3;
    *(_DWORD *)(v46 + 100) = v11;
    a1 = v46;
    switch((int)v41)
    {
      case 1:
        long long v87 = HIWORD(v3);
        uint64_t v48 = outlined copy of DisplayList.Item.Value(a2, v13);
        switch(BYTE4(v13))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 2);
            unint64_t v49 = (a2 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a2 + 16, (uint64_t)&v89);
            uint64_t v65 = v91;
            uint64_t v82 = *((void *)&v90 + 1);
            __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
            long long v79 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v65 + 56);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            v79(&v88, v82, v65);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 3);
            LOWORD(v49) = v88;
            break;
          case 7:
            LOWORD(v49) = *(_WORD *)(a2 + 24);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 10);
            LOWORD(v49) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 12);
            LOWORD(v49) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            char v66 = a2;
            unint64_t v67 = v13;
            LOBYTE(v68) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 15);
            LOWORD(v49) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 16);
            LOWORD(v49) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 112))(&v89, v48);
            uint64_t v83 = v89;
            char v69 = (unsigned __int16)word_26FA429C8;
            unint64_t v70 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v13, 17);
            if ((v70 & ~v69) != 0) {
              int v71 = v70;
            }
            else {
              int v71 = 0;
            }
            LOWORD(v49) = v83 | v69 | v71;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_bridgeObjectRelease();
            char v66 = a2;
            unint64_t v67 = v13;
            uint64_t v68 = HIDWORD(v13);
LABEL_43:
            outlined consume of DisplayList.Effect(v66, v67, v68);
            LOWORD(v49) = 0;
            break;
        }
        unint64_t v43 = v49 | v3;
        goto LABEL_51;
      case 2:
        uint64_t v50 = *(void *)(a2 + 16);
        if (!v50)
        {
          unsigned int v51 = HIWORD(v3);
          unint64_t v43 = 128;
          goto LABEL_26;
        }
        unsigned int v51 = HIWORD(v3);
        if (v50 == 1)
        {
          uint64_t v52 = 0;
          unint64_t v43 = 128;
LABEL_24:
          __int16 v59 = v50 - v52;
          __int16 v60 = (__int16 *)(a2 + 40 * v52 + 64);
          do
          {
            uint64_t v61 = *v60;
            v60 += 20;
            v43 |= v61;
            --v59;
          }
          while (v59);
          goto LABEL_26;
        }
        unsigned int v53 = 0;
        uint64_t v52 = v50 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v54 = (__int16 *)(a2 + 104);
        __int16 v55 = 128;
        int v56 = v50 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v57 = *(v54 - 20);
          uint64_t v58 = *v54;
          v54 += 40;
          v55 |= v57;
          v53 |= v58;
          v56 -= 2;
        }
        while (v56);
        unint64_t v43 = v53 | v55;
        if (v50 != v52) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(a2, v13);
        outlined copy of DisplayList.Item.Value(a2, v13);
        break;
      case 3:
        unsigned int v51 = HIWORD(v3);
        outlined copy of DisplayList.Item.Value(a2, v13);
        unint64_t v43 = 0;
        break;
      default:
        long long v87 = HIWORD(v3);
        switch(a2 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a2 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v89);
            uint64_t v47 = v91;
            long long v81 = *((void *)&v90 + 1);
            __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
            unint64_t v78 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v47 + 40);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            v78(&v88, v81, v47);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
            unint64_t v43 = v88;
            goto LABEL_51;
          case 8uLL:
            long long v62 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v62 + 216)) {
              goto LABEL_33;
            }
            long long v84 = *(id *)(v62 + 216);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            swift_retain();
            unint64_t v80 = v62;
            swift_retain();
            if ((uint64_t)objc_msgSend(v84, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            unint64_t v43 = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a2, v13);
LABEL_36:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            unint64_t v43 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(a2, v13);
            outlined copy of DisplayList.Item.Value(a2, v13);
            unint64_t v43 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v89 = v5;
    *((void *)&v89 + 1) = v6;
    *(void *)&long long v90 = v7;
    *((void *)&v90 + 1) = v8;
    long long v91 = v4;
    long long v92 = a2;
    long long v93 = v13;
    uint64_t v94 = v14;
    uint64_t v96 = v51;
    uint64_t v95 = v3;
    CGRect v97 = v11;
    DisplayList.Item.properties.getter(&v88);
    outlined consume of DisplayList.Item.Value(a2, v13);
    swift_release();
    int v42 = v88;
    goto LABEL_53;
  }
  swift_release();
  int v42 = 0;
  unint64_t v43 = 0;
  a1 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)long long v86 = a1;
  *(_WORD *)(v86 + 8) = v43;
  *(unsigned char *)(v86 + 10) = v42;
  return outlined consume of DisplayList.Item.Value(a2, v13);
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t EveryMinuteTimelineSchedule.Entries.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v63 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v61 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v59 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v58 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for Calendar();
  uint64_t v57 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v65 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v12 - 8);
  int v56 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v46 - v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  __int16 v55 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unint64_t v22 = (char *)&v46 - v21;
  uint64_t v64 = v2;
  outlined init with copy of Date?(v2, (uint64_t)v16);
  unsigned int v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v23((uint64_t)v16, 1, v17) == 1)
  {
    outlined destroy of Date?((uint64_t)v16);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a1, 1, 1, v17);
  }
  else
  {
    uint64_t v25 = v17;
    unsigned int v26 = v7;
    uint64_t v54 = a1;
    uint64_t v52 = v18;
    unint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
    uint64_t v48 = v25;
    unint64_t v49 = v23;
    uint64_t v50 = v27;
    uint64_t v51 = v18 + 32;
    ((void (*)(char *, char *))v27)(v22, v16);
    static Calendar.current.getter();
    if (one-time initialization token for zeroSecondComponents != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for DateComponents();
    uint64_t v46 = __swift_project_value_buffer(v28, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
    uint64_t v29 = *MEMORY[0x263F07780];
    unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
    uint64_t v31 = v58;
    uint64_t v47 = v8;
    v30(v58, v29, v8);
    uint64_t v32 = v59;
    uint64_t v33 = v26;
    (*(void (**)(char *, void, uint64_t))(v59 + 104))(v26, *MEMORY[0x263F07800], v66);
    char v35 = v61;
    uint64_t v34 = v62;
    uint64_t v36 = v63;
    (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, *MEMORY[0x263F077E0], v63);
    uint64_t v37 = (uint64_t)v56;
    unsigned int v53 = v22;
    uint64_t v38 = v65;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v66);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v31, v47);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v60);
    uint64_t v39 = v48;
    if (v49(v37, 1, v48) == 1)
    {
      outlined destroy of Date?(v37);
      uint64_t v40 = v64;
      outlined destroy of Date?(v64);
      uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
      v41(v40, 1, 1, v39);
      int v42 = v50;
    }
    else
    {
      unint64_t v43 = v55;
      int v42 = v50;
      v50((uint64_t)v55, (char *)v37, v39);
      uint64_t v44 = v64;
      outlined destroy of Date?(v64);
      v42(v44, v43, v39);
      uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
      v41(v44, 0, 1, v39);
    }
    uint64_t v45 = v54;
    v42(v54, v53, v39);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v41)(v45, 0, 1, v39);
  }
}

uint64_t type metadata completion function for _ForegroundStyleModifier3()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t LayoutSubview.spacing.getter@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 16);
  if (*(_DWORD *)(v1 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = &static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (long long *)AGGraphGetInputValue();
  }
  uint64_t v5 = *(void *)InputValue;
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 112))(&v8);
    uint64_t result = swift_release();
    *(void *)a1 = v8;
    *(unsigned char *)(a1 + 8) = v3;
  }
  return result;
}

uint64_t type metadata completion function for ImageRendererHost()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t specialized ShapeStyleResolver.updateValue()(uint64_t a1, void (*a2)(long long *))
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  int v3 = *MEMORY[0x263F288F8];
  if (*(_DWORD *)v2 == *MEMORY[0x263F288F8])
  {
    uint64_t v56 = 0;
    char v4 = 0;
    if (*(_DWORD *)(v2 + 4) == *(_DWORD *)v2)
    {
      int v5 = 0;
      char v65 = 0;
      unsigned __int16 v61 = 1;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v6 = 0;
      uint64_t v64 = 0;
      goto LABEL_20;
    }
    uint64_t v10 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v6 = *Value;
    uint64_t v54 = Value[2];
    uint64_t v55 = Value[1];
    uint64_t v53 = Value[3];
    uint64_t v56 = Value[4];
    char v4 = v8 & 1;
    int v9 = *(_DWORD *)(v2 + 4);
    swift_bridgeObjectRetain();
    if (v9 == v3)
    {
      int v5 = 0;
      uint64_t v64 = 0;
      char v65 = 0;
      unsigned __int16 v61 = 1;
      goto LABEL_20;
    }
    uint64_t v10 = v6;
  }
  uint64_t v11 = AGGraphGetValue();
  char v13 = v12;
  id v14 = *(id *)v11;
  __int16 v15 = *(_WORD *)(v11 + 8);
  char v16 = *(unsigned char *)(v11 + 10);
  id v17 = *(id *)v11;
  __int16 v18 = 1;
  if (v14 == (id)1) {
    int v5 = 0;
  }
  else {
    int v5 = v13 & 1;
  }
  if (v14 == (id)1) {
    id v19 = 0;
  }
  else {
    id v19 = v14;
  }
  uint64_t v64 = v19;
  if (v14 != (id)1) {
    __int16 v18 = v15;
  }
  unsigned __int16 v61 = v18;
  if (v14 == (id)1) {
    char v20 = 0;
  }
  else {
    char v20 = v16;
  }
  char v65 = v20;
  uint64_t v6 = v10;
LABEL_20:
  uint64_t v63 = v2;
  uint64_t v21 = v2 + 16;
  char v62 = *(unsigned char *)(v2 + 12);
  uint64_t v22 = *(void *)(v2 + 40);
  int v60 = *(_DWORD *)(v2 + 48);
  uint64_t v23 = *(void *)(v2 + 56);
  unsigned int v58 = *(_DWORD *)(v2 + 8);
  uint64_t v25 = *(void *)AGGraphGetValue();
  if ((v4 & 1) != 0 || v5)
  {
    char v29 = 1;
    char v68 = 1;
    swift_retain();
    swift_retain();
    goto LABEL_28;
  }
  char v26 = v24;
  Outputuint64_t Value = AGGraphGetOutputValue();
  char v68 = OutputValue == 0;
  if (!OutputValue)
  {
    swift_retain();
    swift_retain();
    char v29 = 1;
LABEL_28:
    char v28 = v65;
    if (!v22) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  char v28 = v65;
  if (v26)
  {
    swift_retain();
    uint64_t v30 = swift_retain_n();
    char v29 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v30);
    swift_release();
    char v68 = v29 & 1;
    if (!v22)
    {
LABEL_32:
      if ((v29 & 1) == 0) {
        goto LABEL_33;
      }
      goto LABEL_38;
    }
LABEL_29:
    if ((v29 & 1) == 0) {
      goto LABEL_30;
    }
LABEL_38:
    PropertyList.Tracker.reset()();
    int v59 = 1;
LABEL_39:
    uint64_t v33 = v6;
    if (v28) {
      uint64_t v34 = v61;
    }
    else {
      uint64_t v34 = v61 != 0;
    }
    if (v25) {
      uint64_t v35 = *(void *)(v25 + 64);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *(void *)(v23 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v36 + 16));
    *(void *)(v36 + 24) = v35;
    os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 16));
    swift_release();
    swift_release();
    uint64_t v37 = swift_release();
    char v97 = 0;
    long long v86 = 0uLL;
    uint64_t v87 = v34;
    char v88 = 1;
    uint64_t v89 = 0;
    char v90 = 5;
    *(void *)&long long v91 = v25;
    *((void *)&v91 + 1) = v23;
    long long v92 = 0u;
    long long v93 = 0u;
    uint64_t v94 = 0;
    char v95 = 1;
    char v96 = v62;
    if (v34)
    {
      if (v33)
      {
        uint64_t v69 = v33;
        uint64_t v70 = v55;
        uint64_t v71 = v54;
        uint64_t v72 = v53;
        uint64_t v73 = v56;
        swift_bridgeObjectRetain();
        a2(&v86);
        swift_bridgeObjectRelease();
      }
      else
      {
        specialized ForegroundStyle._apply(to:)((uint64_t)&v86);
      }
      char v38 = v65;
      if ((v65 & 1) == 0)
      {
        unsigned __int8 v66 = 0;
        long long v74 = v91;
        uint64_t v39 = MEMORY[0x263F8EE78];
        if (v90 == 1)
        {
          uint64_t v39 = v89;
          uint64_t v40 = 0;
        }
        else
        {
          uint64_t v40 = v89;
        }
        if (v90 == 1) {
          char v41 = 5;
        }
        else {
          char v41 = v90;
        }
        *(void *)&long long v85 = v39;
        _ShapeStyle_Pack.createOpacities(count:name:environment:)(v61, (char *)&v66, (uint64_t *)&v74);
        outlined consume of _ShapeStyle_Shape.Result(v40, v41);
        uint64_t v89 = v85;
        char v90 = 1;
      }
    }
    else
    {
      char v38 = v65;
      if (v59) {
        specialized AnimatableAttributeHelper.reset()(v37);
      }
    }
    if ((v38 & 2) != 0)
    {
      long long v86 = xmmword_24619B520;
      uint64_t v87 = 1;
      char v88 = 1;
      char v96 = 0;
      BackgroundStyle._apply(to:)((uint64_t)&v86);
    }
    if ((v38 & 4) != 0)
    {
      long long v85 = v91;
      id v45 = v64;
      swift_retain();
      swift_retain();
      ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v85, (uint64_t)v64, (uint64_t)&v74);
      uint64_t v46 = 256;
      if (!BYTE1(v75)) {
        uint64_t v46 = 0;
      }
      uint64_t v47 = v46 | v75;
      uint64_t v48 = 0x10000;
      if (!BYTE2(v75)) {
        uint64_t v48 = 0;
      }
      uint64_t v75 = v47 | v48;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      char v80 = 6;
      int v81 = 1065353216;
      uint64_t v82 = 0;
      char v83 = -1;
      unsigned __int8 v66 = 2;
      if (v90 == 1) {
        char v49 = 5;
      }
      else {
        char v49 = v90;
      }
      if (v90 == 1) {
        uint64_t v50 = v89;
      }
      else {
        uint64_t v50 = MEMORY[0x263F8EE78];
      }
      if (v90 == 1) {
        uint64_t v51 = 0;
      }
      else {
        uint64_t v51 = v89;
      }
      uint64_t v84 = MEMORY[0x263F8EE78];
      *(void *)&long long v85 = v50;
      id v52 = v76;
      _ShapeStyle_Pack.subscript.setter((uint64_t *)&v74, &v66, 0);
      outlined consume of _ShapeStyle_Shape.Result(v51, v49);

      uint64_t v43 = v85;
    }
    else
    {
      char v42 = v90;
      uint64_t v43 = v89;
      if (v90 != 1)
      {
        uint64_t v44 = MEMORY[0x263F8EE78];
        goto LABEL_79;
      }
    }
    swift_bridgeObjectRetain();
    char v42 = 1;
    uint64_t v44 = v43;
LABEL_79:
    uint64_t v67 = v44;
    if (*(unsigned char *)(v63 + 13))
    {
      if (!v59)
      {
LABEL_81:
        swift_release();
        swift_bridgeObjectRelease();

        swift_release();
LABEL_84:
        outlined consume of _ShapeStyle_Shape.Result(v43, v42);
        swift_release();
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v67, 0, v58, v21);
      if ((v68 & 1) == 0) {
        goto LABEL_81;
      }
    }
    *(void *)&long long v74 = v67;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_84;
  }
  swift_retain();
  swift_retain();
  if (v22)
  {
LABEL_30:
    int v59 = 0;
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v31 = (_DWORD *)AGGraphGetValue();
  if (v60 != *v31 >> 1)
  {
    specialized AnimatableAttributeHelper.reset()(v31);
    char v68 = 1;
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();

  swift_release();

  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, unsigned char *, uint64_t, void *))
{
  a3(0);
  uint64_t Value = (unsigned char *)AGGraphGetValue();
  char v10 = Value[1];
  v15[0] = *Value;
  char v30 = 1;
  char v29 = 1;
  char v28 = 1;
  v15[1] = v10;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  char v19 = 1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  char v23 = 1;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  char v27 = 1;
  id v14 = v15;
  v12[2] = v15;
  return a6(a4, v13, a5, v12);
}

uint64_t specialized static GraphicsFilter.updateAsync(layer:oldFilters:newFilters:)(Class *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != *(void *)(a3 + 16)) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v120 = 0;
  uint64_t v106 = v3 - 1;
  while (1)
  {
    uint64_t v5 = *(void *)(a2 + v4 + 40);
    unint64_t v7 = *(void *)(a2 + v4 + 48);
    uint64_t v6 = *(void *)(a2 + v4 + 56);
    uint64_t v8 = *(void *)(a2 + v4 + 80);
    uint64_t v127 = *(void *)(a2 + v4 + 72);
    uint64_t v128 = *(void *)(a2 + v4 + 64);
    uint64_t v9 = *(void *)(a2 + v4 + 88);
    uint64_t v10 = *(void *)(a2 + v4 + 112);
    uint64_t v126 = *(void *)(a2 + v4 + 104);
    uint64_t v123 = *(void *)(a2 + v4 + 120);
    uint64_t v124 = *(void *)(a2 + v4 + 96);
    uint64_t v121 = *(void *)(a2 + v4 + 136);
    uint64_t v122 = *(void *)(a2 + v4 + 128);
    int v11 = *(_DWORD *)(a2 + v4 + 144);
    int v12 = *(unsigned __int8 *)(a2 + v4 + 148);
    double v13 = *(double *)(a3 + v4 + 32);
    uint64_t v14 = *(void *)(a3 + v4 + 40);
    unint64_t v16 = *(void *)(a3 + v4 + 48);
    unint64_t v15 = *(void *)(a3 + v4 + 56);
    unint64_t v17 = *(void *)(a3 + v4 + 64);
    unint64_t v18 = *(void *)(a3 + v4 + 72);
    uint64_t v19 = *(void *)(a3 + v4 + 80);
    uint64_t v20 = *(void *)(a3 + v4 + 88);
    uint64_t v22 = *(void *)(a3 + v4 + 96);
    uint64_t v21 = *(void *)(a3 + v4 + 104);
    uint64_t v23 = *(void *)(a3 + v4 + 112);
    uint64_t v24 = *(void *)(a3 + v4 + 120);
    uint64_t v25 = *(void *)(a3 + v4 + 128);
    uint64_t v26 = *(void *)(a3 + v4 + 136);
    int v27 = *(_DWORD *)(a3 + v4 + 144);
    int v28 = *(unsigned __int8 *)(a3 + v4 + 148);
    uint64_t v29 = *(uint64_t *)(a2 + v4 + 32);
    v140[0] = v29;
    v140[1] = v5;
    uint64_t v30 = v5;
    unint64_t v115 = v7;
    char v116 = v6;
    v140[2] = v7;
    v140[3] = v6;
    v140[4] = v128;
    v140[5] = v127;
    v140[6] = v8;
    uint64_t v111 = v8;
    uint64_t v112 = v9;
    uint64_t v31 = v121;
    uint64_t v32 = v122;
    v140[7] = v9;
    uint64_t v33 = v123;
    v140[8] = v124;
    v140[9] = v126;
    uint64_t v34 = v10;
    v140[10] = v10;
    v140[11] = v123;
    v140[12] = v122;
    v140[13] = v121;
    int v141 = v11;
    char v142 = v12;
    double v125 = v13;
    double v143 = v13;
    uint64_t v144 = v14;
    *(void *)unsigned int v119 = v14;
    unint64_t v35 = v16;
    unint64_t v145 = v16;
    uint64_t v36 = v23;
    unint64_t v109 = v15;
    uint64_t v110 = v17;
    unint64_t v146 = v15;
    unint64_t v147 = v17;
    uint64_t v113 = v18;
    uint64_t v114 = v19;
    unint64_t v148 = v18;
    uint64_t v149 = v19;
    uint64_t v150 = v20;
    uint64_t v117 = v21;
    uint64_t v118 = v22;
    uint64_t v151 = v22;
    uint64_t v152 = v21;
    uint64_t v153 = v23;
    uint64_t v154 = v24;
    uint64_t v155 = v25;
    uint64_t v156 = v26;
    int v157 = v27;
    char v158 = v28;
    switch(v12)
    {
      case 0:
        if (v28) {
          goto LABEL_118;
        }
        if (((v30 & 1) == 0) == (v119[0] & 1)) {
          goto LABEL_119;
        }
        if (v13 == *(double *)&v29) {
          goto LABEL_107;
        }
        uint64_t v37 = a1;
        char v38 = (objc_class *)objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v13);
        v129._uint64_t countAndFlagsBits = 0;
        v129._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
        v129._object = (void *)0xEF287865646E6940;
        uint64_t v39 = v120;
        v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        v41._uint64_t countAndFlagsBits = 11817;
        v41._object = (void *)0xE200000000000000;
        String.append(_:)(v41);
        uint64_t v42 = 0x6461527475706E69;
        unint64_t v43 = 0xEB00000000737569;
        goto LABEL_96;
      case 2:
        if (v28 == 2) {
          goto LABEL_114;
        }
        goto LABEL_118;
      case 3:
        if (v28 != 3) {
          goto LABEL_118;
        }
LABEL_114:
        outlined copy of GraphicsFilter((id)v29, v30, (id)v7, v6, v128, v127, v111, v112, v124, v126, v10, v123, v122, v121, v11, SBYTE2(v11));
        outlined copy of GraphicsFilter(*(id *)&v125, v119[0], (id)v35, v109, v110, v113, v114, v20, v22, v117, v36, v24, v25, v26, v27, SBYTE2(v27));
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v140);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_115;
      case 4:
        if (v28 != 4) {
          goto LABEL_118;
        }
        if ((v10 ^ v23)) {
          goto LABEL_119;
        }
        uint64_t v62 = HIDWORD(*(void *)&v13);
        unint64_t v63 = HIDWORD(v17);
        unint64_t v64 = HIDWORD(v18);
        if (*(float *)&v13 == *(float *)&v29
          && *((float *)&v13 + 1) == *((float *)&v29 + 1)
          && *(float *)v119 == *(float *)&v30
          && *(float *)&v119[1] == *((float *)&v30 + 1)
          && *(float *)&v35 == *(float *)&v7
          && *((float *)&v35 + 1) == *((float *)&v7 + 1)
          && *(float *)&v15 == *(float *)&v6
          && *((float *)&v15 + 1) == *((float *)&v6 + 1)
          && *(float *)&v17 == *(float *)&v128
          && *((float *)&v17 + 1) == *((float *)&v128 + 1)
          && *(float *)&v18 == *(float *)&v127
          && *((float *)&v18 + 1) == *((float *)&v127 + 1)
          && *(float *)&v19 == *(float *)&v111
          && *((float *)&v19 + 1) == *((float *)&v111 + 1)
          && *(float *)&v20 == *(float *)&v112
          && *((float *)&v20 + 1) == *((float *)&v112 + 1)
          && *(float *)&v118 == *(float *)&v124
          && *((float *)&v118 + 1) == *((float *)&v124 + 1)
          && *(float *)&v21 == *(float *)&v126
          && *((float *)&v21 + 1) == *((float *)&v126 + 1))
        {
          goto LABEL_107;
        }
        char v65 = self;
        v129._uint64_t countAndFlagsBits = __PAIR64__(v62, LODWORD(v125));
        v129._object = *(void **)v119;
        unint64_t v130 = v35;
        unint64_t v131 = v109;
        int v132 = v110;
        int v133 = v63;
        int v134 = v113;
        int v135 = v64;
        uint64_t v136 = v114;
        uint64_t v137 = v20;
        uint64_t v138 = v118;
        uint64_t v139 = v117;
        uint64_t result = (uint64_t)objc_msgSend(v65, sel_valueWithCAColorMatrix_, &v129);
        if (!result) {
          goto LABEL_122;
        }
        char v38 = (objc_class *)result;
        v129._uint64_t countAndFlagsBits = 0;
        v129._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
        v129._object = (void *)0xEF287865646E6940;
        uint64_t v39 = v120;
        v66._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v66);
        swift_bridgeObjectRelease();
        v67._uint64_t countAndFlagsBits = 11817;
        v67._object = (void *)0xE200000000000000;
        String.append(_:)(v67);
        unint64_t v58 = 0xD000000000000010;
        unint64_t v57 = 0x800000024621EEE0;
        goto LABEL_77;
      case 5:
        if (v28 != 5) {
          goto LABEL_118;
        }
        float v45 = *((float *)&v13 + 1);
        float v44 = *(float *)&v13;
        float v47 = *(float *)&v119[1];
        float v46 = *(float *)v119;
        if (*(float *)&v13 == *(float *)&v29
          && *((float *)&v13 + 1) == *((float *)&v29 + 1)
          && *(float *)v119 == *(float *)&v30
          && *(float *)&v119[1] == *((float *)&v30 + 1))
        {
          goto LABEL_107;
        }
        uint64_t v37 = a1;
        uint64_t v39 = v120;
        if (one-time initialization token for cache != -1)
        {
          swift_once();
          float v47 = *(float *)&v119[1];
          float v46 = *(float *)v119;
          float v45 = *((float *)&v125 + 1);
          float v44 = *(float *)&v125;
        }
        char v38 = (objc_class *)specialized ObjectCache.subscript.getter(v44, v45, v46, v47);
        v129._uint64_t countAndFlagsBits = 0;
        v129._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
        v129._object = (void *)0xEF287865646E6940;
        v48._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._uint64_t countAndFlagsBits = 11817;
        v49._object = (void *)0xE200000000000000;
        String.append(_:)(v49);
        uint64_t v42 = 0x6C6F437475706E69;
        unint64_t v43 = 0xEA0000000000726FLL;
        goto LABEL_96;
      case 6:
        if (v28 != 6) {
          goto LABEL_118;
        }
        if (v13 == *(double *)&v29) {
          goto LABEL_107;
        }
        uint64_t v37 = a1;
        char v38 = (objc_class *)objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v13);
        v129._uint64_t countAndFlagsBits = 0;
        v129._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
        v129._object = (void *)0xEF287865646E6940;
        uint64_t v39 = v120;
        v83._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v83);
        swift_bridgeObjectRelease();
        v84._uint64_t countAndFlagsBits = 11817;
        v84._object = (void *)0xE200000000000000;
        String.append(_:)(v84);
        unint64_t v43 = 0xEA0000000000656CLL;
        uint64_t v42 = 0x676E417475706E69;
        goto LABEL_96;
      case 7:
        if (v28 != 7) {
          goto LABEL_118;
        }
        goto LABEL_79;
      case 8:
        if (v28 == 8) {
          goto LABEL_79;
        }
        goto LABEL_118;
      case 9:
        if (v28 != 9) {
          goto LABEL_118;
        }
        goto LABEL_79;
      case 10:
        if (v28 != 10) {
          goto LABEL_118;
        }
LABEL_79:
        double v73 = *(double *)&v29;
        outlined copy of GraphicsFilter((id)v29, v30, (id)v7, v6, v128, v127, v111, v112, v124, v126, v10, v123, v122, v121, v11, SBYTE2(v11));
        outlined copy of GraphicsFilter(*(id *)&v125, v119[0], (id)v35, v109, v110, v113, v114, v20, v22, v117, v36, v24, v25, v26, v27, SBYTE2(v27));
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v140);
        float v74 = v73;
        float v75 = v125;
        uint64_t v39 = v120;
        if (v75 != v74)
        {
          id v76 = objc_allocWithZone(NSNumber);
          *(float *)&double v77 = v125;
          id v78 = objc_msgSend(v76, sel_initWithFloat_, v77);
          v129._uint64_t countAndFlagsBits = 0;
          v129._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
          v129._object = (void *)0xEF287865646E6940;
          v79._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v79);
          swift_bridgeObjectRelease();
          v80._uint64_t countAndFlagsBits = 11817;
          v80._object = (void *)0xE200000000000000;
          String.append(_:)(v80);
          v81._uint64_t countAndFlagsBits = 0x6F6D417475706E69;
          v81._object = (void *)0xEB00000000746E75;
          String.append(_:)(v81);
          v159.super.Class isa = *a1;
          *(void *)&v159._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v78, v129, v159, v82);

          swift_bridgeObjectRelease();
        }
        goto LABEL_108;
      case 11:
        if (v28 != 11) {
          goto LABEL_118;
        }
        float v86 = *((float *)&v13 + 1);
        float v85 = *(float *)&v13;
        float v88 = *(float *)&v119[1];
        float v87 = *(float *)v119;
        uint64_t v39 = v120;
        if (*(float *)&v13 != *(float *)&v29
          || *((float *)&v13 + 1) != *((float *)&v29 + 1)
          || *(float *)v119 != *(float *)&v30
          || *(float *)&v119[1] != *((float *)&v30 + 1))
        {
          if (one-time initialization token for cache != -1)
          {
            swift_once();
            float v88 = *(float *)&v119[1];
            float v87 = *(float *)v119;
            float v86 = *((float *)&v125 + 1);
            float v85 = *(float *)&v125;
          }
          uint64_t v89 = (void *)specialized ObjectCache.subscript.getter(v85, v86, v87, v88);
          v129._uint64_t countAndFlagsBits = 0;
          v129._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
          v129._object = (void *)0xEF287865646E6940;
          v90._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v90);
          swift_bridgeObjectRelease();
          v91._uint64_t countAndFlagsBits = 11817;
          v91._object = (void *)0xE200000000000000;
          String.append(_:)(v91);
          v92._uint64_t countAndFlagsBits = 0x6C6F437475706E69;
          v92._object = (void *)0xEA0000000000726FLL;
          String.append(_:)(v92);
          v160.super.Class isa = *a1;
          *(void *)&v160._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v89, v129, v160, v93);

          swift_bridgeObjectRelease();
        }
        if (*(float *)&v35 != *(float *)&v115)
        {
          id v94 = objc_allocWithZone(NSNumber);
          LODWORD(v95) = v35;
          id v96 = objc_msgSend(v94, sel_initWithFloat_, v95);
          v129._uint64_t countAndFlagsBits = 0;
          v129._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
          v129._object = (void *)0xEF287865646E6940;
          v97._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v97);
          swift_bridgeObjectRelease();
          v98._uint64_t countAndFlagsBits = 11817;
          v98._object = (void *)0xE200000000000000;
          String.append(_:)(v98);
          v99._uint64_t countAndFlagsBits = 0x6F6D417475706E69;
          v99._object = (void *)0xEB00000000746E75;
          String.append(_:)(v99);
          v161.super.Class isa = *a1;
          *(void *)&v161._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v96, v129, v161, v100);

          swift_bridgeObjectRelease();
        }
        if (*((float *)&v35 + 1) == *((float *)&v115 + 1)) {
          goto LABEL_98;
        }
        uint64_t v37 = a1;
        id v101 = objc_allocWithZone(NSNumber);
        LODWORD(v102) = HIDWORD(v35);
        char v38 = (objc_class *)objc_msgSend(v101, sel_initWithFloat_, v102);
        v129._uint64_t countAndFlagsBits = 0;
        v129._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
        v129._object = (void *)0xEF287865646E6940;
        v103._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v103);
        swift_bridgeObjectRelease();
        v104._uint64_t countAndFlagsBits = 11817;
        v104._object = (void *)0xE200000000000000;
        String.append(_:)(v104);
        uint64_t v42 = 0x6169427475706E69;
        unint64_t v43 = 0xE900000000000073;
LABEL_96:
        String.append(_:)(*(Swift::String *)&v42);
        uint64_t countAndFlagsBits = v129._countAndFlagsBits;
        v72.super.Class isa = *v37;
        v70.Class isa = v38;
        object = v129._object;
        *(void *)&v72._attr.refcount = 1;
        goto LABEL_97;
      case 12:
        if (v28 != 12) {
          goto LABEL_118;
        }
        unint64_t v50 = HIDWORD(v15);
        unint64_t v51 = HIDWORD(v17);
        unint64_t v52 = HIDWORD(v18);
        if (*(float *)&v13 == *(float *)&v29
          && *((float *)&v13 + 1) == *((float *)&v29 + 1)
          && *(float *)v119 == *(float *)&v30
          && *(float *)&v119[1] == *((float *)&v30 + 1)
          && *(float *)&v35 == *(float *)&v7
          && *((float *)&v35 + 1) == *((float *)&v7 + 1)
          && *(float *)&v15 == *(float *)&v6
          && *((float *)&v15 + 1) == *((float *)&v6 + 1)
          && *(float *)&v17 == *(float *)&v128
          && *((float *)&v17 + 1) == *((float *)&v128 + 1)
          && *(float *)&v18 == *(float *)&v127
          && *((float *)&v18 + 1) == *((float *)&v127 + 1)
          && *(float *)&v19 == *(float *)&v111
          && *((float *)&v19 + 1) == *((float *)&v111 + 1)
          && *(float *)&v20 == *(float *)&v112
          && *((float *)&v20 + 1) == *((float *)&v112 + 1)
          && *(float *)&v118 == *(float *)&v124
          && *((float *)&v118 + 1) == *((float *)&v124 + 1)
          && *(float *)&v21 == *(float *)&v126
          && *((float *)&v21 + 1) == *((float *)&v126 + 1))
        {
          goto LABEL_107;
        }
        uint64_t v53 = self;
        *(double *)&v129._uint64_t countAndFlagsBits = v125;
        v129._object = *(void **)v119;
        unint64_t v130 = v35;
        unint64_t v131 = __PAIR64__(v50, v109);
        int v132 = v110;
        int v133 = v51;
        int v134 = v113;
        int v135 = v52;
        uint64_t v136 = v114;
        uint64_t v137 = v20;
        uint64_t v138 = v118;
        uint64_t v139 = v117;
        uint64_t result = (uint64_t)objc_msgSend(v53, sel_valueWithCAColorMatrix_, &v129);
        if (result)
        {
          char v38 = (objc_class *)result;
          v129._uint64_t countAndFlagsBits = 0;
          v129._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v129._uint64_t countAndFlagsBits = 0x2E737265746C6966;
          v129._object = (void *)0xEF287865646E6940;
          uint64_t v39 = v120;
          v55._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          v56._uint64_t countAndFlagsBits = 11817;
          v56._object = (void *)0xE200000000000000;
          String.append(_:)(v56);
          unint64_t v57 = 0x800000024621EEE0;
          unint64_t v58 = 0xD000000000000010;
LABEL_77:
          String.append(_:)(*(Swift::String *)&v58);
          uint64_t countAndFlagsBits = v129._countAndFlagsBits;
          v72.super.Class isa = *a1;
          v70.Class isa = v38;
          object = v129._object;
          *(void *)&v72._attr.refcount = 1;
LABEL_97:
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)(v70, *(Swift::String *)&countAndFlagsBits, v72, v68);

          swift_bridgeObjectRelease();
LABEL_98:
          outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v140);
          goto LABEL_108;
        }
        __break(1u);
LABEL_122:
        __break(1u);
        return result;
      case 16:
        unint64_t v59 = v7 | v30 | v6 | v128 | v127 | v111 | v112 | v124 | v126 | v10 | v123 | v122 | v121;
        if (v11 || v29 != 1 || v59)
        {
          if (v11 || v29 != 2 || v59 || v28 != 16) {
            goto LABEL_118;
          }
          int v11 = 0;
          if (v27 || *(void *)&v13 != 2)
          {
            uint64_t v29 = 2;
            goto LABEL_118;
          }
          unint64_t v60 = v35 | *(void *)v119 | v15 | v17 | v18 | v19 | v20 | v22 | v21 | v23 | v24;
          uint64_t v61 = v25 | v26;
          uint64_t v29 = 2;
        }
        else
        {
          if (v28 != 16)
          {
LABEL_115:
            int v11 = 0;
LABEL_116:
            uint64_t v29 = 1;
LABEL_118:
            outlined copy of GraphicsFilter((id)v29, v30, (id)v7, v116, v128, v127, v111, v112, v124, v126, v34, v33, v32, v31, v11, SBYTE2(v11));
            outlined copy of GraphicsFilter(*(id *)&v125, v119[0], (id)v35, v109, v110, v113, v114, v20, v22, v117, v36, v24, v25, v26, v27, SBYTE2(v27));
LABEL_119:
            outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v140);
            return 0;
          }
          int v11 = 0;
          if (v27 || *(void *)&v13 != 1) {
            goto LABEL_116;
          }
          unint64_t v60 = v35 | *(void *)v119 | v15 | v17 | v18 | v19 | v20 | v22 | v21 | v23 | v24;
          uint64_t v61 = v25 | v26;
          uint64_t v29 = 1;
        }
        if (v60 | v61) {
          goto LABEL_118;
        }
LABEL_107:
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v140);
        uint64_t v39 = v120;
LABEL_108:
        if (v106 == v39) {
          return 1;
        }
        v4 += 120;
        uint64_t v120 = v39 + 1;
        break;
      default:
        goto LABEL_118;
    }
  }
}

uint64_t outlined release of (GraphicsFilter, GraphicsFilter)(uint64_t a1)
{
  uint64_t v14 = *(void *)(a1 + 128);
  unint64_t v15 = *(void **)(a1 + 120);
  uint64_t v2 = *(void *)(a1 + 144);
  id v13 = *(id *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  long long v11 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)int v12 = *(_OWORD *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 216);
  uint64_t v7 = *(void *)(a1 + 224);
  int v9 = *(_DWORD *)(a1 + 232);
  outlined consume of GraphicsFilter(*(void **)a1, *(void *)(a1 + 8), *(id *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(_DWORD *)(a1 + 112), BYTE2(*(_DWORD *)(a1 + 112)));
  outlined consume of GraphicsFilter(v15, v14, v13, v2, v3, v4, v5, v6, v12[0], v12[1], v11, *((uint64_t *)&v11 + 1), v8, v7, v9, SBYTE2(v9));
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VariableBlurEffect@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<VariableBlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t specialized BodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  char v16 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a5, a6, v16, a3, a4, (uint64_t)&type metadata for VariableBlurEffect, (double *)&v27);
    uint64_t v17 = v27;
    uint64_t v18 = v28;
    uint64_t v19 = HIDWORD(v28);
    if (HIDWORD(v28))
    {
      int v21 = *(_DWORD *)(a4 + 24);
      LODWORD(v27) = a8;
      uint64_t v28 = a9;
      char v29 = a10 & 1;
      int v30 = a3;
      int v31 = v21;
      uint64_t v32 = v17;
      int v33 = v18;
      int v34 = v19;
      int v35 = 0;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>();
      lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>);
      swift_retain();
      goto LABEL_6;
    }
    uint64_t v28 = v28;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v27) = a8;
    uint64_t v28 = a9;
    char v29 = a10 & 1;
    int v30 = a3;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>);
    swift_retain();
LABEL_9:
    int v22 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t result = swift_release();
    uint64_t v17 = 0;
    uint64_t v25 = 0;
    char v24 = 1;
    goto LABEL_10;
  }
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a5, a6, v16, a3, a4, (uint64_t)&type metadata for VariableBlurEffect, (double *)&v27);
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  uint64_t v19 = HIDWORD(v28);
  if (!HIDWORD(v28))
  {
    uint64_t v28 = v28;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v27) = a8;
    uint64_t v28 = a9;
    char v29 = a10 & 1;
    int v30 = a3;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>);
    swift_retain();
    goto LABEL_9;
  }
  int v20 = *(_DWORD *)(a4 + 24);
  LODWORD(v27) = a8;
  uint64_t v28 = a9;
  char v29 = a10 & 1;
  int v30 = a3;
  int v31 = v20;
  uint64_t v32 = v17;
  int v33 = v18;
  int v34 = v19;
  int v35 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>();
  lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>);
  swift_retain();
LABEL_6:
  int v22 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t result = swift_release();
  char v24 = 0;
  uint64_t v25 = v18 | (v19 << 32);
LABEL_10:
  *a1 = v22;
  *(void *)a2 = v17;
  *(void *)(a2 + 8) = v25;
  *(unsigned char *)(a2 + 16) = v24;
  return result;
}

void type metadata accessor for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<VariableBlurEffect>, (uint64_t)&type metadata for VariableBlurEffect, (uint64_t)&protocol witness table for VariableBlurEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<VariableBlurEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentalBodyAccessor<VariableBlurEffect> and conformance EnvironmentalBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<VariableBlurEffect> and conformance EnvironmentalBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<VariableBlurEffect> and conformance EnvironmentalBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<VariableBlurEffect>, (uint64_t)&type metadata for VariableBlurEffect, (uint64_t)&protocol witness table for VariableBlurEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<VariableBlurEffect> and conformance EnvironmentalBodyAccessor<A>);
  }
  return result;
}

double specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  uint64_t v20 = 0;
  double v21 = 0.0;
  if (a3)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW65VXEfU_AA13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLV_TG5AF01_yZ0VyAF13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLVGAF01_Y6InputsVTf1cn_nTm(a2, a4, a5, (uint64_t)v19, a6);
      project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a1, &v20, v16, 0);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      id v13 = (uint64_t *)(a1 + 48);
      do
      {
        uint64_t v14 = *(v13 - 1);
        uint64_t v15 = *v13;
        v13 += 4;
        int v18 = a4;
        (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v14 + 8))(&v20, &v18, v15, a5, a6);
        --v12;
      }
      while (v12);
    }
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a7 = v20;
  double result = v21;
  a7[1] = v21;
  return result;
}

_OWORD *one-time initialization function for base()
{
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 != 1)
  {
    if (dword_26B0F4500 < v0) {
      goto LABEL_7;
    }
LABEL_9:
    type metadata accessor for InternalAnimationBox<BezierAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>, (void (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation);
    double result = (_OWORD *)swift_allocObject();
    result[1] = xmmword_2461C0DD0;
    uint64_t v2 = result + 2;
    goto LABEL_10;
  }
  if (dyld_program_minos_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  type metadata accessor for InternalAnimationBox<BezierAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>, (void (*)(void))lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation);
  double result = (_OWORD *)swift_allocObject();
  result[1] = xmmword_2461C0DA0;
  result[2] = xmmword_2461C0DB0;
  result[3] = xmmword_2461C0DC0;
  uint64_t v2 = result + 4;
LABEL_10:
  *uint64_t v2 = 0;
  static DefaultAnimation.base = (uint64_t)result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance EveryMinuteTimelineSchedule@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  double v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))(v7, a1, v5);
  return EveryMinuteTimelineSchedule.Entries.init(startDate:)((uint64_t)v7, a2);
}

uint64_t EveryMinuteTimelineSchedule.Entries.init(startDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::String v55 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v51 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  unint64_t v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v50 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  Swift::String v49 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v9 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  long long v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v53 = (char *)&v45 - v16;
  uint64_t v17 = type metadata accessor for Calendar();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x270FA5388](v17);
  double v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v5;
  uint64_t v61 = a2;
  uint64_t v23 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
  uint64_t v22 = v5 + 56;
  unint64_t v58 = v23;
  uint64_t v59 = v4;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))v23)(a2, 1, 1, v4, v19);
  static Calendar.current.getter();
  if (one-time initialization token for zeroSecondComponents != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for DateComponents();
  __swift_project_value_buffer(v24, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
  char v25 = Calendar.date(_:matchesComponents:)();
  uint64_t v62 = a1;
  char v26 = v25;
  char v29 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v28 = v18 + 8;
  uint64_t v27 = v29;
  v29(v21, v17);
  if (v26)
  {
    uint64_t v30 = v61;
    outlined destroy of Date?(v61);
    uint64_t v31 = v59;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v30, v62, v59);
    return v58(v30, 0, 1, v31);
  }
  else
  {
    uint64_t v48 = v22;
    static Calendar.current.getter();
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F07780], v56);
    uint64_t v33 = *MEMORY[0x263F077F0];
    uint64_t v34 = v50;
    int v35 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 104);
    uint64_t v45 = v17;
    float v46 = v27;
    uint64_t v47 = v28;
    uint64_t v36 = v49;
    v35(v49, v33, v57);
    uint64_t v37 = v51;
    char v38 = v52;
    uint64_t v39 = v54;
    (*(void (**)(char *, void, uint64_t))(v51 + 104))(v52, *MEMORY[0x263F07800], v54);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v57);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v56);
    v46(v21, v45);
    uint64_t v40 = v59;
    uint64_t v41 = v60;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
    unint64_t v43 = v55;
    v42(v55, v62, v59);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, v40) == 1)
    {
      uint64_t v44 = (uint64_t)v53;
      v42(v53, (uint64_t)v43, v40);
      outlined destroy of Date?((uint64_t)v14);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
      uint64_t v44 = (uint64_t)v53;
      v42(v53, (uint64_t)v14, v40);
    }
    v58(v44, 0, 1, v40);
    return outlined assign with take of Date?(v44, v61);
  }
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  _s10Foundation4DateVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double static IDView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  void (*v37)(uint64_t *__return_ptr, int *, uint64_t *);
  double *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;

  uint64_t v53 = a5;
  uint64_t v57 = a3;
  uint64_t v54 = a7;
  Swift::String v92 = *MEMORY[0x263EF8340];
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = type metadata accessor for IDPhase();
  uint64_t v39 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (_DWORD *)((char *)&v39 - v15);
  int v17 = *a1;
  uint64_t v18 = *(void *)a2;
  unint64_t v43 = *(_DWORD *)(a2 + 8);
  uint64_t v56 = *(void *)(a2 + 16);
  uint64_t v41 = *(_DWORD *)(a2 + 24);
  uint64_t v44 = *(_DWORD *)(a2 + 28);
  uint64_t v42 = *(_DWORD *)(a2 + 32);
  uint64_t v45 = *(_DWORD *)(a2 + 36);
  uint64_t v19 = *(void *)(a2 + 40);
  Swift::String v55 = *(void *)(a2 + 48);
  float v46 = *(_DWORD *)(a2 + 56);
  uint64_t v47 = *(_DWORD *)(a2 + 60);
  uint64_t v48 = *(_DWORD *)(a2 + 64);
  Swift::String v49 = *(_DWORD *)(a2 + 68);
  uint64_t v50 = *(_DWORD *)(a2 + 72);
  uint64_t v51 = *(_DWORD *)(a2 + 76);
  unint64_t v52 = *(_DWORD *)(a2 + 80);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v20 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v20) {
      goto LABEL_7;
    }
LABEL_10:
    double v77 = v57;
    id v78 = a4;
    Swift::String v79 = v53;
    Swift::String v80 = a6;
    uint64_t v24 = type metadata accessor for IDView();
    LODWORD(v61) = v17;
    double v77 = v18;
    Swift::String v79 = v56;
    LODWORD(v78) = v43;
    Swift::String v80 = __PAIR64__(v44, v41);
    Swift::String v83 = v19;
    Swift::String v84 = v55;
    Swift::String v81 = v42;
    Swift::Bool v82 = v45;
    float v85 = v46;
    float v86 = v47;
    float v87 = v48;
    float v88 = v49;
    uint64_t v89 = v50;
    Swift::String v90 = v51;
    Swift::String v91 = v52;
    static View.makeImplicitRoot(view:inputs:)((int *)&v61, &v77, v24, (uint64_t)&protocol witness table for IDView<A, B>, (uint64_t)v54);
    return result;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v21 = *(void *)(a4 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  swift_retain();
  swift_retain();
  uint64_t v40 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = v53;
  if (v22) {
    closure #1 in static IDView._makeView(view:inputs:)(1, v57, a4, v53, a6);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v13, 1, 1, a4);
  uint64_t v27 = IDPhase.init(id:phase:lastID:delta:)(OffsetAttribute2, v41, (uint64_t)v13, 0, v16);
  MEMORY[0x270FA5388](v27);
  *(&v39 - 2) = v14;
  *(&v39 - 1) = swift_getWitnessTable();
  type metadata accessor for Attribute<_GraphInputs.Phase>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)(&v39 - 4), v14, MEMORY[0x263F8E628], v28, MEMORY[0x263F8E658], v29);
  uint64_t v30 = (*(uint64_t (**)(_DWORD *, uint64_t))(v39 + 8))(v16, v14);
  unsigned int v31 = v77;
  LODWORD(v53) = v42 | 0x40;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = v57;
  *(&v39 - 4) = v57;
  *(&v39 - 3) = a4;
  *(&v39 - 2) = v23;
  *(&v39 - 1) = a6;
  LODWORD(v61) = v17;
  double v77 = v32;
  id v78 = a4;
  Swift::String v79 = v23;
  Swift::String v80 = a6;
  type metadata accessor for IDView();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static IDView._makeView(view:inputs:), v32, &v77);
  int v33 = v77;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  uint64_t v35 = v56;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v36 = v55;
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v77 = v18;
  Swift::String v79 = v35;
  LODWORD(v78) = v43;
  Swift::String v80 = __PAIR64__(v44, v31);
  Swift::Bool v82 = v45;
  Swift::String v83 = v40;
  Swift::String v84 = v36;
  float v85 = v46;
  float v86 = v47;
  float v87 = v48;
  float v88 = v49;
  uint64_t v89 = v50;
  Swift::String v90 = v51;
  Swift::String v91 = v52;
  unint64_t v58 = v33;
  uint64_t v61 = v18;
  uint64_t v62 = v43;
  unint64_t v63 = v35;
  unint64_t v64 = v31;
  char v65 = v44;
  Swift::String v66 = 0;
  Swift::String v67 = v45;
  Swift::Bool v68 = v40;
  uint64_t v69 = v36;
  NSObject v70 = v46;
  uint64_t v71 = v47;
  CALayer v72 = v48;
  double v73 = v49;
  float v74 = v50;
  float v75 = v51;
  id v76 = v52;
  uint64_t v37 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(v23 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37(&v59, &v58, &v61);
  Swift::String v81 = v53;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v59, (uint64_t)&v77);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  char v38 = v54;
  *(void *)uint64_t v54 = v59;
  double result = v60;
  v38[1] = v60;
  return result;
}

uint64_t type metadata accessor for IDPhase()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a1;
  v22[2] = a4;
  v7.n128_f64[0] = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v4;
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = v11 & ~v10;
  v22[0] = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v10;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    uint64_t v14 = v6 + 16;
    uint64_t v15 = v16;
    uint64_t v17 = *(void *)(v14 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v14 - 8);
    do
    {
      uint64_t v19 = v14;
      v15(v9, *(void *)(v23 + 48) + v17 * v12, a3, v7);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v18)(v9, a3);
      if (v20) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      uint64_t v14 = v19;
    }
    while (((*(void *)(v22[0] + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

uint64_t one-time initialization function for kitKern()
{
  uint64_t result = MEMORY[0x24C522820](0x6E72654B534ELL, 0xE600000000000000);
  static NSAttributedStringKey.kitKern = result;
  return result;
}

uint64_t one-time initialization function for kitTracking()
{
  uint64_t result = MEMORY[0x24C522820](0x696B636172545443, 0xEA0000000000676ELL);
  static NSAttributedStringKey.kitTracking = result;
  return result;
}

ValueMetadata *type metadata accessor for AnyShape()
{
  return &type metadata for AnyShape;
}

double static Shape._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 80);
  int v18 = *a1;
  uint64_t v10 = v4;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a2 + 40);
  long long v13 = *(_OWORD *)(a2 + 24);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 72);
  int v17 = v7;
  return static View.makeView(view:inputs:)(&v18, &v10, a3, a4);
}

ValueMetadata *type metadata accessor for Text.WritingMode.Storage()
{
  return &type metadata for Text.WritingMode.Storage;
}

double one-time initialization function for expanded()
{
  double result = *MEMORY[0x263F03C18];
  static Font.Width.expandeCGFloat d = *MEMORY[0x263F03C18];
  return result;
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, RadialGradient>>(uint64_t a1)
{
}

void partial apply for closure #1 in installObservationSlow<A>(accessList:attribute:)()
{
}

{
  uint64_t vars8;

  type metadata accessor for ObservationTracking();

  closure #1 in installObservationSlow<A>(accessList:attribute:)();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for EmptyAnimatableData(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData();
  *(void *)(a1 + 8) = result;
  return result;
}

double specialized closure #1 in UnaryLayoutEngine.childPlacement(at:)@<D0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>)
{
  uint64_t v40 = a3;
  int v41 = a4;
  uint64_t v29 = a5;
  int v30 = a6;
  double v31 = a8;
  double v32 = a9;
  double v33 = a10;
  double v34 = a11;
  char v35 = 0;
  PlacementContext.proposedSize.getter((uint64_t)&v36);
  uint64_t v25 = v36;
  char v26 = v37;
  uint64_t v27 = v38;
  char v28 = v39;
  _AspectRatioLayout.spaceOffered(to:in:)(&v40, (uint64_t)&v25, a1, a2 & 0x101, (uint64_t)&v29);
  char v16 = v30;
  double v17 = v31;
  char v18 = LOBYTE(v32);
  double result = a9 * 0.5;
  *(void *)a7 = v29;
  *(unsigned char *)(a7 + 8) = v16;
  *(double *)(a7 + 16) = v17;
  *(unsigned char *)(a7 + 24) = v18;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a7 + 32) = _Q2;
  *(double *)(a7 + 48) = a8 * 0.5;
  *(double *)(a7 + 56) = a9 * 0.5;
  return result;
}

ValueMetadata *type metadata accessor for TextJustification.Storage()
{
  return &type metadata for TextJustification.Storage;
}

ValueMetadata *type metadata accessor for TextJustification.Full()
{
  return &type metadata for TextJustification.Full;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint()
{
  unint64_t result = lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint;
  if (!lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint;
  if (!lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint;
  if (!lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for RadialGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for LinearGradient._Paint(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint);
}

uint64_t instantiation function for generic protocol witness table for _TrimmedShape<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata completion function for _TrimmedShape()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ForEachState.eraseItem(_:)(_DWORD *a1)
{
  AGSubgraphApply();
  AGSubgraphRemoveChild();
  *((unsigned char *)a1 + *(void *)(*(void *)a1 + 240)) = 1;
  *((unsigned char *)a1 + *(void *)(*(void *)a1 + 232)) = 0;
  uint64_t result = swift_beginAccess();
  int v3 = a1[6] - 1;
  a1[6] = v3;
  if (!v3)
  {
    ForEachState.Item.invalidate()(result);
    uint64_t result = AGSubgraphIsValid();
    if (result)
    {
      MEMORY[0x270FA5388](result);
      AGSubgraphApply();
      return AGSubgraphInvalidate();
    }
  }
  return result;
}

id *ForEachState.Item.deinit()
{
  unint64_t v1 = *v0;

  (*(void (**)(char *))(*(void *)(v1[15] - 8) + 8))((char *)v0 + *((void *)*v0 + 20));
  outlined destroy of _ViewListOutputs.Views((uint64_t)v0 + *((void *)*v0 + 22));
  swift_weakDestroy();
  uint64_t v2 = (char *)v0 + *((void *)*v0 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  return v0;
}

uint64_t ForEachState.Item.__deallocating_deinit(uint64_t (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t ForEachState.Item.__deallocating_deinit()
{
  return ForEachState.Item.__deallocating_deinit((uint64_t (*)(void))ForEachState.Item.deinit);
}

uint64_t ForEachState.Item.invalidate()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 120);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  int v7 = (char *)&v22 - v6;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = (uint64_t *)(result + *(void *)(*(void *)result + 192));
    swift_beginAccess();
    uint64_t v10 = *v9;
    uint64_t v11 = (uint64_t)v2 + *(void *)(*v2 + 160);
    unint64_t v12 = *v9 & 0xC000000000000001;
    uint64_t v22 = v7;
    unint64_t v23 = v12;
    if (v12)
    {
      swift_bridgeObjectRetain();
      _bridgeAnythingToObjectiveC<A>(_:)();
      uint64_t v13 = __CocoaDictionary.index(forKey:)();
      uint64_t v15 = v14;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if (v13)
      {
        uint64_t v16 = v15;
LABEL_8:
        char v20 = v23 != 0;
        swift_beginAccess();
        type metadata accessor for Dictionary();
        uint64_t v21 = v22;
        Dictionary.remove(at:)();
        swift_endAccess();
        outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v13, v16, v20);
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v21, v4);
      }
    }
    else if (*(void *)(v10 + 16))
    {
      uint64_t v17 = *(void *)(v3 + 144);
      swift_bridgeObjectRetain();
      unint64_t v18 = __RawDictionaryStorage.find<A>(_:)(v11, v4, v17);
      if (v19)
      {
        uint64_t v13 = v18;
        uint64_t v16 = *(unsigned int *)(v10 + 36);
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    *uint64_t v9 = Dictionary.filter(_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance AnimationKey(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  BOOL result = (*a1 | *a2) == 0;
  if (v2) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 104);
    uint64_t v6 = swift_retain();
    char v7 = v5(v6);
    swift_release();
    return v7 & 1;
  }
  return result;
}

uint64_t type metadata accessor for AnyShapeBox()
{
  return self;
}

uint64_t AccessibilitySharedSupportLibraryCore()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = AccessibilitySharedSupportLibraryCore_frameworkLibrary;
  uint64_t v5 = AccessibilitySharedSupportLibraryCore_frameworkLibrary;
  if (!AccessibilitySharedSupportLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_2651D42F8;
    long long v7 = *(_OWORD *)&off_2651D4308;
    v3[3] = _sl_dlopen();
    AccessibilitySharedSupportLibraryCore_frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_2459BBBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AccessibilitySharedSupportLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  AccessibilitySharedSupportLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AccessibilitySharedSupportLibrary()
{
  uint64_t v0 = AccessibilitySharedSupportLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr;
  uint64_t v6 = getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr;
  if (!getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr)
  {
    unint64_t v1 = (void *)AccessibilitySharedSupportLibrary();
    v4[3] = (uint64_t)dlsym(v1, "AXSSAccessibilityDescriptionForSymbolName");
    getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_2459BBD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AccessibilitySharedSupportLibrary();
  uint64_t result = dlsym(v2, "AXSSAccessibilityDescriptionForSymbolName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id soft_AXSSAccessibilityDescriptionForSymbolName(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  AXSSAccessibilityDescriptionForSymbolNameSymbolLoCGFloat c = (void (*)(id, id))getAXSSAccessibilityDescriptionForSymbolNameSymbolLoc();
  if (!AXSSAccessibilityDescriptionForSymbolNameSymbolLoc) {
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  }
  uint64_t v6 = AXSSAccessibilityDescriptionForSymbolNameSymbolLoc(v3, v4);

  return v6;
}

BOOL _AXSwiftUIIsAnyStringEmpty(void *a1)
{
  id v1 = a1;
  if (!v1) {
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      BOOL v3 = [v1 length] == 0;
      goto LABEL_8;
    }
LABEL_7:
    BOOL v3 = 1;
    goto LABEL_8;
  }
  uint64_t v2 = [v1 string];
  BOOL v3 = [v2 length] == 0;

LABEL_8:
  return v3;
}

id _AXSwiftUIGetObjectFromSelectorAsAny(void *a1, const char *a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector())
  {
    id v4 = NSStringFromSelector(a2);
    uint64_t v5 = [v3 valueForKey:v4];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t _AXSwiftUIUnarchiveChartDescriptor(uint64_t a1)
{
  return [MEMORY[0x263F08928] unarchiveTopLevelObjectWithData:a1 error:0];
}

id AXAttributedStringConvert(void *a1)
{
  id v1 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v2 = (uint64_t (*)(id))getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr;
  uint64_t v11 = getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr;
  if (!getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr)
  {
    id v3 = (void *)AXRuntimeLibrary();
    v9[3] = (uint64_t)dlsym(v3, "AXGetCFAttributedStringFromAXAttributedString");
    getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    uint64_t v2 = (uint64_t (*)(id))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v2) {
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  }
  id v4 = (void *)v2(v1);
  if (v4) {
    id v5 = v4;
  }
  else {
    id v5 = (id)[objc_alloc(MEMORY[0x263F086A0]) initWithString:v1];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_2459BC0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAXInteractionLocationDescriptorDefaultNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AXRuntimeLibrary();
  uint64_t result = dlsym(v2, "AXInteractionLocationDescriptorDefaultName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AXRuntimeLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AXRuntimeLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AXRuntimeLibrary();
  uint64_t result = dlsym(v2, "AXGetCFAttributedStringFromAXAttributedString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                               + 24);
  return result;
}

void _MovableLockDestroy(uint64_t a1)
{
  pthread_cond_destroy((pthread_cond_t *)(a1 + 64));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 112));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 160));
  pthread_mutex_destroy((pthread_mutex_t *)a1);

  free((void *)a1);
}

BOOL _MovableLockIsOutermostOwner(uint64_t a1)
{
  uint64_t v2 = *(_opaque_pthread_t **)(a1 + 216);
  return pthread_self() == v2 && *(_DWORD *)(a1 + 224) == 1;
}

void *_CorePlatformImageMakeKitImage(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CorePlatformImageClass_once != -1) {
    dispatch_once(&CorePlatformImageClass_once, &__block_literal_global);
  }
  if (!CorePlatformImageClass_isValid) {
    [MEMORY[0x263EFF940] raise:@"Invalid image class" format:&stru_26FA95DA0];
  }
  long long v7 = (void *)[objc_alloc((Class) (id) CorePlatformImageClass_imageClass) initWithCGImage:a3 scale:a4 orientation:a1];
  if ([v7 renderingMode] == 2)
  {
    uint64_t v8 = [v7 imageWithRenderingMode:2];

    long long v7 = (void *)v8;
  }
  [v7 baselineOffsetFromBottom];
  if (v9 > 0.0)
  {
    [v7 baselineOffsetFromBottom];
    uint64_t v10 = objc_msgSend(v7, "imageWithBaselineOffsetFromBottom:");

    return (void *)v10;
  }
  return v7;
}

BOOL _CorePlatformImageIsTemplate(uint64_t a1, void *a2)
{
  return [a2 renderingMode] == 2;
}

uint64_t _CorePlatformImageGetCGImage(uint64_t a1, void *a2)
{
  if (a2) {
    return [a2 CGImage];
  }
  else {
    return 0;
  }
}

double _CorePlatformImageGetSize(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  double Width = *MEMORY[0x263F001B0];
  if (v2)
  {
    id v5 = (CGImage *)[v2 CGImage];
    if (v5)
    {
      uint64_t v6 = v5;
      CGImageGetHeight(v5);
      double Width = (double)CGImageGetWidth(v6);
    }
  }

  return Width;
}

uint64_t _CorePlatformImageGetScale(uint64_t a1, void *a2)
{
  return [a2 scale];
}

uint64_t _CorePlatformImageGetImageOrientation(uint64_t a1, void *a2)
{
  return [a2 imageOrientation];
}

uint64_t _CorePlatformImageGetBaselineOffsetFromBottom(uint64_t a1, void *a2)
{
  return [a2 baselineOffsetFromBottom];
}

double _CorePlatformImageGetAlignmentRect()
{
  return *MEMORY[0x263F001A8];
}

Class __CorePlatformImageClass_block_invoke()
{
  Class result = NSClassFromString(&cfstr_Uiimage.isa);
  CorePlatformImageClass_imageClass = (uint64_t)result;
  CorePlatformImageClass_isValiCGFloat d = result != 0;
  return result;
}

uint64_t _CGPathParseString(CGMutablePathRef path, char *a2)
{
  int v3 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  char v19 = a2;
  double height = 0.0;
  double v5 = 0.0;
  double width = 0.0;
LABEL_2:
  double v7 = 0.0;
  do
  {
LABEL_3:
    while (2)
    {
      for (uint64_t i = a2 + 1; ; ++i)
      {
        unsigned int v9 = *(i - 1);
        if (v9 > 0x2E) {
          break;
        }
        if (((1 << v9) & 0x100003600) == 0)
        {
          if (((1 << v9) & 0x680000000000) != 0) {
            goto LABEL_11;
          }
          if (!*(i - 1)) {
            return 1;
          }
          break;
        }
        char v19 = i;
      }
      uint64_t v10 = v9 - 48;
      if (v10 > 0x28)
      {
LABEL_17:
        switch(*(i - 1))
        {
          case 'c':
            if (v3 != 6) {
              return 0;
            }
            CGFloat x = v20.origin.x;
            CGFloat y = v20.origin.y;
            double width = v20.size.width;
            double height = v20.size.height;
            double v7 = v21;
            double v5 = v22;
            uint64_t v13 = path;
            CGFloat v14 = v20.size.width;
            CGFloat v15 = v20.size.height;
            goto LABEL_37;
          case 'e':
          case 'p':
          case 'x':
            goto LABEL_11;
          case 'h':
            if (v3) {
              return 0;
            }
            CGPathCloseSubpath(path);
            a2 = ++v19;
            double v5 = 0.0;
            goto LABEL_2;
          case 'l':
            if (v3 != 2) {
              return 0;
            }
            double width = v20.origin.x;
            double height = v20.origin.y;
            CGPathAddLineToPoint(path, 0, v20.origin.x, v20.origin.y);
            goto LABEL_24;
          case 'm':
            if (v3 != 2) {
              return 0;
            }
            double width = v20.origin.x;
            double height = v20.origin.y;
            CGPathMoveToPoint(path, 0, v20.origin.x, v20.origin.y);
LABEL_24:
            int v3 = 0;
            a2 = ++v19;
            double v5 = height;
            double v7 = width;
            continue;
          case 'q':
            if (v3 != 4) {
              return 0;
            }
            double width = v20.origin.x;
            double height = v20.origin.y;
            double v7 = v20.size.width;
            double v5 = v20.size.height;
            goto LABEL_32;
          case 'r':
            uint64_t result = 0;
            if (*i != 101 || v3 != 4) {
              return result;
            }
            double v7 = v20.size.width;
            double v5 = v20.size.height;
            CGPathAddRect(path, 0, v20);
            int v3 = 0;
            a2 = v19 + 2;
            v19 += 2;
            continue;
          case 't':
            if (v3 != 2) {
              return 0;
            }
            double width = -(width - v7 * 2.0);
            double height = -(height - v5 * 2.0);
            double v7 = v20.origin.x;
            double v5 = v20.origin.y;
LABEL_32:
            CGPathAddQuadCurveToPoint(path, 0, width, height, v7, v5);
            goto LABEL_38;
          case 'v':
            if (v3 != 4) {
              return 0;
            }
            double width = v20.origin.x;
            double height = v20.origin.y;
            CGFloat v17 = v20.size.width;
            CGFloat v18 = v20.size.height;
            CGPathAddCurveToPoint(path, 0, v7, v5, v20.origin.x, v20.origin.y, v20.size.width, v20.size.height);
            int v3 = 0;
            a2 = ++v19;
            double v5 = v18;
            double v7 = v17;
            continue;
          case 'y':
            if (v3 != 4) {
              return 0;
            }
            CGFloat x = v20.origin.x;
            CGFloat y = v20.origin.y;
            double v7 = v20.size.width;
            double v5 = v20.size.height;
            uint64_t v13 = path;
            CGFloat v14 = v20.size.width;
            CGFloat v15 = v20.size.height;
LABEL_37:
            CGPathAddCurveToPoint(v13, 0, x, y, v14, v15, v7, v5);
LABEL_38:
            int v3 = 0;
            a2 = ++v19;
            break;
          default:
            return 0;
        }
        continue;
      }
      break;
    }
    if (((1 << (v9 - 48)) & 0x101002003FFLL) != 0) {
      break;
    }
    if (v10 != 25) {
      goto LABEL_17;
    }
    a2 = i - 1;
  }
  while (*i != 110 || i[1] != 102);
LABEL_11:
  if (v3 != 6)
  {
    *(&v20.origin.x + v3++) = strtod_l(i - 1, &v19, 0);
    a2 = v19;
    goto LABEL_3;
  }
  return 0;
}

uint64_t _CGPathCopyDescription(const CGPath *a1, double a2)
{
  info[0] = CFStringCreateMutable(0, 0);
  *(double *)&info[1] = a2;
  *(double *)&info[2] = 1.0 / a2;
  CGPathApply(a1, info, (CGPathApplierFunction)copy_path_iter);
  return info[0];
}

void copy_path_iter(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (CFStringGetLength(*(CFStringRef *)a1)) {
    CFStringAppend(*(CFMutableStringRef *)a1, @" ");
  }
  switch(*(_DWORD *)a2)
  {
    case 0:
      UniChar v4 = 109;
      goto LABEL_6;
    case 1:
      UniChar v4 = 108;
LABEL_6:
      UniChar chars = v4;
      uint64_t v5 = 2;
      goto LABEL_9;
    case 2:
      UniChar chars = 113;
      uint64_t v5 = 4;
      goto LABEL_9;
    case 3:
      UniChar chars = 99;
      uint64_t v5 = 6;
LABEL_9:
      uint64_t v6 = 0;
      uint64_t v7 = 8 * v5;
      do
      {
        double v8 = *(double *)(*(void *)(a2 + 8) + v6);
        double v9 = *(double *)(a1 + 8);
        if (v9 != 0.0) {
          double v8 = v9 * round(v8 * *(double *)(a1 + 16));
        }
        snprintf_l(cStr, 0x40uLL, 0, "%g ", v8);
        CFStringAppendCString(*(CFMutableStringRef *)a1, cStr, 0x8000100u);
        v6 += 8;
      }
      while (v7 != v6);
      goto LABEL_13;
    case 4:
      UniChar chars = 104;
LABEL_13:
      CFStringAppendCharacters(*(CFMutableStringRef *)a1, &chars, 1);
      break;
    default:
      return;
  }
}

CGPathRef _CGPathCreateRoundedRect(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  if (a6 >= 0.0) {
    double v11 = a6;
  }
  else {
    double v11 = 0.0;
  }
  if (a7 >= 0.0) {
    double v12 = a7;
  }
  else {
    double v12 = 0.0;
  }
  if (v11 == 0.0 || v12 == 0.0 || CGRectIsEmpty(*(CGRect *)&a2)) {
    goto LABEL_25;
  }
  if (a1)
  {
    RBPathMakeRoundedRect();
    uint64_t v14 = RBPathCopyCGPath();
    RBPathRelease();
    return (CGPathRef)v14;
  }
  v28.origin.CGFloat x = a2;
  v28.origin.CGFloat y = a3;
  v28.size.double width = a4;
  v28.size.double height = a5;
  double Width = CGRectGetWidth(v28);
  v29.origin.CGFloat x = a2;
  v29.origin.CGFloat y = a3;
  v29.size.double width = a4;
  v29.size.double height = a5;
  double Height = CGRectGetHeight(v29);
  if (v11 + v11 > Width) {
    double v11 = nextafter(Width * 0.5, 0.0);
  }
  if (v12 + v12 > Height) {
    double v12 = nextafter(Height * 0.5, 0.0);
  }
  BOOL v18 = v11 < 0.0 || v11 + v11 > Width;
  if (v18 || v12 < 0.0 || v12 + v12 > Height)
  {
LABEL_25:
    CGFloat v23 = a2;
    CGFloat v24 = a3;
    CGFloat v25 = a4;
    CGFloat v26 = a5;
    return CGPathCreateWithRect(*(CGRect *)&v23, 0);
  }
  else
  {
    CGFloat v19 = a2;
    CGFloat v20 = a3;
    CGFloat v21 = a4;
    CGFloat v22 = a5;
    return CGPathCreateWithRoundedRect(*(CGRect *)&v19, v11, v12, 0);
  }
}

uint64_t CoreFontForSystem(uint64_t a1, uint64_t a2)
{
  return a2;
}

id CoreMakeNSShadowWithCustomStyleIndex(char a1, double a2)
{
  id v4 = objc_alloc_init((Class)CoreShadowClass());
  [v4 setShadowBlurRadius:a2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __custom_shadow_style_color_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v7 = a1;
  if (custom_shadow_style_color_once != -1) {
    dispatch_once(&custom_shadow_style_color_once, block);
  }
  [v4 setShadowColor:custom_shadow_style_color_color];

  return v4;
}

void __custom_shadow_style_color_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v6 = xmmword_24619B200;
  long long v7 = unk_24619B210;
  id v2 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  int v3 = CGColorCreate(v2, (const CGFloat *)&v6);
  CGColorSpaceRelease(v2);
  uint64_t v4 = objc_msgSend((id)CoreColorGetKitColorClass(*(unsigned __int8 *)(a1 + 32)), "colorWithCGColor:", v3, v6, v7);
  uint64_t v5 = (void *)custom_shadow_style_color_color;
  custom_shadow_style_color_color = v4;

  CGColorRelease(v3);
}

uint64_t CGColorForCoreColor(uint64_t a1, void *a2)
{
  if (a2) {
    return [a2 CGColor];
  }
  else {
    return 0;
  }
}

uint64_t NSCalendarUnitSmallestUnit(uint64_t a1)
{
  uint64_t v1 = 0;
  while (1)
  {
    uint64_t v2 = qword_24619B220[v1];
    if ((v2 & a1) != 0) {
      break;
    }
    if (++v1 == 14) {
      return 0;
    }
  }
  return v2;
}

uint64_t _isWeekdayDayTemplate(void *a1)
{
  id v1 = a1;
  if (([v1 isEqualToString:@"EEE d"] & 1) != 0
    || ([v1 isEqualToString:@"EEEE d"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = [v1 isEqualToString:@"ccccc d"];
  }

  return v2;
}

uint64_t CoreViewSpeculativeLayer(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return (uint64_t)a1;
  }
  if ((!NSClassFromString(&cfstr_Uiview.isa) || (objc_opt_isKindOfClass() & 1) == 0)
    && (!NSClassFromString(&cfstr_Nsview.isa) || (objc_opt_isKindOfClass() & 1) == 0))
  {
    return 0;
  }

  return [a1 layer];
}

uint64_t CoreViewSetNeedsDisplay(uint64_t result, void *a2)
{
  if ((result | 2) == 2) {
    return [a2 setNeedsDisplay];
  }
  return result;
}

uint64_t CoreViewSetSize(uint64_t result, void *a2)
{
  if ((result | 2) == 2)
  {
    [a2 bounds];
    return objc_msgSend(a2, "setBounds:");
  }
  return result;
}

uint64_t CoreViewGetFrame(uint64_t a1, void *a2)
{
  return [a2 frame];
}

uint64_t CoreViewSetFrame(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setFrame:");
}

Class CoreViewDisplayIgnoringOpacity(Class result, void *a2, uint64_t a3)
{
  if (result == 1)
  {
    uint64_t result = NSClassFromString(&cfstr_Nsgraphicscont.isa);
    if (result)
    {
      uint64_t v5 = [(objc_class *)result graphicsContextWithCGContext:a3 flipped:1];
      [a2 bounds];
      return (Class)objc_msgSend(a2, "displayRectIgnoringOpacity:inContext:", v5);
    }
  }
  return result;
}

Class CoreViewMakeIntelligenceLightSourceView(uint64_t a1)
{
  Class result = NSClassFromString(&cfstr_Uiintelligence.isa);
  if (result)
  {
    int v3 = result;
    if (NSClassFromString(&cfstr_Uiintelligence_0.isa))
    {
      uint64_t v4 = objc_opt_new();
      [v4 setPrefersAudioReactivity:a1];
    }
    else
    {
      uint64_t v4 = 0;
    }
    id v5 = [v3 alloc];
    uint64_t v6 = objc_msgSend(v5, "initWithFrame:configuration:", v4, *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));

    return (Class)v6;
  }
  return result;
}

uint64_t _SimulatorSystemRootDirectory()
{
  return MEMORY[0x270F306A0]();
}

uint64_t _CUICatalogCustomizesWidget(void *a1, const char *a2)
{
  return [a1 hasCustomizedAppearanceForWidget:a2];
}

id _CAFilterGetInput(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = _CAFilterInputKey(a2);
  id v5 = [v3 valueForKey:v4];

  return v5;
}

id _RBBlendModeGetCompositingFilter(int a1)
{
  uint64_t v2 = (id *)MEMORY[0x263F15D18];
  switch(a1)
  {
    case 1:
      goto LABEL_38;
    case 2:
      uint64_t v2 = (id *)MEMORY[0x263F15D70];
      goto LABEL_38;
    case 3:
      uint64_t v2 = (id *)MEMORY[0x263F15D40];
      goto LABEL_38;
    case 4:
      uint64_t v2 = (id *)MEMORY[0x263F15B70];
      goto LABEL_38;
    case 5:
      uint64_t v2 = (id *)MEMORY[0x263F15CB8];
      goto LABEL_38;
    case 6:
      uint64_t v2 = (id *)MEMORY[0x263F15B28];
      goto LABEL_38;
    case 7:
      uint64_t v2 = (id *)MEMORY[0x263F15B18];
      goto LABEL_38;
    case 8:
      uint64_t v2 = (id *)MEMORY[0x263F15D78];
      goto LABEL_38;
    case 9:
      uint64_t v2 = (id *)MEMORY[0x263F15BD0];
      goto LABEL_38;
    case 10:
      uint64_t v2 = (id *)MEMORY[0x263F15BA0];
      goto LABEL_38;
    case 11:
      uint64_t v2 = (id *)MEMORY[0x263F15BC0];
      goto LABEL_38;
    case 12:
      uint64_t v2 = (id *)MEMORY[0x263F15BE0];
      goto LABEL_38;
    case 13:
      uint64_t v2 = (id *)MEMORY[0x263F15D68];
      goto LABEL_38;
    case 14:
      uint64_t v2 = (id *)MEMORY[0x263F15B08];
      goto LABEL_38;
    case 15:
      uint64_t v2 = (id *)MEMORY[0x263F15CF8];
      goto LABEL_38;
    case 16:
      uint64_t v2 = (id *)MEMORY[0x263F15AF8];
      goto LABEL_38;
    case 17:
      uint64_t v2 = (id *)MEMORY[0x263F15B58];
      goto LABEL_38;
    case 18:
      uint64_t v2 = (id *)MEMORY[0x263F15D88];
      goto LABEL_38;
    case 19:
      uint64_t v2 = (id *)MEMORY[0x263F15D90];
      goto LABEL_38;
    case 20:
      uint64_t v2 = (id *)MEMORY[0x263F15D80];
      goto LABEL_38;
    case 21:
      uint64_t v2 = (id *)MEMORY[0x263F15B98];
      goto LABEL_38;
    case 22:
      uint64_t v2 = (id *)MEMORY[0x263F15B88];
      goto LABEL_38;
    case 23:
      uint64_t v2 = (id *)MEMORY[0x263F15B90];
      goto LABEL_38;
    case 24:
      uint64_t v2 = (id *)MEMORY[0x263F15B80];
      goto LABEL_38;
    case 25:
      uint64_t v2 = (id *)MEMORY[0x263F15DC0];
      goto LABEL_38;
    case 26:
      uint64_t v2 = (id *)MEMORY[0x263F15D50];
      goto LABEL_38;
    case 27:
      uint64_t v2 = (id *)MEMORY[0x263F15D58];
LABEL_38:
      id v4 = *v2;
      break;
    default:
      id v4 = 0;
      switch(a1)
      {
        case 1000:
          uint64_t v2 = (id *)MEMORY[0x263F15CD8];
          goto LABEL_38;
        case 1001:
          uint64_t v2 = (id *)MEMORY[0x263F15CD0];
          goto LABEL_38;
        case 1002:
          uint64_t v2 = (id *)MEMORY[0x263F15CE0];
          goto LABEL_38;
        case 1003:
          uint64_t v2 = (id *)MEMORY[0x263F15D48];
          goto LABEL_38;
        case 1004:
          uint64_t v2 = (id *)MEMORY[0x263F15DA0];
          goto LABEL_38;
        case 1005:
          uint64_t v2 = (id *)MEMORY[0x263F15BB0];
          goto LABEL_38;
        case 1006:
          uint64_t v2 = (id *)MEMORY[0x263F15D08];
          goto LABEL_38;
        case 1010:
          uint64_t v2 = (id *)MEMORY[0x263F15B78];
          goto LABEL_38;
        case 1011:
          uint64_t v2 = (id *)MEMORY[0x263F15CC0];
          goto LABEL_38;
        default:
          goto LABEL_39;
      }
  }
LABEL_39:
  return v4;
}

uint64_t _CACompositingFilterGetRBBlendMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:*MEMORY[0x263F15D18]])
    {
      uint64_t v3 = 1;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D70]])
    {
      uint64_t v3 = 2;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D40]])
    {
      uint64_t v3 = 3;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B70]])
    {
      uint64_t v3 = 4;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15CB8]])
    {
      uint64_t v3 = 5;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B28]])
    {
      uint64_t v3 = 6;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B18]])
    {
      uint64_t v3 = 7;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D78]])
    {
      uint64_t v3 = 8;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15BD0]])
    {
      uint64_t v3 = 9;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15BA0]])
    {
      uint64_t v3 = 10;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15BC0]])
    {
      uint64_t v3 = 11;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15BE0]])
    {
      uint64_t v3 = 12;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D68]])
    {
      uint64_t v3 = 13;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B08]])
    {
      uint64_t v3 = 14;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15CF8]])
    {
      uint64_t v3 = 15;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15AF8]])
    {
      uint64_t v3 = 16;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B58]])
    {
      uint64_t v3 = 17;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D88]])
    {
      uint64_t v3 = 18;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D90]])
    {
      uint64_t v3 = 19;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D80]])
    {
      uint64_t v3 = 20;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B98]])
    {
      uint64_t v3 = 21;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B88]])
    {
      uint64_t v3 = 22;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B90]])
    {
      uint64_t v3 = 23;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B80]])
    {
      uint64_t v3 = 24;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15DC0]])
    {
      uint64_t v3 = 25;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D50]])
    {
      uint64_t v3 = 26;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D58]])
    {
      uint64_t v3 = 27;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15CD8]])
    {
      uint64_t v3 = 1000;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15CD0]])
    {
      uint64_t v3 = 1001;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15CE0]])
    {
      uint64_t v3 = 1002;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D48]])
    {
      uint64_t v3 = 1003;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15DA0]])
    {
      uint64_t v3 = 1004;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15BB0]])
    {
      uint64_t v3 = 1005;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15D08]])
    {
      uint64_t v3 = 1006;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15B78]])
    {
      uint64_t v3 = 1010;
    }
    else if ([v2 isEqualToString:*MEMORY[0x263F15CC0]])
    {
      uint64_t v3 = 1011;
    }
    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id _CANullAction()
{
  return (id)*MEMORY[0x263EFFD08];
}

CFArrayRef _CTLineGetRunCount(const __CTLine *a1)
{
  CFArrayRef result = CTLineGetGlyphRuns(a1);
  if (result)
  {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

const void *_CTLineGetRunAtIndex(const __CTLine *a1, CFIndex a2)
{
  CFArrayRef GlyphRuns = CTLineGetGlyphRuns(a1);

  return CFArrayGetValueAtIndex(GlyphRuns, a2);
}

CFDictionaryRef _CTRunGetAttributeValueForKey(const __CTRun *a1, const void *a2)
{
  CFDictionaryRef Attributes = CTRunGetAttributes(a1);
  if (Attributes) {
    CFDictionaryRef Attributes = (id)CFDictionaryGetValue(Attributes, a2);
  }

  return Attributes;
}

CFDictionaryRef _CTRunGetFont(const __CTRun *a1)
{
  CFDictionaryRef result = CTRunGetAttributes(a1);
  if (result)
  {
    uint64_t v2 = (const void *)*MEMORY[0x263F039A0];
    return (const __CFDictionary *)CFDictionaryGetValue(result, v2);
  }
  return result;
}

uint64_t _NSTextLineFragmentGetCTLine(void *a1)
{
  id v1 = a1;

  return [v1 lineRef];
}

id _NSTextLineFragmentGetOverridesHandler(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v2 = [v1 _renderingAttributeOverridesProvider];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void _NSTextAttachmentDraw(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  id v20 = a1;
  id v19 = a5;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v20, "_showWithBounds:attributes:runRange:textLayoutFragment:inContext:", a2, a3, a4, v19, a6, a7, a8, a9, a10);
  }
}

uint64_t _NSTextAttachmentSetAttachmentCell(void *a1, const char *a2)
{
  return [a1 setAttachmentCell:a2];
}

uint64_t _NSTextAttachmentSetImage(void *a1, const char *a2)
{
  return [a1 setImage:a2];
}

void _NSTextCustomRenderingDelegateInvalidateInteractionGeometry(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    [v1 _invalidateInteractionGeometry];
  }
}

void _NSTextCustomRenderingDelegateSetNeedsFrameUpdate(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    [v1 _setNeedsFrameUpdateForCustomRendering];
  }
  else {
    [v1 setNeedsFrameUpdateForSurface:0];
  }
}

void _NSTextCustomRenderingDelegateWillDraw(void *a1, void *a2, void *a3)
{
  id v7 = a1;
  id v5 = a2;
  uint64_t v6 = a3;
  if (objc_opt_respondsToSelector()) {
    [v7 _willDrawContentOfSurface:v5 withBlock:v6];
  }
  else {
    v6[2](v6);
  }
}

uint64_t GetAttributedStringKey(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"NSColor"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"NSParagraphStyle"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"NSFont"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"NSAttachment"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"CTAdaptiveImageProvider"])
  {
    uint64_t v2 = 34;
  }
  else if ([v1 isEqualToString:@"NSBaselineOffset"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"NSKern"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"CTTracking"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"NSStrikethrough"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"NSStrikethroughColor"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"NSUnderline"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"NSUnderlineColor"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"NSShadow"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:*MEMORY[0x263F081E8]])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"SwiftUI.ResolvableDateInterval"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"SwiftUI.ResolvableAbsoluteDate"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"SwiftUI.ResolvableCurrentDate"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"SwiftUI.ResolvableTimerInterval"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqualToString:@"SwiftUI.ResolvableCLKTextProvider"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"SwiftUI.resolvableAttributeConfiguration"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"SwiftUI.ResolvableProgress"])
  {
    uint64_t v2 = 33;
  }
  else if ([v1 isEqualToString:@"SwiftUI.ResolvableTimeDataFormatting"])
  {
    uint64_t v2 = 21;
  }
  else if ([v1 isEqualToString:@"SwiftUI.resolvableTextSegment"])
  {
    uint64_t v2 = 20;
  }
  else if ([v1 isEqualToString:@"NSTextScale"])
  {
    uint64_t v2 = 31;
  }
  else if ([v1 isEqualToString:@"UIAccessibilityTokenDurationTimeMMSS"])
  {
    uint64_t v2 = 32;
  }
  else if ([v1 isEqualToString:@"UIAccessibilitySpeechAttributePunctuation"])
  {
    uint64_t v2 = 22;
  }
  else if ([v1 isEqualToString:@"UIAccessibilitySpeechAttributeSpellOut"])
  {
    uint64_t v2 = 23;
  }
  else if ([v1 isEqualToString:@"UIAccessibilitySpeechAttributePitch"])
  {
    uint64_t v2 = 24;
  }
  else if ([v1 isEqualToString:@"UIAccessibilitySpeechAttributeLanguage"])
  {
    uint64_t v2 = 25;
  }
  else if ([v1 isEqualToString:@"UIAccessibilitySpeechAttributeIPANotation"])
  {
    uint64_t v2 = 26;
  }
  else if ([v1 isEqualToString:@"UIAccessibilitySpeechAttributeAnnouncementPriority"])
  {
    uint64_t v2 = 27;
  }
  else if ([v1 isEqualToString:@"UIAccessibilityTextAttributeContext"])
  {
    uint64_t v2 = 28;
  }
  else if ([v1 isEqualToString:@"UIAccessibilityTextAttributeHeadingLevel"])
  {
    uint64_t v2 = 29;
  }
  else if ([v1 isEqualToString:@"SwiftUI.accessibilityLabel"])
  {
    uint64_t v2 = 30;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _LocalizeString(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a2;
  id v9 = a1;
  uint64_t v10 = _getBestLocalization(v9, a4);
  if (v10) {
    [v9 localizedStringForKey:v8 value:0 table:v7 localization:v10];
  }
  else {
  uint64_t v11 = [v9 localizedStringForKey:v8 value:0 table:v7];
  }

  return v11;
}

CGImageRef _CGImageCreateCopyForImageIODestination(CGImage *a1)
{
  if (CGImageGetDecode(a1) || CGImageGetMask() || CGImageGetMatte() || CGImageGetMaskingColors())
  {
    uint64_t v2 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
    uint64_t v3 = CGImageCreateByMatchingToColorSpace();
    CGColorSpaceRelease(v2);
    return (CGImageRef)v3;
  }
  else
  {
    return CGImageRetain(a1);
  }
}

void _RBDrawingStateSetTextRunRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[3] = *MEMORY[0x263EF8340];
  if (a3 | a4)
  {
    id v5 = [NSNumber numberWithLong:a2];
    v8[1] = v5;
    uint64_t v6 = [NSNumber numberWithLong:a4];
    void v8[2] = v6;
    id v7 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:3];

    RBDrawingStateSetAttribute();
  }
  else
  {
    RBDrawingStateSetAttribute();
  }
}

void _CGContextSetTextRunRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[3] = *MEMORY[0x263EF8340];
  if (a3 | a4)
  {
    id v5 = [NSNumber numberWithLong:a2];
    v8[1] = v5;
    uint64_t v6 = [NSNumber numberWithLong:a4];
    void v8[2] = v6;
    id v7 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:3];

    CGContextGetDelegate();
    CGContextGetRenderingState();
    CGContextGetGState();
    CGContextDelegateOperation();
  }
  else
  {
    CGContextGetDelegate();
    CGContextGetRenderingState();
    CGContextGetGState();
    CGContextDelegateOperation();
  }
}

void _CGContextSetShapeDistance(double a1)
{
  v7[2] = *MEMORY[0x263EF8340];
  if (a1 < 0.0) {
    uint64_t v2 = 3;
  }
  else {
    uint64_t v2 = 2;
  }
  v6[0] = @"value";
  uint64_t v3 = [NSNumber numberWithUnsignedInt:v2];
  v6[1] = @"argument";
  v7[0] = v3;
  id v4 = [NSNumber numberWithDouble:fabs(a1)];
  v7[1] = v4;
  id v5 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  CGContextGetDelegate();
  CGContextGetRenderingState();
  CGContextGetGState();
  CGContextDelegateOperation();
}

uint64_t swiftUI_autumn_2019_os_versions()
{
  return 0x7E30902FFFFFFFFLL;
}

uint64_t swiftUI_late_fall_2019_os_versions()
{
  return 0x7E31015FFFFFFFFLL;
}

uint64_t swiftUI_v1_3_1_os_versions()
{
  return 0x7E31201FFFFFFFFLL;
}

uint64_t swiftUI_v1_4_os_versions()
{
  return 0x7E40301FFFFFFFFLL;
}

uint64_t swiftUI_late_spring_2020_os_versions()
{
  return 0x7E40415FFFFFFFFLL;
}

uint64_t swiftUI_summer_2020_os_versions()
{
  return 0x7E40601FFFFFFFFLL;
}

uint64_t swiftUI_v3_4_os_versions()
{
  return 0x7E60301FFFFFFFFLL;
}

uint64_t swiftUI_v5_2_os_versions()
{
  return 0x7E70D01FFFFFFFFLL;
}

uint64_t swiftUI_v6_2_os_versions()
{
  return 0x7E80200FFFFFFFFLL;
}

uint64_t swiftUI_v6_4_os_versions()
{
  return 0x7E80400FFFFFFFFLL;
}

uint64_t _NSTextCorrectionMarkerRenderingAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [MEMORY[0x263F81690] textCorrectionAdjustmentAttributedString:a1 range:a2 glyphOrigin:a3 yDelta:a4];
}

uint64_t _NSTextCorrectionMarkerDraw(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(MEMORY[0x263F81690], "drawCorrectionMarkerOfType:font:origin:width:originalWidth:cgContext:", a1, a2, a3);
}

uint64_t _NSTextCorrectionMarkerBounds(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x263F81690], "boundsForCorrectionMarkerOfType:font:origin:width:originalWidth:", a1, a2);
}

uint64_t _NSMarkedTextBounds(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "boundsForMarkedTextAtPoint:range:width:adjustmentCallback:", a2, a3);
}

void _NSMarkedTextAttributes(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  id v7 = [a2 textLineFragmentRange];
  [v6 markedTextAttributesForRange:v7 usingBlock:v5];
}

uint64_t _NSMarkedTextDrawBackground(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "drawMarkedTextBackgroundAtPoint:context:adjustmentCallback:", a2, a3);
}

uint64_t _NSMarkedTextDrawIndicator(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "drawMarkedTextIndicatorAtPoint:context:adjustmentCallback:", a2, a3);
}

BOOL _CGFontRenderingStyleShouldQueryDilationParameters(int a1)
{
  if ((a1 & 2) != 0) {
    int v1 = 112;
  }
  else {
    int v1 = 3456;
  }
  return (v1 & a1) != 0;
}

BOOL _isBeginningOfSentence(CFStringRef theString, const __CFString *a2, const __CFLocale *a3)
{
  MutableCopCGFloat y = CFStringCreateMutableCopy(0, 0, theString);
  CFStringUppercase(MutableCopy, 0);
  CopCGFloat y = CFStringCreateCopy(0, MutableCopy);
  CFRelease(MutableCopy);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  v14.length = CFStringGetLength(Copy);
  v14.CFIndex location = 0;
  id v8 = CFStringTokenizerCreate(v7, Copy, v14, 1uLL, a3);
  for (i = v8; ; id v8 = i)
  {
    if (!CFStringTokenizerAdvanceToNextToken(v8))
    {
      BOOL v12 = 0;
      goto LABEL_7;
    }
    CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(i);
    CFStringRef v10 = CFStringCreateWithSubstring(0, Copy, CurrentTokenRange);
    CFIndex location = CFStringFind(v10, a2, 0).location;
    if (location != -1) {
      break;
    }
    CFRelease(v10);
  }
  BOOL v12 = location == 0;
  CFRelease(v10);
LABEL_7:
  CFRelease(Copy);
  CFRelease(i);
  return v12;
}

void *__getSwiftUIGlue2ClassSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SwiftUILibrary();
  CFDictionaryRef result = dlsym(v2, "SwiftUIGlue2Class");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSwiftUIGlue2ClassSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SwiftUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SwiftUILibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getSwiftUIGlueClassSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)SwiftUILibrary();
  uint64_t result = dlsym(v2, "SwiftUIGlueClass");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSwiftUIGlueClassSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2459C02C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _NSTextLayoutFragmentLayoutFragmentWithKeyframe(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v5 = [v3 layoutFragmentWithKeyframe:v4];
    [v5 layout];
    if (v5) {
      id v6 = v5;
    }
    else {
      id v6 = v3;
    }
    id v7 = v6;
  }
  else
  {
    id v7 = v3;
  }

  return v7;
}

ProtocolDescriptor *_viewModifierProtocolDescriptor()
{
  return &protocol descriptor for ViewModifier;
}

ProtocolDescriptor *_gestureProtocolDescriptor()
{
  return &protocol descriptor for Gesture;
}

void *_gestureModifierProtocolDescriptor()
{
  return &protocol descriptor for GestureModifier;
}

ProtocolDescriptor *_defaultStyleModifierProtocolDescriptor()
{
  return &protocol descriptor for DefaultStyleModifier;
}

ProtocolDescriptor *_styleOverrideModifierProtocolDescriptor()
{
  return &protocol descriptor for StyleOverrideModifier;
}

ProtocolDescriptor *_styleWriterOverrideModifierProtocolDescriptor()
{
  return &protocol descriptor for StyleWriterOverrideModifier;
}

uint64_t _SwiftUIIsAppleInternalBuild()
{
  if (_SwiftUIIsAppleInternalBuild_once != -1) {
    dispatch_once(&_SwiftUIIsAppleInternalBuild_once, &__block_literal_global_3);
  }
  return _SwiftUIIsAppleInternalBuild_isInternal;
}

id LocalizedString(void *a1, void *a2)
{
  uint64_t v3 = Bundle_onceToken;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&Bundle_onceToken, &__block_literal_global_101);
  }
  id v6 = (void *)_LocalizeString((void *)Bundle___bundle, v5, @"CoreDateProvider", v4);

  return v6;
}

uint64_t DesignatorRequiresWhitespace()
{
  return 1;
}

BOOL DropLeftRedundantDesignator(void *a1)
{
  int v1 = LocalizedString(@"INTERVAL_DROP_LEFTMOST_REDUNDANT_DESIGNATOR", a1);
  uint64_t v2 = v1;
  BOOL v3 = !v1 || [v1 BOOLValue];

  return v3;
}

uint64_t RemovesPunctuationFromWeekdayDay(void *a1)
{
  int v1 = LocalizedString(@"DATE_WEEKDAY_DAY_REMOVE_PUNCTUATION", a1);
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

unint64_t LocaleIs24HourMode(void *a1)
{
  CFLocaleRef v1 = a1;
  if (LocaleIs24HourMode_onceToken != -1) {
    dispatch_once(&LocaleIs24HourMode_onceToken, &__block_literal_global_4);
  }
  uint64_t v2 = [(id)LocaleIs24HourMode_cache objectForKeyedSubscript:v1];
  if (!v2)
  {
    uint64_t v2 = CFDateFormatterCreate(0, v1, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
    [(id)LocaleIs24HourMode_cache setObject:v2 forKeyedSubscript:v1];
  }
  CFStringRef Format = CFDateFormatterGetFormat(v2);
  unint64_t v4 = (unint64_t)Format;
  if (Format) {
    unint64_t v4 = CFStringFind(Format, @"H", 0).location != -1
  }
      || CFStringFind((CFStringRef)v4, @"k", 0).location != -1;
  CFRelease(v2);

  return v4;
}

void __LocaleIs24HourMode_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  CFLocaleRef v1 = (void *)LocaleIs24HourMode_cache;
  LocaleIs24HourMode_cache = (uint64_t)v0;
}

uint64_t LocaleIsCJK(void *a1)
{
  uint64_t v1 = LocaleIsCJK_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&LocaleIsCJK_onceToken, &__block_literal_global_18);
  }
  BOOL v3 = [v2 objectForKey:*MEMORY[0x263EFF508]];

  uint64_t v4 = [(id)LocaleIsCJK__cjkSet containsObject:v3];
  return v4;
}

void __LocaleIsCJK_block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x263EFFA08], "setWithObjects:", @"zh", @"ja", @"ko", 0);
  uint64_t v1 = (void *)LocaleIsCJK__cjkSet;
  LocaleIsCJK__cjkSet = v0;
}

void __Bundle_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  uint64_t v1 = (void *)Bundle___bundle;
  Bundle___bundle = v0;
}

uint64_t _AppKitAddSubview(void *a1, void *a2, uint64_t a3)
{
  id v6 = (void *)[a2 subviews];
  uint64_t v7 = [v6 count];
  if (v7 > a3)
  {
    uint64_t result = [v6 objectAtIndexedSubscript:a3];
    if ((void *)result == a1) {
      return result;
    }
  }
  if ((void *)[a1 superview] == a2
    && a3 + 1 < v7
    && objc_msgSend(v6, "objectAtIndexedSubscript:") == a1)
  {
    a1 = (void *)[v6 objectAtIndexedSubscript:a3];
    a3 = v7;
  }
  if (nsAnimationContextOnce != -1) {
    dispatch_once_f(&nsAnimationContextOnce, 0, (dispatch_function_t)initAnimationContextClass);
  }
  [(id)nsAnimationContextClass beginGrouping];
  objc_msgSend((id)objc_msgSend((id)nsAnimationContextClass, "currentContext"), "setDuration:", 0.0);
  if (a3 == v7)
  {
    id v9 = a2;
    CFStringRef v10 = a1;
    uint64_t v11 = 1;
LABEL_15:
    uint64_t v12 = 0;
    goto LABEL_16;
  }
  if (!a3)
  {
    id v9 = a2;
    CFStringRef v10 = a1;
    uint64_t v11 = -1;
    goto LABEL_15;
  }
  uint64_t v12 = [v6 objectAtIndexedSubscript:a3];
  id v9 = a2;
  CFStringRef v10 = a1;
  uint64_t v11 = -1;
LABEL_16:
  objc_msgSend(v9, "swiftui_addRenderedSubview:positioned:relativeTo:", v10, v11, v12);
  uint64_t v13 = (void *)nsAnimationContextClass;

  return [v13 endGrouping];
}

Class initAnimationContextClass()
{
  Class result = NSClassFromString(&cfstr_Nsanimationcon.isa);
  nsAnimationContextClass = (uint64_t)result;
  return result;
}

id InitializeCoreTextGraphicsContextProvider()
{
  return +[CoreTextGraphicsContextProvider sharedProvider];
}

uint64_t _ViewInputs.base.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();

  return swift_bridgeObjectRetain();
}

double _ViewInputs.base.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[5];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)uint64_t v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(void *)(v1 + 16) = v5;
  double result = *((double *)a1 + 3);
  uint64_t v8 = a1[4];
  *(double *)(v1 + 24) = result;
  *(void *)(v1 + 32) = v8;
  *(void *)(v1 + 40) = v6;
  return result;
}

uint64_t (*_ViewInputs.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.preferences.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _ViewInputs.preferences.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  *(_DWORD *)(v1 + 56) = v3;
  return result;
}

uint64_t (*_ViewInputs.preferences.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.customInputs.getter()
{
  return swift_retain();
}

uint64_t key path getter for _ViewInputs.customInputs : _ViewInputs@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t key path setter for _ViewInputs.customInputs : _ViewInputs(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t _ViewInputs.customInputs.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_ViewInputs.customInputs.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_retain();
  return _ViewInputs.customInputs.modify;
}

uint64_t _ViewInputs.customInputs.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  if (a2)
  {
    swift_retain();
    swift_release();
    *uint64_t v3 = v2;
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    *uint64_t v3 = v2;
  }
  return result;
}

uint64_t _ViewInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  specialized _ViewInputs.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

void (*_ViewInputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  id v9 = malloc(0x40uLL);
  *a1 = v9;
  *id v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(void *)(a4 + 8);
  v9[2] = v4;
  v9[3] = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v12;
  size_t v13 = *(void *)(v12 + 64);
  void v9[6] = malloc(v13);
  v9[7] = malloc(v13);
  _GraphInputs.subscript.getter(a2, a3, v10);
  return _ViewInputs.subscript.modify;
}

void _ViewInputs.subscript.modify(Swift::Int **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  Swift::Int v5 = (*a1)[4];
  Swift::Int v6 = (*a1)[5];
  uint64_t v7 = (*a1)[3];
  Swift::Int v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[6], v4, v5);
    specialized _ViewListCountInputs.subscript.setter((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    specialized _ViewListCountInputs.subscript.setter((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, Swift::Int))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  void (*v10)(void *, Swift::Int);
  uint64_t vars8;

  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[7];
  uint64_t v4 = (void *)(*a1)[8];
  Swift::Int v5 = (*a1)[5];
  Swift::Int v6 = (*a1)[6];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[1];
  Swift::Int v9 = **a1;
  if (a2)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[7], v4, v5);
    specialized _GraphInputs.subscript.setter((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    specialized _GraphInputs.subscript.setter((*a1)[8], v9, v8, v7);
    (*(void (**)(void *, Swift::Int))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t _ViewInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  specialized _ViewInputs.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Swift::Int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

void (*_ViewInputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(Swift::Int **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[2] = a5;
  v11[3] = v5;
  *uint64_t v11 = a2;
  v11[1] = a3;
  uint64_t v12 = *(void *)(a4 + 8);
  void v11[4] = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[5] = AssociatedTypeWitness;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v14;
  size_t v15 = *(void *)(v14 + 64);
  void v11[7] = malloc(v15);
  v11[8] = malloc(v15);
  _GraphInputs.subscript.getter(a2, a3, v12);
  return _ViewInputs.subscript.modify;
}

uint64_t key path getter for _ViewInputs.time : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *key path setter for _ViewInputs.time : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *result;
  return result;
}

uint64_t _ViewInputs.time.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

_DWORD *(*_ViewInputs.time.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return _ViewInputs.time.modify;
}

_DWORD *_ViewInputs.time.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 8) = result[2];
  return result;
}

uint64_t key path setter for _ViewInputs.environment : _ViewInputs(int *a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(void *)(v6 + 88) = v5;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v6;
  int v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v8 | 0x20;
  }
  return result;
}

void (*_ViewInputs.environment.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  swift_beginAccess();
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 16);
  return _ViewInputs.environment.modify;
}

void _ViewInputs.environment.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v2 = *(_DWORD *)(*(void *)a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(void *)(v6 + 88) = v5;
  swift_release();
  *(void *)(v3 + 16) = v6;
  int v7 = *(_DWORD *)(v3 + 32);
  if ((v7 & 0x20) == 0) {
    *(_DWORD *)(v3 + 32) = v7 | 0x20;
  }

  free(v1);
}

uint64_t key path getter for _ViewInputs.viewPhase : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 24);
  return result;
}

_DWORD *key path setter for _ViewInputs.viewPhase : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 24) = *result;
  int v2 = *(_DWORD *)(a2 + 32);
  if ((v2 & 0x40) == 0) {
    *(_DWORD *)(a2 + 32) = v2 | 0x40;
  }
  return result;
}

uint64_t *(*_ViewInputs.viewPhase.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 24);
  return _ViewInputs.viewPhase.modify;
}

uint64_t *_ViewInputs.viewPhase.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = a1 + 1;
  *(_DWORD *)(v1 + 24) = v3;
  int v4 = *(_DWORD *)(v1 + 32);
  if ((v4 & 0x40) == 0) {
    *(_DWORD *)(v1 + 32) = v4 | 0x40;
  }
  return result;
}

uint64_t key path getter for _ViewInputs.transaction : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 28);
  return result;
}

_DWORD *key path setter for _ViewInputs.transaction : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = *result;
  return result;
}

_DWORD *(*_ViewInputs.transaction.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 28);
  return _ViewInputs.transaction.modify;
}

_DWORD *_ViewInputs.transaction.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 28) = result[2];
  return result;
}

_DWORD *key path setter for _ViewInputs.transform : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 60) = *result;
  *(_DWORD *)(a2 + 32) |= 4u;
  return result;
}

void _ViewInputs.changedDebugProperties.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 32);
}

_DWORD *_ViewInputs.changedDebugProperties.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*_ViewInputs.transform.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return _ViewInputs.transform.modify;
}

uint64_t _ViewInputs.transform.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    *(_DWORD *)(*(void *)result + 32) |= 4u;
  }
  return result;
}

_DWORD *key path setter for _ViewInputs.position : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *result;
  *(_DWORD *)(a2 + 32) |= 8u;
  return result;
}

uint64_t (*_ViewInputs.position.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return _ViewInputs.position.modify;
}

uint64_t _ViewInputs.position.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    *(_DWORD *)(*(void *)result + 32) |= 8u;
  }
  return result;
}

uint64_t (*_ViewInputs.containerPosition.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

_DWORD *key path setter for _ViewInputs.size : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 72) = *result;
  *(_DWORD *)(a2 + 32) |= 0x10u;
  return result;
}

uint64_t (*_ViewInputs.size.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return _ViewInputs.size.modify;
}

uint64_t _ViewInputs.size.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    *(_DWORD *)(*(void *)result + 32) |= 0x10u;
  }
  return result;
}

uint64_t variable initialization expression of _ViewInputs.safeAreaInsets()
{
  return *MEMORY[0x263F288F8];
}

uint64_t (*_ViewInputs.safeAreaInsets.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t variable initialization expression of _ViewInputs.containerSize()
{
  return *MEMORY[0x263F288F8];
}

uint64_t (*_ViewInputs.containerSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.requestsLayoutComputer.getter()
{
  return (*(unsigned __int8 *)(v0 + 36) >> 1) & 1;
}

uint64_t key path getter for _ViewInputs.requestsLayoutComputer : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 36) & 2) != 0;
  return result;
}

unsigned char *key path setter for _ViewInputs.requestsLayoutComputer : _ViewInputs(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t _ViewInputs.requestsLayoutComputer.setter(uint64_t result)
{
  if (result) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFFD | v2;
  return result;
}

unsigned char *(*_ViewInputs.requestsLayoutComputer.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 36) & 2) != 0;
  return _ViewInputs.requestsLayoutComputer.modify;
}

unsigned char *_ViewInputs.requestsLayoutComputer.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 2;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFFFFD | v1;
  return result;
}

uint64_t _ViewInputs.needsGeometry.getter()
{
  return (*(unsigned __int8 *)(v0 + 36) >> 5) & 1;
}

uint64_t key path getter for _ViewInputs.needsGeometry : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 36) & 0x20) != 0;
  return result;
}

unsigned char *key path setter for _ViewInputs.needsGeometry : _ViewInputs(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t _ViewInputs.needsGeometry.setter(uint64_t result)
{
  if (result) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFDF | v2;
  return result;
}

unsigned char *(*_ViewInputs.needsGeometry.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 36) & 0x20) != 0;
  return _ViewInputs.needsGeometry.modify;
}

unsigned char *_ViewInputs.needsGeometry.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 32;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFFFDF | v1;
  return result;
}

uint64_t _ViewInputs.needsDisplayListAccessibility.getter()
{
  return (*(unsigned __int8 *)(v0 + 36) >> 4) & 1;
}

uint64_t key path getter for _ViewInputs.needsDisplayListAccessibility : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 36) & 0x10) != 0;
  return result;
}

unsigned char *key path setter for _ViewInputs.needsDisplayListAccessibility : _ViewInputs(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t _ViewInputs.needsDisplayListAccessibility.setter(uint64_t result)
{
  if (result) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFEF | v2;
  return result;
}

unsigned char *(*_ViewInputs.needsDisplayListAccessibility.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 36) & 0x10) != 0;
  return _ViewInputs.needsDisplayListAccessibility.modify;
}

unsigned char *_ViewInputs.needsDisplayListAccessibility.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 16;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFFFEF | v1;
  return result;
}

uint64_t _ViewInputs.needsAccessibilityGeometry.getter()
{
  return (*(unsigned __int8 *)(v0 + 36) >> 6) & 1;
}

uint64_t key path getter for _ViewInputs.needsAccessibilityGeometry : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 36) & 0x40) != 0;
  return result;
}

unsigned char *key path setter for _ViewInputs.needsAccessibilityGeometry : _ViewInputs(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 64;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFBF | v2;
  return result;
}

uint64_t _ViewInputs.needsAccessibilityGeometry.setter(uint64_t result)
{
  if (result) {
    int v2 = 64;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFBF | v2;
  return result;
}

unsigned char *(*_ViewInputs.needsAccessibilityGeometry.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 36) & 0x40) != 0;
  return _ViewInputs.needsAccessibilityGeometry.modify;
}

unsigned char *_ViewInputs.needsAccessibilityGeometry.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 64;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFFFBF | v1;
  return result;
}

uint64_t _ViewInputs.needsAccessibilityViewResponders.getter()
{
  return *(unsigned __int8 *)(v0 + 36) >> 7;
}

uint64_t key path getter for _ViewInputs.needsAccessibilityViewResponders : _ViewInputs@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x80) != 0;
  return result;
}

unsigned char *key path setter for _ViewInputs.needsAccessibilityViewResponders : _ViewInputs(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 128;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFF7F | v2;
  return result;
}

uint64_t _ViewInputs.needsAccessibilityViewResponders.setter(uint64_t result)
{
  if (result) {
    int v2 = 128;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFF7F | v2;
  return result;
}

unsigned char *(*_ViewInputs.needsAccessibilityViewResponders.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(_DWORD *)(v1 + 36) & 0x80) != 0;
  return _ViewInputs.needsAccessibilityViewResponders.modify;
}

unsigned char *_ViewInputs.needsAccessibilityViewResponders.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 128;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFFF7F | v1;
  return result;
}

uint64_t _ViewInputs.stackOrientation.getter()
{
  if ((*(_DWORD *)(v0 + 36) & 4) != 0) {
    return (*(_DWORD *)(v0 + 36) & 8) == 0;
  }
  else {
    return 2;
  }
}

uint64_t key path getter for _ViewInputs.stackOrientation : _ViewInputs@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((*(_DWORD *)(result + 36) & 4) != 0) {
    char v2 = (*(_DWORD *)(result + 36) & 8) == 0;
  }
  else {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *key path setter for _ViewInputs.stackOrientation : _ViewInputs(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  int v3 = *(_DWORD *)(a2 + 36);
  if (v2 == 2)
  {
    unsigned int v4 = v3 & 0xFFFFFFFB;
  }
  else
  {
    if ((v2 & 1) == 0)
    {
      *(_DWORD *)(a2 + 36) = v3 | 0xC;
      return result;
    }
    unsigned int v4 = v3 | 4;
  }
  *(_DWORD *)(a2 + 36) = v4 & 0xFFFFFFF7;
  return result;
}

uint64_t _ViewInputs.stackOrientation.setter(uint64_t result)
{
  int v2 = *(_DWORD *)(v1 + 36);
  if (result == 2)
  {
    unsigned int v3 = v2 & 0xFFFFFFFB;
  }
  else
  {
    if ((result & 1) == 0)
    {
      *(_DWORD *)(v1 + 36) = v2 | 0xC;
      return result;
    }
    unsigned int v3 = v2 | 4;
  }
  *(_DWORD *)(v1 + 36) = v3 & 0xFFFFFFF7;
  return result;
}

uint64_t *(*_ViewInputs.stackOrientation.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if ((*(_DWORD *)(v1 + 36) & 4) != 0) {
    char v2 = (*(_DWORD *)(v1 + 36) & 8) == 0;
  }
  else {
    char v2 = 2;
  }
  *(unsigned char *)(a1 + 8) = v2;
  return _ViewInputs.stackOrientation.modify;
}

uint64_t *_ViewInputs.stackOrientation.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v4 = *((unsigned __int8 *)a1 + 8);
  uint64_t result = a1 + 1;
  char v3 = v4;
  int v5 = *(_DWORD *)(v1 + 36);
  if (v4 == 2)
  {
    unsigned int v6 = v5 & 0xFFFFFFFB;
  }
  else
  {
    if ((v3 & 1) == 0)
    {
      *(_DWORD *)(v1 + 36) = v5 | 0xC;
      return result;
    }
    unsigned int v6 = v5 | 4;
  }
  *(_DWORD *)(v1 + 36) = v6 & 0xFFFFFFF7;
  return result;
}

uint64_t _ViewInputs.supportsVFD.getter()
{
  return (*(unsigned __int8 *)(v0 + 37) >> 2) & 1;
}

uint64_t key path getter for _ViewInputs.changedDebugProperties : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

_DWORD *key path setter for _ViewInputs.changedDebugProperties : _ViewInputs(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *result;
  return result;
}

_DWORD *(*_ViewInputs.changedDebugProperties.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 32);
  return _ViewInputs.changedDebugProperties.modify;
}

_DWORD *_ViewInputs.changedDebugProperties.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 32) = result[2];
  return result;
}

__n128 _ViewInputs.init(_:position:size:transform:containerPosition:hostPreferenceKeys:)@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 40);
  int v10 = *MEMORY[0x263F288F8];
  *(void *)a7 = *(void *)a1;
  *(_DWORD *)(a7 + 8) = v7;
  *(void *)(a7 + 16) = v8;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a7 + 24) = result;
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)(a7 + 40) = v9;
  *(void *)(a7 + 48) = v12;
  *(_DWORD *)(a7 + 56) = a6;
  *(_DWORD *)(a7 + 60) = a4;
  *(_DWORD *)(a7 + 64) = a2;
  *(_DWORD *)(a7 + 68) = a5;
  *(_DWORD *)(a7 + 72) = a3;
  *(_DWORD *)(a7 + 76) = v10;
  *(_DWORD *)(a7 + 80) = v10;
  return result;
}

uint64_t static _ViewInputs.invalidInputs(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  unsigned int v5 = *MEMORY[0x263F288F8];
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  uint64_t v6 = MEMORY[0x263F8EE78];
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v6;
  *(int32x4_t *)(a2 + 56) = vdupq_n_s32(v5);
  *(_DWORD *)(a2 + 72) = v5;
  *(_DWORD *)(a2 + 76) = v5;
  *(_DWORD *)(a2 + 80) = v5;
  swift_retain();
  swift_retain();

  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall _ViewInputs.copyCaches()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  long long v10 = *(_OWORD *)(v1 + 48);
  long long v11 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  char v6 = *(unsigned char *)(v1 + 80);
  char v7 = *(unsigned char *)(v1 + 81);
  uint64_t v8 = *(void *)(v1 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v2;
  *(void *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v10;
  *(void *)(v9 + 64) = v4;
  *(void *)(v9 + 72) = v5;
  *(unsigned char *)(v9 + 80) = v6;
  *(unsigned char *)(v9 + 81) = v7;
  *(void *)(v9 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v0 + 16) = v9;
}

Swift::Void __swiftcall _ViewInputs.resetCaches()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(void *)(v5 + 88) = v4;
  swift_release();
  *(void *)(v0 + 16) = v5;
}

uint64_t _ViewInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _GraphInputs.append<A, B>(_:to:)(a1, a3, a3, a4, *(void *)(a5 + 8));
}

uint64_t static DynamicStackOrientation.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return static DynamicStackOrientation.defaultValue;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance DynamicStackOrientation@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static DynamicStackOrientation.defaultValue;
  return result;
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = v4;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v4 + 120);
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if (v10) {
      return *(unsigned int *)(*(void *)(v8 + 56) + 4 * v9);
    }
  }
  swift_beginAccess();
  id v12 = *(id *)(v5 + 24);
  AGGraphClearUpdate();
  id v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<EnvironmentValues> and conformance External<A>, &lazy cache variable for type metadata for External<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues);
  uint64_t v11 = Attribute.init<A>(body:value:flags:update:)();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(v5 + 120);
  *(void *)(v5 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a3, a4, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + 120) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v11;
}

uint64_t _ViewListInputs.withoutGeometryDependencies.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static ViewGraph.current.getter();
  specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewSize, 0);
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 0;
  specialized GraphHost.intern<A>(_:for:id:)((uint64_t)v3, (Swift::UInt)&type metadata for ViewTransform, 0);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _ViewInputs.withoutGeometryDependencies.getter(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.reset(delta:)(int a1, uint64_t a2)
{
  int v3 = a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for ResetDeltaModifier);
}

uint64_t static ResetDeltaModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 7);
  int v8 = *((_DWORD *)a2 + 8);
  int v7 = *((_DWORD *)a2 + 9);
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  int v13 = *((_DWORD *)a2 + 2);
  int v14 = *((_DWORD *)a2 + 20);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase();
  uint64_t v16 = v4;
  int v17 = v13;
  uint64_t v18 = v5;
  int v19 = Attribute.init<A>(body:value:flags:update:)();
  int v20 = v6;
  int v21 = v8 | 0x40;
  int v22 = v7;
  uint64_t v23 = v9;
  uint64_t v24 = v10;
  long long v25 = *(_OWORD *)(a2 + 7);
  uint64_t v26 = a2[9];
  int v27 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a3(v11, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for static Rule.initialValue.getter in conformance ResetDeltaModifier.ChildPhase(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

_DWORD *protocol witness for Rule.value.getter in conformance ResetDeltaModifier.ChildPhase@<X0>(_DWORD *a1@<X8>)
{
  int v2 = *(_DWORD *)AGGraphGetValue();
  uint64_t result = (_DWORD *)AGGraphGetValue();
  *a1 = v2 + 2 * *result;
  return result;
}

uint64_t _ViewInputs.resolvedShapeStyles(role:mode:)(unsigned __int8 *a1, unint64_t a2)
{
  unsigned __int8 v4 = *a1;
  int v5 = *((_DWORD *)v2 + 2);
  uint64_t v6 = v2[2];
  int v7 = *((_DWORD *)v2 + 20);
  uint64_t v12 = *v2;
  int v13 = v5;
  uint64_t v14 = v6;
  long long v8 = *(_OWORD *)(v2 + 5);
  long long v15 = *(_OWORD *)(v2 + 3);
  long long v16 = v8;
  long long v17 = *(_OWORD *)(v2 + 7);
  uint64_t v18 = v2[9];
  int v19 = v7;
  unsigned __int8 v11 = v4;
  swift_beginAccess();
  uint64_t v9 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v12, &v11, a2 | ((HIDWORD(a2) & 1) << 32));
  swift_endAccess();
  return v9;
}

uint64_t default argument 2 of ProtobufEncoder.cgFloatField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    int v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    int v5 = (int *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    int v5 = (unsigned __int16 *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOWORD(v4) = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    int v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t default argument 2 of DisplayList.Effect.clip(_:)()
{
  return 0;
}

uint64_t default argument 1 of DisplayList.Effect.mask(_:)()
{
  return 0;
}

void variable initialization expression of DisplayList.InterpolatorAnimation.value(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 1;
}

uint64_t variable initialization expression of DisplayList.InterpolatorAnimation.animation()
{
  return 0;
}

void variable initialization expression of DisplayList.Index.identity(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DisplayList.Index.serial()
{
  return 0;
}

void variable initialization expression of DisplayList.Index.archiveIdentity(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DisplayList.Index.archiveSerial()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.Index.restored()
{
  return 0;
}

uint64_t default argument 2 of ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)()
{
  return 0;
}

void default argument 0 of DisplayList.Item.canonicalize(options:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of _ColorMatrix.init(_:premultiplied:)()
{
  return 0;
}

void default argument 0 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void default argument 2 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)(_DWORD *a1@<X8>)
{
  *a1 = 160;
}

uint64_t default argument 3 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)()
{
  return 3;
}

void variable initialization expression of MouseEvent.binding(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of Event.binding(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t key path setter for EnvironmentValues.defaultPadding : EnvironmentValues(double *a1)
{
  return EnvironmentValues.defaultPadding.setter(*a1, a1[1], a1[2], a1[3]);
}

void default argument 1 of LayoutSubview.place(in:layoutDirection:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    int v4 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_13;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, a2, type metadata accessor for AGSubgraphRef, a3, (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  int v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  unint64_t result = swift_retain();
  uint64_t v7 = 0;
  long long v8 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    uint64_t v10 = (void *)*(v8 - 1);
    uint64_t v11 = *v8;
    if (!v10)
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    id v12 = v10;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    if (v13) {
      goto LABEL_15;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v14 = 8 * result;
    *(void *)(v4[6] + v14) = v12;
    *(void *)(v4[7] + v14) = v11;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_16;
    }
    void v4[2] = v17;
    v8 += 2;
    ++v7;
    if (v9 == v5) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests._updateRequests()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests._scrollToRequest()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests._scrollPosition()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.cycleDetector@<X0>(uint64_t a1@<X8>)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v6 = Context;
    swift_retain();

    swift_beginAccess();
    int v7 = *(_DWORD *)(v6 + 64);
    uint64_t result = swift_release();
    *(_DWORD *)a1 = v7;
    *(void *)(a1 + 4) = 0xFFFFFFFFLL;
    *(unsigned char *)(a1 + 12) = 0;
    return result;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.lastResetSeed()
{
  return 0;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.lastUpdateSeed()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.lastScrollPhase()
{
  return 0;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.scrollToChanged()
{
  return 0;
}

uint64_t variable initialization expression of ScrollStateEnqueueRequests.enqueuedUpdates()
{
  unint64_t v0 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<[ObjectIdentifier : ScrollStateRequest]>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t variable initialization expression of ScrollToScrollStateRequest.anchor()
{
  return 0;
}

uint64_t variable initialization expression of ScrollToScrollStateRequest._scrollable()
{
  return 0;
}

double variable initialization expression of ScrollStateRequestTransform.oldRequest@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of ScrollStateRequestTransform.oldResetSeed()
{
  return 0;
}

uint64_t variable initialization expression of ScrollGeometryState._transform()
{
  return 0;
}

uint64_t default argument 2 of GraphicsContext.ResolvedShading.gradient(_:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.cgFloatField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 0 of ScrollPhaseState.init(phase:velocity:)()
{
  return 0;
}

double default argument 1 of ScrollPhaseState.init(phase:velocity:)()
{
  return 0.0;
}

uint64_t variable initialization expression of ArchivedViewCore.Metadata.stableIDsAttachment()
{
  return 0;
}

uint64_t variable initialization expression of ArchivedViewCore.Metadata.dataAttachment()
{
  return 0;
}

uint64_t variable initialization expression of ArchivedViewCore.Metadata.preferredBundleLanguage()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_preferredLocalizations);

  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t variable initialization expression of ArchivedViewCore.Metadata._preferredCompositionLanguage()
{
  return CTParagraphStyleGetCompositionLanguageForLanguage();
}

uint64_t default argument 0 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)()
{
  return 13;
}

uint64_t default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)()
{
  return MEMORY[0x263F8EE78];
}

void default argument 5 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void variable initialization expression of SystemFormatStyle.DateReference.sizeVariant(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 2 of static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 0;
}

uint64_t default argument 2 of static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 1;
}

uint64_t default argument 5 of static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 0;
}

uint64_t default argument 2 of static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 0;
}

uint64_t default argument 5 of static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 8236;
}

uint64_t default argument 4 of static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return 1;
}

uint64_t default argument 2 of static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)()
{
  return 1;
}

uint64_t default argument 2 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 0;
}

uint64_t default argument 3 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 1;
}

uint64_t default argument 4 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 1;
}

uint64_t default argument 5 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 0;
}

uint64_t default argument 7 of static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return 8236;
}

uint64_t variable initialization expression of ScrollPosition.ViewID.anchor()
{
  return 0;
}

uint64_t variable initialization expression of ScrollPositionToValue.anchor()
{
  return 0;
}

uint64_t variable initialization expression of ValueToScrollPosition.anchor()
{
  return 0;
}

uint64_t variable initialization expression of GestureGraph.rootResponder()
{
  return 0;
}

uint64_t variable initialization expression of GestureGraph.delegate()
{
  return 0;
}

uint64_t variable initialization expression of GestureGraph.eventBindingManager()
{
  type metadata accessor for EventBindingManager();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 48) = MEMORY[0x263F8EE80];
  *(void *)(v0 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  return v0;
}

uint64_t variable initialization expression of GestureGraph._rootPhase()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of GestureGraph._gestureDebug()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of GestureGraph._gestureCategoryAttr()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of GestureGraph._gestureLabelAttr()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of GestureGraph._isCancellableAttr()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of GestureGraph._requiredTapCountAttr()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of GestureGraph._gestureDependencyAttr()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ScrollPositionBindingModifier.anchor()
{
  return 0;
}

uint64_t default argument 1 of SExpPrinter.init(tag:singleLine:)()
{
  return 0;
}

uint64_t default argument 1 of SExpPrinter.print(_:newline:)()
{
  return 1;
}

uint64_t variable initialization expression of DisplayList.GraphicsRenderer.oldCache()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of DisplayList.GraphicsRenderer.newCache()
{
  return MEMORY[0x263F8EE80];
}

void variable initialization expression of DisplayList.GraphicsRenderer.index(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

void variable initialization expression of DisplayList.GraphicsRenderer.time(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of DisplayList.GraphicsRenderer.stableIDs(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DisplayList.GraphicsRenderer.inTransitionGroup()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.GraphicsRenderer.stateHashes()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of GraphicsContext.fill(_:with:style:)()
{
  return 256;
}

uint64_t default argument 2 of GraphicsContext.draw(_:in:style:shading:)()
{
  return 256;
}

uint64_t default argument 2 of ResolvedStyledText.draw(in:with:applyingMarginOffsets:context:renderer:)()
{
  return 1;
}

uint64_t default argument 3 of ResolvedStyledText.draw(in:with:applyingMarginOffsets:context:renderer:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

double variable initialization expression of DisplayList.InterpolatorGroup.maxDuration()
{
  return INFINITY;
}

double variable initialization expression of DisplayList.UnaryInterpolatorGroup.layer@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double result = *(double *)&static Time.infinity;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(double *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 52) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

double variable initialization expression of DisplayList.UnaryInterpolatorGroup.contentsScale()
{
  return 0.0;
}

void variable initialization expression of DisplayList.UnaryInterpolatorGroup.rasterizationOptions(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 160;
  *(unsigned char *)(a1 + 16) = 3;
}

uint64_t variable initialization expression of ScrollPrefetchState.deadline()
{
  return 0;
}

uint64_t variable initialization expression of ScrollPrefetchState.edges()
{
  return 0;
}

uint64_t default argument 0 of ScrollPrefetchState.init(deadline:)()
{
  return 0;
}

double variable initialization expression of Image.LayoutMetrics.backgroundSize()
{
  return 0.0;
}

uint64_t variable initialization expression of Image.Resolved._basePlatformItemImage()
{
  return 0;
}

void variable initialization expression of Image.Resolved.backgroundShape(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void variable initialization expression of Image.NamedResolved.symbolRenderingMode(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t variable initialization expression of Image.NamedResolved.isTemplate()
{
  return 0;
}

uint64_t variable initialization expression of PlatformImageRepresentableContext.tintColor()
{
  return 0;
}

uint64_t variable initialization expression of PlatformImageRepresentableContext.foregroundStyle()
{
  return 0;
}

uint64_t variable initialization expression of ScrollTarget.anchor()
{
  return 0;
}

uint64_t variable initialization expression of RangeSet<>.IndexSequence.Iterator.index()
{
  return 0;
}

uint64_t variable initialization expression of RangeSet<>.IndexSequence.Iterator.offset()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  swift_checkMetadataState();
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t default argument 2 of ProtobufEncoder.stringField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.uintField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.intField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.floatField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.BOOLField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.doubleField<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 0 of ArrayWith2Inline.removeAll(keepingCapacity:)()
{
  return 0;
}

uint64_t variable initialization expression of _DisplayList_StableIdentityMap.map()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of _DisplayList_StableIdentityRoot.scopes()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of _DisplayList_StableIdentityRoot.map(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of _DisplayList_StableIdentityScope.map(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of _DisplayList_StableIdentityScope.serial()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.uintField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 1 of SystemHoverEffect.init(info:isEnabled:)()
{
  return 1;
}

float default argument 3 of static SystemColorDefinition.systemRGB(_:_:_:_:)()
{
  return 100.0;
}

void variable initialization expression of SystemHoverEffect.info(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t variable initialization expression of AttributeInvalidatingSubscriber.host()
{
  return 0;
}

double variable initialization expression of AttributeInvalidatingSubscriber.state@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t default argument 4 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)()
{
  return 1;
}

double variable initialization expression of _RotationEffect.Data.angle()
{
  return 0.0;
}

double variable initialization expression of _RotationEffect.Data.anchor()
{
  return 0.0;
}

void default argument 2 of _RotationEffect.Data.init(_:size:layoutDirection:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of HostPreferencesCombiner._values()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of HostPreferencesCombiner.children()
{
  return MEMORY[0x263F8EE78];
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    long long v8 = &v5[7 * a1];
    long long v9 = *((_OWORD *)v8 + 3);
    *(_OWORD *)a2 = *((_OWORD *)v8 + 2);
    *(_OWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 32) = *((_OWORD *)v8 + 4);
    *(void *)(a2 + 48) = v8[10];
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8 + 4, v8 + 11, 56 * (v7 - a1));
      void v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    long long v8 = &v5[3 * a1];
    uint64_t v10 = v8[4];
    long long v9 = v8 + 4;
    uint64_t v11 = *((_DWORD *)v9 + 2);
    id v12 = v9[2];
    *(void *)a2 = v10;
    *(_DWORD *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v12;
    char v13 = v6 - 1 - a1;
    if (v13 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 3, 24 * v13);
      void v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  long long v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  }
  unint64_t v6 = *((void *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = &v5[20 * a1];
    long long v9 = *((_OWORD *)v7 + 2);
    long long v8 = v7 + 32;
    uint64_t v10 = v8[4];
    uint64_t v11 = v6 - 1;
    *(_OWORD *)a2 = v9;
    *(_DWORD *)(a2 + 16) = v10;
    id v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 5, 20 * v12);
      *((void *)v5 + 2) = v11;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = &v5[14 * a1];
    long long v9 = v7[4];
    long long v8 = v7 + 4;
    uint64_t v10 = *((_WORD *)v8 + 4);
    uint64_t v11 = v6 - 1;
    id v12 = *((unsigned char *)v8 + 10);
    char v13 = v8[4];
    uint64_t v14 = v8[5];
    uint64_t v15 = *((_DWORD *)v8 + 12);
    BOOL v16 = *((unsigned char *)v8 + 52);
    uint64_t v17 = v8[9];
    uint64_t v18 = v8[10];
    int v19 = *((unsigned char *)v8 + 104);
    *(void *)a2 = v9;
    *(_WORD *)(a2 + 8) = v10;
    *(unsigned char *)(a2 + 10) = v12;
    *(_OWORD *)(a2 + 16) = *((_OWORD *)v8 + 1);
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 40) = v14;
    *(_DWORD *)(a2 + 48) = v15;
    *(unsigned char *)(a2 + 52) = v16;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(v8 + 7);
    *(void *)(a2 + 72) = v17;
    *(void *)(a2 + 80) = v18;
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(v8 + 11);
    *(unsigned char *)(a2 + 104) = v19;
    if ((uint64_t)(v11 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 14, 112 * (v11 - a1));
      void v5[2] = v11;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  long long v10;
  int v11;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  }
  unint64_t v6 = *((void *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    long long v8 = &v5[28 * a1];
    uint64_t v10 = *((_OWORD *)v8 + 2);
    long long v9 = v8 + 32;
    uint64_t v11 = *((_DWORD *)v9 + 6);
    *(_OWORD *)a2 = v10;
    *(void *)(a2 + 16) = *((void *)v9 + 2);
    *(_DWORD *)(a2 + 24) = v11;
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 28, 28 * (v7 - a1));
      *((void *)v5 + 2) = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  long long v10;
  char v11;
  int v12;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    long long v8 = &v5[6 * a1];
    uint64_t v10 = *((_OWORD *)v8 + 2);
    long long v9 = v8 + 4;
    uint64_t v11 = *((unsigned char *)v9 + 16);
    id v12 = *((_DWORD *)v9 + 10);
    *(_OWORD *)a2 = v10;
    *(unsigned char *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v9 + 3);
    *(_DWORD *)(a2 + 40) = v12;
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 6, 48 * (v7 - a1));
      void v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  unint64_t v14;
  int v15;
  char v16;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = &v5[15 * a1];
    long long v9 = *((_OWORD *)v7 + 2);
    uint64_t v10 = *((_OWORD *)v7 + 3);
    long long v8 = v7 + 4;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    uint64_t v11 = *((_OWORD *)v8 + 3);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)v8 + 2);
    *(_OWORD *)(a2 + 48) = v11;
    id v12 = *((_OWORD *)v8 + 5);
    char v13 = *((_OWORD *)v8 + 6);
    *(_OWORD *)(a2 + 64) = *((_OWORD *)v8 + 4);
    *(_OWORD *)(a2 + 80) = v12;
    uint64_t v14 = v6 - 1;
    uint64_t v15 = *((_DWORD *)v8 + 28);
    BOOL v16 = *((unsigned char *)v8 + 116);
    *(_OWORD *)(a2 + 96) = v13;
    *(_DWORD *)(a2 + 112) = v15;
    *(unsigned char *)(a2 + 116) = v16;
    if ((uint64_t)(v14 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 15, 120 * (v14 - a1));
      void v5[2] = v14;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  long long v10;
  int v11;
  uint64_t v12;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    long long v8 = &v5[4 * a1];
    uint64_t v10 = *((_OWORD *)v8 + 2);
    long long v9 = v8 + 4;
    uint64_t v11 = *((_DWORD *)v9 + 4);
    id v12 = v9[3];
    *(_OWORD *)a2 = v10;
    *(_DWORD *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v12;
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 4, 32 * (v7 - a1));
      void v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    long long v8 = &v5[2 * a1];
    long long v10 = *((_OWORD *)v8 + 2);
    long long v9 = v8 + 4;
    *a2 = v10;
    uint64_t v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 2, 16 * v11);
      void v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = a2(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      *uint64_t v2 = v5;
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t variable initialization expression of AccessibilityCustomAttributes.attributes()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

void variable initialization expression of BitVector.vector(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ConditionalMetadata.ids()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of CAHostingLayer.renderer()
{
  uint64_t v0 = type metadata accessor for CAHostingLayerPlatformDefinition() | 2;
  type metadata accessor for DisplayList.ViewRenderer();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 80) = 1;
  *(void *)(v1 + 16) = v0;
  return v1;
}

uint64_t variable initialization expression of CAHostingLayer.eventBindingManager()
{
  type metadata accessor for EventBindingManager();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 48) = MEMORY[0x263F8EE80];
  *(void *)(v0 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  return v0;
}

uint64_t variable initialization expression of CAHostingLayer.propertiesNeedingUpdate@<X0>(_WORD *a1@<X8>)
{
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ViewRendererHostProperties.all;
  return result;
}

void variable initialization expression of CAHostingLayer.renderingPhase(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CAHostingLayer.isRendering()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.isHiddenForReuse()
{
  return 0;
}

void variable initialization expression of CAHostingLayer.currentTimestamp(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CAHostingLayer.externalUpdateCount()
{
  return 0;
}

double variable initialization expression of CAHostingLayer.environmentOverride@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_24619B520;
  return result;
}

uint64_t default argument 1 of ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)()
{
  return 1;
}

double variable initialization expression of CAHostingLayer.safeAreaInsetsOverride@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

void variable initialization expression of CAHostingLayer.accessibilityVersion(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CAHostingLayer.canAdvanceTimeAutomatically()
{
  return 1;
}

uint64_t variable initialization expression of CAHostingLayer.allowFrameChanges()
{
  return 1;
}

void variable initialization expression of CAHostingLayer.nextTimerTime(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t variable initialization expression of CAHostingLayer.updateTimer()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.isUpdating()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.needsDeferredUpdate()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.focusedResponder()
{
  return 0;
}

uint64_t variable initialization expression of CAHostingLayer.$__lazy_storage_$_eventContext@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CAHostingLayerEvent.Context();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

double default argument 0 of ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)()
{
  return 0.0;
}

uint64_t default argument 1 of ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)()
{
  return 1;
}

uint64_t default argument 0 of EventBindingManager.reset(resetForwardedEventDispatchers:)()
{
  return 0;
}

double default argument 0 of ViewRendererHost.renderAsync(interval:targetTimestamp:)()
{
  return 0.0;
}

double variable initialization expression of LeafLayoutEngine.cache@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 1;
  return result;
}

void default argument 1 of TimelineSchedule.lazyEntries(within:mode:limit:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate(MEMORY[0x263F07490], a1);
}

void variable initialization expression of ResolvedGradient.Stop.interpolation(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t default argument 2 of ProtobufEncoder.floatField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t variable initialization expression of ResolvedGradientVector.stops()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of ResolvedGradientVector.colorSpace(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

float default argument 3 of Color.Resolved.init(linearRed:linearGreen:linearBlue:opacity:)()
{
  return 1.0;
}

float default argument 1 of Color.Resolved.init(linearWhite:opacity:)()
{
  return 1.0;
}

float default argument 1 of Color.Resolved.init(white:opacity:)()
{
  return 1.0;
}

float default argument 3 of Color.Resolved.init(linearDisplayP3Red:green:blue:opacity:)()
{
  return 1.0;
}

float default argument 3 of Color.Resolved.init(displayP3Red:green:blue:opacity:)()
{
  return 1.0;
}

uint64_t variable initialization expression of UpdateCycleDetector.updateSeed()
{
  uint64_t v0 = specialized static GraphHost.currentHost.getter();
  swift_beginAccess();
  uint64_t v1 = *(unsigned int *)(v0 + 64);
  swift_release();
  return v1;
}

uint64_t variable initialization expression of UpdateCycleDetector.lastSeed()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of UpdateCycleDetector.ttl()
{
  return 0;
}

uint64_t variable initialization expression of UpdateCycleDetector.hasLogged()
{
  return 0;
}

uint64_t default argument 1 of UpdateCycleDetector.dispatch(label:isDebug:)()
{
  return 0;
}

uint64_t variable initialization expression of ValueCycleDetector.updateSeed()
{
  uint64_t v0 = specialized static GraphHost.currentHost.getter();
  swift_beginAccess();
  uint64_t v1 = *(unsigned int *)(v0 + 64);
  swift_release();
  return v1;
}

uint64_t variable initialization expression of ValueCycleDetector.lastSeed()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of ValueCycleDetector.hasLogged()
{
  return 0;
}

uint64_t default argument 2 of ValueCycleDetector.dispatch(value:label:isDebug:)()
{
  return 0;
}

float default argument 3 of ResolvedShadowStyle.init(color:radius:offset:midpoint:kind:)()
{
  return 0.5;
}

void default argument 4 of ResolvedShadowStyle.init(color:radius:offset:midpoint:kind:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of LeafResponderFilter.$__lazy_storage_$_responder()
{
  return 0;
}

double variable initialization expression of ContentResponderHelper.size()
{
  return 0.0;
}

double variable initialization expression of ContentResponderHelper.transform@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of ContentResponderHelper.observers()
{
  return MEMORY[0x263F8EE78];
}

double variable initialization expression of ContentResponderHelper.cache@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of Cache3.store(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v8)((void *)(TupleTypeMetadata2 - 8), a1, 1, 1, TupleTypeMetadata2);
  v8(a2, 1, 1, TupleTypeMetadata2);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a3, 1, 1, TupleTypeMetadata2);
}

uint64_t default argument 1 of Array.sort<A>(by:reversed:)()
{
  return 0;
}

uint64_t variable initialization expression of EquatableOptionalObject.wrappedValue()
{
  return 0;
}

uint64_t variable initialization expression of DepthTrait._traits()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of SectionHeaderTrait._traits()
{
  return *MEMORY[0x263F288F8];
}

uint64_t default argument 2 of ProtobufEncoder.doubleField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 0 of OpenURLAction.init(isDefault:handler:)()
{
  return 0;
}

uint64_t key path setter for EnvironmentValues._openSensitiveURL : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  __int16 v5 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 33)) {
    __int16 v6 = 256;
  }
  else {
    __int16 v6 = 0;
  }
  v8[0] = *(void *)a1;
  v8[1] = v2;
  void v8[2] = v3;
  v8[3] = v4;
  __int16 v9 = v6 | v5;
  outlined copy of OpenURLAction.Handler(v1, v2, v3, v4, v5);
  specialized EnvironmentValues.subscript.setter((uint64_t)v8);

  return outlined consume of OpenURLAction.Handler(v1, v2, v3, v4, v5);
}

double variable initialization expression of Spring._mass()
{
  return 1.0;
}

uint64_t default argument 5 of SecondaryLayerGeometryQuery.init(alignment:layoutDirection:primaryPosition:primarySize:primaryLayoutComputer:secondaryLayoutComputer:)()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of SecondaryLayerGeometryQuery._alignment()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of SecondaryLayerGeometryQuery._primaryLayoutComputer()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of SecondaryLayerGeometryQuery._secondaryLayoutComputer()
{
  return *MEMORY[0x263F288F8];
}

uint64_t default argument 4 of SecondaryLayerGeometryQuery.init(alignment:layoutDirection:primaryPosition:primarySize:primaryLayoutComputer:secondaryLayoutComputer:)()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of Font.ResolvedTraits.width()
{
  return 0;
}

void variable initialization expression of Font.Context.legibilityWeight(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t default argument 1 of CTFontRef.scaled(by:toMultipleOf:maintainVisualWeight:)()
{
  return 0x3FD0000000000000;
}

uint64_t default argument 2 of CTFontRef.scaled(by:toMultipleOf:maintainVisualWeight:)()
{
  return 0;
}

uint64_t variable initialization expression of _ProposedSize.width()
{
  return 0;
}

uint64_t variable initialization expression of _ProposedSize.height()
{
  return 0;
}

void variable initialization expression of HitTestableEvent.binding(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AccessibilitySpeechAttributes.alwaysIncludesPunctuation()
{
  return 2;
}

uint64_t variable initialization expression of AccessibilitySpeechAttributes.spellsOutCharacters()
{
  return 2;
}

uint64_t variable initialization expression of AccessibilitySpeechAttributes.adjustedPitch()
{
  return 0;
}

void variable initialization expression of AccessibilitySpeechAttributes.announcementsPriority(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t variable initialization expression of AccessibilitySpeechAttributes.phoneticRepresentation()
{
  return 0;
}

uint64_t default argument 2 of Text.Style.resolveAccessibilitySpeechAttributes(into:environment:includeDefaultAttributes:)()
{
  return 1;
}

uint64_t default argument 2 of BlurStyle.init(radius:isOpaque:dither:hardEdges:)()
{
  return 0;
}

uint64_t default argument 3 of BlurStyle.init(radius:isOpaque:dither:hardEdges:)()
{
  return 0;
}

void default argument 3 of TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of LinkDestination.Configuration.init(url:isSensitive:)()
{
  return 0;
}

uint64_t variable initialization expression of LinkDestination._openURL@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  return result;
}

uint64_t variable initialization expression of LinkDestination._openSensitiveURL@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  return result;
}

uint64_t default argument 0 of View.transformTrait<A>(_:transform:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t variable initialization expression of ViewTraitCollection.storage()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of ContentShapes.shapes()
{
  return MEMORY[0x263F8EE78];
}

double variable initialization expression of _Rotation3DEffect.Data.angle()
{
  return 0.0;
}

double variable initialization expression of _Rotation3DEffect.Data.axis()
{
  return 0.0;
}

double variable initialization expression of _Rotation3DEffect.Data.anchor()
{
  return 0.0;
}

double variable initialization expression of _Rotation3DEffect.Data.perspective()
{
  return 0.0;
}

double variable initialization expression of _Rotation3DEffect.Data.flipWidth()
{
  return NAN;
}

void default argument 2 of _Rotation3DEffect.Data.init(_:size:layoutDirection:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of HoverEffectContentList.item(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t variable initialization expression of LayoutProxyAttributes._layoutComputer()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of LayoutProxyAttributes._traitsList()
{
  return *MEMORY[0x263F288F8];
}

void variable initialization expression of RasterizationOptions.colorMode(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of RasterizationOptions.flags(_DWORD *a1@<X8>)
{
  *a1 = 160;
}

uint64_t variable initialization expression of RasterizationOptions.maxDrawableCount()
{
  return 3;
}

uint64_t variable initialization expression of LayoutTrace.Recorder.frameActive()
{
  return 0;
}

void variable initialization expression of LayoutTrace.Recorder.cacheLookup(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 512;
}

unint64_t variable initialization expression of LayoutTrace.Recorder.alignmentTypes()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

uint64_t variable initialization expression of ViewStatePredicate.state@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

float variable initialization expression of _SymbolEffect.Options.speed()
{
  return 1.0;
}

uint64_t variable initialization expression of _SymbolEffect.Options.repeatCount()
{
  return 0x100000000;
}

void variable initialization expression of _SymbolEffect.PulseConfiguration.trigger(void *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.PulseConfiguration.layered()
{
  return 1;
}

void variable initialization expression of _SymbolEffect.BreatheConfiguration.trigger(void *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.BreatheConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.BreatheConfiguration.layered()
{
  return 1;
}

void variable initialization expression of _SymbolEffect.BounceConfiguration.trigger(void *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.BounceConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.BounceConfiguration.layered()
{
  return 1;
}

void variable initialization expression of _SymbolEffect.WiggleConfiguration.trigger(void *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.WiggleConfiguration.angle()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.WiggleConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.WiggleConfiguration.layered()
{
  return 1;
}

uint64_t variable initialization expression of _SymbolEffect.WiggleConfiguration.appliesRTL()
{
  return 0;
}

void variable initialization expression of _SymbolEffect.RotateConfiguration.trigger(void *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.RotateConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.RotateConfiguration.layered()
{
  return 1;
}

void variable initialization expression of _SymbolEffect.VariableColorConfiguration.trigger(void *a1@<X8>)
{
  *a1 = 0xF000000000000006;
}

uint64_t variable initialization expression of _SymbolEffect.VariableColorConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.ScaleConfiguration.level()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.ScaleConfiguration.layered()
{
  return 1;
}

uint64_t variable initialization expression of _SymbolEffect.HiddenConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.HiddenConfiguration.layered()
{
  return 1;
}

uint64_t variable initialization expression of _SymbolEffect.HiddenConfiguration.isHidden()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.ReplaceConfiguration.flags()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.ReplaceConfiguration.layered()
{
  return 1;
}

float variable initialization expression of _SymbolEffect.ReplaceConfiguration.speed()
{
  return 1.0;
}

uint64_t default argument 1 of _SymbolEffect.Identified.init(identifier:serial:effect:)()
{
  return 0;
}

uint64_t variable initialization expression of _SymbolEffect.Phase.added()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of _SymbolEffect.Phase.scale(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

void variable initialization expression of _SymbolEffect.Phase.scaleOptions(uint64_t a1@<X8>)
{
  *(void *)a1 = 1065353216;
  *(unsigned char *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

void variable initialization expression of _SymbolEffect.Phase.hidden(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 1;
}

uint64_t variable initialization expression of _SymbolEffect.Phase.isFirstUpdate()
{
  return 1;
}

uint64_t default argument 2 of ProtobufEncoder.uint64Field(_:_:defaultValue:)()
{
  return 0;
}

uint64_t variable initialization expression of SystemListStyleMetrics.Sidebar.headerFont()
{
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider, (uint64_t)&type metadata for Font.SystemProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x4034000000000000;
  *(void *)(result + 24) = 0x3FD3333333333333;
  *(unsigned char *)(result + 32) = 0;
  *(_WORD *)(result + 33) = 3588;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 1;
  return result;
}

uint64_t variable initialization expression of SystemListStyleMetrics.Sidebar.outlineDisclosureIsTinted()
{
  return 1;
}

uint64_t variable initialization expression of SystemListStyleMetrics.Sidebar.outlineDisclosureFont()
{
  return 0;
}

uint64_t variable initialization expression of SystemListStyleMetrics._sidebar@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider, (uint64_t)&type metadata for Font.SystemProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x4034000000000000;
  *(void *)(result + 24) = 0x3FD3333333333333;
  *(unsigned char *)(result + 32) = 0;
  *(_WORD *)(result + 33) = 3588;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 1;
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  return result;
}

double variable initialization expression of SystemShadowStyleMetrics.Grounding.intensity()
{
  return 0.5;
}

double variable initialization expression of SystemShadowStyleMetrics.Grounding.decayRate()
{
  return 0.3;
}

double variable initialization expression of SystemShadowStyleMetrics.Separated.radius()
{
  return 20.0;
}

double variable initialization expression of SystemShadowStyleMetrics.Separated.offsetX()
{
  return 5.0;
}

double variable initialization expression of SystemShadowStyleMetrics.Separated.offsetY()
{
  return 5.0;
}

double variable initialization expression of SystemShadowStyleMetrics.Separated.opacity()
{
  return 0.2;
}

CGColorRef variable initialization expression of SystemShadowStyleMetrics.Separated.cgColor()
{
  return CGColorCreateGenericGray(0.0, 0.0);
}

void variable initialization expression of SystemShadowStyleMetrics.grounding()
{
}

void variable initialization expression of SystemShadowStyleMetrics.separated()
{
}

void variable initialization expression of SystemHoverEffectStyleMetrics.highlightOpacity()
{
}

void variable initialization expression of SystemHoverEffectStyleMetrics.increaseFocusStateOpacity()
{
}

double variable initialization expression of SystemHoverEffectStyleMetrics.defaultBrightnessMultiplier()
{
  return 1.0;
}

void default argument 0 of Text.isStyled(options:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of LocalizedStringKey.StringInterpolation.key()
{
  return 0;
}

uint64_t variable initialization expression of LocalizedStringKey.StringInterpolation.arguments()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of LocalizedStringKey.StringInterpolation.seed(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of PlatformTextRepresentableContext.text()
{
  return 0;
}

uint64_t default argument 1 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)()
{
  return 1;
}

uint64_t default argument 1 of Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)()
{
  return 1;
}

void default argument 2 of Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)(void *a1@<X8>)
{
  *a1 = 128;
}

uint64_t default argument 0 of EnvironmentValues.resolveNSAttributes(includeDefaultAttributes:options:)()
{
  return 1;
}

void default argument 1 of EnvironmentValues.resolveNSAttributes(includeDefaultAttributes:options:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 2 of AccessibilityCustomContentEntry.init<A>(_:value:importance:)()
{
  return 0;
}

void default argument 1 of Text.resolveString(in:with:idiom:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of TextShape.exclusion()
{
  return 2;
}

uint64_t default argument 0 of EventListener.init(ignoresOtherEvents:)()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.StateType.active()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.StateType.oldPhase@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of FullGestureCallbacks.possible()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.changed()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.ended()
{
  return 0;
}

uint64_t variable initialization expression of FullGestureCallbacks.failed()
{
  return 0;
}

uint64_t default argument 1 of BlurStyle.init(radius:isOpaque:dither:hardEdges:)()
{
  return 0;
}

uint64_t default argument 6 of GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)()
{
  return 1;
}

void default argument 7 of GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

double default argument 0 of VariableBlurStyle.init(radius:isOpaque:dither:mask:)()
{
  return 0.0;
}

uint64_t default argument 1 of VariableBlurStyle.init(radius:isOpaque:dither:mask:)()
{
  return 0;
}

uint64_t default argument 2 of VariableBlurStyle.init(radius:isOpaque:dither:mask:)()
{
  return 0;
}

uint64_t default argument 3 of BackdropEffect.init(scale:color:filters:captureOnly:)()
{
  return 0;
}

void default argument 1 of _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 5;
}

uint64_t variable initialization expression of AccessibilityStyledTextContentView.renderer()
{
  return 0;
}

uint64_t default argument 3 of AccessibilityStyledTextContentView.init(text:unresolvedText:renderer:needsDrawingGroup:)()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextContentView.renderer()
{
  return 0;
}

uint64_t default argument 2 of StyledTextContentView.init(text:renderer:needsDrawingGroup:)()
{
  return 0;
}

uint64_t variable initialization expression of TextLayoutProperties.lineLimit()
{
  return 0;
}

uint64_t variable initialization expression of TextLayoutProperties.lowerLineLimit()
{
  return 0;
}

uint64_t variable initialization expression of ResolvedStyledText.scaleFactorOverride()
{
  return 0;
}

double variable initialization expression of ResolvedStyledText._computedMaxFontMetrics@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

uint64_t default argument 2 of ResolvedStyledText.layoutValue(in:with:applyingMarginOffsets:)()
{
  return 1;
}

uint64_t default argument 0 of Text.ResolvedProperties.CustomAttachments.init(characterIndices:)()
{
  return MEMORY[0x263F8EE78];
}

double default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)()
{
  return 0.0;
}

void default argument 0 of ArchivedViewInput.Value.init(flags:deploymentVersion:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of ArchivedViewInput.Value.init(flags:deploymentVersion:)(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t default argument 4 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)()
{
  return 0;
}

void default argument 5 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)()
{
  return MEMORY[0x263F8EE78];
}

double default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return 0.0;
}

void default argument 3 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(_WORD *a1@<X8>)
{
  *a1 = 512;
}

uint64_t default argument 4 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return 0;
}

void default argument 5 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(_WORD *a1@<X8>)
{
  *a1 = 0;
}

double default argument 6 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  double result = -0.0;
  *(_OWORD *)(a1 + 40) = xmmword_24619B530;
  return result;
}

void default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 11 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return 0;
}

unint64_t variable initialization expression of AttributeCountTestInfo.attributeCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

unint64_t variable initialization expression of AttributeCountTestInfo.updateCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

unint64_t variable initialization expression of AttributeCountTestInfo.changeCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

unint64_t variable initialization expression of AttributeCountTestInfo.history()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.title()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.unitLabel()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.categoryLabels()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.minimumValue()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.maximumValue()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.gridlinePositions()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.values()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.AxisConfiguration.valueDescriptions()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.supportsSonification()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.sonificationDuration()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.includesTrendlineInSonification()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.supportsSummarization()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityDataSeriesConfiguration.xAxisConfiguration@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(v3);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration);
}

void variable initialization expression of PanEvent.binding(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of _DynamicPropertyBuffer.contents(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t variable initialization expression of RepresentableChartDescriptorStorage.cachedDescriptor()
{
  return 0;
}

uint64_t variable initialization expression of RepresentableChartDescriptorStorage.needsUpdate()
{
  return 0;
}

uint64_t variable initialization expression of RepresentableChartDescriptorStorage.generation()
{
  return 0;
}

uint64_t variable initialization expression of Text.LineStyle.color()
{
  return 0;
}

uint64_t variable initialization expression of Text.LineStyle.Resolved.color()
{
  return 0;
}

uint64_t default argument 0 of _GraphValue.unsafeCast<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t variable initialization expression of Stack3.store(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56);
  v8(a4 - 8, a1, 1, 1);
  v8((uint64_t)a2, 1, 1, a4);

  return v8(a3, 1, 1, a4);
}

void variable initialization expression of SystemFormatStyle.DateOffset.sizeVariant(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of SystemFormatStyle.DateOffset.updateFrequency(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of SystemFormatStyle.DateOffset.watchIdiom()
{
  return 0;
}

uint64_t variable initialization expression of SystemFormatStyle.DateOffset.forceUnitsAoDStyle()
{
  return 0;
}

double variable initialization expression of VariableBlurStyle.radius()
{
  return 0.0;
}

uint64_t variable initialization expression of VariableBlurStyle.isOpaque()
{
  return 0;
}

uint64_t variable initialization expression of VariableBlurStyle.dither()
{
  return 0;
}

double variable initialization expression of VariableBlurStyle.mask@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 96) = 512;
  return result;
}

uint64_t variable initialization expression of Material.flags()
{
  return 0;
}

uint64_t default argument 2 of MaterialView.init(material:shape:ignoredSafeAreaEdges:)()
{
  return 0;
}

uint64_t variable initialization expression of MaterialView.ignoredSafeAreaEdges()
{
  return 0;
}

void default argument 5 of _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

float variable initialization expression of _ShapeStyle_Pack.Style.opacity()
{
  return 1.0;
}

uint64_t variable initialization expression of _ShapeStyle_Pack.Style.effects()
{
  return MEMORY[0x263F8EE78];
}

float variable initialization expression of _ShapeStyle_Pack.Effect.opacity()
{
  return 1.0;
}

uint64_t default argument 2 of static _ShapeStyle_Pack.style(_:name:level:)()
{
  return 0;
}

uint64_t default argument 2 of static _ShapeStyle_Pack.fill(_:name:level:)()
{
  return 0;
}

uint64_t variable initialization expression of ResolvedMulticolorStyle.bundle()
{
  return 0;
}

uint64_t variable initialization expression of _ShapeStyle_RenderedShape.interpolatorData()
{
  return 0;
}

float variable initialization expression of _ShapeStyle_RenderedShape.opacity()
{
  return 1.0;
}

uint64_t variable initialization expression of _ShapeStyle_RenderedShape.layerNeeds()
{
  return 0;
}

uint64_t variable initialization expression of _ShapeStyle_RenderedLayers.group()
{
  return 0;
}

double variable initialization expression of _ShapeStyle_RenderedLayers.layers@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0x80000000;
  return result;
}

uint64_t variable initialization expression of _ShapeStyle_InterpolatorGroup.layers()
{
  return MEMORY[0x263F8EE78];
}

double variable initialization expression of _ShapeStyle_InterpolatorGroup.contentsScale()
{
  return 0.0;
}

uint64_t variable initialization expression of _ShapeStyle_InterpolatorGroup.serial()
{
  return 0;
}

uint64_t variable initialization expression of _ShapeStyle_InterpolatorGroup.cursor()
{
  return 0;
}

double variable initialization expression of StyledTextResponder.helper@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v2;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

uint64_t variable initialization expression of StyledTextResponder.childSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextResponder.childViewSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextResponder.$__lazy_storage_$_gestureGraph()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextResponder.$__lazy_storage_$_bindingBridge()
{
  return 0;
}

uint64_t variable initialization expression of StyledTextResponder._gestureContainer()
{
  return 0;
}

void default argument 3 of ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of MultiViewResponder._children()
{
  return MEMORY[0x263F8EE78];
}

double variable initialization expression of MultiViewResponder.cache@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of MultiViewResponder.observers()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of DefaultLayoutViewResponder.childSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of DefaultLayoutViewResponder.childViewSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of DefaultLayoutViewResponder.invalidateChildren()
{
  return 0;
}

uint64_t variable initialization expression of ViewResponder.host()
{
  return 0;
}

uint64_t variable initialization expression of ViewResponder.parent()
{
  return 0;
}

double variable initialization expression of ViewResponder.ContainsPointsCache.storage@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t default argument 0 of ViewResponder.printTree(depth:)()
{
  return 0;
}

double default argument 0 of BlurStyle.init(radius:isOpaque:dither:hardEdges:)()
{
  return 0.0;
}

uint64_t variable initialization expression of _ShapeStyle_ResolverMode.bundle()
{
  return 0;
}

uint64_t default argument 0 of _ShapeStyle_ResolverMode.init(foregroundLevels:options:)()
{
  return 0;
}

void default argument 1 of _ShapeStyle_ResolverMode.init(foregroundLevels:options:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ShapeStyleResolver._style()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ShapeStyleResolver._mode()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ShapeStyleResolver.tracker()
{
  type metadata accessor for PropertyList.Tracker();
  uint64_t v0 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  uint64_t v2 = MEMORY[0x263F8EE80];
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t default argument 1 of ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ProtobufEncoder.buffer()
{
  return 0;
}

uint64_t variable initialization expression of ProtobufEncoder.size()
{
  return 0;
}

uint64_t variable initialization expression of ProtobufEncoder.capacity()
{
  return 0;
}

uint64_t variable initialization expression of ProtobufEncoder.stack()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of ProtobufEncoder.userInfo()
{
  return MEMORY[0x263F8EE80];
}

uint64_t default argument 2 of ProtobufEncoder.BOOLField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.intField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.int64Field(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.fixed64Field(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.stringField(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.uint64Field<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.int64Field<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 2 of ProtobufEncoder.fixed64Field<A>(_:_:defaultValue:)()
{
  return 0;
}

uint64_t default argument 0 of DynamicPropertyBox.getState<A>(type:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

void variable initialization expression of DynamicPropertyCache.Fields.behaviors(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 3 of static DynamicProperty.addTreeValue<A>(_:at:in:flags:)(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 4 of static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 4 of static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DistanceGesture.StateType.start()
{
  return 0;
}

double variable initialization expression of DistanceGesture.StateType.maxDistance()
{
  return 0.0;
}

double default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)()
{
  return 0.0;
}

double default argument 1 of DistanceGesture.init(minimumDistance:maximumDistance:)()
{
  return INFINITY;
}

uint64_t variable initialization expression of Shader.arguments()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of Shader.options(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of Shader.ResolvedShader.rbShader()
{
  return 0;
}

void variable initialization expression of GraphicsImage.contents(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
}

uint64_t variable initialization expression of GraphicsImage.maskColor()
{
  return 0;
}

void variable initialization expression of GraphicsImage.allowedDynamicRange(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t default argument 1 of GraphicsImage.render(at:prefersMask:)()
{
  return 0;
}

uint64_t variable initialization expression of ResolvedVectorGlyph.preservesVectorRepresentation()
{
  return 0;
}

double variable initialization expression of GraphicsContext.Storage.environmentOverride@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_24619B520;
  return result;
}

float variable initialization expression of GraphicsContext.Storage.opacity()
{
  return 1.0;
}

uint64_t variable initialization expression of GraphicsContext.Storage.blendMode()
{
  return 0;
}

double variable initialization expression of GraphicsContext.Storage.shapeDistance()
{
  return NAN;
}

double default argument 1 of GraphicsContext.Shading.Storage.tiledImage(_:)()
{
  return 0.0;
}

double default argument 2 of GraphicsContext.Shading.Storage.tiledImage(_:)()
{
  return 0.0;
}

double default argument 3 of GraphicsContext.Shading.Storage.tiledImage(_:)()
{
  return 1.0;
}

uint64_t default argument 4 of static GraphicsContext.Shading.angularGradient(_:center:startAngle:endAngle:options:)()
{
  return 0;
}

{
  return 0;
}

double default argument 1 of GraphicsContext.ResolvedShading.tiledImage(_:)()
{
  return 0.0;
}

double default argument 2 of GraphicsContext.ResolvedShading.tiledImage(_:)()
{
  return 0.0;
}

double default argument 3 of GraphicsContext.ResolvedShading.tiledImage(_:)()
{
  return 1.0;
}

double variable initialization expression of GraphicsContext.ResolvedImage.shading@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 72) = -1;
  return result;
}

void variable initialization expression of Text.DateStyle.unitConfiguration(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 3;
}

uint64_t default argument 1 of Text.init(progressInterval:countsDown:)()
{
  return 0;
}

uint64_t variable initialization expression of ReferenceDateModifier.date@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate(MEMORY[0x263F07490], a1);
}

uint64_t variable initialization expression of DynamicContainer.Info.items()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of DynamicContainer.Info.indexMap()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of DynamicContainer.Info.displayMap()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.Info.removedCount()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.Info.unusedCount()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.Info.allUnary()
{
  return 1;
}

uint64_t variable initialization expression of DynamicContainer.Info.seed()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.listener()
{
  return 0;
}

double variable initialization expression of DynamicContainer.ItemInfo.zIndex()
{
  return 0.0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.removalOrder()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.precedingViewCount()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.resetSeed()
{
  return 0;
}

uint64_t variable initialization expression of DynamicContainer.ItemInfo.phase()
{
  return 3;
}

uint64_t default argument 3 of RootGeometry.init(layoutDirection:proposedSize:safeAreaInsets:childLayoutComputer:)()
{
  return *MEMORY[0x263F288F8];
}

uint64_t default argument 0 of _PositionAwarePlacementContext.safeAreaInsets(matching:)()
{
  return -1;
}

uint64_t variable initialization expression of LayoutProperties.stackOrientation()
{
  return 2;
}

uint64_t variable initialization expression of LayoutProperties.isDefaultEmptyLayout()
{
  return 0;
}

uint64_t variable initialization expression of LayoutProperties.isIdentityUnaryLayout()
{
  return 0;
}

void variable initialization expression of ViewSpacing.layoutDirection(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

double default argument 1 of LayoutSubview.place(at:anchor:dimensions:)()
{
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  return *(double *)&static UnitPoint.topLeading;
}

uint64_t variable initialization expression of _IdentifiedViewProxy.adjustment()
{
  return 0;
}

double variable initialization expression of _IdentifiedViewProxy.accessibilityNodeStorage@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of Text.Encapsulation.lineWeight()
{
  return 0;
}

uint64_t variable initialization expression of Text.Encapsulation.color()
{
  return 0;
}

uint64_t variable initialization expression of Text.Encapsulation.minimumWidth()
{
  return 0;
}

void variable initialization expression of Text.Encapsulation.platterSize(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

double variable initialization expression of ViewGraphRenderContext.contentsScale()
{
  return 0.0;
}

uint64_t variable initialization expression of ViewGraphRenderContext.opaqueBackground()
{
  return 0;
}

uint64_t variable initialization expression of TypesettingConfiguration.language@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypesettingLanguage(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static TypesettingLanguage.automatic);
  return outlined init with copy of TypesettingLanguage(v3, a1, type metadata accessor for TypesettingLanguage);
}

uint64_t default argument 9 of NamedImage.BitmapKey.init(catalogKey:name:scale:location:layoutDirection:locale:gamut:idiom:subtype:horizontalSizeClass:verticalSizeClass:)()
{
  return 0;
}

uint64_t default argument 10 of NamedImage.BitmapKey.init(catalogKey:name:scale:location:layoutDirection:locale:gamut:idiom:subtype:horizontalSizeClass:verticalSizeClass:)()
{
  return 0;
}

void variable initialization expression of NamedImage.BitmapInfo.renderingMode(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

double variable initialization expression of NamedImage.BitmapInfo.resizingInfo@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 2;
  return result;
}

uint64_t variable initialization expression of NamedImage.Cache.archiveDelegate()
{
  return 0;
}

uint64_t variable initialization expression of NamedImage.Cache._data()
{
  return MEMORY[0x263F8EE80];
}

void variable initialization expression of Image.NamedImageProvider.backupLocation(void *a1@<X8>)
{
  *a1 = 2;
}

double variable initialization expression of Image.NamedImageProvider.label@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)&double result = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 16) = xmmword_24619B540;
  return result;
}

uint64_t variable initialization expression of _ViewListInputs._traits()
{
  return *MEMORY[0x263F288F8];
}

void variable initialization expression of _ViewListInputs.traitKeys(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE88];
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t default argument 1 of _ViewListInputs.init(_:implicitID:options:)()
{
  return 0;
}

void default argument 2 of _ViewListInputs.init(_:implicitID:options:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _ViewListCountInputs.customModifierTypes()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of _ViewListOutputs.staticCount()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_IteratorStyle.value()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_SublistTransform.items()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of _ViewList_ID._index()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_ID.explicitIDs()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of _ViewList_ID.Canonical.explicitID(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _ViewList_Section.isHierarchical()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_Subgraph.refcount()
{
  return 1;
}

uint64_t variable initialization expression of _ViewList_ReleaseElements.base()
{
  return 0;
}

uint64_t default argument 1 of ShapeStyle.resolveBackgroundMaterial(in:level:)()
{
  return 0;
}

uint64_t default argument 1 of ShapeStyle.resolveGradient(in:level:)()
{
  return 0;
}

uint64_t variable initialization expression of _ShapeStyle_Shape.foregroundStyle()
{
  return 0;
}

double variable initialization expression of _ShapeStyle_Shape.bounds@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

void variable initialization expression of _ShapeStyle_Shape.activeRecursiveStyles(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of _ShapeStyle_ShapeType.result(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

unint64_t variable initialization expression of LocationBox._cache@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  return result;
}

unint64_t variable initialization expression of LocationProjectionCache.cache()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

uint64_t variable initialization expression of ScrapeableContent.Node.children()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of ScrapeableContent.Node.moved()
{
  return 0;
}

void variable initialization expression of _ViewOutputs.preferences(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t variable initialization expression of _ViewOutputs._layoutComputer()
{
  return *MEMORY[0x263F288F8];
}

void variable initialization expression of SpatialEvent.binding(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of SpatialEvent.kind(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

unint64_t variable initialization expression of ScrollAnchorStorage.anchors()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

uint64_t variable initialization expression of ScrollAnchorStorage.defaultValue()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.ViewUpdater.host()
{
  return 0;
}

void variable initialization expression of DisplayList.ViewUpdater.seed(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of DisplayList.ViewUpdater.asyncSeed(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of DisplayList.ViewUpdater.nextUpdate(void *a1@<X8>)
{
  *a1 = 0;
}

double variable initialization expression of DisplayList.ViewUpdater.lastEnv@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for invalid != -1) {
    swift_once();
  }
  double result = *(double *)&static DisplayList.ViewRenderer.Environment.invalid;
  *a1 = static DisplayList.ViewRenderer.Environment.invalid;
  return result;
}

void variable initialization expression of DisplayList.ViewUpdater.lastList(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
}

void variable initialization expression of DisplayList.ViewUpdater.lastTime(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of DisplayList.ViewUpdater.isValid()
{
  return 1;
}

uint64_t variable initialization expression of DisplayList.ViewUpdater.wasValid()
{
  return 1;
}

uint64_t variable initialization expression of ViewDecoders.decodableFactoryTypes()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of ViewDecoders.hasRegisteredStandardDecoders()
{
  return 0;
}

uint64_t default argument 0 of Gesture.discrete(_:)()
{
  return 1;
}

double default argument 1 of Gesture.repeatCount(_:maximumDelay:)()
{
  return 0.35;
}

double default argument 1 of RepeatGesture.init(count:maximumDelay:)()
{
  return 0.35;
}

void variable initialization expression of SubscriptionLifetime.subscriptionID(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of SubscriptionLifetime.state()
{
  type metadata accessor for SubscriptionLifetime.StateType();

  return swift_storeEnumTagMultiPayload();
}

double default argument 0 of Gesture.duration(minimum:maximum:)()
{
  return 0.0;
}

double default argument 1 of Gesture.duration(minimum:maximum:)()
{
  return INFINITY;
}

uint64_t default argument 2 of DurationGesture.init(minimumDuration:maximumDuration:trackFromEventStart:)()
{
  return 0;
}

double default argument 0 of DurationGesture.init(minimumDuration:maximumDuration:trackFromEventStart:)()
{
  return 0.0;
}

double default argument 1 of DurationGesture.init(minimumDuration:maximumDuration:trackFromEventStart:)()
{
  return INFINITY;
}

uint64_t default argument 1 of Gesture.category(_:includeChildren:)()
{
  return 1;
}

double variable initialization expression of Path.PathBox.data@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t default argument 1 of Path.contains(points:eoFill:origin:)()
{
  return 0;
}

{
  return 0;
}

double default argument 2 of Path.contains(points:eoFill:origin:)()
{
  return 0.0;
}

{
  return 0.0;
}

void variable initialization expression of DisplayList.ViewRenderer.configuration(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t variable initialization expression of DisplayList.ViewRenderer.host()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.ViewRenderer.state()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.ViewRenderer.renderer()
{
  return 0;
}

uint64_t variable initialization expression of DisplayList.ViewRenderer.configChanged()
{
  return 1;
}

uint64_t variable initialization expression of OptionalEdgeInsets.top()
{
  return 0;
}

uint64_t variable initialization expression of OptionalEdgeInsets.leading()
{
  return 0;
}

uint64_t variable initialization expression of OptionalEdgeInsets.bottom()
{
  return 0;
}

uint64_t variable initialization expression of OptionalEdgeInsets.trailing()
{
  return 0;
}

void (*default argument 1 of CGRect.outset(by:layoutDirection:)())(unsigned char *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LayoutDirectionKey;
}

void variable initialization expression of Spacing.Key.category(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of PlatformDrawableContent.State.mode(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t variable initialization expression of PlatformDrawableContent.State._renderer()
{
  return 0;
}

uint64_t variable initialization expression of AppearanceEffect.lastValue()
{
  return 1;
}

uint64_t variable initialization expression of AppearanceEffect.isVisible()
{
  return 0;
}

uint64_t variable initialization expression of AppearanceEffect.resetSeed()
{
  return 0;
}

uint64_t variable initialization expression of AppearanceEffect.node()
{
  return *MEMORY[0x263F288F8];
}

uint64_t default argument 0 of View.preferenceValue<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t variable initialization expression of PreferenceValueAttribute.source()
{
  return 0;
}

float default argument 0 of BackdropEffect.init(scale:color:filters:captureOnly:)()
{
  return 1.0;
}

uint64_t default argument 2 of BackdropEffect.init(scale:color:filters:captureOnly:)()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of AccessibilityBoundedNumber.lowerBound(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of AccessibilityBoundedNumber.upperBound(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of AccessibilityBoundedNumber.stride(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AccessibilityProgressValue.percent()
{
  return 0;
}

double variable initialization expression of AccessibilityValueStorage.value@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void variable initialization expression of CodableAccessibilityValueStorage.text(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 255;
}

double variable initialization expression of CodableAccessibilityValueStorage.value@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t default argument 2 of AccessibilityText.init(texts:environment:optional:idiom:)()
{
  return 0;
}

uint64_t variable initialization expression of BloomFilter.value()
{
  return 0;
}

uint64_t variable initialization expression of GraphHost.Data.graph()
{
  return 0;
}

uint64_t variable initialization expression of GraphHost.constants()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of GraphHost.isInstantiated()
{
  return 0;
}

uint64_t variable initialization expression of GraphHost.hostPreferenceValues()
{
  return 0;
}

void variable initialization expression of GraphHost.lastHostPreferencesSeed(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t variable initialization expression of GraphHost.pendingTransactions()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of GraphHost.inTransaction()
{
  return 0;
}

uint64_t variable initialization expression of GraphHost.continuations()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of GraphHost.mayDeferUpdate()
{
  return 1;
}

void variable initialization expression of GraphHost.removedState(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 0 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)()
{
  return 0;
}

void default argument 3 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t default argument 4 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)()
{
  return 1;
}

uint64_t default argument 0 of GraphHost.asyncTransaction(_:id:_:)()
{
  return 0;
}

uint64_t default argument 0 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)()
{
  return 0;
}

void default argument 3 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t default argument 0 of GraphHost.emptyTransaction(_:)()
{
  return 0;
}

uint64_t (*default argument 1 of GraphHost.finishTransactionUpdate(in:postUpdate:)())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t default argument 0 of static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:)()
{
  return 0;
}

uint64_t default argument 1 of static ProcessEnvironment.BOOL(forKey:defaultValue:)()
{
  return 0;
}

void variable initialization expression of VectorImageLayer.location(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t variable initialization expression of VectorImageLayer.name()
{
  return 0;
}

uint64_t default argument 2 of VectorImageLayer.image(size:imageScale:prefersMask:)()
{
  return 0;
}

uint64_t variable initialization expression of CachedVectorImageContents.imageCache()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of PreferenceValues.entries()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of WhitespaceRemovingFormatStyle.prefixValue@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t variable initialization expression of EnvironmentValues._plist()
{
  return 0;
}

uint64_t variable initialization expression of ScaledMetric._dynamicTypeSize@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t variable initialization expression of ScaledMetric._pixelLength()
{
  return swift_getKeyPath();
}

uint64_t variable initialization expression of PreferencesOutputs.preferences()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of PreferencesOutputs.debugProperties(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CoreGlue2.CodableAttachmentCellTypeResult.value()
{
  return 0;
}

uint64_t default argument 0 of Semantics.test<A>(as:_:)()
{
  return swift_getKeyPath();
}

void variable initialization expression of Semantics.Forced.deploymentTarget(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

uint64_t variable initialization expression of VelocitySampler.sample1@<X0>(uint64_t a1@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);

  return v3(a1, 1, 1, TupleTypeMetadata2);
}

double variable initialization expression of VelocitySampler.previousSampleWeight()
{
  return 0.75;
}

uint64_t variable initialization expression of AnimatableVelocitySampler.base@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return VelocitySampler.init()(a1);
}

uint64_t variable initialization expression of AddGestureModifier.name()
{
  return 0;
}

uint64_t default argument 2 of AddGestureModifier.init(_:name:gestureMask:)()
{
  return 3;
}

void default argument 1 of AccessibilityLabelStorage.init(texts:placement:)(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t variable initialization expression of CachedEnvironment.items()
{
  return MEMORY[0x263F8EE78];
}

double variable initialization expression of CachedEnvironment.animatedFrame@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 48) = 256;
  return result;
}

unint64_t variable initialization expression of CachedEnvironment.resolvedShapeStyles()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

uint64_t variable initialization expression of HoverEffectContext.Properties.isDisabled()
{
  return 0;
}

void variable initialization expression of HoverEffectContext.State.leafContext(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 2 of GraphicsContext.draw(_:foregroundColor:options:)()
{
  return 0;
}

{
  return 0;
}

uint64_t variable initialization expression of DefaultRule._weakValue()
{
  return 0;
}

uint64_t variable initialization expression of AnimatableAttributeHelper.previousModelData@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t variable initialization expression of AnimatableAttributeHelper.animatorState()
{
  return 0;
}

uint64_t variable initialization expression of AnimatableAttributeHelper.resetSeed()
{
  return 0;
}

void variable initialization expression of AnimatorState.nextTime(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AnimatorState.previousAnimationValue()
{
  return dispatch thunk of static AdditiveArithmetic.zero.getter();
}

uint64_t variable initialization expression of AnimatorState.reason()
{
  return 0x100000000;
}

uint64_t variable initialization expression of AnimatorState.phase()
{
  return 0;
}

uint64_t variable initialization expression of AnimatorState.listeners()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of AnimatorState.logicalListeners()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of AnimatorState.isLogicallyComplete()
{
  return 0;
}

uint64_t variable initialization expression of AnimatorState.forks()
{
  type metadata accessor for AnimatorState.Fork();

  return Array.init()();
}

uint64_t variable initialization expression of StoredLocationBase._wasRead()
{
  return 0;
}

uint64_t variable initialization expression of StoredLocation.host()
{
  return 0;
}

uint64_t variable initialization expression of StoredLocation._signal()
{
  return 0;
}

uint64_t variable initialization expression of ObservableLocation.observers()
{
  type metadata accessor for ObservableLocation.Observer();

  return Array.init()();
}

void default argument 0 of ContainerValues.init(base:)(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of _GraphInputs.customInputs()
{
  return 0;
}

uint64_t variable initialization expression of _GraphInputs.Phase.value()
{
  return 0;
}

void variable initialization expression of _GraphInputs.changedDebugProperties(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

void variable initialization expression of _GraphInputs.options(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _GraphInputs.mergedInputs()
{
  return MEMORY[0x263F8EE88];
}

uint64_t variable initialization expression of ArchiveWriter.isFinal()
{
  return 0;
}

uint64_t variable initialization expression of ArchiveWriter.attachments()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of ArchiveWriter.attachmentHashes()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of ArchiveWriter.currentOffset()
{
  return 0;
}

double variable initialization expression of ArchiveWriter.currentHasher@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 96) = 1;
  return result;
}

uint64_t variable initialization expression of ArchiveWriter.cache()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of ArchiveWriter.signposter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for archiving != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSSignposter();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Signpost.archiving);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t variable initialization expression of DataArchiveWriter.data()
{
  return 0;
}

uint64_t variable initialization expression of ValueActionDispatcher.lastResetSeed()
{
  return 0;
}

uint64_t variable initialization expression of ValueActionDispatcher.cycleDetector@<X0>(uint64_t a1@<X8>)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v6 = Context;
    swift_retain();

    swift_beginAccess();
    int v7 = *(_DWORD *)(v6 + 64);
    uint64_t result = swift_release();
    *(_DWORD *)a1 = v7;
    *(void *)(a1 + 4) = 0xFFFFFFFFLL;
    *(unsigned char *)(a1 + 12) = 0;
    return result;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t variable initialization expression of AnimationState.storage()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

uint64_t variable initialization expression of EventBindingBridge.eventBindingManager()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingBridge.responderWasBoundHandler()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingBridge.trackedEvents()
{
  return MEMORY[0x263F8EE80];
}

uint64_t default argument 2 of CUIDesignLibraryCacheKey.init(name:in:allowsBlendMode:)()
{
  return 1;
}

void variable initialization expression of _GestureInputs.options(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _GestureOutputs._debugData()
{
  return *MEMORY[0x263F288F8];
}

void variable initialization expression of _GestureOutputs.preferences(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t variable initialization expression of LayoutComputer.seed()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingManager.host()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingManager.delegate()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingManager.forwardedEventDispatchers()
{
  return MEMORY[0x263F8EE80];
}

unint64_t variable initialization expression of EventBindingManager.eventBindings()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

uint64_t variable initialization expression of EventBindingManager.isActive()
{
  return 0;
}

uint64_t variable initialization expression of EventBindingManager.eventTimer()
{
  return 0;
}

uint64_t variable initialization expression of UniqueSeedGenerator.nextID()
{
  return 0;
}

void variable initialization expression of _LayoutTraits.width(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0x7FF0000000000000;
}

uint64_t variable initialization expression of _ViewList_View.releaseElements()
{
  return 0;
}

uint64_t variable initialization expression of _ViewList_View.contentSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of ResolvableStringResolutionContext.referenceDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate(MEMORY[0x263F07490], a1);
}

uint64_t variable initialization expression of ResolvableStringResolutionContext.maximumWidth()
{
  return 0;
}

uint64_t variable initialization expression of Text.Resolved.attributedString()
{
  return 0;
}

uint64_t variable initialization expression of Text.Resolved.includeDefaultAttributes()
{
  return 1;
}

void variable initialization expression of Text.Resolved.idiom(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double variable initialization expression of Text.Resolved.properties@<D0>(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 32) = 0;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 48) = v1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  double result = -0.0;
  *(_OWORD *)(a1 + 96) = xmmword_24619B530;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = v1;
  return result;
}

uint64_t default argument 3 of Text.Style.TextStyleColor.resolve(in:with:properties:includeDefaultAttributes:)()
{
  return 1;
}

void variable initialization expression of Text.Style.baseFont(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of Text.Style.fontModifiers()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of Text.Style.color(void *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

uint64_t variable initialization expression of Text.Style.backgroundColor()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.baselineOffset()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.kerning()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.tracking()
{
  return 0;
}

double variable initialization expression of Text.Style.strikethrough@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_24619B550;
  return result;
}

double variable initialization expression of Text.Style.underline@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_24619B550;
  return result;
}

double variable initialization expression of Text.Style.encapsulation@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  return result;
}

double variable initialization expression of Text.Style.accessibility@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of Text.Style.glyphInfo()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.shadow()
{
  return 0;
}

uint64_t variable initialization expression of Text.Style.transition()
{
  return 0;
}

void variable initialization expression of Text.Style.scale(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void variable initialization expression of Text.Style.superscript(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t variable initialization expression of Text.Style.typesettingConfiguration@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x270FA5388](v2);
  id v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v2, (uint64_t)static TypesettingLanguage.automatic);
  outlined init with copy of TypesettingLanguage(v5, (uint64_t)v4, type metadata accessor for TypesettingLanguage);
  outlined init with copy of TypesettingLanguage(v5, a1, type metadata accessor for TypesettingLanguage);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t result = outlined assign with take of TypesettingLanguage((uint64_t)v4, a1);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t variable initialization expression of Text.Style.customAttributes()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of Text.Style.adaptiveImageGlyph@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate(MEMORY[0x263F03950], a1);
}

uint64_t variable initialization expression of Text.Style.clearedFontModifiers()
{
  return MEMORY[0x263F8EE88];
}

uint64_t default argument 1 of Text.Style.TextStyleFont.resolve(in:includeDefaultAttributes:)()
{
  return 1;
}

double variable initialization expression of Text.ResolvedProperties.insets()
{
  return 0.0;
}

void variable initialization expression of Text.ResolvedProperties.features(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of Text.ResolvedProperties.styles()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of Text.ResolvedProperties.transitions()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of Text.ResolvedProperties.CustomAttachments.characterIndices()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of Text.ResolvedProperties.customAttachments(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

void variable initialization expression of Text.ResolvedProperties.paragraph(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t variable initialization expression of Text.ResolvedProperties.Paragraph.compositionLanguage()
{
  return 0;
}

uint64_t variable initialization expression of Text.ResolvedProperties.Paragraph.cachedStyle()
{
  return 0;
}

uint64_t variable initialization expression of ResolvableTimer.pause()
{
  return 0;
}

uint64_t variable initialization expression of _ResolvedKeyframeTrackContent.segments()
{
  type metadata accessor for _ResolvedKeyframeTrackContent.Segment();

  return static Array._allocateUninitialized(_:)();
}

uint64_t variable initialization expression of PhaseAnimator._currentIndex()
{
  return 0;
}

uint64_t variable initialization expression of PhaseAnimator._seed()
{
  return 0;
}

double variable initialization expression of _RendererConfiguration.minFrameInterval()
{
  return 0.0;
}

void variable initialization expression of _RendererConfiguration.RasterizationOptions.colorMode(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.rendersAsynchronously()
{
  return 0;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.isOpaque()
{
  return 1;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.drawsPlatformViews()
{
  return 1;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.prefersDisplayCompositing()
{
  return 0;
}

uint64_t variable initialization expression of _RendererConfiguration.RasterizationOptions.maxDrawableCount()
{
  return 3;
}

uint64_t default argument 1 of _ColorMatrix.init(colorMultiply:premultiplied:)()
{
  return 0;
}

float default argument 1 of _ColorMatrix.init(colorMonochrome:amount:bias:)()
{
  return 1.0;
}

double default argument 2 of _ColorMatrix.init(colorMonochrome:amount:bias:)()
{
  return 0.0;
}

uint64_t variable initialization expression of _ViewDebug.Data.data()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of _ViewDebug.Data.childData()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of WeakBox.base()
{
  return 0;
}

uint64_t variable initialization expression of HashableWeakBox.base()
{
  return 0;
}

void variable initialization expression of PropertyList.Tracker._data(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE80];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v1;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = v2;
  *(unsigned char *)(a1 + 32) = 0;
}

uint64_t variable initialization expression of PropertyList.Element.after()
{
  return 0;
}

uint64_t variable initialization expression of PropertyList.Element.skip()
{
  return 0;
}

uint64_t variable initialization expression of PropertyList.Element.id@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AGMakeUniqueID();
  *a1 = result;
  return result;
}

void variable initialization expression of TappableEvent.binding(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of TappableSpatialEvent.binding(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of ProtobufDecoder.packedField(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ProtobufDecoder.stack()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of ProtobufDecoder.userInfo()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of SymbolVariants.flags()
{
  return 0;
}

void variable initialization expression of SymbolVariants.shape(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t default argument 0 of View.appearanceAnimation<A>(animation:modifier:)()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }

  return swift_retain();
}

double variable initialization expression of StrongHasher.state@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of DynamicContentOffsetVisitor.offset()
{
  return 0;
}

void variable initialization expression of PreferencesInputs.keys(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of AnimationContext._environment()
{
  return 0;
}

uint64_t variable initialization expression of AnimationContext.isLogicallyComplete()
{
  return 0;
}

uint64_t default argument 2 of AnimationContext.init(state:environment:isLogicallyComplete:)()
{
  return 0;
}

uint64_t variable initialization expression of _TestApp.RootView._state@<X0>(void *a1@<X8>)
{
  type metadata accessor for AnyViewStorage<TestIDView<EmptyView, Int>>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *a1 = 0;
  a1[1] = result;
  return result;
}

uint64_t variable initialization expression of _TestApp.RootView._rootFocusScope()
{
  return 0;
}

uint64_t variable initialization expression of ContentTransition.isReplaceable()
{
  return 0;
}

void variable initialization expression of ContentTransition.NamedTransition.layoutDirection(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void variable initialization expression of ContentTransition.NamedTransition.style(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void default argument 0 of ContentTransition.NamedTransition.init(name:layoutDirection:style:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000000;
  *(unsigned char *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 8) = 0;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration.axis()
{
  return 2;
}

void variable initialization expression of ContentTransition.NumericTextConfiguration.options(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration._delay()
{
  return 18;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration._scale()
{
  return 51;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration._blur()
{
  return 32;
}

uint64_t variable initialization expression of ContentTransition.NumericTextConfiguration._offset()
{
  return 19;
}

void default argument 0 of ContentTransition.NumericTextConfiguration.init(direction:axis:options:)(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
}

void default argument 2 of ContentTransition.NumericTextConfiguration.init(direction:axis:options:)(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void variable initialization expression of ContentTransition.CustomTransition.layoutDirection(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void default argument 1 of ContentTransition.EffectType.init(type:arg0:arg1:)(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 2;
}

double variable initialization expression of ContentTransition.Effect.begin()
{
  return 0.0;
}

float variable initialization expression of ContentTransition.Effect.duration()
{
  return 1.0;
}

uint64_t variable initialization expression of ContentTransition.Effect.events()
{
  return 3;
}

uint64_t variable initialization expression of ContentTransition.Effect.flags()
{
  return 0;
}

double default argument 1 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return 0.0;
}

float default argument 2 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return 1.0;
}

uint64_t default argument 3 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return 3;
}

uint64_t default argument 4 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return 0;
}

void default argument 0 of ContentTransition.State.init(transition:style:animation:options:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000000;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void default argument 1 of ContentTransition.State.init(transition:style:animation:options:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 3 of ContentTransition.State.init(transition:style:animation:options:)()
{
  return 0;
}

void variable initialization expression of ContentTransition.State.style(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ContentTransition.State.animation()
{
  return 0;
}

uint64_t variable initialization expression of ContentTransition.State.options()
{
  return 0;
}

void variable initialization expression of ArchivedViewInput.Value.flags(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of ArchivedViewInput.Value.deploymentVersion(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t default argument 0 of _Transition_ContentTransition.Result.effects(_:)()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of _Transition_ContentTransition.result(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 2;
}

uint64_t variable initialization expression of TransitionProperties.hasMotion()
{
  return 1;
}

uint64_t variable initialization expression of ImageRenderer.objectWillChange()
{
  return PassthroughSubject.init()();
}

uint64_t variable initialization expression of ImageRenderer._seed()
{
  return 0;
}

uint64_t variable initialization expression of ImageRenderer.observationEnabled()
{
  return 0;
}

double variable initialization expression of ImageRenderer.scale()
{
  return 1.0;
}

void variable initialization expression of ImageRendererHost.options(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 1;
  *(unsigned char *)(a1 + 16) = 3;
}

void variable initialization expression of ImageRendererHost.propertiesNeedingUpdate(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of ImageRendererHost.renderingPhase(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of ImageRendererHost.currentTimestamp(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ImageRendererHost.externalUpdateCount()
{
  return 0;
}

uint64_t variable initialization expression of ImageRendererHost.notifyObserver()
{
  return 0;
}

uint64_t variable initialization expression of ImageRendererHost.ignoreUpdateRequests()
{
  return 0;
}

uint64_t variable initialization expression of ImageRendererHost.pendingIgnoredUpdates()
{
  return 0;
}

uint64_t variable initialization expression of ImageRendererHost.renderer()
{
  char v1 = 3;
  type metadata accessor for DisplayList.GraphicsRenderer();
  swift_allocObject();
  return DisplayList.GraphicsRenderer.init(platformViewMode:)(&v1);
}

uint64_t variable initialization expression of ImageRendererHost._cgImage()
{
  return 0;
}

double variable initialization expression of ImageRendererHost.cgImageSize()
{
  return 0.0;
}

double variable initialization expression of ImageRendererHost.cgImageScale()
{
  return 0.0;
}

uint64_t variable initialization expression of ImageRendererHost.cgImageVersion()
{
  return 0;
}

uint64_t variable initialization expression of ImageRendererHost.cgImageNeedsUpdate()
{
  return 0;
}

uint64_t variable initialization expression of ImageRendererHost._platformImage()
{
  return 0;
}

uint64_t variable initialization expression of ImageRendererHost.proposedSize()
{
  return 0;
}

uint64_t default argument 1 of ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)()
{
  return 1;
}

uint64_t variable initialization expression of UnsafeHeterogeneousBuffer.Item.flags()
{
  return 0;
}

uint64_t variable initialization expression of UnsafeHeterogeneousBuffer.buf()
{
  return 0;
}

uint64_t variable initialization expression of UnsafeHeterogeneousBuffer.available()
{
  return 0;
}

uint64_t variable initialization expression of UnsafeHeterogeneousBuffer._count()
{
  return 0;
}

uint64_t variable initialization expression of WeakUncheckedSendable.value()
{
  return 0;
}

uint64_t variable initialization expression of IndirectAttributeMap.map()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of ForEach.reuseID()
{
  return 0;
}

void variable initialization expression of Canvas.rasterizationOptions(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 160;
  *(unsigned char *)(a1 + 16) = 3;
}

uint64_t variable initialization expression of Canvas.preservesMetadata()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityText.optional()
{
  return 0;
}

uint64_t default argument 1 of AccessibilityText.init(storage:optional:)()
{
  return 0;
}

void variable initialization expression of AccessibilityTextAttributes.contentType(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t variable initialization expression of AccessibilityTextAttributes.headingLevel()
{
  return 7;
}

uint64_t variable initialization expression of AccessibilityTextAttributes.durationTimeMMSS()
{
  return 2;
}

uint64_t variable initialization expression of AccessibilityTextAttributes.label()
{
  return 0;
}

void variable initialization expression of Material.Context.role(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

float variable initialization expression of Material.Layer._opacity()
{
  return 1.0;
}

uint64_t variable initialization expression of _ShapeStyle_RenderedShape.blendMode@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v2 = static GraphicsBlendMode.normal;
  char v3 = byte_26B0EB4A0;
  *(void *)a1 = static GraphicsBlendMode.normal;
  *(unsigned char *)(a1 + 8) = v3;

  return outlined copy of GraphicsBlendMode(v2, v3);
}

uint64_t variable initialization expression of ViewGraphGeometryObservers.store()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ViewGraphGeometryObservers.Observer();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t default argument 0 of AccessibilityProperties.init(reserving:)()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityAttachment.properties@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t result = Dictionary.init(minimumCapacity:)();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of AccessibilityAttachment.platformElement()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceKeys.keys()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of ContentSizedSceneFeature.delegate()
{
  return 0;
}

double default argument 1 of BackdropEffect.init(scale:color:filters:captureOnly:)()
{
  return 0.0;
}

uint64_t variable initialization expression of ThreadSpecific.key()
{
  return 0;
}

uint64_t variable initialization expression of Text.Measurements._cache()
{
  return 0;
}

uint64_t variable initialization expression of ViewTransform.head()
{
  return 0;
}

double variable initialization expression of ViewTransform.positionAdjustment()
{
  return 0.0;
}

double variable initialization expression of ViewTransform.pendingTranslation()
{
  return 0.0;
}

void variable initialization expression of ViewTransform.UnsafeBuffer.contents(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void default argument 1 of HoverEffectGroupInfo.init(id:behavior:scope:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void default argument 2 of HoverEffectGroupInfo.init(id:behavior:scope:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of HoverEffectAccessibilityOptions.attachmentBehavior(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of HoverEffectAccessibilityOptions.init(accessibilityID:attachmentBehavior:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of Text.Storage.resolvesToEmpty(in:with:)(void *a1@<X8>)
{
  *a1 = 0;
}

void default argument 0 of Text.Storage.isStyled(options:)(void *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of Text.assertUnstyled(_:options:)(void *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of Text.resolveStringCheckingForResolvables(in:with:idiom:)(void *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of Text.resolvesToEmpty(in:with:)(void *a1@<X8>)
{
  *a1 = 0;
}

void default argument 0 of SpeechModifier.isStyled(options:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of static Text.System.swiftUICoreLocalized(_:tableName:comment:)()
{
  return 1701998403;
}

uint64_t default argument 1 of static String.System.kitLocalized(_:tableName:comment:)()
{
  return 0x617A696C61636F4CLL;
}

void variable initialization expression of SafeAreaInsets.next(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of _SafeAreaInsetsModifier.nextInsets(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t variable initialization expression of ResolvedSafeAreaInsets._safeAreaInsets()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of PreferenceBridge.viewGraph()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceBridge.isValid()
{
  return 1;
}

uint64_t variable initialization expression of PreferenceBridge.children()
{
  return MEMORY[0x263F8EE78];
}

void variable initialization expression of PreferenceBridge.requestedPreferences(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of PreferenceBridge.bridgedViewInputs()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceBridge._hostPreferenceKeys()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceBridge._hostPreferencesCombiner()
{
  return 0;
}

uint64_t variable initialization expression of PreferenceBridge.bridgedPreferences()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of PreferenceBridge.removeValue(_:for:isInvalidating:)()
{
  return 0;
}

uint64_t default argument 1 of PreferenceBridge.removeHostValues(for:isInvalidating:)()
{
  return 0;
}

uint64_t variable initialization expression of ImageResolutionContext.symbolAnimator()
{
  return 0;
}

uint64_t variable initialization expression of ImageResolutionContext.textStyle@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate(type metadata accessor for Text.Style, a1);
}

uint64_t variable initialization expression of ImageResolutionContext.transaction()
{
  return *MEMORY[0x263F288F8];
}

void variable initialization expression of ImageResolutionContext.symbolRenderingMode(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void variable initialization expression of ImageResolutionContext.allowedDynamicRange(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void variable initialization expression of ImageResolutionContext.options(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void default argument 1 of AccessibilityIdentifierStorage.init(_:placement:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 0 of RangeReplaceableCollection<>.joined(separator:)()
{
  return 46;
}

void variable initialization expression of PhysicalButtonEvent.binding(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of SafeAreaPaddingModifier._defaultPadding@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t (*default argument 2 of SectionAccumulator.formResult(from:listAttribute:includeEmptySectionsIf:)())()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase;
}

uint64_t variable initialization expression of DynamicLayoutMap.map()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of DynamicLayoutMap.sortedArray()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of DynamicLayoutMap.sortedSeed()
{
  return 0;
}

uint64_t default argument 1 of DynamicLayoutMap.init(map:sortedArray:sortedSeed:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of DynamicLayoutMap.init(map:sortedArray:sortedSeed:)()
{
  return 0;
}

double default argument 4 of Animation.Function.spring(_:)()
{
  return 0.0;
}

void variable initialization expression of AccessibilityActivationPointStorage.activate(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -1;
}

uint64_t variable initialization expression of AccessibilityActivationPointStorage.drag()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of AccessibilityActivationPointStorage.drop()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of ReuseTrace.Recorder.frameActive()
{
  return 0;
}

void variable initialization expression of SystemFormatStyle.Timer.sizeVariant(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of SystemFormatStyle.Timer.redactUsingDashes()
{
  return 1;
}

uint64_t variable initialization expression of SystemFormatStyle.Timer.forceNoPadding()
{
  return 0;
}

uint64_t variable initialization expression of SystemFormatStyle.Timer._textAlignment()
{
  return 3;
}

void variable initialization expression of SystemFormatStyle.Timer._monospacedDigits(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of SystemFormatStyle.Timer._adjustedColon(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of SystemFormatStyle.Timer._superscript(void *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of CodableAttributeEffect.attributes(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AccessibilityPlatformPropertyStorage.explicitRole()
{
  return 0;
}

uint64_t variable initialization expression of AccessibilityPlatformPropertyStorage.explicitSubrole()
{
  return 0;
}

void variable initialization expression of AccessibilityPlatformPropertyStorage.explicitTraits(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.identifier()
{
  return 0;
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.roleDescription(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 18) = -1;
  *(_WORD *)(a1 + 16) = 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.sortPriority()
{
  return 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.explicitAutomationType()
{
  return 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.dataSeriesConfiguration@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v3);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, a1, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.linkDestination@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate(type metadata accessor for LinkDestination.Configuration, a1);
}

uint64_t variable initialization expression of EveryMinuteTimelineSchedule.Entries.nextDate@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.VBase.customAttributes(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V2.textValue()
{
  return 0;
}

double variable initialization expression of CodableAccessibilityAttachmentStorage.V3.value@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = xmmword_24619B520;
  return result;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V3.inputLabels()
{
  return 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V3.customContentList()
{
  return 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V3.textHeadingLevel()
{
  return 7;
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.V3.textContentType(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.V3.chartDescriptor(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of CodableAccessibilityAttachmentStorage.V3.locale()
{
  return 0;
}

void variable initialization expression of CodableAccessibilityAttachmentStorage.V3.childBehaviorKind(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t default argument 0 of CodableAccessibilityUIKitTraits.init(removed:added:)()
{
  return 0;
}

uint64_t default argument 1 of CodableAccessibilityUIKitTraits.init(removed:added:)()
{
  return 0;
}

void variable initialization expression of SectionAccumulator.Item.features(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of SectionAccumulator.Item.contentSubgraph()
{
  return 0;
}

void variable initialization expression of SectionAccumulator.Item.sectionList(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t variable initialization expression of SectionAccumulator.Item.headerCount()
{
  return 0;
}

uint64_t variable initialization expression of SectionAccumulator.Item.footerCount()
{
  return 0;
}

uint64_t variable initialization expression of SectionAccumulator.pendingChunks()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of SectionAccumulator.pendingChunkIDCount()
{
  return 0;
}

uint64_t variable initialization expression of SectionAccumulator.lastExplicitSectionEnd()
{
  return 0;
}

double variable initialization expression of SectionAccumulator.list@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of SectionAccumulator.contentSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of SectionAccumulator.items()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of SectionAccumulator.viewCount()
{
  return 0;
}

void variable initialization expression of EmptyViewRendererHost.propertiesNeedingUpdate(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void variable initialization expression of EmptyViewRendererHost.renderingPhase(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of EmptyViewRendererHost.externalUpdateCount()
{
  return 0;
}

void variable initialization expression of EmptyViewRendererHost.currentTimestamp(void *a1@<X8>)
{
  *a1 = 0;
}

void default argument 1 of static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v3 = static CoreGlue2.shared;
  v2(a1);
}

uint64_t variable initialization expression of ViewGraph.delegate()
{
  return 0;
}

void variable initialization expression of ViewGraph.features(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t variable initialization expression of ViewGraph.centersRootView()
{
  return 1;
}

uint64_t variable initialization expression of ViewGraph._containerSize()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ViewGraph._rootPhase()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ViewGraph._gestureDebug()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ViewGraph._gestureCategory()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of ViewGraph.eventSubgraph()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraph._rootResponders()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraph._rootLayoutComputer()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraph._rootDisplayList()
{
  return 0;
}

unint64_t variable initialization expression of ViewGraph.sizeThatFitsObservers@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of ViewGraph.accessibilityEnabled()
{
  return 0;
}

void variable initialization expression of ViewGraph.disabledOutputs(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of ViewGraph.mainUpdates()
{
  return 0;
}

double variable initialization expression of GestureGraph.nextUpdateTime@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double result = *(double *)&static Time.infinity;
  *a1 = static Time.infinity;
  return result;
}

double variable initialization expression of ViewGraph.NextUpdate._interval()
{
  return INFINITY;
}

uint64_t variable initialization expression of ViewGraph.NextUpdate.reasons()
{
  return MEMORY[0x263F8EE88];
}

double variable initialization expression of ViewGraph.nextUpdate(void *a1, uint64_t a2)
{
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double result = *(double *)&static Time.infinity;
  *a1 = static Time.infinity;
  uint64_t v5 = MEMORY[0x263F8EE88];
  a1[1] = 0x7FF0000000000000;
  a1[2] = v5;
  *(double *)a2 = result;
  *(void *)(a2 + 8) = 0x7FF0000000000000;
  *(void *)(a2 + 16) = v5;
  return result;
}

uint64_t variable initialization expression of ViewGraph._preferenceBridge()
{
  return 0;
}

uint64_t variable initialization expression of ViewGraph.bridgedPreferences()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 1 of ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for defaults != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ViewGraph.Outputs.defaults;
  return result;
}

uint64_t default argument 0 of RootGeometry.init(layoutDirection:proposedSize:safeAreaInsets:childLayoutComputer:)()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of RootGeometry._layoutDirection()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of RootGeometry._safeAreaInsets()
{
  return *MEMORY[0x263F288F8];
}

uint64_t variable initialization expression of RootGeometry._childLayoutComputer()
{
  return *MEMORY[0x263F288F8];
}

uint64_t default argument 2 of RootGeometry.init(layoutDirection:proposedSize:safeAreaInsets:childLayoutComputer:)()
{
  return *MEMORY[0x263F288F8];
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AGAttribute()
{
  return UInt32._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AGAttribute@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = static UInt32._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance CoreSystem@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CoreSystem(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CGLineJoin@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CGLineJoin(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x24C524A30](a1, &v6);
  int v4 = v6;
  char v5 = v7;
  if (v7) {
    int v4 = 0;
  }
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  char v3 = static UInt32._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 1;
  return v3 & 1;
}

void *protocol witness for SetAlgebra.union(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance NSCalendarUnit(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance NSCalendarUnit@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance NSCalendarUnit(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance NSCalendarUnit(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSCalendarUnit(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance NSCalendarUnit(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSCalendarUnit(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance NSCalendarUnit(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance NSCalendarUnit(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CTFontRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CTFontRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

void protocol witness for Hashable.hash(into:) in conformance RBShaderType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RBShaderType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RBShaderType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance RBBlurFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance RBBlurFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance RBBlurFlags(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance RBBlurFlags@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance RBBlurFlags@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance RBBlurFlags(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance RBBlurFlags(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance RBBlurFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance RBBlurFlags(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance RBBlurFlags(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CTGlyphInfoRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CTGlyphInfoRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CTGlyphInfoRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ViewSystem()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ViewSystem()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ViewSystem()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFDictionaryRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFDictionaryRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFDictionaryRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSTextEncapsulationScale()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSTextEncapsulationScale()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance CUIColorName@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CUIColorName(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGColorRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGColorRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGColorRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSAttributedStringKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x24C522820](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AGSubgraphRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AGSubgraphRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AGSubgraphRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey, (void (*)(void))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSCalendarUnit@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CTFontRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance RBBlurFlags@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CTGlyphInfoRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance CTRunStatus@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance CTRunStatus(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance CTRunStatus(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CTRunStatus(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGAttribute()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBDisplayListInterpolatorOptionKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  a3();
  a4();

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSKeyValueChangeKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, (void (*)(void))lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSRunLoopMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSRunLoopMode(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode, (void (*)(void))lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGNamedTraceEventID()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey, (void (*)(void))lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBSymbolAnimationOptionKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, (void (*)(void))lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGDescriptionOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption, (void (*)(void))lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBDisplayListRenderKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, (void (*)(void))lazy protocol witness table accessor for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSAttributedStringKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x24C522820](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance RBImageRendererProperty(uint64_t a1, uint64_t a2)
{
  return protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty, (void (*)(void))lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSRunLoopMode(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AGNamedTraceEventID()
{
  return MEMORY[0x270F9FD20](*v0);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AGNamedTraceEventID()
{
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:)(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for _DisplayList_StableIdentityScope);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);

  return MEMORY[0x270F0F0E8](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for _UnaryViewAdaptor<EmptyView>();

  return MEMORY[0x270F0F0E8](a1, a2, v4);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for PreferenceKeys);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for ViewTransform);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for _GeometryGroupEffect);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for _AppearanceActionModifier);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, MEMORY[0x263F8D4F8]);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for ScrollPhaseState);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for [ViewResponder](0);

  return MEMORY[0x270F0F0E8](a1, a2, v4);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for _ShapeStyle_Pack);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for ViewSize);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, MEMORY[0x263F8E8F8]);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for Transaction);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for _GraphInputs.Phase);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for EnvironmentValues);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for Time);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for _GestureInputs.InheritedPhase);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for [EventID : EventType](0, (unint64_t *)&lazy cache variable for type metadata for [EventID : EventType], MEMORY[0x263F8D060]);

  return MEMORY[0x270F0F0E8](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);

  return MEMORY[0x270F0F0E8](a1, a2, v4);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for GestureDebug.Data);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for ViewOrigin);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for LayoutComputer);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for _SafeAreaInsetsModifier);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, MEMORY[0x263F8EE60] + 8);
}

{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for DefaultLayoutGesture);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);

  return MEMORY[0x270F0F0E8](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  type metadata accessor for [ScrollableCollection](0, &lazy cache variable for type metadata for [Scrollable], &lazy cache variable for type metadata for Scrollable);

  return MEMORY[0x270F0F0E8](a1, a2, v4);
}

uint64_t specialized _ViewInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  return specialized _ViewListCountInputs.subscript.setter(a1, a2, a3, *(void *)(a4 + 8));
}

uint64_t specialized _ViewInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  return specialized _GraphInputs.subscript.setter(a1, a2, a3, *(void *)(a4 + 8));
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

double _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void type metadata accessor for AnyViewStorage<TestIDView<EmptyView, Int>>()
{
  if (!lazy cache variable for type metadata for AnyViewStorage<TestIDView<EmptyView, Int>>)
  {
    type metadata accessor for TestIDView<EmptyView, Int>();
    unint64_t v0 = type metadata accessor for AnyViewStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyViewStorage<TestIDView<EmptyView, Int>>);
    }
  }
}

void type metadata accessor for TestIDView<EmptyView, Int>()
{
  if (!lazy cache variable for type metadata for TestIDView<EmptyView, Int>)
  {
    unint64_t v0 = type metadata accessor for TestIDView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TestIDView<EmptyView, Int>);
    }
  }
}

double _s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  return result;
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t destroy for _ViewInputs()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy84_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _ViewInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 84)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 84) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 84) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewInputs()
{
  return &type metadata for _ViewInputs;
}

ValueMetadata *type metadata accessor for DynamicStackOrientation()
{
  return &type metadata for DynamicStackOrientation;
}

uint64_t sub_2459CC8D8()
{
  return swift_getWitnessTable();
}

void *__swift_memcpy336_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x150uLL);
}

uint64_t getEnumTagSinglePayload for _AGTraceType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 336)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _AGTraceType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 336) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 336) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for _AGTraceType(uint64_t a1)
{
}

void type metadata accessor for RBTransitionEffectFlags(uint64_t a1)
{
}

__n128 __swift_memcpy96_4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for CC_SHA1state_st(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CC_SHA1state_st(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void type metadata accessor for CC_SHA1state_st(uint64_t a1)
{
}

void type metadata accessor for CoreSystem(uint64_t a1)
{
}

void type metadata accessor for RBMeshGradientFlags(uint64_t a1)
{
}

void type metadata accessor for NSCompositionLanguage(uint64_t a1)
{
}

void type metadata accessor for CFAttributedStringRef(uint64_t a1)
{
}

void type metadata accessor for CUIDesignStyling(uint64_t a1)
{
}

void type metadata accessor for CUIColorName(uint64_t a1)
{
}

void type metadata accessor for CTLineRef(uint64_t a1)
{
}

void type metadata accessor for CGSVGDocumentRef(uint64_t a1)
{
}

void type metadata accessor for CGPDFPageRef(uint64_t a1)
{
}

void type metadata accessor for ViewSystem(uint64_t a1)
{
}

void type metadata accessor for PathData(uint64_t a1)
{
}

void type metadata accessor for CGLineJoin(uint64_t a1)
{
}

void type metadata accessor for CGLineCap(uint64_t a1)
{
}

void type metadata accessor for NSTextEncapsulationPlatterSize(uint64_t a1)
{
}

void type metadata accessor for NSTextEncapsulationStyle(uint64_t a1)
{
}

void type metadata accessor for NSTextEncapsulationShape(uint64_t a1)
{
}

void type metadata accessor for NSTextEncapsulationScale(uint64_t a1)
{
}

void type metadata accessor for RBShapeRenderingMode(uint64_t a1)
{
}

void type metadata accessor for RBColorSpace(uint64_t a1)
{
}

void type metadata accessor for RBBlendMode(uint64_t a1)
{
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
}

void type metadata accessor for RBShaderType(uint64_t a1)
{
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
}

void type metadata accessor for RBSymbolAnimationReplaceFlags(uint64_t a1)
{
}

void type metadata accessor for RBSymbolAnimationAppearDisappearFlags(uint64_t a1)
{
}

void type metadata accessor for RBSymbolAnimationVariableColorFlags(uint64_t a1)
{
}

void type metadata accessor for RBSymbolAnimationRotateFlags(uint64_t a1)
{
}

void type metadata accessor for RBSymbolAnimationWiggleFlags(uint64_t a1)
{
}

void type metadata accessor for RBSymbolAnimationBounceFlags(uint64_t a1)
{
}

void type metadata accessor for RBSymbolAnimation(uint64_t a1)
{
}

void type metadata accessor for RBSymbolAnimationBreatheFlags(uint64_t a1)
{
}

void type metadata accessor for AGGraphRef(uint64_t a1)
{
}

void type metadata accessor for _NSTextAnimatorState(uint64_t a1)
{
}

void type metadata accessor for RBTransitionEvents(uint64_t a1)
{
}

void type metadata accessor for RBTransitionEffectType(uint64_t a1)
{
}

void type metadata accessor for RBTransitionMethod(uint64_t a1)
{
}

void type metadata accessor for CTGlyphInfoRef(uint64_t a1)
{
}

void type metadata accessor for AXCustomContentImportance(uint64_t a1)
{
}

void type metadata accessor for RBSymbolScaleLevel(uint64_t a1)
{
}

void type metadata accessor for CGContextRef(uint64_t a1)
{
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
}

void type metadata accessor for RBDrawingState(uint64_t a1)
{
}

void type metadata accessor for NSCalendarUnit(uint64_t a1)
{
}

void type metadata accessor for AGDescriptionOption(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

void type metadata accessor for NSLineBreakMode(uint64_t a1)
{
}

void type metadata accessor for _AttributedStringKey(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for CTCompositionLanguage(uint64_t a1)
{
}

void type metadata accessor for CGVector(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for ResetDeltaModifier()
{
  return &type metadata for ResetDeltaModifier;
}

uint64_t base witness table accessor for RawRepresentable in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, type metadata accessor for RBDisplayListRenderKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBDisplayListRenderKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, type metadata accessor for RBDisplayListRenderKey);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for RawRepresentable in AGAttribute()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AGAttribute()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
}

uint64_t base witness table accessor for RawRepresentable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t base witness table accessor for Equatable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for RawRepresentable in AGDescriptionOption()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, type metadata accessor for AGDescriptionOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AGDescriptionOption()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, type metadata accessor for AGDescriptionOption);
}

uint64_t base witness table accessor for Equatable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
}

uint64_t base witness table accessor for RawRepresentable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
}

uint64_t base witness table accessor for SetAlgebra in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
}

uint64_t base witness table accessor for Equatable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
}

uint64_t base witness table accessor for Hashable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
}

uint64_t base witness table accessor for Hashable in CTGlyphInfoRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CTGlyphInfoRef and conformance CTGlyphInfoRef, type metadata accessor for CTGlyphInfoRef);
}

uint64_t base witness table accessor for Equatable in RBTransitionEvents()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEvents and conformance RBTransitionEvents, type metadata accessor for RBTransitionEvents);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBTransitionEvents()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEvents and conformance RBTransitionEvents, type metadata accessor for RBTransitionEvents);
}

uint64_t base witness table accessor for RawRepresentable in RBTransitionEvents()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEvents and conformance RBTransitionEvents, type metadata accessor for RBTransitionEvents);
}

uint64_t base witness table accessor for SetAlgebra in RBTransitionEvents()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEvents and conformance RBTransitionEvents, type metadata accessor for RBTransitionEvents);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationBreatheFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBreatheFlags and conformance RBSymbolAnimationBreatheFlags, type metadata accessor for RBSymbolAnimationBreatheFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationBreatheFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBreatheFlags and conformance RBSymbolAnimationBreatheFlags, type metadata accessor for RBSymbolAnimationBreatheFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationBreatheFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBreatheFlags and conformance RBSymbolAnimationBreatheFlags, type metadata accessor for RBSymbolAnimationBreatheFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationBreatheFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBreatheFlags and conformance RBSymbolAnimationBreatheFlags, type metadata accessor for RBSymbolAnimationBreatheFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationBounceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBounceFlags and conformance RBSymbolAnimationBounceFlags, type metadata accessor for RBSymbolAnimationBounceFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationBounceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBounceFlags and conformance RBSymbolAnimationBounceFlags, type metadata accessor for RBSymbolAnimationBounceFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationBounceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBounceFlags and conformance RBSymbolAnimationBounceFlags, type metadata accessor for RBSymbolAnimationBounceFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationBounceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationBounceFlags and conformance RBSymbolAnimationBounceFlags, type metadata accessor for RBSymbolAnimationBounceFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationWiggleFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationWiggleFlags and conformance RBSymbolAnimationWiggleFlags, type metadata accessor for RBSymbolAnimationWiggleFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationWiggleFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationWiggleFlags and conformance RBSymbolAnimationWiggleFlags, type metadata accessor for RBSymbolAnimationWiggleFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationWiggleFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationWiggleFlags and conformance RBSymbolAnimationWiggleFlags, type metadata accessor for RBSymbolAnimationWiggleFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationWiggleFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationWiggleFlags and conformance RBSymbolAnimationWiggleFlags, type metadata accessor for RBSymbolAnimationWiggleFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationRotateFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationRotateFlags and conformance RBSymbolAnimationRotateFlags, type metadata accessor for RBSymbolAnimationRotateFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationRotateFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationRotateFlags and conformance RBSymbolAnimationRotateFlags, type metadata accessor for RBSymbolAnimationRotateFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationRotateFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationRotateFlags and conformance RBSymbolAnimationRotateFlags, type metadata accessor for RBSymbolAnimationRotateFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationRotateFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationRotateFlags and conformance RBSymbolAnimationRotateFlags, type metadata accessor for RBSymbolAnimationRotateFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationVariableColorFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationVariableColorFlags and conformance RBSymbolAnimationVariableColorFlags, type metadata accessor for RBSymbolAnimationVariableColorFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationVariableColorFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationVariableColorFlags and conformance RBSymbolAnimationVariableColorFlags, type metadata accessor for RBSymbolAnimationVariableColorFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationVariableColorFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationVariableColorFlags and conformance RBSymbolAnimationVariableColorFlags, type metadata accessor for RBSymbolAnimationVariableColorFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationVariableColorFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationVariableColorFlags and conformance RBSymbolAnimationVariableColorFlags, type metadata accessor for RBSymbolAnimationVariableColorFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationAppearDisappearFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationAppearDisappearFlags and conformance RBSymbolAnimationAppearDisappearFlags, type metadata accessor for RBSymbolAnimationAppearDisappearFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationAppearDisappearFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationAppearDisappearFlags and conformance RBSymbolAnimationAppearDisappearFlags, type metadata accessor for RBSymbolAnimationAppearDisappearFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationAppearDisappearFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationAppearDisappearFlags and conformance RBSymbolAnimationAppearDisappearFlags, type metadata accessor for RBSymbolAnimationAppearDisappearFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationAppearDisappearFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationAppearDisappearFlags and conformance RBSymbolAnimationAppearDisappearFlags, type metadata accessor for RBSymbolAnimationAppearDisappearFlags);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationReplaceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationReplaceFlags and conformance RBSymbolAnimationReplaceFlags, type metadata accessor for RBSymbolAnimationReplaceFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBSymbolAnimationReplaceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationReplaceFlags and conformance RBSymbolAnimationReplaceFlags, type metadata accessor for RBSymbolAnimationReplaceFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationReplaceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationReplaceFlags and conformance RBSymbolAnimationReplaceFlags, type metadata accessor for RBSymbolAnimationReplaceFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBSymbolAnimationReplaceFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationReplaceFlags and conformance RBSymbolAnimationReplaceFlags, type metadata accessor for RBSymbolAnimationReplaceFlags);
}

uint64_t base witness table accessor for Equatable in NSUnderlineStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSUnderlineStyle and conformance NSUnderlineStyle, type metadata accessor for NSUnderlineStyle);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSUnderlineStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSUnderlineStyle and conformance NSUnderlineStyle, type metadata accessor for NSUnderlineStyle);
}

uint64_t base witness table accessor for RawRepresentable in NSUnderlineStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSUnderlineStyle and conformance NSUnderlineStyle, type metadata accessor for NSUnderlineStyle);
}

uint64_t base witness table accessor for SetAlgebra in NSUnderlineStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSUnderlineStyle and conformance NSUnderlineStyle, type metadata accessor for NSUnderlineStyle);
}

uint64_t base witness table accessor for Equatable in RBShaderType()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBShaderType and conformance RBShaderType, type metadata accessor for RBShaderType);
}

uint64_t base witness table accessor for Equatable in RBShapeRenderingMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBShapeRenderingMode and conformance RBShapeRenderingMode, type metadata accessor for RBShapeRenderingMode);
}

uint64_t base witness table accessor for Equatable in NSTextEncapsulationScale()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextEncapsulationScale and conformance NSTextEncapsulationScale, type metadata accessor for NSTextEncapsulationScale);
}

uint64_t base witness table accessor for Equatable in NSTextEncapsulationShape()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextEncapsulationShape and conformance NSTextEncapsulationShape, type metadata accessor for NSTextEncapsulationShape);
}

uint64_t base witness table accessor for Equatable in NSTextEncapsulationStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextEncapsulationStyle and conformance NSTextEncapsulationStyle, type metadata accessor for NSTextEncapsulationStyle);
}

uint64_t base witness table accessor for Equatable in NSTextEncapsulationPlatterSize()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextEncapsulationPlatterSize and conformance NSTextEncapsulationPlatterSize, type metadata accessor for NSTextEncapsulationPlatterSize);
}

uint64_t base witness table accessor for Equatable in ViewSystem()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ViewSystem and conformance ViewSystem, type metadata accessor for ViewSystem);
}

uint64_t base witness table accessor for Equatable in CUIColorName()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CUIColorName and conformance CUIColorName, type metadata accessor for CUIColorName);
}

uint64_t base witness table accessor for Equatable in CUIDesignStyling()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CUIDesignStyling and conformance CUIDesignStyling, type metadata accessor for CUIDesignStyling);
}

uint64_t base witness table accessor for Equatable in RBMeshGradientFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBMeshGradientFlags and conformance RBMeshGradientFlags, type metadata accessor for RBMeshGradientFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBMeshGradientFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBMeshGradientFlags and conformance RBMeshGradientFlags, type metadata accessor for RBMeshGradientFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBMeshGradientFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBMeshGradientFlags and conformance RBMeshGradientFlags, type metadata accessor for RBMeshGradientFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBMeshGradientFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBMeshGradientFlags and conformance RBMeshGradientFlags, type metadata accessor for RBMeshGradientFlags);
}

uint64_t base witness table accessor for Equatable in RBTransitionEffectFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEffectFlags and conformance RBTransitionEffectFlags, type metadata accessor for RBTransitionEffectFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBTransitionEffectFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEffectFlags and conformance RBTransitionEffectFlags, type metadata accessor for RBTransitionEffectFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBTransitionEffectFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEffectFlags and conformance RBTransitionEffectFlags, type metadata accessor for RBTransitionEffectFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBTransitionEffectFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBTransitionEffectFlags and conformance RBTransitionEffectFlags, type metadata accessor for RBTransitionEffectFlags);
}

uint64_t base witness table accessor for Equatable in CTGlyphInfoRef()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CTGlyphInfoRef and conformance CTGlyphInfoRef, type metadata accessor for CTGlyphInfoRef);
}

uint64_t base witness table accessor for Equatable in AGDescriptionOption()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, type metadata accessor for AGDescriptionOption);
}

unint64_t lazy protocol witness table accessor for type GestureDependency and conformance GestureDependency()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency;
  if (!lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency;
  if (!lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDependency and conformance GestureDependency);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase;
  if (!lazy protocol witness table cache variable for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetDeltaModifier.ChildPhase and conformance ResetDeltaModifier.ChildPhase);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, type metadata accessor for AGDescriptionOption);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGDescriptionOption and conformance AGDescriptionOption, type metadata accessor for AGDescriptionOption);
}

uint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

void type metadata accessor for [(_:)](uint64_t a1)
{
}

void type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, Bool>)
  {
    type metadata accessor for AGSubgraphRef(255);
    lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, Bool>);
    }
  }
}

void type metadata accessor for [AttributeInfoTrace.Scope](uint64_t a1)
{
}

void type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, AttributeInfoTrace.History>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AttributeInfoTrace.History>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<RBImageRendererProperty, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<RBImageRendererProperty, Any>)
  {
    type metadata accessor for RBImageRendererProperty(255);
    lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<RBImageRendererProperty, Any>);
    }
  }
}

void type metadata accessor for RBImageRendererProperty(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, type metadata accessor for RBImageRendererProperty);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, type metadata accessor for RBImageRendererProperty);
}

void type metadata accessor for _DictionaryStorage<String, String>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, String>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, String>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Any>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Any>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?)
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for CFStringRef?, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, MEMORY[0x263F8D8F0]);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<CFStringRef, [CFDictionaryRef]>(uint64_t a1)
{
}

void type metadata accessor for [CFDictionaryRef](uint64_t a1)
{
}

uint64_t outlined retain of GestureDebug.Data(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of ArrayWith2Inline<(String, String)>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2)
  {
    return swift_retain();
  }
  else
  {
    if (a9 == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (a9) {
        return result;
      }
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined release of GestureDebug.Data(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of ArrayWith2Inline<(String, String)>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2)
  {
    return swift_release();
  }
  else
  {
    if (a9 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (a9) {
        return result;
      }
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role;
  if (!lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role;
  if (!lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<_ProposedSize, CGSize>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for _DictionaryStorage();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2;
  if (!lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2;
  if (!lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2);
  }
  return result;
}

uint64_t outlined init with copy of TypesettingLanguage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (AnyHashable2, WeakBox<AnyLocationBase>)(uint64_t a1)
{
}

uint64_t outlined init with take of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>)
  {
    type metadata accessor for RBSymbolAnimationOptionKey(255);
    lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>);
    }
  }
}

void type metadata accessor for RBSymbolAnimationOptionKey(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, type metadata accessor for RBSymbolAnimationOptionKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, type metadata accessor for RBSymbolAnimationOptionKey);
}

void type metadata accessor for _DictionaryStorage<AGDescriptionOption, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AGDescriptionOption, Any>)
  {
    type metadata accessor for AGDescriptionOption(255);
    lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AGDescriptionOption, Any>);
    }
  }
}

void type metadata accessor for External<[ViewResponder]>(uint64_t a1)
{
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, UInt32>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt32>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt32>);
    }
  }
}

void type metadata accessor for _UnaryViewAdaptor<EmptyView>()
{
  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>)
  {
    unint64_t v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>);
    }
  }
}

void type metadata accessor for External<_UnaryViewAdaptor<EmptyView>>(uint64_t a1)
{
}

void type metadata accessor for External<GesturePhase<()>>()
{
  if (!lazy cache variable for type metadata for External<GesturePhase<()>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<GesturePhase<()>>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, UInt32>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, UInt32>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, UInt32>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton()
{
  unint64_t result = lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton;
  if (!lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton;
  if (!lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  }
  return result;
}

void type metadata accessor for (AnyHashable2, WeakBox<AnyLocationBase>)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (ObjectIdentifier, ScrollStateRequest)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t outlined init with copy of (EventID, EventType)(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  type metadata accessor for (ObjectIdentifier, ScrollStateRequest)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for CFURLRef(uint64_t a1)
{
}

void type metadata accessor for CTLineDecorationElementType(uint64_t a1)
{
}

void type metadata accessor for RBSymbolStyle(uint64_t a1)
{
}

void type metadata accessor for CGFontRef(uint64_t a1)
{
}

void type metadata accessor for CTFontDescriptorRef(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void type metadata accessor for CFRange(uint64_t a1)
{
}

void type metadata accessor for NSTextLayoutManagerSegmentCategory(uint64_t a1)
{
}

void type metadata accessor for NSInlinePresentationIntent(uint64_t a1)
{
}

void type metadata accessor for RBDisplayListInterpolatorOptionKey(uint64_t a1)
{
}

void type metadata accessor for CFArrayRef(uint64_t a1)
{
}

void *type metadata accessor for ResetDeltaModifier.ChildPhase()
{
  return &unk_26FA5B7F8;
}

void type metadata accessor for AGComparisonState(uint64_t a1)
{
}

void type metadata accessor for AGNamedTraceEventFlags(uint64_t a1)
{
}

void type metadata accessor for CFDataRef(uint64_t a1)
{
}

void type metadata accessor for AGNamedTraceEventID(uint64_t a1)
{
}

void type metadata accessor for AGWeakAttribute.__Unnamed_struct__details(uint64_t a1)
{
}

void type metadata accessor for RBBlurFlags(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for _AGAttributeVTable(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _AGAttributeVTable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for _AGAttributeVTable(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for _AGClosureStorage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _AGClosureStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = 0;
    }
  }
  return result;
}

void type metadata accessor for _AGClosureStorage(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for RBDrawingState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RBDrawingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)unint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = 0;
    }
  }
  return result;
}

void type metadata accessor for AGTypeID(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for _AGAttributeType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _AGAttributeType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = 0;
    }
  }
  return result;
}

void type metadata accessor for _AGAttributeType(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in RBBlurFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBBlurFlags and conformance RBBlurFlags, type metadata accessor for RBBlurFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RBBlurFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBBlurFlags and conformance RBBlurFlags, type metadata accessor for RBBlurFlags);
}

uint64_t base witness table accessor for RawRepresentable in RBBlurFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBBlurFlags and conformance RBBlurFlags, type metadata accessor for RBBlurFlags);
}

uint64_t base witness table accessor for SetAlgebra in RBBlurFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBBlurFlags and conformance RBBlurFlags, type metadata accessor for RBBlurFlags);
}

uint64_t base witness table accessor for RawRepresentable in AGNamedTraceEventID()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGNamedTraceEventID and conformance AGNamedTraceEventID, type metadata accessor for AGNamedTraceEventID);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AGNamedTraceEventID()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGNamedTraceEventID and conformance AGNamedTraceEventID, type metadata accessor for AGNamedTraceEventID);
}

uint64_t base witness table accessor for Equatable in AGNamedTraceEventID()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGNamedTraceEventID and conformance AGNamedTraceEventID, type metadata accessor for AGNamedTraceEventID);
}

uint64_t base witness table accessor for RawRepresentable in RBDisplayListInterpolatorOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, type metadata accessor for RBDisplayListInterpolatorOptionKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBDisplayListInterpolatorOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, type metadata accessor for RBDisplayListInterpolatorOptionKey);
}

uint64_t base witness table accessor for Equatable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for RawRepresentable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for SetAlgebra in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for Equatable in NSTextLayoutManagerSegmentCategory()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextLayoutManagerSegmentCategory and conformance NSTextLayoutManagerSegmentCategory, type metadata accessor for NSTextLayoutManagerSegmentCategory);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSTextLayoutManagerSegmentCategory()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextLayoutManagerSegmentCategory and conformance NSTextLayoutManagerSegmentCategory, type metadata accessor for NSTextLayoutManagerSegmentCategory);
}

uint64_t base witness table accessor for RawRepresentable in NSTextLayoutManagerSegmentCategory()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextLayoutManagerSegmentCategory and conformance NSTextLayoutManagerSegmentCategory, type metadata accessor for NSTextLayoutManagerSegmentCategory);
}

uint64_t base witness table accessor for SetAlgebra in NSTextLayoutManagerSegmentCategory()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSTextLayoutManagerSegmentCategory and conformance NSTextLayoutManagerSegmentCategory, type metadata accessor for NSTextLayoutManagerSegmentCategory);
}

uint64_t base witness table accessor for RawRepresentable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for RawRepresentable in RBImageRendererProperty()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, type metadata accessor for RBImageRendererProperty);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBImageRendererProperty()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, type metadata accessor for RBImageRendererProperty);
}

uint64_t base witness table accessor for RawRepresentable in RBSymbolAnimationOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, type metadata accessor for RBSymbolAnimationOptionKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in RBSymbolAnimationOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, type metadata accessor for RBSymbolAnimationOptionKey);
}

uint64_t base witness table accessor for Equatable in RBSymbolAnimationOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey, type metadata accessor for RBSymbolAnimationOptionKey);
}

uint64_t base witness table accessor for Equatable in RBImageRendererProperty()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBImageRendererProperty and conformance RBImageRendererProperty, type metadata accessor for RBImageRendererProperty);
}

uint64_t base witness table accessor for Equatable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for Equatable in RBDisplayListInterpolatorOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, type metadata accessor for RBDisplayListInterpolatorOptionKey);
}

void type metadata accessor for _DictionaryStorage<CFStringRef, String>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, String>)
  {
    type metadata accessor for CFStringRef(255);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, String>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t lazy protocol witness table accessor for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, type metadata accessor for RBDisplayListInterpolatorOptionKey);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, type metadata accessor for RBDisplayListInterpolatorOptionKey);
}

void type metadata accessor for AGSwiftMetadata(uint64_t a1)
{
}

void type metadata accessor for RBImageType(uint64_t a1)
{
}

void type metadata accessor for NSTextCorrectionMarkerType(uint64_t a1)
{
}

void GraphHost.constants.setter()
{
}

__C::CGRect __swiftcall LayoutDirection.convert(_:to:in:)(__C::CGRect _, SwiftUI::LayoutDirection to, CGSize in)
{
  CGFloat height = _.size.height;
  CGFloat width = _.size.width;
  CGFloat y = _.origin.y;
  if (*(unsigned __int8 *)to != *v3) {
    _.origin.CGFloat x = in.width - _.origin.x - CGRectGetWidth((CGRect)_);
  }
  double v7 = y;
  double v8 = width;
  double v9 = height;
  _.size.CGFloat height = v9;
  _.size.CGFloat width = v8;
  _.origin.CGFloat y = v7;
  return _;
}

void LayoutDirection.opposite.getter(BOOL *a1@<X8>)
{
  *a1 = (*v1 & 1) == 0;
}

void LayoutDirection.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void *static LayoutDirection.allCases.getter()
{
  return &outlined read-only object #0 of static LayoutDirection.allCases.getter;
}

Swift::Int LayoutDirection.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance LayoutDirection(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance LayoutDirection;
}

uint64_t (*EnvironmentValues.layoutDirection.modify(uint64_t a1))(uint64_t a1)
{
  long long v2 = (unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized find<A>(_:key:)(v4);
    if (v5) {
      *long long v2 = *(unsigned char *)(v5 + 72);
    }
    else {
      *long long v2 = 0;
    }
  }
  swift_release_n();
  return EnvironmentValues.layoutDirection.modify;
}

uint64_t EnvironmentValues.layoutDirection.modify(uint64_t a1)
{
  long long v2 = *(uint64_t **)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey);
    swift_release();
    swift_release();
  }

  return swift_release();
}

void LayoutDirection.codingProxy.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

SwiftUI::CodableLayoutDirection __swiftcall CodableLayoutDirection.init(_:)(SwiftUI::CodableLayoutDirection result)
{
  *Swift::UInt v1 = *(unsigned char *)result.base;
  return result;
}

void CodableLayoutDirection.base.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *CodableLayoutDirection.base.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*CodableLayoutDirection.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableLayoutDirection.CodingValue()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2;
  }
  else {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CodableLayoutDirection.CodingValue()
{
  if (*v0) {
    Swift::UInt v1 = 2;
  }
  else {
    Swift::UInt v1 = 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableLayoutDirection.CodingValue()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2;
  }
  else {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance CodableLayoutDirection.CodingValue@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 2) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 1) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CodableLayoutDirection.CodingValue(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1;
  if (*v1) {
    uint64_t v2 = 2;
  }
  *a1 = v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableLayoutDirection.CodingValue()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableLayoutDirection.CodingValue()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t CodableLayoutDirection.encode(to:)(void *a1)
{
  char v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  char v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  lazy protocol witness table accessor for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t CodableLayoutDirection.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    lazy protocol witness table accessor for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableLayoutDirection@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return CodableLayoutDirection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableLayoutDirection(void *a1)
{
  return CodableLayoutDirection.encode(to:)(a1);
}

BOOL specialized static Stack<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return a2 == 0;
  }
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a2 + 40);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
    char v6 = *(unsigned char *)(a1 + 32);
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    char v9 = *(unsigned char *)(a2 + 32);
    outlined copy of BodyInputElement();
    outlined copy of BodyInputElement();
    swift_retain();
    swift_retain();
    if (specialized static BodyInputElement.== infix(_:_:)(v4, v5, v6, v7, v8, v9))
    {
      char v10 = specialized static Stack<A>.== infix(_:_:)(v2, v3);
      outlined consume of BodyInputElement();
      outlined consume of BodyInputElement();
      swift_release();
      swift_release();
      return v10 & 1;
    }
    swift_release();
    swift_release();
    outlined consume of BodyInputElement();
    outlined consume of BodyInputElement();
  }
  return 0;
}

uint64_t specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int v21 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x263F07490];
  uint64_t v7 = MEMORY[0x263F8D8F0];
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)&v21 - v9;
  type metadata accessor for (Date?, Date?)();
  MEMORY[0x270FA5388](v11 - 8);
  char v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  outlined init with copy of AccessibilityTextAttributeResolver?(a1, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Date?, v6, v7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
  outlined init with copy of AccessibilityTextAttributeResolver?(v22, v15, (uint64_t)&lazy cache variable for type metadata for Date?, v6, v7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
  BOOL v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v16((uint64_t)v13, 1, v3) != 1)
  {
    outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v13, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
    if (v16(v15, 1, v3) != 1)
    {
      uint64_t v18 = v21;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v21, v15, v3);
      lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v19 = *(void (**)(char *, uint64_t))(v4 + 8);
      v19(v18, v3);
      v19(v10, v3);
      outlined destroy of Date?((uint64_t)v13);
      return v17 & 1;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    goto LABEL_6;
  }
  if (v16(v15, 1, v3) != 1)
  {
LABEL_6:
    outlined destroy of TypesettingConfiguration((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for (Date?, Date?));
    char v17 = 0;
    return v17 & 1;
  }
  outlined destroy of Date?((uint64_t)v13);
  char v17 = 1;
  return v17 & 1;
}

uint64_t specialized find<A>(_:key:)(uint64_t a1, unint64_t a2)
{
  return specialized find1<A>(_:key:filter:)(a1, a2, (1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2)));
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unint64_t a2, char a3)
{
  uint64_t result = specialized find1<A>(_:key:filter:)(*a1, a2, (1 << (a2 >> 4)) | (1 << (a2 >> 10)) | (1 << SBYTE2(a2)));
  if (!result || *(unsigned char *)(result + 72) != (a3 & 1))
  {
    uint64_t v7 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<VariantThatFitsFlag>, (uint64_t)&type metadata for VariantThatFitsFlag, (uint64_t)&protocol witness table for VariantThatFitsFlag, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(a2, 0, v7);
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection.CodingValue and conformance CodableLayoutDirection.CodingValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutDirection and conformance LayoutDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutDirection and conformance LayoutDirection;
  if (!lazy protocol witness table cache variable for type LayoutDirection and conformance LayoutDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutDirection and conformance LayoutDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [LayoutDirection] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [LayoutDirection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [LayoutDirection] and conformance [A])
  {
    type metadata accessor for [LayoutDirection](255, &lazy cache variable for type metadata for [LayoutDirection], (uint64_t)&type metadata for LayoutDirection, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [LayoutDirection] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableLayoutDirection and conformance CodableLayoutDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection;
  if (!lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableLayoutDirection and conformance CodableLayoutDirection);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableLayoutDirection(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CodableLayoutDirection and conformance CodableLayoutDirection();
  unint64_t result = lazy protocol witness table accessor for type CodableLayoutDirection and conformance CodableLayoutDirection();
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for CodableLayoutDirection()
{
  return &type metadata for CodableLayoutDirection;
}

void *type metadata accessor for CodableLayoutDirection.CodingValue()
{
  return &unk_26FA66048;
}

double *specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v12 = v11;
  BloomFilter.init(hashValue:)(v11);
  unint64_t result = (double *)specialized find1<A>(_:key:filter:)(v10, v19);
  if (!result
    || (result[9] == a2 ? (BOOL v14 = result[10] == a3) : (BOOL v14 = 0),
        v14 ? (BOOL v15 = result[11] == a4) : (BOOL v15 = 0),
        v15 ? (BOOL v16 = result[12] == a5) : (BOOL v16 = 0),
        !v16))
  {
    uint64_t v17 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultPaddingKey>>();
    uint64_t v18 = (double *)swift_allocObject();
    v18[9] = a2;
    v18[10] = a3;
    v18[11] = a4;
    v18[12] = a5;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v12, 0, v17);
    return (double *)swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = specialized find1<A>(_:key:filter:)(v8, v15);
  if (!result) {
    goto LABEL_10;
  }
  if (a4)
  {
    if (*(unsigned char *)(result + 88)) {
      return result;
    }
LABEL_10:
    uint64_t v13 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>>();
    uint64_t v14 = swift_allocObject();
    *(double *)(v14 + 72) = *(double *)&a2;
    *(double *)(v14 + 80) = *(double *)&a3;
    *(unsigned char *)(v14 + 88) = a4 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v13);
    return swift_release();
  }
  if (*(unsigned char *)(result + 88)) {
    goto LABEL_10;
  }
  if (*(double *)(result + 72) != *(double *)&a2 || *(double *)(result + 80) != *(double *)&a3) {
    goto LABEL_10;
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = specialized find1<A>(_:key:filter:)(v8, v16);
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(result + 72);
  if (a2 == 2)
  {
    if (v12 == 2) {
      return result;
    }
LABEL_11:
    uint64_t v14 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>>();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 72) = a2;
    *(double *)(v15 + 80) = *(double *)&a3;
    *(double *)(v15 + 88) = *(double *)&a4;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v14);
    return swift_release();
  }
  if v12 == 2 || ((v12 ^ a2)) {
    goto LABEL_11;
  }
  if (*(double *)(result + 80) != *(double *)&a3 || *(double *)(result + 88) != *(double *)&a4) {
    goto LABEL_11;
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>)
  {
    lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier;
  if (!lazy protocol witness table cache variable for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier);
  }
  return result;
}

void type metadata accessor for TypedElement<BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for Date?(255, a3, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>, a4);
    unint64_t v5 = type metadata accessor for TypedElement();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>);
    }
  }
}

uint64_t sub_2459E22F8()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<PlacementTintKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<PlacementTintKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<PlacementTintKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<PlacementTintKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<PlacementTintKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PlacementTintKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<PlacementTintKey>>);
    }
  }
}

void type metadata accessor for Stack<ImageStyleProtocol.Type>()
{
  if (!lazy cache variable for type metadata for Stack<ImageStyleProtocol.Type>)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for ImageStyleProtocol.Type, &lazy cache variable for type metadata for ImageStyleProtocol);
    unint64_t v0 = type metadata accessor for Stack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Stack<ImageStyleProtocol.Type>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemColorSchemeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemColorSchemeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemColorSchemeKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>, (uint64_t)&type metadata for AccessibilityOnOffLabelsKey, (uint64_t)&protocol witness table for AccessibilityOnOffLabelsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityOnOffLabelsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityButtonShapesKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityInvertColorsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceMotionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<VibrantColorStyleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<VibrantColorStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<VibrantColorStyleKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for VibrantColorStyle.Type?()
{
  if (!lazy cache variable for type metadata for VibrantColorStyle.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for VibrantColorStyle.Type, &lazy cache variable for type metadata for VibrantColorStyle);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VibrantColorStyle.Type?);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<FontDefinitionKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontDefinitionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontDefinitionKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayCornerRadiusKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayCornerRadiusKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayCornerRadiusKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultRenderingModeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultRenderingModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultRenderingModeKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DividerThicknessKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DividerThicknessKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DividerThicknessKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DividerThicknessKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DividerThicknessKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DividerThicknessKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DividerThicknessKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultPixelLengthKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultPixelLengthKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultPixelLengthKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<InTouchBarKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<InTouchBarKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<InTouchBarKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<InTouchBarKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<InTouchBarKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InTouchBarKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<InTouchBarKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<FallbackFontProviderKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FallbackFontProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FallbackFontProviderKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<FallbackFontProviderKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FallbackFontProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FallbackFontProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FallbackFontProviderKey>>);
    }
  }
}

uint64_t sub_2459E3614()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultTrackingKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultTrackingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultTrackingKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultKerningKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultKerningKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultKerningKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultSymbolFontKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultSymbolFontKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultSymbolFontKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultSymbolFontKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultSymbolFontKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultSymbolFontKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultSymbolFontKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolFontKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolFontKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolFontKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolFontKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolFontKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolFontKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolFontKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FontKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<IsVisionEnabledKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<IsVisionEnabledKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<IsVisionEnabledKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemColorDefinitionKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemColorDefinitionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemColorDefinitionKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContainerShapeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContainerShapeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContainerShapeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerShapeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_2459E3E08()
{
  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HeaderProminenceKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HeaderProminenceKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HeaderProminenceKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HeaderProminenceKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HeaderProminenceKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderProminenceKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HeaderProminenceKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AllowsVibrantBlendingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>);
    }
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<DisablesContentTransitionsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<DisablesContentTransitionsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<DisablesContentTransitionsKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesContentTransitionsKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextScaleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextScaleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextScaleKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AppearsActiveKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AppearsActiveKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AppearsActiveKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>);
    }
  }
}

uint64_t sub_2459E51C8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundStyleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundStyleKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundContextKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundContextKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundContextKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundContextKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>);
    }
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>, (uint64_t)&type metadata for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t)&protocol witness table for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>, (uint64_t)&type metadata for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t)&protocol witness table for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TypesettingConfigurationKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TypesettingConfigurationKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TypesettingConfigurationKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AvoidsOrphansKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AvoidsOrphansKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AvoidsOrphansKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AvoidsOrphansKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTextFieldTruncationMode> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>);
    }
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<ContinuousKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<ContinuousKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<ContinuousKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<ContinuousKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<VibrantColorStyleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<VibrantColorStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<VibrantColorStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<VibrantColorStyleKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MaterialActiveAppearance.Key> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundProminence.Key>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundProminence.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundProminence.Key>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ControlSizeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ControlSizeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ControlSizeKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<UnredactSymbolImage>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<UnredactSymbolImage>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<UnredactSymbolImage>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<UnredactSymbolImage>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<UnredactSymbolImage>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UnredactSymbolImage> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<UnredactSymbolImage>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<StrikethroughStyleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<StrikethroughStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<StrikethroughStyleKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_textShape> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_textShape> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_textShape> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_textShape> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_textShape> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HyphenationDisabledKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HyphenationDisabledKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationDisabledKey>, (uint64_t)&type metadata for HyphenationDisabledKey, (uint64_t)&protocol witness table for HyphenationDisabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationDisabledKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HyphenationDisabledKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationDisabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationDisabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationDisabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationDisabledKey>, (uint64_t)&type metadata for HyphenationDisabledKey, (uint64_t)&protocol witness table for HyphenationDisabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationDisabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<MinimumLineHeightKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MinimumLineHeightKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MinimumLineHeightKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<MaximumLineHeightKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MaximumLineHeightKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MaximumLineHeightKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LineHeightMultipleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LineHeightMultipleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LineHeightMultipleKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LineSpacingKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LineSpacingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LineSpacingKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextSizingKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextSizingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextSizingKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextAlignmentKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextAlignmentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextAlignmentKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HyphenationDisabledKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HyphenationDisabledKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationDisabledKey>, (uint64_t)&type metadata for HyphenationDisabledKey, (uint64_t)&protocol witness table for HyphenationDisabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationDisabledKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HyphenationDisabledKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HyphenationFactorKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HyphenationFactorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HyphenationFactorKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<MinimumLineHeightKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MinimumLineHeightKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumLineHeightKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MinimumLineHeightKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<MaximumLineHeightKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MaximumLineHeightKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MaximumLineHeightKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MaximumLineHeightKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LineHeightMultipleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LineHeightMultipleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LineHeightMultipleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LineHeightMultipleKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LineSpacingKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LineSpacingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LineSpacingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LineSpacingKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<MinimumScaleFactorKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MinimumScaleFactorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<MinimumScaleFactorKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TruncationModeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TruncationModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TruncationModeKey>>);
    }
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<TracksVelocityKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<TracksVelocityKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<TracksVelocityKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<TracksVelocityKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_textShape> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultFontKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultFontKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultFontKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultFontKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<WritingModeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WritingModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<WritingModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<WritingModeKey>>);
    }
  }
}

void type metadata accessor for PlatformTextSelectionRepresentation.Type?()
{
  if (!lazy cache variable for type metadata for PlatformTextSelectionRepresentation.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformTextSelectionRepresentation.Type, &lazy cache variable for type metadata for PlatformTextSelectionRepresentation);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformTextSelectionRepresentation.Type?);
    }
  }
}

void type metadata accessor for PlatformTextRepresentable.Type?()
{
  if (!lazy cache variable for type metadata for PlatformTextRepresentable.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformTextRepresentable.Type, &lazy cache variable for type metadata for PlatformTextRepresentable);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformTextRepresentable.Type?);
    }
  }
}

uint64_t sub_2459E750C()
{
  outlined consume of ContentTransition.Storage(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(unsigned char *)(v0 + 29));
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKind.Key> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ReducedLuminanceKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ReducedLuminanceKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ReducedLuminanceKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>);
    }
  }
}

void type metadata accessor for PlatformSpacerRepresentable.Type?()
{
  if (!lazy cache variable for type metadata for PlatformSpacerRepresentable.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformSpacerRepresentable.Type, &lazy cache variable for type metadata for PlatformSpacerRepresentable);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformSpacerRepresentable.Type?);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontDefinitionKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontDefinitionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FontDefinitionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontDefinitionKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenSensitiveURLActionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<OpenURLActionKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<OpenURLActionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<OpenURLActionKey>>);
    }
  }
}

uint64_t objectdestroy_31Tm()
{
  if (*(unsigned char *)(v0 + 48) != 0xFF) {
    outlined consume of OpenURLAction.Handler(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(_WORD *)(v0 + 48) & 1);
  }

  return swift_deallocObject();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SensitiveContentKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SensitiveContentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SensitiveContentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SensitiveContentKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<RedactionReasonsKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<RedactionReasonsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<RedactionReasonsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<RedactionReasonsKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for SystemAccentValueProvider.Type?()
{
  if (!lazy cache variable for type metadata for SystemAccentValueProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for SystemAccentValueProvider.Type, &lazy cache variable for type metadata for SystemAccentValueProvider);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SystemAccentValueProvider.Type?);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemAccentValueKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemAccentValueKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemAccentValueKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemAccentValueKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemAccentValueKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemAccentValueKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemAccentValueKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>);
    }
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationLogicalListenerKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HoverEffectContextKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HoverEffectContextKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HoverEffectContextKey>>);
    }
  }
}

uint64_t sub_2459E8C9C()
{
  return swift_deallocObject();
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for PlatformNamedImageRepresentable.Type?()
{
  if (!lazy cache variable for type metadata for PlatformNamedImageRepresentable.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformNamedImageRepresentable.Type, &lazy cache variable for type metadata for PlatformNamedImageRepresentable);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformNamedImageRepresentable.Type?);
    }
  }
}

void type metadata accessor for PlatformImageRepresentable.Type?()
{
  if (!lazy cache variable for type metadata for PlatformImageRepresentable.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for PlatformImageRepresentable.Type, &lazy cache variable for type metadata for PlatformImageRepresentable);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformImageRepresentable.Type?);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultPixelLengthKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultPixelLengthKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPixelLengthKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultPixelLengthKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>);
    }
  }
}

uint64_t sub_2459E8FC0()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TypesettingConfigurationKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TypesettingConfigurationKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TypesettingConfigurationKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TypesettingConfigurationKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>);
    }
  }
}

uint64_t sub_2459E9120()
{
  outlined consume of ResolvedTextSuffix(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));

  return swift_deallocObject();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<CalendarKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<CalendarKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<CalendarKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TimeZoneKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TimeZoneKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TimeZoneKey>>);
    }
  }
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.ScrollTargetAnchorKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultPaddingKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultPaddingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultPaddingKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultPaddingKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultPaddingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultPaddingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultPaddingKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>);
    }
  }
}

ValueMetadata *type metadata accessor for LayoutDirectionKey()
{
  return &type metadata for LayoutDirectionKey;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>()
{
  if (!lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ViewListArchivedAnimation.Effect>, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ViewModifier_Content);
    unint64_t v0 = type metadata accessor for BodyInput();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>);
    }
  }
}

uint64_t AnyStyleContextType.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = type metadata accessor for StyleContextTypeBox();
  *a1 = result;
  a1[1] = (uint64_t)&protocol witness table for StyleContextTypeBox<A>;
  return result;
}

uint64_t static AnyStyleContextType.== infix(_:_:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 8))(*a2, a2[1]) & 1;
}

uint64_t AnyStyleContextType.acceptsAny<each A>(_:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = a1;
  unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v7 = 8 * a2;
  if (a2 == 1)
  {
    MetatypeMetadatdouble a = swift_getMetatypeMetadata();
  }
  else
  {
    v22[1] = a4;
    MEMORY[0x270FA5388](a1);
    if (a2)
    {
      Swift::Int v9 = (void *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v10 = a2;
      do
      {
        v6 += 8;
        *v9++ = swift_getMetatypeMetadata();
        --v10;
      }
      while (v10);
    }
    MetatypeMetadatdouble a = swift_getTupleTypeMetadata();
  }
  MEMORY[0x270FA5388](MetatypeMetadata);
  v15.n128_f64[0] = MEMORY[0x270FA5388](v11);
  if (a2)
  {
    uint64_t v16 = (int *)(v13 + 32);
    uint64_t v17 = (void *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v18 = a2;
    do
    {
      if (a2 == 1) {
        int v19 = 0;
      }
      else {
        int v19 = *v16;
      }
      int v20 = *v5++;
      *(void *)(v14 + v19) = *v20;
      *v17++ = v14 + v19;
      v16 += 4;
      --v18;
    }
    while (v18);
  }
  return (*(uint64_t (**)(__n128))(v12 + 24))(v15) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyStyleContextType(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 8))(*a2, a2[1]) & 1;
}

uint64_t static StyleContextTypeBox.acceptsAny<A>(_:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a1;
  unint64_t v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v10 = 8 * a2;
  if (a2 == 1)
  {
    MetatypeMetadatdouble a = swift_getMetatypeMetadata();
  }
  else
  {
    v24[0] = v24;
    v24[1] = a6;
    MEMORY[0x270FA5388](a1);
    if (a2)
    {
      uint64_t v12 = (void *)((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v13 = a2;
      do
      {
        v9 += 8;
        *v12++ = swift_getMetatypeMetadata();
        --v13;
      }
      while (v13);
    }
    MetatypeMetadatdouble a = swift_getTupleTypeMetadata();
  }
  MEMORY[0x270FA5388](MetatypeMetadata);
  v17.n128_f64[0] = MEMORY[0x270FA5388](v14);
  if (a2)
  {
    uint64_t v18 = (int *)(v15 + 32);
    int v19 = (void *)((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v20 = a2;
    do
    {
      if (a2 == 1) {
        int v21 = 0;
      }
      else {
        int v21 = *v18;
      }
      uint64_t v22 = *v8++;
      *(void *)(v16 + v21) = *v22;
      *v19++ = v16 + v21;
      v18 += 4;
      --v20;
    }
    while (v20);
  }
  return (*(uint64_t (**)(__n128))(a5 + 16))(v17) & 1;
}

uint64_t protocol witness for static AnyStyleContextTypeBox.acceptsAny<A>(_:) in conformance StyleContextTypeBox<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (void **)((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2) {
    memcpy((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v10);
  }
  return static StyleContextTypeBox.acceptsAny<A>(_:)(v11, a2, *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4) & 1;
}

double static CGPoint.infinity.getter()
{
  return INFINITY;
}

BOOL CGPoint.isFinite.getter(double a1, double a2)
{
  return (~*(void *)&a2 & 0x7FF0000000000000) != 0 && (~*(void *)&a1 & 0x7FF0000000000000) != 0;
}

double CGPoint.offsetBy(dx:dy:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

double CGPoint.offsetBy(dx:)(double a1, double a2)
{
  return a1 + a2;
}

double CGPoint.offsetBy(dy:)(double a1, double a2)
{
  return a2 + 0.0;
}

CGPoint __swiftcall CGPoint.offset(by:)(CGSize by)
{
  double v3 = by.width + v1;
  double v4 = by.height + v2;
  result.CGFloat y = v4;
  result.CGFloat x = v3;
  return result;
}

double CGPoint.scaledBy(x:y:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

double CGPoint.scaledBy(x:)(double a1, double a2)
{
  return a1 * a2;
}

double CGPoint.scaledBy(y:)(double a1, double a2)
{
  return a2;
}

double CGPoint.scaled(by:)(double a1, double a2)
{
  return a1 * a2;
}

uint64_t CGPoint.isNaN.getter(double a1, double a2)
{
  BOOL v2 = (~*(void *)&a2 & 0x7FF0000000000000) == 0 && (*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0;
  return (~*(void *)&a1 & 0x7FF0000000000000) == 0 && (*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 || v2;
}

double CGPoint.flushingNaNs.getter(double result)
{
  if ((*(void *)&result & 0xFFFFFFFFFFFFFLL) != 0) {
    double v1 = 0.0;
  }
  else {
    double v1 = result;
  }
  if ((~*(void *)&result & 0x7FF0000000000000) == 0) {
    return v1;
  }
  return result;
}

BOOL CGPoint.approximates(_:epsilon:)(double a1, double a2, double a3, double a4, double a5)
{
  BOOL v5 = vabdd_f64(a4, a1) < a3;
  return vabdd_f64(a5, a2) < a3 && v5;
}

Swift::Void __swiftcall CGPoint.clamp(size:)(CGSize size)
{
  if (size.width < 0.0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  double v2 = *v1;
  if (*v1 < 0.0) {
    double v2 = 0.0;
  }
  if (v2 <= size.width) {
    size.CGFloat width = v2;
  }
  *double v1 = size.width;
  if (size.height < 0.0) {
    goto LABEL_13;
  }
  double height = v1[1];
  if (height < 0.0) {
    double height = 0.0;
  }
  if (height > size.height) {
    double height = size.height;
  }
  v1[1] = height;
}

CGPoint __swiftcall CGPoint.clamped(size:)(CGPoint size)
{
  if (size.x < 0.0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (size.y < 0.0)
  {
LABEL_14:
    __break(1u);
    return size;
  }
  if (v1 < 0.0) {
    double v1 = 0.0;
  }
  if (v1 <= size.x) {
    size.CGFloat x = v1;
  }
  if (v2 < 0.0) {
    double v3 = 0.0;
  }
  else {
    double v3 = v2;
  }
  if (v3 <= size.y) {
    size.CGFloat y = v3;
  }
  return size;
}

Swift::Void __swiftcall CGPoint.clamp(rect:)(__C::CGRect rect)
{
  if (rect.origin.x > rect.size.width)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  if (*v1 >= rect.origin.x) {
    rect.origin.CGFloat x = *v1;
  }
  if (rect.origin.x > rect.size.width) {
    rect.origin.CGFloat x = rect.size.width;
  }
  *double v1 = rect.origin.x;
  if (rect.origin.y > rect.size.height) {
    goto LABEL_13;
  }
  double y = v1[1];
  if (y < rect.origin.y) {
    double y = rect.origin.y;
  }
  if (y > rect.size.height) {
    double y = rect.size.height;
  }
  v1[1] = y;
}

CGPoint __swiftcall CGPoint.clamped(rect:)(__C::CGRect rect)
{
  if (rect.origin.x > rect.size.width)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (rect.origin.y > rect.size.height)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (rect.origin.x <= v1) {
    rect.origin.CGFloat x = v1;
  }
  if (rect.origin.x > rect.size.width) {
    rect.origin.CGFloat x = rect.size.width;
  }
  if (rect.origin.y <= v2) {
    rect.origin.double y = v2;
  }
  if (rect.origin.y > rect.size.height) {
    rect.origin.double y = rect.size.height;
  }
LABEL_14:
  result.double y = rect.origin.y;
  result.CGFloat x = rect.origin.x;
  return result;
}

double CGPoint.subscript.getter(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return result;
}

uint64_t CGPoint.subscript.setter(uint64_t result, double a2)
{
  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

double (*CGPoint.subscript.modify(uint64_t a1, char a2))(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = a2;
  double v3 = v2 + 1;
  if ((a2 & 1) == 0) {
    double v3 = v2;
  }
  *(void *)a1 = *v3;
  return CGPoint.subscript.modify;
}

double CGPoint.subscript.modify(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 8) + 8 * (*(unsigned char *)(a1 + 16) & 1)) = *(void *)a1;
  return result;
}

double CGPoint.init(_:in:by:)(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return a2;
}

void CGPoint.animatableData.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*CGPoint.animatableData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return CGPoint.animatableData.modify;
}

__n128 protocol witness for Animatable.animatableData.setter in conformance CGPoint(__n128 *a1)
{
  __n128 result = *a1;
  *double v1 = *a1;
  return result;
}

__n128 (*protocol witness for Animatable.animatableData.modify in conformance CGPoint(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

__n128 protocol witness for Animatable.animatableData.modify in conformance CGPoint(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)a1[1].n128_u64[0] = *a1;
  return result;
}

double *CGPoint.encode(to:)(double *result, double a2, double a3)
{
  double v4 = result;
  if (a2 != 0.0)
  {
    double v5 = a2;
    double v6 = fabs(a2);
    if (v6 >= 65536.0) {
      Swift::UInt v7 = 9;
    }
    else {
      Swift::UInt v7 = 13;
    }
    ProtobufEncoder.encodeVarint(_:)(v7);
    if (v6 >= 65536.0)
    {
      uint64_t v9 = *((void *)v4 + 1);
      __n128 result = (double *)(v9 + 8);
      if (__OFADD__(v9, 8))
      {
        __break(1u);
      }
      else if (*((void *)v4 + 2) >= (uint64_t)result)
      {
        *((void *)v4 + 1) = result;
        *(double *)(*(void *)v4 + v9) = v5;
        goto LABEL_12;
      }
      __n128 result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *__n128 result = v5;
    }
    else
    {
      uint64_t v8 = *((void *)v4 + 1);
      __n128 result = (double *)(v8 + 4);
      if (__OFADD__(v8, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v5 = v5;
        if (*((void *)v4 + 2) >= (uint64_t)result)
        {
          *((void *)v4 + 1) = result;
          *(_DWORD *)(*(void *)v4 + v8) = LODWORD(v5);
          goto LABEL_12;
        }
      }
      __n128 result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)__n128 result = LODWORD(v5);
    }
  }
LABEL_12:
  if (a3 != 0.0)
  {
    double v10 = fabs(a3);
    if (v10 >= 65536.0) {
      Swift::UInt v11 = 17;
    }
    else {
      Swift::UInt v11 = 21;
    }
    ProtobufEncoder.encodeVarint(_:)(v11);
    if (v10 < 65536.0)
    {
      uint64_t v12 = *((void *)v4 + 1);
      __n128 result = (double *)(v12 + 4);
      if (!__OFADD__(v12, 4))
      {
        *(float *)&a3 = a3;
        if (*((void *)v4 + 2) >= (uint64_t)result)
        {
          *((void *)v4 + 1) = result;
          *(_DWORD *)(*(void *)v4 + v12) = LODWORD(a3);
          return result;
        }
        goto LABEL_30;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __n128 result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)__n128 result = LODWORD(a3);
      return result;
    }
    uint64_t v13 = *((void *)v4 + 1);
    __n128 result = (double *)(v13 + 8);
    if (__OFADD__(v13, 8)) {
      goto LABEL_29;
    }
    if (*((void *)v4 + 2) < (uint64_t)result)
    {
      __n128 result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *__n128 result = a3;
    }
    else
    {
      *((void *)v4 + 1) = result;
      *(double *)(*(void *)v4 + v13) = a3;
    }
  }
  return result;
}

double CGPoint.init(from:)(void *a1)
{
  return specialized CGPoint.init(from:)(a1);
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CGPoint(double *a1)
{
  return CGPoint.encode(to:)(a1, *v1, v1[1]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CGPoint(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = specialized CGPoint.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
  }
}

double specialized CGPoint.init(from:)(void *a1)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  if (v3 < v4)
  {
    double v5 = 0.0;
    while (1)
    {
      unint64_t v6 = a1[3];
      if (v6)
      {
        unint64_t v7 = a1[4];
        if (v3 < v7) {
          goto LABEL_15;
        }
        if (v7 < v3) {
          goto LABEL_48;
        }
        a1[3] = 0;
      }
      unint64_t v6 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        return v5;
      }
      if (v6 <= 7)
      {
LABEL_48:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return v5;
      }
LABEL_15:
      if (v6 >> 3 == 2)
      {
        unint64_t v10 = v6 & 7;
        if (v10 != 5)
        {
          if (v10 == 2)
          {
            uint64_t v15 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v5;
            }
            if (v15 < 0) {
              goto LABEL_51;
            }
            uint64_t v11 = a1[1];
            if (v4 < v11 + v15) {
              goto LABEL_48;
            }
            a1[3] = 17;
            a1[4] = v11 + v15;
          }
          else
          {
            if (v10 != 1) {
              goto LABEL_48;
            }
            uint64_t v11 = a1[1];
          }
          unint64_t v3 = v11 + 8;
          if (v4 < v11 + 8) {
            goto LABEL_48;
          }
LABEL_7:
          a1[1] = v3;
          goto LABEL_8;
        }
        unint64_t v3 = a1[1] + 4;
        if (v4 < v3) {
          goto LABEL_48;
        }
        a1[1] = v3;
      }
      else
      {
        if (v6 >> 3 != 1)
        {
          switch(v6 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1) {
                return v5;
              }
              unint64_t v3 = a1[1];
              goto LABEL_8;
            case 1uLL:
              unint64_t v3 = a1[1] + 8;
              goto LABEL_6;
            case 2uLL:
              uint64_t v16 = ProtobufDecoder.decodeVarint()();
              if (v1) {
                return v5;
              }
              if (v16 < 0) {
                goto LABEL_52;
              }
              unint64_t v3 = a1[1] + v16;
LABEL_6:
              if (v4 >= v3) {
                goto LABEL_7;
              }
              goto LABEL_48;
            case 5uLL:
              unint64_t v3 = a1[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_48;
          }
        }
        unint64_t v8 = v6 & 7;
        if (v8 != 5)
        {
          if (v8 == 2)
          {
            uint64_t v14 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v5;
            }
            if (v14 < 0)
            {
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
              JUMPOUT(0x2459EA5D4);
            }
            uint64_t v9 = (double *)a1[1];
            if (v4 < (unint64_t)v9 + v14) {
              goto LABEL_48;
            }
            a1[3] = 9;
            a1[4] = (char *)v9 + v14;
          }
          else
          {
            if (v8 != 1) {
              goto LABEL_48;
            }
            uint64_t v9 = (double *)a1[1];
          }
          unint64_t v3 = (unint64_t)(v9 + 1);
          if (v4 < (unint64_t)(v9 + 1)) {
            goto LABEL_48;
          }
          double v5 = *v9;
          goto LABEL_7;
        }
        uint64_t v12 = (float *)a1[1];
        unint64_t v3 = (unint64_t)(v12 + 1);
        if (v4 < (unint64_t)(v12 + 1)) {
          goto LABEL_48;
        }
        float v13 = *v12;
        a1[1] = v3;
        double v5 = v13;
      }
LABEL_8:
      unint64_t v4 = a1[2];
      if (v3 >= v4) {
        goto LABEL_4;
      }
    }
  }
  double v5 = 0.0;
LABEL_4:
  a1[3] = 0;
  return v5;
}

double sub_2459EA5F0@<D0>(double *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a1 + 1;
  if (!*a2) {
    unint64_t v3 = a1;
  }
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

void *sub_2459EA60C(void *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 8;
  if (!*a3) {
    uint64_t v3 = 0;
  }
  *(void *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_2459EA628()
{
  return 0;
}

__n128 sub_2459EA638@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_2459EA644(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError;
  if (!lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError;
  if (!lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError);
  }
  return result;
}

uint64_t _DisplayList_Identity.value.getter()
{
  return *v0;
}

uint64_t _DisplayList_Identity.init(decodedValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _DisplayList_Identity.none.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t _DisplayList_Identity.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 35;
}

void _DisplayList_Identity.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static _DisplayList_Identity.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _DisplayList_Identity.CodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _DisplayList_Identity.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _DisplayList_Identity.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _DisplayList_Identity.CodingKeys()
{
  return 0x65756C6176;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _DisplayList_Identity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DisplayList_Identity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _DisplayList_Identity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t _DisplayList_Identity.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys, (uint64_t)&unk_26FA654F8, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys);
  }
  return result;
}

Swift::Int _DisplayList_Identity.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _DisplayList_Identity.init(from:)@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  float v13 = a2;
  type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<_DisplayList_Identity.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys, (uint64_t)&unk_26FA654F8, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v12 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v13;
    int v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *uint64_t v9 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _DisplayList_Identity()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance _DisplayList_Identity@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return _DisplayList_Identity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _DisplayList_Identity(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys, (uint64_t)&unk_26FA654F8, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_Identity.CodingKeys and conformance _DisplayList_Identity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DisplayList_Identity()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 35;
}

uint64_t DisplayList.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DisplayList.Features.rawValue.getter()
{
  return *v0;
}

void static DisplayList.Features.required.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

void static DisplayList.Features.animations.getter(_WORD *a1@<X8>)
{
  *a1 = 4;
}

void static DisplayList.Features.dynamicContent.getter(_WORD *a1@<X8>)
{
  *a1 = 8;
}

void static DisplayList.Features.interpolatorLayers.getter(_WORD *a1@<X8>)
{
  *a1 = 16;
}

void static DisplayList.Features.interpolatorRoots.getter(_WORD *a1@<X8>)
{
  *a1 = 32;
}

void static DisplayList.Features.stateEffects.getter(_WORD *a1@<X8>)
{
  *a1 = 64;
}

void static DisplayList.Features.states.getter(_WORD *a1@<X8>)
{
  *a1 = 128;
}

void static DisplayList.Features.flattened.getter(_WORD *a1@<X8>)
{
  *a1 = 512;
}

_WORD *protocol witness for OptionSet.init(rawValue:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance DisplayList.Features(_WORD *a1@<X8>)
{
  *a1 = 0;
}

_WORD *protocol witness for SetAlgebra.union(_:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result | *v2;
  return result;
}

_WORD *protocol witness for SetAlgebra.intersection(_:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result & *v2;
  return result;
}

_WORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result ^ *v2;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance DisplayList.Features(_WORD *a1, unsigned __int16 *a2)
{
  int v3 = (unsigned __int16)*v2;
  int v4 = *a2;
  if ((v4 & v3) != v4) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v4;
  return (v4 & v3) != v4;
}

unsigned __int16 *protocol witness for SetAlgebra.remove(_:) in conformance DisplayList.Features@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = (unsigned __int16)*v2;
  int v4 = *result;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v3 & ~(_WORD)v4;
  }
  *(_WORD *)a2 = v5;
  *(unsigned char *)(a2 + 2) = v5 == 0;
  return result;
}

unsigned __int16 *protocol witness for SetAlgebra.update(with:) in conformance DisplayList.Features@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = (unsigned __int16)*v2;
  int v4 = *result;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *(_WORD *)a2 = v5;
  *(unsigned char *)(a2 + 2) = v5 == 0;
  return result;
}

_WORD *protocol witness for SetAlgebra.formUnion(_:) in conformance DisplayList.Features(_WORD *result)
{
  *v1 |= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance DisplayList.Features(_WORD *result)
{
  *v1 &= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DisplayList.Features(_WORD *result)
{
  *v1 ^= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.subtracting(_:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DisplayList.Features(unsigned __int16 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance DisplayList.Features(_WORD *a1)
{
  return (unsigned __int16)(*a1 & *v1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DisplayList.Features(unsigned __int16 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance DisplayList.Features()
{
  return *v0 == 0;
}

_WORD *protocol witness for SetAlgebra.subtract(_:) in conformance DisplayList.Features(_WORD *result)
{
  *v1 &= ~*result;
  return result;
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance DisplayList.Features@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DisplayList.Features(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

void DisplayList.features.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 8);
}

void DisplayList.properties.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 10);
}

uint64_t DisplayList.append(_:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 40);
  unint64_t v3 = *(void *)(result + 48);
  uint64_t v4 = *(void *)(result + 56);
  int v5 = *(unsigned __int16 *)(result + 64) | (*(unsigned __int8 *)(result + 66) << 16);
  if (v3 >> 62 != 3 || (v5 & 0xFFFFFF) != 0 || v3 != 0xC000000000000000 || (v4 | v2) != 0)
  {
    uint64_t v9 = v1;
    uint64_t v10 = *(void *)result;
    uint64_t v11 = *(void *)(result + 8);
    uint64_t v12 = *(void *)(result + 16);
    uint64_t v13 = *(void *)(result + 24);
    uint64_t v14 = *(void *)(result + 32);
    int v15 = *(_DWORD *)(result + 68);
    uint64_t v16 = *v1;
    outlined copy of DisplayList.Item.Value(*(void *)(result + 40), v3);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    _OWORD v16[2] = v18 + 1;
    int v19 = &v16[9 * v18];
    v19[4] = v10;
    _OWORD v19[5] = v11;
    v19[6] = v12;
    v19[7] = v13;
    v19[8] = v14;
    v19[9] = v2;
    v19[10] = v3;
    v19[11] = v4;
    *((unsigned char *)v19 + 98) = BYTE2(v5);
    *((_WORD *)v19 + 48) = v5;
    *((_DWORD *)v19 + 25) = v15;
    *uint64_t v9 = v16;
    DisplayList.Item.features.getter(&v20);
    *((_WORD *)v9 + 4) |= v20;
    unint64_t result = DisplayList.Item.properties.getter(&v20);
    *((unsigned char *)v9 + 10) |= v20;
  }
  return result;
}

Swift::Void __swiftcall DisplayList.reserveCapacity(_:)(Swift::Int a1)
{
  unint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || a1 > v3[3] >> 1)
  {
    if (v3[2] <= a1) {
      Swift::Int v5 = a1;
    }
    else {
      Swift::Int v5 = v3[2];
    }
    unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 0, v3);
  }
  *uint64_t v1 = v3;
}

void specialized DisplayList.transform(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  unint64_t v3 = *(void **)a1;
  uint64_t v37 = *(void *)(*(void *)a1 + 16);
  if (v37)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_35;
    }
    for (; v3[2]; unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3))
    {
      __int16 v5 = 0;
      char v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = v3 + 4;
      uint64_t v9 = 1;
      uint64_t v36 = a3;
      while (1)
      {
        unint64_t v10 = v7;
        unint64_t v7 = v9;
        uint64_t v11 = &v8[9 * v10];
        closure #1 in ViewGraphTransform.apply(to:)((uint64_t)v11, a2, a3);
        if (v10 >= v3[2]) {
          break;
        }
        uint64_t v12 = &v8[9 * v10];
        __int16 v13 = *((_WORD *)v12 + 32);
        char v14 = *((unsigned char *)v12 + 66);
        int v15 = *((_DWORD *)v12 + 17);
        long long v16 = v11[1];
        v39[0] = *v11;
        v39[1] = v16;
        long long v17 = *((_OWORD *)v12 + 3);
        v39[2] = *((_OWORD *)v12 + 2);
        _DWORD v39[3] = v17;
        char v41 = v14;
        __int16 v40 = v13;
        int v42 = v15;
        DisplayList.Item.features.getter(&v43);
        unint64_t v18 = v3[2];
        if (v10 >= v18) {
          goto LABEL_34;
        }
        v5 |= v43;
        unint64_t v19 = v12[5];
        unint64_t v20 = v12[6];
        int v21 = *((unsigned __int16 *)v12 + 32) | (*((unsigned __int8 *)v12 + 66) << 16);
        switch(v20 >> 62)
        {
          case 1uLL:
            switch(BYTE4(v20))
            {
              case 2u:
                outlined copy of DisplayList.Effect(v19, v20, 2);
                int v23 = v19;
                break;
              case 7u:
                int v23 = *(unsigned __int8 *)(v19 + 26);
                outlined copy of DisplayList.Item.Value(v19, v20);
                outlined consume of DisplayList.Effect(v19, v20, 7);
                swift_bridgeObjectRelease();
                break;
              case 0x11u:
                (*(void (**)(_OWORD *__return_ptr))(*(void *)v19 + 120))(v39);
                outlined copy of DisplayList.Item.Value(v19, v20);
                outlined consume of DisplayList.Effect(v19, v20, 17);
                swift_bridgeObjectRelease();
                int v23 = LOBYTE(v39[0]);
                break;
              default:
                outlined copy of DisplayList.Effect(v19, v20, SBYTE4(v20));
                swift_bridgeObjectRetain();
                outlined consume of DisplayList.Effect(v19, v20, SBYTE4(v20));
                swift_bridgeObjectRelease();
                int v23 = 0;
                break;
            }
            unsigned int v22 = v23 | ((v21 & 0xFF0000u) >> 16);
            a3 = v36;
            goto LABEL_29;
          case 2uLL:
            uint64_t v24 = *(void *)(v19 + 16);
            if (!v24) {
              goto LABEL_5;
            }
            if (v24 == 1)
            {
              uint64_t v25 = 0;
              LOBYTE(v22) = 0;
LABEL_22:
              uint64_t v32 = v24 - v25;
              double v33 = (char *)(v19 + 40 * v25 + 66);
              do
              {
                char v34 = *v33;
                v33 += 40;
                LOBYTE(v22) = v34 | v22;
                --v32;
              }
              while (v32);
              goto LABEL_29;
            }
            char v26 = 0;
            char v27 = 0;
            uint64_t v25 = v24 & 0x7FFFFFFFFFFFFFFELL;
            uint64_t v28 = (char *)(v19 + 106);
            uint64_t v29 = v24 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              char v30 = *(v28 - 40);
              char v31 = *v28;
              v28 += 80;
              v26 |= v30;
              v27 |= v31;
              v29 -= 2;
            }
            while (v29);
            LOBYTE(v22) = v27 | v26;
            if (v24 != v25) {
              goto LABEL_22;
            }
            goto LABEL_29;
          case 3uLL:
            goto LABEL_5;
          default:
            if (v19 >> 60 == 9)
            {
              LOBYTE(v22) = *(unsigned char *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
LABEL_29:
              v6 |= v22;
              if (v7 == v37)
              {
LABEL_31:
                *(void *)a1 = v3;
                *(unsigned char *)(a1 + 10) = v6;
                *(_WORD *)(a1 + 8) = v5;
                return;
              }
              unint64_t v18 = v3[2];
            }
            else
            {
LABEL_5:
              if (v7 == v37) {
                goto LABEL_31;
              }
            }
            uint64_t v9 = v7 + 1;
            if (v7 >= v18) {
              goto LABEL_36;
            }
            break;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      ;
    }
LABEL_36:
    __break(1u);
    JUMPOUT(0x2459EB728);
  }
}

void DisplayList.transform(_:)(void (*a1)(_OWORD *), uint64_t a2)
{
  *(_WORD *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 10) = 0;
  unint64_t v3 = *(void **)v2;
  uint64_t v38 = *(void *)(*(void *)v2 + 16);
  if (v38)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_35;
    }
    for (; v3[2]; unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3))
    {
      __int16 v5 = 0;
      char v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = v3 + 4;
      uint64_t v9 = 1;
      uint64_t v37 = a2;
      while (1)
      {
        unint64_t v10 = v7;
        unint64_t v7 = v9;
        uint64_t v11 = &v8[9 * v10];
        a1(v11);
        if (v10 >= v3[2]) {
          break;
        }
        uint64_t v12 = &v8[9 * v10];
        __int16 v13 = *((_WORD *)v12 + 32);
        char v14 = *((unsigned char *)v12 + 66);
        int v15 = *((_DWORD *)v12 + 17);
        long long v16 = v11[1];
        v40[0] = *v11;
        v40[1] = v16;
        long long v17 = *((_OWORD *)v12 + 3);
        v40[2] = *((_OWORD *)v12 + 2);
        v40[3] = v17;
        char v42 = v14;
        __int16 v41 = v13;
        int v43 = v15;
        DisplayList.Item.features.getter(&v44);
        unint64_t v18 = v3[2];
        if (v10 >= v18) {
          goto LABEL_34;
        }
        unint64_t v19 = v12 + 5;
        v5 |= v44;
        unint64_t v20 = v12[5];
        unint64_t v21 = v12[6];
        int v22 = *((unsigned __int16 *)v19 + 12) | (*((unsigned __int8 *)v19 + 26) << 16);
        switch(v21 >> 62)
        {
          case 1uLL:
            switch(BYTE4(v21))
            {
              case 2u:
                outlined copy of DisplayList.Effect(v20, v21, 2);
                int v24 = v20;
                break;
              case 7u:
                int v24 = *(unsigned __int8 *)(v20 + 26);
                outlined copy of DisplayList.Item.Value(v20, v21);
                outlined consume of DisplayList.Effect(v20, v21, 7);
                swift_bridgeObjectRelease();
                break;
              case 0x11u:
                (*(void (**)(_OWORD *__return_ptr))(*(void *)v20 + 120))(v40);
                outlined copy of DisplayList.Item.Value(v20, v21);
                outlined consume of DisplayList.Effect(v20, v21, 17);
                swift_bridgeObjectRelease();
                int v24 = LOBYTE(v40[0]);
                break;
              default:
                outlined copy of DisplayList.Effect(v20, v21, SBYTE4(v21));
                swift_bridgeObjectRetain();
                outlined consume of DisplayList.Effect(v20, v21, SBYTE4(v21));
                swift_bridgeObjectRelease();
                int v24 = 0;
                break;
            }
            unsigned int v23 = v24 | ((v22 & 0xFF0000u) >> 16);
            a2 = v37;
            goto LABEL_29;
          case 2uLL:
            uint64_t v25 = *(void *)(v20 + 16);
            if (!v25) {
              goto LABEL_5;
            }
            if (v25 == 1)
            {
              uint64_t v26 = 0;
              LOBYTE(v23) = 0;
LABEL_22:
              uint64_t v33 = v25 - v26;
              char v34 = (char *)(v20 + 40 * v26 + 66);
              do
              {
                char v35 = *v34;
                v34 += 40;
                LOBYTE(v23) = v35 | v23;
                --v33;
              }
              while (v33);
              goto LABEL_29;
            }
            char v27 = 0;
            char v28 = 0;
            uint64_t v26 = v25 & 0x7FFFFFFFFFFFFFFELL;
            uint64_t v29 = (char *)(v20 + 106);
            uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              char v31 = *(v29 - 40);
              char v32 = *v29;
              v29 += 80;
              v27 |= v31;
              v28 |= v32;
              v30 -= 2;
            }
            while (v30);
            LOBYTE(v23) = v28 | v27;
            if (v25 != v26) {
              goto LABEL_22;
            }
            goto LABEL_29;
          case 3uLL:
            goto LABEL_5;
          default:
            if (v20 >> 60 == 9)
            {
              LOBYTE(v23) = *(unsigned char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
LABEL_29:
              v6 |= v23;
              if (v7 == v38)
              {
LABEL_31:
                *(void *)uint64_t v36 = v3;
                *(unsigned char *)(v36 + 10) = v6;
                *(_WORD *)(v36 + 8) = v5;
                return;
              }
              unint64_t v18 = v3[2];
            }
            else
            {
LABEL_5:
              if (v7 == v38) {
                goto LABEL_31;
              }
            }
            uint64_t v9 = v7 + 1;
            if (v7 >= v18) {
              goto LABEL_36;
            }
            break;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      ;
    }
LABEL_36:
    __break(1u);
    JUMPOUT(0x2459EBA90);
  }
}

void DisplayList.version.getter(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (!v3)
  {
    *a1 = 0;
    return;
  }
  if (v3 == 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v4 = v3 & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v7 = (uint64_t *)(v2 + 136);
    uint64_t v8 = v3 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v9 = *(v7 - 9);
      uint64_t v11 = *v7;
      v7 += 18;
      uint64_t v10 = v11;
      if (v9 > v5) {
        uint64_t v5 = v9;
      }
      if (v10 > v6) {
        uint64_t v6 = v10;
      }
      v8 -= 2;
    }
    while (v8);
    if (v5 <= v6) {
      uint64_t v5 = v6;
    }
    if (v3 == v4) {
      goto LABEL_18;
    }
  }
  uint64_t v12 = v3 - v4;
  __int16 v13 = (uint64_t *)(v2 + 72 * v4 + 64);
  do
  {
    uint64_t v15 = *v13;
    v13 += 9;
    uint64_t v14 = v15;
    if (v15 > v5) {
      uint64_t v5 = v14;
    }
    --v12;
  }
  while (v12);
LABEL_18:
  *a1 = v5;
}

SwiftUI::DisplayList::Version __swiftcall DisplayList.Version.init()()
{
  *Swift::String v0 = 0;
  return result;
}

SwiftUI::Time __swiftcall DisplayList.nextUpdate(after:)(SwiftUI::Time after)
{
  uint64_t v4 = v2;
  double v5 = *v1;
  __int16 v6 = *((_WORD *)v3 + 4);
  if ((v6 & 4) != 0)
  {
    double v8 = *v1;
  }
  else
  {
    uint64_t v7 = *v3;
    if (one-time initialization token for infinity != -1) {
      swift_once();
    }
    double v8 = *(double *)&static Time.infinity;
    if ((v6 & 8) != 0)
    {
      uint64_t v9 = *(void *)(v7 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = v9 - 1;
        uint64_t v11 = v7 + 100;
        do
        {
          DisplayList.Item.nextUpdate(after:)(*(SwiftUI::Time *)(v11 - 36));
          if (v13 < v8) {
            double v8 = v13;
          }
          BOOL v12 = v8 == v5 || v10-- == 0;
          v11 += 72;
        }
        while (!v12);
        swift_bridgeObjectRelease();
      }
    }
  }
  double *v4 = v8;
  return after;
}

SwiftUI::Time __swiftcall DisplayList.Item.nextUpdate(after:)(SwiftUI::Time after)
{
  void (*v20)(_OWORD *__return_ptr, SwiftUI::Time *);
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  __int16 v31;
  char v32;
  long long v33;
  long long v34;
  BOOL v35;
  __int16 v36;
  char v37;
  _DWORD v38[4];
  uint64_t v39;
  unint64_t v40;
  double *v41;
  double v42;
  _OWORD v43[2];
  long long v44;
  long long v45;
  __int16 v46;
  char v47;
  int v48;
  SwiftUI::Time v49[2];

  uint64_t v4 = v1;
  double v5 = v2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  result.double seconds = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = *v4;
  unint64_t v13 = *(void *)(v3 + 40);
  unint64_t v12 = *(void *)(v3 + 48);
  uint64_t v14 = *(void *)(v3 + 56);
  int v15 = *(unsigned __int16 *)(v3 + 64) | (*(unsigned __int8 *)(v3 + 66) << 16);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double seconds = *(double *)&static Time.infinity;
  switch(v12 >> 62)
  {
    case 1uLL:
      *(void *)&v43[0] = v14;
      WORD4(v43[0]) = v15;
      BYTE10(v43[0]) = BYTE2(v15);
      char v42 = v11;
      outlined copy of DisplayList.Effect(v13, v12, SBYTE4(v12));
      swift_bridgeObjectRetain();
      DisplayList.nextUpdate(after:)(v19);
      swift_bridgeObjectRelease();
      if (v49[0].seconds < seconds) {
        double seconds = v49[0].seconds;
      }
      switch(BYTE4(v12))
      {
        case 7u:
          uint64_t v36 = *(_WORD *)(v13 + 24);
          uint64_t v37 = *(unsigned char *)(v13 + 26);
          *(void *)&v43[0] = *(void *)(v13 + 16);
          WORD4(v43[0]) = v36;
          BYTE10(v43[0]) = v37;
          char v42 = v11;
          DisplayList.nextUpdate(after:)(v49[0]);
          outlined consume of DisplayList.Effect(v13, v12, 7);
          goto LABEL_35;
        case 0xAu:
          outlined consume of DisplayList.Effect(v13, v12, 10);
          double seconds = v11;
          break;
        case 0x11u:
          unint64_t v20 = *(void (**)(_OWORD *__return_ptr, SwiftUI::Time *))(*(void *)v13 + 96);
          swift_retain();
          v20(v43, v49);
          outlined consume of DisplayList.Effect(v13, v12, 17);
          outlined consume of DisplayList.Effect(v13, v12, 17);
          result.double seconds = *(Swift::Double *)v43;
          goto LABEL_36;
        default:
          outlined consume of DisplayList.Effect(v13, v12, SBYTE4(v12));
          break;
      }
      break;
    case 2uLL:
      unint64_t v21 = *(void *)(v13 + 16);
      if (v21)
      {
        v38[3] = v15;
        char v39 = v14;
        __int16 v40 = v13;
        __int16 v41 = v5;
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v23 = v13 + 32 + 40 * i;
          int v24 = *(_WORD *)(v23 + 32);
          uint64_t v25 = v11;
          if ((v24 & 4) == 0)
          {
            uint64_t v25 = *(double *)&static Time.infinity;
            if ((v24 & 8) != 0)
            {
              uint64_t v26 = *(void *)(v23 + 24);
              char v27 = *(void *)(v26 + 16);
              if (v27)
              {
                swift_bridgeObjectRetain();
                char v28 = v27 - 1;
                uint64_t v29 = (_DWORD *)(v26 + 100);
                do
                {
                  uint64_t v30 = *v29;
                  char v31 = *((_WORD *)v29 - 2);
                  char v32 = *((unsigned char *)v29 - 2);
                  uint64_t v33 = *(_OWORD *)(v29 - 13);
                  v43[0] = *(_OWORD *)(v29 - 17);
                  v43[1] = v33;
                  char v34 = *(_OWORD *)(v29 - 5);
                  __int16 v44 = *(_OWORD *)(v29 - 9);
                  uint64_t v45 = v34;
                  uint64_t v47 = v32;
                  float v46 = v31;
                  uint64_t v48 = v30;
                  char v42 = v11;
                  DisplayList.Item.nextUpdate(after:)((SwiftUI::Time)v44);
                  if (v49[0].seconds < v25) {
                    uint64_t v25 = v49[0].seconds;
                  }
                  char v35 = v25 == v11 || v28-- == 0;
                  v29 += 18;
                }
                while (!v35);
                swift_bridgeObjectRelease();
              }
            }
          }
          if (v25 < seconds) {
            double seconds = v25;
          }
        }
        outlined consume of DisplayList.Item.Value(v40, v12);
        double v5 = v41;
      }
      break;
    case 3uLL:
      break;
    default:
      if (v13 >> 60 == 8)
      {
        outlined copy of DisplayList.Item.Value(v13, v12);
        swift_retain();
        swift_retain();
        static Date.now.getter();
        v49[0] = *(SwiftUI::Time *)&v11;
        ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v49[0].seconds, (uint64_t)v10, 0, (double *)v43);
        swift_release();
        swift_release();
        if (*(double *)v43 < seconds) {
          double seconds = *(double *)v43;
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        outlined consume of DisplayList.Item.Value(v13, v12);
      }
      else if (v13 >> 60 == 9)
      {
        __int16 v17 = *(_WORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        char v18 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
        *(void *)&v43[0] = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        WORD4(v43[0]) = v17;
        BYTE10(v43[0]) = v18;
        char v42 = v11;
        DisplayList.nextUpdate(after:)(result);
LABEL_35:
        *(SwiftUI::Time *)&result.double seconds = v49[0];
LABEL_36:
        if (result.seconds < seconds) {
          double seconds = result.seconds;
        }
      }
      break;
  }
  *double v5 = seconds;
  return result;
}

uint64_t specialized DisplayList.forEachIdentity(_:)(uint64_t *a1, char **a2)
{
  uint64_t v2 = *a1;
  uint64_t v27 = *(void *)(*a1 + 16);
  if (!v27) {
    return 1;
  }
  uint64_t v28 = v2 + 32;
  swift_bridgeObjectRetain();
  unint64_t v4 = 0;
  uint64_t v26 = v2;
LABEL_5:
  if (v4 >= *(void *)(v2 + 16))
  {
    __break(1u);
    JUMPOUT(0x2459EC450);
  }
  uint64_t v5 = v28 + 72 * v4;
  unint64_t v7 = *(void *)(v5 + 40);
  unint64_t v6 = *(void *)(v5 + 48);
  uint64_t v8 = *(void *)(v5 + 56);
  int v9 = *(unsigned __int16 *)(v5 + 64) | (*(unsigned __int8 *)(v5 + 66) << 16);
  int v10 = *(_DWORD *)(v5 + 68);
  if (v10)
  {
    double v11 = *a2;
    outlined copy of DisplayList.Item.Value(*(void *)(v5 + 40), *(void *)(v5 + 48));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      *a2 = v11;
    }
    unint64_t v14 = *((void *)v11 + 2);
    unint64_t v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1) {
      double v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v14 + 1;
    *(_DWORD *)&v11[4 * v14 + 32] = v10;
    *a2 = v11;
    uint64_t v2 = v26;
  }
  else
  {
    outlined copy of DisplayList.Item.Value(*(void *)(v5 + 40), *(void *)(v5 + 48));
  }
  ++v4;
  switch(v6 >> 62)
  {
    case 1uLL:
      if (BYTE4(v6) == 7)
      {
        __int16 v18 = *(_WORD *)(v7 + 24);
        char v19 = *(unsigned char *)(v7 + 26);
        uint64_t v29 = *(void *)(v7 + 16);
        __int16 v30 = v18;
        char v31 = v19;
        outlined copy of DisplayList.Effect(v7, v6, 7);
        swift_bridgeObjectRetain();
        if ((specialized DisplayList.forEachIdentity(_:)(&v29, a2) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v7, v6, 7);
          goto LABEL_29;
        }
      }
      else
      {
        outlined copy of DisplayList.Effect(v7, v6, SBYTE4(v6));
        swift_bridgeObjectRetain();
      }
      uint64_t v29 = v8;
      __int16 v30 = v9;
      char v31 = BYTE2(v9);
      char v24 = specialized DisplayList.forEachIdentity(_:)(&v29, a2);
      outlined consume of DisplayList.Effect(v7, v6, SBYTE4(v6));
      swift_bridgeObjectRelease();
      outlined consume of DisplayList.Item.Value(v7, v6);
      if (v24) {
        goto LABEL_4;
      }
      goto LABEL_30;
    case 2uLL:
      uint64_t v20 = *(void *)(v7 + 16);
      if (!v20) {
        goto LABEL_3;
      }
      outlined copy of DisplayList.Item.Value(v7, v6);
      unint64_t v21 = (unsigned char *)(v7 + 66);
      break;
    case 3uLL:
      goto LABEL_3;
    default:
      if (v7 >> 60 != 9) {
        goto LABEL_3;
      }
      __int16 v15 = *(_WORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      char v16 = *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
      uint64_t v29 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      __int16 v30 = v15;
      char v31 = v16;
      char v17 = specialized DisplayList.forEachIdentity(_:)(&v29, a2);
      outlined consume of DisplayList.Item.Value(v7, v6);
      if ((v17 & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_4;
  }
  while (1)
  {
    char v22 = *v21;
    __int16 v23 = *((_WORD *)v21 - 1);
    uint64_t v29 = *(void *)(v21 - 10);
    __int16 v30 = v23;
    char v31 = v22;
    if ((specialized DisplayList.forEachIdentity(_:)(&v29, a2) & 1) == 0) {
      break;
    }
    v21 += 40;
    if (!--v20)
    {
      outlined consume of DisplayList.Item.Value(v7, v6);
LABEL_3:
      outlined consume of DisplayList.Item.Value(v7, v6);
LABEL_4:
      if (v4 == v27)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      goto LABEL_5;
    }
  }
  outlined consume of DisplayList.Item.Value(v7, v6);
LABEL_29:
  outlined consume of DisplayList.Item.Value(v7, v6);
LABEL_30:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized DisplayList.forEachIdentity(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (!v3) {
    return 1;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
LABEL_6:
  if (v5 >= *(void *)(v2 + 16))
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v7 = v2 + 32 + 72 * v5;
  unint64_t v8 = *(void *)(v7 + 40);
  unint64_t v9 = *(void *)(v7 + 48);
  uint64_t v10 = *(void *)(v7 + 56);
  int v11 = *(unsigned __int8 *)(v7 + 66);
  int v12 = *(unsigned __int16 *)(v7 + 64);
  unsigned int v13 = *(_DWORD *)(v7 + 68);
  if (!v13) {
    goto LABEL_19;
  }
  unint64_t v14 = *(void *)(*(void *)a2 + 16);
  if (!v14) {
    goto LABEL_19;
  }
  unint64_t v15 = 0;
  uint64_t v16 = *(void *)a2 + 32;
  unint64_t v17 = *(void *)(*(void *)a2 + 16);
  do
  {
    unint64_t v18 = v17 >> 1;
    unint64_t v19 = v15 + (v17 >> 1);
    if (__OFADD__(v15, v17 >> 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      swift_bridgeObjectRelease();
      outlined consume of DisplayList.Effect(v8, v9, 7);
      goto LABEL_33;
    }
    if (v19 >= v14) {
      goto LABEL_39;
    }
    v17 += ~v18;
    if (*(_DWORD *)(v16 + 4 * v19) < v13) {
      unint64_t v15 = v19 + 1;
    }
    else {
      unint64_t v17 = v18;
    }
  }
  while ((uint64_t)v17 > 0);
  if (v15 == v14)
  {
LABEL_19:
    ++v5;
    int v20 = v12 | (v11 << 16);
    switch(v9 >> 62)
    {
      case 1uLL:
        if (BYTE4(v9) == 7)
        {
          __int16 v23 = *(_WORD *)(v8 + 24);
          char v24 = *(unsigned char *)(v8 + 26);
          uint64_t v31 = *(void *)(v8 + 16);
          __int16 v32 = v23;
          char v33 = v24;
          outlined copy of DisplayList.Item.Value(v8, v9);
          outlined copy of DisplayList.Effect(v8, v9, 7);
          swift_bridgeObjectRetain();
          if ((specialized DisplayList.forEachIdentity(_:)(&v31, a2) & 1) == 0) {
            goto LABEL_40;
          }
        }
        else
        {
          outlined copy of DisplayList.Item.Value(v8, v9);
          outlined copy of DisplayList.Effect(v8, v9, SBYTE4(v9));
          swift_bridgeObjectRetain();
        }
        uint64_t v31 = v10;
        __int16 v32 = v20;
        char v33 = BYTE2(v20);
        char v6 = specialized DisplayList.forEachIdentity(_:)(&v31, a2);
        outlined consume of DisplayList.Effect(v8, v9, SBYTE4(v9));
        swift_bridgeObjectRelease();
        outlined consume of DisplayList.Item.Value(v8, v9);
        if (v6) {
          goto LABEL_5;
        }
        goto LABEL_34;
      case 2uLL:
        uint64_t v25 = *(void *)(v8 + 16);
        if (!v25) {
          goto LABEL_5;
        }
        outlined copy of DisplayList.Item.Value(v8, v9);
        outlined copy of DisplayList.Item.Value(v8, v9);
        uint64_t v26 = (unsigned char *)(v8 + 66);
        break;
      case 3uLL:
        goto LABEL_5;
      default:
        if (v8 >> 60 == 9)
        {
          __int16 v21 = *(_WORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          char v22 = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
          uint64_t v31 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          __int16 v32 = v21;
          char v33 = v22;
          if ((specialized DisplayList.forEachIdentity(_:)(&v31, a2) & 1) == 0) {
            goto LABEL_34;
          }
        }
        goto LABEL_5;
    }
    while (1)
    {
      char v27 = *v26;
      __int16 v28 = *((_WORD *)v26 - 1);
      uint64_t v31 = *(void *)(v26 - 10);
      __int16 v32 = v28;
      char v33 = v27;
      if ((specialized DisplayList.forEachIdentity(_:)(&v31, a2) & 1) == 0) {
        break;
      }
      v26 += 40;
      if (!--v25)
      {
        outlined consume of DisplayList.Item.Value(v8, v9);
        outlined consume of DisplayList.Item.Value(v8, v9);
LABEL_5:
        if (v5 == v3)
        {
          uint64_t v29 = 1;
          goto LABEL_36;
        }
        goto LABEL_6;
      }
    }
    outlined consume of DisplayList.Item.Value(v8, v9);
LABEL_33:
    outlined consume of DisplayList.Item.Value(v8, v9);
    goto LABEL_34;
  }
  if (v15 >= v14)
  {
LABEL_42:
    __break(1u);
    JUMPOUT(0x2459EC7C8);
  }
  if (*(_DWORD *)(v16 + 4 * v15) != v13) {
    goto LABEL_19;
  }
LABEL_34:
  uint64_t v29 = 0;
LABEL_36:
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t DisplayList.forEachIdentity(_:)(void (*a1)(uint64_t *, char *), uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v27 = *(void *)(*v2 + 16);
  if (!v27) {
    return 1;
  }
  uint64_t v28 = v3 + 32;
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  uint64_t v29 = a2;
  uint64_t v26 = v3;
  while (1)
  {
    if (v6 >= *(void *)(v3 + 16))
    {
      __break(1u);
      JUMPOUT(0x2459ECB70);
    }
    uint64_t v7 = v28 + 72 * v6;
    unint64_t v9 = *(void *)(v7 + 40);
    unint64_t v8 = *(void *)(v7 + 48);
    uint64_t v10 = *(void *)(v7 + 56);
    int v11 = *(unsigned __int16 *)(v7 + 64) | (*(unsigned __int8 *)(v7 + 66) << 16);
    int v12 = *(_DWORD *)(v7 + 68);
    if (!v12)
    {
      outlined copy of DisplayList.Item.Value(v9, v8);
      goto LABEL_10;
    }
    char v33 = 0;
    LODWORD(v30) = v12;
    outlined copy of DisplayList.Item.Value(v9, v8);
    a1(&v30, &v33);
    if (v33) {
      break;
    }
LABEL_10:
    ++v6;
    switch(v8 >> 62)
    {
      case 1uLL:
        if (BYTE4(v8) == 7)
        {
          __int16 v16 = *(_WORD *)(v9 + 24);
          char v17 = *(unsigned char *)(v9 + 26);
          uint64_t v30 = *(void *)(v9 + 16);
          __int16 v31 = v16;
          char v32 = v17;
          outlined copy of DisplayList.Effect(v9, v8, 7);
          swift_bridgeObjectRetain();
          uint64_t v18 = v29;
          if ((DisplayList.forEachIdentity(_:)(a1, v29) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v9, v8, 7);
            goto LABEL_28;
          }
        }
        else
        {
          outlined copy of DisplayList.Effect(v9, v8, SBYTE4(v8));
          swift_bridgeObjectRetain();
          uint64_t v18 = v29;
        }
        uint64_t v30 = v10;
        __int16 v31 = v11;
        char v32 = BYTE2(v11);
        char v24 = DisplayList.forEachIdentity(_:)(a1, v18);
        outlined consume of DisplayList.Effect(v9, v8, SBYTE4(v8));
        swift_bridgeObjectRelease();
        outlined consume of DisplayList.Item.Value(v9, v8);
        a2 = v18;
        if (v24) {
          goto LABEL_4;
        }
        goto LABEL_29;
      case 2uLL:
        uint64_t v19 = *(void *)(v9 + 16);
        if (!v19) {
          goto LABEL_3;
        }
        outlined copy of DisplayList.Item.Value(v9, v8);
        int v20 = (unsigned char *)(v9 + 66);
        break;
      case 3uLL:
        goto LABEL_3;
      default:
        if (v9 >> 60 != 9) {
          goto LABEL_3;
        }
        __int16 v13 = *(_WORD *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        char v14 = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
        uint64_t v30 = *(void *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        __int16 v31 = v13;
        char v32 = v14;
        outlined copy of DisplayList.Content.Value(v9);
        char v15 = DisplayList.forEachIdentity(_:)(a1, a2);
        outlined consume of DisplayList.Item.Value(v9, v8);
        outlined consume of DisplayList.Item.Value(v9, v8);
        if ((v15 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_4;
    }
    do
    {
      char v21 = *v20;
      __int16 v22 = *((_WORD *)v20 - 1);
      uint64_t v30 = *(void *)(v20 - 10);
      __int16 v31 = v22;
      char v32 = v21;
      swift_bridgeObjectRetain();
      char v23 = DisplayList.forEachIdentity(_:)(a1, v29);
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
      {
        outlined consume of DisplayList.Item.Value(v9, v8);
        outlined consume of DisplayList.Item.Value(v9, v8);
        goto LABEL_29;
      }
      v20 += 40;
      --v19;
    }
    while (v19);
    outlined consume of DisplayList.Item.Value(v9, v8);
    uint64_t v3 = v26;
    a2 = v29;
LABEL_3:
    outlined consume of DisplayList.Item.Value(v9, v8);
LABEL_4:
    if (v6 == v27)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
LABEL_28:
  outlined consume of DisplayList.Item.Value(v9, v8);
LABEL_29:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t DisplayList.forEachRBDisplayList(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v17 = *(void *)(*v2 + 16);
  if (v17)
  {
    unint64_t v5 = (void (*)(uint64_t))result;
    uint64_t v16 = v3 + 32;
    swift_bridgeObjectRetain();
    unint64_t v6 = 0;
    uint64_t v15 = v3;
    while (2)
    {
      if (v6 >= *(void *)(v3 + 16))
      {
        __break(1u);
        JUMPOUT(0x2459ECE5CLL);
      }
      uint64_t v9 = v16 + 72 * v6;
      unint64_t v11 = *(void *)(v9 + 40);
      unint64_t v10 = *(void *)(v9 + 48);
      ++v6;
      switch(v10 >> 62)
      {
        case 1uLL:
          outlined copy of DisplayList.Item.Value(v11, v10);
          if (BYTE4(v10) == 7)
          {
            outlined copy of DisplayList.Effect(v11, v10, 7);
            swift_bridgeObjectRetain();
            DisplayList.forEachRBDisplayList(_:)(v5, a2);
          }
          else
          {
            outlined copy of DisplayList.Effect(v11, v10, SBYTE4(v10));
            swift_bridgeObjectRetain();
          }
          DisplayList.forEachRBDisplayList(_:)(v5, a2);
          outlined consume of DisplayList.Effect(v11, v10, SBYTE4(v10));
          swift_bridgeObjectRelease();
          goto LABEL_18;
        case 2uLL:
          uint64_t v13 = *(void *)(v11 + 16);
          if (v13)
          {
            outlined copy of DisplayList.Item.Value(v11, v10);
            unint64_t v14 = v11 + 66;
            do
            {
              v14 += 40;
              swift_bridgeObjectRetain();
              DisplayList.forEachRBDisplayList(_:)(v5, a2);
              swift_bridgeObjectRelease();
              --v13;
            }
            while (v13);
            outlined consume of DisplayList.Item.Value(v11, v10);
            uint64_t v3 = v15;
          }
          goto LABEL_5;
        case 3uLL:
          uint64_t v7 = *(void *)(v9 + 40);
          unint64_t v8 = *(void *)(v9 + 48);
          goto LABEL_4;
        default:
          if (v11 >> 60 != 10) {
            goto LABEL_5;
          }
          outlined copy of DisplayList.Item.Value(v11, v10);
          uint64_t v12 = swift_unknownObjectRetain();
          v5(v12);
          swift_unknownObjectRelease();
LABEL_18:
          uint64_t v7 = v11;
          unint64_t v8 = v10;
LABEL_4:
          outlined consume of DisplayList.Item.Value(v7, v8);
LABEL_5:
          if (v6 != v17) {
            continue;
          }
          SwiftUI::Time result = swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  return result;
}

double DisplayList.Item.frame.getter()
{
  return *(double *)v0;
}

void DisplayList.Item.frame.setter(double a1, double a2, double a3, double a4)
{
  double *v4 = a1;
  v4[1] = a2;
  void v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*DisplayList.Item.frame.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void DisplayList.Item.version.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
}

void *DisplayList.Item.version.setter(void *result)
{
  *(void *)(v1 + 32) = *result;
  return result;
}

uint64_t (*DisplayList.Item.version.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.Item.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  unint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  char v5 = *(unsigned char *)(v1 + 66);
  __int16 v6 = *(_WORD *)(v1 + 64);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 26) = v5;
  *(_WORD *)(a1 + 24) = v6;
  return outlined copy of DisplayList.Item.Value(v2, v3);
}

__n128 DisplayList.Item.value.setter(__n128 *a1)
{
  __n128 v7 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int16 v3 = a1[1].n128_u16[4];
  uint64_t v4 = v1 + 64;
  unsigned __int8 v5 = a1[1].n128_u8[10];
  outlined consume of DisplayList.Item.Value(*(void *)(v4 - 24), *(void *)(v4 - 16));
  __n128 result = v7;
  *(__n128 *)(v4 - 24) = v7;
  *(void *)(v4 - 8) = v2;
  *(unsigned char *)(v4 + 2) = v5;
  *(_WORD *)uint64_t v4 = v3;
  return result;
}

uint64_t (*DisplayList.Item.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void DisplayList.Item.identity.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 68);
}

_DWORD *DisplayList.Item.identity.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 68) = *result;
  return result;
}

uint64_t (*DisplayList.Item.identity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static DisplayList.Item.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

BOOL static DisplayList.Version.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

double DisplayList.Item.position.getter()
{
  return *(double *)v0;
}

double DisplayList.Item.size.getter()
{
  return *(double *)(v0 + 16);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DisplayList.Item(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

unint64_t DisplayList.Content.value.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = *v1;
  *a1 = *v1;
  return outlined copy of DisplayList.Content.Value(v2);
}

unint64_t DisplayList.Content.value.setter(unint64_t *a1)
{
  unint64_t v2 = *a1;
  unint64_t result = outlined consume of DisplayList.Content.Value(*v1);
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*DisplayList.Content.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void DisplayList.Content.seed.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 8);
}

_WORD *DisplayList.Content.seed.setter(_WORD *result)
{
  *(_WORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*DisplayList.Content.seed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *DisplayList.Content.init(_:seed:)@<X0>(void *result@<X0>, __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3 = *a2;
  *(void *)a3 = *result;
  *(_WORD *)(a3 + 8) = v3;
  return result;
}

uint64_t DisplayList.ArchiveIDs.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t DisplayList.ArchiveIDs.uuid.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*DisplayList.ArchiveIDs.uuid.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.ArchiveIDs.stableIDs.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + *(int *)(type metadata accessor for DisplayList.ArchiveIDs() + 20));

  return swift_bridgeObjectRetain();
}

uint64_t DisplayList.ArchiveIDs.stableIDs.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(int *)(type metadata accessor for DisplayList.ArchiveIDs() + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = v2;
  return result;
}

uint64_t (*DisplayList.ArchiveIDs.stableIDs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.ArchiveIDs.init(uuid:stableIDs:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for DisplayList.ArchiveIDs();
  *(void *)(a3 + *(int *)(result + 20)) = v5;
  return result;
}

__n128 DisplayList.InterpolatorAnimation.value.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = v1[1].n128_u32[0];
  unsigned __int8 v3 = v1[1].n128_u8[4];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = v3;
  return result;
}

__n128 DisplayList.InterpolatorAnimation.value.setter(__n128 *a1)
{
  unsigned __int32 v2 = a1[1].n128_u32[0];
  unsigned __int8 v3 = a1[1].n128_u8[4];
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  v1[1].n128_u32[0] = v2;
  v1[1].n128_u8[4] = v3;
  return result;
}

uint64_t (*DisplayList.InterpolatorAnimation.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.InterpolatorAnimation.animation.getter()
{
  return swift_retain();
}

uint64_t DisplayList.InterpolatorAnimation.animation.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*DisplayList.InterpolatorAnimation.animation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DisplayList.Version.value.getter()
{
  return *(void *)v0;
}

SwiftUI::DisplayList::Version __swiftcall DisplayList.Version.init(decodedValue:)(SwiftUI::DisplayList::Version decodedValue)
{
  Swift::Int value = static DisplayList.Version.lastValue;
  if (static DisplayList.Version.lastValue <= decodedValue.value) {
    Swift::Int value = decodedValue.value;
  }
  static DisplayList.Version.lastuint64_t Value = value;
  v1->Swift::Int value = decodedValue.value;
  return decodedValue;
}

Swift::Void __swiftcall DisplayList.Version.combine(with:)(SwiftUI::DisplayList::Version with)
{
  uint64_t v2 = *(void *)with.value;
  if (*(void *)with.value <= *v1) {
    uint64_t v2 = *v1;
  }
  *uint64_t v1 = v2;
}

BOOL static DisplayList.Version.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

void DisplayList.Version.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int DisplayList.Version.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DisplayList.Version(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DisplayList.Version(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DisplayList.Version(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DisplayList.Version(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t DisplayList.Seed.value.getter()
{
  return *v0;
}

void DisplayList.Seed.init()(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t DisplayList.Seed.init(decodedValue:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

unint64_t *DisplayList.Seed.init(_:)@<X0>(unint64_t *result@<X0>, _WORD *a2@<X8>)
{
  unint64_t v2 = *result;
  if (*result) {
    LODWORD(v2) = (2 * ((33 * (v2 >> 16)) ^ v2)) | 1;
  }
  *a2 = v2;
  return result;
}

Swift::Void __swiftcall DisplayList.Seed.invalidate()()
{
  if (*v0) {
    *uint64_t v0 = ~*v0 | 1;
  }
}

void static DisplayList.Seed.undefined.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void DisplayList.Seed.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static DisplayList.Seed.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

Swift::Int DisplayList.Seed.hashValue.getter()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisplayList.Seed()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DisplayList.Seed()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.Seed()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DisplayList.Seed(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t DisplayList.Properties.rawValue.getter()
{
  return *v0;
}

uint64_t DisplayList.Properties.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static DisplayList.Properties.foregroundLayer.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static DisplayList.Properties.ignoresEvents.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static DisplayList.Properties.privacySensitive.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static DisplayList.Properties.archivesInteractiveControls.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void static DisplayList.Properties.secondaryForegroundLayer.getter(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

void static DisplayList.Properties.tertiaryForegroundLayer.getter(unsigned char *a1@<X8>)
{
  *a1 = 32;
}

void static DisplayList.Properties.quaternaryForegroundLayer.getter(unsigned char *a1@<X8>)
{
  *a1 = 64;
}

void static DisplayList.Properties.screencaptureProhibited.getter(unsigned char *a1@<X8>)
{
  *a1 = 0x80;
}

unsigned char *protocol witness for OptionSet.init(rawValue:) in conformance DisplayList.Properties@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.union(_:) in conformance DisplayList.Properties@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result | *v2;
  return result;
}

unsigned char *protocol witness for SetAlgebra.intersection(_:) in conformance DisplayList.Properties@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result & *v2;
  return result;
}

unsigned char *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DisplayList.Properties@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result ^ *v2;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance DisplayList.Properties(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *v2;
  int v4 = *a2;
  if ((v4 & v3) != v4) {
    *unint64_t v2 = v4 | v3;
  }
  *a1 = v4;
  return (v4 & v3) != v4;
}

unsigned char *protocol witness for SetAlgebra.formUnion(_:) in conformance DisplayList.Properties(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formIntersection(_:) in conformance DisplayList.Properties(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DisplayList.Properties(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.subtracting(_:) in conformance DisplayList.Properties@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DisplayList.Properties(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance DisplayList.Properties(unsigned char *a1)
{
  return (*a1 & *v1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DisplayList.Properties(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance DisplayList.Properties()
{
  return *v0 == 0;
}

unsigned char *protocol witness for SetAlgebra.subtract(_:) in conformance DisplayList.Properties(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t static DisplayList.Key._includesRemovedValues.getter()
{
  return 1;
}

uint64_t static DisplayList.Key.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  __int16 v2 = word_26B0F1B78;
  char v3 = byte_26B0F1B7A;
  *(void *)a1 = static DisplayList.Key.defaultValue;
  *(_WORD *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 10) = v3;

  return swift_bridgeObjectRetain();
}

uint64_t static DisplayList.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  __int16 v4 = v7;
  char v5 = v8;
  DisplayList.append(contentsOf:)(&v3);

  return swift_bridgeObjectRelease();
}

uint64_t DisplayList.Options.rawValue.getter()
{
  return *v0;
}

void static DisplayList.Options.defaultValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance DisplayList.Properties@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *v2;
  int v4 = *result;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *__int16 v2 = v3 & ~(_BYTE)v4;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance DisplayList.Properties@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *v2;
  int v4 = *result;
  *__int16 v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

void DisplayList.Index.identity.getter(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t DisplayList.Index.serial.getter()
{
  return *(unsigned int *)(v0 + 4);
}

void DisplayList.Index.archiveIdentity.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 8);
}

uint64_t DisplayList.Index.archiveSerial.getter()
{
  return *(unsigned int *)(v0 + 12);
}

unsigned char *protocol witness for SetAlgebra.union(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.intersection(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance DisplayList.Index.RestoreOptions(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *__int16 v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *__int16 v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *__int16 v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formUnion(_:) in conformance DisplayList.Index.RestoreOptions(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formIntersection(_:) in conformance DisplayList.Index.RestoreOptions(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DisplayList.Index.RestoreOptions(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.subtracting(_:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DisplayList.Index.RestoreOptions(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance DisplayList.Index.RestoreOptions(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

unsigned char *protocol witness for SetAlgebra.subtract(_:) in conformance DisplayList.Index.RestoreOptions(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance DisplayList.Index.RestoreOptions@<X0>(unsigned char *a1@<X8>)
{
  char v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void DisplayList.Index.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

int *DisplayList.Index.enter(identity:)@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  if (*result)
  {
    int v3 = *v2;
    int v4 = v2[1];
    uint64_t v5 = *((void *)v2 + 1);
    char v6 = *((unsigned char *)v2 + 16);
    char v7 = 1;
    *char v2 = *result;
    v2[1] = 0;
  }
  else
  {
    char v7 = 0;
    int v3 = *v2;
    int v4 = v2[1] + 1;
    v2[1] = v4;
    uint64_t v5 = *((void *)v2 + 1);
    char v6 = *((unsigned char *)v2 + 16);
  }
  *((unsigned char *)v2 + 16) = v7;
  *(_DWORD *)a2 = v3;
  *(_DWORD *)(a2 + 4) = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6;
  return result;
}

Swift::Void __swiftcall DisplayList.Index.updateArchive(entering:)(Swift::Bool entering)
{
  if (entering)
  {
    *(void *)(v1 + 8) = *(void *)v1;
    *(void *)uint64_t v1 = 0;
    int v2 = *(unsigned __int8 *)(v1 + 16);
    if ((~v2 & 6) == 0) {
      return;
    }
    char v3 = v2 | 6;
  }
  else
  {
    *(void *)uint64_t v1 = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    int v4 = *(unsigned __int8 *)(v1 + 16);
    if ((~v4 & 9) == 0) {
      return;
    }
    char v3 = v4 | 9;
  }
  *(unsigned char *)(v1 + 16) = v3;
}

void DisplayList.Index.skip(item:)(uint64_t a1)
{
  type metadata accessor for DisplayList.ArchiveIDs?(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v26 - v4;
  if (!*(_DWORD *)(a1 + 68))
  {
    unint64_t v6 = *(void *)(a1 + 40);
    unint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    int v9 = *(unsigned __int8 *)(a1 + 66);
    int v10 = *(unsigned __int16 *)(a1 + 64);
    uint64_t v11 = *v1;
    uint64_t v12 = v1[1] + 1;
    v1[1] = v12;
    uint64_t v13 = *((void *)v1 + 1);
    char v14 = *((unsigned char *)v1 + 16);
    *((unsigned char *)v1 + 16) = 0;
    if ((v7 >> 62) - 2 >= 2)
    {
      if (v7 >> 62)
      {
        int v17 = v10 | (v9 << 16);
        uint64_t v26 = v8;
        __int16 v27 = v17;
        char v28 = BYTE2(v17);
        outlined copy of DisplayList.Effect(v6, v7, SBYTE4(v7));
        swift_bridgeObjectRetain();
        DisplayList.Index.skip(list:)(&v26);
        swift_bridgeObjectRelease();
        if (BYTE4(v7) == 1)
        {
          uint64_t v23 = swift_projectBox();
          outlined init with copy of DisplayList.ArchiveIDs?(v23, (uint64_t)v5);
          uint64_t v24 = type metadata accessor for DisplayList.ArchiveIDs();
          Swift::Bool v25 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v5, 1, v24) != 1;
          DisplayList.Index.updateArchive(entering:)(v25);
          outlined destroy of Any?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t)type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs?);
          uint64_t v20 = v6;
          char v21 = v7;
          LOBYTE(v22) = 1;
        }
        else if (BYTE4(v7) == 7)
        {
          __int16 v18 = *(_WORD *)(v6 + 24);
          char v19 = *(unsigned char *)(v6 + 26);
          uint64_t v26 = *(void *)(v6 + 16);
          __int16 v27 = v18;
          char v28 = v19;
          DisplayList.Index.skip(list:)(&v26);
          uint64_t v20 = v6;
          char v21 = v7;
          LOBYTE(v22) = 7;
        }
        else
        {
          uint64_t v20 = v6;
          char v21 = v7;
          unint64_t v22 = HIDWORD(v7);
        }
        outlined consume of DisplayList.Effect(v20, v21, v22);
      }
      else if (v6 >> 60 == 9)
      {
        __int16 v15 = *(_WORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        char v16 = *(unsigned char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
        uint64_t v26 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        __int16 v27 = v15;
        char v28 = v16;
        DisplayList.Index.skip(list:)(&v26);
      }
    }
    $defer #1 () in DisplayList.Index.skip(item:)((uint64_t *)v1, v11 | (v12 << 32), v13, v14);
  }
}

uint64_t *$defer #1 () in DisplayList.Index.skip(item:)(uint64_t *result, uint64_t a2, uint64_t a3, char a4)
{
  char v4 = *((unsigned char *)result + 16);
  if ((v4 & 0xC) != 0)
  {
    uint64_t v5 = *result;
    if ((result[2] & 4) != 0) {
      *uint64_t result = result[1];
    }
    if ((v4 & 8) != 0) {
      result[1] = v5;
    }
  }
  if (v4)
  {
    *uint64_t result = a2;
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v4 & 2) == 0)
  {
LABEL_8:
    *((unsigned char *)result + 16) = a4;
    return result;
  }
  result[1] = a3;
  *((unsigned char *)result + 16) = a4;
  return result;
}

uint64_t DisplayList.Index.skip(effect:)(uint64_t a1)
{
  type metadata accessor for DisplayList.ArchiveIDs?(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  char v4 = (char *)&v12 - v3;
  uint64_t result = *(void *)a1;
  int v6 = *(unsigned __int8 *)(a1 + 12);
  if (v6 == 1)
  {
    uint64_t v9 = swift_projectBox();
    outlined init with copy of DisplayList.ArchiveIDs?(v9, (uint64_t)v4);
    uint64_t v10 = type metadata accessor for DisplayList.ArchiveIDs();
    Swift::Bool v11 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v4, 1, v10) != 1;
    DisplayList.Index.updateArchive(entering:)(v11);
    return outlined destroy of Any?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t)type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs?);
  }
  else if (v6 == 7)
  {
    __int16 v7 = *(_WORD *)(result + 24);
    char v8 = *(unsigned char *)(result + 26);
    uint64_t v12 = *(void *)(result + 16);
    __int16 v13 = v7;
    char v14 = v8;
    return DisplayList.Index.skip(list:)(&v12);
  }
  return result;
}

__n128 DisplayList.Index.id.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

void DisplayList.Index.ID.hash(into:)()
{
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Swift::UInt32 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int DisplayList.Index.ID.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisplayList.Index.ID()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DisplayList.Index.ID()
{
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Swift::UInt32 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.Index.ID()
{
  Hasher.init(_seed:)();
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Swift::UInt32 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void DisplayList.opaqueContentPath()(uint64_t a1@<X8>)
{
  if (*(void *)(*(void *)v1 + 16) == 1)
  {
    DisplayList.Item.opaqueContentPath()((uint64_t)v6);
    long long v3 = v6[0];
    long long v4 = v6[1];
    int v5 = v7 | (v8 << 16);
  }
  else
  {
    long long v3 = 0uLL;
    int v5 = 512;
    long long v4 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 34) = BYTE2(v5);
}

uint64_t DisplayList.Item.composite(_:above:)(uint64_t result, char a2)
{
  uint64_t v4 = *(void *)(result + 40);
  unint64_t v3 = *(void *)(result + 48);
  uint64_t v5 = *(void *)(result + 56);
  int v6 = *(unsigned __int16 *)(result + 64) | (*(unsigned __int8 *)(result + 66) << 16);
  if (v3 >> 62 == 3 && (v6 & 0xFFFFFF) == 0 && v3 == 0xC000000000000000 && (v5 | v4) == 0) {
    return result;
  }
  uint64_t v10 = v2;
  double v12 = *(double *)result;
  double v11 = *(double *)(result + 8);
  uint64_t v14 = *(void *)(result + 16);
  uint64_t v13 = *(void *)(result + 24);
  uint64_t v15 = *(void *)(result + 32);
  uint64_t v17 = *(void *)(v2 + 40);
  unint64_t v16 = *(void *)(v2 + 48);
  uint64_t v18 = *(void *)(v2 + 56);
  int v42 = *(unsigned __int16 *)(v2 + 64) | (*(unsigned __int8 *)(v2 + 66) << 16);
  if (v16 >> 62 != 3 || (v42 & 0xFFFFFF) != 0 || v16 != 0xC000000000000000 || v18 | v17)
  {
    uint64_t v39 = *(void *)(result + 32);
    double v20 = v12 - *(double *)v2;
    double v21 = v11 - *(double *)(v2 + 8);
    unint64_t v22 = (void *)MEMORY[0x263F8EE78];
    float v46 = (void *)MEMORY[0x263F8EE78];
    outlined copy of DisplayList.Item.Value(v4, v3);
    uint64_t v40 = v17;
    if ((a2 & 1) == 0)
    {
      outlined copy of DisplayList.Item.Value(v4, v3);
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1) {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
      }
      void v22[2] = v24 + 1;
      Swift::Bool v25 = (double *)&v22[9 * v24];
      unsigned char v25[4] = v20;
      v25[5] = v21;
      *((void *)v25 + 6) = v14;
      *((void *)v25 + 7) = v13;
      uint64_t v17 = v40;
      *((void *)v25 + 8) = v39;
      *((void *)v25 + 9) = v4;
      *((void *)v25 + 10) = v3;
      *((void *)v25 + 11) = v5;
      *((unsigned char *)v25 + 98) = BYTE2(v6);
      *((_WORD *)v25 + 48) = v6;
      *((_DWORD *)v25 + 25) = 0;
      float v46 = v22;
    }
    if (v16 >> 62 == 1)
    {
      if (BYTE4(v16) == 19 && !v17 && !v16)
      {
        outlined copy of DisplayList.Effect(0, 0, 19);
        uint64_t v26 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v26);
        unint64_t v22 = v46;
        if ((a2 & 1) == 0)
        {
LABEL_39:
          DisplayList.init(_:)((uint64_t)v22, (uint64_t)&v43);
          outlined consume of DisplayList.Item.Value(v4, v3);
          __n128 result = outlined consume of DisplayList.Item.Value(v17, v16);
          uint64_t v36 = v43;
          __int16 v37 = v44;
          char v38 = v45;
          *(_OWORD *)(v10 + 40) = xmmword_2461B9DD0;
          *(void *)(v10 + 56) = v36;
          *(unsigned char *)(v10 + 66) = v38;
          *(_WORD *)(v10 + 64) = v37;
          return result;
        }
LABEL_34:
        outlined copy of DisplayList.Item.Value(v4, v3);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v34 = v22[2];
        unint64_t v33 = v22[3];
        if (v34 >= v33 >> 1) {
          unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v22);
        }
        void v22[2] = v34 + 1;
        char v35 = (double *)&v22[9 * v34];
        v35[4] = v20;
        v35[5] = v21;
        *((void *)v35 + 6) = v14;
        *((void *)v35 + 7) = v13;
        *((void *)v35 + 8) = v39;
        *((void *)v35 + 9) = v4;
        *((void *)v35 + 10) = v3;
        *((void *)v35 + 11) = v5;
        *((unsigned char *)v35 + 98) = BYTE2(v6);
        *((_WORD *)v35 + 48) = v6;
        *((_DWORD *)v35 + 25) = 0;
        float v46 = v22;
        goto LABEL_39;
      }
      outlined copy of DisplayList.Effect(v17, v16, SBYTE4(v16));
      swift_bridgeObjectRetain();
      outlined consume of DisplayList.Effect(v17, v16, SBYTE4(v16));
      swift_bridgeObjectRelease();
    }
    uint64_t v27 = *(void *)(v10 + 16);
    uint64_t v28 = *(void *)(v10 + 24);
    uint64_t v29 = *(void *)(v10 + 32);
    outlined copy of DisplayList.Item.Value(v17, v16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    }
    unint64_t v31 = v22[2];
    unint64_t v30 = v22[3];
    if (v31 >= v30 >> 1) {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v22);
    }
    void v22[2] = v31 + 1;
    char v32 = &v22[9 * v31];
    v32[4] = 0;
    v32[5] = 0;
    v32[6] = v27;
    v32[7] = v28;
    uint64_t v17 = v40;
    v32[8] = v29;
    v32[9] = v40;
    v32[10] = v16;
    v32[11] = v18;
    *((unsigned char *)v32 + 98) = BYTE2(v42);
    *((_WORD *)v32 + 48) = v42;
    *((_DWORD *)v32 + 25) = 0;
    float v46 = v22;
    if ((a2 & 1) == 0) {
      goto LABEL_39;
    }
    goto LABEL_34;
  }
  int v19 = *(_DWORD *)(result + 68);
  *(double *)uint64_t v2 = v12;
  *(double *)(v2 + 8) = v11;
  *(void *)(v2 + 16) = v14;
  *(void *)(v2 + 24) = v13;
  *(void *)(v2 + 32) = v15;
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 48) = v3;
  *(void *)(v2 + 56) = v5;
  *(_WORD *)(v2 + 64) = v6;
  *(unsigned char *)(v2 + 66) = BYTE2(v6);
  *(_DWORD *)(v2 + 68) = v19;

  return outlined copy of DisplayList.Item.Value(v4, v3);
}

unsigned __int16 *DisplayList.Item.addDrawingGroup(contentSeed:)(unsigned __int16 *result)
{
  uint64_t v2 = *(void *)(v1 + 40);
  unint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  int v5 = *(unsigned __int16 *)(v1 + 64) | (*(unsigned __int8 *)(v1 + 66) << 16);
  if (v3 >> 62 != 3 || (v5 & 0xFFFFFF) != 0 || v3 != 0xC000000000000000 || (v4 | v2) != 0)
  {
    uint64_t v9 = v1;
    uint64_t v10 = *result;
    CGSize v11 = *(CGSize *)(MEMORY[0x263F001A0] + 16);
    v39.CGPoint origin = (CGPoint)*MEMORY[0x263F001A0];
    v39.CGSize size = v11;
    double v12 = *(double *)v1;
    double v13 = *(double *)(v1 + 8);
    uint64_t v14 = *(void *)(v1 + 16);
    uint64_t v15 = *(void *)(v1 + 24);
    uint64_t v16 = *(void *)(v1 + 32);
    int v17 = *(_DWORD *)(v1 + 68);
    double v28 = *(double *)v1;
    double v29 = v13;
    uint64_t v30 = v14;
    uint64_t v31 = v15;
    uint64_t v32 = v16;
    uint64_t v33 = v2;
    unint64_t v34 = v3;
    uint64_t v35 = v4;
    char v37 = BYTE2(v5);
    __int16 v36 = v5;
    int v38 = v17;
    DisplayList.Item.addExtent(to:)(&v39.origin.x);
    CGPoint origin = v39.origin;
    CGSize size = v39.size;
    BOOL IsNull = CGRectIsNull(v39);
    double height = 0.0;
    if (IsNull) {
      double x = 0.0;
    }
    else {
      double x = origin.x;
    }
    if (IsNull) {
      double y = 0.0;
    }
    else {
      double y = origin.y;
    }
    if (IsNull) {
      double width = 0.0;
    }
    else {
      double width = size.width;
    }
    if (!IsNull) {
      double height = size.height;
    }
    CGRect v40 = CGRectIntegral(*(CGRect *)(&height - 3));
    CGFloat v25 = v40.origin.x - v12;
    *(CGRect *)uint64_t v1 = v40;
    CGFloat v26 = v40.origin.y - v13;
    uint64_t v27 = swift_allocObject();
    double v28 = 0.0;
    double v29 = 0.0;
    uint64_t v30 = v14;
    uint64_t v31 = v15;
    uint64_t v32 = v16;
    uint64_t v33 = v2;
    unint64_t v34 = v3;
    uint64_t v35 = v4;
    char v37 = BYTE2(v5);
    __int16 v36 = v5;
    int v38 = 0;
    outlined copy of DisplayList.Item.Value(v2, v3);
    DisplayList.init(_:)((uint64_t *)&v28, v27 + 16);
    *(CGFloat *)(v27 + 32) = v25;
    *(CGFloat *)(v27 + 40) = v26;
    *(unsigned char *)(v27 + 48) = 0;
    *(_DWORD *)(v27 + 52) = 0;
    *(unsigned char *)(v27 + 56) = 1;
    *(_DWORD *)(v27 + 60) = 161;
    *(unsigned char *)(v27 + 64) = 3;
    __n128 result = (unsigned __int16 *)outlined consume of DisplayList.Item.Value(v2, v3);
    *(void *)(v9 + 40) = v27 | 0x9000000000000000;
    *(void *)(v9 + 48) = v10;
    *(void *)(v9 + 56) = 0;
    *(unsigned char *)(v9 + 66) = 0;
    *(_WORD *)(v9 + 64) = 0;
  }
  return result;
}

void DisplayList.Item.addExtent(to:)(CGFloat *a1)
{
  double v3 = *(double *)v1;
  double v2 = *(double *)(v1 + 8);
  CGFloat v4 = *(double *)(v1 + 16);
  CGFloat v5 = *(double *)(v1 + 24);
  unint64_t v6 = *(void *)(v1 + 40);
  unint64_t v7 = *(void *)(v1 + 48);
  int v8 = *(unsigned __int16 *)(v1 + 64) | (*(unsigned __int8 *)(v1 + 66) << 16);
  switch(v7 >> 62)
  {
    case 1uLL:
      v94.double a = *(CGFloat *)(v1 + 56);
      LOWORD(v94.b) = v8;
      BYTE2(v94.b) = BYTE2(v8);
      outlined copy of DisplayList.Effect(v6, v7, SBYTE4(v7));
      swift_bridgeObjectRetain();
      double x = DisplayList.extent.getter();
      double y = v32;
      CGFloat width = v34;
      CGFloat height = v36;
      swift_bridgeObjectRelease();
      switch(BYTE4(v7))
      {
        case 6:
          long long v38 = *(_OWORD *)(v6 + 32);
          long long v101 = *(_OWORD *)(v6 + 16);
          long long v102 = v38;
          char v103 = *(unsigned char *)(v6 + 48);
          if ((*(unsigned char *)(v6 + 52) & 1) == 0)
          {
            outlined init with take of Path.Storage((uint64_t)&v101, (uint64_t)&v94);
            outlined retain of Path.Storage((uint64_t)&v94, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
            Path.boundingRect.getter();
            v112.origin.double x = v39;
            v112.origin.double y = v40;
            v112.size.CGFloat width = v41;
            v112.size.CGFloat height = v42;
            v104.origin.double x = x;
            v104.origin.double y = y;
            v104.size.CGFloat width = width;
            v104.size.CGFloat height = height;
            CGRect v105 = CGRectIntersection(v104, v112);
            double x = v105.origin.x;
            double y = v105.origin.y;
            CGFloat width = v105.size.width;
            CGFloat height = v105.size.height;
            outlined retain of Path.Storage((uint64_t)&v101, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          }
          break;
        case 7:
          if ((*(unsigned char *)(v6 + 28) & 1) == 0)
          {
            char v74 = *(unsigned char *)(v6 + 26);
            __int16 v75 = *(_WORD *)(v6 + 24);
            v94.double a = *(CGFloat *)(v6 + 16);
            LOWORD(v94.b) = v75;
            BYTE2(v94.b) = v74;
            v114.origin.double x = DisplayList.extent.getter();
            v114.origin.double y = v76;
            v114.size.CGFloat width = v77;
            v114.size.CGFloat height = v78;
            v109.origin.double x = x;
            v109.origin.double y = y;
            v109.size.CGFloat width = width;
            v109.size.CGFloat height = height;
            CGRect v110 = CGRectIntersection(v109, v114);
            goto LABEL_30;
          }
          break;
        case 8:
          if (!*(unsigned char *)(v6 + 88))
          {
            long long v79 = *(_OWORD *)(v6 + 32);
            *(_OWORD *)&v94.double a = *(_OWORD *)(v6 + 16);
            *(_OWORD *)&v94.CGFloat c = v79;
            *(_OWORD *)&v94.tdouble x = *(_OWORD *)(v6 + 48);
            double v80 = x;
            *(double *)&long long v79 = y;
            CGFloat v81 = width;
            CGFloat v82 = height;
            CGRect v110 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v79 - 8), &v94);
            goto LABEL_30;
          }
          break;
        case 9:
          int v83 = *(_DWORD *)(v6 + 128);
          char v84 = *(unsigned char *)(v6 + 132);
          long long v85 = *(_OWORD *)(v6 + 32);
          *(_OWORD *)&v94.double a = *(_OWORD *)(v6 + 16);
          *(_OWORD *)&v94.CGFloat c = v85;
          long long v86 = *(_OWORD *)(v6 + 64);
          *(_OWORD *)&v94.tdouble x = *(_OWORD *)(v6 + 48);
          long long v95 = v86;
          long long v87 = *(_OWORD *)(v6 + 96);
          long long v96 = *(_OWORD *)(v6 + 80);
          long long v97 = v87;
          long long v98 = *(_OWORD *)(v6 + 112);
          int v99 = v83;
          char v100 = v84;
          double v88 = x;
          *(double *)&long long v87 = y;
          CGFloat v89 = width;
          CGFloat v90 = height;
          CGRect v110 = (CGRect)GraphicsFilter.domainOfDefinition(for:)(*(__C::CGRect *)((char *)&v87 - 8));
LABEL_30:
          double x = v110.origin.x;
          double y = v110.origin.y;
          CGFloat width = v110.size.width;
          CGFloat height = v110.size.height;
          break;
        default:
          break;
      }
      v115.origin.double x = v3 + x;
      v115.origin.double y = v2 + y;
      v115.size.CGFloat width = width;
      v115.size.CGFloat height = height;
      CGRect v111 = CGRectUnion(*(CGRect *)a1, v115);
      CGFloat v70 = v111.origin.x;
      CGFloat v71 = v111.origin.y;
      CGFloat v72 = v111.size.width;
      CGFloat v73 = v111.size.height;
      outlined consume of DisplayList.Effect(v6, v7, SBYTE4(v7));
      goto LABEL_32;
    case 2uLL:
      double v92 = *(double *)v1;
      double v93 = *(double *)(v1 + 8);
      double v43 = *MEMORY[0x263F001A0];
      double v44 = *(double *)(MEMORY[0x263F001A0] + 8);
      double v45 = *(double *)(MEMORY[0x263F001A0] + 16);
      double v46 = *(double *)(MEMORY[0x263F001A0] + 24);
      uint64_t v47 = *(void *)(v6 + 16);
      if (v47)
      {
        unint64_t v91 = *(void *)(v1 + 48);
        swift_bridgeObjectRetain();
        unint64_t v48 = 0;
        CGFloat v49 = v45;
        CGFloat v50 = v46;
        double v51 = v44;
        double v52 = v43;
        do
        {
          if (v48 >= *(void *)(v6 + 16))
          {
            __break(1u);
            JUMPOUT(0x2459EF0E4);
          }
          uint64_t v53 = *(void *)(v6 + 56 + 40 * v48);
          *(double *)&long long v101 = v43;
          *((double *)&v101 + 1) = v44;
          *(double *)&long long v102 = v45;
          *((double *)&v102 + 1) = v46;
          uint64_t v54 = *(void *)(v53 + 16);
          double v55 = v46;
          double v56 = v45;
          double v57 = v44;
          double v58 = v43;
          if (v54)
          {
            swift_bridgeObjectRetain();
            uint64_t v59 = (_DWORD *)(v53 + 100);
            do
            {
              __int16 v60 = *((_WORD *)v59 - 2);
              char v61 = *((unsigned char *)v59 - 2);
              int v62 = *v59;
              CGAffineTransform v94 = *(CGAffineTransform *)(v59 - 17);
              long long v95 = *(_OWORD *)(v59 - 5);
              BYTE2(v96) = v61;
              LOWORD(v96) = v60;
              DWORD1(v96) = v62;
              DisplayList.Item.addExtent(to:)(&v101);
              v59 += 18;
              --v54;
            }
            while (v54);
            swift_bridgeObjectRelease();
            double v57 = *((double *)&v101 + 1);
            double v58 = *(double *)&v101;
            double v55 = *((double *)&v102 + 1);
            double v56 = *(double *)&v102;
          }
          ++v48;
          v106.origin.double x = v52;
          v106.origin.double y = v51;
          v106.size.CGFloat width = v49;
          v106.size.CGFloat height = v50;
          CGRect v107 = CGRectUnion(v106, *(CGRect *)&v58);
          double v52 = v107.origin.x;
          double v51 = v107.origin.y;
          CGFloat v49 = v107.size.width;
          CGFloat v50 = v107.size.height;
        }
        while (v48 != v47);
        outlined consume of DisplayList.Item.Value(v6, v91);
      }
      else
      {
        CGFloat v49 = *(double *)(MEMORY[0x263F001A0] + 16);
        CGFloat v50 = *(double *)(MEMORY[0x263F001A0] + 24);
        double v51 = *(double *)(MEMORY[0x263F001A0] + 8);
        double v52 = *MEMORY[0x263F001A0];
      }
      double v63 = v92 + v52;
      double v64 = v93 + v51;
      CGFloat v65 = *a1;
      uint64_t v66 = *((void *)a1 + 1);
      uint64_t v67 = *((void *)a1 + 2);
      uint64_t v68 = *((void *)a1 + 3);
      CGFloat v4 = v49;
      CGFloat v5 = v50;
      goto LABEL_24;
    case 3uLL:
      return;
    default:
      if (v6 >> 60 == 4)
      {
        long long v69 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        *(_OWORD *)&v94.double a = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        *(_OWORD *)&v94.CGFloat c = v69;
        LOBYTE(v94.tx) = *(unsigned char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        outlined copy of DisplayList.Item.Value(v6, v7);
        outlined retain of Path.Storage((uint64_t)&v94, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
        Path.boundingRect.getter();
        goto LABEL_22;
      }
      if (v6 >> 60 == 5)
      {
        long long v10 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        *(_OWORD *)&v94.double a = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        *(_OWORD *)&v94.CGFloat c = v10;
        LOBYTE(v94.tx) = *(unsigned char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        double v12 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x48);
        double v11 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
        double v13 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x58);
        char v14 = *(unsigned char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x64);
        outlined copy of DisplayList.Item.Value(v6, v7);
        outlined retain of Path.Storage((uint64_t)&v94, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
        Path.boundingRect.getter();
        CGFloat v16 = v15;
        CGFloat v18 = v17;
        CGFloat v20 = v19;
        CGFloat v22 = v21;
        double v23 = 0.0;
        double v24 = 0.0;
        double v25 = 0.0;
        double v26 = 0.0;
        if ((v14 & 1) == 0)
        {
          double v23 = v12 * -2.8 + v13;
          double v24 = v12 * -2.8 + v11;
          double v25 = v12 * -2.8 - v13;
          double v26 = v12 * -2.8 - v11;
        }
        double v27 = CGRect.inset(by:)(v23, v24, v25, v26, v16, v18, v20, v22);
LABEL_22:
        v113.size.CGFloat width = v29;
        v113.size.CGFloat height = v30;
        v113.origin.double x = v3 + v27;
        v113.origin.double y = v2 + v28;
        CGRect v108 = CGRectUnion(*(CGRect *)a1, v113);
        CGFloat v70 = v108.origin.x;
        CGFloat v71 = v108.origin.y;
        CGFloat v72 = v108.size.width;
        CGFloat v73 = v108.size.height;
        outlined retain of Path.Storage((uint64_t)&v94, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        outlined consume of DisplayList.Item.Value(v6, v7);
LABEL_32:
        *a1 = v70;
        a1[1] = v71;
        a1[2] = v72;
        a1[3] = v73;
        return;
      }
      CGFloat v65 = *a1;
      uint64_t v66 = *((void *)a1 + 1);
      uint64_t v67 = *((void *)a1 + 2);
      uint64_t v68 = *((void *)a1 + 3);
      double v63 = *(double *)v1;
      double v64 = *(double *)(v1 + 8);
LABEL_24:
      *(CGRect *)a1 = CGRectUnion(*(CGRect *)&v65, *(CGRect *)(&v4 - 2));
      return;
  }
}

double DisplayList.extent.getter()
{
  uint64_t v1 = *v0;
  double result = *MEMORY[0x263F001A0];
  uint64_t v3 = *(void *)(MEMORY[0x263F001A0] + 8);
  uint64_t v4 = *(void *)(MEMORY[0x263F001A0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F001A0] + 24);
  v8[0] = *MEMORY[0x263F001A0];
  v8[1] = v3;
  void v8[2] = v4;
  v8[3] = v5;
  uint64_t v6 = *(void *)(v1 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = v1 + 100;
    do
    {
      DisplayList.Item.addExtent(to:)(v8);
      v7 += 72;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return *(double *)v8;
  }
  return result;
}

uint64_t DisplayList.Content.Value.caseName.getter()
{
  uint64_t result = 0x706F72646B636162;
  switch(*v0 >> 60)
  {
    case 1:
    case 3:
      uint64_t result = 0x726F6C6F63;
      break;
    case 2:
      uint64_t result = 0x6F656C656D616863;
      break;
    case 4:
      uint64_t result = 0x6570616873;
      break;
    case 5:
      uint64_t result = 0x776F64616873;
      break;
    case 6:
    case 7:
      uint64_t result = 0x6D726F6674616C70;
      break;
    case 8:
      uint64_t result = 1954047348;
      break;
    case 9:
      uint64_t result = 0x656E657474616C66;
      break;
    case 0xALL:
      uint64_t result = 0x676E6977617264;
      break;
    case 0xBLL:
      uint64_t result = 2003134838;
      break;
    case 0xCLL:
      uint64_t result = 0x6C6F686563616C70;
      break;
    default:
      return result;
  }
  return result;
}

CGAffineTransform *DisplayList.Transform.affineTransform.getter@<X0>(uint64_t a1@<X8>)
{
  CGFloat v3 = *(double *)v1;
  double v2 = *(double *)(v1 + 8);
  double v4 = *(double *)(v1 + 16);
  long long v5 = 0uLL;
  char v6 = 1;
  CGFloat a = 0.0;
  tdouble y = 0.0;
  CGFloat b = 0.0;
  CGFloat c = 0.0;
  switch(*(unsigned char *)(v1 + 72))
  {
    case 1:
    case 3:
      break;
    case 2:
      CGAffineTransformMakeTranslation(&v14, *(CGFloat *)(v1 + 8), *(CGFloat *)(v1 + 16));
      CGAffineTransformRotate(&v13, &v14, v3);
      CGAffineTransform v14 = v13;
      uint64_t result = CGAffineTransformTranslate(&v13, &v14, -v2, -v4);
      char v6 = 0;
      CGFloat b = v13.b;
      CGFloat a = v13.a;
      CGFloat c = v13.c;
      long long v5 = *(_OWORD *)&v13.d;
      tdouble y = v13.ty;
      break;
    default:
      char v6 = 0;
      tdouble y = *(double *)(v1 + 40);
      long long v5 = *(_OWORD *)(v1 + 24);
      CGFloat a = *(double *)v1;
      CGFloat b = *(double *)(v1 + 8);
      CGFloat c = *(double *)(v1 + 16);
      break;
  }
  *(CGFloat *)a1 = a;
  *(CGFloat *)(a1 + 8) = b;
  *(CGFloat *)(a1 + 16) = c;
  *(_OWORD *)(a1 + 24) = v5;
  *(CGFloat *)(a1 + 40) = ty;
  *(unsigned char *)(a1 + 48) = v6;
  return result;
}

uint64_t DisplayList.Transform.projectionTransform.getter@<X0>(uint64_t a1@<X8>)
{
  CGFloat v2 = *(double *)v1;
  CGFloat v3 = *(double *)(v1 + 8);
  CGFloat v4 = *(double *)(v1 + 16);
  CGFloat v5 = *(double *)(v1 + 24);
  CGFloat v6 = *(double *)(v1 + 32);
  CGFloat v7 = *(double *)(v1 + 40);
  CGFloat v9 = *(double *)(v1 + 48);
  uint64_t result = *(void *)(v1 + 56);
  CGFloat v10 = *(double *)(v1 + 64);
  char v12 = 0;
  switch(*(unsigned char *)(v1 + 72))
  {
    case 1:
      break;
    case 3:
      _Rotation3DEffect.Data.transform.getter(v13);
      char v12 = 0;
      CGFloat v2 = v13[0];
      CGFloat v3 = v13[1];
      CGFloat v4 = v13[2];
      CGFloat v5 = v13[3];
      CGFloat v6 = v13[4];
      CGFloat v7 = v13[5];
      CGFloat v9 = v13[6];
      uint64_t result = *(void *)&v13[7];
      CGFloat v10 = v13[8];
      break;
    default:
      CGFloat v2 = 0.0;
      CGFloat v3 = 0.0;
      CGFloat v4 = 0.0;
      CGFloat v5 = 0.0;
      CGFloat v6 = 0.0;
      CGFloat v7 = 0.0;
      CGFloat v9 = 0.0;
      uint64_t result = 0;
      CGFloat v10 = 0.0;
      char v12 = 1;
      break;
  }
  *(CGFloat *)a1 = v2;
  *(CGFloat *)(a1 + 8) = v3;
  *(CGFloat *)(a1 + 16) = v4;
  *(CGFloat *)(a1 + 24) = v5;
  *(CGFloat *)(a1 + 32) = v6;
  *(CGFloat *)(a1 + 40) = v7;
  *(CGFloat *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = result;
  *(CGFloat *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v12;
  return result;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t specialized Array._getCount()(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6, uint64_t (*a7)(void), uint64_t a8)
{
  char v12 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v14 = a2;
    goto LABEL_8;
  }
  unint64_t v13 = a4[3];
  uint64_t v14 = v13 >> 1;
  if ((uint64_t)(v13 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v14 + 0x4000000000000000 >= 0)
  {
    uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v14 = a2;
    }
LABEL_8:
    uint64_t v15 = a4[2];
    if (v14 <= v15) {
      uint64_t v16 = a4[2];
    }
    else {
      uint64_t v16 = v14;
    }
    if (v16)
    {
      a5(0);
      double v17 = (void *)swift_allocObject();
      int64_t v18 = _swift_stdlib_malloc_size(v17);
      uint64_t v19 = v18 - 32;
      if (v18 < 32) {
        uint64_t v19 = v18 - 1;
      }
      v17[2] = v15;
      void v17[3] = 2 * (v19 >> 5);
      CGFloat v20 = v17 + 4;
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      double v17 = (void *)MEMORY[0x263F8EE78];
      CGFloat v20 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v17 != a4 || v20 >= &a4[4 * v15 + 4]) {
          memmove(v20, a4 + 4, 32 * v15);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v15, (unint64_t)v20, (uint64_t)a4, a6, a7, a8);
LABEL_24:
    swift_bridgeObjectRelease();
    return v17;
  }
  __break(1u);
  return result;
}

{
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  uint64_t v19;
  void *v20;

  char v12 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v14 = a2;
    goto LABEL_8;
  }
  unint64_t v13 = a4[3];
  uint64_t v14 = v13 >> 1;
  if ((uint64_t)(v13 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v14 + 0x4000000000000000 >= 0)
  {
    uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v14 = a2;
    }
LABEL_8:
    uint64_t v15 = a4[2];
    if (v14 <= v15) {
      uint64_t v16 = a4[2];
    }
    else {
      uint64_t v16 = v14;
    }
    if (v16)
    {
      a5(0);
      double v17 = (void *)swift_allocObject();
      int64_t v18 = _swift_stdlib_malloc_size(v17);
      uint64_t v19 = v18 - 32;
      if (v18 < 32) {
        uint64_t v19 = v18 - 17;
      }
      v17[2] = v15;
      void v17[3] = 2 * (v19 >> 4);
      CGFloat v20 = v17 + 4;
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      double v17 = (void *)MEMORY[0x263F8EE78];
      CGFloat v20 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v17 != a4 || v20 >= &a4[2 * v15 + 4]) {
          memmove(v20, a4 + 4, 16 * v15);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v15, (unint64_t)v20, (uint64_t)a4, a6, a7, a8);
LABEL_24:
    swift_bridgeObjectRelease();
    return v17;
  }
  __break(1u);
  return result;
}

{
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  uint64_t v19;
  void *v20;

  char v12 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v14 = a2;
    goto LABEL_8;
  }
  unint64_t v13 = a4[3];
  uint64_t v14 = v13 >> 1;
  if ((uint64_t)(v13 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v14 + 0x4000000000000000 >= 0)
  {
    uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v14 = a2;
    }
LABEL_8:
    uint64_t v15 = a4[2];
    if (v14 <= v15) {
      uint64_t v16 = a4[2];
    }
    else {
      uint64_t v16 = v14;
    }
    if (v16)
    {
      a5(0);
      double v17 = (void *)swift_allocObject();
      int64_t v18 = _swift_stdlib_malloc_size(v17);
      uint64_t v19 = v18 - 32;
      if (v18 < 32) {
        uint64_t v19 = v18 - 1;
      }
      v17[2] = v15;
      void v17[3] = 2 * (v19 >> 5);
      CGFloat v20 = v17 + 4;
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      double v17 = (void *)MEMORY[0x263F8EE78];
      CGFloat v20 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v17 != a4 || v20 >= &a4[4 * v15 + 4]) {
          memmove(v20, a4 + 4, 32 * v15);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v15, (unint64_t)v20, (uint64_t)a4, a6, a7, a8);
LABEL_24:
    swift_bridgeObjectRelease();
    return v17;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  char v10 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v12 = a2;
    goto LABEL_8;
  }
  unint64_t v11 = a4[3];
  uint64_t v12 = v11 >> 1;
  if ((uint64_t)(v11 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v12 + 0x4000000000000000 >= 0)
  {
    uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v12 = a2;
    }
LABEL_8:
    uint64_t v13 = a4[2];
    if (v12 <= v13) {
      uint64_t v14 = a4[2];
    }
    else {
      uint64_t v14 = v12;
    }
    if (v14)
    {
      a5(0);
      uint64_t v15 = (void *)swift_allocObject();
      size_t v16 = _swift_stdlib_malloc_size(v15);
      v15[2] = v13;
      v15[3] = 2 * ((uint64_t)(v16 - 32) / 40);
      double v17 = v15 + 4;
      if (v10)
      {
LABEL_13:
        if (v15 != a4 || v17 >= &a4[5 * v13 + 4]) {
          memmove(v17, a4 + 4, 40 * v13);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v15 = (void *)MEMORY[0x263F8EE78];
      double v17 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, (unint64_t)v17, (uint64_t)a4, a6, a7);
LABEL_22:
    swift_bridgeObjectRelease();
    return v15;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ContentPathObservers.Observer>, (uint64_t)&type metadata for ContentPathObservers.Observer, MEMORY[0x263F8E0F8]);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      id v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = (unint64_t)(v10 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = MEMORY[0x263F8EE78] + 32;
      if (result)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 16 * v8)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (void *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, void (*a5)(void), void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      a5(0);
      unint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 1;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      size_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v13 = (void *)MEMORY[0x263F8EE78];
      size_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4]) {
          memmove(v16, a4 + 4, 32 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = *((void *)a4 + 3);
  int64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v9 = a2;
    }
LABEL_8:
    int64_t v10 = *((void *)a4 + 2);
    if (v9 <= v10) {
      int64_t v11 = *((void *)a4 + 2);
    }
    else {
      int64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      int64_t v12 = (char *)swift_allocObject();
      size_t v13 = _swift_stdlib_malloc_size(v12);
      *((void *)v12 + 2) = v10;
      *((void *)v12 + 3) = 2 * v13 - 64;
      int64_t v14 = v12 + 32;
      if (v7)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[v10 + 32]) {
          memmove(v14, a4 + 32, v10);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v12 = (char *)MEMORY[0x263F8EE78];
      int64_t v14 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Layout.Fragment>, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.Layout.Fragment, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>, (uint64_t (*)(uint64_t))type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(void))type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(void))type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry);
}

BOOL specialized static DisplayList.Index.ID.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t outlined init with copy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DisplayList.ArchiveIDs?(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2459FB798()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2459FB7E0()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t sub_2459FB820()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t specialized DisplayList.forEachIdentity(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v27 = *(void *)(*a1 + 16);
  if (!v27) {
    return 1;
  }
  uint64_t v28 = v3 + 32;
  swift_retain_n();
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  uint64_t v26 = v3;
LABEL_5:
  if (v6 >= *(void *)(v3 + 16))
  {
    __break(1u);
    JUMPOUT(0x2459FDB10);
  }
  uint64_t v7 = v28 + 72 * v6;
  unint64_t v9 = *(void *)(v7 + 40);
  unint64_t v8 = *(void *)(v7 + 48);
  uint64_t v10 = *(void *)(v7 + 56);
  int v11 = *(unsigned __int16 *)(v7 + 64) | (*(unsigned __int8 *)(v7 + 66) << 16);
  int v12 = *(_DWORD *)(v7 + 68);
  if (v12)
  {
    LODWORD(v29) = v12;
    outlined copy of DisplayList.Item.Value(v9, v8);
    closure #1 in _DisplayList_StableIdentityMap.addIDs(from:root:)((Swift::UInt32 *)&v29, (uint64_t)&v32, a2, a3);
  }
  else
  {
    outlined copy of DisplayList.Item.Value(v9, v8);
  }
  ++v6;
  switch(v8 >> 62)
  {
    case 1uLL:
      if (BYTE4(v8) == 7)
      {
        __int16 v16 = *(_WORD *)(v9 + 24);
        char v17 = *(unsigned char *)(v9 + 26);
        uint64_t v29 = *(void *)(v9 + 16);
        __int16 v30 = v16;
        char v31 = v17;
        swift_retain();
        outlined copy of DisplayList.Item.Value(v9, v8);
        char v18 = specialized DisplayList.forEachIdentity(_:)(&v29, a2, a3);
        swift_release();
        if ((v18 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v9, v8, 7);
          outlined consume of DisplayList.Item.Value(v9, v8);
          goto LABEL_29;
        }
      }
      else
      {
        outlined copy of DisplayList.Effect(v9, v8, SBYTE4(v8));
        swift_bridgeObjectRetain();
      }
      uint64_t v29 = v10;
      __int16 v30 = v11;
      char v31 = BYTE2(v11);
      swift_retain();
      char v24 = specialized DisplayList.forEachIdentity(_:)(&v29, a2, a3);
      swift_release();
      outlined consume of DisplayList.Effect(v9, v8, SBYTE4(v8));
      swift_bridgeObjectRelease();
      outlined consume of DisplayList.Item.Value(v9, v8);
      if (v24) {
        goto LABEL_4;
      }
LABEL_29:
      swift_release();
      goto LABEL_25;
    case 2uLL:
      uint64_t v19 = *(void *)(v9 + 16);
      if (!v19) {
        goto LABEL_3;
      }
      outlined copy of DisplayList.Item.Value(v9, v8);
      CGFloat v20 = (unsigned char *)(v9 + 66);
      break;
    case 3uLL:
      goto LABEL_3;
    default:
      if (v9 >> 60 != 9) {
        goto LABEL_3;
      }
      __int16 v13 = *(_WORD *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      char v14 = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
      uint64_t v29 = *(void *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      __int16 v30 = v13;
      char v31 = v14;
      swift_retain();
      char v15 = specialized DisplayList.forEachIdentity(_:)(&v29, a2, a3);
      swift_release();
      outlined consume of DisplayList.Item.Value(v9, v8);
      if ((v15 & 1) == 0) {
        goto LABEL_29;
      }
      goto LABEL_4;
  }
  while (1)
  {
    char v21 = *v20;
    __int16 v22 = *((_WORD *)v20 - 1);
    uint64_t v29 = *(void *)(v20 - 10);
    __int16 v30 = v22;
    char v31 = v21;
    swift_retain();
    char v23 = specialized DisplayList.forEachIdentity(_:)(&v29, a2, a3);
    swift_release();
    if ((v23 & 1) == 0) {
      break;
    }
    v20 += 40;
    if (!--v19)
    {
      outlined consume of DisplayList.Item.Value(v9, v8);
      uint64_t v3 = v26;
LABEL_3:
      outlined consume of DisplayList.Item.Value(v9, v8);
LABEL_4:
      if (v6 == v27)
      {
        swift_release_n();
        swift_bridgeObjectRelease();
        return 1;
      }
      goto LABEL_5;
    }
  }
  outlined consume of DisplayList.Item.Value(v9, v8);
  outlined consume of DisplayList.Item.Value(v9, v8);
  swift_release();
LABEL_25:
  swift_bridgeObjectRelease();
  swift_release_n();
  return 0;
}

unint64_t lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity()
{
  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Features and conformance DisplayList.Features()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features;
  if (!lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features;
  if (!lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features;
  if (!lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features;
  if (!lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Features and conformance DisplayList.Features);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Version and conformance DisplayList.Version()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Version and conformance DisplayList.Version;
  if (!lazy protocol witness table cache variable for type DisplayList.Version and conformance DisplayList.Version)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Version and conformance DisplayList.Version);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Seed and conformance DisplayList.Seed()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Seed and conformance DisplayList.Seed;
  if (!lazy protocol witness table cache variable for type DisplayList.Seed and conformance DisplayList.Seed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Seed and conformance DisplayList.Seed);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Properties and conformance DisplayList.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties;
  if (!lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties;
  if (!lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties;
  if (!lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties;
  if (!lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Properties and conformance DisplayList.Properties);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Options and conformance DisplayList.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options;
  if (!lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options;
  if (!lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options;
  if (!lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options;
  if (!lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Options and conformance DisplayList.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
  }
  return result;
}

ValueMetadata *type metadata accessor for _DisplayList_Identity()
{
  return &type metadata for _DisplayList_Identity;
}

uint64_t assignWithTake for DisplayList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 11)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 11) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Features()
{
  return &type metadata for DisplayList.Features;
}

uint64_t assignWithCopy for DisplayList.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  unint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  char v7 = *(unsigned char *)(a2 + 66);
  __int16 v8 = *(_WORD *)(a2 + 64);
  outlined copy of DisplayList.Item.Value(v4, v5);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(_WORD *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 66) = v7;
  outlined consume of DisplayList.Item.Value(v9, v10);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for DisplayList.Item(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(a2 + 66);
  __int16 v6 = *(_WORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 66) = v5;
  outlined consume of DisplayList.Item.Value(v7, v8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Item(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFD && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 134217725);
  }
  unsigned int v3 = (((*(void *)(a1 + 48) >> 37) >> 25) & 0xF8000003 | (4 * ((*(void *)(a1 + 48) >> 37) & 0x1FFFFFF))) ^ 0x7FFFFFF;
  if (v3 >= 0x7FFFFFC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 - 134217725;
    if (a3 >= 0x7FFFFFD) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFD) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2)
    {
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = (unint64_t)(((-a2 >> 2) & 0x1FFFFFF) - (a2 << 25)) << 37;
      *(void *)(result + 56) = 0;
      *(unsigned char *)(result + 66) = 0;
      *(_WORD *)(result + 64) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Item()
{
  return &type metadata for DisplayList.Item;
}

uint64_t destroy for DisplayList.Item.Value(uint64_t a1)
{
  return outlined consume of DisplayList.Item.Value(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t initializeWithCopy for DisplayList.Item.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 26);
  __int16 v7 = *(_WORD *)(a2 + 24);
  outlined copy of DisplayList.Item.Value(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 26) = v6;
  *(_WORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t assignWithCopy for DisplayList.Item.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 26);
  __int16 v7 = *(_WORD *)(a2 + 24);
  outlined copy of DisplayList.Item.Value(*(void *)a2, v4);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 26) = v6;
  outlined consume of DisplayList.Item.Value(v8, v9);
  return a1;
}

uint64_t assignWithTake for DisplayList.Item.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 26);
  __int16 v5 = *(_WORD *)(a2 + 24);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 26) = v4;
  outlined consume of DisplayList.Item.Value(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Item.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFD && *(unsigned char *)(a1 + 27)) {
    return (*(_DWORD *)a1 + 134217725);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 37) >> 25) & 0xF8000003 | (4 * ((*(void *)(a1 + 8) >> 37) & 0x1FFFFFF))) ^ 0x7FFFFFF;
  if (v3 >= 0x7FFFFFC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Item.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 134217725;
    if (a3 >= 0x7FFFFFD) {
      *(unsigned char *)(result + 27) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFD) {
      *(unsigned char *)(result + 27) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 0x1FFFFFF) - (a2 << 25)) << 37;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 26) = 0;
      *(_WORD *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for DisplayList.Item.Value(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 62;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t destructiveProjectEnumData for DisplayList.Item.Value(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for DisplayList.Item.Value(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(void *)(result + 8) = *(void *)(result + 8) & 0x1FFFFFFFFFLL | (a2 << 62);
  }
  else
  {
    *(void *)__n128 result = (a2 - 3);
    *(_OWORD *)(result + 8) = xmmword_2461B9DF0;
    *(unsigned char *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Item.Value()
{
  return &type metadata for DisplayList.Item.Value;
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayList.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  outlined copy of DisplayList.Content.Value(*(void *)a2);
  *(void *)a1 = v4;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for DisplayList.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  outlined copy of DisplayList.Content.Value(*(void *)a2);
  unint64_t v5 = *(void *)a1;
  *(void *)a1 = v4;
  outlined consume of DisplayList.Content.Value(v5);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for DisplayList.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  outlined consume of DisplayList.Content.Value(v4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 4 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 4);
  }
  unsigned int v3 = (*(void *)a1 >> 60) ^ 0xF;
  if (v3 >= 3) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 4;
    if (a3 >= 4) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 4) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(void *)__n128 result = (unint64_t)-a2 << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Content()
{
  return &type metadata for DisplayList.Content;
}

unint64_t *initializeBufferWithCopyOfBuffer for DisplayList.Content.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of DisplayList.Content.Value(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for DisplayList.Content.Value(unint64_t *a1)
{
  return outlined consume of DisplayList.Content.Value(*a1);
}

unint64_t *assignWithCopy for DisplayList.Content.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of DisplayList.Content.Value(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of DisplayList.Content.Value(v4);
  return a1;
}

unint64_t *assignWithTake for DisplayList.Content.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of DisplayList.Content.Value(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Content.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 4 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 4);
  }
  unsigned int v3 = (*(void *)a1 >> 60) ^ 0xF;
  if (v3 >= 3) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DisplayList.Content.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(void *)__n128 result = a2 - 4;
    if (a3 >= 4) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 4) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = (unint64_t)-a2 << 60;
    }
  }
  return result;
}

unint64_t *destructiveInjectEnumTag for DisplayList.Content.Value(unint64_t *result, unsigned __int8 a2)
{
  *__n128 result = *result & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)a2 << 60);
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Content.Value()
{
  return &type metadata for DisplayList.Content.Value;
}

uint64_t destroy for DisplayList.Effect(uint64_t a1)
{
  return outlined consume of DisplayList.Effect(*(void *)a1, *(_DWORD *)(a1 + 8), *(unsigned char *)(a1 + 12));
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayList.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 12);
  outlined copy of DisplayList.Effect(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return a1;
}

uint64_t assignWithCopy for DisplayList.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 12);
  outlined copy of DisplayList.Effect(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 12) = v5;
  outlined consume of DisplayList.Effect(v6, v7, v8);
  return a1;
}

void *__swift_memcpy13_8(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *__n128 result = v2;
  return result;
}

uint64_t assignWithTake for DisplayList.Effect(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  char v5 = *((unsigned char *)a2 + 12);
  uint64_t v6 = *(void *)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 12) = v5;
  outlined consume of DisplayList.Effect(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.Effect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xED && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 237);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 <= 0x13) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEC)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 237;
    if (a3 >= 0xED) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if (a3 >= 0xED) {
      *(unsigned char *)(result + 13) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for DisplayList.Effect(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x13)
  {
    *(void *)__n128 result = a2 - 19;
    *(_DWORD *)(result + 8) = 0;
    LOBYTE(a2) = 19;
  }
  *(unsigned char *)(result + 12) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Effect()
{
  return &type metadata for DisplayList.Effect;
}

uint64_t getEnumTagSinglePayload for DisplayList.Transform(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.Transform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for DisplayList.Transform(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t destructiveInjectEnumTag for DisplayList.Transform(uint64_t result, char a2)
{
  *(unsigned char *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Transform()
{
  return &type metadata for DisplayList.Transform;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisplayList.ArchiveIDs(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DisplayList.ArchiveIDs(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2459FEF9C);
}

uint64_t sub_2459FEF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2459FF070);
}

uint64_t sub_2459FF070(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t initializeWithCopy for DisplayList.InterpolatorAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.InterpolatorAnimation(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 13) = *(void *)((char *)a2 + 13);
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.InterpolatorAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.InterpolatorAnimation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorAnimation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.InterpolatorAnimation()
{
  return &type metadata for DisplayList.InterpolatorAnimation;
}

ValueMetadata *type metadata accessor for DisplayList.Seed()
{
  return &type metadata for DisplayList.Seed;
}

ValueMetadata *type metadata accessor for DisplayList.Properties()
{
  return &type metadata for DisplayList.Properties;
}

ValueMetadata *type metadata accessor for DisplayList.Key()
{
  return &type metadata for DisplayList.Key;
}

uint64_t getEnumTagSinglePayload for DisplayList.Index(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DisplayList.Index(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.Index()
{
  return &type metadata for DisplayList.Index;
}

ValueMetadata *type metadata accessor for DisplayList.Index.ID()
{
  return &type metadata for DisplayList.Index.ID;
}

uint64_t dispatch thunk of static _DisplayList_AnyEffectAnimation.leafProtobufTag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _DisplayList_AnyEffectAnimation.makeAnimator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _DisplayList_AnyEffectAnimator.evaluate(_:at:size:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

void *type metadata accessor for DisplayList.Index.RestoreOptions()
{
  return &unk_26FA42878;
}

uint64_t getEnumTagSinglePayload for _DisplayList_Identity.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for _DisplayList_Identity.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2459FF494);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for _DisplayList_Identity.CodingKeys()
{
  return &unk_26FA654F8;
}

unint64_t lazy protocol witness table accessor for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions;
  if (!lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.Index.RestoreOptions and conformance DisplayList.Index.RestoreOptions);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v6 & 0x8000000000000000) == 0)
  {
    unint64_t v7 = a4 + 40 * a1 + 32;
    unint64_t v8 = a3 + 40 * v6;
    if (v7 >= v8 || v7 + 40 * v6 <= a3)
    {
      type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(0, a5, a6, (void (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved);
      swift_arrayInitWithCopy();
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    unint64_t v9 = a4 + 40 * a1 + 32;
    unint64_t v10 = a3 + 40 * v8;
    if (v9 >= v10 || v9 + 40 * v8 <= a3)
    {
      a8(0, a5, a6, a7);
      swift_arrayInitWithCopy();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(void), uint64_t a7)
{
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v8 = a4 + 32 * a1 + 32;
    unint64_t v9 = a3 + 32 * v7;
    if (v8 >= v9 || v8 + 32 * v7 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
      swift_arrayInitWithCopy();
      return v9;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v8 = a4 + 32 * a1 + 32;
    unint64_t v9 = a3 + 32 * v7;
    if (v8 >= v9 || v8 + 32 * v7 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v9;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v8 = a4 + 16 * a1 + 32;
    unint64_t v9 = a3 + 16 * v7;
    if (v8 >= v9 || v8 + 16 * v7 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v9;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<CGFloat>.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<CGFloat>.Entry>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<CGFloat>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<CGFloat>.Entry>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<CGFloat>.Fork>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<CGFloat>.Fork>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for AnimatorState<CGFloat>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<CGFloat>.Fork>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<Double>.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<Double>.Entry>)
  {
    type metadata accessor for CombinedAnimationState<Double>.Entry(255, &lazy cache variable for type metadata for CombinedAnimationState<Double>.Entry, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<Double>.Entry>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<Double>.Fork>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<Double>.Fork>)
  {
    type metadata accessor for CombinedAnimationState<Double>.Entry(255, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<Double>.Fork, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<Double>.Fork>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], MEMORY[0x263F8D1A0]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Range<Int>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>)
  {
    type metadata accessor for CombinedAnimationState<Double>.Entry(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Float, Float)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Float, Float)>)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (Float, Float));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Float, Float)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(proposal: _ProposedSize, value: TextSizeVariant)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(proposal: _ProposedSize, value: TextSizeVariant)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, &lazy cache variable for type metadata for (proposal: _ProposedSize, value: TextSizeVariant));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(proposal: _ProposedSize, value: TextSizeVariant)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8D870]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex;
  if (!lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex;
  if (!lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex;
  if (!lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex);
  }
  return result;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, Float>>)
  {
    type metadata accessor for AnimatablePair<Float, Float>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, Float>);
    lazy protocol witness table accessor for type AnimatablePair<Double, Double> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, Float>);
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, Float>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Double, Double> and conformance AnimatablePair<A, B>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnimatablePair<Float, Float>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>)
  {
    type metadata accessor for CombinedAnimationState<Double>.Entry(255, &lazy cache variable for type metadata for AnimatableArray<Float>, MEMORY[0x263F8D5C8], (uint64_t)&protocol witness table for Float, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    type metadata accessor for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>();
    lazy protocol witness table accessor for type AnimatableArray<Float> and conformance AnimatableArray<A>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>);
    }
  }
}

void type metadata accessor for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>)
  {
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(255, &lazy cache variable for type metadata for AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255);
    lazy protocol witness table accessor for type AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>> and conformance AnimatableArray<A>(&lazy protocol witness table cache variable for type AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>> and conformance AnimatableArray<A>, &lazy cache variable for type metadata for AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>);
    lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatableArray<Float> and conformance AnimatableArray<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableArray<Float> and conformance AnimatableArray<A>;
  if (!lazy protocol witness table cache variable for type AnimatableArray<Float> and conformance AnimatableArray<A>)
  {
    type metadata accessor for CombinedAnimationState<Double>.Entry(255, &lazy cache variable for type metadata for AnimatableArray<Float>, MEMORY[0x263F8D5C8], (uint64_t)&protocol witness table for Float, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableArray<Float> and conformance AnimatableArray<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for CombinedAnimationState.Entry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatorState.Fork();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for CombinedAnimationState.Entry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatorState.Fork();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for CombinedAnimationState.Entry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry);
    }
  }
}

void type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    a3();
    unint64_t v5 = type metadata accessor for AnimatablePair();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatorState.Fork();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork(uint64_t a1)
{
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_AnyAnimatableData>.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_AnyAnimatableData>.Entry>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_AnyAnimatableData>.Entry>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData;
  if (!lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData;
  if (!lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData;
  if (!lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyAnimatableData and conformance _AnyAnimatableData);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<_AnyAnimatableData>.Fork>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_AnyAnimatableData>.Fork>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_AnyAnimatableData>.Fork>);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255);
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
    lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<ShaderVectorData>.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<ShaderVectorData>.Entry>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<ShaderVectorData>.Entry>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData()
{
  unint64_t result = lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData;
  if (!lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData;
  if (!lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData;
  if (!lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData and conformance ShaderVectorData);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork>);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork(uint64_t a1)
{
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork>);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>> and conformance AnimatablePair<A, B>);
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>);
    }
  }
}

void type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>);
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>> and conformance AnimatablePair<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>> and conformance AnimatablePair<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<ResolvedGradientVector>.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<ResolvedGradientVector>.Entry>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<ResolvedGradientVector>.Entry>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector;
  if (!lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector;
  if (!lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector;
  if (!lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradientVector and conformance ResolvedGradientVector);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<ResolvedGradientVector>.Fork>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<ResolvedGradientVector>.Fork>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for AnimatorState<ResolvedGradientVector>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<ResolvedGradientVector>.Fork>);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(a4, a5);
    unint64_t v8 = type metadata accessor for AnimatablePair();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255);
    lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    type metadata accessor for AnimatablePair<Float, Float>(255, &lazy cache variable for type metadata for AnimatablePair<Double, Double>);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    lazy protocol witness table accessor for type AnimatablePair<Double, Double> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Double, Double> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<Double, Double>);
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>);
    }
  }
}

void type metadata accessor for AnimatablePair<Float, Float>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for AnimatablePair();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>);
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for CombinedAnimationState.Entry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry);
    }
  }
}

void type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    a3();
    unint64_t v5 = type metadata accessor for AnimatablePair();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatorState.Fork();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork);
    }
  }
}

void type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>()
{
  if (!lazy cache variable for type metadata for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>)
  {
    unint64_t v0 = type metadata accessor for CodableAccessibilityVersionStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: String)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: String)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<SIMD2<Float>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for SIMD2<Float>, (uint64_t (*)(void))lazy protocol witness table accessor for type Float and conformance Float, MEMORY[0x263F8D5C8], MEMORY[0x263F8E670]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(offset: UInt64, size: UInt64)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: UInt64, size: UInt64)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (offset: UInt64, size: UInt64));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: UInt64, size: UInt64)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList.Version)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList.Version)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (StrongHash, DisplayList.Version));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList.Version)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, String)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(ScrapeableContent, Int)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(ScrapeableContent, Int)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (ScrapeableContent, Int));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ScrapeableContent, Int)>);
    }
  }
}

void type metadata accessor for (views: _ViewList_ID_Views, endOffset: Int)()
{
  if (!lazy cache variable for type metadata for (views: _ViewList_ID_Views, endOffset: Int))
  {
    type metadata accessor for _ViewList_ID_Views();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (views: _ViewList_ID_Views, endOffset: Int));
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList)>)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (StrongHash, DisplayList));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(StrongHash, DisplayList)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, &lazy cache variable for type metadata for (offset: Int, element: _ShapeStyle_Pack.Style));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>);
    }
  }
}

uint64_t sub_245A07F04()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry()
{
  if (!lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry)
  {
    type metadata accessor for ResolvedTextHelper(255);
    unint64_t v0 = type metadata accessor for SizeFittingTextCache.CacheEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(ContentShapeKinds, AnyShape)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(ContentShapeKinds, AnyShape)>)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (ContentShapeKinds, AnyShape));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ContentShapeKinds, AnyShape)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<ObjectCache<Font.Resolved, CTFontRef>.Item>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Font.Resolved, CTFontRef>.Item>)
  {
    type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(255, &lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>.Item, type metadata accessor for CTFontRef, (void (*)(void))lazy protocol witness table accessor for type Font.Resolved and conformance Font.Resolved);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Font.Resolved, CTFontRef>.Item>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<ObjectCache<Color.Resolved, CGColorRef>.Item>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Color.Resolved, CGColorRef>.Item>)
  {
    type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(255, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>.Item, type metadata accessor for CGColorRef, (void (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Color.Resolved, CGColorRef>.Item>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<WeakAttribute<_DisplayList_StableIdentityScope>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<WeakAttribute<_DisplayList_StableIdentityScope>>)
  {
    type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(255, &lazy cache variable for type metadata for WeakAttribute<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, MEMORY[0x263F28890]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WeakAttribute<_DisplayList_StableIdentityScope>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<ObjectCache<Color.Resolved, NSObject>.Item>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Color.Resolved, NSObject>.Item>)
  {
    type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(255, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>.Item, (void (*)(uint64_t))type metadata accessor for NSObject, (void (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectCache<Color.Resolved, NSObject>.Item>);
    }
  }
}

void type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for ObjectCache.Item();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for Unmanaged<GraphHost>(uint64_t a1)
{
}

void type metadata accessor for _ContiguousArrayStorage<(AGSubgraphRef, Int)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(AGSubgraphRef, Int)>)
  {
    type metadata accessor for (CGSize, NSAttributedString.Metrics)(255, (unint64_t *)&lazy cache variable for type metadata for (AGSubgraphRef, Int), type metadata accessor for AGSubgraphRef);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AGSubgraphRef, Int)>);
    }
  }
}

void type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry()
{
  if (!lazy cache variable for type metadata for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry)
  {
    unint64_t v0 = type metadata accessor for SizeFittingTextCache.CacheEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Path?>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Path?>)
  {
    type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(255, (unint64_t *)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Path?>);
    }
  }
}

unint64_t type metadata accessor for (_:_:_:)()
{
  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<JitterTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect, (uint64_t)&type metadata for JitterTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<SomersaultTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect, (uint64_t)&type metadata for SomersaultTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<BloomTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<SmallTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<BigTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<SquishTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect, (uint64_t)&type metadata for SquishTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<StretchTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect, (uint64_t)&type metadata for StretchTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.DrawableFragment<ScaleRippleTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect, (uint64_t)&type metadata for ScaleRippleTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableFragment);
    unint64_t result = swift_getFunctionTypeMetadata3();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect;
  if (!lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect;
  if (!lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect;
  if (!lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplodeTextEffect and conformance ExplodeTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect;
  if (!lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect;
  if (!lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect;
  if (!lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JitterTextEffect and conformance JitterTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect;
  if (!lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect;
  if (!lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect;
  if (!lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SomersaultTextEffect and conformance SomersaultTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect;
  if (!lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect;
  if (!lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect;
  if (!lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloomTextEffect and conformance BloomTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<BloomTextEffect>.StyleModifier>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<BloomTextEffect>.StyleModifier>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<BloomTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<BloomTextEffect>.StyleModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect;
  if (!lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect;
  if (!lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect;
  if (!lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect and conformance SmallTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<SmallTextEffect>.StyleModifier>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<SmallTextEffect>.StyleModifier>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<SmallTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<SmallTextEffect>.StyleModifier>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<_ResolvedKeyframes<Double>.Track>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<_ResolvedKeyframes<Double>.Track>)
  {
    type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(255, &lazy cache variable for type metadata for _ResolvedKeyframes<Double>.Track, MEMORY[0x263F8D538], (uint64_t (*)(void, uint64_t))type metadata accessor for _ResolvedKeyframes.Track);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ResolvedKeyframes<Double>.Track>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<AnimationPath<Double>.Element>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AnimationPath<Double>.Element>)
  {
    type metadata accessor for CombinedAnimationState<Double>.Entry(255, &lazy cache variable for type metadata for AnimationPath<Double>.Element, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimationPath.Element);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnimationPath<Double>.Element>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<_ResolvedKeyframeTrackContent<Double>.Segment>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<_ResolvedKeyframeTrackContent<Double>.Segment>)
  {
    type metadata accessor for CombinedAnimationState<Double>.Entry(255, &lazy cache variable for type metadata for _ResolvedKeyframeTrackContent<Double>.Segment, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ResolvedKeyframeTrackContent.Segment);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ResolvedKeyframeTrackContent<Double>.Segment>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect;
  if (!lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect;
  if (!lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect;
  if (!lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect and conformance BigTextEffect);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<BigTextEffect>.StyleModifier>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<BigTextEffect>.StyleModifier>)
  {
    type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(255, &lazy cache variable for type metadata for Text.Effect.Configuration<BigTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.Configuration.StyleModifier);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Configuration<BigTextEffect>.StyleModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect;
  if (!lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect;
  if (!lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect;
  if (!lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BounceTextEffect and conformance BounceTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect;
  if (!lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect;
  if (!lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect;
  if (!lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquishTextEffect and conformance SquishTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect;
  if (!lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect;
  if (!lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect;
  if (!lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StretchTextEffect and conformance StretchTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect;
  if (!lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect;
  if (!lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect;
  if (!lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect);
  }
  return result;
}

void (*EnvironmentValues.isEnabled.modify(void *a1))(uint64_t a1)
{
  unint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.isEnabled.modify;
}

void EnvironmentValues.isEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  int v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t View._disabled(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.disabled(_:)(a1, a2, a3, (uint64_t)&unk_2461BAAB8, (uint64_t)&unk_26FA88530, (uint64_t)partial apply for closure #1 in View._disabled(_:));
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t (*a4)(uint64_t)@<X4>, uint64_t *a5@<X8>)
{
  type metadata accessor for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(0, a2, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>, a3);
  BloomFilter.init(hashValue:)(v8);
  uint64_t result = a4(a1);
  if (result) {
    uint64_t result = swift_retain();
  }
  *a5 = result;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, a3, (uint64_t (*)(uint64_t, Swift::Int))specialized find1<A>(_:key:filter:)) & 1;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, Swift::Int hashValue, uint64_t a3, uint64_t (*a4)(uint64_t, Swift::Int))
{
  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v7 = a4(a1, hashValue);
  if (v7)
  {
    char v8 = *(unsigned char *)(v7 + 72);
  }
  else
  {
    swift_beginAccess();
    if (static CoreTesting.isRunning) {
      char v8 = 1;
    }
    else {
      char v8 = specialized static GestureContainerFeature.isEnabled.getter();
    }
  }
  return v8 & 1;
}

{
  uint64_t result;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t result = a4(a1, hashValue);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

uint64_t sub_245A0BB90@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.isEnabled : EnvironmentValues(a1, a2);
}

uint64_t sub_245A0BBAC(char *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_245A0BBD4()
{
  return swift_deallocObject();
}

uint64_t sub_245A0BBE8()
{
  return swift_deallocObject();
}

uint64_t sub_245A0BBF8()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for EnabledKey()
{
  return &type metadata for EnabledKey;
}

uint64_t MouseEvent.Button.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::MouseEvent::Button __swiftcall MouseEvent.Button.init(rawValue:)(SwiftUI::MouseEvent::Button rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static MouseEvent.Button.primary.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static MouseEvent.Button.secondary.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static MouseEvent.Button.other(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MouseEvent.Button()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

double MouseEvent.timestamp.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double MouseEvent.timestamp.setter(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

uint64_t (*MouseEvent.timestamp.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MouseEvent.binding.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_retain();
}

uint64_t MouseEvent.binding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*MouseEvent.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void MouseEvent.button.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void *MouseEvent.button.setter(void *result)
{
  *(void *)(v1 + 16) = *result;
  return result;
}

uint64_t (*MouseEvent.button.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void MouseEvent.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 24);
}

unsigned char *MouseEvent.phase.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 24) = *result;
  return result;
}

uint64_t (*MouseEvent.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double MouseEvent.location.getter()
{
  return *(double *)(v0 + 32);
}

void MouseEvent.location.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*MouseEvent.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double MouseEvent.globalLocation.getter()
{
  return *(double *)(v0 + 48);
}

void MouseEvent.globalLocation.setter(double a1, double a2)
{
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*MouseEvent.globalLocation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MouseEvent.modifiers.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t MouseEvent.modifiers.setter(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t (*MouseEvent.modifiers.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *MouseEvent.init(timestamp:binding:button:phase:location:globalLocation:modifiers:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>)
{
  uint64_t v10 = *a2;
  uint64_t v11 = *a3;
  char v12 = *a4;
  *(void *)a6 = *result;
  *(void *)(a6 + 8) = v10;
  *(void *)(a6 + 16) = v11;
  *(unsigned char *)(a6 + 24) = v12;
  *(double *)(a6 + 32) = a7;
  *(double *)(a6 + 40) = a8;
  *(double *)(a6 + 48) = a9;
  *(double *)(a6 + 56) = a10;
  *(void *)(a6 + 64) = a5;
  return result;
}

double MouseEvent.radius.getter()
{
  return 0.0;
}

void MouseEvent.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

double protocol witness for SpatialEventType.globalLocation.getter in conformance MouseEvent()
{
  return *(double *)(v0 + 48);
}

void protocol witness for SpatialEventType.globalLocation.setter in conformance MouseEvent(double a1, double a2)
{
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*protocol witness for SpatialEventType.globalLocation.modify in conformance MouseEvent())(void, void)
{
  return _ViewInputs.base.modify;
}

double protocol witness for SpatialEventType.location.getter in conformance MouseEvent()
{
  return *(double *)(v0 + 32);
}

void protocol witness for SpatialEventType.location.setter in conformance MouseEvent(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*protocol witness for SpatialEventType.location.modify in conformance MouseEvent())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for ModifiersEventType.modifiers.getter in conformance MouseEvent()
{
  return *(void *)(v0 + 64);
}

uint64_t protocol witness for ModifiersEventType.modifiers.setter in conformance MouseEvent(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t (*protocol witness for ModifiersEventType.modifiers.modify in conformance MouseEvent())(void, void)
{
  return _ViewInputs.base.modify;
}

void protocol witness for EventType.phase.getter in conformance MouseEvent(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 24);
}

uint64_t protocol witness for EventType.binding.getter in conformance MouseEvent@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance MouseEvent(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance MouseEvent())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL specialized static MouseEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 24);
  double v6 = *(double *)(a1 + 32);
  double v5 = *(double *)(a1 + 40);
  double v8 = *(double *)(a1 + 48);
  double v7 = *(double *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v3)
  {
    if (v11)
    {
      BOOL result = 0;
      if (v3 != v11 || v2 != v10) {
        return result;
      }
      goto LABEL_13;
    }
    swift_retain();
LABEL_11:
    swift_release();
    return 0;
  }
  if (v11) {
    goto LABEL_11;
  }
  BOOL result = 0;
  if (v2 != v10) {
    return result;
  }
LABEL_13:
  if (v4 == *(unsigned __int8 *)(a2 + 24)
    && v6 == *(double *)(a2 + 32)
    && v5 == *(double *)(a2 + 40)
    && v8 == *(double *)(a2 + 48)
    && v7 == *(double *)(a2 + 56))
  {
    return v9 == *(void *)(a2 + 64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MouseEvent.Button and conformance MouseEvent.Button()
{
  unint64_t result = lazy protocol witness table cache variable for type MouseEvent.Button and conformance MouseEvent.Button;
  if (!lazy protocol witness table cache variable for type MouseEvent.Button and conformance MouseEvent.Button)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MouseEvent.Button and conformance MouseEvent.Button);
  }
  return result;
}

uint64_t initializeWithCopy for MouseEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MouseEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for MouseEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MouseEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MouseEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MouseEvent()
{
  return &type metadata for MouseEvent;
}

ValueMetadata *type metadata accessor for MouseEvent.Button()
{
  return &type metadata for MouseEvent.Button;
}

uint64_t static EventModifiers.capsLock.getter()
{
  return 1;
}

uint64_t static EventModifiers.numericPad.getter()
{
  return 32;
}

uint64_t static EventModifiers.function.getter()
{
  return 64;
}

uint64_t static EventModifiers._function.getter()
{
  return 64;
}

uint64_t static EventModifiers.all.getter()
{
  return 63;
}

uint64_t static EventModifiers._all.getter()
{
  return 127;
}

unint64_t lazy protocol witness table accessor for type EventModifiers and conformance EventModifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers;
  if (!lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers;
  if (!lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers;
  if (!lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers;
  if (!lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers and conformance EventModifiers);
  }
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance EventModifiers@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t dispatch thunk of ModifiersEventType.modifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ModifiersEventType.modifiers.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ModifiersEventType.modifiers.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

BOOL static EventPhase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

double protocol witness for EventType.init(_:) in conformance MouseEvent@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventType();
  if (swift_dynamicCast())
  {
    *(void *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 24) = v5;
    double result = *(double *)&v6;
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    *(void *)(a1 + 64) = v8;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_24619B550;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(void *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t EventType.init(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v13 - v6;
  type metadata accessor for EventType();
  char v8 = swift_dynamicCast();
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  if (v8)
  {
    uint64_t v10 = *(void *)(a1 - 8);
    v9(v7, 0, 1, a1);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v7, a1);
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
    v9(v7, 1, 1, a1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(a2, v11, 1, a1);
}

unint64_t type metadata accessor for EventType()
{
  unint64_t result = lazy cache variable for type metadata for EventType;
  if (!lazy cache variable for type metadata for EventType)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventType);
  }
  return result;
}

void EventPhase.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int EventPhase.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL EventPhase.isTerminal.getter()
{
  return (*v0 & 0xFE) == 2;
}

BOOL EventType.isFocusEvent.getter(uint64_t a1, uint64_t a2)
{
  void v7[3] = a1;
  void v7[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
  HitTestableEvent.init(_:)((uint64_t)v7, (uint64_t)v8);
  uint64_t v5 = v9;
  if (v9 != 1) {
    outlined consume of HitTestableEvent?(v8[0], v8[1], v9);
  }
  return v5 == 1;
}

uint64_t outlined consume of HitTestableEvent?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_release();
  }
  return result;
}

void Event.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Event.phase.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*Event.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Event.timestamp.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double Event.timestamp.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Event.timestamp.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Event.binding.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t Event.binding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*Event.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Event.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (**a3)(void *__return_ptr, void, void)@<X2>, uint64_t a4@<X8>)
{
  a3[1](&v12, a2, a3);
  char v8 = v12;
  a3[2](&v12, a2, a3);
  uint64_t v9 = v12;
  a3[3](&v12, a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  uint64_t v11 = v12;
  *(unsigned char *)a4 = v8;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v11;
  return result;
}

uint64_t Event.init(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8))(&v14, v4, v5);
  uint64_t v6 = v14;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v14, v7, v8);
  uint64_t v9 = v14;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 24))(&v14, v10, v11);
  uint64_t v12 = v14;
  *a2 = v6;
  a2[1] = v9;
  a2[2] = v12;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EventPhase and conformance EventPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type EventPhase and conformance EventPhase;
  if (!lazy protocol witness table cache variable for type EventPhase and conformance EventPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventPhase and conformance EventPhase);
  }
  return result;
}

double protocol witness for EventType.timestamp.getter in conformance Event@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance Event@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance Event(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance Event())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned char *storeEnumTagSinglePayload for EventPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A0CE1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventPhase()
{
  return &type metadata for EventPhase;
}

uint64_t dispatch thunk of EventType.phase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventType.timestamp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventType.binding.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventType.binding.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of EventType.binding.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of EventType.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t initializeBufferWithCopyOfBuffer for Event(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Event(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Event(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Event(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Event()
{
  return &type metadata for Event;
}

uint64_t protocol witness for EventType.init(_:) in conformance PhysicalButtonEvent@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventType();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v6;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t EventID.type.getter()
{
  return *(void *)v0;
}

uint64_t EventID.type.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*EventID.type.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EventID.serial.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t EventID.serial.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*EventID.serial.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EventID.init(type:serial:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void EventID.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static EventID.== infix(_:_:)(void *a1, void *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

Swift::Int EventID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EventID()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EventID()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void EventID.init<A, B>(_:subtype:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();

  *a2 = TupleTypeMetadata2;
  a2[1] = (uint64_t)a1;
}

uint64_t EventID.description.getter()
{
  uint64_t v3 = _typeName(_:qualified:)();
  v0._uint64_t countAndFlagsBits = 35;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EventID()
{
  uint64_t v3 = _typeName(_:qualified:)();
  v0._uint64_t countAndFlagsBits = 35;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

ValueMetadata *type metadata accessor for EventID()
{
  return &type metadata for EventID;
}

Swift::Int specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void **)v4;
  unint64_t v9 = *(void *)(*(void *)v4 + 16);
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (unint64_t v11 = v8[3] >> 1, v11 < v9))
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v8);
    unint64_t v11 = v8[3] >> 1;
  }
  uint64_t v12 = v8[2];
  uint64_t v13 = (void *)(v11 - v12);
  unint64_t v14 = (unint64_t)specialized Sequence._copySequenceContents(initializing:)(v24, (uint64_t)&v8[v12 + 4], v11 - v12, a1, a2, a3);
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    a2 = v8[2];
    Swift::Int_optional v26 = Text.Effect.VisualOrderCollection.Iterator.next()();
    if (v26.is_nil) {
      goto LABEL_9;
    }
    uint64_t v19 = v25;
    Swift::Int v20 = v25 + v26.value;
    if (__OFADD__(v25, v26.value))
    {
      __break(1u);
      goto LABEL_15;
    }
    while (1)
    {
      unint64_t v21 = v8[3];
      int64_t v22 = v21 >> 1;
      if ((uint64_t)(v21 >> 1) < a2 + 1)
      {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), a2 + 1, 1, v8);
        int64_t v22 = v8[3] >> 1;
        if (a2 < v22)
        {
LABEL_18:
          while (1)
          {
            v8[a2++ + 4] = v20;
            Swift::Int_optional v18 = Text.Effect.VisualOrderCollection.Iterator.next()();
            if (v18.is_nil) {
              break;
            }
            Swift::Int v20 = v19 + v18.value;
            if (__OFADD__(v19, v18.value))
            {
              __break(1u);
              return v18.value;
            }
            if (v22 == a2)
            {
              a2 = v22;
              goto LABEL_15;
            }
          }
LABEL_25:
          uint64_t v8[2] = a2;
          goto LABEL_9;
        }
      }
      else if (a2 < v22)
      {
        goto LABEL_18;
      }
LABEL_15:
      uint64_t v8[2] = a2;
    }
  }
  if (v14)
  {
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, v14);
    char v17 = (char *)(v15 + v14);
    if (v16)
    {
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v8[2] = v17;
  }
  if ((void *)v14 == v13) {
    goto LABEL_11;
  }
LABEL_9:
  v18.Swift::Int value = swift_bridgeObjectRelease();
  *(void *)uint64_t v4 = v8;
  return v18.value;
}

uint64_t specialized Array.append<A>(contentsOf:)(int64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v70 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v71 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v69 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [AnyFontModifier](0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (uint64_t)&v54 - v15;
  v17.n128_f64[0] = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v54 - v18;
  unint64_t v68 = a4;
  unint64_t v20 = a4 >> 1;
  BOOL v21 = __OFSUB__(a4 >> 1, a3);
  uint64_t v22 = (a4 >> 1) - a3;
  if (v21)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v72 = a1;
  a1 = *v4;
  int64_t v23 = *(void *)(*v4 + 16);
  uint64_t v5 = v23 + v22;
  if (__OFADD__(v23, v22))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int64_t *v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v25 = *(void *)(a1 + 24) >> 1, v25 < v5))
  {
    if (v23 <= v5) {
      int64_t v26 = v23 + v22;
    }
    else {
      int64_t v26 = v23;
    }
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v26, 1, a1);
    int64_t *v4 = a1;
    uint64_t v25 = *(void *)(a1 + 24) >> 1;
  }
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = v25 - v27;
  if (v20 == a3)
  {
    if (v22 <= 0)
    {
      uint64_t v22 = 0;
      uint64_t v5 = a3;
      goto LABEL_23;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    a1 = *(void *)(a1 + 16);
    uint64_t v36 = v71;
    double v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v71 + 56);
    uint64_t v58 = v71 + 56;
    v57(v19, 1, 1, v9, v17);
    uint64_t v28 = v67;
    outlined init with copy of UUID?((uint64_t)v19, v67);
    double v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    uint64_t v65 = v36 + 48;
    if (v64(v28, 1, v9) == 1)
    {
LABEL_31:
      outlined destroy of UUID?((uint64_t)v19);
      swift_unknownObjectRelease();
      return outlined destroy of UUID?(v28);
    }
LABEL_33:
    int v62 = (void (**)(void, void, void))(v71 + 32);
    double v56 = (void (**)(char *))(v71 + 16);
    double v55 = (void (**)(char *, uint64_t))(v71 + 8);
    uint64_t v59 = v13;
    do
    {
      outlined destroy of UUID?(v28);
      unint64_t v38 = *v4;
      unint64_t v39 = *(void *)(*v4 + 24);
      int64_t v40 = v39 >> 1;
      uint64_t v66 = v5;
      if ((uint64_t)(v39 >> 1) < a1 + 1)
      {
        unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, a1 + 1, 1, v38);
        int64_t *v4 = v38;
        int64_t v40 = *(void *)(v38 + 24) >> 1;
      }
      uint64_t v41 = *(unsigned __int8 *)(v71 + 80);
      outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v13);
      if (v64((uint64_t)v13, 1, v9) == 1)
      {
        uint64_t v5 = v66;
LABEL_40:
        outlined destroy of UUID?((uint64_t)v13);
        int64_t v37 = a1;
      }
      else
      {
        unint64_t v61 = v38 + ((v41 + 32) & ~v41);
        CGFloat v42 = *v62;
        if (a1 <= v40) {
          int64_t v43 = v40;
        }
        else {
          int64_t v43 = a1;
        }
        int64_t v63 = v43;
        double v44 = v69;
        uint64_t v5 = v66;
        __int16 v60 = v42;
        while (1)
        {
          unint64_t v48 = v44;
          CGFloat v49 = v13;
          CGFloat v50 = v44;
          double v51 = (void (*)(unint64_t, char *, uint64_t))v42;
          v42(v48, v49, v9);
          if (v63 == a1) {
            break;
          }
          outlined destroy of UUID?((uint64_t)v19);
          uint64_t v52 = *(void *)(v71 + 72);
          uint64_t v66 = a1;
          v51(v61 + v52 * a1, v50, v9);
          if (v5 == v20)
          {
            uint64_t v45 = 1;
            uint64_t v5 = v20;
            double v44 = v69;
            uint64_t v46 = v66;
            uint64_t v13 = v59;
          }
          else
          {
            uint64_t v53 = specialized ArraySlice.subscript.read(v73, v5, v72, v70, a3, v68);
            (*v56)(v19);
            ((void (*)(uint64_t *, void))v53)(v73, 0);
            BOOL v21 = __OFADD__(v5++, 1);
            uint64_t v13 = v59;
            if (v21) {
              goto LABEL_52;
            }
            uint64_t v45 = 0;
            double v44 = v69;
            uint64_t v46 = v66;
          }
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v57)(v19, v45, 1, v9);
          outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v13);
          unsigned int v47 = v64((uint64_t)v13, 1, v9);
          a1 = v46 + 1;
          CGFloat v42 = v60;
          if (v47 == 1) {
            goto LABEL_40;
          }
        }
        (*v55)(v50, v9);
        int64_t v37 = v63;
        a1 = v63;
        uint64_t v13 = v59;
      }
      *(void *)(*v4 + 16) = v37;
      uint64_t v28 = v67;
      outlined init with copy of UUID?((uint64_t)v19, v67);
    }
    while (v64(v28, 1, v9) != 1);
    goto LABEL_31;
  }
  if (v28 < v22)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v22 < 0
    || ((uint64_t v29 = *(void *)(v71 + 72),
         unint64_t v30 = a1
             + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
             + v29 * v27,
         unint64_t v31 = v70 + v29 * a3,
         v31 < v30 + v29 * v22)
      ? (BOOL v32 = v30 >= v31 + v29 * v22)
      : (BOOL v32 = 1),
        !v32))
  {
LABEL_53:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_arrayInitWithCopy();
  if (v22)
  {
    uint64_t v33 = *(void *)(a1 + 16);
    BOOL v21 = __OFADD__(v33, v22);
    uint64_t v34 = v33 + v22;
    if (v21)
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    *(void *)(a1 + 16) = v34;
  }
  uint64_t v5 = v20;
LABEL_23:
  if (v22 == v28) {
    goto LABEL_30;
  }

  return swift_unknownObjectRelease();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  char v6 = (void *)*v3;
  int64_t v7 = *(void *)(*v3 + 16);
  int64_t v8 = v7 + a3;
  if (__OFADD__(v7, a3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  int v11 = result;
  unint64_t v12 = HIDWORD(result);
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v14 = v6[3] >> 1, v14 < v8))
  {
    if (v7 <= v8) {
      int64_t v15 = v8;
    }
    else {
      int64_t v15 = v7;
    }
    char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6);
    int64_t v14 = v6[3] >> 1;
  }
  uint64_t v16 = v6[2];
  uint64_t v17 = v14 - v16;
  v37[0] = v11;
  v37[1] = v12;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v18 = v37;
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v40, (uint64_t)&v6[2 * v16 + 4], v14 - v16);
  if (result < a3) {
    goto LABEL_15;
  }
  if (result >= 1)
  {
    uint64_t v20 = v6[2];
    BOOL v21 = __OFADD__(v20, result);
    uint64_t v22 = v20 + result;
    if (v21)
    {
      __break(1u);
LABEL_24:
      v17 += v8;
      v19 += v8;
      uint64_t v26 = v33;
      goto LABEL_25;
    }
    _OWORD v6[2] = v22;
  }
  if (result != v17) {
    goto LABEL_13;
  }
LABEL_16:
  uint64_t v23 = v44;
  uint64_t v36 = v43;
  if (v44 == v43) {
    goto LABEL_13;
  }
  if (v44 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v44 <= 0x7FFFFFFF)
  {
    if (v44 < 0 || v44 >= v43) {
      goto LABEL_47;
    }
    int64_t v24 = v6[2];
    uint64_t v25 = v41;
    uint64_t v18 = v42;
    uint64_t v17 = ++v44;
    uint64_t result = swift_bridgeObjectRetain();
    if (v18)
    {
      uint64_t v26 = -v36;
      unint64_t v4 = v23 | (v25 << 32);
      int64_t v19 = v24;
      uint64_t v33 = -v36;
      while (1)
      {
        unint64_t v27 = v6[3];
        int64_t v28 = v27 >> 1;
        int64_t v35 = v19;
        if ((uint64_t)(v27 >> 1) < v19 + 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v19 + 1, 1, v6);
          int64_t v19 = v35;
          char v6 = (void *)result;
          int64_t v28 = *(void *)(result + 24) >> 1;
        }
        uint64_t v29 = v17 <= 0x80000000 ? 0x80000000 : v17;
        if (v19 < v28) {
          break;
        }
LABEL_25:
        _OWORD v6[2] = v19;
        if (!v18) {
          goto LABEL_13;
        }
      }
      int64_t v8 = 0;
      uint64_t v30 = v26 + v17;
      uint64_t v34 = v17 - v29;
      unint64_t v31 = &v6[2 * v19 + 5];
      while (1)
      {
        *(v31 - 1) = v4;
        void *v31 = v18;
        uint64_t v32 = v19 + v8 + 1;
        if (!(v30 + v8))
        {
          _OWORD v6[2] = v32;
          goto LABEL_13;
        }
        if (v17 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
        if (!(v34 + v8)) {
          goto LABEL_43;
        }
        if (v17 < 0 || v17 + v8 >= v36) {
          goto LABEL_44;
        }
        uint64_t v18 = v42;
        unint64_t v4 = (v17 + v8) | ((unint64_t)v41 << 32);
        uint64_t v44 = v17 + v8 + 1;
        uint64_t result = swift_bridgeObjectRetain();
        ++v8;
        int64_t v19 = v35;
        if (v18)
        {
          v31 += 2;
          if (v32 < v28) {
            continue;
          }
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v5 = v6;
    return result;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t static ContentOffsetAdjustmentReason.maxValue.getter()
{
  return 5;
}

uint64_t ContentOffsetAdjustmentReason.rawValue.getter()
{
  return *v0 + 1;
}

Swift::Bool __swiftcall ContentOffsetAdjustmentReason.shouldAdjust(isScrolling:isTransitioning:)(Swift::Bool isScrolling, Swift::Bool isTransitioning)
{
  unsigned int v3 = *v2;
  BOOL v4 = v3 >= 2;
  BOOL v5 = v3 == 2;
  BOOL v6 = !isScrolling;
  if (!v5) {
    BOOL v6 = 1;
  }
  if (!v4) {
    return !isTransitioning;
  }
  return v6;
}

SwiftUI::ContentOffsetAdjustmentReason_optional __swiftcall ContentOffsetAdjustmentReason.init(rawValue:)(Swift::UInt32 rawValue)
{
  unint64_t v2 = 0x302010004uLL >> (8 * rawValue);
  if (rawValue >= 5) {
    LOBYTE(v2) = 4;
  }
  *Swift::String v1 = v2;
  return (SwiftUI::ContentOffsetAdjustmentReason_optional)rawValue;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContentOffsetAdjustmentReason()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContentOffsetAdjustmentReason()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentOffsetAdjustmentReason()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0 + 1);
  return Hasher._finalize()();
}

SwiftUI::ContentOffsetAdjustmentReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContentOffsetAdjustmentReason(Swift::UInt32 *a1)
{
  return ContentOffsetAdjustmentReason.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContentOffsetAdjustmentReason(_DWORD *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t ScrollableContainer.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v22, a2, a4);
  uint64_t v10 = v23;
  outlined destroy of Scrollable?((uint64_t)v22);
  if (v10
    && (uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, a3, a5, a2, a4)) != 0)
  {
    uint64_t v13 = v11;
    char v14 = ScrollableContainer.setParentTarget(_:)(v11, v12, a2, a4);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v13);
  }
  else
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = v16 + 32;
      while (1)
      {
        outlined init with copy of AnyTrackedValue(v18, (uint64_t)v22);
        uint64_t v19 = v23;
        uint64_t v20 = v24;
        __swift_project_boxed_opaque_existential_1(v22, v23);
        if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8))(a1, a3, a5, v19, v20)) {
          break;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        v18 += 40;
        if (!--v17) {
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      char v14 = 1;
    }
    else
    {
LABEL_11:
      swift_bridgeObjectRelease();
      char v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t outlined destroy of Scrollable?(uint64_t a1)
{
  type metadata accessor for Scrollable?(0, &lazy cache variable for type metadata for Scrollable?, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ScrollableContainer.setParentTarget(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v10, a3, a4);
  if (v11)
  {
    outlined init with take of ScrollStateRequest(&v10, (uint64_t)v12);
    uint64_t v6 = v13;
    uint64_t v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    char v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)&v10);
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t ScrollableContainer.allowsContentOffsetAdjustments.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 24))(v6);
  uint64_t v2 = v7;
  if (v7)
  {
    uint64_t v3 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v6);
    char v4 = 1;
  }
  return v4 & 1;
}

uint64_t specialized ScrollableContainer.setContentTarget(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue
    || (outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v13),
        uint64_t v5 = v14,
        uint64_t v6 = v15,
        __swift_project_boxed_opaque_existential_1(v13, v14),
        char v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5, v6),
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13),
        (v7 & 1) == 0))
  {
    type metadata accessor for Scrollable?(0, &lazy cache variable for type metadata for [Scrollable], MEMORY[0x263F8D488]);
    uint64_t result = AGGraphGetWeakValue();
    if (!result) {
      return result;
    }
    uint64_t v9 = *(void *)(*(void *)result + 16);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = *(void *)result + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v10, (uint64_t)v13);
      uint64_t v11 = v14;
      uint64_t v12 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, a2, v11, v12)) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      v10 += 40;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return 1;
}

uint64_t ScrollableContainer.setContentTarget(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v16, a3, a4);
  if (v17)
  {
    outlined init with take of ScrollStateRequest(&v16, (uint64_t)v18);
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    char v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    if (v10) {
      return 1;
    }
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)&v16);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  if (!result) {
    return result;
  }
  uint64_t v12 = *(void *)(result + 16);
  if (!v12)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = result + 32;
  while (1)
  {
    outlined init with copy of AnyTrackedValue(v13, (uint64_t)v18);
    uint64_t v14 = v19;
    uint64_t v15 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(a1, a2, v14, v15)) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    v13 += 40;
    if (!--v12) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return 1;
}

uint64_t specialized ScrollableContainer.adjustContentOffset(by:reason:)(char a1, double a2, double a3)
{
  AGGraphClearUpdate();
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v15);
  }
  else
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
  }
  AGGraphSetUpdate();
  outlined init with copy of Scrollable?((uint64_t)v15, (uint64_t)v12);
  uint64_t v7 = v13;
  if (v13)
  {
    uint64_t v8 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    char v11 = a1;
    char v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double, double))(v8 + 32))(&v11, v7, v8, a2, a3);
    outlined destroy of Scrollable?((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v15);
    outlined destroy of Scrollable?((uint64_t)v12);
    char v9 = 0;
  }
  return v9 & 1;
}

Swift::Bool __swiftcall ScrollableContainer.adjustContentOffset(by:reason:)(CGSize by, SwiftUI::ContentOffsetAdjustmentReason reason)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  double height = by.height;
  double width = by.width;
  char v8 = *(unsigned char *)reason;
  AGGraphClearUpdate();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 24))(v16, v5, v4);
  AGGraphSetUpdate();
  outlined init with copy of Scrollable?((uint64_t)v16, (uint64_t)v13);
  uint64_t v9 = v14;
  if (v14)
  {
    uint64_t v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    char v12 = v8;
    LOBYTE(v9) = (*(uint64_t (**)(char *, uint64_t, uint64_t, double, double))(v10 + 32))(&v12, v9, v10, width, height);
    outlined destroy of Scrollable?((uint64_t)v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v16);
    outlined destroy of Scrollable?((uint64_t)v13);
  }
  return v9 & 1;
}

uint64_t outlined init with copy of Scrollable?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Scrollable?(0, &lazy cache variable for type metadata for Scrollable?, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ScrollableContainer.mapFirstChild<A, B>(ofType:body:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v51 = a7;
  uint64_t v56 = a3;
  double v57 = a2;
  uint64_t v55 = a1;
  uint64_t v53 = a8;
  uint64_t v54 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v52 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v15);
  unsigned int v47 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v17 - 8);
  uint64_t v50 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v47 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a5 - 8);
  double v25 = MEMORY[0x270FA5388](v24);
  unint64_t v27 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16))(v22, v9, a4, v25);
  int v29 = swift_dynamicCast();
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  if (v29)
  {
    v30(v19, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v27, v19, a5);
    unint64_t v31 = v53;
    v57(v27);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v27, a5);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v31, 0, 1, a6);
  }
  else
  {
    uint64_t v34 = v52;
    uint64_t v33 = v53;
    v30(v19, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v19, v50);
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(v51 + 16))(a4);
    if (!v35) {
      uint64_t v35 = MEMORY[0x263F8EE78];
    }
    uint64_t v36 = *(void *)(v35 + 16);
    if (v36)
    {
      uint64_t v51 = v35;
      uint64_t v37 = v35 + 32;
      uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      uint64_t v39 = (void (**)(char *, uint64_t))(v48 + 8);
      while (1)
      {
        outlined init with copy of AnyTrackedValue(v37, (uint64_t)v58);
        uint64_t v41 = v59;
        uint64_t v40 = v60;
        __swift_project_boxed_opaque_existential_1(v58, v59);
        (*(void (**)(uint64_t, void (*)(char *), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 40))(v55, v57, v56, a5, a6, v41, v40);
        if ((*v38)(v14, 1, a6) != 1) {
          break;
        }
        (*v39)(v14, v54);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
        v37 += 40;
        if (!--v36)
        {
          swift_bridgeObjectRelease();
          uint64_t v34 = v52;
          CGFloat v42 = v53;
          return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v42, 1, 1, a6);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v43 = v52;
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      uint64_t v45 = v47;
      v44(v47, v14, a6);
      uint64_t v46 = v53;
      v44(v53, v45, a6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, a6);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    }
    else
    {
      swift_bridgeObjectRelease();
      CGFloat v42 = v33;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v42, 1, 1, a6);
    }
  }
}

void static ScrollableCollection.accessibilityRole.getter(unsigned char *a1@<X8>)
{
}

{
  *a1 = 2;
}

uint64_t ScrollableCollection.visibleSubviews.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  _OWORD v3[2] = &v4;
  (*(void (**)(double (*)(double *, uint64_t), void *, uint64_t, uint64_t))(a2 + 24))(partial apply for closure #1 in ScrollableCollection.visibleSubviews.getter, v3, a1, a2);
  return v4;
}

double closure #1 in ScrollableCollection.visibleSubviews.getter(double *a1, uint64_t a2, void **a3)
{
  double v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v9 = *((void *)a1 + 5);
  uint64_t v10 = *((void *)a1 + 6);
  uint64_t v11 = *((void *)a1 + 7);
  uint64_t v12 = *((void *)a1 + 8);
  uint64_t v13 = *((void *)a1 + 9);
  double v20 = a1[10];
  uint64_t v14 = *a3;
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    *a3 = v14;
  }
  unint64_t v17 = v14[2];
  unint64_t v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
    *a3 = v14;
  }
  v14[2] = v17 + 1;
  uint64_t v18 = (double *)&v14[11 * v17];
  v18[4] = v4;
  *((void *)v18 + 5) = v5;
  *((void *)v18 + 6) = v6;
  *((void *)v18 + 7) = v7;
  *((void *)v18 + 8) = v8;
  *((void *)v18 + 9) = v9;
  *((void *)v18 + 10) = v10;
  *((void *)v18 + 11) = v11;
  *((void *)v18 + 12) = v12;
  double result = v20;
  *((void *)v18 + 13) = v13;
  v18[14] = v20;
  return result;
}

double partial apply for closure #1 in ScrollableCollection.visibleSubviews.getter(double *a1, uint64_t a2)
{
  return closure #1 in ScrollableCollection.visibleSubviews.getter(a1, a2, *(void ***)(v2 + 16));
}

uint64_t ScrollableCollectionSubview.id.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double ScrollableCollectionSubview.id.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  swift_bridgeObjectRelease();
  double result = *(double *)a1;
  *Swift::String v1 = *(void *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*ScrollableCollectionSubview.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ScrollableCollectionSubview.frame.setter(double a1, double a2, double a3, double a4)
{
  void v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
}

uint64_t (*ScrollableCollectionSubview.frame.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollableCollectionSubview.transform.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)(v1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 72);
  return swift_retain();
}

__n128 ScrollableCollectionSubview.transform.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __n128 v6 = *(__n128 *)(a1 + 1);
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  swift_release();
  *(void *)(v1 + 48) = v2;
  __n128 result = v6;
  *(__n128 *)(v1 + 56) = v6;
  *(void *)(v1 + 72) = v3;
  *(void *)(v1 + 80) = v4;
  return result;
}

uint64_t (*ScrollableCollectionSubview.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Scrollable.scrollToPosition(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)&v19);
  uint64_t v5 = v19;
  switch(v22)
  {
    case 1:
      uint64_t v10 = swift_allocObject();
      *(unsigned char *)(v10 + 16) = v5;
      char v11 = (*(uint64_t (**)(double (*)@<D0>(uint64_t@<X0>, unsigned __int8 *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(a3 + 16))(partial apply for closure #1 in Scrollable.scrollToPosition(_:), v10, a2, a3);
      goto LABEL_7;
    case 2:
      uint64_t v12 = *((void *)&v19 + 1);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v5;
      *(void *)(v13 + 24) = v12;
      char v11 = (*(uint64_t (**)(double (*)@<D0>(uint64_t@<X0>, unsigned char *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(a3 + 16))(partial apply for closure #2 in Scrollable.scrollToPosition(_:), v13, a2, a3);
      goto LABEL_7;
    case 3:
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v5;
      char v11 = (*(uint64_t (**)(double (*)@<D0>(uint64_t@<X0>, unsigned char *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(a3 + 16))(partial apply for closure #3 in Scrollable.scrollToPosition(_:), v14, a2, a3);
      goto LABEL_7;
    case 4:
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v5;
      char v11 = (*(uint64_t (**)(double (*)@<D0>(uint64_t@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(a3 + 16))(partial apply for closure #4 in Scrollable.scrollToPosition(_:), v15, a2, a3);
LABEL_7:
      char v9 = v11;
      swift_release();
      break;
    case 5:
      char v9 = 1;
      break;
    default:
      v17[1] = v20;
      v18[0] = *(_OWORD *)v21;
      v17[0] = v19;
      *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)&v21[9];
      uint64_t v6 = *((void *)&v20 + 1);
      uint64_t v7 = *(void *)v21;
      uint64_t v8 = __swift_project_boxed_opaque_existential_1(v17, *((uint64_t *)&v20 + 1));
      char v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 8))(v8, v6, v7, a2, a3);
      outlined destroy of ScrollPosition.ViewID((uint64_t)v17);
      break;
  }
  return v9 & 1;
}

double closure #1 in Scrollable.scrollToPosition(_:)@<D0>(SwiftUI::Edge edge@<W2>, uint64_t a2@<X0>, unsigned __int8 *a3@<X1>, uint64_t a4@<X8>)
{
  int v5 = *a3;
  long long v11 = *(_OWORD *)(a2 + 16);
  __C::CGRect v12 = ScrollGeometry.targetRect(edge:)(edge);
  double x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  if (v5 == 1) {
    double x = *(double *)&v11 - CGRectGetMaxX((CGRect)v12);
  }
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  *(double *)a4 = x;
  *(CGFloat *)(a4 + 8) = y;
  *(CGFloat *)(a4 + 16) = width;
  *(CGFloat *)(a4 + 24) = height;
  double result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a4 + 32) = static UnitPoint.topLeading;
  *(_WORD *)(a4 + 48) = 0;
  return result;
}

__C::CGRect __swiftcall ScrollGeometry.targetRect(edge:)(SwiftUI::Edge edge)
{
  double v2 = v1[8];
  double v3 = v1[9];
  switch(edge)
  {
    case SwiftUI_Edge_leading:
    case SwiftUI_Edge_trailing:
      if (edge < SwiftUI_Edge_bottom) {
        goto LABEL_5;
      }
      if (edge == SwiftUI_Edge_bottom) {
        double v6 = v1[6];
      }
      else {
        double v6 = v1[7];
      }
      double v5 = v1[2] + v6 - v2;
      double v4 = 0.0;
      break;
    default:
      if (edge <= SwiftUI_Edge_leading)
      {
LABEL_5:
        double v4 = -v1[4];
        double v5 = -v1[5];
      }
      else
      {
        double v4 = v1[3] + v1[6] - v3;
        double v5 = 0.0;
      }
      break;
  }
  result.size.CGFloat height = v3;
  result.size.CGFloat width = v2;
  result.origin.CGFloat y = v4;
  result.origin.double x = v5;
  return result;
}

double closure #2 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v6 = a4;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  if (*a2 == 1)
  {
    double v10 = *(double *)(a1 + 16);
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 72);
    double v6 = v10 - CGRectGetMaxX(*(CGRect *)&a4);
  }
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  *(double *)a3 = v6;
  *(double *)(a3 + 8) = a5;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9;
  double result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a3 + 32) = static UnitPoint.topLeading;
  *(_WORD *)(a3 + 48) = 0;
  return result;
}

double closure #3 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v4 = a4;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  if (*a2 == 1)
  {
    double v9 = *(double *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 72);
    double v4 = v9 - CGRectGetMaxX(*(CGRect *)&a4);
  }
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  *(double *)a3 = v4;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  double result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a3 + 32) = static UnitPoint.topLeading;
  *(_WORD *)(a3 + 48) = 0;
  return result;
}

__n128 closure #4 in Scrollable.scrollToPosition(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 64);
  if (one-time initialization token for topLeading != -1)
  {
    long long v8 = *(_OWORD *)(a1 + 64);
    swift_once();
    long long v6 = v8;
  }
  *(void *)a2 = v5;
  *(double *)(a2 + 8) = a3;
  __n128 result = (__n128)static UnitPoint.topLeading;
  *(_OWORD *)(a2 + 16) = v6;
  *(__n128 *)(a2 + 32) = result;
  *(_WORD *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_245A113A0()
{
  return swift_deallocObject();
}

double partial apply for closure #4 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = closure #4 in Scrollable.scrollToPosition(_:)(a1, a2, *(double *)(v2 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_245A113B8()
{
  return swift_deallocObject();
}

double partial apply for closure #3 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #3 in Scrollable.scrollToPosition(_:)(a1, a2, a3, *(double *)(v3 + 16));
}

uint64_t sub_245A113D0()
{
  return swift_deallocObject();
}

double partial apply for closure #2 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #2 in Scrollable.scrollToPosition(_:)(a1, a2, a3, *(double *)(v3 + 16), *(double *)(v3 + 24));
}

uint64_t sub_245A113E8()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in Scrollable.scrollToPosition(_:)@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in Scrollable.scrollToPosition(_:)((SwiftUI::Edge)*(unsigned char *)(v3 + 16), a1, a2, a3);
}

uint64_t static ScrollablePreferenceKey.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t static ScrollablePreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  return specialized Array.append<A>(contentsOf:)(v2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for Scrollable);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollablePreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for Scrollable);
}

uint64_t _GraphInputs.scrollable.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _GraphInputs.scrollable : _GraphInputs@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  int v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for _GraphInputs.scrollable : _GraphInputs(int *a1, uint64_t *a2)
{
  int v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t _GraphInputs.scrollable.setter(int a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*_GraphInputs.scrollable.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  int v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *((_DWORD *)v3 + 10) = v5;
  return _GraphInputs.scrollable.modify;
}

void _GraphInputs.scrollable.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v2 = *(_DWORD *)(*(void *)a1 + 40);
  int v3 = *(uint64_t **)(*(void *)a1 + 24);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();

  free(v1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollableKey@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static _GraphInputs.ScrollableKey.defaultValue;
  return result;
}

uint64_t _ViewInputs.scrollable.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _ViewInputs.scrollable : _ViewInputs@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  int v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void (*_ViewInputs.scrollable.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  int v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  *((_DWORD *)v3 + 10) = v5;
  return _GraphInputs.scrollable.modify;
}

uint64_t UnaryScrollablePreferenceProvider.value.getter()
{
  type metadata accessor for Scrollable?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, MEMORY[0x263F8E0F8]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461B9DC0;
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, v0 + 32);
  return v0;
}

uint64_t protocol witness for Rule.value.getter in conformance UnaryScrollablePreferenceProvider@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Scrollable?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  uint64_t Value = AGGraphGetValue();
  uint64_t result = outlined init with copy of AnyTrackedValue(Value, v2 + 32);
  *a1 = v2;
  return result;
}

unint64_t ContentOffsetAdjustmentReason.description.getter()
{
  unint64_t result = 0x74616C736E617274;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x6E656D6E67696C61;
      break;
    case 3:
      unint64_t result = 0x7465736572;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContentOffsetAdjustmentReason()
{
  unint64_t result = 0x74616C736E617274;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x6E656D6E67696C61;
      break;
    case 3:
      unint64_t result = 0x7465736572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance DynamicLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ScrollableContainer.scroll<A>(to:)(a1, a4, a2, (uint64_t)&protocol witness table for DynamicLayoutScrollable, a3);
}

uint64_t protocol witness for Scrollable.setContentTarget(_:) in conformance DynamicLayoutScrollable(uint64_t a1, uint64_t a2)
{
  return specialized ScrollableContainer.setContentTarget(_:)(a1, a2) & 1;
}

uint64_t protocol witness for Scrollable.allowsContentOffsetAdjustments.getter in conformance DynamicLayoutScrollable()
{
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v5);
    uint64_t v1 = v6;
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    char v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t protocol witness for Scrollable.adjustContentOffset(by:reason:) in conformance DynamicLayoutScrollable(char *a1, double a2, double a3)
{
  return specialized ScrollableContainer.adjustContentOffset(by:reason:)(*a1, a2, a3) & 1;
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance DynamicLayoutScrollable@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  return ScrollableContainer.mapFirstChild<A, B>(ofType:body:)(a1, a2, a3, a6, a4, a5, (uint64_t)&protocol witness table for DynamicLayoutScrollable, a7);
}

void type metadata accessor for Scrollable?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for Scrollable);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ContentOffsetAdjustmentReason and conformance ContentOffsetAdjustmentReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentOffsetAdjustmentReason and conformance ContentOffsetAdjustmentReason;
  if (!lazy protocol witness table cache variable for type ContentOffsetAdjustmentReason and conformance ContentOffsetAdjustmentReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentOffsetAdjustmentReason and conformance ContentOffsetAdjustmentReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider;
  if (!lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider);
  }
  return result;
}

uint64_t dispatch thunk of Scrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of Scrollable.setContentTarget(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of Scrollable.allowsContentOffsetAdjustments.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Scrollable.adjustContentOffset(by:reason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Scrollable.mapFirstChild<A, B>(ofType:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

unsigned char *storeEnumTagSinglePayload for ContentOffsetAdjustmentReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A12138);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t dispatch thunk of ScrollableContainer.children.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScrollableContainer.parent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ScrollableContainer.makeTarget<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ScrollableCollection.visibleCollectionViewIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScrollableCollection.forEachVisibleSubview(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ScrollableCollection.subviewClosestTo(rect:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ScrollableCollection.nextVisibleCollectionViewID(towards:from:border:ignoring:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static ScrollableCollection.hasMultipleViewsInAxis(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))(a1 & 1);
}

uint64_t dispatch thunk of ScrollableCollection.firstCollectionViewIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ScrollableCollection.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ScrollableCollection.collectionViewID(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ScrollableCollection.scroll(toCollectionViewID:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a6 + 80))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of static ScrollableCollection.accessibilityRole.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t destroy for ScrollableCollectionSubview()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for ScrollableCollectionSubview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollableCollectionSubview(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for ScrollableCollectionSubview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableCollectionSubview(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableCollectionSubview(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollableCollectionSubview()
{
  return &type metadata for ScrollableCollectionSubview;
}

ValueMetadata *type metadata accessor for UnaryScrollablePreferenceProvider()
{
  return &type metadata for UnaryScrollablePreferenceProvider;
}

void (*specialized ArraySlice.subscript.read(void (**a1)(uint64_t *a1), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(uint64_t *a1)
{
  unint64_t result = (void (*)(uint64_t *))malloc(0x38uLL);
  *a1 = result;
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of PreferenceValues.Entry(a4 + 56 * a2, (uint64_t)result);
    return ArraySlice.subscript.readspecialized ;
  }
  return result;
}

void ArraySlice.subscript.readspecialized (uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of PreferenceValues.Entry(*a1);

  free(v1);
}

void (*specialized ArraySlice.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(void *a1)
{
  uint64_t v10 = type metadata accessor for UUID();
  *a1 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  a1[1] = v11;
  unint64_t result = (void (*)(void *))malloc(*(void *)(v11 + 64));
  a1[2] = (uint64_t)result;
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void))(v12 + 16))();
    return ArraySlice.subscript.readspecialized ;
  }
  return result;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for [AnyFontModifier](0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  type metadata accessor for [AnyFontModifier](0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (name: String, value: String)()
{
  if (!lazy cache variable for type metadata for (name: String, value: String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    }
  }
}

uint64_t lazy protocol witness table accessor for type [ViewResponder] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [AnyFontModifier](255, a2, a3, MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollableKey()
{
  return &type metadata for _GraphInputs.ScrollableKey;
}

uint64_t EnvironmentValues.nearestScrollableAxes.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

void (*EnvironmentValues.nearestScrollableAxes.modify(void *a1))(uint64_t a1, char a2)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5;
  return EnvironmentValues.nearestScrollableAxes.modify;
}

void EnvironmentValues.nearestScrollableAxes.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for EnvironmentValues.nearestScrollableAxes : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    char v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7;
  return result;
}

uint64_t EnvironmentValues.allScrollableAxes.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t sub_245A12AE0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.nearestScrollableAxes : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245A12B20(unsigned __int8 *a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(*a1);
}

uint64_t sub_245A12B48@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.nearestScrollableAxes : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245A12B88(unsigned __int8 *a1)
{
  return EnvironmentValues.allScrollableAxes.setter(*a1);
}

ValueMetadata *type metadata accessor for EnvironmentValues.NearestScrollableAxesEnvironmentKey()
{
  return &type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AllScrollableAxesEnvironmentKey()
{
  return &type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey;
}

float64x2_t (*ScrollGeometry.contentOffset.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return ScrollGeometry.contentOffset.modify;
}

float64x2_t ScrollGeometry.contentOffset.modify(uint64_t a1)
{
  uint64_t v1 = *(float64x2_t **)(a1 + 16);
  float64x2_t v2 = *(float64x2_t *)a1;
  float64x2_t v3 = *v1;
  *uint64_t v1 = *(float64x2_t *)a1;
  float64x2_t result = vaddq_f64(vsubq_f64(v2, v3), v1[5]);
  v1[5] = result;
  return result;
}

uint64_t (*ScrollGeometry.contentSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ScrollGeometry.contentInsets.getter()
{
  return *(double *)(v0 + 32);
}