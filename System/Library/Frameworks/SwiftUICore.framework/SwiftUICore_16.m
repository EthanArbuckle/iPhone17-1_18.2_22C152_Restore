void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, __int32 a3, uint64_t a4)
{
  double v4;
  double v5;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double *Value;
  char v14;
  int64x2_t v15;
  int v16;
  int8x16_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int8x16_t v20;
  float v21;
  float32x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  long long v25;
  uint64_t v26;
  int64x2_t v28;
  int64x2_t v29;
  int32x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  int8x16_t v37;
  float64x2_t v38;
  float32x2_t v39;
  int8x16_t v40;
  int v41;
  void *v42;
  id v43;
  uint64_t v44;
  int v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  float64_t v51;
  float64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int8x16_t v56;
  float64x2_t v57;
  uint64_t v58;
  int64x2_t v59;
  int8x16_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int8x16_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  int CurrentAttribute;
  id v69;
  uint64_t Counter;
  uint64_t v71;
  int v72;
  uint64_t v73;
  float64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  unsigned __int8 v78;
  void (*v79)(void *, unint64_t, double);
  void *v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  char v84;
  float64x2_t v85;
  float64x2_t v86;
  long long v87;
  uint64_t v88;
  uint64_t v89;
  float32x2_t v90;
  float32x2_t v91;
  unint64_t v92;
  int32x2_t v93;
  float *v94;
  float64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  long long v98;
  int8x16_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  void *v103;
  id v104;
  uint64_t v105;
  int v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  float64_t v112;
  float64_t v113;
  uint64_t v114;
  int v115;
  int64x2_t v116;
  float64x2_t v117;
  int64x2_t v118;
  int8x16_t v119;
  uint64_t v120;
  float64x2_t v121;
  float64x2_t v122;
  long long v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  void v127[3];
  void v128[2];
  char v129;
  int *v130;
  uint64_t v131;
  char v132;
  const char *v133;
  uint64_t v134;
  char v135;
  int64x2_t v136;
  float64x2_t v137;
  uint64_t v138;
  char v139;
  _OWORD v140[2];
  double v141;
  char v142;
  float32x2x2_t v143;

  v10 = type metadata accessor for OSSignpostID();
  v120 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  *(void *)&v121.f64[0] = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  v12 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 64))
  {
    Value = (double *)AGGraphGetValue();
    if (v14) {
      v12 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 72) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 46) = 1;
    LOBYTE(v16) = *(unsigned char *)(a1 + 45);
    if (v16) {
      goto LABEL_9;
    }
LABEL_12:
    v5 = *(double *)(a1 + 32);
    v122 = *(float64x2_t *)(a1 + 16);
    v19 = *(int64x2_t *)a1;
    v119 = *(int8x16_t *)a1;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      swift_once();
      v19 = (int64x2_t)v119;
    }
    *(int32x2_t *)v15.i8 = vshrn_n_s64(v19, 0x20uLL);
    v118 = v15;
    LODWORD(v4) = v19.i32[2];
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      v22 = *(float32x2_t *)v118.i8;
      v21 = *(float *)v119.i32;
    }
    else
    {
      v136.i8[0] = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)v140, v119, *(float *)v118.i32, LODWORD(v4), *(float *)&v118.i32[1], v20);
      v22 = (float32x2_t)__PAIR64__(HIDWORD(v140[0]), DWORD1(v140[0]));
      v21 = *(float *)v140;
      LODWORD(v4) = DWORD2(v140[0]);
    }
    v23.i32[3] = 0;
    v23.i64[0] = COERCE_UNSIGNED_INT(v21 * 128.0);
    *(float *)&v23.i32[2] = *(float *)&v4 * 128.0;
    v17 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v22, (float32x2_t)0x4300000043000000), 0x20uLL), v23);
    v18 = (int64x2_t)v122;
    if (*(unsigned char *)(a4 + 57)) {
      goto LABEL_59;
    }
LABEL_18:
    v119.i32[0] = a3;
    v25 = *(_OWORD *)(a4 + 16);
    v24 = *(int64x2_t *)(a4 + 32);
    v4 = *(double *)(a4 + 48);
    LOBYTE(v26) = *(unsigned char *)(a4 + 56);
    if (v16)
    {
      if (*(unsigned char *)(a4 + 56)) {
        goto LABEL_59;
      }
    }
    else if ((*(unsigned char *)(a4 + 56) & 1) == 0 {
           && *(float *)v17.i32 == *(float *)&v25
    }
           && *(float *)&v17.i32[1] == *((float *)&v25 + 1)
           && *(float *)&v17.i32[2] == *((float *)&v25 + 2)
           && *(float *)&v17.i32[3] == *((float *)&v25 + 3))
    {
      v28 = vzip1q_s64(v18, v24);
      v29 = vzip2q_s64(v18, v24);
      v30 = vmovn_s64(vceqq_f64((float64x2_t)vzip1q_s64(v29, v28), (float64x2_t)vzip2q_s64(v29, v28)));
      if ((v30.i8[4] & 1) != 0 && (v30.i8[0] & 1) != 0 && v5 == v4) {
        goto LABEL_59;
      }
    }
    v116 = *(int64x2_t *)(a4 + 16);
    v117 = (float64x2_t)v24;
    v118 = (int64x2_t)v17;
    v122 = (float64x2_t)v18;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v31 = swift_retain();
    v32 = specialized find<A>(_:key:)(v31);
    if (v32)
    {
      v33 = *(void *)(v32 + 72);
      swift_retain();
      swift_release();
      if (v33) {
        goto LABEL_40;
      }
    }
    else
    {
      swift_release();
    }
    v34 = swift_retain();
    v35 = specialized closure #1 in PropertyList.subscript.getter(v34);
    swift_release();
    if ((v35 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_58;
      }
      swift_retain();
      v33 = a2;
      if ((v26 & 1) == 0) {
        goto LABEL_41;
      }
      goto LABEL_45;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_108;
    }
    goto LABEL_39;
  }
  if (*(unsigned char *)(a1 + 46) != 1) {
    goto LABEL_60;
  }
  LOBYTE(v16) = *(unsigned char *)(a1 + 45);
  if ((v16 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_9:
  v17 = 0uLL;
  v5 = 0.0;
  v18 = 0uLL;
  if ((*(unsigned char *)(a4 + 57) & 1) == 0) {
    goto LABEL_18;
  }
  while (1)
  {
LABEL_59:
    *(int8x16_t *)(a4 + 16) = v17;
    *(int64x2_t *)(a4 + 32) = v18;
    *(double *)(a4 + 48) = v5;
    *(unsigned char *)(a4 + 56) = v16;
    *(unsigned char *)(a4 + 57) = 0;
LABEL_60:
    v53 = *(void *)(a4 + 64);
    if (!v53) {
      return;
    }
    v54 = *(unsigned char *)(a1 + 45);
    if (v54)
    {
      swift_retain();
      v55 = 0;
      v56 = 0uLL;
      v57 = 0uLL;
    }
    else
    {
      v55 = *(void *)(a1 + 32);
      v122 = *(float64x2_t *)(a1 + 16);
      v118 = *(int64x2_t *)a1;
      v58 = one-time initialization token for legacyInterpolation;
      swift_retain();
      if (v58 != -1) {
        swift_once();
      }
      *(int32x2_t *)v59.i8 = vmovn_s64(v118);
      v119 = (int8x16_t)v59;
      *(int32x2_t *)v59.i8 = vshrn_n_s64(v118, 0x20uLL);
      v118 = v59;
      swift_beginAccess();
      if (static Color.Resolved.legacyInterpolation)
      {
        v62 = *(float32x2_t *)v118.i8;
        v61 = *(float32x2_t *)v119.i8;
      }
      else
      {
        LOBYTE(v130) = 2;
        ResolvedGradient.ColorSpace.convertIn(_:)((float *)v136.i32, v119, *(float *)v118.i32, v119.u32[1], *(float *)&v118.i32[1], v60);
        v62 = (float32x2_t)__PAIR64__(v136.u32[3], v136.u32[1]);
        v61 = (float32x2_t)__PAIR64__(v136.u32[2], v136.u32[0]);
      }
      v63 = vmul_f32(v61, (float32x2_t)0x4300000043000000);
      v64.i64[0] = v63.u32[0];
      v64.i64[1] = v63.u32[1];
      v56 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v62, (float32x2_t)0x4300000043000000), 0x20uLL), v64);
      v57 = v122;
    }
    v136 = (int64x2_t)v56;
    v137 = v57;
    v138 = v55;
    v139 = v54;
    LOBYTE(v130) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v136, v12) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      v76 = *(double *)(v53 + 88);
      v128[0] = *(void *)(v53 + 96);
      v77 = *(unsigned int *)(v53 + 148);
      v78 = *(unsigned char *)(v53 + 152);
      v79 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      v80 = static CoreGlue.shared;
      LOBYTE(v127[0]) = v78;
      v79(v128, v77 | ((unint64_t)v78 << 32), v76);

      if ((*(unsigned char *)(a1 + 45) & 1) == 0) {
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    v26 = v10;
    swift_retain();
    v10 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_82;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    v65 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_82:
      v75 = swift_release();
      if (*(void *)(a4 + 64))
      {
LABEL_83:
        specialized AnimatorState.removeListeners()(v75);
        swift_release();
      }
LABEL_84:
      *(void *)(a4 + 64) = 0;
      if ((*(unsigned char *)(a1 + 45) & 1) == 0)
      {
LABEL_85:
        if (v139) {
          goto LABEL_86;
        }
        *(void *)&v86.f64[1] = v136.i64[1];
        *((void *)&v87 + 1) = *(void *)&v137.f64[1];
        v121 = v137;
        v81 = v138;
        v88 = *(unsigned __int8 *)(a1 + 44);
        v89 = *(unsigned int *)(a1 + 40);
        v90 = (float32x2_t)vmovn_s64(v136);
        v91 = (float32x2_t)vshrn_n_s64(v136, 0x20uLL);
        if (one-time initialization token for legacyInterpolation != -1) {
          swift_once();
        }
        v82 = v89 | (v88 << 32);
        *(float32x2_t *)&v86.f64[0] = vmul_f32(v90, (float32x2_t)0x3C0000003C000000);
        *(float32x2_t *)&v87 = vmul_f32(v91, (float32x2_t)0x3C0000003C000000);
        v122 = v86;
        v123 = v87;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation)
        {
          swift_release();
          v92 = *(void *)&v122.f64[0];
          v93 = (int32x2_t)v123;
        }
        else
        {
          LOBYTE(v125) = 2;
          v94 = (float *)v127;
          v143.val[0] = *(float32x2_t *)&v122.f64[0];
          v143.val[1] = (float32x2_t)v123;
          vst2_f32(v94, v143);
          *(float *)v95.f64 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)v127);
          v120 = v96;
          v119.i64[0] = v97;
          v122 = v95;
          v123 = v98;
          swift_release();
          v92 = __PAIR64__(v120, LODWORD(v122.f64[0]));
          v93 = (int32x2_t)__PAIR64__(v119.u32[0], v123);
        }
        v84 = 0;
        v99.i64[0] = v92;
        v99.i64[1] = HIDWORD(v92);
        v83 = vorrq_s8((int8x16_t)vshll_n_s32(v93, 0x20uLL), v99);
        v85 = v121;
LABEL_93:
        *(int8x16_t *)a1 = v83;
        *(float64x2_t *)(a1 + 16) = v85;
        *(void *)(a1 + 32) = v81;
        *(_DWORD *)(a1 + 40) = v82;
        *(unsigned char *)(a1 + 44) = BYTE4(v82);
        *(unsigned char *)(a1 + 45) = v84;
        *(unsigned char *)(a1 + 46) = 1;
        return;
      }
LABEL_86:
      swift_release();
      v81 = 0;
      v82 = 0;
      v83 = 0uLL;
      v84 = 1;
      v85 = 0uLL;
      goto LABEL_93;
    }
    swift_retain();
    v66 = v65;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_2461BE2B0;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v16 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      v69 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v71 = MEMORY[0x263F8DA20];
      *(void *)(v67 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v67 + 64) = v71;
      *(void *)(v67 + 32) = Counter;
      v72 = AGGraphGetCurrentAttribute();
      if (v72 != v16)
      {
        v73 = MEMORY[0x263F8E960];
        *(void *)(v67 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v67 + 104) = v73;
        *(_DWORD *)(v67 + 72) = v72;
        *(void *)(v67 + 136) = MEMORY[0x263F8D310];
        *(void *)(v67 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v67 + 112) = 1684957515;
        *(void *)(v67 + 120) = 0xE400000000000000;
        v126 = v10;
        v127[0] = &dword_245728000;
        v124 = v67;
        v125 = _signpostLog;
        v130 = (int *)"AnimationState";
        v131 = 14;
        v132 = 2;
        v128[0] = "Animation: (%p) [%d] %{public}@ ended";
        v128[1] = 37;
        v129 = 2;
        v74 = v121.f64[0];
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(float64_t, uint64_t))(v120 + 8))(COERCE_FLOAT64_T(*(void *)&v74), v26);
        v75 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 64)) {
          goto LABEL_83;
        }
        goto LABEL_84;
      }
    }
    __break(1u);
LABEL_108:
    swift_once();
LABEL_39:
    v33 = static Animation.velocityTracking;
    swift_retain();
LABEL_40:
    if (v26)
    {
LABEL_45:
      v4 = v5;
      v36 = v16;
      v37 = (int8x16_t)v118;
      v38 = v122;
    }
    else
    {
LABEL_41:
      v36 = 0;
      if (v16)
      {
        v37 = (int8x16_t)v116;
        v38 = v117;
      }
      else
      {
        v38 = vsubq_f64(v122, v117);
        v4 = v5 - v4;
        v39 = vsub_f32((float32x2_t)vmovn_s64(v118), (float32x2_t)vmovn_s64(v116));
        v40.i64[0] = v39.u32[0];
        v40.i64[1] = v39.u32[1];
        v37 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v118, 0x20uLL), (float32x2_t)vshrn_n_s64(v116, 0x20uLL)), 0x20uLL), v40);
      }
    }
    v140[0] = v37;
    v140[1] = v38;
    v141 = v4;
    v142 = v36;
    v12 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 64)) {
      break;
    }
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v100 = swift_retain();
    v101 = specialized AnimatorState.init(animation:interval:at:in:)(v100, (uint64_t)v140, v12);
    swift_retain();
    v102 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_102;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    v103 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      v115 = v102;
      *(void *)&v117.f64[0] = v10;
      swift_retain();
      v104 = v103;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v105 = swift_allocObject();
      *(_OWORD *)(v105 + 16) = xmmword_2461BE2B0;
      v106 = AGGraphGetCurrentAttribute();
      v116.i32[0] = *MEMORY[0x263F288F8];
      if (v106 == v116.i32[0]) {
        goto LABEL_111;
      }
      v107 = (id)AGGraphGetAttributeGraph();
      v108 = AGGraphGetCounter();

      v109 = MEMORY[0x263F8DA20];
      *(void *)(v105 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v105 + 64) = v109;
      *(void *)(v105 + 32) = v108;
      v110 = AGGraphGetCurrentAttribute();
      if (v110 == v116.i32[0]) {
        goto LABEL_112;
      }
      v111 = MEMORY[0x263F8E960];
      *(void *)(v105 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v105 + 104) = v111;
      *(_DWORD *)(v105 + 72) = v110;
      *(void *)(v105 + 136) = MEMORY[0x263F8D310];
      *(void *)(v105 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v105 + 112) = 1684957515;
      *(void *)(v105 + 120) = 0xE400000000000000;
      LOBYTE(v125) = v115;
      v130 = &dword_245728000;
      v128[0] = _signpostLog;
      v136.i64[0] = (uint64_t)"AnimationState";
      v136.i64[1] = 14;
      LOBYTE(v137.f64[0]) = 2;
      v133 = "Animation: (%p) [%d] %{public}@ started";
      v134 = 39;
      v135 = 2;
      v127[0] = v105;
      v112 = v121.f64[0];
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      v113 = v117.f64[0];
      (*(void (**)(float64_t, void))(v120 + 8))(COERCE_FLOAT64_T(*(void *)&v112), *(void *)&v117.f64[0]);
      v10 = *(void *)&v113;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_102:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 64) = v101;
    if (v101)
    {
LABEL_57:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_58;
    }
LABEL_104:
    __break(1u);
LABEL_58:
    swift_release();
    v18 = (int64x2_t)v122;
    v17 = (int8x16_t)v118;
  }
  swift_retain();
  v136.i8[0] = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v33, (uint64_t)v140, v12);
  swift_retain();
  v41 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_55;
  }
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  v42 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_55:
    swift_release_n();
    goto LABEL_56;
  }
  v115 = v41;
  *(void *)&v117.f64[0] = v10;
  swift_retain();
  v43 = v42;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_2461BE2B0;
  v45 = AGGraphGetCurrentAttribute();
  v116.i32[0] = *MEMORY[0x263F288F8];
  if (v45 != v116.i32[0])
  {
    v46 = (id)AGGraphGetAttributeGraph();
    v47 = AGGraphGetCounter();

    v48 = MEMORY[0x263F8DA20];
    *(void *)(v44 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v44 + 64) = v48;
    *(void *)(v44 + 32) = v47;
    v49 = AGGraphGetCurrentAttribute();
    if (v49 == v116.i32[0]) {
      goto LABEL_110;
    }
    v50 = MEMORY[0x263F8E960];
    *(void *)(v44 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v44 + 104) = v50;
    *(_DWORD *)(v44 + 72) = v49;
    *(void *)(v44 + 136) = MEMORY[0x263F8D310];
    *(void *)(v44 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v44 + 112) = 1684957515;
    *(void *)(v44 + 120) = 0xE400000000000000;
    LOBYTE(v125) = v115;
    v130 = &dword_245728000;
    v128[0] = _signpostLog;
    v136.i64[0] = (uint64_t)"AnimationState";
    v136.i64[1] = 14;
    LOBYTE(v137.f64[0]) = 2;
    v133 = "Animation: (%p) [%d] %{public}@ updated";
    v134 = 39;
    v135 = 2;
    v127[0] = v44;
    v51 = v121.f64[0];
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    v52 = v117.f64[0];
    (*(void (**)(float64_t, void))(v120 + 8))(COERCE_FLOAT64_T(*(void *)&v51), *(void *)&v117.f64[0]);
    v10 = *(void *)&v52;
    swift_bridgeObjectRelease();
LABEL_56:
    if (*(void *)(a4 + 64)) {
      goto LABEL_57;
    }
    goto LABEL_104;
  }
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void (*a5)(void))
{
  unsigned int v98 = a3;
  v11 = (unint64_t *)type metadata accessor for OSSignpostID();
  uint64_t v95 = *(v11 - 1);
  MEMORY[0x270FA5388](v11);
  v96 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v13 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 64))
  {
    Value = (double *)AGGraphGetValue();
    if (v15) {
      double v13 = *Value;
    }
  }
  result = (_DWORD *)AGGraphGetValue();
  v17 = &unk_26B0F3000;
  if (*(_DWORD *)(a4 + 72) != *result >> 1)
  {
    a5();
    *(unsigned char *)(a1 + 48) = 1;
LABEL_11:
    float64_t v19 = *(double *)a1;
    char v20 = *(unsigned char *)(a1 + 8);
    double v21 = *(double *)(a1 + 16);
    double v22 = *(double *)(a1 + 24);
    double v23 = *(double *)(a1 + 32);
    double v5 = *(double *)(a1 + 40);
    if (one-time initialization token for v5 != -1) {
      swift_once();
    }
    unsigned int v24 = static Semantics.v5;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      v17 = (void *)&unk_26B0F3000;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_17:
        unsigned int v25 = 0;
        float64_t v26 = MEMORY[0x263F8EE78];
LABEL_20:
        double v27 = v21 * 128.0;
        double v6 = v22 * 128.0;
        float64_t v28 = *(double *)(a4 + 32);
        v97.f64[0] = v21 * 128.0;
        if (v28 == 0.0) {
          goto LABEL_49;
        }
        double v29 = *(double *)(a4 + 48);
        double v30 = *(double *)(a4 + 56);
        int v31 = *(unsigned __int8 *)(a4 + 40);
        double v32 = *(double *)(a4 + 16);
        double v33 = *(double *)(a4 + 24);
        if (v27 == v32
          && v6 == v33
          && (specialized static Array<A>.== infix(_:_:)(*(void *)&v26, *(void *)&v28) & 1) != 0
          && v25 == v31
          && v23 == v29
          && v5 == v30)
        {
          goto LABEL_49;
        }
        LODWORD(v94.f64[0]) = v25;
        swift_bridgeObjectRetain();
        AGGraphClearUpdate();
        uint64_t v34 = *(void *)AGGraphGetValue();
        swift_retain();
        AGGraphSetUpdate();
        uint64_t v35 = swift_retain();
        uint64_t v36 = specialized find<A>(_:key:)(v35);
        if (v36)
        {
          uint64_t v37 = *(void *)(v36 + 72);
          swift_retain();
          swift_release();
          if (v37) {
            goto LABEL_37;
          }
        }
        else
        {
          swift_release();
        }
        uint64_t v38 = swift_retain();
        char v39 = specialized closure #1 in PropertyList.subscript.getter(v38);
        swift_release();
        if (v39)
        {
          if (one-time initialization token for velocityTracking != -1) {
            swift_once();
          }
          uint64_t v37 = static Animation.velocityTracking;
          swift_retain();
        }
        else
        {
          if (!a2) {
            goto LABEL_85;
          }
          swift_retain();
          uint64_t v37 = a2;
        }
LABEL_37:
        float64_t v113 = v26;
        char v114 = LOBYTE(v94.f64[0]);
        v112.f64[0] = v97.f64[0] - v32;
        v112.f64[1] = v6 - v33;
        v117.f64[0] = v28;
        LOBYTE(v117.f64[1]) = v31;
        swift_bridgeObjectRetain();
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v117, -1.0);
        double v40 = v5 - v30;
        double v115 = v23 - v29;
        double v116 = v40;
        double v13 = *(double *)AGGraphGetValue();
        if (!*(void *)(a4 + 64))
        {
          float64x2_t v117 = v112;
          float64_t v118 = v113;
          char v119 = v114;
          double v120 = v23 - v29;
          double v121 = v40;
          type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
          swift_allocObject();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v81 = swift_retain();
          uint64_t v59 = specialized AnimatorState.init(animation:interval:at:in:)(v81, &v117, v13, v34, (void (*)(_OWORD *))outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, (void (*)(_OWORD *))outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>);
          swift_retain();
          LODWORD(v63) = static os_signpost_type_t.begin.getter();
          static os_signpost_type_t.event.getter();
          if ((kdebug_is_enabled() & 1) == 0) {
            goto LABEL_82;
          }
          if (one-time initialization token for _signpostLog != -1) {
            goto LABEL_88;
          }
          goto LABEL_78;
        }
        float64x2_t v117 = v112;
        float64_t v118 = v113;
        char v119 = v114;
        double v120 = v23 - v29;
        double v121 = v40;
        swift_retain();
        LOBYTE(v109) = 0;
        specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v37, &v117, v13);
        swift_retain();
        int v41 = static os_signpost_type_t.event.getter();
        static os_signpost_type_t.event.getter();
        if (kdebug_is_enabled())
        {
          if (one-time initialization token for _signpostLog != -1) {
            swift_once();
          }
          v42 = (void *)_signpostLog;
          if (OS_os_log.signpostsEnabled.getter())
          {
            int v91 = v41;
            v93 = v11;
            swift_retain();
            id v43 = v42;
            OSSignpostID.init(log:object:)();
            type metadata accessor for _ContiguousArrayStorage<CVarArg>();
            uint64_t v44 = swift_allocObject();
            *(_OWORD *)(v44 + 16) = xmmword_2461BE2B0;
            result = (_DWORD *)AGGraphGetCurrentAttribute();
            int v92 = *MEMORY[0x263F288F8];
            if (result == v92)
            {
              __break(1u);
            }
            else
            {
              id v45 = (id)AGGraphGetAttributeGraph();
              uint64_t Counter = AGGraphGetCounter();

              uint64_t v47 = MEMORY[0x263F8DA20];
              *(void *)(v44 + 56) = MEMORY[0x263F8D9D0];
              *(void *)(v44 + 64) = v47;
              *(void *)(v44 + 32) = Counter;
              result = (_DWORD *)AGGraphGetCurrentAttribute();
              if (result != v92)
              {
                uint64_t v48 = MEMORY[0x263F8E960];
                *(void *)(v44 + 96) = MEMORY[0x263F8E8F8];
                *(void *)(v44 + 104) = v48;
                *(_DWORD *)(v44 + 72) = result;
                *(void *)(v44 + 136) = MEMORY[0x263F8D310];
                *(void *)(v44 + 144) = lazy protocol witness table accessor for type String and conformance String();
                *(void *)(v44 + 112) = 0x746E6961505FLL;
                *(void *)(v44 + 120) = 0xE600000000000000;
                LOBYTE(v99) = v91;
                v100 = &dword_245728000;
                v104 = (int *)_signpostLog;
                v109 = "AnimationState";
                uint64_t v110 = 14;
                char v111 = 2;
                v106 = "Animation: (%p) [%d] %{public}@ updated";
                uint64_t v107 = 39;
                char v108 = 2;
                uint64_t v103 = v44;
                v49 = v96;
                specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
                swift_release_n();
                v50 = v49;
                v11 = v93;
                (*(void (**)(char *, unint64_t *))(v95 + 8))(v50, v93);
                swift_bridgeObjectRelease();
                goto LABEL_46;
              }
            }
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
            return result;
          }
        }
        swift_release_n();
LABEL_46:
        if (!*(void *)(a4 + 64)) {
          goto LABEL_84;
        }
        goto LABEL_47;
      }
    }
    else
    {
      v17 = (void *)&unk_26B0F3000;
      if (static Semantics.forced < v24) {
        goto LABEL_17;
      }
    }
    v112.f64[0] = v19;
    LOBYTE(v112.f64[1]) = v20;
    swift_bridgeObjectRetain();
    v122.stops._rawValue = &v112;
    ResolvedGradientVector.init(_:)(v122);
    float64_t v26 = v117.f64[0];
    unsigned int v25 = LOBYTE(v117.f64[1]);
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 48) == 1) {
    goto LABEL_11;
  }
  uint64_t v18 = *(void *)(a4 + 64);
  if (!v18) {
    return result;
  }
  while (1)
  {
    v51 = *(const char **)a1;
    char v52 = *(unsigned char *)(a1 + 8);
    float64x2_t v97 = *(float64x2_t *)(a1 + 16);
    double v23 = *(double *)(a1 + 32);
    double v53 = *(double *)(a1 + 40);
    uint64_t v54 = v17[485];
    swift_retain();
    if (v54 != -1) {
      swift_once();
    }
    float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    unsigned int v56 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      float64x2_t v94 = v55;
      swift_once();
      float64x2_t v55 = v94;
    }
    float64x2_t v97 = vmulq_f64(v97, v55);
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        goto LABEL_56;
      }
    }
    else if (static Semantics.forced < v56)
    {
LABEL_56:
      char v57 = 0;
      float64_t v58 = MEMORY[0x263F8EE78];
      goto LABEL_59;
    }
    v106 = v51;
    LOBYTE(v107) = v52;
    swift_bridgeObjectRetain();
    v123.stops._rawValue = &v106;
    ResolvedGradientVector.init(_:)(v123);
    float64_t v58 = v112.f64[0];
    char v57 = LOBYTE(v112.f64[1]);
LABEL_59:
    float64x2_t v112 = v97;
    float64_t v113 = v58;
    char v114 = v57;
    double v115 = v23;
    double v116 = v53;
    LOBYTE(v106) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v112, v98, v13) & 1) == 0) {
      break;
    }
    swift_retain();
    uint64_t v59 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_71;
    }
    v60 = v11;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    v11 = &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>;
    v61 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_71:
      uint64_t v71 = swift_release();
      if (*(void *)(a4 + 64))
      {
LABEL_72:
        specialized AnimatorState.removeListeners()(v71);
        swift_release();
      }
LABEL_73:
      *(void *)(a4 + 64) = 0;
      goto LABEL_74;
    }
    swift_retain();
    id v62 = v61;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    *(void *)&float64_t v26 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == LODWORD(v26))
    {
      __break(1u);
    }
    else
    {
      id v65 = (id)AGGraphGetAttributeGraph();
      uint64_t v66 = AGGraphGetCounter();

      uint64_t v67 = MEMORY[0x263F8DA20];
      *(void *)(v63 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v63 + 64) = v67;
      *(void *)(v63 + 32) = v66;
      int v68 = AGGraphGetCurrentAttribute();
      if (v68 != LODWORD(v26))
      {
        uint64_t v69 = MEMORY[0x263F8E960];
        *(void *)(v63 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v63 + 104) = v69;
        *(_DWORD *)(v63 + 72) = v68;
        *(void *)(v63 + 136) = MEMORY[0x263F8D310];
        *(void *)(v63 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v63 + 112) = 0x746E6961505FLL;
        *(void *)(v63 + 120) = 0xE600000000000000;
        char v105 = v59;
        v104 = &dword_245728000;
        uint64_t v103 = _signpostLog;
        v106 = "AnimationState";
        uint64_t v107 = 14;
        char v108 = 2;
        v100 = (int *)"Animation: (%p) [%d] %{public}@ ended";
        uint64_t v101 = 37;
        char v102 = 2;
        uint64_t v99 = v63;
        v70 = v96;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, unint64_t *))(v95 + 8))(v70, v60);
        uint64_t v71 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 64)) {
          goto LABEL_72;
        }
        goto LABEL_73;
      }
    }
    __break(1u);
LABEL_88:
    swift_once();
LABEL_78:
    v82 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v91 = v63;
      v93 = v11;
      swift_retain();
      id v83 = v82;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v84 = swift_allocObject();
      *(_OWORD *)(v84 + 16) = xmmword_2461BE2B0;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      int v92 = *MEMORY[0x263F288F8];
      if (result == v92) {
        goto LABEL_91;
      }
      id v85 = (id)AGGraphGetAttributeGraph();
      uint64_t v86 = AGGraphGetCounter();

      uint64_t v87 = MEMORY[0x263F8DA20];
      *(void *)(v84 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v84 + 64) = v87;
      *(void *)(v84 + 32) = v86;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      if (result == v92) {
        goto LABEL_92;
      }
      uint64_t v88 = MEMORY[0x263F8E960];
      *(void *)(v84 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v84 + 104) = v88;
      *(_DWORD *)(v84 + 72) = result;
      *(void *)(v84 + 136) = MEMORY[0x263F8D310];
      *(void *)(v84 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v84 + 112) = 0x746E6961505FLL;
      *(void *)(v84 + 120) = 0xE600000000000000;
      LOBYTE(v99) = v91;
      v100 = &dword_245728000;
      v104 = (int *)_signpostLog;
      v109 = "AnimationState";
      uint64_t v110 = 14;
      char v111 = 2;
      v106 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v107 = 39;
      char v108 = 2;
      uint64_t v103 = v84;
      v89 = v96;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      v90 = v89;
      v11 = v93;
      (*(void (**)(char *, unint64_t *))(v95 + 8))(v90, v93);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_82:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 64) = v59;
    if (v59)
    {
LABEL_47:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_84:
      __break(1u);
LABEL_85:
      swift_release();
    }
    swift_bridgeObjectRelease();
    v17 = &unk_26B0F3000;
    unsigned int v25 = LODWORD(v94.f64[0]);
LABEL_49:
    result = (_DWORD *)swift_bridgeObjectRelease();
    *(float64_t *)(a4 + 16) = v97.f64[0];
    *(double *)(a4 + 24) = v6;
    *(float64_t *)(a4 + 32) = v26;
    *(void *)(a4 + 40) = v25;
    *(double *)(a4 + 48) = v23;
    *(double *)(a4 + 56) = v5;
    uint64_t v18 = *(void *)(a4 + 64);
    if (!v18) {
      return result;
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v72 = *(double *)(v18 + 88);
  v100 = *(int **)(v18 + 96);
  uint64_t v73 = *(unsigned int *)(v18 + 152);
  unsigned __int8 v74 = *(unsigned char *)(v18 + 156);
  v75 = *(void (**)(int **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                + 0x58);
  v76 = static CoreGlue.shared;
  LOBYTE(v104) = v74;
  v75(&v100, v73 | ((unint64_t)v74 << 32), v72);

LABEL_74:
  v77 = *(int **)&v113;
  char v78 = v114;
  double v79 = v115;
  double v80 = v116;
  *(float64x2_t *)(a1 + 16) = vmulq_f64(v112, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v100 = v77;
  LOBYTE(v101) = v78;
  swift_bridgeObjectRetain();
  ResolvedGradient.animatableData.setter((uint64_t *)&v100);
  swift_bridgeObjectRelease();
  result = (_DWORD *)swift_release();
  *(double *)(a1 + 32) = v79;
  *(double *)(a1 + 40) = v80;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(float32x4_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v17 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 40))
  {
    Value = (double *)AGGraphGetValue();
    if (v19) {
      double v17 = *Value;
    }
  }
  double v21 = (double *)&unk_26B0EB000;
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    a1[1].i8[8] = 1;
    goto LABEL_11;
  }
  if (a1[1].i8[8] == 1)
  {
LABEL_11:
    float v23 = a1->f32[0];
    float v24 = a1->f32[1];
    float v4 = a1->f32[2];
    float v5 = a1->f32[3];
    v20.i32[0] = a1[1].i32[0];
    float32x4_t v103 = (float32x4_t)v20;
    v20.i32[0] = a1[1].i32[1];
    int8x16_t v102 = v20;
    if (one-time initialization token for legacyInterpolation != -1) {
      swift_once();
    }
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v116[0] = 2;
      *(float *)v25.i32 = v23;
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)&v117, v25, v24, LODWORD(v4), v5, v28);
      float v24 = *((float *)&v117 + 1);
      float v23 = *(float *)&v117;
      float v4 = v118;
      float v5 = v119;
    }
    *(float *)&long long v26 = v23 * 128.0;
    *(float *)&long long v27 = v24 * 128.0;
    float v29 = v4 * 128.0;
    float v30 = v5 * 128.0;
    if (*(unsigned char *)(a4 + 36)) {
      goto LABEL_43;
    }
    float v5 = *(float *)(a4 + 12);
    float v6 = *(float *)(a4 + 16);
    LODWORD(v7) = *(_DWORD *)(a4 + 20);
    float v8 = *(float *)(a4 + 24);
    LODWORD(v31) = *(_DWORD *)(a4 + 28);
    float v4 = *(float *)(a4 + 32);
    if (v103.f32[0] == v5
      && *(float *)v102.i32 == v6
      && *(float *)&v26 == *(float *)&v7
      && *(float *)&v27 == v8
      && v29 == *(float *)&v31
      && v30 == v4)
    {
      goto LABEL_43;
    }
    long long v97 = v26;
    long long v98 = v27;
    float v99 = v29;
    float v100 = v30;
    uint64_t v101 = v14;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v32 = swift_retain();
    uint64_t v33 = specialized find<A>(_:key:)(v32);
    if (v33)
    {
      uint64_t v34 = *(void *)(v33 + 72);
      swift_retain();
      swift_release();
      if (v34) {
        goto LABEL_31;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v35 = swift_retain();
    char v36 = specialized closure #1 in PropertyList.subscript.getter(v35);
    swift_release();
    if ((v36 & 1) == 0)
    {
      double v21 = (double *)&unk_26B0EB000;
      if (!a2) {
        goto LABEL_79;
      }
      swift_retain();
      uint64_t v34 = a2;
      goto LABEL_31;
    }
    double v21 = (double *)&unk_26B0EB000;
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_82;
    }
    goto LABEL_28;
  }
  double v22 = (double *)&unk_26B0EB000;
  double v21 = *(double **)(a4 + 40);
  if (!v21) {
    return;
  }
  while (1)
  {
    float32x4_t v103 = *a1;
    uint64_t v31 = a1[1].i64[0];
    uint64_t v51 = *((void *)v22 + 229);
    swift_retain();
    if (v51 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x4_t v53 = v103;
    }
    else
    {
      LOBYTE(v110) = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)v116, (int8x16_t)v103, v103.f32[1], v103.u32[2], v103.f32[3], v52);
      float32x4_t v53 = *(float32x4_t *)v116;
    }
    v54.i64[0] = 0x4300000043000000;
    v54.i64[1] = 0x4300000043000000;
    *(void *)double v116 = v31;
    *(float32x4_t *)&v116[8] = vmulq_f32(v53, v54);
    LOBYTE(v110) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)v116, a3, v17) & 1) == 0) {
      break;
    }
    swift_retain();
    a3 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_61;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    float64x2_t v55 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_61:
      uint64_t v64 = swift_release();
      if (*(void *)(a4 + 40))
      {
LABEL_62:
        specialized AnimatorState.removeListeners()(v64);
        swift_release();
      }
LABEL_63:
      *(void *)(a4 + 40) = 0;
      goto LABEL_64;
    }
    uint64_t v101 = v14;
    v103.i64[0] = v13;
    swift_retain();
    id v56 = v55;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v13 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v13)
    {
      __break(1u);
    }
    else
    {
      id v59 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v61 = MEMORY[0x263F8DA20];
      *(void *)(v57 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v57 + 64) = v61;
      *(void *)(v57 + 32) = Counter;
      int v62 = AGGraphGetCurrentAttribute();
      if (v62 != v13)
      {
        uint64_t v63 = MEMORY[0x263F8E960];
        *(void *)(v57 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v57 + 104) = v63;
        *(_DWORD *)(v57 + 72) = v62;
        *(void *)(v57 + 136) = MEMORY[0x263F8D310];
        *(void *)(v57 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v57 + 112) = 0x65766C6F7365525FLL;
        *(void *)(v57 + 120) = 0xE900000000000064;
        char v109 = a3;
        char v108 = &dword_245728000;
        uint64_t v107 = _signpostLog;
        uint64_t v110 = (int *)"AnimationState";
        uint64_t v111 = 14;
        char v112 = 2;
        v105.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ ended";
        v105.i64[1] = 37;
        char v106 = 2;
        uint64_t v104 = v57;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v101 + 8))(v16, v103.i64[0]);
        uint64_t v64 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 40)) {
          goto LABEL_62;
        }
        goto LABEL_63;
      }
    }
    __break(1u);
LABEL_82:
    swift_once();
LABEL_28:
    uint64_t v34 = static Animation.velocityTracking;
    swift_retain();
LABEL_31:
    float v37 = v103.f32[0] - v5;
    float v38 = *(float *)v102.i32 - v6;
    float v6 = *(float *)&v97 - *(float *)&v7;
    float v5 = *(float *)&v98 - v8;
    float v39 = v99 - *(float *)&v31;
    float v4 = v100 - v4;
    double v7 = *(double *)AGGraphGetValue();
    uint64_t v40 = *(void *)(a4 + 40);
    uint64_t v96 = v34;
    if (v40)
    {
      unint64_t v117 = __PAIR64__(LODWORD(v38), LODWORD(v37));
      float v118 = v6;
      float v119 = v5;
      float v120 = v39;
      float v121 = v4;
      swift_retain();
      v116[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v34, (float32x2_t *)&v117, v7);
      swift_retain();
      int v41 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      double v17 = v7;
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_39;
      }
      int v95 = v41;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      v42 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        id v43 = v42;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v44 = swift_allocObject();
        *(_OWORD *)(v44 + 16) = xmmword_2461BE2B0;
        int v45 = AGGraphGetCurrentAttribute();
        int v94 = *MEMORY[0x263F288F8];
        if (v45 == v94)
        {
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
          return;
        }
        id v46 = (id)AGGraphGetAttributeGraph();
        uint64_t v93 = AGGraphGetCounter();

        uint64_t v47 = MEMORY[0x263F8DA20];
        *(void *)(v44 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v44 + 64) = v47;
        *(void *)(v44 + 32) = v93;
        int v48 = AGGraphGetCurrentAttribute();
        if (v48 == v94) {
          goto LABEL_84;
        }
        uint64_t v49 = MEMORY[0x263F8E960];
        *(void *)(v44 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v44 + 104) = v49;
        *(_DWORD *)(v44 + 72) = v48;
        *(void *)(v44 + 136) = MEMORY[0x263F8D310];
        *(void *)(v44 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v44 + 112) = 0x65766C6F7365525FLL;
        *(void *)(v44 + 120) = 0xE900000000000064;
        LOBYTE(v107) = v95;
        uint64_t v110 = &dword_245728000;
        v105.i64[0] = _signpostLog;
        *(void *)double v116 = "AnimationState";
        *(void *)&v116[8] = 14;
        v116[16] = 2;
        float64_t v113 = "Animation: (%p) [%d] %{public}@ updated";
        uint64_t v114 = 39;
        char v115 = 2;
        char v108 = (int *)v44;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v101 + 8))(v16, v13);
        swift_bridgeObjectRelease();
        double v21 = (double *)&unk_26B0EB000;
      }
      else
      {
LABEL_39:
        swift_release_n();
      }
      if (*(void *)(a4 + 40))
      {
LABEL_41:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v14 = v101;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v117 = __PAIR64__(LODWORD(v38), LODWORD(v37));
      float v118 = v6;
      float v119 = v5;
      float v120 = v39;
      float v121 = v4;
      type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      uint64_t v81 = swift_retain();
      uint64_t v82 = specialized AnimatorState.init(animation:interval:at:in:)(v81, (uint64_t)&v117, v7);
      swift_retain();
      int v83 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      double v17 = v7;
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_76;
      }
      int v95 = v83;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v84 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        id v85 = v84;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v86 = swift_allocObject();
        *(_OWORD *)(v86 + 16) = xmmword_2461BE2B0;
        int v87 = AGGraphGetCurrentAttribute();
        int v94 = *MEMORY[0x263F288F8];
        if (v87 == v94) {
          goto LABEL_85;
        }
        id v88 = (id)AGGraphGetAttributeGraph();
        uint64_t v93 = AGGraphGetCounter();

        uint64_t v89 = MEMORY[0x263F8DA20];
        *(void *)(v86 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v86 + 64) = v89;
        *(void *)(v86 + 32) = v93;
        int v90 = AGGraphGetCurrentAttribute();
        if (v90 == v94) {
          goto LABEL_86;
        }
        uint64_t v91 = MEMORY[0x263F8E960];
        *(void *)(v86 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v86 + 104) = v91;
        *(_DWORD *)(v86 + 72) = v90;
        *(void *)(v86 + 136) = MEMORY[0x263F8D310];
        *(void *)(v86 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v86 + 112) = 0x65766C6F7365525FLL;
        *(void *)(v86 + 120) = 0xE900000000000064;
        LOBYTE(v107) = v95;
        uint64_t v110 = &dword_245728000;
        v105.i64[0] = _signpostLog;
        *(void *)double v116 = "AnimationState";
        *(void *)&v116[8] = 14;
        v116[16] = 2;
        float64_t v113 = "Animation: (%p) [%d] %{public}@ started";
        uint64_t v114 = 39;
        char v115 = 2;
        char v108 = (int *)v86;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v101 + 8))(v16, v13);
        swift_bridgeObjectRelease();
        double v21 = (double *)&unk_26B0EB000;
      }
      else
      {
LABEL_76:
        swift_release();
      }
      swift_release();
      *(void *)(a4 + 40) = v82;
      if (v82) {
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_79:
    swift_release();
    uint64_t v14 = v101;
LABEL_42:
    float v30 = v100;
    float v29 = v99;
    LODWORD(v27) = v98;
    LODWORD(v26) = v97;
LABEL_43:
    double v22 = v21;
    v50.i64[0] = v103.u32[0];
    v50.i64[1] = v26;
    *(int8x16_t *)(a4 + 12) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v27, v102.u32[0]), 0x20uLL), v50);
    *(void *)(a4 + 28) = LODWORD(v29) | ((unint64_t)LODWORD(v30) << 32);
    *(unsigned char *)(a4 + 36) = 0;
    double v21 = *(double **)(a4 + 40);
    if (!v21) {
      return;
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v65 = v21[8];
  v105.i64[0] = (uint64_t)v21[9];
  uint64_t v66 = *((unsigned int *)v21 + 26);
  unsigned __int8 v67 = *((unsigned char *)v21 + 108);
  int v68 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                       + 0x58);
  uint64_t v69 = static CoreGlue.shared;
  LOBYTE(v108) = v67;
  v68(&v105, v66 | ((unint64_t)v67 << 32), v65);

LABEL_64:
  float32x4_t v70 = *(float32x4_t *)&v116[8];
  a1[1].i64[0] = *(void *)v116;
  v71.i64[0] = 0x3C0000003C000000;
  v71.i64[1] = 0x3C0000003C000000;
  float32x4_t v72 = vmulq_f32(v70, v71);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    float32x4_t v103 = v72;
    swift_release();
    __int32 v74 = v103.i32[1];
    __int32 v73 = v103.i32[0];
    __int32 v76 = v103.i32[3];
    __int32 v75 = v103.i32[2];
  }
  else
  {
    LOBYTE(v108) = 2;
    float32x4_t v105 = v72;
    *(float *)&uint64_t v77 = ResolvedGradient.ColorSpace.convertOut(_:)(v105.f32);
    v103.i64[0] = v77;
    __int32 v74 = v78;
    __int32 v75 = v79;
    __int32 v76 = v80;
    swift_release();
    __int32 v73 = v103.i32[0];
  }
  a1->i32[0] = v73;
  a1->i32[1] = v74;
  a1->i32[2] = v75;
  a1->i32[3] = v76;
  a1[1].i8[8] = 1;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v17 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if (v19) {
      double v17 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    a1[1].i8[0] = 1;
LABEL_11:
    float v21 = a1->f32[2];
    float v22 = a1->f32[3];
    float v7 = a1->f32[0] * 128.0;
    float v9 = a1->f32[1] * 128.0;
    float v23 = v21 * 128.0;
    float v24 = v22 * 128.0;
    if (*(unsigned char *)(a4 + 28)) {
      goto LABEL_43;
    }
    float v4 = *(float *)(a4 + 12);
    float v6 = *(float *)(a4 + 16);
    float v8 = *(float *)(a4 + 20);
    float v5 = *(float *)(a4 + 24);
    BOOL v25 = v7 == v4 && v9 == v6;
    BOOL v26 = v25 && v23 == v8;
    if (v26 && v24 == v5) {
      goto LABEL_43;
    }
    float v79 = v21 * 128.0;
    float v80 = v22 * 128.0;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v28 = swift_retain();
    uint64_t v29 = specialized find<A>(_:key:)(v28);
    if (v29)
    {
      uint64_t v30 = *(void *)(v29 + 72);
      swift_retain();
      swift_release();
      if (v30) {
        goto LABEL_31;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v31 = swift_retain();
    char v32 = specialized closure #1 in PropertyList.subscript.getter(v31);
    swift_release();
    if ((v32 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_42;
      }
      swift_retain();
      uint64_t v30 = a2;
      goto LABEL_31;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_74;
    }
    goto LABEL_28;
  }
  if (a1[1].i8[0] == 1) {
    goto LABEL_11;
  }
  uint64_t v20 = *(void *)(a4 + 32);
  if (!v20) {
    return;
  }
  while (1)
  {
    v45.i64[0] = 0x4300000043000000;
    v45.i64[1] = 0x4300000043000000;
    v91[0] = vmulq_f32(*a1, v45);
    swift_retain();
    LOBYTE(v88) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v91, v17) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v56 = *(double *)(v20 + 56);
      uint64_t v82 = *(const char **)(v20 + 64);
      uint64_t v57 = *(unsigned int *)(v20 + 88);
      unsigned __int8 v58 = *(unsigned char *)(v20 + 92);
      id v59 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      v60 = static CoreGlue.shared;
      LOBYTE(v86) = v58;
      v59(&v82, v57 | ((unint64_t)v58 << 32), v56);
      swift_release();

      goto LABEL_59;
    }
    swift_retain();
    char v46 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_56;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v47 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_56:
      swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_57:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_58:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_59:
      v61.i64[0] = 0x3C0000003C000000;
      v61.i64[1] = 0x3C0000003C000000;
      *a1 = vmulq_f32(v91[0], v61);
      a1[1].i8[0] = 1;
      return;
    }
    uint64_t v78 = v14;
    swift_retain();
    id v48 = v47;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v14 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v14)
    {
      __break(1u);
    }
    else
    {
      id v51 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v53 = MEMORY[0x263F8DA20];
      *(void *)(v49 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v49 + 64) = v53;
      *(void *)(v49 + 32) = Counter;
      int v54 = AGGraphGetCurrentAttribute();
      if (v54 != v14)
      {
        uint64_t v55 = MEMORY[0x263F8E960];
        *(void *)(v49 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v49 + 104) = v55;
        *(_DWORD *)(v49 + 72) = v54;
        *(void *)(v49 + 136) = MEMORY[0x263F8D310];
        *(void *)(v49 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v49 + 112) = 0x6465766C6F736552;
        *(void *)(v49 + 120) = 0xEF746E6172626956;
        char v87 = v46;
        uint64_t v85 = _signpostLog;
        uint64_t v86 = &dword_245728000;
        id v88 = "AnimationState";
        uint64_t v89 = 14;
        char v90 = 2;
        uint64_t v82 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v83 = 37;
        char v84 = 2;
        uint64_t v81 = v49;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v16, v13);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_57;
        }
        goto LABEL_58;
      }
    }
    __break(1u);
LABEL_74:
    swift_once();
LABEL_28:
    uint64_t v30 = static Animation.velocityTracking;
    swift_retain();
LABEL_31:
    float v33 = v7 - v4;
    float v6 = v9 - v6;
    float v4 = v79 - v8;
    float v5 = v80 - v5;
    double v17 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v62 = swift_retain();
    uint64_t v63 = specialized AnimatorState.init(animation:interval:at:in:)(v62, v33, v6, v4, v5, v17);
    swift_retain();
    int v64 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_68;
    }
    int v76 = v64;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    double v65 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v77 = v30;
      uint64_t v78 = v14;
      swift_retain();
      id v66 = v65;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = xmmword_2461BE2B0;
      int v68 = AGGraphGetCurrentAttribute();
      int v75 = *MEMORY[0x263F288F8];
      if (v68 == v75) {
        goto LABEL_77;
      }
      id v69 = (id)AGGraphGetAttributeGraph();
      uint64_t v70 = AGGraphGetCounter();

      uint64_t v71 = MEMORY[0x263F8DA20];
      *(void *)(v67 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v67 + 64) = v71;
      *(void *)(v67 + 32) = v70;
      int v72 = AGGraphGetCurrentAttribute();
      if (v72 == v75) {
        goto LABEL_78;
      }
      uint64_t v73 = MEMORY[0x263F8E960];
      *(void *)(v67 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v67 + 104) = v73;
      *(_DWORD *)(v67 + 72) = v72;
      *(void *)(v67 + 136) = MEMORY[0x263F8D310];
      *(void *)(v67 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v67 + 112) = 0x6465766C6F736552;
      *(void *)(v67 + 120) = 0xEF746E6172626956;
      LOBYTE(v81) = v76;
      v91[0].i64[0] = (uint64_t)&dword_245728000;
      uint64_t v85 = v67;
      uint64_t v86 = (int *)_signpostLog;
      id v88 = "AnimationState";
      uint64_t v89 = 14;
      char v90 = 2;
      uint64_t v82 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v83 = 39;
      char v84 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v74 = v78;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v16, v13);
      uint64_t v14 = v74;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_68:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v63;
    if (v63)
    {
LABEL_41:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_42;
    }
LABEL_70:
    __break(1u);
LABEL_42:
    swift_release();
    float v24 = v80;
    float v23 = v79;
LABEL_43:
    *(void *)(a4 + 12) = LODWORD(v7) | ((unint64_t)LODWORD(v9) << 32);
    *(void *)(a4 + 20) = LODWORD(v23) | ((unint64_t)LODWORD(v24) << 32);
    *(unsigned char *)(a4 + 28) = 0;
    uint64_t v20 = *(void *)(a4 + 32);
    if (!v20) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v88) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v30, v33, v6, v4, v5, v17);
  swift_retain();
  int v34 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_39;
  }
  int v76 = v34;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v35 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_39:
    swift_release_n();
    goto LABEL_40;
  }
  uint64_t v77 = v30;
  uint64_t v78 = v14;
  swift_retain();
  id v36 = v35;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_2461BE2B0;
  int v38 = AGGraphGetCurrentAttribute();
  int v75 = *MEMORY[0x263F288F8];
  if (v38 != v75)
  {
    id v39 = (id)AGGraphGetAttributeGraph();
    uint64_t v40 = AGGraphGetCounter();

    uint64_t v41 = MEMORY[0x263F8DA20];
    *(void *)(v37 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v37 + 64) = v41;
    *(void *)(v37 + 32) = v40;
    int v42 = AGGraphGetCurrentAttribute();
    if (v42 == v75) {
      goto LABEL_76;
    }
    uint64_t v43 = MEMORY[0x263F8E960];
    *(void *)(v37 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v37 + 104) = v43;
    *(_DWORD *)(v37 + 72) = v42;
    *(void *)(v37 + 136) = MEMORY[0x263F8D310];
    *(void *)(v37 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v37 + 112) = 0x6465766C6F736552;
    *(void *)(v37 + 120) = 0xEF746E6172626956;
    LOBYTE(v81) = v76;
    v91[0].i64[0] = (uint64_t)&dword_245728000;
    uint64_t v85 = v37;
    uint64_t v86 = (int *)_signpostLog;
    id v88 = "AnimationState";
    uint64_t v89 = 14;
    char v90 = 2;
    uint64_t v82 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v83 = 39;
    char v84 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v44 = v78;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v16, v13);
    uint64_t v14 = v44;
    swift_bridgeObjectRelease();
LABEL_40:
    if (*(void *)(a4 + 32)) {
      goto LABEL_41;
    }
    goto LABEL_70;
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v15 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if (v17) {
      double v15 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(unsigned char *)(a1 + 8) = 1;
LABEL_11:
    double v6 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    double v5 = *(double *)(a4 + 16);
    if (v6 == v5) {
      goto LABEL_34;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v19 = swift_retain();
    uint64_t v20 = specialized find<A>(_:key:)(v19);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 72);
      swift_retain();
      swift_release();
      if (v21) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v22 = swift_retain();
    char v23 = specialized closure #1 in PropertyList.subscript.getter(v22);
    swift_release();
    if ((v23 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v21 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    goto LABEL_11;
  }
  uint64_t v18 = *(void *)(a4 + 32);
  if (!v18) {
    return;
  }
  while (1)
  {
    float v79 = *(int **)a1;
    swift_retain();
    LOBYTE(v76) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v79, v15) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v46 = *(double *)(v18 + 48);
      uint64_t v70 = *(const char **)(v18 + 56);
      uint64_t v47 = *(unsigned int *)(v18 + 72);
      unsigned __int8 v48 = *(unsigned char *)(v18 + 76);
      uint64_t v49 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      int8x16_t v50 = static CoreGlue.shared;
      LOBYTE(v74) = v48;
      v49(&v70, v47 | ((unint64_t)v48 << 32), v46);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    char v35 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v36 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      uint64_t v45 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v45);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v79;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    uint64_t v68 = v12;
    swift_retain();
    id v37 = v36;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v12 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v12)
    {
      __break(1u);
    }
    else
    {
      id v40 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v42 = MEMORY[0x263F8DA20];
      *(void *)(v38 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v38 + 64) = v42;
      *(void *)(v38 + 32) = Counter;
      int v43 = AGGraphGetCurrentAttribute();
      if (v43 != v12)
      {
        uint64_t v44 = MEMORY[0x263F8E960];
        *(void *)(v38 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v38 + 104) = v44;
        *(_DWORD *)(v38 + 72) = v43;
        *(void *)(v38 + 136) = MEMORY[0x263F8D310];
        *(void *)(v38 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v38 + 112) = 0x7465736E495FLL;
        *(void *)(v38 + 120) = 0xE600000000000000;
        char v75 = v35;
        uint64_t v73 = _signpostLog;
        uint64_t v74 = &dword_245728000;
        int v76 = "AnimationState";
        uint64_t v77 = 14;
        char v78 = 2;
        uint64_t v70 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v71 = 37;
        char v72 = 2;
        uint64_t v69 = v38;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v11);
        uint64_t v45 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v21 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    double v5 = v6 - v5;
    double v15 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v51 = swift_retain();
    uint64_t v52 = specialized AnimatorState.init(animation:interval:at:in:)(v51, v5, v15);
    swift_retain();
    int v53 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    int v66 = v53;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int v54 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v67 = v21;
      uint64_t v68 = v12;
      swift_retain();
      id v55 = v54;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = xmmword_2461BE2B0;
      int v57 = AGGraphGetCurrentAttribute();
      int v65 = *MEMORY[0x263F288F8];
      if (v57 == v65) {
        goto LABEL_68;
      }
      id v58 = (id)AGGraphGetAttributeGraph();
      uint64_t v59 = AGGraphGetCounter();

      uint64_t v60 = MEMORY[0x263F8DA20];
      *(void *)(v56 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v56 + 64) = v60;
      *(void *)(v56 + 32) = v59;
      int v61 = AGGraphGetCurrentAttribute();
      if (v61 == v65) {
        goto LABEL_69;
      }
      uint64_t v62 = MEMORY[0x263F8E960];
      *(void *)(v56 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v56 + 104) = v62;
      *(_DWORD *)(v56 + 72) = v61;
      *(void *)(v56 + 136) = MEMORY[0x263F8D310];
      *(void *)(v56 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v56 + 112) = 0x7465736E495FLL;
      *(void *)(v56 + 120) = 0xE600000000000000;
      LOBYTE(v69) = v66;
      float v79 = &dword_245728000;
      uint64_t v73 = v56;
      uint64_t v74 = (int *)_signpostLog;
      int v76 = "AnimationState";
      uint64_t v77 = 14;
      char v78 = 2;
      uint64_t v70 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v71 = 39;
      char v72 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v63 = v68;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v11);
      uint64_t v12 = v63;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v52;
    if (v52)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v6;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v18 = *(void *)(a4 + 32);
    if (!v18) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v76) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v21, v5, v15);
  swift_retain();
  int v24 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  int v66 = v24;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  BOOL v25 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v67 = v21;
  uint64_t v68 = v12;
  swift_retain();
  id v26 = v25;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2461BE2B0;
  int v28 = AGGraphGetCurrentAttribute();
  int v65 = *MEMORY[0x263F288F8];
  if (v28 != v65)
  {
    id v29 = (id)AGGraphGetAttributeGraph();
    uint64_t v30 = AGGraphGetCounter();

    uint64_t v31 = MEMORY[0x263F8DA20];
    *(void *)(v27 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v27 + 64) = v31;
    *(void *)(v27 + 32) = v30;
    int v32 = AGGraphGetCurrentAttribute();
    if (v32 == v65) {
      goto LABEL_67;
    }
    uint64_t v33 = MEMORY[0x263F8E960];
    *(void *)(v27 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v27 + 104) = v33;
    *(_DWORD *)(v27 + 72) = v32;
    *(void *)(v27 + 136) = MEMORY[0x263F8D310];
    *(void *)(v27 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v27 + 112) = 0x7465736E495FLL;
    *(void *)(v27 + 120) = 0xE600000000000000;
    LOBYTE(v69) = v66;
    float v79 = &dword_245728000;
    uint64_t v73 = v27;
    uint64_t v74 = (int *)_signpostLog;
    int v76 = "AnimationState";
    uint64_t v77 = 14;
    char v78 = 2;
    uint64_t v70 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v71 = 39;
    char v72 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v34 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v11);
    uint64_t v12 = v34;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

Swift::Void __swiftcall AnimatableFrameAttributeVFD.destroy()()
{
  if (*(void *)(v0 + 72)) {
    specialized AnimatorState.removeListeners()();
  }
}

_DWORD *AnimatableAttributeHelper.phase.getter@<X0>(_DWORD *a1@<X8>)
{
  result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t AnimatableAttributeHelper.phase.setter()
{
  return AGGraphSetValue();
}

uint64_t (*AnimatableAttributeHelper.phase.modify(_DWORD *a1))(_DWORD *a1)
{
  a1[2] = *v1;
  *a1 = *(_DWORD *)AGGraphGetValue();
  return GraphHost.Data.phase.modify;
}

uint64_t AnimatableAttributeHelper.$phase.getter()
{
  return *v0;
}

uint64_t AnimatableAttributeHelper.$phase.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*AnimatableAttributeHelper.$phase.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return DefaultLayoutResponderFilter.$children.modify;
}

double AnimatableAttributeHelper.time.getter@<D0>(void *a1@<X8>)
{
  Value = (double *)AGGraphGetValue();
  double result = *Value;
  *a1 = *(void *)Value;
  return result;
}

uint64_t AnimatableAttributeHelper.time.setter()
{
  return AGGraphSetValue();
}

uint64_t (*AnimatableAttributeHelper.time.modify(uint64_t a1))(void *a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 4);
  *(void *)a1 = *(void *)AGGraphGetValue();
  return GraphHost.Data.time.modify;
}

uint64_t AnimatableAttributeHelper.$time.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

_DWORD *(*AnimatableAttributeHelper.$time.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return SecondaryLayerGeometryQuery.$layoutDirection.modify;
}

uint64_t AnimatableAttributeHelper.transaction.getter()
{
  specialized AnimatableAttributeHelper.transaction.getter();

  return swift_retain();
}

uint64_t key path getter for AnimatableAttributeHelper.transaction : <A>AnimatableAttributeHelper<A>@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AnimatableAttributeHelper();
  *a1 = specialized AnimatableAttributeHelper.transaction.getter();

  return swift_retain();
}

uint64_t key path setter for AnimatableAttributeHelper.transaction : <A>AnimatableAttributeHelper<A>()
{
  type metadata accessor for AnimatableAttributeHelper();
  swift_retain();
  specialized AnimatableAttributeHelper.transaction.setter();

  return swift_release();
}

uint64_t AnimatableAttributeHelper.transaction.setter()
{
  specialized AnimatableAttributeHelper.transaction.setter();

  return swift_release();
}

uint64_t (*AnimatableAttributeHelper.transaction.modify(uint64_t a1))(void *a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 8);
  *(void *)a1 = *(void *)AGGraphGetValue();
  swift_retain();
  return GraphHost.Data.transaction.modify;
}

uint64_t AnimatableAttributeHelper.$transaction.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t AnimatableAttributeHelper.$transaction.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

_DWORD *(*AnimatableAttributeHelper.$transaction.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return _ViewInputs.time.modify;
}

uint64_t AnimatorState.Fork.update(time:environment:)(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  v10 = (char *)&v16 - v9;
  uint64_t v17 = v3[1];
  uint64_t v11 = *(void *)(a3 + 24);
  swift_bridgeObjectRetain();
  AnimationContext.init(state:environment:isLogicallyComplete:)(&v17, 0, (uint64_t)v18);
  v12.n128_f64[0] = a1;
  Animation.animate<A>(value:time:context:)((uint64_t)v3 + *(int *)(a3 + 40), (uint64_t)v18, *v3, v6, v11, (uint64_t)v10, v12);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v10, 1, v6) == 1;
  char v14 = v13 | v19;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  return v14 & 1;
}

uint64_t specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(char a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(uint64_t *, uint64_t), void (*a7)(void), double a8)
{
  void (*v37)(uint64_t *__return_ptr, uint64_t *, void *, uint64_t, uint64_t, double);
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t j;
  uint64_t v45;
  uint64_t v46;
  void v47[2];
  uint64_t (*v48)(uint64_t);
  void (*v49)(void);
  uint64_t (*v50)(uint64_t *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void v58[2];
  __int16 v59;

  id v55 = a5;
  unsigned __int8 v48 = a3;
  uint64_t v12 = v8;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v16 - 8);
  int v53 = (uint64_t)v47 - v17;
  uint64_t v52 = type metadata accessor for IndexSet();
  uint64_t v51 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  char v19 = (char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v18) = *(unsigned char *)(v12 + 96);
  int v54 = v19;
  if ((v18 & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v12 + 96) = a1 & 1;
  uint64_t v20 = (uint64_t *)(v12 + 88);
  swift_beginAccess();
  unint64_t v21 = *(void *)(v12 + 88);
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v28) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v22 = *v20;
    unint64_t v23 = (unint64_t)*v20 >> 62;
    v47[1] = a2;
    if (v23)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v24 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v24)
      {
LABEL_7:
        if (v24 < 1) {
          goto LABEL_47;
        }
        for (uint64_t i = 0; i != v24; ++i)
        {
          if ((v22 & 0xC000000000000001) != 0)
          {
            uint64_t v27 = MEMORY[0x24C523D60](i, v22);
          }
          else
          {
            uint64_t v27 = *(void *)(v22 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v27 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v20 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    char v19 = v54;
    goto LABEL_17;
  }
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  id v29 = (uint64_t *)(v12 + 104);
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v12 + 104) + 16)) {
    return result;
  }
  int8x16_t v50 = a6;
  uint64_t v49 = a7;
  IndexSet.init()();
  uint64_t v30 = *(void *)(*v29 + 16);
  if (!v30)
  {
LABEL_40:
    swift_beginAccess();
    double v46 = v53;
    specialized Collection.subscript.getter(v53);
    uint64_t result = v50(v29, v46);
    if (*(void *)(*v29 + 16) < result) {
      goto LABEL_46;
    }
    v49();
    outlined destroy of Slice<IndexSet>(v46);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v19, v52);
  }
  unint64_t v31 = 0;
  while (1)
  {
    swift_beginAccess();
    uint64_t v32 = *v29;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *id v29 = v32;
    if ((result & 1) == 0)
    {
      uint64_t result = v48(v32);
      uint64_t v32 = result;
      *id v29 = result;
    }
    if (v31 >= *(void *)(v32 + 16)) {
      break;
    }
    uint64_t v33 = (void *)(v32 + 32 * v31);
    uint64_t v34 = v33[5];
    swift_bridgeObjectRetain();
    uint64_t v35 = AGCreateWeakAttribute();
    v58[0] = v34;
    v58[1] = v35;
    uint64_t v59 = 0;
    uint64_t v36 = v33[4];
    uint64_t v56 = v33[6];
    id v37 = *(void (**)(uint64_t *__return_ptr, uint64_t *, void *, uint64_t, uint64_t, double))(*(void *)v36 + 120);
    uint64_t v38 = a4();
    v37(&v57, &v56, v58, v55, v38, a8);
    id v39 = v57;
    swift_bridgeObjectRelease();
    if (v39)
    {
      id v40 = HIBYTE(v59);
      swift_bridgeObjectRelease();
      uint64_t v41 = *v29;
      uint64_t result = swift_endAccess();
      if ((v40 & 1) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v41 = *v29;
      uint64_t result = swift_endAccess();
    }
    if (v31 >= *(void *)(v41 + 16)) {
      goto LABEL_44;
    }
    uint64_t v42 = *(void *)(v41 + 32 * v31 + 56);
    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      int v43 = result;
      if (result)
      {
LABEL_32:
        if (v43 < 1) {
          goto LABEL_45;
        }
        for (j = 0; j != v43; ++j)
        {
          if ((v42 & 0xC000000000000001) != 0)
          {
            uint64_t v45 = MEMORY[0x24C523D60](j, v42);
          }
          else
          {
            uint64_t v45 = *(void *)(v42 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v45 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      int v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v43) {
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
    char v19 = v54;
    IndexSet.insert(_:)(v31);
LABEL_21:
    if (++v31 == v30) {
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(char a1, uint64_t a2, double a3)
{
  void (*v34)(void *__return_ptr, void *, long long *, uint64_t, unint64_t, double);
  unint64_t v35;
  void (*v36)(void *__return_ptr, void *, long long *, uint64_t, uint64_t, double);
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void v52[2];
  long long v53;
  void v54[2];
  uint64_t v55;
  void v56[2];
  long long v57;
  __int16 v58;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  int8x16_t v50 = (uint64_t)&v47 - v9;
  uint64_t v49 = type metadata accessor for IndexSet();
  unsigned __int8 v48 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 112) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 112) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v3 + 104);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v3 + 104);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_52;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 120;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 120) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    uint64_t v45 = v50;
    specialized Collection.subscript.getter(v50);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v45);
    double v46 = *(void *)(*(void *)v20 + 16);
    if (v46 < result) {
      goto LABEL_51;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v46);
    outlined destroy of Slice<IndexSet>(v45);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v11, v49);
  }
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v23 = v22;
  unint64_t v24 = 0;
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2) = *MEMORY[0x263F288F8];
  }
  uint64_t v25 = MEMORY[0x263F8D538];
  uint64_t v51 = a2;
  while (1)
  {
    swift_beginAccess();
    id v26 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v26;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      id v26 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v24 >= v26[2]) {
      break;
    }
    uint64_t v27 = &v26[5 * v24];
    uint64_t v28 = v27[5];
    swift_bridgeObjectRetain();
    uint64_t v29 = AGCreateWeakAttribute();
    *(void *)&int v57 = v28;
    *((void *)&v57 + 1) = v29;
    id v58 = 0;
    uint64_t v30 = v27[4];
    uint64_t v31 = v27[6];
    uint64_t v32 = v27[7];
    v56[0] = v31;
    v56[1] = v32;
    if (v23 == v25)
    {
      v52[0] = v31;
      (*(void (**)(void *__return_ptr, void *, long long *, uint64_t, _UNKNOWN **, double))(*(void *)v30 + 120))(v54, v52, &v57, v25, &protocol witness table for Double, a3);
    }
    else
    {
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v23 == v33)
      {
        v52[0] = v31;
        v52[1] = v32;
        int v53 = v57;
        uint64_t v36 = *(void (**)(void *__return_ptr, void *, long long *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
        id v37 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v36(v54, v52, &v57, v23, v37, a3);
      }
      else
      {
        uint64_t v34 = *(void (**)(void *__return_ptr, void *, long long *, uint64_t, unint64_t, double))(*(void *)v30 + 120);
        uint64_t v35 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
        v34(v54, v56, &v57, v23, v35, a3);
      }
    }
    uint64_t v38 = v55;
    id v39 = HIBYTE(v58);
    swift_bridgeObjectRelease();
    id v40 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if ((v38 & 1) == 0 && (v39 & 1) == 0) {
      goto LABEL_23;
    }
    if (v24 >= *(void *)(v40 + 16)) {
      goto LABEL_49;
    }
    uint64_t v41 = *(void *)(v40 + 40 * v24 + 64);
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v42 = result;
      if (result)
      {
LABEL_37:
        if (v42 < 1) {
          goto LABEL_50;
        }
        for (j = 0; j != v42; ++j)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            uint64_t v44 = MEMORY[0x24C523D60](j, v41);
          }
          else
          {
            uint64_t v44 = *(void *)(v41 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v44 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v42) {
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
    uint64_t v25 = MEMORY[0x263F8D538];
LABEL_23:
    if (++v24 == v21) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v36;
  void (*v37)(void *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t j;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void v53[4];
  void v54[2];
  long long v55;
  void v56[3];
  void v57[2];
  __int16 v58;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v51 = (uint64_t)&v48 - v9;
  int8x16_t v50 = type metadata accessor for IndexSet();
  uint64_t v49 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 128) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 128) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v3 + 120);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v3 + 120);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_52;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 136;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 136) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    double v46 = v51;
    specialized Collection.subscript.getter(v51);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v46);
    uint64_t v47 = *(void *)(*(void *)v20 + 16);
    if (v47 < result) {
      goto LABEL_51;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v47);
    outlined destroy of Slice<IndexSet>(v46);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v11, v50);
  }
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  uint64_t v23 = v22;
  unint64_t v24 = 0;
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2) = *MEMORY[0x263F288F8];
  }
  uint64_t v25 = MEMORY[0x263F8D538];
  uint64_t v52 = a2;
  while (1)
  {
    swift_beginAccess();
    id v26 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v26;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      id v26 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v24 >= v26[2]) {
      break;
    }
    uint64_t v27 = &v26[6 * v24];
    uint64_t v28 = v27[5];
    swift_bridgeObjectRetain();
    uint64_t v29 = AGCreateWeakAttribute();
    v57[0] = v28;
    v57[1] = v29;
    id v58 = 0;
    uint64_t v30 = v27[4];
    uint64_t v31 = v27[6];
    uint64_t v32 = v27[7];
    uint64_t v33 = v27[8];
    v56[0] = v31;
    v56[1] = v32;
    v56[2] = v33;
    if (v23 == v25)
    {
      v53[0] = v31;
      (*(void (**)(void *__return_ptr, void *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v30 + 120))(v54, v53, v57, v25, &protocol witness table for Double, a3);
    }
    else
    {
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v23 == v34)
      {
        v53[0] = v31;
        v53[1] = v32;
        v53[2] = v33;
        v53[3] = v57[0];
        id v37 = *(void (**)(void *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
        uint64_t v38 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v37(v54, v53, v57, v23, v38, a3);
      }
      else
      {
        uint64_t v35 = *(void (**)(void *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
        uint64_t v36 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v35(v54, v56, v57, v23, v36, a3);
      }
    }
    id v39 = BYTE8(v55);
    id v40 = HIBYTE(v58);
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if ((v39 & 1) == 0 && (v40 & 1) == 0) {
      goto LABEL_23;
    }
    if (v24 >= *(void *)(v41 + 16)) {
      goto LABEL_49;
    }
    uint64_t v42 = *(void *)(v41 + 48 * v24 + 72);
    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      int v43 = result;
      if (result)
      {
LABEL_37:
        if (v43 < 1) {
          goto LABEL_50;
        }
        for (j = 0; j != v43; ++j)
        {
          if ((v42 & 0xC000000000000001) != 0)
          {
            uint64_t v45 = MEMORY[0x24C523D60](j, v42);
          }
          else
          {
            uint64_t v45 = *(void *)(v42 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v45 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      int v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v43) {
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
    uint64_t v25 = MEMORY[0x263F8D538];
LABEL_23:
    if (++v24 == v21) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  void (*v34)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (*v38)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t j;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void v55[2];
  long long v56;
  long long v57;
  void v58[2];
  long long v59;
  void v60[2];
  __int16 v61;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  int v53 = (uint64_t)&v50 - v9;
  uint64_t v52 = type metadata accessor for IndexSet();
  uint64_t v51 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 144) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 144) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v3 + 136);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v3 + 136);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_55;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 152;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 152) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_48:
    swift_beginAccess();
    unsigned __int8 v48 = v53;
    specialized Collection.subscript.getter(v53);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v48);
    uint64_t v49 = *(void *)(*(void *)v20 + 16);
    if (v49 < result) {
      goto LABEL_54;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v49);
    outlined destroy of Slice<IndexSet>(v48);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v11, v52);
  }
  type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>();
  uint64_t v23 = v22;
  unint64_t v24 = 0;
  if ((a2 & 0x100000000) != 0) {
    a2 = *MEMORY[0x263F288F8];
  }
  else {
    a2 = a2;
  }
  int v54 = v22;
  while (1)
  {
    swift_beginAccess();
    uint64_t v25 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v25;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      uint64_t v25 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v24 >= v25[2]) {
      break;
    }
    id v26 = &v25[7 * v24];
    uint64_t v27 = v26[5];
    swift_bridgeObjectRetain();
    uint64_t v28 = AGCreateWeakAttribute();
    v60[0] = v27;
    v60[1] = v28;
    int v61 = 0;
    uint64_t v29 = v26[4];
    uint64_t v30 = v26[6];
    uint64_t v31 = v26[7];
    uint64_t v32 = *((_OWORD *)v26 + 4);
    v58[0] = v30;
    v58[1] = v31;
    uint64_t v59 = v32;
    if (v23 == MEMORY[0x263F8D538])
    {
      v55[0] = v30;
      (*(void (**)(long long *__return_ptr, void *, void *, double))(*(void *)v29 + 120))(&v57, v55, v60, a3);
      uint64_t v36 = v57;
      if ((void)v57) {
        goto LABEL_33;
      }
    }
    else
    {
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v23 == v33)
      {
        v55[0] = v30;
        v55[1] = v31;
        uint64_t v56 = v59;
        uint64_t v38 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v29 + 120);
        id v39 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v38(&v57, v55, v60, v23, v39, a3);
        uint64_t v36 = v57;
        if ((void)v57)
        {
LABEL_33:
          outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v36);
          id v37 = HIBYTE(v61);
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v34 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v29 + 120);
        uint64_t v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
        v34(&v57, v58, v60, v23, v35, a3);
        uint64_t v36 = v57;
        if ((void)v57) {
          goto LABEL_33;
        }
      }
    }
    id v37 = 1;
LABEL_36:
    swift_bridgeObjectRelease();
    id v40 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if (!v37) {
      goto LABEL_24;
    }
    if (v24 >= *(void *)(v40 + 16)) {
      goto LABEL_52;
    }
    uint64_t v41 = v21;
    uint64_t v42 = a2;
    int v43 = v11;
    uint64_t v44 = *(void *)(v40 + 56 * v24 + 80);
    if (v44 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v45 = result;
      if (result)
      {
LABEL_40:
        if (v45 < 1) {
          goto LABEL_53;
        }
        for (j = 0; j != v45; ++j)
        {
          if ((v44 & 0xC000000000000001) != 0)
          {
            uint64_t v47 = MEMORY[0x24C523D60](j, v44);
          }
          else
          {
            uint64_t v47 = *(void *)(v44 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v47 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v45) {
        goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v43;
    IndexSet.insert(_:)(v24);
    a2 = v42;
    uint64_t v21 = v41;
    uint64_t v23 = v54;
LABEL_24:
    if (++v24 == v21) {
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  void (*v34)(void *__return_ptr, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v35;
  void (*v36)(void *__return_ptr, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  long long v51;
  long long v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  long long v57;
  void v58[5];
  char v59;
  void v60[2];
  __int16 v61;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v49 = (uint64_t)&v47 - v9;
  unsigned __int8 v48 = type metadata accessor for IndexSet();
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 160) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 160) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v3 + 152);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v3 + 152);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_52;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 168;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 168) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    uint64_t v45 = v49;
    specialized Collection.subscript.getter(v49);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v45);
    double v46 = *(void *)(*(void *)v20 + 16);
    if (v46 < result) {
      goto LABEL_51;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v46);
    outlined destroy of Slice<IndexSet>(v45);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v11, v48);
  }
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  uint64_t v23 = v22;
  unint64_t v24 = 0;
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2) = *MEMORY[0x263F288F8];
  }
  uint64_t v25 = MEMORY[0x263F8D538];
  int8x16_t v50 = a2;
  while (1)
  {
    swift_beginAccess();
    id v26 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v26;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      id v26 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v24 >= v26[2]) {
      break;
    }
    uint64_t v27 = &v26[8 * v24];
    uint64_t v28 = v27[5];
    swift_bridgeObjectRetain();
    uint64_t v29 = AGCreateWeakAttribute();
    v60[0] = v28;
    v60[1] = v29;
    int v61 = 0;
    uint64_t v30 = v27[4];
    uint64_t v31 = v27[8];
    uint64_t v32 = *(_OWORD *)(v27 + 9);
    id v55 = *((_OWORD *)v27 + 3);
    uint64_t v56 = v31;
    int v57 = v32;
    if (v23 == v25)
    {
      *(void *)&uint64_t v52 = v55;
      (*(void (**)(void *__return_ptr, long long *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v30 + 120))(v58, &v52, v60, v25, &protocol witness table for Double, a3);
    }
    else
    {
      uint64_t v51 = v32;
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v23 == v33)
      {
        uint64_t v52 = v55;
        int v53 = v31;
        int v54 = v51;
        uint64_t v36 = *(void (**)(void *__return_ptr, long long *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
        id v37 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v36(v58, &v52, v60, v23, v37, a3);
      }
      else
      {
        uint64_t v34 = *(void (**)(void *__return_ptr, long long *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
        uint64_t v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
        v34(v58, &v55, v60, v23, v35, a3);
      }
    }
    uint64_t v38 = v59;
    id v39 = HIBYTE(v61);
    swift_bridgeObjectRelease();
    id v40 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if ((v38 & 1) == 0 && (v39 & 1) == 0) {
      goto LABEL_23;
    }
    if (v24 >= *(void *)(v40 + 16)) {
      goto LABEL_49;
    }
    uint64_t v41 = *(void *)(v40 + (v24 << 6) + 88);
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v42 = result;
      if (result)
      {
LABEL_37:
        if (v42 < 1) {
          goto LABEL_50;
        }
        for (j = 0; j != v42; ++j)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            uint64_t v44 = MEMORY[0x24C523D60](j, v41);
          }
          else
          {
            uint64_t v44 = *(void *)(v41 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v44 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v42) {
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
    uint64_t v25 = MEMORY[0x263F8D538];
LABEL_23:
    if (++v24 == v21) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  long long v35;
  uint64_t v36;
  void (*v37)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v38;
  int v39;
  void (*v40)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void v53[5];
  void v54[3];
  uint64_t v55;
  long long v56;
  long long v57;
  long long v58;
  void v59[2];
  __int16 v60;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v51 = (uint64_t)&v49 - v9;
  int8x16_t v50 = type metadata accessor for IndexSet();
  uint64_t v49 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 176) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 176) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v3 + 168);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v3 + 168);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_54;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 184;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 184) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_47:
    swift_beginAccess();
    uint64_t v47 = v51;
    specialized Collection.subscript.getter(v51);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v47);
    unsigned __int8 v48 = *(void *)(*(void *)v20 + 16);
    if (v48 < result) {
      goto LABEL_53;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v48);
    outlined destroy of Slice<IndexSet>(v47);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v11, v50);
  }
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v23 = v22;
  unint64_t v24 = 0;
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2) = *MEMORY[0x263F288F8];
  }
  uint64_t v25 = MEMORY[0x263F8D538];
  uint64_t v52 = a2;
  while (1)
  {
    swift_beginAccess();
    id v26 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v26;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      id v26 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v24 >= v26[2]) {
      break;
    }
    uint64_t v27 = &v26[9 * v24];
    uint64_t v28 = v27[5];
    swift_bridgeObjectRetain();
    uint64_t v29 = AGCreateWeakAttribute();
    v59[0] = v28;
    v59[1] = v29;
    uint64_t v60 = 0;
    uint64_t v30 = v27[4];
    uint64_t v31 = v27[6];
    uint64_t v32 = v27[7];
    uint64_t v33 = v27[8];
    uint64_t v34 = *((unsigned char *)v27 + 72);
    uint64_t v35 = *((_OWORD *)v27 + 5);
    v54[0] = v31;
    v54[1] = v32;
    v54[2] = v33;
    LOBYTE(v55) = v34;
    uint64_t v56 = v35;
    if (v23 == v25)
    {
      v53[0] = v31;
      (*(void (**)(long long *__return_ptr, void *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v30 + 120))(&v57, v53, v59, v25, &protocol witness table for Double, a3);
LABEL_31:
      if ((void)v58) {
        goto LABEL_32;
      }
      goto LABEL_34;
    }
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v23 != v36)
    {
      id v37 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
      uint64_t v38 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v37(&v57, v54, v59, v23, v38, a3);
      goto LABEL_31;
    }
    v53[0] = v31;
    v53[1] = v32;
    v53[2] = v33;
    v53[3] = v55;
    id v40 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
    uint64_t v41 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v40(&v57, v53, v59, v23, v41, a3);
    if ((void)v58)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      id v39 = HIBYTE(v60);
      goto LABEL_35;
    }
LABEL_34:
    id v39 = 1;
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if (!v39) {
      goto LABEL_23;
    }
    if (v24 >= *(void *)(v42 + 16)) {
      goto LABEL_51;
    }
    int v43 = *(void *)(v42 + 72 * v24 + 96);
    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v44 = result;
      if (result)
      {
LABEL_39:
        if (v44 < 1) {
          goto LABEL_52;
        }
        for (j = 0; j != v44; ++j)
        {
          if ((v43 & 0xC000000000000001) != 0)
          {
            double v46 = MEMORY[0x24C523D60](j, v43);
          }
          else
          {
            double v46 = *(void *)(v43 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v46 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v44) {
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
    uint64_t v25 = MEMORY[0x263F8D538];
LABEL_23:
    if (++v24 == v21) {
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  long long v35;
  uint64_t v36;
  void (*v37)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v38;
  int v39;
  void (*v40)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void v53[5];
  void v54[3];
  uint64_t v55;
  long long v56;
  long long v57;
  long long v58;
  void v59[2];
  __int16 v60;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v51 = (uint64_t)&v49 - v9;
  int8x16_t v50 = type metadata accessor for IndexSet();
  uint64_t v49 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 176) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 176) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v3 + 168);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v3 + 168);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_54;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 184;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 184) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_47:
    swift_beginAccess();
    uint64_t v47 = v51;
    specialized Collection.subscript.getter(v51);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v47);
    unsigned __int8 v48 = *(void *)(*(void *)v20 + 16);
    if (v48 < result) {
      goto LABEL_53;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v48);
    outlined destroy of Slice<IndexSet>(v47);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v11, v50);
  }
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>();
  uint64_t v23 = v22;
  unint64_t v24 = 0;
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2) = *MEMORY[0x263F288F8];
  }
  uint64_t v25 = MEMORY[0x263F8D538];
  uint64_t v52 = a2;
  while (1)
  {
    swift_beginAccess();
    id v26 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v26;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      id v26 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v24 >= v26[2]) {
      break;
    }
    uint64_t v27 = &v26[9 * v24];
    uint64_t v28 = v27[5];
    swift_bridgeObjectRetain();
    uint64_t v29 = AGCreateWeakAttribute();
    v59[0] = v28;
    v59[1] = v29;
    uint64_t v60 = 0;
    uint64_t v30 = v27[4];
    uint64_t v31 = v27[6];
    uint64_t v32 = v27[7];
    uint64_t v33 = v27[8];
    uint64_t v34 = *((unsigned char *)v27 + 72);
    uint64_t v35 = *((_OWORD *)v27 + 5);
    v54[0] = v31;
    v54[1] = v32;
    v54[2] = v33;
    LOBYTE(v55) = v34;
    uint64_t v56 = v35;
    if (v23 == v25)
    {
      v53[0] = v31;
      (*(void (**)(long long *__return_ptr, void *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v30 + 120))(&v57, v53, v59, v25, &protocol witness table for Double, a3);
LABEL_31:
      if ((void)v58) {
        goto LABEL_32;
      }
      goto LABEL_34;
    }
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v23 != v36)
    {
      id v37 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
      uint64_t v38 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>();
      v37(&v57, v54, v59, v23, v38, a3);
      goto LABEL_31;
    }
    v53[0] = v31;
    v53[1] = v32;
    v53[2] = v33;
    v53[3] = v55;
    id v40 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
    uint64_t v41 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v40(&v57, v53, v59, v23, v41, a3);
    if ((void)v58)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      id v39 = HIBYTE(v60);
      goto LABEL_35;
    }
LABEL_34:
    id v39 = 1;
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if (!v39) {
      goto LABEL_23;
    }
    if (v24 >= *(void *)(v42 + 16)) {
      goto LABEL_51;
    }
    int v43 = *(void *)(v42 + 72 * v24 + 96);
    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v44 = result;
      if (result)
      {
LABEL_39:
        if (v44 < 1) {
          goto LABEL_52;
        }
        for (j = 0; j != v44; ++j)
        {
          if ((v43 & 0xC000000000000001) != 0)
          {
            double v46 = MEMORY[0x24C523D60](j, v43);
          }
          else
          {
            double v46 = *(void *)(v43 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v46 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v44) {
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
    uint64_t v25 = MEMORY[0x263F8D538];
LABEL_23:
    if (++v24 == v21) {
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  ValueMetadata *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  ValueMetadata *v31;
  void (*v32)(long long *__return_ptr, uint64_t *, char *, ValueMetadata *, unint64_t, double);
  unint64_t v33;
  int v34;
  void (*v35)(long long *__return_ptr, uint64_t *, char *, ValueMetadata *, uint64_t, double);
  uint64_t v36;
  uint64_t v37;
  ValueMetadata *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  long long v57;
  uint64_t v58;
  __int16 v59;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  int8x16_t v50 = (uint64_t)&v47 - v9;
  uint64_t v49 = type metadata accessor for IndexSet();
  unsigned __int8 v48 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v4 + 112) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v4 + 112) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v4 + 104);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v4 + 104);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_52;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 120;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 120) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    uint64_t v45 = v50;
    specialized Collection.subscript.getter(v50);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v45);
    double v46 = *(void *)(*(void *)v20 + 16);
    if (v46 < result) {
      goto LABEL_51;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v46);
    outlined destroy of Slice<IndexSet>(v45);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v11, v49);
  }
  uint64_t v22 = 0;
  if ((a2 & 0x100000000) != 0) {
    a2 = *MEMORY[0x263F288F8];
  }
  else {
    a2 = a2;
  }
  uint64_t v23 = &type metadata for ResolvedGradientVector;
  uint64_t v51 = *(void *)(*(void *)v20 + 16);
  while (1)
  {
    swift_beginAccess();
    unint64_t v24 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v24;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      unint64_t v24 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v22 >= v24[2]) {
      break;
    }
    uint64_t v25 = &v24[5 * v22];
    id v26 = v25[5];
    swift_bridgeObjectRetain();
    uint64_t v27 = AGCreateWeakAttribute();
    *((void *)&v57 + 1) = v26;
    id v58 = v27;
    uint64_t v59 = 0;
    uint64_t v28 = v25[4];
    uint64_t v29 = v25[6];
    uint64_t v30 = *((unsigned char *)v25 + 56);
    uint64_t v56 = v29;
    LOBYTE(v57) = v30;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v31 == v23)
    {
      uint64_t v52 = v29;
      int v53 = v57;
      int v54 = v58;
      uint64_t v35 = *(void (**)(long long *__return_ptr, uint64_t *, char *, ValueMetadata *, uint64_t, double))(*(void *)v28 + 120);
      uint64_t v36 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v35(&v55, &v52, (char *)&v57 + 8, v23, v36, a3);
      if ((void)v55)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        uint64_t v34 = HIBYTE(v59);
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v32 = *(void (**)(long long *__return_ptr, uint64_t *, char *, ValueMetadata *, unint64_t, double))(*(void *)v28 + 120);
      uint64_t v33 = lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
      v32(&v55, &v56, (char *)&v57 + 8, v23, v33, a3);
      if ((void)v55) {
        goto LABEL_30;
      }
    }
    uint64_t v34 = 1;
LABEL_33:
    swift_bridgeObjectRelease();
    id v37 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if (!v34) {
      goto LABEL_24;
    }
    if (v22 >= *(void *)(v37 + 16)) {
      goto LABEL_49;
    }
    uint64_t v38 = v23;
    id v39 = a2;
    id v40 = v11;
    uint64_t v41 = *(void *)(v37 + 40 * v22 + 64);
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v42 = result;
      if (result)
      {
LABEL_37:
        if (v42 < 1) {
          goto LABEL_50;
        }
        for (j = 0; j != v42; ++j)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            uint64_t v44 = MEMORY[0x24C523D60](j, v41);
          }
          else
          {
            uint64_t v44 = *(void *)(v41 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v44 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v42) {
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v40;
    IndexSet.insert(_:)(v22);
    a2 = v39;
    uint64_t v23 = v38;
    uint64_t v21 = v51;
LABEL_24:
    if (++v22 == v21) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  long long v39;
  long long v40;
  long long v41;
  uint64_t v42;
  void (*v43)(uint64_t *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v44;
  uint64_t v45;
  int v46;
  void (*v47)(uint64_t *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  long long v61;
  int v62;
  void v63[5];
  void v64[3];
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  uint64_t v72[10];
  char v73;
  uint64_t v74;
  uint64_t v75;
  void v76[2];
  __int16 v77;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v59 = (uint64_t)&v57 - v9;
  uint64_t v10 = type metadata accessor for IndexSet();
  id v58 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v11) = *(unsigned char *)(v4 + 288);
  uint64_t v60 = v12;
  if ((v11 & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v4 + 288) = a1 & 1;
  unint64_t v13 = (uint64_t *)(v4 + 280);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v4 + 280);
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v20) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v15 = *v13;
    if ((unint64_t)*v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v16 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v16)
      {
LABEL_7:
        if (v16 < 1) {
          goto LABEL_54;
        }
        for (uint64_t i = 0; i != v16; ++i)
        {
          if ((v15 & 0xC000000000000001) != 0)
          {
            uint64_t v19 = MEMORY[0x24C523D60](i, v15);
          }
          else
          {
            uint64_t v19 = *(void *)(v15 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v19 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *unint64_t v13 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v21 = v4 + 296;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 296) + 16)) {
    return result;
  }
  int v57 = v10;
  IndexSet.init()();
  uint64_t v22 = *(void *)(*(void *)v21 + 16);
  if (!v22)
  {
LABEL_47:
    swift_beginAccess();
    int v54 = v59;
    id v55 = v60;
    specialized Collection.subscript.getter(v59);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v21, v54);
    uint64_t v56 = *(void *)(*(void *)v21 + 16);
    if (v56 < result) {
      goto LABEL_53;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v56);
    outlined destroy of Slice<IndexSet>(v54);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v55, v57);
  }
  type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
  unint64_t v24 = v23;
  uint64_t v25 = 0;
  id v26 = *MEMORY[0x263F288F8];
  if ((a2 & 0x100000000) == 0) {
    id v26 = a2;
  }
  uint64_t v62 = v26;
  while (1)
  {
    swift_beginAccess();
    uint64_t v27 = *(void **)v21;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v21 = v27;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      uint64_t v27 = (void *)result;
      *(void *)uint64_t v21 = result;
    }
    if (v25 >= v27[2]) {
      break;
    }
    uint64_t v28 = &v27[16 * v25];
    uint64_t v29 = v28[5];
    swift_bridgeObjectRetain();
    uint64_t v30 = AGCreateWeakAttribute();
    v76[0] = v29;
    v76[1] = v30;
    uint64_t v77 = 0;
    uint64_t v31 = v28[4];
    uint64_t v32 = v28[6];
    uint64_t v33 = v28[7];
    uint64_t v34 = v28[8];
    uint64_t v35 = v28[15];
    uint64_t v36 = *((unsigned char *)v28 + 128);
    id v37 = *((_DWORD *)v28 + 34);
    uint64_t v38 = v28[18];
    id v39 = *(_OWORD *)(v28 + 9);
    id v40 = *(_OWORD *)(v28 + 11);
    uint64_t v41 = *(_OWORD *)(v28 + 13);
    v64[0] = v32;
    v64[1] = v33;
    v64[2] = v34;
    int v65 = v39;
    int v66 = v40;
    uint64_t v67 = v41;
    uint64_t v68 = v35;
    uint64_t v69 = v36;
    uint64_t v70 = v37;
    uint64_t v71 = v38;
    if (v24 == MEMORY[0x263F8D538])
    {
      v63[0] = v32;
      (*(void (**)(uint64_t *__return_ptr, void *, void *, double))(*(void *)v31 + 120))(v72, v63, v76, a3);
      uint64_t v45 = v75;
      if (v75) {
        goto LABEL_32;
      }
    }
    else
    {
      int v61 = v39;
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v24 == v42)
      {
        v63[0] = v32;
        v63[1] = v33;
        v63[2] = v34;
        v63[3] = v61;
        uint64_t v47 = *(void (**)(uint64_t *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v31 + 120);
        unsigned __int8 v48 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v47(v72, v63, v76, v24, v48, a3);
        uint64_t v45 = v75;
        if (v75)
        {
LABEL_32:
          outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v72[0], v72[1], v72[2], v72[3], v72[4], v72[5], v72[6], v72[7], v72[8], v72[9], v73, v74, v45);
          double v46 = HIBYTE(v77);
          goto LABEL_35;
        }
      }
      else
      {
        int v43 = *(void (**)(uint64_t *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v31 + 120);
        uint64_t v44 = lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>();
        v43(v72, v64, v76, v24, v44, a3);
        uint64_t v45 = v75;
        if (v75) {
          goto LABEL_32;
        }
      }
    }
    double v46 = 1;
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v49 = *(void *)v21;
    uint64_t result = swift_endAccess();
    if (!v46) {
      goto LABEL_23;
    }
    if (v25 >= *(void *)(v49 + 16)) {
      goto LABEL_51;
    }
    int8x16_t v50 = *(void *)(v49 + (v25 << 7) + 152);
    if (v50 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v51 = result;
      if (result)
      {
LABEL_39:
        if (v51 < 1) {
          goto LABEL_52;
        }
        for (j = 0; j != v51; ++j)
        {
          if ((v50 & 0xC000000000000001) != 0)
          {
            int v53 = MEMORY[0x24C523D60](j, v50);
          }
          else
          {
            int v53 = *(void *)(v50 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v53 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v51) {
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v25);
LABEL_23:
    if (++v25 == v22) {
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  long long v36;
  long long v37;
  long long v38;
  ValueMetadata *v39;
  void (*v40)(uint64_t *__return_ptr, void *, void *, ValueMetadata *, unint64_t, double);
  unint64_t v41;
  void (*v42)(uint64_t *__return_ptr, void *, void *, ValueMetadata *, uint64_t, double);
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t j;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  long long v59;
  void v60[5];
  void v61[3];
  long long v62;
  long long v63;
  long long v64;
  uint64_t v65;
  char v66;
  uint64_t v67[10];
  unsigned __int8 v68;
  void v69[2];
  __int16 v70;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v56 = (uint64_t)&v53 - v9;
  uint64_t v10 = type metadata accessor for IndexSet();
  int v54 = *(void *)(v10 - 8);
  id v55 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v4 + 256) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v4 + 256) = a1 & 1;
  unint64_t v13 = (uint64_t *)(v4 + 248);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v4 + 248);
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v15 = *v13;
    uint64_t v16 = v12;
    if ((unint64_t)*v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v17 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v17)
      {
LABEL_7:
        if (v17 < 1) {
          goto LABEL_52;
        }
        for (uint64_t i = 0; i != v17; ++i)
        {
          if ((v15 & 0xC000000000000001) != 0)
          {
            uint64_t v20 = MEMORY[0x24C523D60](i, v15);
          }
          else
          {
            uint64_t v20 = *(void *)(v15 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v20 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *unint64_t v13 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    uint64_t v12 = v16;
    goto LABEL_17;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v22 = v4 + 264;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 264) + 16)) {
    return result;
  }
  int v57 = v12;
  IndexSet.init()();
  uint64_t v23 = *(void *)(*(void *)v22 + 16);
  if (!v23)
  {
LABEL_45:
    swift_beginAccess();
    int8x16_t v50 = v56;
    uint64_t v51 = v57;
    specialized Collection.subscript.getter(v56);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v22, v50);
    uint64_t v52 = *(void *)(*(void *)v22 + 16);
    if (v52 < result) {
      goto LABEL_51;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v52);
    outlined destroy of Slice<IndexSet>(v50);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v51, v55);
  }
  unint64_t v24 = 0;
  uint64_t v25 = *MEMORY[0x263F288F8];
  if ((a2 & 0x100000000) == 0) {
    uint64_t v25 = a2;
  }
  id v58 = v25;
  while (1)
  {
    swift_beginAccess();
    id v26 = *(void **)v22;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v22 = v26;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      id v26 = (void *)result;
      *(void *)uint64_t v22 = result;
    }
    if (v24 >= v26[2]) {
      break;
    }
    uint64_t v27 = &v26[14 * v24];
    uint64_t v28 = v27[5];
    swift_bridgeObjectRetain();
    uint64_t v29 = AGCreateWeakAttribute();
    v69[0] = v28;
    v69[1] = v29;
    uint64_t v70 = 0;
    uint64_t v30 = v27[4];
    uint64_t v31 = v27[6];
    uint64_t v32 = v27[7];
    uint64_t v33 = v27[8];
    uint64_t v34 = v27[15];
    uint64_t v35 = *((unsigned char *)v27 + 128);
    uint64_t v36 = *(_OWORD *)(v27 + 9);
    id v37 = *(_OWORD *)(v27 + 11);
    uint64_t v38 = *(_OWORD *)(v27 + 13);
    v61[0] = v31;
    v61[1] = v32;
    v61[2] = v33;
    uint64_t v59 = v36;
    uint64_t v62 = v36;
    uint64_t v63 = v37;
    uint64_t v64 = v38;
    int v65 = v34;
    int v66 = v35;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v39 == &type metadata for _ShapeStyle_Pack.Fill.AnimatableData)
    {
      v60[0] = v31;
      v60[1] = v32;
      v60[2] = v33;
      v60[3] = v59;
      uint64_t v42 = *(void (**)(uint64_t *__return_ptr, void *, void *, ValueMetadata *, uint64_t, double))(*(void *)v30 + 120);
      int v43 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v42(v67, v60, v69, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v43, a3);
    }
    else
    {
      id v40 = *(void (**)(uint64_t *__return_ptr, void *, void *, ValueMetadata *, unint64_t, double))(*(void *)v30 + 120);
      uint64_t v41 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
      v40(v67, v61, v69, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v41, a3);
    }
    if (v68 == 255)
    {
      uint64_t v44 = 1;
    }
    else
    {
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(v67[0], v67[1], v67[2], v67[3], v67[4], v67[5], v67[6], v67[7], v67[8], v67[9], v68);
      uint64_t v44 = HIBYTE(v70);
    }
    swift_bridgeObjectRelease();
    uint64_t v45 = *(void *)v22;
    uint64_t result = swift_endAccess();
    if (!v44) {
      goto LABEL_23;
    }
    if (v24 >= *(void *)(v45 + 16)) {
      goto LABEL_49;
    }
    double v46 = *(void *)(v45 + 112 * v24 + 136);
    if (v46 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v47 = result;
      if (result)
      {
LABEL_37:
        if (v47 < 1) {
          goto LABEL_50;
        }
        for (j = 0; j != v47; ++j)
        {
          if ((v46 & 0xC000000000000001) != 0)
          {
            uint64_t v49 = MEMORY[0x24C523D60](j, v46);
          }
          else
          {
            uint64_t v49 = *(void *)(v46 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v49 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v47) {
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
LABEL_23:
    if (++v24 == v23) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  long long v34;
  uint64_t v35;
  void (*v36)(void *__return_ptr, void, void, void, void, double);
  uint64_t v37;
  void (*v38)(void *__return_ptr, void, void, void, void, double);
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t j;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  long long v56;
  void v57[5];
  void v58[3];
  long long v59;
  uint64_t v60;
  char v61;
  void v62[6];
  char v63;
  void v64[2];
  __int16 v65;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  int v54 = (uint64_t)&v52 - v9;
  int v53 = type metadata accessor for IndexSet();
  uint64_t v52 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 192) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 192) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v3 + 184);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v3 + 184);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_53;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 200;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 200) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_46:
    swift_beginAccess();
    int8x16_t v50 = v54;
    specialized Collection.subscript.getter(v54);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v50);
    uint64_t v51 = *(void *)(*(void *)v20 + 16);
    if (v51 < result) {
      goto LABEL_52;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v51);
    outlined destroy of Slice<IndexSet>(v50);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v11, v53);
  }
  type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>();
  uint64_t v23 = v22;
  unint64_t v24 = 0;
  if ((a2 & 0x100000000) != 0) {
    a2 = *MEMORY[0x263F288F8];
  }
  else {
    a2 = a2;
  }
  id v55 = v22;
  while (1)
  {
    swift_beginAccess();
    uint64_t v25 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v25;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      uint64_t v25 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v24 >= v25[2]) {
      break;
    }
    id v26 = &v25[10 * v24];
    uint64_t v27 = v26[5];
    swift_bridgeObjectRetain();
    uint64_t v28 = AGCreateWeakAttribute();
    v64[0] = v27;
    v64[1] = v28;
    int v65 = 0;
    uint64_t v29 = v26[4];
    uint64_t v30 = v26[7];
    uint64_t v31 = v26[8];
    uint64_t v32 = v26[11];
    uint64_t v33 = *((unsigned char *)v26 + 96);
    uint64_t v34 = *(_OWORD *)(v26 + 9);
    LODWORD(v58[0]) = *((_DWORD *)v26 + 12);
    v58[1] = v30;
    v58[2] = v31;
    uint64_t v59 = v34;
    uint64_t v60 = v32;
    int v61 = v33;
    if (v23 == MEMORY[0x263F8D538])
    {
      v57[0] = v58[0];
      (*(void (**)(void *__return_ptr, void *, void *, double))(*(void *)v29 + 120))(v62, v57, v64, a3);
    }
    else
    {
      uint64_t v56 = v34;
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v23 == v35)
      {
        v57[0] = v58[0];
        v57[1] = v30;
        v57[2] = v31;
        v57[3] = v56;
        uint64_t v38 = *(void (**)(void *__return_ptr, void, void, void, void, double))(*(void *)v29
                                                                                                  + 120);
        id v39 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v38(v62, v57, v64, v23, v39, a3);
      }
      else
      {
        uint64_t v36 = *(void (**)(void *__return_ptr, void, void, void, void, double))(*(void *)v29
                                                                                                  + 120);
        id v37 = lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>();
        v36(v62, v58, v64, v23, v37, a3);
      }
    }
    id v40 = v63;
    uint64_t v41 = HIBYTE(v65);
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if ((v40 & 1) == 0 && (v41 & 1) == 0) {
      goto LABEL_24;
    }
    if (v24 >= *(void *)(v42 + 16)) {
      goto LABEL_50;
    }
    int v43 = v21;
    uint64_t v44 = a2;
    uint64_t v45 = v11;
    double v46 = *(void *)(v42 + 80 * v24 + 104);
    if (v46 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v47 = result;
      if (result)
      {
LABEL_38:
        if (v47 < 1) {
          goto LABEL_51;
        }
        for (j = 0; j != v47; ++j)
        {
          if ((v46 & 0xC000000000000001) != 0)
          {
            uint64_t v49 = MEMORY[0x24C523D60](j, v46);
          }
          else
          {
            uint64_t v49 = *(void *)(v46 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v49 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v47) {
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v45;
    IndexSet.insert(_:)(v24);
    a2 = v44;
    uint64_t v21 = v43;
    uint64_t v23 = v55;
LABEL_24:
    if (++v24 == v21) {
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(long long *__return_ptr, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v34;
  void (*v35)(long long *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double);
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _OWORD v51[2];
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  void v56[2];
  __int16 v57;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v49 = (uint64_t)&v46 - v9;
  unsigned __int8 v48 = type metadata accessor for IndexSet();
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 128) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 128) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v3 + 120);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v3 + 120);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_52;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = v4 + 136;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 136) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    uint64_t v44 = v49;
    specialized Collection.subscript.getter(v49);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v44);
    uint64_t v45 = *(void *)(*(void *)v20 + 16);
    if (v45 < result) {
      goto LABEL_51;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v45);
    outlined destroy of Slice<IndexSet>(v44);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v11, v48);
  }
  type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(0);
  uint64_t v23 = v22;
  unint64_t v24 = 0;
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2) = *MEMORY[0x263F288F8];
  }
  uint64_t v25 = MEMORY[0x263F8D538];
  int8x16_t v50 = a2;
  while (1)
  {
    swift_beginAccess();
    id v26 = *(void **)v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v20 = v26;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      id v26 = (void *)result;
      *(void *)uint64_t v20 = result;
    }
    if (v24 >= v26[2]) {
      break;
    }
    uint64_t v27 = &v26[6 * v24];
    uint64_t v28 = v27[5];
    swift_bridgeObjectRetain();
    uint64_t v29 = AGCreateWeakAttribute();
    v56[0] = v28;
    v56[1] = v29;
    int v57 = 0;
    uint64_t v30 = v27[4];
    uint64_t v31 = v27[8];
    int v54 = *((_OWORD *)v27 + 3);
    *(void *)&id v55 = v31;
    if (v23 == v25)
    {
      *(void *)&v51[0] = v54;
      (*(void (**)(long long *__return_ptr, _OWORD *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v30 + 120))(&v52, v51, v56, v25, &protocol witness table for Double, a3);
    }
    else
    {
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v23 == v32)
      {
        v51[0] = v54;
        v51[1] = v55;
        uint64_t v35 = *(void (**)(long long *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
        uint64_t v36 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v35(&v52, v51, v56, v23, v36, a3);
      }
      else
      {
        uint64_t v33 = *(void (**)(long long *__return_ptr, long long *, void *, uint64_t, uint64_t, double))(*(void *)v30 + 120);
        uint64_t v34 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
        v33(&v52, &v54, v56, v23, v34, a3);
      }
    }
    id v37 = BYTE8(v53);
    uint64_t v38 = HIBYTE(v57);
    swift_bridgeObjectRelease();
    id v39 = *(void *)v20;
    uint64_t result = swift_endAccess();
    if ((v37 & 1) == 0 && (v38 & 1) == 0) {
      goto LABEL_23;
    }
    if (v24 >= *(void *)(v39 + 16)) {
      goto LABEL_49;
    }
    id v40 = *(void *)(v39 + 48 * v24 + 72);
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v41 = result;
      if (result)
      {
LABEL_37:
        if (v41 < 1) {
          goto LABEL_50;
        }
        for (j = 0; j != v41; ++j)
        {
          if ((v40 & 0xC000000000000001) != 0)
          {
            int v43 = MEMORY[0x24C523D60](j, v40);
          }
          else
          {
            int v43 = *(void *)(v40 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v43 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v41) {
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
    uint64_t v25 = MEMORY[0x263F8D538];
LABEL_23:
    if (++v24 == v21) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  ValueMetadata *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  ValueMetadata *v30;
  void (*v31)(long long *__return_ptr, _OWORD *, void *, ValueMetadata *, unint64_t, double);
  unint64_t v32;
  uint64_t v33;
  long long v34;
  void (*v35)(long long *__return_ptr, _OWORD *, void *, ValueMetadata *, uint64_t, double);
  uint64_t v36;
  char v37;
  uint64_t v38;
  ValueMetadata *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t j;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD v53[3];
  long long v54;
  void v55[2];
  __int16 v56;

  uint64_t v4 = v3;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v51 = (uint64_t)&v48 - v9;
  int8x16_t v50 = type metadata accessor for IndexSet();
  uint64_t v49 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v4 + 160) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v4 + 160) = a1 & 1;
  uint64_t v12 = (uint64_t *)(v4 + 152);
  swift_beginAccess();
  unint64_t v13 = *(void *)(v4 + 152);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1) {
          goto LABEL_51;
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x24C523D60](i, v14);
          }
          else
          {
            uint64_t v18 = *(void *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v20 = (uint64_t *)(v4 + 168);
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 168) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v21 = *(void *)(*v20 + 16);
  if (!v21)
  {
LABEL_44:
    swift_beginAccess();
    double v46 = v51;
    specialized Collection.subscript.getter(v51);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v46);
    uint64_t v47 = *(void *)(*v20 + 16);
    if (v47 < result) {
      goto LABEL_50;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v47);
    outlined destroy of Slice<IndexSet>(v46);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v11, v50);
  }
  uint64_t v22 = 0;
  if ((a2 & 0x100000000) != 0) {
    a2 = *MEMORY[0x263F288F8];
  }
  else {
    a2 = a2;
  }
  uint64_t v23 = &type metadata for _AnyAnimatableData;
  uint64_t v52 = *(void *)(*v20 + 16);
  while (1)
  {
    swift_beginAccess();
    unint64_t v24 = (void *)*v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v20 = (uint64_t)v24;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      unint64_t v24 = (void *)result;
      *uint64_t v20 = result;
    }
    if (v22 >= v24[2]) {
      break;
    }
    uint64_t v25 = &v24[8 * v22];
    id v26 = v25[5];
    swift_bridgeObjectRetain();
    uint64_t v27 = AGCreateWeakAttribute();
    v55[0] = v26;
    v55[1] = v27;
    uint64_t v56 = 0;
    uint64_t v28 = v25[4];
    uint64_t v29 = v25 + 6;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v30 == v23)
    {
      uint64_t v34 = *((_OWORD *)v25 + 4);
      v53[0] = *v29;
      v53[1] = v34;
      uint64_t v35 = *(void (**)(long long *__return_ptr, _OWORD *, void *, ValueMetadata *, uint64_t, double))(*(void *)v28 + 120);
      uint64_t v36 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v35(&v54, v53, v55, v23, v36, a3);
    }
    else
    {
      uint64_t v31 = *(void (**)(long long *__return_ptr, _OWORD *, void *, ValueMetadata *, unint64_t, double))(*(void *)v28 + 120);
      uint64_t v32 = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
      v31(&v54, v29, v55, v23, v32, a3);
    }
    uint64_t v33 = v54;
    id v37 = HIBYTE(v56);
    outlined destroy of _AnyAnimatableData?((uint64_t)&v54);
    swift_bridgeObjectRelease();
    uint64_t v38 = *v20;
    uint64_t result = swift_endAccess();
    if (v33 && (v37 & 1) == 0) {
      goto LABEL_24;
    }
    if (v22 >= *(void *)(v38 + 16)) {
      goto LABEL_48;
    }
    id v39 = v23;
    id v40 = a2;
    uint64_t v41 = v11;
    uint64_t v42 = *(void *)(v38 + (v22 << 6) + 88);
    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      int v43 = result;
      if (result)
      {
LABEL_36:
        if (v43 < 1) {
          goto LABEL_49;
        }
        for (j = 0; j != v43; ++j)
        {
          if ((v42 & 0xC000000000000001) != 0)
          {
            uint64_t v45 = MEMORY[0x24C523D60](j, v42);
          }
          else
          {
            uint64_t v45 = *(void *)(v42 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v45 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      int v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v43) {
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v41;
    IndexSet.insert(_:)(v22);
    a2 = v40;
    uint64_t v23 = v39;
    uint64_t v21 = v52;
LABEL_24:
    if (++v22 == v21) {
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  if ((*(unsigned char *)(v6 + 112) & 1) == 0)
  {
    uint64_t v12 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v13 = *(void *)(v6 + 104);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v21) {
        return result;
      }
    }
    else if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v14 = *(void *)(v6 + 104);
    uint64_t v15 = (void *)(v6 + 120);
    swift_beginAccess();
    uint64_t v16 = *(void **)(v6 + 120);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 120) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *uint64_t v15 = v16;
    }
    unint64_t v19 = v16[2];
    unint64_t v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
      *uint64_t v15 = v16;
    }
    v16[2] = v19 + 1;
    uint64_t v20 = (float *)&v16[5 * v19];
    *((void *)v20 + 4) = v12;
    *((void *)v20 + 5) = a2;
    v20[12] = a3;
    v20[13] = a4;
    v20[14] = a5;
    v20[15] = a6;
    *((void *)v20 + 8) = v14;
    swift_endAccess();
    *(void *)(v6 + 104) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, double a3)
{
  if ((*(unsigned char *)(v3 + 96) & 1) == 0)
  {
    uint64_t v6 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v7 = *(void *)(v3 + 88);
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v15) {
        return result;
      }
    }
    else if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v8 = *(void *)(v3 + 88);
    uint64_t v9 = (void *)(v3 + 104);
    swift_beginAccess();
    uint64_t v10 = *(void **)(v3 + 104);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 104) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *uint64_t v9 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *uint64_t v9 = v10;
    }
    v10[2] = v13 + 1;
    uint64_t v14 = (double *)&v10[4 * v13];
    *((void *)v14 + 4) = v6;
    *((void *)v14 + 5) = a2;
    v14[6] = a3;
    *((void *)v14 + 7) = v8;
    swift_endAccess();
    *(void *)(v3 + 88) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;

  if ((*(unsigned char *)(v3 + 96) & 1) == 0)
  {
    uint64_t v6 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v7 = *(void *)(v3 + 88);
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v15) {
        return result;
      }
    }
    else if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v8 = *(void *)(v3 + 88);
    uint64_t v9 = (void *)(v3 + 104);
    swift_beginAccess();
    uint64_t v10 = *(void **)(v3 + 104);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 104) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *uint64_t v9 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *uint64_t v9 = v10;
    }
    v10[2] = v13 + 1;
    uint64_t v14 = (double *)&v10[4 * v13];
    *((void *)v14 + 4) = v6;
    *((void *)v14 + 5) = a2;
    v14[6] = a3;
    *((void *)v14 + 7) = v8;
    swift_endAccess();
    *(void *)(v3 + 88) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(BOOL, uint64_t, uint64_t, uint64_t))
{
  if ((*(unsigned char *)(v4 + 96) & 1) == 0)
  {
    uint64_t v8 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v9 = *(void *)(v4 + 88);
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v17) {
        return result;
      }
    }
    else if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v10 = *(void *)(v4 + 88);
    uint64_t v11 = (uint64_t *)(v4 + 104);
    swift_beginAccess();
    uint64_t v12 = *(void *)(v4 + 104);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v4 + 104) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v12 = a4(0, *(void *)(v12 + 16) + 1, 1, v12);
      uint64_t *v11 = v12;
    }
    unint64_t v15 = *(void *)(v12 + 16);
    unint64_t v14 = *(void *)(v12 + 24);
    if (v15 >= v14 >> 1)
    {
      uint64_t v12 = a4(v14 > 1, v15 + 1, 1, v12);
      uint64_t *v11 = v12;
    }
    *(void *)(v12 + 16) = v15 + 1;
    uint64_t v16 = (void *)(v12 + 32 * v15);
    v16[4] = v8;
    v16[5] = a2;
    v16[6] = a3;
    v16[7] = v10;
    swift_endAccess();
    *(void *)(v4 + 88) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, long long *a3)
{
  if ((*(unsigned char *)(v3 + 208) & 1) == 0)
  {
    uint64_t v5 = result;
    long long v17 = a3[1];
    long long v18 = *a3;
    long long v15 = a3[2];
    long long v16 = a3[3];
    uint64_t result = swift_beginAccess();
    unint64_t v6 = *(void *)(v3 + 200);
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v14) {
        return result;
      }
    }
    else if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v7 = *(void *)(v3 + 200);
    uint64_t v8 = (void *)(v3 + 216);
    swift_beginAccess();
    unint64_t v9 = *(void **)(v3 + 216);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 216) = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      *uint64_t v8 = v9;
    }
    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      *uint64_t v8 = v9;
    }
    v9[2] = v12 + 1;
    unint64_t v13 = &v9[11 * v12];
    v13[4] = v5;
    v13[5] = a2;
    *((_OWORD *)v13 + 3) = v18;
    *((_OWORD *)v13 + 4) = v17;
    *((_OWORD *)v13 + 5) = v15;
    *((_OWORD *)v13 + 6) = v16;
    v13[14] = v7;
    swift_endAccess();
    *(void *)(v3 + 200) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  long long v12;
  void v13[2];
  long long v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(unsigned char *)(v3 + 160) & 1) == 0)
  {
    uint64_t v4 = v3;
    unint64_t v6 = result;
    unint64_t v11 = a3[1];
    unint64_t v12 = *a3;
    uint64_t v7 = *((void *)a3 + 4);
    uint64_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(v3 + 152);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v10) {
        return result;
      }
    }
    else if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    unint64_t v9 = *(void *)(v4 + 152);
    v13[0] = v6;
    v13[1] = a2;
    uint64_t v14 = v12;
    long long v15 = v11;
    long long v16 = v7;
    long long v17 = v9;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v13);
    swift_endAccess();
    *(void *)(v4 + 152) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  long long v12;
  void v13[2];
  long long v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(unsigned char *)(v3 + 160) & 1) == 0)
  {
    uint64_t v4 = v3;
    unint64_t v6 = result;
    unint64_t v11 = a3[1];
    unint64_t v12 = *a3;
    uint64_t v7 = *((void *)a3 + 4);
    uint64_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(v3 + 152);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v10) {
        return result;
      }
    }
    else if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    unint64_t v9 = *(void *)(v4 + 152);
    v13[0] = v6;
    v13[1] = a2;
    uint64_t v14 = v12;
    long long v15 = v11;
    long long v16 = v7;
    long long v17 = v9;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v13);
    swift_endAccess();
    *(void *)(v4 + 152) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  void v12[2];
  long long v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(unsigned char *)(v3 + 128) & 1) == 0)
  {
    uint64_t v4 = v3;
    unint64_t v6 = result;
    unint64_t v11 = *a3;
    uint64_t v7 = *((void *)a3 + 2);
    uint64_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(v3 + 120);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v10) {
        return result;
      }
    }
    else if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    unint64_t v9 = *(void *)(v4 + 120);
    v12[0] = v6;
    v12[1] = a2;
    unint64_t v13 = v11;
    uint64_t v14 = v7;
    long long v15 = v9;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v12);
    swift_endAccess();
    *(void *)(v4 + 120) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, double a3, double a4, double a5)
{
  if ((*(unsigned char *)(v5 + 128) & 1) == 0)
  {
    uint64_t v10 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v11 = *(void *)(v5 + 120);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v19) {
        return result;
      }
    }
    else if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v12 = *(void *)(v5 + 120);
    unint64_t v13 = (void *)(v5 + 136);
    swift_beginAccess();
    uint64_t v14 = *(void **)(v5 + 136);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 136) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *unint64_t v13 = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *unint64_t v13 = v14;
    }
    v14[2] = v17 + 1;
    long long v18 = (double *)&v14[6 * v17];
    *((void *)v18 + 4) = v10;
    *((void *)v18 + 5) = a2;
    v18[6] = a3;
    v18[7] = a4;
    v18[8] = a5;
    *((void *)v18 + 9) = v12;
    swift_endAccess();
    *(void *)(v5 + 120) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void v15[6];

  if ((*(unsigned char *)(v5 + 128) & 1) == 0)
  {
    unint64_t v6 = v5;
    unint64_t v11 = result;
    uint64_t result = swift_beginAccess();
    uint64_t v12 = *(void *)(v5 + 120);
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v14) {
        return result;
      }
    }
    else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    unint64_t v13 = *(void *)(v6 + 120);
    v15[0] = v11;
    v15[1] = a2;
    *(double *)&v15[2] = a3;
    *(double *)&v15[3] = a4;
    *(double *)&v15[4] = a5;
    v15[5] = v13;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(void *)(v6 + 120) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void v15[6];

  if ((*(unsigned char *)(v5 + 128) & 1) == 0)
  {
    unint64_t v6 = v5;
    unint64_t v11 = result;
    uint64_t result = swift_beginAccess();
    uint64_t v12 = *(void *)(v5 + 120);
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v14) {
        return result;
      }
    }
    else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    unint64_t v13 = *(void *)(v6 + 120);
    v15[0] = v11;
    v15[1] = a2;
    *(double *)&v15[2] = a3;
    *(double *)&v15[3] = a4;
    *(double *)&v15[4] = a5;
    v15[5] = v13;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(void *)(v6 + 120) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  if ((*(unsigned char *)(v6 + 144) & 1) == 0)
  {
    uint64_t v12 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v13 = *(void *)(v6 + 136);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v21) {
        return result;
      }
    }
    else if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v14 = *(void *)(v6 + 136);
    long long v15 = (void *)(v6 + 152);
    swift_beginAccess();
    unint64_t v16 = *(void **)(v6 + 152);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 152) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *long long v15 = v16;
    }
    unint64_t v19 = v16[2];
    unint64_t v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
      *long long v15 = v16;
    }
    v16[2] = v19 + 1;
    uint64_t v20 = (double *)&v16[7 * v19];
    *((void *)v20 + 4) = v12;
    *((void *)v20 + 5) = a2;
    v20[6] = a3;
    v20[7] = a4;
    v20[8] = a5;
    v20[9] = a6;
    *((void *)v20 + 10) = v14;
    swift_endAccess();
    *(void *)(v6 + 136) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void v17[7];

  if ((*(unsigned char *)(v6 + 144) & 1) == 0)
  {
    uint64_t v7 = v6;
    unint64_t v13 = result;
    uint64_t result = swift_beginAccess();
    uint64_t v14 = *(void *)(v6 + 136);
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v16) {
        return result;
      }
    }
    else if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    long long v15 = *(void *)(v7 + 136);
    v17[0] = v13;
    v17[1] = a2;
    *(double *)&v17[2] = a3;
    *(double *)&v17[3] = a4;
    *(double *)&v17[4] = a5;
    *(double *)&v17[5] = a6;
    v17[6] = v15;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v17);
    swift_endAccess();
    *(void *)(v7 + 136) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, unint64_t a2, double a3, double a4)
{
  if ((*(unsigned char *)(v4 + 112) & 1) == 0)
  {
    uint64_t v5 = v4;
    unint64_t v9 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v10 = *(void *)(v4 + 104);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12) {
        return result;
      }
    }
    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *(void *)(v5 + 104);
    v13.n128_u64[0] = v9;
    v13.n128_u64[1] = a2;
    double v14 = a3;
    double v15 = a4;
    uint64_t v16 = v11;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)(&v13);
    swift_endAccess();
    *(void *)(v5 + 104) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if ((*(unsigned char *)(v3 + 144) & 1) == 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *(void *)(a3 + 8);
    long long v13 = *(_OWORD *)(a3 + 16);
    uint64_t result = swift_beginAccess();
    unint64_t v10 = *(void *)(v4 + 136);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12) {
        return result;
      }
    }
    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *(void *)(v4 + 136);
    v14[0] = v7;
    v14[1] = a2;
    v14[2] = v8;
    v14[3] = v9;
    long long v15 = v13;
    uint64_t v16 = v11;
    swift_beginAccess();
    outlined retain of Text.Effect.RenderSegmentation.StaticLines(a3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v14);
    swift_endAccess();
    *(void *)(v4 + 136) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  void v15[2];
  long long v16;
  long long v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  uint64_t v4 = v3;
  if ((*(unsigned char *)(v3 + 176) & 1) == 0)
  {
    uint64_t v7 = result;
    long long v13 = *(_OWORD *)(a3 + 16);
    double v14 = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = *(unsigned char *)(a3 + 40);
    uint64_t result = swift_beginAccess();
    unint64_t v10 = *(void *)(v4 + 168);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12) {
        return result;
      }
    }
    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *(void *)(v4 + 168);
    v15[0] = v7;
    v15[1] = a2;
    uint64_t v16 = v14;
    unint64_t v17 = v13;
    unint64_t v18 = v8;
    unint64_t v19 = v9;
    uint64_t v20 = v11;
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(a3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(void *)(v4 + 168) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  void v15[2];
  long long v16;
  uint64_t v17;
  char v18;
  long long v19;
  uint64_t v20;

  uint64_t v4 = v3;
  if ((*(unsigned char *)(v3 + 176) & 1) == 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(unsigned char *)(a3 + 24);
    long long v13 = *(_OWORD *)(a3 + 32);
    double v14 = *(_OWORD *)a3;
    uint64_t result = swift_beginAccess();
    unint64_t v10 = *(void *)(v4 + 168);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12) {
        return result;
      }
    }
    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *(void *)(v4 + 168);
    v15[0] = v7;
    v15[1] = a2;
    uint64_t v16 = v14;
    unint64_t v17 = v8;
    unint64_t v18 = v9;
    unint64_t v19 = v13;
    uint64_t v20 = v11;
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(a3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(void *)(v4 + 168) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  void v15[2];
  long long v16;
  uint64_t v17;
  char v18;
  long long v19;
  uint64_t v20;

  uint64_t v4 = v3;
  if ((*(unsigned char *)(v3 + 176) & 1) == 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(unsigned char *)(a3 + 24);
    long long v13 = *(_OWORD *)(a3 + 32);
    double v14 = *(_OWORD *)a3;
    uint64_t result = swift_beginAccess();
    unint64_t v10 = *(void *)(v4 + 168);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12) {
        return result;
      }
    }
    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *(void *)(v4 + 168);
    v15[0] = v7;
    v15[1] = a2;
    uint64_t v16 = v14;
    unint64_t v17 = v8;
    unint64_t v18 = v9;
    unint64_t v19 = v13;
    uint64_t v20 = v11;
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(a3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(void *)(v4 + 168) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  _OWORD v19[6];
  long long v20;
  long long v21;
  long long v22[8];

  uint64_t v4 = v3;
  if ((*(unsigned char *)(v3 + 288) & 1) == 0)
  {
    uint64_t v7 = result;
    unint64_t v17 = *(_OWORD *)(a3 + 16);
    unint64_t v18 = *(_OWORD *)a3;
    long long v15 = *(_OWORD *)(a3 + 48);
    uint64_t v16 = *(_OWORD *)(a3 + 32);
    double v14 = *(_OWORD *)(a3 + 64);
    uint64_t v8 = *(unsigned char *)(a3 + 80);
    uint64_t v9 = *(_DWORD *)(a3 + 88);
    unint64_t v10 = *(void *)(a3 + 96);
    uint64_t result = swift_beginAccess();
    uint64_t v11 = *(void *)(v4 + 280);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      long long v13 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v13) {
        return result;
      }
    }
    else if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v12 = *(void *)(v4 + 280);
    *(void *)&v19[0] = v7;
    *((void *)&v19[0] + 1) = a2;
    v19[1] = v18;
    v19[2] = v17;
    v19[3] = v16;
    v19[4] = v15;
    v19[5] = v14;
    LOBYTE(v20) = v8;
    DWORD2(v20) = v9;
    *(void *)&uint64_t v21 = v10;
    *((void *)&v21 + 1) = v12;
    v22[4] = v15;
    v22[5] = v14;
    v22[0] = v19[0];
    v22[1] = v18;
    v22[2] = v17;
    v22[3] = v16;
    v22[6] = v20;
    v22[7] = v21;
    swift_beginAccess();
    outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a3);
    outlined retain of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)v19);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append(_:)(v22);
    swift_endAccess();
    *(void *)(v4 + 280) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    return outlined release of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)v19);
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  if ((*(unsigned char *)(v4 + 112) & 1) == 0)
  {
    unint64_t v9 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v10 = *(void *)(v5 + 104);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12) {
        return result;
      }
    }
    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *(void *)(v5 + 104);
    v13.n128_u64[0] = v9;
    v13.n128_u64[1] = a2;
    uint64_t v14 = a3;
    char v15 = a4;
    uint64_t v16 = v11;
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)(&v13);
    swift_endAccess();
    *(void *)(v5 + 104) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t result = outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)v23);
  if ((*(unsigned char *)(v4 + 256) & 1) == 0)
  {
    uint64_t v10 = v23[0];
    uint64_t v9 = v23[1];
    uint64_t v11 = v23[3];
    uint64_t v20 = v23[5];
    uint64_t v21 = v23[4];
    uint64_t v22 = v23[6];
    uint64_t v18 = v23[2];
    uint64_t v19 = v23[7];
    uint64_t v15 = v23[9];
    uint64_t v16 = v23[8];
    char v17 = v24;
    uint64_t result = swift_beginAccess();
    unint64_t v12 = *(void *)(v4 + 248);
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v14) {
        return result;
      }
    }
    else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v13 = *(void *)(v4 + 248);
    *(void *)&long long v25 = a1;
    *((void *)&v25 + 1) = a2;
    uint64_t v26 = v10;
    uint64_t v27 = v9;
    uint64_t v28 = v18;
    uint64_t v29 = v11;
    uint64_t v30 = v21;
    uint64_t v31 = v20;
    uint64_t v32 = v22;
    uint64_t v33 = v19;
    uint64_t v34 = v16;
    uint64_t v35 = v15;
    char v36 = v17;
    uint64_t v37 = v13;
    swift_beginAccess();
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(a3, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v10, v9, v18, v11, v21, v20, v22, v19, v16, v15, v17);
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Array.append(_:)(&v25);
    swift_endAccess();
    *(void *)(v4 + 248) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v10, v9, v18, v11, v21, v20, v22, v19, v16, v15, v17);
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  _OWORD v15[2];
  uint64_t v16;
  char v17;
  void v18[2];
  long long v19;
  long long v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  uint64_t v4 = v3;
  uint64_t result = outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)v15);
  if ((*(unsigned char *)(v3 + 176) & 1) == 0)
  {
    uint64_t v13 = v15[1];
    uint64_t v14 = v15[0];
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    uint64_t result = swift_beginAccess();
    uint64_t v10 = *(void *)(v3 + 168);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12) {
        return result;
      }
    }
    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *(void *)(v4 + 168);
    v18[0] = a1;
    v18[1] = a2;
    uint64_t v19 = v14;
    uint64_t v20 = v13;
    uint64_t v21 = v8;
    uint64_t v22 = v9;
    uint64_t v23 = v11;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v18);
    swift_endAccess();
    *(void *)(v4 + 168) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, int *a3)
{
  if ((*(unsigned char *)(v3 + 192) & 1) == 0)
  {
    uint64_t v4 = v3;
    uint64_t v6 = result;
    int v7 = *a3;
    long long v13 = *(_OWORD *)(a3 + 6);
    long long v14 = *(_OWORD *)(a3 + 2);
    uint64_t v8 = *((void *)a3 + 5);
    char v9 = *((unsigned char *)a3 + 48);
    uint64_t result = swift_beginAccess();
    unint64_t v10 = *(void *)(v3 + 184);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v12) {
        return result;
      }
    }
    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    uint64_t v11 = *(void *)(v4 + 184);
    v15[0] = v6;
    v15[1] = a2;
    int v16 = v7;
    long long v17 = v14;
    long long v18 = v13;
    uint64_t v19 = v8;
    char v20 = v9 & 1;
    uint64_t v21 = v11;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(void *)(v4 + 184) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if ((*(unsigned char *)(v3 + 160) & 1) == 0)
  {
    uint64_t v7 = result;
    uint64_t result = swift_beginAccess();
    unint64_t v8 = *(void *)(v4 + 152);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v10) {
        return result;
      }
    }
    else if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    outlined init with copy of _AnyAnimatableData(a3, v13);
    uint64_t v9 = *(void *)(v4 + 152);
    v12[0] = v7;
    v12[1] = a2;
    v13[5] = v9;
    outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)v12, (uint64_t)v11);
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append(_:)((uint64_t)v11);
    swift_endAccess();
    *(void *)(v4 + 152) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    return outlined destroy of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)v12);
  }
  return result;
}

void AnimatorState.forkListeners(animation:state:interval:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v24 = a3;
  uint64_t v26 = a1;
  uint64_t v5 = *v3;
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 80);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = type metadata accessor for AnimatorState.Fork();
  uint64_t v25 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int v16 = (char *)&v23 - v15;
  uint64_t v23 = *a2;
  if ((*((unsigned char *)v3 + *(void *)(v5 + 184)) & 1) == 0)
  {
    long long v17 = (uint64_t *)((char *)v3 + *(void *)(v6 + 176));
    swift_beginAccess();
    if ((unint64_t)*v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v22) {
        return;
      }
    }
    else if (!*(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v24, v7);
    uint64_t v18 = v8;
    uint64_t v19 = *v17;
    uint64_t v20 = v23;
    *(void *)int v16 = v26;
    *((void *)v16 + 1) = v20;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v16[*(int *)(v11 + 40)], v10, v7);
    *(void *)&v16[*(int *)(v11 + 44)] = v19;
    uint64_t v21 = v25;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v13, v16, v11);
    swift_beginAccess();
    type metadata accessor for Array();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Array.append(_:)();
    swift_endAccess();
    uint64_t *v17 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v11);
  }
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v3 + 32) = v7;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = v7;
  *(_DWORD *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 76) = 1;
  *(void *)(v3 + 80) = v7;
  *(void *)(v3 + 88) = v7;
  *(unsigned char *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  *(void *)(v3 + 32) = a2;
  swift_retain();
  swift_bridgeObjectRelease();
  *(double *)(v3 + 40) = a3;
  *(double *)(v3 + 56) = a3;
  uint64_t v9 = swift_retain();
  uint64_t v10 = specialized find<A>(_:key:)(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  double v11 = *(double *)(v10 + 72);
  char v12 = *(unsigned char *)(v10 + 80);
  swift_release();
  if (v12)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v15 = 0;
    *(void *)(v3 + 48) = 0;
    goto LABEL_8;
  }
  if (v11 <= 0.0)
  {
    *(void *)(v3 + 48) = 0;
  }
  else
  {
    long double v13 = log2(v11 * 240.0);
    long double v14 = exp2(floor(v13 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 48) = v14;
    if (v14 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v15 = 0;
LABEL_8:
      char v16 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v17 = swift_retain();
  uint64_t v18 = specialized find<A>(_:key:)(v17);
  if (v18)
  {
    int v15 = *(_DWORD *)(v18 + 72);
    char v16 = *(unsigned char *)(v18 + 76);
  }
  else
  {
    int v15 = 0;
    char v16 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v3 + 72) = v15;
  *(unsigned char *)(v3 + 76) = v16;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v3 + 32) = 0u;
  *(_WORD *)(v3 + 140) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = v7;
  *(void *)(v3 + 152) = v7;
  *(unsigned char *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  uint64_t v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v9;
  *(void *)(v3 + 64) = *(void *)(a2 + 32);
  *(double *)(v3 + 72) = a3;
  *(double *)(v3 + 88) = a3;
  swift_retain();
  uint64_t v10 = swift_retain();
  double v11 = specialized find<A>(_:key:)(v10);
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  char v12 = *(double *)(v11 + 72);
  long double v13 = *(unsigned char *)(v11 + 80);
  swift_release();
  if (v13)
  {
LABEL_7:
    swift_release();
    swift_release();
    char v16 = 0;
    *(void *)(v3 + 80) = 0;
    uint64_t v17 = 1;
    goto LABEL_13;
  }
  if (v12 <= 0.0)
  {
    *(void *)(v3 + 80) = 0;
  }
  else
  {
    long double v14 = log2(v12 * 240.0);
    int v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 80) = v15;
    if (v15 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      char v16 = 0;
      uint64_t v17 = 1;
      goto LABEL_13;
    }
  }
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (v19)
  {
    char v16 = *(_DWORD *)(v19 + 72);
    uint64_t v17 = *(unsigned char *)(v19 + 76);
  }
  else
  {
    char v16 = 0;
    uint64_t v17 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 136) = v16;
  *(unsigned char *)(v3 + 140) = v17;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  char v23;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  long double v28;
  long double v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v3 + 32) = 0u;
  uint64_t v9 = v3 + 32;
  *(unsigned char *)(v3 + 112) = 9;
  *(unsigned char *)(v3 + 240) = 9;
  *(_WORD *)(v3 + 268) = 1;
  uint64_t v33 = (char *)(v3 + 268);
  uint64_t v34 = v3;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = v7;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(void *)(v3 + 232) = 0;
  *(_DWORD *)(v3 + 248) = 0;
  *(void *)(v3 + 256) = v7;
  *(_DWORD *)(v3 + 264) = 0;
  *(void *)(v3 + 272) = v7;
  *(void *)(v3 + 280) = v7;
  *(unsigned char *)(v3 + 288) = 0;
  *(void *)(v3 + 296) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v3 + 32);
  double v11 = *(void *)(v3 + 40);
  char v12 = *(void *)(v3 + 56);
  long double v13 = *(void *)(v3 + 64);
  uint64_t v37 = *(void *)(v3 + 80);
  uint64_t v38 = *(void *)(v3 + 72);
  long double v14 = *(void *)(v3 + 96);
  char v36 = *(void *)(v9 + 56);
  int v15 = *(void *)(v9 + 72);
  char v16 = *(unsigned char *)(v9 + 80);
  uint64_t v35 = *(void *)(v9 + 16);
  swift_retain();
  outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
  uint64_t v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v9 + 80) = v17;
  *(void *)(v9 + 96) = *(void *)(a2 + 96);
  uint64_t v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v18;
  uint64_t v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 48) = v19;
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v10, v11, v35, v12, v13, v38, v37, v36, v14, v15, v16);
  swift_bridgeObjectRelease();
  *(double *)(v9 + 104) = a3;
  *(double *)(v9 + 120) = a3;
  uint64_t v20 = swift_retain();
  uint64_t v21 = specialized find<A>(_:key:)(v20);
  if (!v21)
  {
    swift_release();
    uint64_t v25 = v33;
    uint64_t v24 = v34;
    goto LABEL_5;
  }
  uint64_t v22 = *(double *)(v21 + 72);
  uint64_t v23 = *(unsigned char *)(v21 + 80);
  swift_release();
  if (v23)
  {
    uint64_t v25 = v33;
    uint64_t v24 = v34;
LABEL_5:
    swift_release();
    swift_release();
    outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
    uint64_t v26 = 0;
    *(void *)(v24 + 144) = 0;
    uint64_t v27 = 1;
    goto LABEL_14;
  }
  if (v22 <= 0.0)
  {
    uint64_t v25 = v33;
    uint64_t v24 = v34;
    *(void *)(v34 + 144) = 0;
  }
  else
  {
    uint64_t v28 = log2(v22 * 240.0);
    uint64_t v29 = exp2(floor(v28 + 0.01)) * 0.00416666667;
    uint64_t v25 = v33;
    uint64_t v24 = v34;
    *(long double *)(v34 + 144) = v29;
    if (v29 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
      uint64_t v26 = 0;
      uint64_t v27 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v30 = swift_retain();
  uint64_t v31 = specialized find<A>(_:key:)(v30);
  if (v31)
  {
    uint64_t v26 = *(_DWORD *)(v31 + 72);
    uint64_t v27 = *(unsigned char *)(v31 + 76);
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 1;
  }
  swift_release();
  swift_release_n();
  outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
LABEL_14:
  *(_DWORD *)(v24 + 264) = v26;
  *uint64_t v25 = v27;
  return v24;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  long double v25;
  long double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v30 = v3;
  *(_OWORD *)(v3 + 32) = 0u;
  uint64_t v9 = v3 + 32;
  *(unsigned char *)(v3 + 112) = 9;
  *(unsigned char *)(v3 + 224) = 9;
  *(_WORD *)(v3 + 232) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(void *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 228) = 0;
  *(void *)(v3 + 240) = v7;
  *(void *)(v3 + 248) = v7;
  *(unsigned char *)(v3 + 256) = 0;
  *(void *)(v3 + 264) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v3 + 32);
  double v11 = *(void *)(v3 + 48);
  char v12 = *(void *)(v3 + 56);
  long double v13 = *(void *)(v3 + 64);
  uint64_t v33 = *(void *)(v3 + 72);
  uint64_t v34 = *(void *)(v3 + 40);
  long double v14 = *(void *)(v3 + 96);
  uint64_t v31 = *(void *)(v3 + 88);
  uint64_t v32 = *(void *)(v3 + 80);
  int v15 = *(void *)(v3 + 104);
  char v16 = *(unsigned char *)(v3 + 112);
  swift_retain();
  outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a2, v9);
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v10, v34, v11, v12, v13, v33, v32, v31, v14, v15, v16);
  *(double *)(v9 + 88) = a3;
  *(double *)(v9 + 104) = a3;
  uint64_t v17 = swift_retain();
  uint64_t v18 = specialized find<A>(_:key:)(v17);
  if (!v18)
  {
    swift_release();
    uint64_t v21 = a2;
    uint64_t v22 = v30;
    goto LABEL_5;
  }
  uint64_t v19 = *(double *)(v18 + 72);
  uint64_t v20 = *(unsigned char *)(v18 + 80);
  swift_release();
  if (v20)
  {
    uint64_t v21 = a2;
    uint64_t v22 = v30;
LABEL_5:
    swift_release();
    swift_release();
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(v21, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
    uint64_t v23 = 0;
    *(void *)(v22 + 128) = 0;
    uint64_t v24 = 1;
    goto LABEL_14;
  }
  if (v19 <= 0.0)
  {
    uint64_t v22 = v30;
    *(void *)(v30 + 128) = 0;
  }
  else
  {
    uint64_t v25 = log2(v19 * 240.0);
    uint64_t v26 = exp2(floor(v25 + 0.01)) * 0.00416666667;
    uint64_t v22 = v30;
    *(long double *)(v30 + 128) = v26;
    if (v26 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      uint64_t v23 = 0;
      uint64_t v24 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v27 = swift_retain();
  uint64_t v28 = specialized find<A>(_:key:)(v27);
  if (v28)
  {
    uint64_t v23 = *(_DWORD *)(v28 + 72);
    uint64_t v24 = *(unsigned char *)(v28 + 76);
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 1;
  }
  swift_release();
  swift_release_n();
  outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
LABEL_14:
  *(_DWORD *)(v22 + 228) = v23;
  *(unsigned char *)(v22 + 232) = v24;
  return v22;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  long double v13;
  long double v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v3 + 32) = 0u;
  *(unsigned char *)(v3 + 72) = 1;
  *(unsigned char *)(v3 + 144) = 1;
  *(_WORD *)(v3 + 152) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 148) = 0;
  *(void *)(v3 + 160) = v7;
  *(void *)(v3 + 168) = v7;
  *(unsigned char *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, v3 + 32);
  *(double *)(v3 + 80) = a3;
  *(double *)(v3 + 96) = a3;
  swift_retain();
  uint64_t v9 = swift_retain();
  uint64_t v10 = specialized find<A>(_:key:)(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  double v11 = *(double *)(v10 + 72);
  char v12 = *(unsigned char *)(v10 + 80);
  swift_release();
  if (v12)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v15 = 0;
    *(void *)(v3 + 88) = 0;
    char v16 = 1;
    goto LABEL_13;
  }
  if (v11 <= 0.0)
  {
    *(void *)(v3 + 88) = 0;
  }
  else
  {
    long double v13 = log2(v11 * 240.0);
    long double v14 = exp2(floor(v13 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 88) = v14;
    if (v14 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v15 = 0;
      char v16 = 1;
      goto LABEL_13;
    }
  }
  uint64_t v17 = swift_retain();
  uint64_t v18 = specialized find<A>(_:key:)(v17);
  if (v18)
  {
    int v15 = *(_DWORD *)(v18 + 72);
    char v16 = *(unsigned char *)(v18 + 76);
  }
  else
  {
    int v15 = 0;
    char v16 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 148) = v15;
  *(unsigned char *)(v3 + 152) = v16;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 80) = 1;
  *(unsigned char *)(v3 + 160) = 1;
  *(_WORD *)(v3 + 168) = 1;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 164) = 0;
  *(void *)(v3 + 176) = v7;
  *(void *)(v3 + 184) = v7;
  *(unsigned char *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  uint64_t v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v9;
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(v3 + 80) = *(unsigned char *)(a2 + 48);
  *(double *)(v3 + 88) = a3;
  *(double *)(v3 + 104) = a3;
  swift_retain();
  uint64_t v10 = swift_retain();
  double v11 = specialized find<A>(_:key:)(v10);
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  char v12 = *(double *)(v11 + 72);
  long double v13 = *(unsigned char *)(v11 + 80);
  swift_release();
  if (v13)
  {
LABEL_7:
    swift_release();
    swift_release();
    char v16 = 0;
    *(void *)(v3 + 96) = 0;
    uint64_t v17 = 1;
    goto LABEL_13;
  }
  if (v12 <= 0.0)
  {
    *(void *)(v3 + 96) = 0;
  }
  else
  {
    long double v14 = log2(v12 * 240.0);
    int v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 96) = v15;
    if (v15 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      char v16 = 0;
      uint64_t v17 = 1;
      goto LABEL_13;
    }
  }
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (v19)
  {
    char v16 = *(_DWORD *)(v19 + 72);
    uint64_t v17 = *(unsigned char *)(v19 + 76);
  }
  else
  {
    char v16 = 0;
    uint64_t v17 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 164) = v16;
  *(unsigned char *)(v3 + 168) = v17;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  long double v13;
  long double v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 108) = 1;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = v7;
  *(void *)(v3 + 120) = v7;
  *(unsigned char *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(void *)(v3 + 48) = *(void *)(a2 + 16);
  *(double *)(v3 + 56) = a3;
  *(double *)(v3 + 72) = a3;
  swift_retain();
  uint64_t v9 = swift_retain();
  uint64_t v10 = specialized find<A>(_:key:)(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  double v11 = *(double *)(v10 + 72);
  char v12 = *(unsigned char *)(v10 + 80);
  swift_release();
  if (v12)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v15 = 0;
    *(void *)(v3 + 64) = 0;
    char v16 = 1;
    goto LABEL_13;
  }
  if (v11 <= 0.0)
  {
    *(void *)(v3 + 64) = 0;
  }
  else
  {
    long double v13 = log2(v11 * 240.0);
    long double v14 = exp2(floor(v13 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 64) = v14;
    if (v14 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v15 = 0;
      char v16 = 1;
      goto LABEL_13;
    }
  }
  uint64_t v17 = swift_retain();
  uint64_t v18 = specialized find<A>(_:key:)(v17);
  if (v18)
  {
    int v15 = *(_DWORD *)(v18 + 72);
    char v16 = *(unsigned char *)(v18 + 76);
  }
  else
  {
    int v15 = 0;
    char v16 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 104) = v15;
  *(unsigned char *)(v3 + 108) = v16;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v8 = type metadata accessor for ZeroVTable();
  uint64_t v9 = MEMORY[0x263F8EE60];
  *(void *)(v3 + 32) = v8;
  v9 += 8;
  *(void *)(v3 + 64) = v9;
  *(void *)(v3 + 128) = v9;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = v8;
  *(_DWORD *)(v3 + 136) = 0;
  *(_WORD *)(v3 + 140) = 1;
  *(void *)(v3 + 144) = v7;
  *(void *)(v3 + 152) = v7;
  *(unsigned char *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = v7;
  *(void *)(v3 + 16) = a1;
  swift_beginAccess();
  swift_retain();
  outlined assign with copy of _AnyAnimatableData(a2, v3 + 32);
  swift_endAccess();
  *(double *)(v3 + 72) = a3;
  *(double *)(v3 + 88) = a3;
  uint64_t v10 = swift_retain();
  double v11 = specialized find<A>(_:key:)(v10);
  if (v11)
  {
    char v12 = *(double *)(v11 + 72);
    long double v13 = *(unsigned char *)(v11 + 80);
    swift_release();
    if ((v13 & 1) == 0)
    {
      if (v12 <= 0.0)
      {
        *(void *)(v3 + 80) = 0;
      }
      else
      {
        long double v14 = log2(v12 * 240.0);
        int v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
        *(long double *)(v3 + 80) = v15;
        if (v15 >= 0.0166666667)
        {
          char v16 = 0;
          uint64_t v17 = 1;
LABEL_13:
          swift_release();
          swift_release();
          outlined destroy of _AnyAnimatableData(a2);
          goto LABEL_14;
        }
      }
      uint64_t v18 = swift_retain();
      uint64_t v19 = specialized find<A>(_:key:)(v18);
      if (v19)
      {
        char v16 = *(_DWORD *)(v19 + 72);
        uint64_t v17 = *(unsigned char *)(v19 + 76);
      }
      else
      {
        char v16 = 0;
        uint64_t v17 = 1;
      }
      swift_release();
      goto LABEL_13;
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  outlined destroy of _AnyAnimatableData(a2);
  char v16 = 0;
  *(void *)(v3 + 80) = 0;
  uint64_t v17 = 1;
LABEL_14:
  *(_DWORD *)(v3 + 136) = v16;
  *(unsigned char *)(v3 + 140) = v17;
  return v3;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, float a2, float a3, float a4, float a5, double a6)
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v6 + 32) = 0;
  *(_WORD *)(v6 + 92) = 1;
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 88) = 0;
  *(void *)(v6 + 96) = v13;
  *(void *)(v6 + 104) = v13;
  *(unsigned char *)(v6 + 112) = 0;
  *(void *)(v6 + 120) = v13;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v14;
  swift_beginAccess();
  *(float *)(v6 + 32) = a2;
  *(float *)(v6 + 36) = a3;
  *(float *)(v6 + 40) = a4;
  *(float *)(v6 + 44) = a5;
  *(double *)(v6 + 48) = a6;
  *(double *)(v6 + 64) = a6;
  swift_retain();
  uint64_t v15 = swift_retain();
  uint64_t v16 = specialized find<A>(_:key:)(v15);
  if (!v16)
  {
    swift_release();
    goto LABEL_7;
  }
  double v17 = *(double *)(v16 + 72);
  char v18 = *(unsigned char *)(v16 + 80);
  swift_release();
  if (v18)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v21 = 0;
    *(void *)(v6 + 56) = 0;
    goto LABEL_8;
  }
  if (v17 <= 0.0)
  {
    *(void *)(v6 + 56) = 0;
  }
  else
  {
    long double v19 = log2(v17 * 240.0);
    long double v20 = exp2(floor(v19 + 0.01)) * 0.00416666667;
    *(long double *)(v6 + 56) = v20;
    if (v20 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v21 = 0;
LABEL_8:
      char v22 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v23 = swift_retain();
  uint64_t v24 = specialized find<A>(_:key:)(v23);
  if (v24)
  {
    int v21 = *(_DWORD *)(v24 + 72);
    char v22 = *(unsigned char *)(v24 + 76);
  }
  else
  {
    int v21 = 0;
    char v22 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v6 + 88) = v21;
  *(unsigned char *)(v6 + 92) = v22;
  return v6;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v3 + 32) = 0u;
  *(_WORD *)(v3 + 188) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 172) = 0u;
  *(void *)(v3 + 192) = v7;
  *(void *)(v3 + 200) = v7;
  *(unsigned char *)(v3 + 208) = 0;
  *(void *)(v3 + 216) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  long long v9 = a2[1];
  *(_OWORD *)(v3 + 32) = *a2;
  *(_OWORD *)(v3 + 48) = v9;
  long long v10 = a2[3];
  *(_OWORD *)(v3 + 64) = a2[2];
  *(_OWORD *)(v3 + 80) = v10;
  *(double *)(v3 + 96) = a3;
  *(double *)(v3 + 112) = a3;
  swift_retain();
  uint64_t v11 = swift_retain();
  uint64_t v12 = specialized find<A>(_:key:)(v11);
  if (!v12)
  {
    swift_release();
    goto LABEL_7;
  }
  double v13 = *(double *)(v12 + 72);
  char v14 = *(unsigned char *)(v12 + 80);
  swift_release();
  if (v14)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v17 = 0;
    *(void *)(v3 + 104) = 0;
    goto LABEL_8;
  }
  if (v13 <= 0.0)
  {
    *(void *)(v3 + 104) = 0;
  }
  else
  {
    long double v15 = log2(v13 * 240.0);
    long double v16 = exp2(floor(v15 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 104) = v16;
    if (v16 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v17 = 0;
LABEL_8:
      char v18 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized find<A>(_:key:)(v19);
  if (v20)
  {
    int v17 = *(_DWORD *)(v20 + 72);
    char v18 = *(unsigned char *)(v20 + 76);
  }
  else
  {
    int v17 = 0;
    char v18 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v3 + 184) = v17;
  *(unsigned char *)(v3 + 188) = v18;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v3 + 32) = v7;
  *(_WORD *)(v3 + 124) = 1;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 40) = v7;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = v7;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 96) = v7;
  *(_DWORD *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = v7;
  *(void *)(v3 + 136) = v7;
  *(unsigned char *)(v3 + 144) = 0;
  *(void *)(v3 + 152) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  swift_retain();
  outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
  long long v9 = a2[1];
  *(_OWORD *)(v3 + 32) = *a2;
  *(_OWORD *)(v3 + 48) = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)(v3 + 64) = a3;
  *(double *)(v3 + 80) = a3;
  long long v10 = swift_retain();
  uint64_t v11 = specialized find<A>(_:key:)(v10);
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v12 = *(double *)(v11 + 72);
  double v13 = *(unsigned char *)(v11 + 80);
  swift_release();
  if (v13)
  {
LABEL_7:
    swift_release();
    swift_release();
    outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
    long double v16 = 0;
    *(void *)(v3 + 72) = 0;
    int v17 = 1;
    goto LABEL_13;
  }
  if (v12 <= 0.0)
  {
    *(void *)(v3 + 72) = 0;
  }
  else
  {
    char v14 = log2(v12 * 240.0);
    long double v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 72) = v15;
    if (v15 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
      long double v16 = 0;
      int v17 = 1;
      goto LABEL_13;
    }
  }
  char v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (v19)
  {
    long double v16 = *(_DWORD *)(v19 + 72);
    int v17 = *(unsigned char *)(v19 + 76);
  }
  else
  {
    long double v16 = 0;
    int v17 = 1;
  }
  swift_release();
  swift_release_n();
  outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
LABEL_13:
  *(_DWORD *)(v3 + 120) = v16;
  *(unsigned char *)(v3 + 124) = v17;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v3 + 32) = 0u;
  *(_WORD *)(v3 + 152) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 64) = v7;
  *(unsigned char *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = v7;
  *(unsigned char *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 148) = 0;
  *(void *)(v3 + 160) = v7;
  *(void *)(v3 + 168) = v7;
  *(unsigned char *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  swift_retain();
  outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
  long long v9 = a2[1];
  *(_OWORD *)(v3 + 32) = *a2;
  *(_OWORD *)(v3 + 48) = v9;
  *(_OWORD *)(v3 + 57) = *(_OWORD *)((char *)a2 + 25);
  swift_bridgeObjectRelease();
  *(double *)(v3 + 80) = a3;
  *(double *)(v3 + 96) = a3;
  long long v10 = swift_retain();
  uint64_t v11 = specialized find<A>(_:key:)(v10);
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v12 = *(double *)(v11 + 72);
  double v13 = *(unsigned char *)(v11 + 80);
  swift_release();
  if (v13)
  {
LABEL_7:
    swift_release();
    swift_release();
    outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
    long double v16 = 0;
    *(void *)(v3 + 88) = 0;
    int v17 = 1;
    goto LABEL_13;
  }
  if (v12 <= 0.0)
  {
    *(void *)(v3 + 88) = 0;
  }
  else
  {
    char v14 = log2(v12 * 240.0);
    long double v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 88) = v15;
    if (v15 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
      long double v16 = 0;
      int v17 = 1;
      goto LABEL_13;
    }
  }
  char v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (v19)
  {
    long double v16 = *(_DWORD *)(v19 + 72);
    int v17 = *(unsigned char *)(v19 + 76);
  }
  else
  {
    long double v16 = 0;
    int v17 = 1;
  }
  swift_release();
  swift_release_n();
  outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
LABEL_13:
  *(_DWORD *)(v3 + 148) = v16;
  *(unsigned char *)(v3 + 152) = v17;
  return v3;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = MEMORY[0x263F8EE78];
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v5 + 32) = 0;
  *(_WORD *)(v5 + 108) = 1;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_DWORD *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = v11;
  *(void *)(v5 + 120) = v11;
  *(unsigned char *)(v5 + 128) = 0;
  *(void *)(v5 + 136) = v11;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v12;
  swift_beginAccess();
  *(double *)(v5 + 32) = a2;
  *(double *)(v5 + 40) = a3;
  *(double *)(v5 + 48) = a4;
  *(double *)(v5 + 56) = a5;
  *(double *)(v5 + 72) = a5;
  swift_retain();
  uint64_t v13 = swift_retain();
  uint64_t v14 = specialized find<A>(_:key:)(v13);
  if (!v14)
  {
    swift_release();
    goto LABEL_7;
  }
  double v15 = *(double *)(v14 + 72);
  char v16 = *(unsigned char *)(v14 + 80);
  swift_release();
  if (v16)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v19 = 0;
    *(void *)(v5 + 64) = 0;
    goto LABEL_8;
  }
  if (v15 <= 0.0)
  {
    *(void *)(v5 + 64) = 0;
  }
  else
  {
    long double v17 = log2(v15 * 240.0);
    long double v18 = exp2(floor(v17 + 0.01)) * 0.00416666667;
    *(long double *)(v5 + 64) = v18;
    if (v18 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v19 = 0;
LABEL_8:
      char v20 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v21 = swift_retain();
  uint64_t v22 = specialized find<A>(_:key:)(v21);
  if (v22)
  {
    int v19 = *(_DWORD *)(v22 + 72);
    char v20 = *(unsigned char *)(v22 + 76);
  }
  else
  {
    int v19 = 0;
    char v20 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v5 + 104) = v19;
  *(unsigned char *)(v5 + 108) = v20;
  return v5;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v4 + 32) = 0;
  *(_WORD *)(v4 + 92) = 1;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 104) = v9;
  *(unsigned char *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = v9;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v10;
  swift_beginAccess();
  *(double *)(v4 + 32) = a2;
  *(double *)(v4 + 40) = a3;
  *(double *)(v4 + 48) = a4;
  *(double *)(v4 + 64) = a4;
  swift_retain();
  uint64_t v11 = swift_retain();
  uint64_t v12 = specialized find<A>(_:key:)(v11);
  if (!v12)
  {
    swift_release();
    goto LABEL_7;
  }
  double v13 = *(double *)(v12 + 72);
  char v14 = *(unsigned char *)(v12 + 80);
  swift_release();
  if (v14)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v17 = 0;
    *(void *)(v4 + 56) = 0;
    char v18 = 1;
    goto LABEL_13;
  }
  if (v13 <= 0.0)
  {
    *(void *)(v4 + 56) = 0;
  }
  else
  {
    long double v15 = log2(v13 * 240.0);
    long double v16 = exp2(floor(v15 + 0.01)) * 0.00416666667;
    *(long double *)(v4 + 56) = v16;
    if (v16 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v17 = 0;
      char v18 = 1;
      goto LABEL_13;
    }
  }
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized find<A>(_:key:)(v19);
  if (v20)
  {
    int v17 = *(_DWORD *)(v20 + 72);
    char v18 = *(unsigned char *)(v20 + 76);
  }
  else
  {
    int v17 = 0;
    char v18 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v4 + 88) = v17;
  *(unsigned char *)(v4 + 92) = v18;
  return v4;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, _OWORD *a2, double a3, uint64_t a4, void (*a5)(_OWORD *), void (*a6)(_OWORD *))
{
  uint64_t v12 = MEMORY[0x263F8EE78];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v6 + 32) = 0;
  *(_WORD *)(v6 + 156) = 1;
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 48) = v12;
  *(unsigned char *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 96) = 0;
  *(void *)(v6 + 104) = 0;
  *(void *)(v6 + 112) = 0;
  *(void *)(v6 + 120) = v12;
  *(unsigned char *)(v6 + 128) = 0;
  *(void *)(v6 + 136) = 0;
  *(void *)(v6 + 144) = 0;
  *(_DWORD *)(v6 + 152) = 0;
  *(void *)(v6 + 160) = v12;
  *(void *)(v6 + 168) = v12;
  *(unsigned char *)(v6 + 176) = 0;
  *(void *)(v6 + 184) = v12;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v13;
  swift_beginAccess();
  swift_retain();
  a5(a2);
  long long v14 = a2[1];
  *(_OWORD *)(v6 + 32) = *a2;
  *(_OWORD *)(v6 + 48) = v14;
  *(_OWORD *)(v6 + 64) = a2[2];
  swift_bridgeObjectRelease();
  *(double *)(v6 + 80) = a3;
  *(double *)(v6 + 96) = a3;
  uint64_t v15 = swift_retain();
  uint64_t v16 = specialized find<A>(_:key:)(v15);
  if (!v16)
  {
    swift_release();
    goto LABEL_7;
  }
  double v17 = *(double *)(v16 + 72);
  char v18 = *(unsigned char *)(v16 + 80);
  swift_release();
  if (v18)
  {
LABEL_7:
    swift_release();
    swift_release();
    a6(a2);
    int v21 = 0;
    *(void *)(v6 + 88) = 0;
    char v22 = 1;
    goto LABEL_13;
  }
  if (v17 <= 0.0)
  {
    *(void *)(v6 + 88) = 0;
  }
  else
  {
    long double v19 = log2(v17 * 240.0);
    long double v20 = exp2(floor(v19 + 0.01)) * 0.00416666667;
    *(long double *)(v6 + 88) = v20;
    if (v20 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      a6(a2);
      int v21 = 0;
      char v22 = 1;
      goto LABEL_13;
    }
  }
  uint64_t v23 = swift_retain();
  uint64_t v24 = specialized find<A>(_:key:)(v23);
  if (v24)
  {
    int v21 = *(_DWORD *)(v24 + 72);
    char v22 = *(unsigned char *)(v24 + 76);
  }
  else
  {
    int v21 = 0;
    char v22 = 1;
  }
  swift_release();
  swift_release_n();
  a6(a2);
LABEL_13:
  *(_DWORD *)(v6 + 152) = v21;
  *(unsigned char *)(v6 + 156) = v22;
  return v6;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v4 + 32) = v9;
  *(_WORD *)(v4 + 88) = 1;
  *(unsigned char *)(v4 + 40) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = v9;
  *(unsigned char *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 84) = 0;
  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 104) = v9;
  *(unsigned char *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = v9;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v10;
  swift_beginAccess();
  *(void *)(v4 + 32) = a2;
  *(unsigned char *)(v4 + 40) = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(double *)(v4 + 48) = a4;
  *(double *)(v4 + 64) = a4;
  uint64_t v11 = swift_retain();
  uint64_t v12 = specialized find<A>(_:key:)(v11);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_5;
  }
  double v13 = *(double *)(v12 + 72);
  char v14 = *(unsigned char *)(v12 + 80);
  swift_release();
  if (v14)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_release();
    swift_release();
    int v15 = 0;
    *(void *)(v4 + 56) = 0;
    char v16 = 1;
    goto LABEL_14;
  }
  if (v13 <= 0.0)
  {
    *(void *)(v4 + 56) = 0;
  }
  else
  {
    long double v17 = log2(v13 * 240.0);
    long double v18 = exp2(floor(v17 + 0.01)) * 0.00416666667;
    *(long double *)(v4 + 56) = v18;
    if (v18 >= 0.0166666667)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      int v15 = 0;
      char v16 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized find<A>(_:key:)(v19);
  if (v20)
  {
    int v15 = *(_DWORD *)(v20 + 72);
    char v16 = *(unsigned char *)(v20 + 76);
  }
  else
  {
    int v15 = 0;
    char v16 = 1;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v4 + 84) = v15;
  *(unsigned char *)(v4 + 88) = v16;
  return v4;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, double a6)
{
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v12 = swift_dynamicCastClass();
  uint64_t v92 = a2;
  id v88 = a1;
  if (!v12)
  {
    unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v36 = *a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = swift_bridgeObjectRetain();
    uint64_t v38 = (void *)specialized AnimationState.subscript.getter(v37, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
    }
    unint64_t v40 = v38[2];
    unint64_t v39 = v38[3];
    if (v40 >= v39 >> 1) {
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v38);
    }
    v38[2] = v40 + 1;
    uint64_t v41 = &v38[2 * v40];
    v41[4] = a3;
    v41[5] = v36;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v43 = v42;
    uint64_t v117 = v42;
    *(void *)&long long v115 = v38;
    outlined init with take of Any(&v115, v126);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v125 = (void *)v35;
    a1 = (uint64_t *)&v125;
    uint64_t v86 = v43;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v126, v43, isUniquelyReferenced_nonNull_native);
    double v13 = v125;
    swift_bridgeObjectRelease();
    *(void *)&v126[0] = a3;
    unint64_t v6 = *(void *)(a5 + 16);
    char v87 = v13;
    if (v6)
    {
      int64_t v111 = a3[2];
      if (v111)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_78;
        }
        goto LABEL_34;
      }
      swift_bridgeObjectRetain();
      a3 = (void *)a5;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
LABEL_67:
    unint64_t v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v76 = swift_bridgeObjectRetain();
    uint64_t v77 = (void *)specialized AnimationState.subscript.getter(v76, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
    }
    unint64_t v79 = v77[2];
    unint64_t v78 = v77[3];
    if (v79 >= v78 >> 1) {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), v79 + 1, 1, v77);
    }
    v77[2] = v79 + 1;
    float v80 = &v77[2 * v79];
    v80[4] = a3;
    v80[5] = v75;
    uint64_t v117 = v86;
    *(void *)&long long v115 = v77;
    outlined init with take of Any(&v115, v126);
    char v81 = swift_isUniquelyReferenced_nonNull_native();
    v125 = v87;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v126, v86, v81);
    uint64_t v82 = v125;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v82;
    uint64_t v83 = *v88;
    swift_retain();
    uint64_t v84 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v83, a4, a6);
    uint64_t v85 = swift_allocObject();
    *(void *)(v85 + 16) = v84;
    *id v88 = v85;
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(float **)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)&v126[0] = a3;
  double v13 = *(void **)(a5 + 16);
  if (!v13)
  {
    swift_bridgeObjectRetain();
    goto LABEL_57;
  }
  int64_t v111 = a3[2];
  if (!v111)
  {
    swift_bridgeObjectRetain();
    a3 = (void *)a5;
LABEL_57:
    a1 = (uint64_t *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v67 = swift_bridgeObjectRetain();
    double v13 = (void *)specialized AnimationState.subscript.getter(v67, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_76;
    }
    goto LABEL_58;
  }
  swift_bridgeObjectRetain();
  uint64_t v89 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a3 = specialized _ArrayBuffer._consumeAndCreateNew()(a3);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = a5 + 32;
  long double v17 = a3 + 4;
  uint64_t v93 = a5 + 32;
  int v95 = v13;
  while ((unint64_t)v15 < a3[2])
  {
    if (v14 >= (unint64_t)v13) {
      goto LABEL_73;
    }
    long double v18 = (unsigned __int8 *)&v17[14 * v15];
    unsigned int v19 = *v18;
    unsigned int v20 = v18[1];
    int v21 = (unsigned __int8 *)(v16 + 112 * v14);
    unsigned int v22 = *v21;
    unsigned int v23 = v21[1];
    if (v19 == v22 && v20 == v23)
    {
      uint64_t v27 = v16 + 112 * v14;
      uint64_t v112 = v15;
      a5 = *(void *)(v27 + 8);
      uint64_t v29 = *(void *)(v27 + 24);
      uint64_t v28 = *(void *)(v27 + 32);
      uint64_t v30 = *(void *)(v27 + 40);
      a2 = *(void **)(v27 + 48);
      uint64_t v31 = *(void *)(v27 + 56);
      uint64_t v7 = *(float **)(v27 + 64);
      uint64_t v97 = *(void *)(v27 + 72);
      uint64_t v99 = *(void *)(v27 + 80);
      unsigned int v101 = *(unsigned __int8 *)(v27 + 88);
      float v32 = *(float *)(v27 + 96);
      uint64_t v33 = *(void *)(v27 + 104);
      uint64_t v107 = *(void *)(v27 + 16);
      uint64_t v103 = v29;
      uint64_t v105 = v30;
      uint64_t v108 = v14;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(a5, v107, v29, v28, v30, (uint64_t)a2, v31, (uint64_t)v7, v97, v99, *(unsigned char *)(v27 + 88));
      uint64_t v34 = (uint64_t)&a3[14 * v112 + 4];
      swift_bridgeObjectRetain();
      *(void *)&long long v115 = a5;
      *((void *)&v115 + 1) = v107;
      uint64_t v116 = v29;
      uint64_t v117 = v28;
      uint64_t v118 = v30;
      float v119 = a2;
      uint64_t v120 = v31;
      float v121 = v7;
      a1 = (uint64_t *)v99;
      uint64_t v122 = v97;
      uint64_t v123 = v99;
      unint64_t v6 = v101;
      char v124 = v101;
      specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(v34 + 8, (uint64_t)&v115);
      *(float *)(v34 + 96) = v32 + *(float *)(v34 + 96);
      swift_bridgeObjectRetain();
      specialized static AnimatableArray.+= infix(_:_:)(v34 + 104, v33);
      swift_bridgeObjectRelease();
      double v13 = v95;
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(a5, v107, v103, v28, v105, (uint64_t)a2, v31, (uint64_t)v7, v97, v99, v101);
      swift_bridgeObjectRelease();
      uint64_t v14 = v108;
      long double v17 = a3 + 4;
      uint64_t v16 = v93;
      uint64_t v15 = v112 + 1;
    }
    else
    {
      BOOL v25 = v20 < v23 && v19 == v22;
      if (v19 < v22 || v25)
      {
        ++v15;
        goto LABEL_23;
      }
    }
    ++v14;
LABEL_23:
    if (v15 >= v111 || v14 >= (uint64_t)v13)
    {
      *(void *)&v126[0] = a3;
      if (v111 >= v15)
      {
        specialized Array.replaceSubrange<A>(_:with:)(v15, v111);
        a3 = *(void **)&v126[0];
        uint64_t v7 = v89;
        goto LABEL_57;
      }
      __break(1u);
LABEL_78:
      a3 = specialized _ArrayBuffer._consumeAndCreateNew()(a3);
LABEL_34:
      unint64_t v45 = 0;
      uint64_t result = 0;
      uint64_t v47 = a5 + 32;
      unsigned __int8 v48 = a3 + 4;
      unint64_t v94 = v6;
      uint64_t v90 = a5 + 32;
      while (2)
      {
        if ((unint64_t)result >= a3[2]) {
          goto LABEL_74;
        }
        if (v45 >= v6) {
          goto LABEL_75;
        }
        uint64_t v49 = (unsigned __int8 *)&v48[14 * result];
        unsigned int v50 = *v49;
        unsigned int v51 = v49[1];
        uint64_t v52 = (unsigned __int8 *)(v47 + 112 * v45);
        unsigned int v53 = *v52;
        unsigned int v54 = v52[1];
        if (v50 == v53 && v51 == v54)
        {
          uint64_t v58 = v47 + 112 * v45;
          uint64_t v113 = result;
          uint64_t v59 = *(void *)(v58 + 16);
          uint64_t v60 = *(void *)(v58 + 24);
          uint64_t v61 = *(void *)(v58 + 32);
          uint64_t v62 = *(void *)(v58 + 40);
          uint64_t v96 = *(void *)(v58 + 48);
          uint64_t v63 = *(void *)(v58 + 56);
          uint64_t v64 = *(void *)(v58 + 64);
          uint64_t v98 = *(void *)(v58 + 72);
          uint64_t v100 = *(void *)(v58 + 80);
          char v102 = *(unsigned char *)(v58 + 88);
          float v65 = *(float *)(v58 + 96);
          uint64_t v66 = *(void *)(v58 + 104);
          uint64_t v109 = *(void *)(v58 + 8);
          uint64_t v106 = v62;
          uint64_t v104 = v63;
          unint64_t v110 = v45;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v109, v59, v60, v61, v62, v96, v63, v64, v98, v100, v102);
          uint64_t v7 = (float *)&v48[14 * v113];
          swift_bridgeObjectRetain();
          *(void *)&long long v115 = v109;
          *((void *)&v115 + 1) = v59;
          uint64_t v116 = v60;
          uint64_t v117 = v61;
          uint64_t v118 = v62;
          double v13 = (void *)v96;
          float v119 = (void *)v96;
          uint64_t v120 = v63;
          a1 = (uint64_t *)v100;
          float v121 = (float *)v64;
          uint64_t v122 = v98;
          uint64_t v123 = v100;
          char v124 = v102;
          specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((uint64_t)(v7 + 2), (uint64_t)&v115);
          v7[24] = v65 + v7[24];
          swift_bridgeObjectRetain();
          specialized static AnimatableArray.+= infix(_:_:)((uint64_t)(v7 + 26), v66);
          swift_bridgeObjectRelease();
          unint64_t v6 = v94;
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v109, v59, v60, v61, v106, v96, v104, v64, v98, v100, v102);
          a2 = v92;
          swift_bridgeObjectRelease();
          unint64_t v45 = v110;
          uint64_t v47 = v90;
          uint64_t result = v113 + 1;
        }
        else
        {
          BOOL v56 = v51 < v54 && v50 == v53;
          if (v50 < v53 || v56)
          {
            ++result;
LABEL_51:
            if (result >= v111 || (uint64_t)v45 >= (uint64_t)v6)
            {
              *(void *)&v126[0] = a3;
              if (v111 >= result)
              {
                specialized Array.replaceSubrange<A>(_:with:)(result, v111);
                a3 = *(void **)&v126[0];
                goto LABEL_67;
              }
              __break(1u);
              return result;
            }
            continue;
          }
        }
        break;
      }
      ++v45;
      goto LABEL_51;
    }
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  double v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
LABEL_58:
  unint64_t v69 = v13[2];
  unint64_t v68 = v13[3];
  if (v69 >= v68 >> 1) {
    double v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v13);
  }
  v13[2] = v69 + 1;
  uint64_t v70 = &v13[2 * v69];
  v70[4] = a3;
  v70[5] = a1;
  type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
  uint64_t v117 = v71;
  *(void *)&long long v115 = v13;
  specialized Dictionary.subscript.setter((uint64_t)&v115, v71);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = (float *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
  }
  unint64_t v73 = *((void *)v7 + 2);
  unint64_t v72 = *((void *)v7 + 3);
  if (v73 >= v72 >> 1) {
    uint64_t v7 = (float *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v72 > 1), v73 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v73 + 1;
  uint64_t v74 = (double *)&v7[4 * v73];
  *((void *)v74 + 4) = a4;
  v74[5] = a6;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  *id v88 = result;
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, double a8, float a9, float a10, float a11, float a12)
{
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v27 = swift_dynamicCastClass();
  if (v27)
  {
    uint64_t v28 = *(void **)(v27 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = (void *)specialized AnimationState.subscript.getter(v30, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    }
    float v32 = a4 + a9;
    float v33 = a5 + a10;
    float v34 = a6 + a11;
    unint64_t v36 = v31[2];
    unint64_t v35 = v31[3];
    if (v36 >= v35 >> 1) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v31);
    }
    v31[2] = v36 + 1;
    uint64_t v37 = (float *)&v31[3 * v36];
    v37[8] = v32;
    v37[9] = v33;
    v37[10] = v34;
    v37[11] = a7 + a12;
    *((void *)v37 + 6) = v29;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>(0);
    uint64_t v69 = v38;
    *(void *)&long long v68 = v31;
    specialized Dictionary.subscript.setter((uint64_t)&v68, v38);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    }
    unint64_t v40 = v28[2];
    unint64_t v39 = v28[3];
    if (v40 >= v39 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v28);
    }
    v28[2] = v40 + 1;
    uint64_t v41 = (double *)&v28[2 * v40];
    *((void *)v41 + 4) = a3;
    v41[5] = a8;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v28;
    *a1 = result;
  }
  else
  {
    unint64_t v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v44 = *a2;
    swift_bridgeObjectRetain();
    uint64_t v45 = swift_bridgeObjectRetain();
    double v46 = (void *)specialized AnimationState.subscript.getter(v45, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
    }
    unint64_t v48 = v46[2];
    unint64_t v47 = v46[3];
    if (v48 >= v47 >> 1) {
      double v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v46);
    }
    v46[2] = v48 + 1;
    uint64_t v49 = (float *)&v46[3 * v48];
    v49[8] = a4;
    v49[9] = a5;
    v49[10] = a6;
    v49[11] = a7;
    *((void *)v49 + 6) = v44;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>(0);
    uint64_t v51 = v50;
    uint64_t v69 = v50;
    *(void *)&long long v68 = v46;
    outlined init with take of Any(&v68, v67);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v51, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v54 = swift_bridgeObjectRetain();
    id v55 = (void *)specialized AnimationState.subscript.getter(v54, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
    }
    float v56 = a4 + a9;
    float v57 = a5 + a10;
    float v58 = a6 + a11;
    unint64_t v60 = v55[2];
    unint64_t v59 = v55[3];
    if (v60 >= v59 >> 1) {
      id v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v55);
    }
    v55[2] = v60 + 1;
    uint64_t v61 = (float *)&v55[3 * v60];
    v61[8] = v56;
    v61[9] = v57;
    v61[10] = v58;
    v61[11] = a7 + a12;
    *((void *)v61 + 6) = v53;
    uint64_t v69 = v51;
    *(void *)&long long v68 = v55;
    outlined init with take of Any(&v68, v67);
    char v62 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v51, v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v43;
    uint64_t v63 = *a1;
    swift_retain();
    uint64_t v64 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v63, a3, a8);
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = v64;
    *a1 = v65;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v12 = swift_dynamicCastClass();
  if (v12)
  {
    double v13 = *(void **)(v12 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = (void *)specialized AnimationState.subscript.getter(v15);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    v16[2] = v18 + 1;
    unsigned int v19 = (double *)&v16[2 * v18];
    v19[4] = a4 + a6;
    *((void *)v19 + 5) = v14;
    type metadata accessor for AnimatorState<Double>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v48 = v20;
    *(void *)&long long v47 = v16;
    specialized Dictionary.subscript.setter((uint64_t)&v47, v20);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v22 = v13[2];
    unint64_t v21 = v13[3];
    if (v22 >= v21 >> 1) {
      double v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v13);
    }
    v13[2] = v22 + 1;
    unsigned int v23 = (double *)&v13[2 * v22];
    *((void *)v23 + 4) = a3;
    v23[5] = a5;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v13;
    *a1 = result;
  }
  else
  {
    unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v26 = *a2;
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = (void *)specialized AnimationState.subscript.getter(v27);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    }
    unint64_t v30 = v28[2];
    unint64_t v29 = v28[3];
    if (v30 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
    }
    v28[2] = v30 + 1;
    uint64_t v31 = (double *)&v28[2 * v30];
    v31[4] = a4;
    *((void *)v31 + 5) = v26;
    type metadata accessor for AnimatorState<Double>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v33 = v32;
    uint64_t v48 = v32;
    *(void *)&long long v47 = v28;
    outlined init with take of Any(&v47, v46);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v46, v33, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v36 = swift_bridgeObjectRetain();
    uint64_t v37 = (void *)specialized AnimationState.subscript.getter(v36);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
    }
    double v38 = a4 + a6;
    unint64_t v40 = v37[2];
    unint64_t v39 = v37[3];
    if (v40 >= v39 >> 1) {
      uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v37);
    }
    v37[2] = v40 + 1;
    uint64_t v41 = (double *)&v37[2 * v40];
    v41[4] = v38;
    *((void *)v41 + 5) = v35;
    uint64_t v48 = v33;
    *(void *)&long long v47 = v37;
    outlined init with take of Any(&v47, v46);
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v46, v33, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v25;
    uint64_t v43 = *a1;
    swift_retain();
    uint64_t v44 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v43, a3, a5);
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v44;
    *a1 = v45;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  long long v48;
  uint64_t v49;

  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v12 = swift_dynamicCastClass();
  if (v12)
  {
    double v13 = *(void **)(v12 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = (void *)specialized AnimationState.subscript.getter(v15, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38]);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    v16[2] = v18 + 1;
    unsigned int v19 = (double *)&v16[2 * v18];
    v19[4] = a4 + a6;
    *((void *)v19 + 5) = v14;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v49 = v20;
    *(void *)&uint64_t v48 = v16;
    specialized Dictionary.subscript.setter((uint64_t)&v48, v20);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v22 = v13[2];
    unint64_t v21 = v13[3];
    if (v22 >= v21 >> 1) {
      double v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v13);
    }
    v13[2] = v22 + 1;
    unsigned int v23 = (double *)&v13[2 * v22];
    *((void *)v23 + 4) = a3;
    v23[5] = a5;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v13;
    *a1 = result;
  }
  else
  {
    unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v26 = *a2;
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = (void *)specialized AnimationState.subscript.getter(v27, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38]);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    }
    unint64_t v30 = v28[2];
    unint64_t v29 = v28[3];
    if (v30 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
    }
    v28[2] = v30 + 1;
    uint64_t v31 = (double *)&v28[2 * v30];
    v31[4] = a4;
    *((void *)v31 + 5) = v26;
    uint64_t v32 = MEMORY[0x263F8EF38];
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    float v34 = v33;
    uint64_t v49 = v33;
    *(void *)&uint64_t v48 = v28;
    outlined init with take of Any(&v48, v47);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v34, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v37 = swift_bridgeObjectRetain();
    double v38 = (void *)specialized AnimationState.subscript.getter(v37, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, v32);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
    }
    unint64_t v39 = a4 + a6;
    uint64_t v41 = v38[2];
    unint64_t v40 = v38[3];
    if (v41 >= v40 >> 1) {
      double v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v38);
    }
    v38[2] = v41 + 1;
    char v42 = (double *)&v38[2 * v41];
    v42[4] = v39;
    *((void *)v42 + 5) = v36;
    uint64_t v49 = v34;
    *(void *)&uint64_t v48 = v38;
    outlined init with take of Any(&v48, v47);
    uint64_t v43 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v34, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v25;
    uint64_t v44 = *a1;
    swift_retain();
    uint64_t v45 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v44, a3, a5);
    double v46 = swift_allocObject();
    *(void *)(v46 + 16) = v45;
    *a1 = v46;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v12 = swift_dynamicCastClass();
  if (v12)
  {
    double v13 = *(void **)(v12 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&long long v49 = a3;
    *(void *)&v48[0] = a5;
    swift_bridgeObjectRetain();
    specialized static ShaderVectorData.+= infix(_:_:)((uint64_t)&v49, (uint64_t *)v48);
    unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v15 = v49;
    uint64_t v16 = swift_bridgeObjectRetain();
    unint64_t v17 = (void *)specialized AnimationState.subscript.getter(v16, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v19 = v17[2];
    unint64_t v18 = v17[3];
    if (v19 >= v18 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
    }
    v17[2] = v19 + 1;
    uint64_t v20 = &v17[2 * v19];
    v20[4] = v15;
    v20[5] = v14;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v50 = v21;
    *(void *)&long long v49 = v17;
    specialized Dictionary.subscript.setter((uint64_t)&v49, v21);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v23 = v13[2];
    unint64_t v22 = v13[3];
    if (v23 >= v22 >> 1) {
      double v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v13);
    }
    v13[2] = v23 + 1;
    uint64_t v24 = (double *)&v13[2 * v23];
    *((void *)v24 + 4) = a4;
    v24[5] = a6;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v13;
    *a1 = result;
  }
  else
  {
    uint64_t v47 = a4;
    unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v27 = *a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = swift_bridgeObjectRetain();
    unint64_t v29 = (void *)specialized AnimationState.subscript.getter(v28, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    }
    unint64_t v31 = v29[2];
    unint64_t v30 = v29[3];
    if (v31 >= v30 >> 1) {
      unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
    }
    v29[2] = v31 + 1;
    uint64_t v32 = &v29[2 * v31];
    v32[4] = a3;
    v32[5] = v27;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v34 = v33;
    uint64_t v50 = v33;
    *(void *)&long long v49 = v29;
    outlined init with take of Any(&v49, v48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v34, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    *(void *)&long long v49 = a3;
    *(void *)&v48[0] = a5;
    swift_bridgeObjectRetain();
    specialized static ShaderVectorData.+= infix(_:_:)((uint64_t)&v49, (uint64_t *)v48);
    unint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v37 = v49;
    uint64_t v38 = swift_bridgeObjectRetain();
    unint64_t v39 = (void *)specialized AnimationState.subscript.getter(v38, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    }
    unint64_t v41 = v39[2];
    unint64_t v40 = v39[3];
    if (v41 >= v40 >> 1) {
      unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v39);
    }
    v39[2] = v41 + 1;
    char v42 = &v39[2 * v41];
    v42[4] = v37;
    v42[5] = v36;
    uint64_t v50 = v34;
    *(void *)&long long v49 = v39;
    outlined init with take of Any(&v49, v48);
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v34, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v26;
    uint64_t v44 = *a1;
    swift_retain();
    uint64_t v45 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v44, v47, a6);
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = v45;
    *a1 = v46;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  float v34;
  float v35;
  float v36;
  unint64_t v37;
  unint64_t v38;
  float *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double *v43;
  uint64_t result;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  float32x2_t v67;
  float32x2_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t *v77;
  double v78;
  float v79;
  _OWORD v80[2];
  long long v81;
  uint64_t v82;
  double v83;
  void v84[2];
  uint64_t vars8;

  double v13 = *(void *)a5;
  uint64_t v12 = *(void *)(a5 + 8);
  unint64_t v14 = *(float *)(a5 + 16);
  uint64_t v15 = *(float *)(a5 + 20);
  unint64_t v17 = *(float *)(a5 + 24);
  uint64_t v16 = *(float *)(a5 + 28);
  unint64_t v18 = *(double *)a3;
  unint64_t v19 = *(double *)(a3 + 8);
  uint64_t v21 = *(float *)(a3 + 16);
  uint64_t v20 = *(float *)(a3 + 20);
  unint64_t v22 = *(float *)(a3 + 24);
  unint64_t v79 = *(float *)(a3 + 28);
  type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>();
  if (v23 == MEMORY[0x263F8D538])
  {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v18, a6, *(double *)&v13);
  }
  else
  {
    uint64_t v24 = v23;
    unint64_t v78 = a6;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v24 == v25)
    {
      *(void *)&char v81 = __PAIR64__(LODWORD(v15), LODWORD(v14));
      *(void *)&v80[0] = __PAIR64__(LODWORD(v16), LODWORD(v17));
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v18, v19, COERCE_DOUBLE(__PAIR64__(LODWORD(v20), LODWORD(v21))), COERCE_DOUBLE(__PAIR64__(LODWORD(v79), LODWORD(v22))), a6, *(double *)&v13, *(double *)&v12, COERCE_DOUBLE(__PAIR64__(LODWORD(v15), LODWORD(v14))), COERCE_DOUBLE(__PAIR64__(LODWORD(v16), LODWORD(v17))));
    }
    else
    {
      uint64_t v77 = a2;
      unint64_t v26 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      unint64_t v27 = swift_dynamicCastClass();
      if (v27)
      {
        uint64_t v28 = *(void **)(v27 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        *(double *)float v80 = v18;
        *(double *)&char v81 = v18;
        outlined retain of LinearGradient((uint64_t)v80);
        specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&v81, v13);
        uint64_t v83 = v19;
        *(double *)uint64_t v84 = v19;
        outlined retain of LinearGradient((uint64_t)v84);
        specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&v83, v12);
        unint64_t v29 = v83;
        unint64_t v30 = v81;
        unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v32 = swift_bridgeObjectRetain();
        uint64_t v33 = (void *)specialized AnimationState.subscript.getter(v32, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        }
        uint64_t v34 = v21 + v14;
        unint64_t v35 = v20 + v15;
        unint64_t v36 = v22 + v17;
        uint64_t v38 = v33[2];
        uint64_t v37 = v33[3];
        if (v38 >= v37 >> 1) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v33);
        }
        v33[2] = v38 + 1;
        unint64_t v39 = (float *)&v33[5 * v38];
        *((void *)v39 + 4) = v30;
        *((double *)v39 + 5) = v29;
        v39[12] = v34;
        v39[13] = v35;
        v39[14] = v36;
        v39[15] = v79 + v16;
        *((void *)v39 + 8) = v31;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(0);
        uint64_t v82 = v40;
        *(void *)&char v81 = v33;
        specialized Dictionary.subscript.setter((uint64_t)&v81, v40);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        }
        char v42 = v28[2];
        unint64_t v41 = v28[3];
        if (v42 >= v41 >> 1) {
          uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v28);
        }
        v28[2] = v42 + 1;
        char v43 = (double *)&v28[2 * v42];
        *((void *)v43 + 4) = a4;
        v43[5] = a6;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v28;
        *a1 = result;
      }
      else
      {
        unint64_t v75 = a4;
        uint64_t v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v46 = *v77;
        outlined retain of Text.Effect.RenderSegmentation.StaticLines(a3);
        swift_bridgeObjectRetain();
        uint64_t v47 = swift_bridgeObjectRetain();
        uint64_t v48 = (void *)specialized AnimationState.subscript.getter(v47, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        uint64_t v76 = a1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
        }
        uint64_t v50 = v48[2];
        long long v49 = v48[3];
        if (v50 >= v49 >> 1) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v48);
        }
        _OWORD v48[2] = v50 + 1;
        uint64_t v51 = (double *)&v48[5 * v50];
        v51[4] = v18;
        v51[5] = v19;
        *((float *)v51 + 12) = v21;
        *((float *)v51 + 13) = v20;
        *((float *)v51 + 14) = v22;
        *((float *)v51 + 15) = v79;
        *((void *)v51 + 8) = v46;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(0);
        unint64_t v53 = v52;
        uint64_t v82 = v52;
        *(void *)&char v81 = v48;
        outlined init with take of Any(&v81, v80);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v84[0] = v45;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v80, v53, isUniquelyReferenced_nonNull_native);
        id v55 = v84[0];
        swift_bridgeObjectRelease();
        v84[0] = *(void *)a3;
        float v56 = *(void *)a5;
        *(void *)&char v81 = v84[0];
        outlined retain of LinearGradient((uint64_t)v84);
        specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&v81, v56);
        float v57 = *(void *)(a5 + 8);
        float v58 = *(float32x2_t *)(a3 + 16);
        unint64_t v59 = *(float32x2_t *)(a3 + 24);
        uint64_t v61 = *(float32x2_t *)(a5 + 16);
        unint64_t v60 = *(float32x2_t *)(a5 + 24);
        uint64_t v83 = *(double *)(a3 + 8);
        *(double *)float v80 = v83;
        outlined retain of LinearGradient((uint64_t)&v83);
        specialized static AnimatableArray.+= infix(_:_:)((uint64_t)v80, v57);
        char v62 = *(void *)&v80[0];
        uint64_t v63 = v81;
        uint64_t v64 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v65 = swift_bridgeObjectRetain();
        uint64_t v66 = (void *)specialized AnimationState.subscript.getter(v65, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
        }
        uint64_t v67 = vadd_f32(v58, v61);
        long long v68 = vadd_f32(v59, v60);
        uint64_t v70 = v66[2];
        uint64_t v69 = v66[3];
        if (v70 >= v69 >> 1) {
          uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v66);
        }
        v66[2] = v70 + 1;
        uint64_t v71 = &v66[5 * v70];
        v71[4] = v63;
        v71[5] = v62;
        v71[6] = v67;
        v71[7] = v68;
        v71[8] = v64;
        uint64_t v82 = v53;
        *(void *)&char v81 = v66;
        outlined init with take of Any(&v81, v80);
        unint64_t v72 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v80, v53, v72);
        swift_bridgeObjectRelease();
        void *v77 = v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        unint64_t v73 = swift_allocObject();
        *(_OWORD *)(v73 + 16) = xmmword_2461BDD50;
        *(void *)(v73 + 32) = v26;
        *(void *)(v73 + 40) = 0;
        *(void *)(v73 + 48) = v75;
        *(double *)(v73 + 56) = v78;
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = v73;
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        const char *v76 = v74;
      }
    }
  }
  return result;
}

{
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  float v29;
  float v30;
  float v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double *v39;
  uint64_t result;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  float32x4_t v60;
  double v61;
  double v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  float32x4_t *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  float32x4_t v77;
  double v78;
  float32x4_t v79;
  float32x4_t v80;
  _OWORD v81[2];
  long long v82;
  uint64_t v83;
  uint64_t vars8;

  double v13 = *(float *)a5;
  uint64_t v12 = *(float *)(a5 + 4);
  uint64_t v15 = *(float *)(a5 + 8);
  unint64_t v14 = *(float *)(a5 + 12);
  uint64_t v16 = *(double *)(a5 + 24);
  unint64_t v17 = *(float *)a3;
  unint64_t v18 = *(float *)(a3 + 4);
  unint64_t v75 = *(double *)(a3 + 8);
  uint64_t v76 = *(double *)(a3 + 16);
  unint64_t v78 = *(double *)(a3 + 24);
  unint64_t v73 = *(double *)(a3 + 32);
  uint64_t v74 = *(double *)(a5 + 16);
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  if (v19 == MEMORY[0x263F8D538])
  {
    *(void *)&uint64_t v82 = __PAIR64__(LODWORD(v12), LODWORD(v13));
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, COERCE_DOUBLE(__PAIR64__(LODWORD(v18), LODWORD(v17))), a6, COERCE_DOUBLE(__PAIR64__(LODWORD(v12), LODWORD(v13))));
  }
  else
  {
    uint64_t v20 = v19;
    unint64_t v72 = a6;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v20 == v21)
    {
      *(void *)&uint64_t v82 = __PAIR64__(LODWORD(v12), LODWORD(v13));
      *(void *)&v81[0] = __PAIR64__(LODWORD(v14), LODWORD(v15));
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, COERCE_DOUBLE(__PAIR64__(LODWORD(v18), LODWORD(v17))), v75, v76, v78, a6, COERCE_DOUBLE(__PAIR64__(LODWORD(v12), LODWORD(v13))), COERCE_DOUBLE(__PAIR64__(LODWORD(v14), LODWORD(v15))), v74, v16);
    }
    else
    {
      unint64_t v22 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      unint64_t v23 = swift_dynamicCastClass();
      if (v23)
      {
        uint64_t v24 = *(void **)(v23 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        unint64_t v25 = *(double *)(a5 + 32);
        unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v27 = swift_bridgeObjectRetain();
        uint64_t v28 = (void *)specialized AnimationState.subscript.getter(v27, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        }
        unint64_t v29 = v13 + v17;
        unint64_t v30 = v12 + v18;
        unint64_t v31 = v14 + *((float *)&v75 + 1);
        uint64_t v32 = v78 + v16;
        uint64_t v34 = v28[2];
        uint64_t v33 = v28[3];
        if (v34 >= v33 >> 1) {
          uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v28);
        }
        v28[2] = v34 + 1;
        unint64_t v35 = (float *)&v28[6 * v34];
        v35[8] = v29;
        v35[9] = v30;
        v35[10] = v15 + *(float *)&v75;
        v35[11] = v31;
        *((double *)v35 + 6) = v76 + v74;
        *((double *)v35 + 7) = v32;
        *((double *)v35 + 8) = v73 + v25;
        *((void *)v35 + 9) = v26;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(0);
        uint64_t v83 = v36;
        *(void *)&uint64_t v82 = v28;
        specialized Dictionary.subscript.setter((uint64_t)&v82, v36);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        }
        uint64_t v38 = v24[2];
        uint64_t v37 = v24[3];
        if (v38 >= v37 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v24);
        }
        v24[2] = v38 + 1;
        unint64_t v39 = (double *)&v24[2 * v38];
        *((void *)v39 + 4) = a4;
        v39[5] = v72;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v24;
        *a1 = result;
      }
      else
      {
        uint64_t v71 = v22;
        unint64_t v41 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        char v42 = *a2;
        swift_bridgeObjectRetain();
        char v43 = swift_bridgeObjectRetain();
        uint64_t v44 = (void *)specialized AnimationState.subscript.getter(v43, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
        }
        uint64_t v46 = v44[2];
        uint64_t v45 = v44[3];
        if (v46 >= v45 >> 1) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v44);
        }
        v44[2] = v46 + 1;
        uint64_t v47 = (float *)&v44[6 * v46];
        v47[8] = v17;
        v47[9] = v18;
        *((double *)v47 + 5) = v75;
        *((double *)v47 + 6) = v76;
        *((double *)v47 + 7) = v78;
        *((double *)v47 + 8) = v73;
        *((void *)v47 + 9) = v42;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(0);
        long long v49 = v48;
        uint64_t v83 = v48;
        *(void *)&uint64_t v82 = v44;
        outlined init with take of Any(&v82, v81);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v81, v49, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        uint64_t v77 = *(float32x4_t *)a5;
        unint64_t v79 = *(float32x4_t *)a3;
        uint64_t v51 = *(double *)(a3 + 16);
        uint64_t v52 = *(double *)(a3 + 24);
        unint64_t v53 = *(double *)(a3 + 32);
        uint64_t v54 = *(double *)(a5 + 16);
        id v55 = *(double *)(a5 + 24);
        float v56 = *(double *)(a5 + 32);
        float v57 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        float v58 = swift_bridgeObjectRetain();
        unint64_t v59 = (void *)specialized AnimationState.subscript.getter(v58, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
        }
        unint64_t v60 = vaddq_f32(v79, v77);
        uint64_t v61 = v51 + v54;
        char v62 = v52 + v55;
        uint64_t v63 = v53 + v56;
        uint64_t v65 = v59[2];
        uint64_t v64 = v59[3];
        if (v65 >= v64 >> 1)
        {
          float v80 = v60;
          uint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v65 + 1, 1, v59);
          unint64_t v60 = v80;
          unint64_t v59 = v70;
        }
        v59[2] = v65 + 1;
        uint64_t v66 = (float32x4_t *)&v59[6 * v65];
        v66[2] = v60;
        *(double *)v66[3].i64 = v61;
        *(double *)&v66[3].i64[1] = v62;
        *(double *)v66[4].i64 = v63;
        v66[4].i64[1] = v57;
        uint64_t v83 = v49;
        *(void *)&uint64_t v82 = v59;
        outlined init with take of Any(&v82, v81);
        uint64_t v67 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v81, v49, v67);
        swift_bridgeObjectRelease();
        *a2 = v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        long long v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = xmmword_2461BDD50;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = 0;
        *(void *)(v68 + 48) = a4;
        *(double *)(v68 + 56) = v72;
        uint64_t v69 = swift_allocObject();
        *(void *)(v69 + 16) = v68;
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        *a1 = v69;
      }
    }
  }
  return result;
}

{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  double *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double *v43;
  uint64_t result;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  unint64_t v74;
  double *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  double v82;
  double v83;
  _OWORD v84[2];
  long long v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t vars8;

  uint64_t v12 = *(double *)a5;
  double v13 = *(double *)(a5 + 8);
  uint64_t v15 = *(double *)(a5 + 16);
  unint64_t v14 = *(double *)(a5 + 24);
  uint64_t v16 = *(double *)a3;
  unint64_t v17 = *(double *)(a3 + 8);
  unint64_t v18 = *(double *)(a3 + 16);
  uint64_t v83 = *(double *)(a3 + 24);
  uint64_t v20 = a3 + 32;
  unint64_t v19 = *(void *)(a3 + 32);
  uint64_t v21 = *(unsigned char *)(a3 + 40);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  if (v22 == MEMORY[0x263F8D538])
  {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, a6, v12);
  }
  else
  {
    unint64_t v23 = v22;
    uint64_t v82 = a6;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v23 == v24)
    {
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, v17, v18, v83, a6, v12, v13, v15, v14);
    }
    else
    {
      unint64_t v25 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      unint64_t v26 = swift_dynamicCastClass();
      if (v26)
      {
        unint64_t v27 = *(void **)(v26 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        *(void *)&v84[0] = *(void *)v20;
        BYTE8(v84[0]) = *(unsigned char *)(v20 + 8);
        char v87 = *(void *)(a5 + 32);
        id v88 = *(unsigned char *)(a5 + 40);
        *(void *)&uint64_t v85 = *(void *)v20;
        BYTE8(v85) = *(unsigned char *)(v20 + 8);
        outlined retain of LinearGradient((uint64_t)v84);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v87, 1.0);
        uint64_t v28 = v85;
        unint64_t v29 = BYTE8(v85);
        unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v31 = swift_bridgeObjectRetain();
        uint64_t v32 = (void *)specialized AnimationState.subscript.getter(v31, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        }
        uint64_t v33 = v12 + v16;
        uint64_t v34 = v13 + v17;
        unint64_t v35 = v15 + v18;
        unint64_t v36 = v14 + v83;
        uint64_t v38 = v32[2];
        uint64_t v37 = v32[3];
        if (v38 >= v37 >> 1) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v32);
        }
        v32[2] = v38 + 1;
        unint64_t v39 = (double *)&v32[7 * v38];
        v39[4] = v33;
        v39[5] = v34;
        v39[6] = v35;
        v39[7] = v36;
        *((void *)v39 + 8) = v28;
        *((unsigned char *)v39 + 72) = v29;
        *((void *)v39 + 10) = v30;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>();
        uint64_t v86 = v40;
        *(void *)&uint64_t v85 = v32;
        specialized Dictionary.subscript.setter((uint64_t)&v85, v40);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        }
        char v42 = v27[2];
        unint64_t v41 = v27[3];
        if (v42 >= v41 >> 1) {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v27);
        }
        v27[2] = v42 + 1;
        char v43 = (double *)&v27[2 * v42];
        *((void *)v43 + 4) = a4;
        v43[5] = a6;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v27;
        *a1 = result;
      }
      else
      {
        unint64_t v79 = v25;
        float v80 = a4;
        uint64_t v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v46 = *a2;
        outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(a3);
        swift_bridgeObjectRetain();
        uint64_t v47 = swift_bridgeObjectRetain();
        uint64_t v48 = (void *)specialized AnimationState.subscript.getter(v47, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
        swift_bridgeObjectRelease();
        char v81 = a1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
        }
        uint64_t v50 = v48[2];
        long long v49 = v48[3];
        if (v50 >= v49 >> 1) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v48);
        }
        _OWORD v48[2] = v50 + 1;
        uint64_t v51 = (double *)&v48[7 * v50];
        v51[4] = v16;
        v51[5] = v17;
        v51[6] = v18;
        v51[7] = v83;
        *((void *)v51 + 8) = v19;
        *((unsigned char *)v51 + 72) = v21;
        *((void *)v51 + 10) = v46;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>();
        unint64_t v53 = v52;
        uint64_t v86 = v52;
        *(void *)&uint64_t v85 = v48;
        outlined init with take of Any(&v85, v84);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v87 = v45;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v84, v53, isUniquelyReferenced_nonNull_native);
        id v55 = v87;
        swift_bridgeObjectRelease();
        float v56 = *(double *)a3;
        float v57 = *(double *)(a3 + 8);
        float v58 = *(double *)(a3 + 16);
        unint64_t v59 = *(double *)(a3 + 24);
        unint64_t v60 = *(double *)a5;
        uint64_t v61 = *(double *)(a5 + 8);
        char v62 = *(double *)(a5 + 16);
        uint64_t v63 = *(double *)(a5 + 24);
        char v87 = *(void *)v20;
        id v88 = *(unsigned char *)(v20 + 8);
        *(void *)&v84[0] = *(void *)(a5 + 32);
        BYTE8(v84[0]) = *(unsigned char *)(a5 + 40);
        *(void *)&uint64_t v85 = *(void *)v20;
        BYTE8(v85) = *(unsigned char *)(v20 + 8);
        outlined retain of LinearGradient((uint64_t)&v87);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v84, 1.0);
        uint64_t v64 = v85;
        uint64_t v65 = BYTE8(v85);
        uint64_t v66 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v67 = swift_bridgeObjectRetain();
        long long v68 = (void *)specialized AnimationState.subscript.getter(v67, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
        }
        uint64_t v69 = v56 + v60;
        uint64_t v70 = v57 + v61;
        uint64_t v71 = v58 + v62;
        unint64_t v72 = v59 + v63;
        uint64_t v74 = v68[2];
        unint64_t v73 = v68[3];
        if (v74 >= v73 >> 1) {
          long long v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, v68);
        }
        v68[2] = v74 + 1;
        unint64_t v75 = (double *)&v68[7 * v74];
        v75[4] = v69;
        v75[5] = v70;
        v75[6] = v71;
        v75[7] = v72;
        *((void *)v75 + 8) = v64;
        *((unsigned char *)v75 + 72) = v65;
        *((void *)v75 + 10) = v66;
        uint64_t v86 = v53;
        *(void *)&uint64_t v85 = v68;
        outlined init with take of Any(&v85, v84);
        uint64_t v76 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v84, v53, v76);
        swift_bridgeObjectRelease();
        *a2 = v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        uint64_t v77 = swift_allocObject();
        *(_OWORD *)(v77 + 16) = xmmword_2461BDD50;
        *(void *)(v77 + 32) = v79;
        *(void *)(v77 + 40) = 0;
        *(void *)(v77 + 48) = v80;
        *(double *)(v77 + 56) = v82;
        unint64_t v78 = swift_allocObject();
        *(void *)(v78 + 16) = v77;
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        *char v81 = v78;
      }
    }
  }
  return result;
}

{
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  double v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double *v44;
  uint64_t result;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  char v62;
  double v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  unint64_t v74;
  double *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  unint64_t *v84;
  uint64_t *v85;
  _OWORD v86[2];
  long long v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t vars8;

  uint64_t v12 = *(double *)a5;
  double v13 = *(double *)(a5 + 8);
  unint64_t v14 = a5 + 16;
  uint64_t v15 = *(double *)(a5 + 16);
  *(void *)&uint64_t v16 = *(unsigned __int8 *)(a5 + 24);
  unint64_t v17 = *(double *)a3;
  unint64_t v18 = *(double *)(a3 + 8);
  unint64_t v19 = a3 + 16;
  *(void *)&uint64_t v82 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v83 = *(double *)(a3 + 16);
  uint64_t v21 = *(double *)(a3 + 32);
  uint64_t v20 = *(double *)(a3 + 40);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>();
  if (v22 == MEMORY[0x263F8D538])
  {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, a6, v12);
  }
  else
  {
    unint64_t v23 = v22;
    uint64_t v84 = a2;
    uint64_t v85 = a1;
    char v81 = a4;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v23 == v24)
    {
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, v18, v83, v82, a6, v12, v13, v15, v16);
    }
    else
    {
      unint64_t v25 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      unint64_t v26 = swift_dynamicCastClass();
      float v80 = a6;
      if (v26)
      {
        unint64_t v27 = *(void **)(v26 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        *(void *)&v86[0] = *(void *)v19;
        BYTE8(v86[0]) = *(unsigned char *)(v19 + 8);
        uint64_t v89 = *(void *)v14;
        uint64_t v90 = *(unsigned char *)(v14 + 8);
        *(void *)&char v87 = *(void *)v19;
        BYTE8(v87) = *(unsigned char *)(v19 + 8);
        outlined retain of LinearGradient((uint64_t)v86);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v89, 1.0);
        uint64_t v28 = v87;
        unint64_t v29 = BYTE8(v87);
        unint64_t v31 = *(double *)(a5 + 32);
        unint64_t v30 = *(double *)(a5 + 40);
        uint64_t v32 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v33 = swift_bridgeObjectRetain();
        uint64_t v34 = (void *)specialized AnimationState.subscript.getter(v33, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        }
        unint64_t v35 = v12 + v17;
        unint64_t v36 = v13 + v18;
        uint64_t v37 = v20 + v30;
        unint64_t v39 = v34[2];
        uint64_t v38 = v34[3];
        if (v39 >= v38 >> 1) {
          uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v34);
        }
        v34[2] = v39 + 1;
        unint64_t v40 = (double *)&v34[7 * v39];
        v40[4] = v35;
        v40[5] = v36;
        *((void *)v40 + 6) = v28;
        *((unsigned char *)v40 + 56) = v29;
        v40[8] = v21 + v31;
        v40[9] = v37;
        *((void *)v40 + 10) = v32;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>(0);
        id v88 = v41;
        *(void *)&char v87 = v34;
        specialized Dictionary.subscript.setter((uint64_t)&v87, v41);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        }
        char v43 = v27[2];
        char v42 = v27[3];
        if (v43 >= v42 >> 1) {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v27);
        }
        v27[2] = v43 + 1;
        uint64_t v44 = (double *)&v27[2 * v43];
        *((void *)v44 + 4) = a4;
        v44[5] = v80;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v27;
        *a1 = result;
      }
      else
      {
        unint64_t v79 = v25;
        uint64_t v46 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v47 = *a2;
        outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(a3);
        swift_bridgeObjectRetain();
        uint64_t v48 = swift_bridgeObjectRetain();
        long long v49 = (void *)specialized AnimationState.subscript.getter(v48, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
        }
        uint64_t v51 = v49[2];
        uint64_t v50 = v49[3];
        if (v51 >= v50 >> 1) {
          long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v49);
        }
        v49[2] = v51 + 1;
        uint64_t v52 = (double *)&v49[7 * v51];
        v52[4] = v17;
        v52[5] = v18;
        v52[6] = v83;
        *((unsigned char *)v52 + 56) = LOBYTE(v82);
        v52[8] = v21;
        v52[9] = v20;
        *((void *)v52 + 10) = v47;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>(0);
        uint64_t v54 = v53;
        id v88 = v53;
        *(void *)&char v87 = v49;
        outlined init with take of Any(&v87, v86);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v89 = v46;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v86, v54, isUniquelyReferenced_nonNull_native);
        float v56 = v89;
        swift_bridgeObjectRelease();
        float v57 = *(double *)a3;
        float v58 = *(double *)(a3 + 8);
        uint64_t v89 = *(void *)v19;
        uint64_t v90 = *(unsigned char *)(v19 + 8);
        unint64_t v59 = *(double *)a5;
        unint64_t v60 = *(double *)(a5 + 8);
        *(void *)&v86[0] = *(void *)v14;
        BYTE8(v86[0]) = *(unsigned char *)(v14 + 8);
        *(void *)&char v87 = *(void *)v19;
        BYTE8(v87) = *(unsigned char *)(v19 + 8);
        outlined retain of LinearGradient((uint64_t)&v89);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v86, 1.0);
        uint64_t v61 = v87;
        char v62 = BYTE8(v87);
        uint64_t v63 = *(double *)(a3 + 32);
        uint64_t v64 = *(double *)(a3 + 40);
        uint64_t v65 = *(double *)(a5 + 32);
        uint64_t v66 = *(double *)(a5 + 40);
        uint64_t v67 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        long long v68 = swift_bridgeObjectRetain();
        uint64_t v69 = (void *)specialized AnimationState.subscript.getter(v68, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
        }
        uint64_t v70 = v57 + v59;
        uint64_t v71 = v58 + v60;
        unint64_t v72 = v63 + v65;
        uint64_t v74 = v69[2];
        unint64_t v73 = v69[3];
        if (v74 >= v73 >> 1) {
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, v69);
        }
        v69[2] = v74 + 1;
        unint64_t v75 = (double *)&v69[7 * v74];
        v75[4] = v70;
        v75[5] = v71;
        *((void *)v75 + 6) = v61;
        *((unsigned char *)v75 + 56) = v62;
        v75[8] = v72;
        v75[9] = v64 + v66;
        *((void *)v75 + 10) = v67;
        id v88 = v54;
        *(void *)&char v87 = v69;
        outlined init with take of Any(&v87, v86);
        uint64_t v76 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v86, v54, v76);
        swift_bridgeObjectRelease();
        *uint64_t v84 = v56;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        uint64_t v77 = swift_allocObject();
        *(_OWORD *)(v77 + 16) = xmmword_2461BDD50;
        *(void *)(v77 + 32) = v79;
        *(void *)(v77 + 40) = 0;
        *(void *)(v77 + 48) = v81;
        *(double *)(v77 + 56) = v80;
        unint64_t v78 = swift_allocObject();
        *(void *)(v78 + 16) = v77;
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        *uint64_t v85 = v78;
      }
    }
  }
  return result;
}

{
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  double v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double *v44;
  uint64_t result;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  char v62;
  double v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  unint64_t v74;
  double *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  unint64_t *v84;
  uint64_t *v85;
  _OWORD v86[2];
  long long v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t vars8;

  uint64_t v12 = *(double *)a5;
  double v13 = *(double *)(a5 + 8);
  unint64_t v14 = a5 + 16;
  uint64_t v15 = *(double *)(a5 + 16);
  *(void *)&uint64_t v16 = *(unsigned __int8 *)(a5 + 24);
  unint64_t v17 = *(double *)a3;
  unint64_t v18 = *(double *)(a3 + 8);
  unint64_t v19 = a3 + 16;
  *(void *)&uint64_t v82 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v83 = *(double *)(a3 + 16);
  uint64_t v21 = *(double *)(a3 + 32);
  uint64_t v20 = *(double *)(a3 + 40);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>();
  if (v22 == MEMORY[0x263F8D538])
  {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, a6, v12);
  }
  else
  {
    unint64_t v23 = v22;
    uint64_t v84 = a2;
    uint64_t v85 = a1;
    char v81 = a4;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v23 == v24)
    {
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, v18, v83, v82, a6, v12, v13, v15, v16);
    }
    else
    {
      unint64_t v25 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      unint64_t v26 = swift_dynamicCastClass();
      float v80 = a6;
      if (v26)
      {
        unint64_t v27 = *(void **)(v26 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        *(void *)&v86[0] = *(void *)v19;
        BYTE8(v86[0]) = *(unsigned char *)(v19 + 8);
        uint64_t v89 = *(void *)v14;
        uint64_t v90 = *(unsigned char *)(v14 + 8);
        *(void *)&char v87 = *(void *)v19;
        BYTE8(v87) = *(unsigned char *)(v19 + 8);
        outlined retain of LinearGradient((uint64_t)v86);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v89, 1.0);
        uint64_t v28 = v87;
        unint64_t v29 = BYTE8(v87);
        unint64_t v31 = *(double *)(a5 + 32);
        unint64_t v30 = *(double *)(a5 + 40);
        uint64_t v32 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v33 = swift_bridgeObjectRetain();
        uint64_t v34 = (void *)specialized AnimationState.subscript.getter(v33, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        }
        unint64_t v35 = v12 + v17;
        unint64_t v36 = v13 + v18;
        uint64_t v37 = v20 + v30;
        unint64_t v39 = v34[2];
        uint64_t v38 = v34[3];
        if (v39 >= v38 >> 1) {
          uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v34);
        }
        v34[2] = v39 + 1;
        unint64_t v40 = (double *)&v34[7 * v39];
        v40[4] = v35;
        v40[5] = v36;
        *((void *)v40 + 6) = v28;
        *((unsigned char *)v40 + 56) = v29;
        v40[8] = v21 + v31;
        v40[9] = v37;
        *((void *)v40 + 10) = v32;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>(0);
        id v88 = v41;
        *(void *)&char v87 = v34;
        specialized Dictionary.subscript.setter((uint64_t)&v87, v41);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        }
        char v43 = v27[2];
        char v42 = v27[3];
        if (v43 >= v42 >> 1) {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v27);
        }
        v27[2] = v43 + 1;
        uint64_t v44 = (double *)&v27[2 * v43];
        *((void *)v44 + 4) = a4;
        v44[5] = v80;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v27;
        *a1 = result;
      }
      else
      {
        unint64_t v79 = v25;
        uint64_t v46 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v47 = *a2;
        outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(a3);
        swift_bridgeObjectRetain();
        uint64_t v48 = swift_bridgeObjectRetain();
        long long v49 = (void *)specialized AnimationState.subscript.getter(v48, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
        }
        uint64_t v51 = v49[2];
        uint64_t v50 = v49[3];
        if (v51 >= v50 >> 1) {
          long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v49);
        }
        v49[2] = v51 + 1;
        uint64_t v52 = (double *)&v49[7 * v51];
        v52[4] = v17;
        v52[5] = v18;
        v52[6] = v83;
        *((unsigned char *)v52 + 56) = LOBYTE(v82);
        v52[8] = v21;
        v52[9] = v20;
        *((void *)v52 + 10) = v47;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>(0);
        uint64_t v54 = v53;
        id v88 = v53;
        *(void *)&char v87 = v49;
        outlined init with take of Any(&v87, v86);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v89 = v46;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v86, v54, isUniquelyReferenced_nonNull_native);
        float v56 = v89;
        swift_bridgeObjectRelease();
        float v57 = *(double *)a3;
        float v58 = *(double *)(a3 + 8);
        uint64_t v89 = *(void *)v19;
        uint64_t v90 = *(unsigned char *)(v19 + 8);
        unint64_t v59 = *(double *)a5;
        unint64_t v60 = *(double *)(a5 + 8);
        *(void *)&v86[0] = *(void *)v14;
        BYTE8(v86[0]) = *(unsigned char *)(v14 + 8);
        *(void *)&char v87 = *(void *)v19;
        BYTE8(v87) = *(unsigned char *)(v19 + 8);
        outlined retain of LinearGradient((uint64_t)&v89);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v86, 1.0);
        uint64_t v61 = v87;
        char v62 = BYTE8(v87);
        uint64_t v63 = *(double *)(a3 + 32);
        uint64_t v64 = *(double *)(a3 + 40);
        uint64_t v65 = *(double *)(a5 + 32);
        uint64_t v66 = *(double *)(a5 + 40);
        uint64_t v67 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        long long v68 = swift_bridgeObjectRetain();
        uint64_t v69 = (void *)specialized AnimationState.subscript.getter(v68, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
        }
        uint64_t v70 = v57 + v59;
        uint64_t v71 = v58 + v60;
        unint64_t v72 = v63 + v65;
        uint64_t v74 = v69[2];
        unint64_t v73 = v69[3];
        if (v74 >= v73 >> 1) {
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, v69);
        }
        v69[2] = v74 + 1;
        unint64_t v75 = (double *)&v69[7 * v74];
        v75[4] = v70;
        v75[5] = v71;
        *((void *)v75 + 6) = v61;
        *((unsigned char *)v75 + 56) = v62;
        v75[8] = v72;
        v75[9] = v64 + v66;
        *((void *)v75 + 10) = v67;
        id v88 = v54;
        *(void *)&char v87 = v69;
        outlined init with take of Any(&v87, v86);
        uint64_t v76 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v86, v54, v76);
        swift_bridgeObjectRelease();
        *uint64_t v84 = v56;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        uint64_t v77 = swift_allocObject();
        *(_OWORD *)(v77 + 16) = xmmword_2461BDD50;
        *(void *)(v77 + 32) = v79;
        *(void *)(v77 + 40) = 0;
        *(void *)(v77 + 48) = v81;
        *(double *)(v77 + 56) = v80;
        unint64_t v78 = swift_allocObject();
        *(void *)(v78 + 16) = v77;
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        *uint64_t v85 = v78;
      }
    }
  }
  return result;
}

{
  uint64_t v6;
  void *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  void *v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64x2_t v32;
  float64x2_t v33;
  double v34;
  float32x2_t v35;
  int8x16_t v36;
  int64x2_t v37;
  float64x2_t v38;
  double v39;
  char v40;
  void *v41;
  uint64_t result;
  uint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double *v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int64x2_t v65;
  float64x2_t v66;
  double v67;
  float32x2_t v68;
  int8x16_t v69;
  int64x2_t v70;
  float64x2_t v71;
  double v72;
  char v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  float v83;
  unint64_t v84;
  unint64_t v85;
  double *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t *v111;
  _OWORD v112[5];
  long long v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  long long v123;
  _OWORD v124[5];
  long long v125;
  uint64_t v126;
  uint64_t vars8;

  unint64_t v6 = a5;
  uint64_t v12 = *(void **)a5;
  double v13 = *(double *)(a5 + 8);
  unint64_t v14 = *(double *)(a5 + 16);
  uint64_t v15 = *(double *)(a5 + 24);
  uint64_t v16 = *(void *)a3;
  unint64_t v17 = *(void **)(a3 + 8);
  uint64_t v107 = *(double *)(a3 + 16);
  uint64_t v109 = *(void *)(a3 + 24);
  char v102 = *(void *)(a3 + 40);
  uint64_t v104 = *(void *)(a3 + 32);
  uint64_t v98 = *(void *)(a3 + 56);
  uint64_t v100 = *(void *)(a3 + 48);
  unint64_t v94 = *(void *)(a3 + 72);
  uint64_t v96 = *(void *)(a3 + 64);
  uint64_t v93 = *(unsigned char *)(a3 + 80);
  unint64_t v18 = (_OWORD *)(a3 + 88);
  unint64_t v19 = *(_DWORD *)(a3 + 88);
  uint64_t v92 = *(void *)(a3 + 96);
  type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
  if (v20 == MEMORY[0x263F8D538])
  {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, *(double *)&v16, a6, *(double *)&v12);
  }
  else
  {
    uint64_t v21 = v20;
    unint64_t v110 = a2;
    int64_t v111 = a1;
    uint64_t v106 = a4;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v21 == v22) {
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, *(double *)&v16, *(double *)&v17, v107, *(double *)&v109, a6, *(double *)&v12, v13, v14, v15);
    }
    unint64_t v23 = *a1;
    type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    uint64_t v24 = swift_dynamicCastClass();
    if (v24)
    {
      unint64_t v17 = *(void **)(v24 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v125);
      outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v6, (uint64_t)v124);
      outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v125, (uint64_t)&v113);
      outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v124, (uint64_t)v112);
      outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v125, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
      specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((uint64_t)&v113, (uint64_t)v112);
      v112[0] = *v18;
      unint64_t v25 = *(float *)(v6 + 88);
      unint64_t v26 = *(void *)(v6 + 96);
      unint64_t v27 = (void *)*((void *)&v112[0] + 1);
      if (*(void *)(v26 + 16) >= *(void *)(*((void *)&v112[0] + 1) + 16)) {
        uint64_t v28 = *(void *)(*((void *)&v112[0] + 1) + 16);
      }
      else {
        uint64_t v28 = *(void *)(v26 + 16);
      }
      outlined retain of AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>((uint64_t)v112);
      if (!v28)
      {
LABEL_21:
        LODWORD(v14) = v112[0];
        uint64_t v28 = *((void *)&v113 + 1);
        unint64_t v26 = v113;
        uint64_t v16 = v114;
        uint64_t v12 = v115;
        uint64_t v107 = v117;
        uint64_t v109 = v116;
        char v102 = v119;
        uint64_t v104 = v118;
        uint64_t v98 = v121;
        uint64_t v100 = v120;
        LOBYTE(v96) = v122;
        unint64_t v18 = (_OWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        char v43 = swift_bridgeObjectRetain();
        unint64_t v6 = specialized AnimationState.subscript.getter(v43, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>);
        swift_bridgeObjectRelease();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_22:
          uint64_t v44 = v25 + *(float *)&v14;
          uint64_t v46 = *(void *)(v6 + 16);
          uint64_t v45 = *(void *)(v6 + 24);
          if (v46 >= v45 >> 1) {
            unint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, (void *)v6);
          }
          *(void *)(v6 + 16) = v46 + 1;
          uint64_t v47 = v6 + 112 * v46;
          *(void *)(v47 + 32) = v26;
          *(void *)(v47 + 40) = v28;
          *(void *)(v47 + 48) = v16;
          *(void *)(v47 + 56) = v12;
          *(void *)(v47 + 64) = v109;
          *(double *)(v47 + 72) = v107;
          *(void *)(v47 + 80) = v104;
          *(void *)(v47 + 88) = v102;
          *(void *)(v47 + 96) = v100;
          *(void *)(v47 + 104) = v98;
          *(unsigned char *)(v47 + 112) = v96;
          *(float *)(v47 + 120) = v44;
          *(void *)(v47 + 128) = v27;
          *(void *)(v47 + 136) = v18;
          type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>(0);
          long long v115 = (void *)v48;
          *(void *)&uint64_t v113 = v6;
          specialized Dictionary.subscript.setter((uint64_t)&v113, v48);
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
          }
          uint64_t v50 = v17[2];
          long long v49 = v17[3];
          if (v50 >= v49 >> 1) {
            unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v17);
          }
          v17[2] = v50 + 1;
          uint64_t v51 = (double *)&v17[2 * v50];
          *((void *)v51 + 4) = v106;
          v51[5] = a6;
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = v17;
          *int64_t v111 = result;
          return result;
        }
LABEL_55:
        unint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, (void *)v6);
        goto LABEL_22;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = v27[2];
      while (v30 < v31)
      {
        uint64_t v37 = *(int64x2_t *)(v26 + v29 + 40);
        uint64_t v38 = *(float64x2_t *)(v26 + v29 + 56);
        unint64_t v39 = *(double *)(v26 + v29 + 72);
        unint64_t v40 = *(unsigned char *)(v26 + v29 + 80);
        unint64_t v41 = &v27[v29 / 8];
        *(float *)&v27[v29 / 8 + 4] = *(float *)(v26 + v29 + 32) + *(float *)&v27[v29 / 8 + 4];
        if ((v40 & 1) == 0)
        {
          if (v41[10])
          {
            v41[5] = v37.i64[0];
            *((int8x16_t *)v41 + 3) = vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL);
            v41[8] = *(void *)&v38.f64[1];
            uint64_t v34 = v39;
          }
          else
          {
            uint64_t v32 = *(int64x2_t *)(v41 + 5);
            uint64_t v33 = *(float64x2_t *)(v41 + 7);
            uint64_t v34 = *((double *)v41 + 9) + v39;
            unint64_t v35 = vadd_f32((float32x2_t)vmovn_s64(v37), (float32x2_t)vmovn_s64(v32));
            v36.i64[0] = v35.u32[0];
            v36.i64[1] = v35.u32[1];
            *(int8x16_t *)(v41 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v37, 0x20uLL), (float32x2_t)vshrn_n_s64(v32, 0x20uLL)), 0x20uLL), v36);
            *(float64x2_t *)(v41 + 7) = vaddq_f64(v33, v38);
          }
          *((double *)v41 + 9) = v34;
          *((unsigned char *)v41 + 80) = 0;
        }
        ++v30;
        v29 += 56;
        if (v28 == v30) {
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    uint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v53 = *v110;
    outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a3);
    uint64_t v54 = v53;
    swift_bridgeObjectRetain();
    id v55 = swift_bridgeObjectRetain();
    uint64_t v12 = (void *)specialized AnimationState.subscript.getter(v55, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    float v57 = v12[2];
    float v56 = v12[3];
    float v58 = v57 + 1;
    uint64_t v91 = v23;
    if (v57 >= v56 >> 1)
    {
      uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v12);
      float v58 = v57 + 1;
      uint64_t v12 = v90;
    }
    void v12[2] = v58;
    unint64_t v59 = (double *)&v12[14 * v57];
    *((void *)v59 + 4) = v16;
    *((void *)v59 + 5) = v17;
    v59[6] = v107;
    *((void *)v59 + 7) = v109;
    *((void *)v59 + 8) = v104;
    *((void *)v59 + 9) = v102;
    *((void *)v59 + 10) = v100;
    *((void *)v59 + 11) = v98;
    *((void *)v59 + 12) = v96;
    *((void *)v59 + 13) = v94;
    *((unsigned char *)v59 + 112) = v93;
    *((_DWORD *)v59 + 30) = v19;
    *((void *)v59 + 16) = v92;
    *((void *)v59 + 17) = v54;
    type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>(0);
    uint64_t v16 = v60;
    v126 = v60;
    *(void *)&v125 = v12;
    outlined init with take of Any(&v125, v124);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&uint64_t v113 = v52;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v124, v16, isUniquelyReferenced_nonNull_native);
    unint64_t v27 = (void *)v52;
    swift_bridgeObjectRelease();
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v125);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v6, (uint64_t)v124);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v125, (uint64_t)&v113);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v124, (uint64_t)v112);
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v125, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((uint64_t)&v113, (uint64_t)v112);
    uint64_t v123 = *v18;
    unint64_t v25 = *(float *)(v6 + 88);
    unint64_t v26 = *(void *)(v6 + 96);
    unint64_t v6 = *((void *)&v123 + 1);
    if (*(void *)(v26 + 16) >= *(void *)(*((void *)&v123 + 1) + 16)) {
      uint64_t v28 = *(void *)(*((void *)&v123 + 1) + 16);
    }
    else {
      uint64_t v28 = *(void *)(v26 + 16);
    }
    outlined retain of AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>((uint64_t)&v123);
    uint64_t v109 = v16;
    if (v28)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v6);
      }
      char v62 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = *(void *)(v6 + 16);
      while (v63 < v64)
      {
        uint64_t v70 = *(int64x2_t *)(v26 + v62 + 40);
        uint64_t v71 = *(float64x2_t *)(v26 + v62 + 56);
        unint64_t v72 = *(double *)(v26 + v62 + 72);
        unint64_t v73 = *(unsigned char *)(v26 + v62 + 80);
        uint64_t v74 = v6 + v62;
        *(float *)(v6 + v62 + 32) = *(float *)(v26 + v62 + 32) + *(float *)(v6 + v62 + 32);
        if ((v73 & 1) == 0)
        {
          if (*(unsigned char *)(v74 + 80))
          {
            *(void *)(v74 + 40) = v70.i64[0];
            *(int8x16_t *)(v74 + 48) = vextq_s8((int8x16_t)v70, (int8x16_t)v71, 8uLL);
            *(float64_t *)(v74 + 64) = v71.f64[1];
            uint64_t v67 = v72;
          }
          else
          {
            uint64_t v65 = *(int64x2_t *)(v74 + 40);
            uint64_t v66 = *(float64x2_t *)(v74 + 56);
            uint64_t v67 = *(double *)(v74 + 72) + v72;
            long long v68 = vadd_f32((float32x2_t)vmovn_s64(v70), (float32x2_t)vmovn_s64(v65));
            v69.i64[0] = v68.u32[0];
            v69.i64[1] = v68.u32[1];
            *(int8x16_t *)(v74 + 40) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v70, 0x20uLL), (float32x2_t)vshrn_n_s64(v65, 0x20uLL)), 0x20uLL), v69);
            *(float64x2_t *)(v74 + 56) = vaddq_f64(v66, v71);
          }
          *(double *)(v74 + 72) = v67;
          *(unsigned char *)(v74 + 80) = 0;
        }
        ++v63;
        v62 += 56;
        if (v28 == v63) {
          goto LABEL_48;
        }
      }
      goto LABEL_54;
    }
LABEL_48:
    unint64_t v75 = *(float *)&v123;
    uint64_t v76 = *((void *)&v113 + 1);
    uint64_t v108 = v113;
    uint64_t v77 = v114;
    unint64_t v78 = v115;
    unint64_t v79 = v116;
    uint64_t v103 = v118;
    uint64_t v105 = v117;
    uint64_t v99 = v120;
    unsigned int v101 = v119;
    uint64_t v97 = v121;
    int v95 = v122;
    float v80 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    char v81 = swift_bridgeObjectRetain();
    uint64_t v82 = (void *)specialized AnimationState.subscript.getter(v81, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82[2] + 1, 1, v82);
    }
    uint64_t v83 = v25 + v75;
    uint64_t v85 = v82[2];
    uint64_t v84 = v82[3];
    if (v85 >= v84 >> 1) {
      uint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v85 + 1, 1, v82);
    }
    v82[2] = v85 + 1;
    uint64_t v86 = (double *)&v82[14 * v85];
    *((void *)v86 + 4) = v108;
    *((void *)v86 + 5) = v76;
    *((void *)v86 + 6) = v77;
    *((void *)v86 + 7) = v78;
    *((void *)v86 + 8) = v79;
    v86[9] = v105;
    *((void *)v86 + 10) = v103;
    *((void *)v86 + 11) = v101;
    *((void *)v86 + 12) = v99;
    *((void *)v86 + 13) = v97;
    *((unsigned char *)v86 + 112) = v95;
    *((float *)v86 + 30) = v83;
    *((void *)v86 + 16) = v6;
    *((void *)v86 + 17) = v80;
    long long v115 = (void *)v109;
    *(void *)&uint64_t v113 = v82;
    outlined init with take of Any(&v113, v112);
    char v87 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v109, v87);
    swift_bridgeObjectRelease();
    *unint64_t v110 = (unint64_t)v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
    id v88 = swift_allocObject();
    *(_OWORD *)(v88 + 16) = xmmword_2461BDD50;
    *(void *)(v88 + 32) = v91;
    *(void *)(v88 + 40) = 0;
    *(void *)(v88 + 48) = v106;
    *(double *)(v88 + 56) = a6;
    uint64_t v89 = swift_allocObject();
    *(void *)(v89 + 16) = v88;
    swift_retain();
    uint64_t result = swift_bridgeObjectRelease();
    *int64_t v111 = v89;
  }
  return result;
}

{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  ValueMetadata *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double *v40;
  uint64_t result;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v52;
  unint64_t v53;
  long long v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t *v89;
  uint64_t v90;
  long long v91;
  uint64_t v92;
  unint64_t v93;
  _OWORD v94[2];
  long long v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  void v106[10];
  char v107;
  void v108[12];

  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a5, (uint64_t)v108);
  uint64_t v12 = *(double *)v108;
  double v13 = *(double *)&v108[1];
  unint64_t v14 = *(double *)&v108[2];
  uint64_t v15 = *(double *)&v108[3];
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)v106);
  uint64_t v16 = *(double *)v106;
  unint64_t v17 = *(double *)&v106[1];
  unint64_t v19 = *(double *)&v106[2];
  unint64_t v18 = *(double *)&v106[3];
  uint64_t v20 = v106[4];
  uint64_t v82 = v106[6];
  uint64_t v85 = v106[5];
  uint64_t v76 = v106[8];
  unint64_t v79 = v106[7];
  unint64_t v73 = v106[9];
  uint64_t v70 = v107;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v21 == &type metadata for _ShapeStyle_Pack.Fill.AnimatableData) {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, v17, v19, v18, a6, v12, v13, v14, v15);
  }
  uint64_t v90 = a4;
  id v88 = a1;
  unint64_t v22 = *a1;
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  unint64_t v23 = swift_dynamicCastClass();
  uint64_t v89 = a2;
  if (v23)
  {
    uint64_t v24 = *(void **)(v23 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v95);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a5, (uint64_t)&v91);
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(a3, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((uint64_t)&v95, (uint64_t)&v91);
    unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v26 = *((void *)&v95 + 1);
    uint64_t v83 = v95;
    uint64_t v86 = v25;
    unint64_t v27 = v96;
    uint64_t v28 = v97;
    unint64_t v29 = v98;
    unint64_t v30 = v99;
    unint64_t v31 = v100;
    uint64_t v77 = v102;
    float v80 = v101;
    uint64_t v74 = v103;
    uint64_t v71 = v104;
    uint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v33 = (void *)specialized AnimationState.subscript.getter(v32, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    }
    unint64_t v35 = v33[2];
    uint64_t v34 = v33[3];
    if (v35 >= v34 >> 1) {
      uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v33);
    }
    v33[2] = v35 + 1;
    unint64_t v36 = &v33[12 * v35];
    v36[4] = v83;
    v36[5] = v26;
    v36[6] = v27;
    v36[7] = v28;
    v36[8] = v29;
    v36[9] = v30;
    v36[10] = v31;
    v36[11] = v80;
    v36[12] = v77;
    v36[13] = v74;
    *((unsigned char *)v36 + 112) = v71;
    v36[15] = v86;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v97 = v37;
    *(void *)&int v95 = v33;
    specialized Dictionary.subscript.setter((uint64_t)&v95, v37);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    }
    unint64_t v39 = v24[2];
    uint64_t v38 = v24[3];
    if (v39 >= v38 >> 1) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v24);
    }
    v24[2] = v39 + 1;
    unint64_t v40 = (double *)&v24[2 * v39];
    *((void *)v40 + 4) = v90;
    v40[5] = a6;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v24;
    *id v88 = result;
  }
  else
  {
    uint64_t v69 = v22;
    char v42 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    char v43 = *a2;
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v95);
    uint64_t v105 = v43;
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(a3, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    uint64_t v67 = v43;
    swift_bridgeObjectRetain();
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v45 = (void *)specialized AnimationState.subscript.getter(v44, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    }
    uint64_t v47 = v45[2];
    uint64_t v46 = v45[3];
    if (v47 >= v46 >> 1) {
      uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v45);
    }
    v45[2] = v47 + 1;
    uint64_t v48 = (double *)&v45[12 * v47];
    v48[4] = v16;
    v48[5] = v17;
    v48[6] = v19;
    v48[7] = v18;
    *((void *)v48 + 8) = v20;
    *((void *)v48 + 9) = v85;
    *((void *)v48 + 10) = v82;
    *((void *)v48 + 11) = v79;
    *((void *)v48 + 12) = v76;
    *((void *)v48 + 13) = v73;
    *((unsigned char *)v48 + 112) = v70;
    *((void *)v48 + 15) = v67;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v50 = v49;
    uint64_t v92 = v49;
    *(void *)&uint64_t v91 = v45;
    outlined init with take of Any(&v91, v94);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v93 = v42;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v94, v50, isUniquelyReferenced_nonNull_native);
    uint64_t v52 = v93;
    swift_bridgeObjectRelease();
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v95);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a5, (uint64_t)&v91);
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(a3, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((uint64_t)&v95, (uint64_t)&v91);
    unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v54 = v95;
    id v55 = v96;
    float v56 = v97;
    float v57 = v98;
    uint64_t v84 = v99;
    char v87 = v53;
    unint64_t v78 = v101;
    char v81 = v100;
    unint64_t v72 = v103;
    unint64_t v75 = v102;
    long long v68 = v104;
    float v58 = swift_bridgeObjectRetain();
    unint64_t v59 = (void *)specialized AnimationState.subscript.getter(v58, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
    }
    uint64_t v61 = v59[2];
    unint64_t v60 = v59[3];
    if (v61 >= v60 >> 1) {
      unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v59);
    }
    v59[2] = v61 + 1;
    char v62 = &v59[12 * v61];
    *((_OWORD *)v62 + 2) = v54;
    v62[6] = v55;
    v62[7] = v56;
    v62[8] = v57;
    v62[9] = v84;
    v62[10] = v81;
    v62[11] = v78;
    v62[12] = v75;
    v62[13] = v72;
    *((unsigned char *)v62 + 112) = v68;
    v62[15] = v87;
    uint64_t v97 = v50;
    *(void *)&int v95 = v59;
    outlined init with take of Any(&v95, &v91);
    uint64_t v63 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v94[0] = v52;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v91, v50, v63);
    uint64_t v64 = *(void *)&v94[0];
    swift_bridgeObjectRelease();
    float *v89 = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_2461BDD50;
    *(void *)(v65 + 32) = v69;
    *(void *)(v65 + 40) = 0;
    *(void *)(v65 + 48) = v90;
    *(double *)(v65 + 56) = a6;
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = v65;
    swift_retain();
    uint64_t result = swift_bridgeObjectRelease();
    *id v88 = v66;
  }
  return result;
}

{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  char v22;
  ValueMetadata *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  double v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  double *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  double *v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char v60;
  double v61;
  char v62;
  unint64_t *v63;
  unint64_t v64;
  _OWORD v65[2];
  long long v66;
  uint64_t v67;
  unsigned char v68[40];
  char v69;
  unint64_t v70;
  void v71[5];
  char v72;
  void v73[5];
  char v74;
  long long v75;
  double v76;
  double v77;
  double v78;
  char v79;

  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a5, (uint64_t)v73);
  double v13 = *(double *)v73;
  uint64_t v12 = *(double *)&v73[1];
  unint64_t v14 = *(double *)&v73[2];
  uint64_t v15 = *(double *)&v73[3];
  uint64_t v16 = *(double *)&v73[4];
  char v62 = v74;
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)v71);
  unint64_t v17 = *(double *)v71;
  unint64_t v18 = *(double *)&v71[1];
  unint64_t v19 = *(double *)&v71[2];
  uint64_t v20 = *(double *)&v71[3];
  uint64_t v21 = *(double *)&v71[4];
  unint64_t v22 = v72;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v23 == &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData) {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, v18, v19, v20, a6, v13, v12, v14, v15);
  }
  uint64_t v61 = v12;
  uint64_t v64 = *(void *)&v18;
  uint64_t v24 = *a1;
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  unint64_t v25 = swift_dynamicCastClass();
  uint64_t v63 = a2;
  if (v25)
  {
    unint64_t v26 = *(void **)(v25 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a5, (uint64_t)v68);
    if ((v69 & 1) == 0)
    {
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)&v75);
      if (v79 == 1)
      {
        unint64_t v17 = v13;
        uint64_t v64 = *(void *)&v61;
        unint64_t v19 = v14;
        uint64_t v20 = v15;
        uint64_t v21 = v16;
        unint64_t v22 = v62;
      }
      else
      {
        unint64_t v22 = 0;
        *(void *)&unint64_t v17 = COERCE_UNSIGNED_INT(*(float *)&v75 + *(float *)&v13) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v75 + 1) + *((float *)&v13 + 1)) << 32);
        uint64_t v64 = COERCE_UNSIGNED_INT(*((float *)&v75 + 2) + *(float *)&v61) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v75 + 3)+ *((float *)&v61 + 1)) << 32);
        unint64_t v19 = v76 + v14;
        uint64_t v20 = v77 + v15;
        uint64_t v21 = v78 + v16;
      }
    }
    uint64_t v38 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v39 = swift_bridgeObjectRetain();
    unint64_t v40 = (void *)specialized AnimationState.subscript.getter(v39, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
    }
    char v42 = v40[2];
    unint64_t v41 = v40[3];
    if (v42 >= v41 >> 1) {
      unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v40);
    }
    v40[2] = v42 + 1;
    char v43 = (double *)&v40[7 * v42];
    v43[4] = v17;
    *((void *)v43 + 5) = v64;
    v43[6] = v19;
    v43[7] = v20;
    v43[8] = v21;
    *((unsigned char *)v43 + 72) = v22;
    *((void *)v43 + 10) = v38;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    uint64_t v67 = v44;
    *(void *)&uint64_t v66 = v40;
    specialized Dictionary.subscript.setter((uint64_t)&v66, v44);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    }
    uint64_t v46 = v26[2];
    uint64_t v45 = v26[3];
    if (v46 >= v45 >> 1) {
      unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v26);
    }
    v26[2] = v46 + 1;
    uint64_t v47 = (double *)&v26[2 * v46];
    *((void *)v47 + 4) = a4;
    v47[5] = a6;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v26;
    *a1 = result;
  }
  else
  {
    unint64_t v60 = v22;
    unint64_t v59 = a1;
    uint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v29 = *a2;
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)v68);
    uint64_t v70 = v29;
    swift_bridgeObjectRetain();
    unint64_t v30 = swift_bridgeObjectRetain();
    unint64_t v31 = (void *)specialized AnimationState.subscript.getter(v30, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    swift_bridgeObjectRelease();
    float v58 = a4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    }
    uint64_t v33 = v31[2];
    uint64_t v32 = v31[3];
    if (v33 >= v32 >> 1) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v31);
    }
    v31[2] = v33 + 1;
    uint64_t v34 = (double *)&v31[7 * v33];
    v34[4] = v17;
    *((void *)v34 + 5) = v64;
    v34[6] = v19;
    v34[7] = v20;
    v34[8] = v21;
    *((unsigned char *)v34 + 72) = v60;
    *((void *)v34 + 10) = v29;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    unint64_t v36 = *(void *)&v35;
    uint64_t v77 = v35;
    *(void *)&unint64_t v75 = v31;
    outlined init with take of Any(&v75, &v66);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v65[0] = v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v36, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a5, (uint64_t)v68);
    if ((v69 & 1) == 0)
    {
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)&v75);
      if (v79 == 1)
      {
        unint64_t v17 = v13;
        uint64_t v64 = *(void *)&v61;
        unint64_t v19 = v14;
        uint64_t v20 = v15;
        uint64_t v21 = v16;
        unint64_t v60 = v62;
      }
      else
      {
        unint64_t v60 = 0;
        *(void *)&unint64_t v17 = COERCE_UNSIGNED_INT(*(float *)&v75 + *(float *)&v13) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v75 + 1) + *((float *)&v13 + 1)) << 32);
        uint64_t v64 = COERCE_UNSIGNED_INT(*((float *)&v75 + 2) + *(float *)&v61) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v75 + 3)+ *((float *)&v61 + 1)) << 32);
        unint64_t v19 = v76 + v14;
        uint64_t v20 = v77 + v15;
        uint64_t v21 = v78 + v16;
      }
    }
    uint64_t v48 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    long long v49 = swift_bridgeObjectRetain();
    uint64_t v50 = (void *)specialized AnimationState.subscript.getter(v49, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
    }
    uint64_t v51 = v24;
    unint64_t v53 = v50[2];
    uint64_t v52 = v50[3];
    if (v53 >= v52 >> 1) {
      uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v50);
    }
    v50[2] = v53 + 1;
    uint64_t v54 = (double *)&v50[7 * v53];
    v54[4] = v17;
    *((void *)v54 + 5) = v64;
    v54[6] = v19;
    v54[7] = v20;
    v54[8] = v21;
    *((unsigned char *)v54 + 72) = v60;
    *((void *)v54 + 10) = v48;
    uint64_t v67 = v36;
    *(void *)&uint64_t v66 = v50;
    outlined init with take of Any(&v66, v65);
    id v55 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65, v36, v55);
    swift_bridgeObjectRelease();
    *uint64_t v63 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
    float v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_2461BDD50;
    *(void *)(v56 + 32) = v51;
    *(void *)(v56 + 40) = 0;
    *(void *)(v56 + 48) = v58;
    *(double *)(v56 + 56) = a6;
    float v57 = swift_allocObject();
    *(void *)(v57 + 16) = v56;
    swift_retain();
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v59 = v57;
  }
  return result;
}

{
  float v12;
  double v13;
  double v14;
  double v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  double v29;
  double v30;
  uint64_t result;
  double v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  int64x2_t v42;
  char v43;
  double v44;
  double v45;
  double v46;
  uint64_t *v47;
  float v48;
  int64x2_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  float *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  double *v60;
  float32x2_t v61;
  int8x16_t v62;
  float v63;
  float v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  float v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  double v79;
  int8x16_t v80;
  _OWORD v81[2];
  long long v82;
  uint64_t v83;
  uint64_t vars8;

  uint64_t v12 = *(float *)a5;
  double v13 = *(double *)(a5 + 8);
  unint64_t v14 = *(double *)(a5 + 16);
  uint64_t v15 = *(double *)(a5 + 24);
  uint64_t v16 = *(float *)a3;
  unint64_t v17 = *(double *)(a3 + 8);
  unint64_t v18 = *(double *)(a3 + 16);
  unint64_t v19 = *(double *)(a3 + 24);
  uint64_t v20 = *(double *)(a3 + 32);
  unint64_t v79 = *(double *)(a3 + 40);
  uint64_t v21 = *(unsigned char *)(a3 + 48);
  type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>();
  if (v22 == MEMORY[0x263F8D538])
  {
    *(float *)&uint64_t v82 = v16;
    unint64_t v30 = *(double *)&v82;
    *(float *)&uint64_t v82 = v12;
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v30, a6, *(double *)&v82);
  }
  else
  {
    unint64_t v23 = v22;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v23 == v24)
    {
      *(float *)&uint64_t v82 = v16;
      uint64_t v32 = *(double *)&v82;
      *(float *)&uint64_t v82 = v12;
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v32, v17, v18, v19, a6, *(double *)&v82, v13, v14, v15);
    }
    else
    {
      unint64_t v25 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      unint64_t v26 = swift_dynamicCastClass();
      uint64_t v77 = a4;
      if (v26)
      {
        unint64_t v27 = *(void **)(v26 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        if (*(unsigned char *)(a5 + 48))
        {
          uint64_t v28 = v21 & 1;
          unint64_t v29 = v79;
        }
        else
        {
          uint64_t v48 = *(float *)&v14;
          uint64_t v28 = 0;
          if (v21)
          {
            unint64_t v17 = v13;
            unint64_t v18 = v14;
            unint64_t v19 = v15;
            uint64_t v20 = *(double *)(a5 + 32);
            unint64_t v29 = *(double *)(a5 + 40);
          }
          else
          {
            *(float *)&uint64_t v50 = *((float *)&v18 + 1) + *((float *)&v14 + 1);
            unint64_t v19 = v15 + v19;
            uint64_t v20 = v20 + *(double *)(a5 + 32);
            unint64_t v29 = v79 + *(double *)(a5 + 40);
            *(void *)&unint64_t v17 = COERCE_UNSIGNED_INT(*(float *)&v17 + *(float *)&v13) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v17 + 1) + *((float *)&v13 + 1)) << 32);
            *(void *)&unint64_t v18 = COERCE_UNSIGNED_INT(*(float *)&v18 + v48) | ((unint64_t)v50 << 32);
          }
        }
        uint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v52 = swift_bridgeObjectRetain();
        unint64_t v53 = (void *)specialized AnimationState.subscript.getter(v52, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
        }
        id v55 = v53[2];
        uint64_t v54 = v53[3];
        if (v55 >= v54 >> 1) {
          unint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, v53);
        }
        v53[2] = v55 + 1;
        float v56 = (float *)&v53[8 * v55];
        v56[8] = v12 + v16;
        *((double *)v56 + 5) = v17;
        *((double *)v56 + 6) = v18;
        *((double *)v56 + 7) = v19;
        *((double *)v56 + 8) = v20;
        *((double *)v56 + 9) = v29;
        *((unsigned char *)v56 + 80) = v28;
        *((void *)v56 + 11) = v51;
        type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>(0);
        uint64_t v83 = v57;
        *(void *)&uint64_t v82 = v53;
        specialized Dictionary.subscript.setter((uint64_t)&v82, v57);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        }
        unint64_t v59 = v27[2];
        float v58 = v27[3];
        if (v59 >= v58 >> 1) {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v59 + 1, 1, v27);
        }
        v27[2] = v59 + 1;
        unint64_t v60 = (double *)&v27[2 * v59];
        *((void *)v60 + 4) = v77;
        v60[5] = a6;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v27;
        *a1 = result;
      }
      else
      {
        uint64_t v76 = v25;
        unint64_t v78 = a1;
        uint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v75 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v34 = swift_bridgeObjectRetain();
        unint64_t v35 = (void *)specialized AnimationState.subscript.getter(v34, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        }
        uint64_t v37 = v35[2];
        unint64_t v36 = v35[3];
        if (v37 >= v36 >> 1) {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
        }
        v35[2] = v37 + 1;
        uint64_t v38 = (float *)&v35[8 * v37];
        v38[8] = v16;
        *((double *)v38 + 5) = v17;
        *((double *)v38 + 6) = v18;
        *((double *)v38 + 7) = v19;
        *((double *)v38 + 8) = v20;
        *((double *)v38 + 9) = v79;
        *((unsigned char *)v38 + 80) = v21 & 1;
        *((void *)v38 + 11) = v75;
        type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>(0);
        unint64_t v40 = v39;
        uint64_t v83 = v39;
        *(void *)&uint64_t v82 = v35;
        outlined init with take of Any(&v82, v81);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v81, v40, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        char v42 = *(int64x2_t *)(a3 + 8);
        char v43 = *(unsigned char *)(a3 + 48);
        if (*(unsigned char *)(a5 + 48))
        {
          uint64_t v44 = *(double *)(a3 + 24);
          uint64_t v45 = *(double *)(a3 + 32);
          uint64_t v46 = *(double *)(a3 + 40);
          float v80 = *(int8x16_t *)(a3 + 8);
          uint64_t v47 = v78;
        }
        else
        {
          uint64_t v44 = *(double *)(a5 + 24);
          uint64_t v45 = *(double *)(a5 + 32);
          uint64_t v46 = *(double *)(a5 + 40);
          long long v49 = *(int64x2_t *)(a5 + 8);
          uint64_t v47 = v78;
          if (*(unsigned char *)(a3 + 48))
          {
            float v80 = *(int8x16_t *)(a5 + 8);
            char v43 = 0;
          }
          else
          {
            char v43 = 0;
            uint64_t v44 = *(double *)(a3 + 24) + v44;
            uint64_t v45 = *(double *)(a3 + 32) + v45;
            uint64_t v46 = *(double *)(a3 + 40) + v46;
            uint64_t v61 = vadd_f32((float32x2_t)vmovn_s64(v42), (float32x2_t)vmovn_s64(v49));
            v62.i64[0] = v61.u32[0];
            v62.i64[1] = v61.u32[1];
            float v80 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v42, 0x20uLL), (float32x2_t)vshrn_n_s64(v49, 0x20uLL)), 0x20uLL), v62);
          }
        }
        uint64_t v63 = *(float *)a3;
        uint64_t v64 = *(float *)a5;
        uint64_t v65 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v66 = swift_bridgeObjectRetain();
        uint64_t v67 = (void *)specialized AnimationState.subscript.getter(v66, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
        }
        long long v68 = v63 + v64;
        uint64_t v70 = v67[2];
        uint64_t v69 = v67[3];
        if (v70 >= v69 >> 1) {
          uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v67);
        }
        _OWORD v67[2] = v70 + 1;
        uint64_t v71 = &v67[8 * v70];
        *((float *)v71 + 8) = v68;
        *(int8x16_t *)(v71 + 5) = v80;
        *((double *)v71 + 7) = v44;
        *((double *)v71 + 8) = v45;
        *((double *)v71 + 9) = v46;
        *((unsigned char *)v71 + 80) = v43;
        v71[11] = v65;
        uint64_t v83 = v40;
        *(void *)&uint64_t v82 = v67;
        outlined init with take of Any(&v82, v81);
        unint64_t v72 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v81, v40, v72);
        swift_bridgeObjectRelease();
        *a2 = v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        unint64_t v73 = swift_allocObject();
        *(_OWORD *)(v73 + 16) = xmmword_2461BDD50;
        *(void *)(v73 + 32) = v76;
        *(void *)(v73 + 40) = 0;
        *(void *)(v73 + 48) = v77;
        *(double *)(v73 + 56) = a6;
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = v73;
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        *uint64_t v47 = v74;
      }
    }
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, double *a3, uint64_t a4, double *a5, double a6)
{
  double v12 = a3[1];
  double v99 = *a3;
  double v14 = a3[2];
  double v13 = a3[3];
  double v16 = a3[4];
  double v15 = a3[5];
  double v18 = a3[6];
  double v17 = a3[7];
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v19 = swift_dynamicCastClass();
  double v98 = a6;
  if (v19)
  {
    double v84 = v12;
    double v86 = v14;
    double v88 = v13;
    double v90 = v16;
    double v92 = v15;
    double v94 = v18;
    double v96 = v17;
    uint64_t v20 = *(void **)(v19 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    double v21 = *a5;
    double v22 = a5[1];
    double v23 = a5[2];
    double v24 = a5[3];
    double v25 = a5[4];
    double v26 = a5[5];
    double v28 = a5[6];
    double v27 = a5[7];
    unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v30 = swift_bridgeObjectRetain();
    unint64_t v31 = (void *)specialized AnimationState.subscript.getter(v30, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    }
    double v32 = v99 + v21;
    double v33 = v84 + v22;
    double v34 = v86 + v23;
    double v35 = v88 + v24;
    double v36 = v90 + v25;
    double v37 = v92 + v26;
    double v38 = v94 + v28;
    double v39 = v96 + v27;
    unint64_t v41 = v31[2];
    unint64_t v40 = v31[3];
    if (v41 >= v40 >> 1) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v31);
    }
    v31[2] = v41 + 1;
    char v42 = (double *)&v31[9 * v41];
    v42[4] = v32;
    v42[5] = v33;
    v42[6] = v34;
    v42[7] = v35;
    v42[8] = v36;
    v42[9] = v37;
    v42[10] = v38;
    v42[11] = v39;
    *((void *)v42 + 12) = v29;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>(0);
    uint64_t v103 = v43;
    *(void *)&long long v102 = v31;
    specialized Dictionary.subscript.setter((uint64_t)&v102, v43);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v45 = v20[2];
    unint64_t v44 = v20[3];
    if (v45 >= v44 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v20);
    }
    v20[2] = v45 + 1;
    uint64_t v46 = (double *)&v20[2 * v45];
    *((void *)v46 + 4) = a4;
    v46[5] = v98;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v20;
    *a1 = result;
  }
  else
  {
    unint64_t v48 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v49 = *a2;
    swift_bridgeObjectRetain();
    uint64_t v50 = swift_bridgeObjectRetain();
    uint64_t v51 = (void *)specialized AnimationState.subscript.getter(v50, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
    }
    unint64_t v53 = v51[2];
    unint64_t v52 = v51[3];
    if (v53 >= v52 >> 1) {
      uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v51);
    }
    v51[2] = v53 + 1;
    uint64_t v54 = (double *)&v51[9 * v53];
    v54[4] = v99;
    v54[5] = v12;
    v54[6] = v14;
    v54[7] = v13;
    v54[8] = v16;
    v54[9] = v15;
    v54[10] = v18;
    v54[11] = v17;
    *((void *)v54 + 12) = v49;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>(0);
    uint64_t v56 = v55;
    uint64_t v103 = v55;
    *(void *)&long long v102 = v51;
    outlined init with take of Any(&v102, v101);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v101, v56, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    double v100 = *a3;
    double v95 = a3[2];
    double v97 = a3[1];
    double v91 = a3[4];
    double v93 = a3[3];
    double v87 = a3[6];
    double v89 = a3[5];
    double v85 = a3[7];
    double v59 = *a5;
    double v58 = a5[1];
    double v60 = a5[2];
    double v61 = a5[3];
    double v62 = a5[4];
    double v63 = a5[5];
    double v64 = a5[6];
    double v65 = a5[7];
    unint64_t v66 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v67 = swift_bridgeObjectRetain();
    long long v68 = (void *)specialized AnimationState.subscript.getter(v67, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
    }
    double v69 = v100 + v59;
    double v70 = v97 + v58;
    double v71 = v95 + v60;
    double v72 = v93 + v61;
    double v73 = v91 + v62;
    double v74 = v89 + v63;
    double v75 = v87 + v64;
    double v76 = v85 + v65;
    unint64_t v78 = v68[2];
    unint64_t v77 = v68[3];
    if (v78 >= v77 >> 1) {
      long long v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v77 > 1), v78 + 1, 1, v68);
    }
    v68[2] = v78 + 1;
    unint64_t v79 = (double *)&v68[9 * v78];
    v79[4] = v69;
    v79[5] = v70;
    v79[6] = v71;
    v79[7] = v72;
    v79[8] = v73;
    v79[9] = v74;
    v79[10] = v75;
    v79[11] = v76;
    *((void *)v79 + 12) = v66;
    uint64_t v103 = v56;
    *(void *)&long long v102 = v68;
    outlined init with take of Any(&v102, v101);
    char v80 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v101, v56, v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v48;
    uint64_t v81 = *a1;
    swift_retain();
    uint64_t v82 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v81, a4, v98);
    uint64_t v83 = swift_allocObject();
    *(void *)(v83 + 16) = v82;
    *a1 = v83;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double *v40;
  uint64_t result;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  unint64_t v68;
  unint64_t v69;
  double *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  _OWORD v80[2];
  long long v81;
  uint64_t v82;
  uint64_t vars8;

  double v12 = *a5;
  double v13 = a5[1];
  double v15 = a5[2];
  double v14 = a5[3];
  double v16 = *a3;
  double v17 = a3[1];
  double v18 = a3[2];
  double v76 = a3[4];
  unint64_t v78 = a3[3];
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  if (v19 == MEMORY[0x263F8D538])
  {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, a6, v12);
  }
  else
  {
    uint64_t v20 = v19;
    double v75 = a6;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v20 == v21)
    {
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, v17, v18, v78, a6, v12, v13, v15, v14);
    }
    else
    {
      double v22 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      double v23 = swift_dynamicCastClass();
      if (v23)
      {
        double v24 = *(void **)(v23 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        double v25 = a5[4];
        double v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        double v27 = swift_bridgeObjectRetain();
        double v28 = (void *)specialized AnimationState.subscript.getter(v27, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        }
        unint64_t v29 = v12 + v16;
        uint64_t v30 = v13 + v17;
        unint64_t v31 = v15 + v18;
        double v32 = v14 + v78;
        double v33 = v76 + v25;
        double v35 = v28[2];
        double v34 = v28[3];
        if (v35 >= v34 >> 1) {
          double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v28);
        }
        v28[2] = v35 + 1;
        double v36 = (double *)&v28[6 * v35];
        v36[4] = v29;
        v36[5] = v30;
        v36[6] = v31;
        v36[7] = v32;
        v36[8] = v33;
        *((void *)v36 + 9) = v26;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>();
        uint64_t v82 = v37;
        *(void *)&uint64_t v81 = v28;
        specialized Dictionary.subscript.setter((uint64_t)&v81, v37);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        }
        double v39 = v24[2];
        double v38 = v24[3];
        if (v39 >= v38 >> 1) {
          double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v24);
        }
        v24[2] = v39 + 1;
        unint64_t v40 = (double *)&v24[2 * v39];
        *((void *)v40 + 4) = a4;
        v40[5] = v75;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v24;
        *a1 = result;
      }
      else
      {
        double v74 = v22;
        char v42 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v43 = *a2;
        swift_bridgeObjectRetain();
        unint64_t v44 = swift_bridgeObjectRetain();
        unint64_t v45 = (void *)specialized AnimationState.subscript.getter(v44, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
        }
        uint64_t v47 = v45[2];
        uint64_t v46 = v45[3];
        if (v47 >= v46 >> 1) {
          unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v45);
        }
        v45[2] = v47 + 1;
        unint64_t v48 = (double *)&v45[6 * v47];
        v48[4] = v16;
        v48[5] = v17;
        v48[6] = v18;
        v48[7] = v78;
        v48[8] = v76;
        *((void *)v48 + 9) = v43;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>();
        uint64_t v50 = v49;
        uint64_t v82 = v49;
        *(void *)&uint64_t v81 = v45;
        outlined init with take of Any(&v81, v80);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v80, v50, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        unint64_t v52 = a3[2];
        unint64_t v77 = a3[1];
        unint64_t v79 = *a3;
        unint64_t v53 = a3[3];
        uint64_t v54 = a3[4];
        uint64_t v55 = *a5;
        uint64_t v56 = a5[1];
        double v58 = a5[2];
        float v57 = a5[3];
        double v59 = a5[4];
        double v60 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        double v61 = swift_bridgeObjectRetain();
        double v62 = (void *)specialized AnimationState.subscript.getter(v61, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
        }
        double v63 = v79 + v55;
        double v64 = v77 + v56;
        double v65 = v52 + v58;
        unint64_t v66 = v53 + v57;
        uint64_t v67 = v54 + v59;
        double v69 = v62[2];
        long long v68 = v62[3];
        if (v69 >= v68 >> 1) {
          double v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v62);
        }
        v62[2] = v69 + 1;
        double v70 = (double *)&v62[6 * v69];
        v70[4] = v63;
        v70[5] = v64;
        v70[6] = v65;
        v70[7] = v66;
        v70[8] = v67;
        *((void *)v70 + 9) = v60;
        uint64_t v82 = v50;
        *(void *)&uint64_t v81 = v62;
        outlined init with take of Any(&v81, v80);
        double v71 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v80, v50, v71);
        swift_bridgeObjectRelease();
        *a2 = v42;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        double v72 = swift_allocObject();
        *(_OWORD *)(v72 + 16) = xmmword_2461BDD50;
        *(void *)(v72 + 32) = v74;
        *(void *)(v72 + 40) = 0;
        *(void *)(v72 + 48) = a4;
        *(double *)(v72 + 56) = v75;
        double v73 = swift_allocObject();
        *(void *)(v73 + 16) = v72;
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        *a1 = v73;
      }
    }
  }
  return result;
}

{
  ValueMetadata *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  long long v24;
  long long v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  long long v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  _OWORD v59[2];
  long long v60;
  long long v61;
  long long v62;

  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v12 == &type metadata for _AnyAnimatableData) {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, *a3, a3[1], a3[2], a3[3], a6, *a5, a5[1], a5[2], a5[3]);
  }
  double v13 = *a1;
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  double v14 = swift_dynamicCastClass();
  if (v14)
  {
    double v15 = *(void **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    outlined init with copy of _AnyAnimatableData(a3, &v55);
    double v16 = v55;
    if ((void)v55 == *(void *)a5)
    {
      (*(void (**)(char *, double *))(v55 + 96))((char *)&v55 + 8, a5 + 1);
    }
    else if (v16 == type metadata accessor for ZeroVTable())
    {
      outlined destroy of _AnyAnimatableData((uint64_t)&v55);
      outlined init with copy of _AnyAnimatableData(a5, &v55);
    }
    unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    double v60 = v55;
    double v61 = v56;
    *(void *)&double v62 = v57;
    double v32 = swift_bridgeObjectRetain();
    double v33 = (void *)specialized AnimationState.subscript.getter(v32, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    }
    double v35 = v33[2];
    double v34 = v33[3];
    if (v35 >= v34 >> 1) {
      double v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v33);
    }
    v33[2] = v35 + 1;
    double v36 = &v33[6 * v35];
    double v37 = v61;
    double v38 = v62;
    *((_OWORD *)v36 + 2) = v60;
    *((_OWORD *)v36 + 3) = v37;
    v36[8] = v38;
    v36[9] = v31;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    *((void *)&v56 + 1) = v39;
    *(void *)&uint64_t v55 = v33;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v39);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    }
    unint64_t v41 = v15[2];
    unint64_t v40 = v15[3];
    if (v41 >= v40 >> 1) {
      double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v15);
    }
    void v15[2] = v41 + 1;
    char v42 = (double *)&v15[2 * v41];
    *((void *)v42 + 4) = a4;
    v42[5] = a6;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v15;
    *a1 = result;
  }
  else
  {
    double v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    outlined init with copy of _AnyAnimatableData(a3, &v60);
    *((void *)&v62 + 1) = *a2;
    swift_bridgeObjectRetain();
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = (void *)specialized AnimationState.subscript.getter(v19, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    double v22 = v20[2];
    double v21 = v20[3];
    if (v22 >= v21 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
    }
    v20[2] = v22 + 1;
    double v23 = &v20[6 * v22];
    double v24 = v60;
    double v25 = v62;
    v23[3] = v61;
    v23[4] = v25;
    v23[2] = v24;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    double v27 = v26;
    *((void *)&v56 + 1) = v26;
    *(void *)&uint64_t v55 = v20;
    outlined init with take of Any(&v55, v59);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v58 = v18;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v27, isUniquelyReferenced_nonNull_native);
    unint64_t v29 = v58;
    swift_bridgeObjectRelease();
    outlined init with copy of _AnyAnimatableData(a3, &v55);
    uint64_t v30 = v55;
    if ((void)v55 == *(void *)a5)
    {
      (*(void (**)(char *, double *))(v55 + 96))((char *)&v55 + 8, a5 + 1);
    }
    else if (v30 == type metadata accessor for ZeroVTable())
    {
      outlined destroy of _AnyAnimatableData((uint64_t)&v55);
      outlined init with copy of _AnyAnimatableData(a5, &v55);
    }
    uint64_t v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    double v60 = v55;
    double v61 = v56;
    *(void *)&double v62 = v57;
    unint64_t v44 = swift_bridgeObjectRetain();
    unint64_t v45 = (void *)specialized AnimationState.subscript.getter(v44, &lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    }
    uint64_t v47 = v45[2];
    uint64_t v46 = v45[3];
    if (v47 >= v46 >> 1) {
      unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v45);
    }
    v45[2] = v47 + 1;
    unint64_t v48 = &v45[6 * v47];
    unint64_t v49 = v61;
    uint64_t v50 = v62;
    *((_OWORD *)v48 + 2) = v60;
    *((_OWORD *)v48 + 3) = v49;
    v48[8] = v50;
    v48[9] = v43;
    *((void *)&v56 + 1) = v27;
    *(void *)&uint64_t v55 = v45;
    outlined init with take of Any(&v55, v59);
    uint64_t v51 = swift_isUniquelyReferenced_nonNull_native();
    double v58 = v29;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v27, v51);
    unint64_t v52 = v58;
    swift_bridgeObjectRelease();
    *a2 = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
    unint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_2461BDD50;
    *(void *)(v53 + 32) = v13;
    *(void *)(v53 + 40) = 0;
    *(void *)(v53 + 48) = a4;
    *(double *)(v53 + 56) = a6;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v53;
    swift_retain();
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v54;
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v20 = swift_dynamicCastClass();
  if (v20)
  {
    double v21 = *(void **)(v20 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v23 = swift_bridgeObjectRetain();
    double v24 = (void *)specialized AnimationState.subscript.getter(v23, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    }
    double v25 = a4 + a8;
    double v26 = a5 + a9;
    double v27 = a6 + a10;
    unint64_t v29 = v24[2];
    unint64_t v28 = v24[3];
    if (v29 >= v28 >> 1) {
      double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v24);
    }
    v24[2] = v29 + 1;
    uint64_t v30 = (double *)&v24[4 * v29];
    v30[4] = v25;
    v30[5] = v26;
    v30[6] = v27;
    *((void *)v30 + 7) = v22;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>(0);
    uint64_t v61 = v31;
    *(void *)&long long v60 = v24;
    specialized Dictionary.subscript.setter((uint64_t)&v60, v31);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    }
    unint64_t v33 = v21[2];
    unint64_t v32 = v21[3];
    if (v33 >= v32 >> 1) {
      double v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v21);
    }
    v21[2] = v33 + 1;
    double v34 = (double *)&v21[2 * v33];
    *((void *)v34 + 4) = a3;
    v34[5] = a7;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v21;
    *a1 = result;
  }
  else
  {
    unint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v37 = *a2;
    swift_bridgeObjectRetain();
    uint64_t v38 = swift_bridgeObjectRetain();
    double v39 = (void *)specialized AnimationState.subscript.getter(v38, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    }
    unint64_t v41 = v39[2];
    unint64_t v40 = v39[3];
    if (v41 >= v40 >> 1) {
      double v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v39);
    }
    v39[2] = v41 + 1;
    char v42 = (double *)&v39[4 * v41];
    v42[4] = a4;
    v42[5] = a5;
    v42[6] = a6;
    *((void *)v42 + 7) = v37;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>(0);
    uint64_t v44 = v43;
    uint64_t v61 = v43;
    *(void *)&long long v60 = v39;
    outlined init with take of Any(&v60, v59);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v44, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    unint64_t v46 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v47 = swift_bridgeObjectRetain();
    unint64_t v48 = (void *)specialized AnimationState.subscript.getter(v47, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
    }
    double v49 = a4 + a8;
    double v50 = a5 + a9;
    double v51 = a6 + a10;
    unint64_t v53 = v48[2];
    unint64_t v52 = v48[3];
    if (v53 >= v52 >> 1) {
      unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v48);
    }
    _OWORD v48[2] = v53 + 1;
    uint64_t v54 = (double *)&v48[4 * v53];
    v54[4] = v49;
    v54[5] = v50;
    v54[6] = v51;
    *((void *)v54 + 7) = v46;
    uint64_t v61 = v44;
    *(void *)&long long v60 = v48;
    outlined init with take of Any(&v60, v59);
    char v55 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v44, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v36;
    uint64_t v56 = *a1;
    swift_retain();
    uint64_t v57 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v56, a3, a7);
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v57;
    *a1 = v58;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v27 = swift_dynamicCastClass();
  if (v27)
  {
    unint64_t v28 = *(void **)(v27 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = (void *)specialized AnimationState.subscript.getter(v30, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    }
    double v32 = a4 + a9;
    double v33 = a5 + a10;
    double v34 = a6 + a11;
    unint64_t v36 = v31[2];
    unint64_t v35 = v31[3];
    if (v36 >= v35 >> 1) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v31);
    }
    v31[2] = v36 + 1;
    unint64_t v37 = (double *)&v31[5 * v36];
    v37[4] = v32;
    v37[5] = v33;
    v37[6] = v34;
    v37[7] = a7 + a12;
    *((void *)v37 + 8) = v29;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(0);
    uint64_t v69 = v38;
    *(void *)&long long v68 = v31;
    specialized Dictionary.subscript.setter((uint64_t)&v68, v38);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    }
    unint64_t v40 = v28[2];
    unint64_t v39 = v28[3];
    if (v40 >= v39 >> 1) {
      unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v28);
    }
    v28[2] = v40 + 1;
    unint64_t v41 = (double *)&v28[2 * v40];
    *((void *)v41 + 4) = a3;
    v41[5] = a8;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v28;
    *a1 = result;
  }
  else
  {
    unint64_t v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v44 = *a2;
    swift_bridgeObjectRetain();
    uint64_t v45 = swift_bridgeObjectRetain();
    unint64_t v46 = (void *)specialized AnimationState.subscript.getter(v45, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
    }
    unint64_t v48 = v46[2];
    unint64_t v47 = v46[3];
    if (v48 >= v47 >> 1) {
      unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v46);
    }
    _OWORD v46[2] = v48 + 1;
    double v49 = (double *)&v46[5 * v48];
    v49[4] = a4;
    v49[5] = a5;
    v49[6] = a6;
    v49[7] = a7;
    *((void *)v49 + 8) = v44;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(0);
    uint64_t v51 = v50;
    uint64_t v69 = v50;
    *(void *)&long long v68 = v46;
    outlined init with take of Any(&v68, v67);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v51, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v54 = swift_bridgeObjectRetain();
    char v55 = (void *)specialized AnimationState.subscript.getter(v54, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
    }
    double v56 = a4 + a9;
    double v57 = a5 + a10;
    double v58 = a6 + a11;
    unint64_t v60 = v55[2];
    unint64_t v59 = v55[3];
    if (v60 >= v59 >> 1) {
      char v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v55);
    }
    v55[2] = v60 + 1;
    uint64_t v61 = (double *)&v55[5 * v60];
    v61[4] = v56;
    v61[5] = v57;
    v61[6] = v58;
    v61[7] = a7 + a12;
    *((void *)v61 + 8) = v53;
    uint64_t v69 = v51;
    *(void *)&long long v68 = v55;
    outlined init with take of Any(&v68, v67);
    char v62 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v51, v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v43;
    uint64_t v63 = *a1;
    swift_retain();
    uint64_t v64 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v63, a3, a8);
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = v64;
    *a1 = v65;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  double v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double *v44;
  uint64_t result;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  double v60;
  double v61;
  double v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  unint64_t v74;
  void *v75;
  double v76;
  unint64_t v78;
  _OWORD v79[2];
  long long v80;
  uint64_t v81;
  uint64_t vars8;

  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  if (v27 == MEMORY[0x263F8D538])
  {
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a8, a9);
  }
  else
  {
    unint64_t v28 = v27;
    double v76 = a8;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v28 == v29)
    {
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    }
    else
    {
      uint64_t v30 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      uint64_t v31 = swift_dynamicCastClass();
      if (v31)
      {
        double v32 = *(void **)(v31 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        double v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        double v34 = swift_bridgeObjectRetain();
        unint64_t v35 = (void *)specialized AnimationState.subscript.getter(v34, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        }
        unint64_t v36 = a4 + a9;
        unint64_t v37 = a5 + a10;
        unint64_t v39 = v35[2];
        uint64_t v38 = v35[3];
        if (v39 >= v38 >> 1) {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v35);
        }
        v35[2] = v39 + 1;
        unint64_t v40 = (double *)&v35[5 * v39];
        v40[4] = v36;
        v40[5] = v37;
        v40[6] = a6 + a11;
        v40[7] = a7 + a12;
        *((void *)v40 + 8) = v33;
        type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>();
        uint64_t v81 = v41;
        *(void *)&char v80 = v35;
        specialized Dictionary.subscript.setter((uint64_t)&v80, v41);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        }
        unint64_t v43 = v32[2];
        char v42 = v32[3];
        if (v43 >= v42 >> 1) {
          double v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v32);
        }
        v32[2] = v43 + 1;
        unint64_t v44 = (double *)&v32[2 * v43];
        *((void *)v44 + 4) = a3;
        v44[5] = a8;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v32;
        *a1 = result;
      }
      else
      {
        unint64_t v46 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v47 = *a2;
        swift_bridgeObjectRetain();
        unint64_t v48 = swift_bridgeObjectRetain();
        double v49 = (void *)specialized AnimationState.subscript.getter(v48, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
        }
        uint64_t v50 = v49[2];
        uint64_t v51 = v49[3];
        unint64_t v52 = v50 + 1;
        if (v50 >= v51 >> 1)
        {
          double v70 = v49;
          double v71 = v49[2];
          double v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v50 + 1, 1, v70);
          uint64_t v50 = v71;
          double v49 = v72;
        }
        v49[2] = v52;
        unint64_t v53 = (double *)&v49[5 * v50];
        v53[4] = a4;
        v53[5] = a5;
        v53[6] = a6;
        v53[7] = a7;
        *((void *)v53 + 8) = v47;
        type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>();
        char v55 = v54;
        uint64_t v81 = v54;
        *(void *)&char v80 = v49;
        outlined init with take of Any(&v80, v79);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v79, v55, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        double v57 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        double v58 = swift_bridgeObjectRetain();
        unint64_t v59 = (void *)specialized AnimationState.subscript.getter(v58, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
        }
        unint64_t v60 = a4 + a9;
        uint64_t v61 = a5 + a10;
        char v62 = a6 + a11;
        uint64_t v63 = v59[2];
        uint64_t v64 = v59[3];
        uint64_t v65 = v63 + 1;
        if (v63 >= v64 >> 1)
        {
          unint64_t v78 = v63 + 1;
          double v73 = v59;
          double v74 = v59[2];
          double v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v63 + 1, 1, v73);
          uint64_t v63 = v74;
          uint64_t v65 = v78;
          unint64_t v59 = v75;
        }
        _OWORD v59[2] = v65;
        unint64_t v66 = (double *)&v59[5 * v63];
        v66[4] = v60;
        v66[5] = v61;
        v66[6] = v62;
        v66[7] = a7 + a12;
        *((void *)v66 + 8) = v57;
        uint64_t v81 = v55;
        *(void *)&char v80 = v59;
        outlined init with take of Any(&v80, v79);
        uint64_t v67 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v79, v55, v67);
        swift_bridgeObjectRelease();
        *a2 = v46;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        long long v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = xmmword_2461BDD50;
        *(void *)(v68 + 32) = v30;
        *(void *)(v68 + 40) = 0;
        *(void *)(v68 + 48) = a3;
        *(double *)(v68 + 56) = v76;
        uint64_t v69 = swift_allocObject();
        *(void *)(v69 + 16) = v68;
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        *a1 = v69;
      }
    }
  }
  return result;
}

void specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8)
{
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  if (v16 == MEMORY[0x263F8D538])
  {
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a6, a7);
  }
  else
  {
    uint64_t v17 = v16;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v17 == v18)
    {
      __break(1u);
    }
    else
    {
      uint64_t v19 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      uint64_t v20 = swift_dynamicCastClass();
      if (v20)
      {
        double v21 = *(void **)(v20 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v23 = swift_bridgeObjectRetain();
        double v24 = (void *)specialized AnimationState.subscript.getter(v23, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        }
        double v25 = a4 + a7;
        double v26 = a5 + a8;
        unint64_t v28 = v24[2];
        unint64_t v27 = v24[3];
        if (v28 >= v27 >> 1) {
          double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v24);
        }
        v24[2] = v28 + 1;
        unint64_t v29 = (double *)&v24[3 * v28];
        v29[4] = v25;
        v29[5] = v26;
        *((void *)v29 + 6) = v22;
        type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>(0);
        uint64_t v67 = v30;
        *(void *)&long long v66 = v24;
        specialized Dictionary.subscript.setter((uint64_t)&v66, v30);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v32 = v21[2];
        unint64_t v31 = v21[3];
        if (v32 >= v31 >> 1) {
          double v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v21);
        }
        v21[2] = v32 + 1;
        double v33 = (double *)&v21[2 * v32];
        *((void *)v33 + 4) = a3;
        v33[5] = a6;
        uint64_t v34 = swift_allocObject();
        *(void *)(v34 + 16) = v21;
        *a1 = v34;
      }
      else
      {
        unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v36 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v37 = swift_bridgeObjectRetain();
        uint64_t v38 = (void *)specialized AnimationState.subscript.getter(v37, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        }
        unint64_t v39 = v38[2];
        unint64_t v40 = v38[3];
        unint64_t v41 = v39 + 1;
        if (v39 >= v40 >> 1)
        {
          double v58 = v38;
          unint64_t v59 = v38[2];
          unint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v39 + 1, 1, v58);
          unint64_t v39 = v59;
          uint64_t v38 = v60;
        }
        v38[2] = v41;
        char v42 = (double *)&v38[3 * v39];
        v42[4] = a4;
        v42[5] = a5;
        *((void *)v42 + 6) = v36;
        type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>(0);
        uint64_t v44 = v43;
        uint64_t v67 = v43;
        *(void *)&long long v66 = v38;
        outlined init with take of Any(&v66, v65);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65, v44, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        unint64_t v46 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v47 = swift_bridgeObjectRetain();
        unint64_t v48 = (void *)specialized AnimationState.subscript.getter(v47, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
        }
        double v49 = a4 + a7;
        double v50 = a5 + a8;
        unint64_t v51 = v48[2];
        unint64_t v52 = v48[3];
        unint64_t v53 = v51 + 1;
        if (v51 >= v52 >> 1)
        {
          unint64_t v64 = v51 + 1;
          uint64_t v61 = v48;
          unint64_t v62 = v48[2];
          uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v51 + 1, 1, v61);
          unint64_t v51 = v62;
          unint64_t v53 = v64;
          unint64_t v48 = v63;
        }
        _OWORD v48[2] = v53;
        uint64_t v54 = (double *)&v48[3 * v51];
        v54[4] = v49;
        v54[5] = v50;
        *((void *)v54 + 6) = v46;
        uint64_t v67 = v44;
        *(void *)&long long v66 = v48;
        outlined init with take of Any(&v66, v65);
        char v55 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65, v44, v55);
        swift_bridgeObjectRelease();
        *a2 = v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        uint64_t v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = xmmword_2461BDD50;
        *(void *)(v56 + 32) = v19;
        *(void *)(v56 + 40) = 0;
        *(void *)(v56 + 48) = a3;
        *(double *)(v56 + 56) = a6;
        uint64_t v57 = swift_allocObject();
        *(void *)(v57 + 16) = v56;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v57;
      }
    }
  }
}

void specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  if (v20 == MEMORY[0x263F8D538])
  {
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a7, a8);
  }
  else
  {
    uint64_t v21 = v20;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v21 == v22)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      uint64_t v24 = swift_dynamicCastClass();
      if (v24)
      {
        double v25 = *(void **)(v24 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v27 = swift_bridgeObjectRetain();
        unint64_t v28 = (void *)specialized AnimationState.subscript.getter(v27, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        }
        double v29 = a4 + a8;
        double v30 = a5 + a9;
        double v31 = a6 + a10;
        unint64_t v33 = v28[2];
        unint64_t v32 = v28[3];
        if (v33 >= v32 >> 1) {
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v28);
        }
        v28[2] = v33 + 1;
        uint64_t v34 = (double *)&v28[4 * v33];
        v34[4] = v29;
        v34[5] = v30;
        v34[6] = v31;
        *((void *)v34 + 7) = v26;
        type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0);
        uint64_t v73 = v35;
        *(void *)&long long v72 = v28;
        specialized Dictionary.subscript.setter((uint64_t)&v72, v35);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        }
        unint64_t v37 = v25[2];
        unint64_t v36 = v25[3];
        if (v37 >= v36 >> 1) {
          double v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v25);
        }
        v25[2] = v37 + 1;
        uint64_t v38 = (double *)&v25[2 * v37];
        *((void *)v38 + 4) = a3;
        v38[5] = a7;
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = v25;
        *a1 = v39;
      }
      else
      {
        unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v41 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v42 = swift_bridgeObjectRetain();
        uint64_t v43 = (void *)specialized AnimationState.subscript.getter(v42, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
        }
        unint64_t v44 = v43[2];
        unint64_t v45 = v43[3];
        unint64_t v46 = v44 + 1;
        if (v44 >= v45 >> 1)
        {
          unint64_t v64 = v43;
          unint64_t v65 = v43[2];
          long long v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v44 + 1, 1, v64);
          unint64_t v44 = v65;
          uint64_t v43 = v66;
        }
        v43[2] = v46;
        uint64_t v47 = (double *)&v43[4 * v44];
        v47[4] = a4;
        v47[5] = a5;
        v47[6] = a6;
        *((void *)v47 + 7) = v41;
        type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0);
        uint64_t v49 = v48;
        uint64_t v73 = v48;
        *(void *)&long long v72 = v43;
        outlined init with take of Any(&v72, v71);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v49, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v52 = swift_bridgeObjectRetain();
        unint64_t v53 = (void *)specialized AnimationState.subscript.getter(v52, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
        }
        double v54 = a4 + a8;
        double v55 = a5 + a9;
        double v56 = a6 + a10;
        unint64_t v57 = v53[2];
        unint64_t v58 = v53[3];
        unint64_t v59 = v57 + 1;
        if (v57 >= v58 >> 1)
        {
          unint64_t v70 = v57 + 1;
          uint64_t v67 = v53;
          unint64_t v68 = v53[2];
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v57 + 1, 1, v67);
          unint64_t v57 = v68;
          unint64_t v59 = v70;
          unint64_t v53 = v69;
        }
        v53[2] = v59;
        unint64_t v60 = (double *)&v53[4 * v57];
        v60[4] = v54;
        v60[5] = v55;
        v60[6] = v56;
        *((void *)v60 + 7) = v51;
        uint64_t v73 = v49;
        *(void *)&long long v72 = v53;
        outlined init with take of Any(&v72, v71);
        char v61 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v49, v61);
        swift_bridgeObjectRelease();
        *a2 = v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = xmmword_2461BDD50;
        *(void *)(v62 + 32) = v23;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = a3;
        *(double *)(v62 + 56) = a7;
        uint64_t v63 = swift_allocObject();
        *(void *)(v63 + 16) = v62;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v63;
      }
    }
  }
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  double *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  unint64_t v68;
  void *v69;
  unint64_t v70;
  _OWORD v71[2];
  long long v72;
  uint64_t v73;
  uint64_t vars8;

  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  if (v20 == MEMORY[0x263F8D538])
  {
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a3, a4, a7, a8);
  }
  else
  {
    uint64_t v21 = v20;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v21 == v22)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      uint64_t v24 = swift_dynamicCastClass();
      if (v24)
      {
        double v25 = *(void **)(v24 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v27 = swift_bridgeObjectRetain();
        unint64_t v28 = (void *)specialized AnimationState.subscript.getter(v27, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        }
        double v29 = a4 + a8;
        double v30 = a5 + a9;
        double v31 = a6 + a10;
        unint64_t v33 = v28[2];
        unint64_t v32 = v28[3];
        if (v33 >= v32 >> 1) {
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v28);
        }
        v28[2] = v33 + 1;
        uint64_t v34 = (double *)&v28[4 * v33];
        v34[4] = v29;
        v34[5] = v30;
        v34[6] = v31;
        *((void *)v34 + 7) = v26;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>();
        uint64_t v73 = v35;
        *(void *)&long long v72 = v28;
        specialized Dictionary.subscript.setter((uint64_t)&v72, v35);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        }
        unint64_t v37 = v25[2];
        unint64_t v36 = v25[3];
        if (v37 >= v36 >> 1) {
          double v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v25);
        }
        v25[2] = v37 + 1;
        uint64_t v38 = (double *)&v25[2 * v37];
        *((void *)v38 + 4) = a3;
        v38[5] = a7;
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = v25;
        *a1 = v39;
      }
      else
      {
        unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v41 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v42 = swift_bridgeObjectRetain();
        uint64_t v43 = (void *)specialized AnimationState.subscript.getter(v42, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
        }
        unint64_t v44 = v43[2];
        unint64_t v45 = v43[3];
        unint64_t v46 = v44 + 1;
        if (v44 >= v45 >> 1)
        {
          unint64_t v64 = v43;
          unint64_t v65 = v43[2];
          long long v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v44 + 1, 1, v64);
          unint64_t v44 = v65;
          uint64_t v43 = v66;
        }
        v43[2] = v46;
        uint64_t v47 = (double *)&v43[4 * v44];
        v47[4] = a4;
        v47[5] = a5;
        v47[6] = a6;
        *((void *)v47 + 7) = v41;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>();
        uint64_t v49 = v48;
        uint64_t v73 = v48;
        *(void *)&long long v72 = v43;
        outlined init with take of Any(&v72, v71);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v49, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v52 = swift_bridgeObjectRetain();
        unint64_t v53 = (void *)specialized AnimationState.subscript.getter(v52, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
        }
        double v54 = a4 + a8;
        double v55 = a5 + a9;
        double v56 = a6 + a10;
        unint64_t v57 = v53[2];
        unint64_t v58 = v53[3];
        unint64_t v59 = v57 + 1;
        if (v57 >= v58 >> 1)
        {
          unint64_t v70 = v57 + 1;
          uint64_t v67 = v53;
          unint64_t v68 = v53[2];
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v57 + 1, 1, v67);
          unint64_t v57 = v68;
          unint64_t v59 = v70;
          unint64_t v53 = v69;
        }
        v53[2] = v59;
        unint64_t v60 = (double *)&v53[4 * v57];
        v60[4] = v54;
        v60[5] = v55;
        v60[6] = v56;
        *((void *)v60 + 7) = v51;
        uint64_t v73 = v49;
        *(void *)&long long v72 = v53;
        outlined init with take of Any(&v72, v71);
        char v61 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v49, v61);
        swift_bridgeObjectRelease();
        *a2 = v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = xmmword_2461BDD50;
        *(void *)(v62 + 32) = v23;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = a3;
        *(double *)(v62 + 56) = a7;
        uint64_t v63 = swift_allocObject();
        *(void *)(v63 + 16) = v62;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v63;
      }
    }
  }
}

void specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v16 == &type metadata for ResolvedGradientVector)
  {
    __break(1u);
  }
  else
  {
    uint64_t v56 = a5;
    uint64_t v17 = *a1;
    type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    uint64_t v18 = swift_dynamicCastClass();
    unint64_t v57 = a1;
    if (v18)
    {
      uint64_t v19 = *(void **)(v18 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      *(void *)&long long v59 = a3;
      BYTE8(v59) = a4;
      *(void *)&v58[0] = a6;
      BYTE8(v58[0]) = a7;
      swift_bridgeObjectRetain();
      ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v58, 1.0);
      unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v21 = v59;
      char v22 = BYTE8(v59);
      uint64_t v23 = swift_bridgeObjectRetain();
      uint64_t v24 = (void *)specialized AnimationState.subscript.getter(v23, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      }
      unint64_t v26 = v24[2];
      unint64_t v25 = v24[3];
      if (v26 >= v25 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v24);
      }
      v24[2] = v26 + 1;
      uint64_t v27 = &v24[3 * v26];
      v27[4] = v21;
      *((unsigned char *)v27 + 40) = v22;
      v27[6] = v20;
      type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
      uint64_t v60 = v28;
      *(void *)&long long v59 = v24;
      specialized Dictionary.subscript.setter((uint64_t)&v59, v28);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      }
      double v29 = v57;
      unint64_t v31 = v19[2];
      unint64_t v30 = v19[3];
      if (v31 >= v30 >> 1) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v19);
      }
      v19[2] = v31 + 1;
      unint64_t v32 = (double *)&v19[2 * v31];
      *((void *)v32 + 4) = v56;
      v32[5] = a8;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v19;
    }
    else
    {
      unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      double v55 = a2;
      unint64_t v35 = *a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v36 = swift_bridgeObjectRetain();
      unint64_t v37 = (void *)specialized AnimationState.subscript.getter(v36, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
      }
      unint64_t v39 = v37[2];
      unint64_t v38 = v37[3];
      if (v39 >= v38 >> 1) {
        unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v37);
      }
      v37[2] = v39 + 1;
      unint64_t v40 = &v37[3 * v39];
      v40[4] = a3;
      *((unsigned char *)v40 + 40) = a4;
      v40[6] = v35;
      type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
      uint64_t v42 = v41;
      uint64_t v60 = v41;
      *(void *)&long long v59 = v37;
      outlined init with take of Any(&v59, v58);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v42, isUniquelyReferenced_nonNull_native);
      unint64_t v44 = v34;
      swift_bridgeObjectRelease();
      *(void *)&long long v59 = a3;
      BYTE8(v59) = a4;
      *(void *)&v58[0] = a6;
      BYTE8(v58[0]) = a7;
      swift_bridgeObjectRetain();
      ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v58, 1.0);
      unint64_t v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v46 = v59;
      char v47 = BYTE8(v59);
      uint64_t v48 = swift_bridgeObjectRetain();
      uint64_t v49 = (void *)specialized AnimationState.subscript.getter(v48, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
      }
      unint64_t v51 = v49[2];
      unint64_t v50 = v49[3];
      if (v51 >= v50 >> 1) {
        uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v49);
      }
      v49[2] = v51 + 1;
      uint64_t v52 = &v49[3 * v51];
      v52[4] = v46;
      *((unsigned char *)v52 + 40) = v47;
      v52[6] = v45;
      uint64_t v60 = v42;
      *(void *)&long long v59 = v49;
      outlined init with take of Any(&v59, v58);
      char v53 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v42, v53);
      swift_bridgeObjectRelease();
      *double v55 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_2461BDD50;
      *(void *)(v54 + 32) = v17;
      *(void *)(v54 + 40) = 0;
      *(void *)(v54 + 48) = v56;
      *(double *)(v54 + 56) = a8;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v54;
      swift_retain();
      swift_bridgeObjectRelease();
      double v29 = v57;
    }
    *double v29 = v33;
  }
}

void specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, double *a3, uint64_t a4, float32x2_t *a5, double a6)
{
  double v66 = *a3;
  float32x2_t v12 = (float32x2_t)a3[2];
  float32x2_t v64 = (float32x2_t)a3[1];
  type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(0);
  if (v13 == MEMORY[0x263F8D538])
  {
    *(double *)&long long v70 = v66;
    double v36 = *(double *)a5;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v66, a6, v36);
  }
  else
  {
    uint64_t v14 = v13;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v14 == v15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v16 = *a1;
      type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      uint64_t v17 = swift_dynamicCastClass();
      if (v17)
      {
        uint64_t v18 = *(void **)(v17 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        float32x2_t v19 = *a5;
        float32x2_t v20 = a5[1];
        float32x2_t v21 = a5[2];
        unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v23 = swift_bridgeObjectRetain();
        uint64_t v24 = (void *)specialized AnimationState.subscript.getter(v23, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        }
        float32x2_t v25 = vadd_f32(*(float32x2_t *)&v66, v19);
        float32x2_t v26 = vadd_f32(v64, v20);
        float32x2_t v27 = vadd_f32(v12, v21);
        unint64_t v29 = v24[2];
        unint64_t v28 = v24[3];
        if (v29 >= v28 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v24);
        }
        v24[2] = v29 + 1;
        unint64_t v30 = &v24[4 * v29];
        v30[4] = v25;
        v30[5] = v26;
        v30[6] = v27;
        v30[7] = v22;
        type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(0);
        uint64_t v71 = v31;
        *(void *)&long long v70 = v24;
        specialized Dictionary.subscript.setter((uint64_t)&v70, v31);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
        }
        unint64_t v33 = v18[2];
        unint64_t v32 = v18[3];
        if (v33 >= v32 >> 1) {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v18);
        }
        void v18[2] = v33 + 1;
        unint64_t v34 = (double *)&v18[2 * v33];
        *((void *)v34 + 4) = a4;
        v34[5] = a6;
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v18;
        *a1 = v35;
      }
      else
      {
        uint64_t v63 = a1;
        unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v38 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v39 = swift_bridgeObjectRetain();
        unint64_t v40 = (void *)specialized AnimationState.subscript.getter(v39, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
        }
        unint64_t v42 = v40[2];
        unint64_t v41 = v40[3];
        *(double *)&long long v43 = v66;
        if (v42 >= v41 >> 1)
        {
          char v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v40);
          *(double *)&long long v43 = v66;
          unint64_t v40 = v61;
        }
        v40[2] = v42 + 1;
        *((float32x2_t *)&v43 + 1) = v64;
        unint64_t v44 = &v40[4 * v42];
        *((_OWORD *)v44 + 2) = v43;
        v44[6] = v12;
        v44[7] = v38;
        type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(0);
        uint64_t v46 = v45;
        uint64_t v71 = v45;
        *(void *)&long long v70 = v40;
        outlined init with take of Any(&v70, v69);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v69, v46, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        float32x4_t v65 = *(float32x4_t *)a5->f32;
        float32x4_t v67 = *(float32x4_t *)a3;
        float32x2_t v48 = (float32x2_t)a3[2];
        float32x2_t v49 = a5[2];
        unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v51 = swift_bridgeObjectRetain();
        uint64_t v52 = (void *)specialized AnimationState.subscript.getter(v51, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
        }
        float32x4_t v53 = vaddq_f32(v67, v65);
        float32x2_t v54 = vadd_f32(v48, v49);
        unint64_t v56 = v52[2];
        unint64_t v55 = v52[3];
        if (v56 >= v55 >> 1)
        {
          float32x4_t v68 = v53;
          uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v52);
          float32x4_t v53 = v68;
          uint64_t v52 = v62;
        }
        v52[2] = v56 + 1;
        unint64_t v57 = (float32x4_t *)&v52[4 * v56];
        v57[2] = v53;
        *(float32x2_t *)v57[3].f32 = v54;
        v57[3].i64[1] = v50;
        uint64_t v71 = v46;
        *(void *)&long long v70 = v52;
        outlined init with take of Any(&v70, v69);
        char v58 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v69, v46, v58);
        swift_bridgeObjectRelease();
        *a2 = v37;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
        uint64_t v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = xmmword_2461BDD50;
        *(void *)(v59 + 32) = v16;
        *(void *)(v59 + 40) = 0;
        *(void *)(v59 + 48) = a4;
        *(double *)(v59 + 56) = a6;
        uint64_t v60 = swift_allocObject();
        *(void *)(v60 + 16) = v59;
        swift_retain();
        swift_bridgeObjectRelease();
        *uint64_t v63 = v60;
      }
    }
  }
}

uint64_t specialized static AnimatableArray.+= infix(_:_:)(uint64_t result, uint64_t a2)
{
  v2 = *(void **)result;
  if (*(void *)(a2 + 16) >= *(void *)(*(void *)result + 16)) {
    uint64_t v3 = *(void *)(*(void *)result + 16);
  }
  else {
    uint64_t v3 = *(void *)(a2 + 16);
  }
  if (v3)
  {
    uint64_t v5 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_17:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (void *)result;
    }
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = v2[2];
    do
    {
      if (v7 >= v8)
      {
        __break(1u);
        goto LABEL_17;
      }
      int64x2_t v14 = *(int64x2_t *)(a2 + v6 + 40);
      float64x2_t v15 = *(float64x2_t *)(a2 + v6 + 56);
      double v16 = *(double *)(a2 + v6 + 72);
      char v17 = *(unsigned char *)(a2 + v6 + 80);
      uint64_t v18 = &v2[v6 / 8];
      *(float *)&v2[v6 / 8 + 4] = *(float *)(a2 + v6 + 32) + *(float *)&v2[v6 / 8 + 4];
      if ((v17 & 1) == 0)
      {
        if (v18[10])
        {
          v18[5] = v14.i64[0];
          *((int8x16_t *)v18 + 3) = vextq_s8((int8x16_t)v14, (int8x16_t)v15, 8uLL);
          v18[8] = *(void *)&v15.f64[1];
          double v11 = v16;
        }
        else
        {
          int64x2_t v9 = *(int64x2_t *)(v18 + 5);
          float64x2_t v10 = *(float64x2_t *)(v18 + 7);
          double v11 = *((double *)v18 + 9) + v16;
          float32x2_t v12 = vadd_f32((float32x2_t)vmovn_s64(v14), (float32x2_t)vmovn_s64(v9));
          v13.i64[0] = v12.u32[0];
          v13.i64[1] = v12.u32[1];
          *(int8x16_t *)(v18 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v14, 0x20uLL), (float32x2_t)vshrn_n_s64(v9, 0x20uLL)), 0x20uLL), v13);
          *(float64x2_t *)(v18 + 7) = vaddq_f64(v10, v15);
        }
        *((double *)v18 + 9) = v11;
        *((unsigned char *)v18 + 80) = 0;
      }
      ++v7;
      v6 += 56;
    }
    while (v3 != v7);
    *uint64_t v5 = v2;
  }
  return result;
}

{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  unint64_t i;

  v2 = *(void **)result;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 >= *(void *)(*(void *)result + 16)) {
    uint64_t v4 = *(void *)(*(void *)result + 16);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v4)
  {
    unint64_t v6 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_14:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (void *)result;
    }
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (v3 == i)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (i >= v2[2]) {
        goto LABEL_13;
      }
      *(float32x4_t *)&v2[2 * i + 4] = vaddq_f32(*(float32x4_t *)(a2 + 32 + 16 * i), *(float32x4_t *)&v2[2 * i + 4]);
    }
    *unint64_t v6 = v2;
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  unint64_t i;

  v2 = *(void *)result;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 >= *(void *)(*(void *)result + 16)) {
    uint64_t v4 = *(void *)(*(void *)result + 16);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v4)
  {
    unint64_t v6 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_14:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = result;
    }
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (v3 == i)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (i >= *(void *)(v2 + 16)) {
        goto LABEL_13;
      }
      *(float *)(v2 + 4 * i + 32) = *(float *)(a2 + 32 + 4 * i) + *(float *)(v2 + 4 * i + 32);
    }
    *unint64_t v6 = v2;
  }
  return result;
}

uint64_t specialized static AnimatableArray.-= infix(_:_:)(uint64_t result, uint64_t a2)
{
  v2 = *(void **)result;
  if (*(void *)(a2 + 16) >= *(void *)(*(void *)result + 16)) {
    uint64_t v3 = *(void *)(*(void *)result + 16);
  }
  else {
    uint64_t v3 = *(void *)(a2 + 16);
  }
  if (v3)
  {
    uint64_t v5 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_17:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (void *)result;
    }
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = v2[2];
    do
    {
      if (v7 >= v8)
      {
        __break(1u);
        goto LABEL_17;
      }
      int64x2_t v14 = *(int64x2_t *)(a2 + v6 + 40);
      float64x2_t v15 = *(float64x2_t *)(a2 + v6 + 56);
      double v16 = *(double *)(a2 + v6 + 72);
      char v17 = *(unsigned char *)(a2 + v6 + 80);
      uint64_t v18 = &v2[v6 / 8];
      *(float *)&v2[v6 / 8 + 4] = *(float *)&v2[v6 / 8 + 4] - *(float *)(a2 + v6 + 32);
      if ((v17 & 1) == 0)
      {
        if (v18[10])
        {
          v18[5] = v14.i64[0];
          *((int8x16_t *)v18 + 3) = vextq_s8((int8x16_t)v14, (int8x16_t)v15, 8uLL);
          v18[8] = *(void *)&v15.f64[1];
          double v11 = v16;
        }
        else
        {
          int64x2_t v9 = *(int64x2_t *)(v18 + 5);
          float64x2_t v10 = *(float64x2_t *)(v18 + 7);
          double v11 = *((double *)v18 + 9) - v16;
          float32x2_t v12 = vsub_f32((float32x2_t)vmovn_s64(v9), (float32x2_t)vmovn_s64(v14));
          v13.i64[0] = v12.u32[0];
          v13.i64[1] = v12.u32[1];
          *(int8x16_t *)(v18 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v9, 0x20uLL), (float32x2_t)vshrn_n_s64(v14, 0x20uLL)), 0x20uLL), v13);
          *(float64x2_t *)(v18 + 7) = vsubq_f64(v10, v15);
        }
        *((double *)v18 + 9) = v11;
        *((unsigned char *)v18 + 80) = 0;
      }
      ++v7;
      v6 += 56;
    }
    while (v3 != v7);
    *uint64_t v5 = v2;
  }
  return result;
}

{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  unint64_t i;

  v2 = *(void **)result;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 >= *(void *)(*(void *)result + 16)) {
    uint64_t v4 = *(void *)(*(void *)result + 16);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v4)
  {
    unint64_t v6 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_14:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (void *)result;
    }
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (v3 == i)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (i >= v2[2]) {
        goto LABEL_13;
      }
      *(float32x4_t *)&v2[2 * i + 4] = vsubq_f32(*(float32x4_t *)&v2[2 * i + 4], *(float32x4_t *)(a2 + 32 + 16 * i));
    }
    *unint64_t v6 = v2;
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  unint64_t i;

  v2 = *(void *)result;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 >= *(void *)(*(void *)result + 16)) {
    uint64_t v4 = *(void *)(*(void *)result + 16);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v4)
  {
    unint64_t v6 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_14:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = result;
    }
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (v3 == i)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (i >= *(void *)(v2 + 16)) {
        goto LABEL_13;
      }
      *(float *)(v2 + 4 * i + 32) = *(float *)(v2 + 4 * i + 32) - *(float *)(a2 + 32 + 4 * i);
    }
    *unint64_t v6 = v2;
  }
  return result;
}

uint64_t specialized AnimatableAttribute.description.getter()
{
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x626174616D696E41;
}

uint64_t specialized AnimatableAttributeHelper.transaction.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t specialized AnimatableAttributeHelper.transaction.setter()
{
  return AGGraphSetValue();
}

unint64_t instantiation function for generic protocol witness table for AnimatableFrameAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AnimatableFrameAttributeVFD(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD();
  *(void *)(a1 + 8) = result;
  return result;
}

_DWORD *sub_245F5443C@<X0>(_DWORD *a1@<X8>)
{
  return AnimatableAttributeHelper.phase.getter(a1);
}

uint64_t sub_245F54460()
{
  return AnimatableAttributeHelper.phase.setter();
}

uint64_t sub_245F54498()
{
  return 16;
}

__n128 sub_245F544A4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245F544B0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = AnimatableAttributeHelper.$phase.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245F544DC(unsigned int *a1)
{
  return AnimatableAttributeHelper.$phase.setter(*a1);
}

uint64_t sub_245F54504()
{
  return 16;
}

__n128 sub_245F54510(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_245F5451C@<D0>(void *a1@<X8>)
{
  return AnimatableAttributeHelper.time.getter(a1);
}

uint64_t sub_245F54540()
{
  return AnimatableAttributeHelper.time.setter();
}

uint64_t sub_245F54578()
{
  return 16;
}

__n128 sub_245F54584(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245F54590@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = AnimatableAttribute.$environment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245F545BC(unsigned int *a1)
{
  return AnimatableAttributeHelper.$time.setter(*a1);
}

uint64_t sub_245F545E4()
{
  return 16;
}

__n128 sub_245F545F0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245F54604()
{
  return 16;
}

__n128 sub_245F54610(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245F5461C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = AnimatableAttributeHelper.$transaction.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245F54648(unsigned int *a1)
{
  return AnimatableAttributeHelper.$transaction.setter(*a1);
}

uint64_t sub_245F54670()
{
  return 16;
}

__n128 sub_245F5467C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatableAttribute(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 7;
  int v11 = v6 & 0x100000;
  if (v7 > 7
    || v11 != 0
    || ((((((v9 + 7 + ((v7 + 12) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + (v8 & (v7 + 8))) | 4) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + (v8 & (v7 + 16)));
  }
  else
  {
    uint64_t v15 = AssociatedTypeWitness;
    uint64_t v16 = ~v7;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    char v17 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v18 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v17 = *v18;
    uint64_t v19 = v8 & ((unint64_t)v18 + 11);
    uint64_t v20 = v8 & ((unint64_t)v17 + 11);
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v19;
    *(_DWORD *)(v20 | 4) = *(_DWORD *)(v19 | 4);
    float32x2_t v21 = (_DWORD *)((v20 + 11) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v22 = (_DWORD *)((v19 + 11) & 0xFFFFFFFFFFFFFFF8);
    *float32x2_t v21 = *v22;
    uint64_t v23 = v7 + 4;
    uint64_t v24 = (void *)(((unint64_t)v21 + v23) & v16);
    float32x2_t v25 = (const void *)(((unint64_t)v22 + v23) & v16);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v22 + v23) & v16, 1, AssociatedTypeWitness))
    {
      memcpy(v24, v25, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v24, v25, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v24, 0, 1, v15);
    }
    float32x2_t v26 = (void *)(((unint64_t)v24 + v10) & 0xFFFFFFFFFFFFFFF8);
    float32x2_t v27 = (void *)(((unint64_t)v25 + v10) & 0xFFFFFFFFFFFFFFF8);
    *float32x2_t v26 = *v27;
    *(_DWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for AnimatableAttribute(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 4;
  unint64_t v9 = (unint64_t)v3 + v8;
  size_t v10 = (_DWORD *)(((unint64_t)v4 + v8) & ~(v7 | 7));
  int v11 = (_DWORD *)(v9 & ~(v7 | 7));
  _DWORD *v11 = *v10;
  v11[1] = v10[1];
  float32x2_t v12 = (_DWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  int8x16_t v13 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *float32x2_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + v7 + 4) & ~v7);
  uint64_t v15 = (void *)(((unint64_t)v13 + v7 + 4) & ~v7);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v17 = v16(v14, 1, AssociatedTypeWitness);
  int v18 = v16(v15, 1, AssociatedTypeWitness);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v14, v15, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v19 = *(_DWORD *)(v6 + 84);
    size_t v20 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v14, v15, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v14, AssociatedTypeWitness);
    int v19 = *(_DWORD *)(v6 + 84);
    size_t v20 = *(void *)(v6 + 64);
  }
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  memcpy(v14, v15, v21);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v22 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v23 = (uint64_t)v14 + v22 + 7;
  uint64_t v24 = (uint64_t)v15 + v22 + 7;
  unint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(void *)(v23 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v24 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for AnimatableAttribute(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 4;
  unint64_t v9 = (unint64_t)v3 + v8;
  size_t v10 = (_DWORD *)(((unint64_t)v4 + v8) & ~(v7 | 7));
  int v11 = (_DWORD *)(v9 & ~(v7 | 7));
  _DWORD *v11 = *v10;
  v11[1] = v10[1];
  float32x2_t v12 = (_DWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  int8x16_t v13 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *float32x2_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + v7 + 4) & ~v7);
  uint64_t v15 = (const void *)(((unint64_t)v13 + v7 + 4) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v15, 1, AssociatedTypeWitness))
  {
    int v16 = *(_DWORD *)(v6 + 84);
    size_t v17 = *(void *)(v6 + 64);
    if (v16) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v17 + 1;
    }
    memcpy(v14, v15, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, AssociatedTypeWitness);
    size_t v20 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v19 = v6 + 56;
    v20(v14, 0, 1, AssociatedTypeWitness);
    int v16 = *(_DWORD *)(v19 + 28);
    size_t v17 = *(void *)(v19 + 8);
  }
  if (v16) {
    size_t v21 = v17;
  }
  else {
    size_t v21 = v17 + 1;
  }
  uint64_t v22 = (void *)(((unint64_t)v14 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  *(_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for AnimatableAttribute(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 4;
  unint64_t v9 = (unint64_t)v3 + v8;
  size_t v10 = (_DWORD *)(((unint64_t)v4 + v8) & ~(v7 | 7));
  int v11 = (_DWORD *)(v9 & ~(v7 | 7));
  _DWORD *v11 = *v10;
  v11[1] = v10[1];
  float32x2_t v12 = (_DWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  int8x16_t v13 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *float32x2_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + v7 + 4) & ~v7);
  uint64_t v15 = (void *)(((unint64_t)v13 + v7 + 4) & ~v7);
  int v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v17 = v16(v14, 1, AssociatedTypeWitness);
  int v18 = v16(v15, 1, AssociatedTypeWitness);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v14, v15, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v19 = *(_DWORD *)(v6 + 84);
    size_t v20 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v14, v15, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v14, AssociatedTypeWitness);
    int v19 = *(_DWORD *)(v6 + 84);
    size_t v20 = *(void *)(v6 + 64);
  }
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  memcpy(v14, v15, v21);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v22 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v23 = (uint64_t)v14 + v22 + 7;
  uint64_t v24 = (void *)(((unint64_t)v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v23 & 0xFFFFFFFFFFFFFFF8) = *v24;
  unint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_release();
  *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableAttribute(_DWORD *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v9 | 7;
  uint64_t v12 = v10 + 7;
  if (v8 < a2
    && *((unsigned char *)a1
       + ((((((v12 + ((v9 + 12) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + ((v9 + 8) & ~v11)) | 4)))
  {
    return v8 + *a1 + 1;
  }
  unint64_t v14 = (v9
       + (((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11) + 11) & 0xFFFFFFFFFFFFFFF8)
       + 4) & ~v9;
  if (v7 < 0x7FFFFFFE)
  {
    unint64_t v16 = *(void *)((v12 + v14) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    if ((v16 + 1) >= 2) {
      return v16;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v15 = (*(uint64_t (**)(unint64_t))(v5 + 48))(v14);
    if (v15 >= 2) {
      return v15 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for AnimatableAttribute(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 1;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  if (!v7) {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v8;
  }
  uint64_t v11 = (v9 + 8) & ~(v9 | 7);
  uint64_t v12 = (v9 + 12) & ~v9;
  if (v7) {
    size_t v13 = *(void *)(v6 + 64);
  }
  else {
    size_t v13 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v14 = (v11 + ((((v13 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) | 4;
  if (v10 >= a2)
  {
    if (v10 < a3) {
      *((unsigned char *)a1 + v14) = 0;
    }
    if (a2)
    {
      unsigned int v15 = (unsigned char *)((v9
                     + (((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + (v9 | 7) + 4) & ~(v9 | 7)) + 11) & 0xFFFFFFFFFFFFFFF8)
                     + 4) & ~v9);
      if (v8 < 0x7FFFFFFE)
      {
        int v19 = (void *)((unint64_t)&v15[v13 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *int v19 = 0;
          *(_DWORD *)int v19 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *int v19 = a2;
        }
      }
      else if (v8 >= a2)
      {
        size_t v20 = *(void (**)(unsigned char *, void))(v6 + 56);
        v20(v15, a2 + 1);
      }
      else
      {
        if (v13 <= 3) {
          int v16 = ~(-1 << (8 * v13));
        }
        else {
          int v16 = -1;
        }
        if (v13)
        {
          int v17 = v16 & (~v8 + a2);
          if (v13 <= 3) {
            int v18 = v13;
          }
          else {
            int v18 = 4;
          }
          bzero(v15, v13);
          switch(v18)
          {
            case 2:
              *(_WORD *)unsigned int v15 = v17;
              break;
            case 3:
              *(_WORD *)unsigned int v15 = v17;
              void v15[2] = BYTE2(v17);
              break;
            case 4:
              *(_DWORD *)unsigned int v15 = v17;
              break;
            default:
              *unsigned int v15 = v17;
              break;
          }
        }
      }
    }
  }
  else
  {
    bzero(a1, (v11 + ((((v13 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) | 4);
    *a1 = ~v10 + a2;
    if (v10 < a3) {
      *((unsigned char *)a1 + v14) = 1;
    }
  }
}

uint64_t assignWithCopy for AnimatableFrameAttribute(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  return a1;
}

uint64_t assignWithTake for AnimatableFrameAttribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableFrameAttribute(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 85)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimatableFrameAttribute(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 85) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 85) = 0;
    }
    if (a2) {
      *(void *)(result + 72) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimatableFrameAttribute()
{
  return &type metadata for AnimatableFrameAttribute;
}

uint64_t assignWithCopy for AnimatableFrameAttributeVFD(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v6;
  long long v7 = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  return a1;
}

__n128 __swift_memcpy146_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AnimatableFrameAttributeVFD(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableFrameAttributeVFD(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 146)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimatableFrameAttributeVFD(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 146) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 146) = 0;
    }
    if (a2) {
      *(void *)(result + 72) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimatableFrameAttributeVFD()
{
  return &type metadata for AnimatableFrameAttributeVFD;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatableAttributeHelper(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  size_t v9 = v8 + 7;
  int v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((v8 + 7 + ((v7 + 12) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    uint64_t v14 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unsigned int v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v15 = *v16;
    int v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v17 = *v18;
    int v19 = (void *)(((unint64_t)v17 + v7 + 4) & ~v7);
    size_t v20 = (const void *)(((unint64_t)v18 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v18 + v7 + 4) & ~v7, 1, AssociatedTypeWitness))
    {
      memcpy(v19, v20, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v19, v20, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v14);
    }
    size_t v21 = (void *)(((unint64_t)v19 + v9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v20 + v9) & 0xFFFFFFFFFFFFFFF8);
    *size_t v21 = *v22;
    *(_DWORD *)(((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AnimatableAttributeHelper(uint64_t a1)
{
  unint64_t v1 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  }

  return swift_release();
}

_DWORD *initializeWithCopy for AnimatableAttributeHelper(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)(((unint64_t)v5 + v9 + 4) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v6 + v9 + 4) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    int v16 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v15 = v8 + 56;
    v16(v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v15 + 28);
    size_t v13 = *(void *)(v15 + 8);
  }
  if (v12) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  int v18 = (void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v19 = (void *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *int v18 = *v19;
  *(_DWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for AnimatableAttributeHelper(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)(((unint64_t)v5 + v9 + 4) & ~v9);
  uint64_t v11 = (void *)(((unint64_t)v6 + v9 + 4) & ~v9);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v13 = v12(v10, 1, AssociatedTypeWitness);
  int v14 = v12(v11, 1, AssociatedTypeWitness);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  if (v15) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v16 + 1;
  }
  memcpy(v10, v11, v17);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v18 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v19 = (uint64_t)v10 + v18 + 7;
  uint64_t v20 = (uint64_t)v11 + v18 + 7;
  unint64_t v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(void *)(v19 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v20 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v22 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for AnimatableAttributeHelper(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)(((unint64_t)v5 + v9 + 4) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v6 + v9 + 4) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
    size_t v16 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v15 = v8 + 56;
    v16(v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v15 + 28);
    size_t v13 = *(void *)(v15 + 8);
  }
  if (v12) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  uint64_t v18 = (void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  *(_DWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for AnimatableAttributeHelper(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)(((unint64_t)v5 + v9 + 4) & ~v9);
  uint64_t v11 = (void *)(((unint64_t)v6 + v9 + 4) & ~v9);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v13 = v12(v10, 1, AssociatedTypeWitness);
  int v14 = v12(v11, 1, AssociatedTypeWitness);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  if (v15) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v16 + 1;
  }
  memcpy(v10, v11, v17);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v18 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v19 = (uint64_t)v10 + v18 + 7;
  uint64_t v20 = (void *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v19 & 0xFFFFFFFFFFFFFFF8) = *v20;
  unint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_release();
  *(_DWORD *)(v21 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableAttributeHelper(_DWORD *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + 7;
  if (v8 < a2
    && *((unsigned char *)a1 + ((((v11 + ((v9 + 12) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v8 + *a1 + 1;
  }
  unint64_t v13 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v7 < 0x7FFFFFFE)
  {
    unint64_t v15 = *(void *)((v11 + v13) & 0xFFFFFFFFFFFFFFF8);
    if (v15 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if ((v15 + 1) >= 2) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v14 = (*(uint64_t (**)(unint64_t))(v5 + 48))(v13);
    if (v14 >= 2) {
      return v14 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for AnimatableAttributeHelper(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 1;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  if (!v7) {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v8;
  }
  uint64_t v11 = (v9 + 12) & ~v9;
  if (v7) {
    size_t v12 = *(void *)(v6 + 64);
  }
  else {
    size_t v12 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v13 = (((v12 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v10 >= a2)
  {
    if (v10 < a3) {
      *((unsigned char *)a1 + v13) = 0;
    }
    if (a2)
    {
      unsigned int v14 = (unsigned char *)(((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9);
      if (v8 < 0x7FFFFFFE)
      {
        uint64_t v18 = (void *)((unint64_t)&v14[v12 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *uint64_t v18 = 0;
          *(_DWORD *)uint64_t v18 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *uint64_t v18 = a2;
        }
      }
      else if (v8 >= a2)
      {
        uint64_t v19 = *(void (**)(unsigned char *, void))(v6 + 56);
        v19(v14, a2 + 1);
      }
      else
      {
        if (v12 <= 3) {
          int v15 = ~(-1 << (8 * v12));
        }
        else {
          int v15 = -1;
        }
        if (v12)
        {
          int v16 = v15 & (~v8 + a2);
          if (v12 <= 3) {
            int v17 = v12;
          }
          else {
            int v17 = 4;
          }
          bzero(v14, v12);
          switch(v17)
          {
            case 2:
              *(_WORD *)unsigned int v14 = v16;
              break;
            case 3:
              *(_WORD *)unsigned int v14 = v16;
              v14[2] = BYTE2(v16);
              break;
            case 4:
              *(_DWORD *)unsigned int v14 = v16;
              break;
            default:
              *unsigned int v14 = v16;
              break;
          }
        }
      }
    }
  }
  else
  {
    bzero(a1, (((v12 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 4);
    *a1 = ~v10 + a2;
    if (v10 < a3) {
      *((unsigned char *)a1 + v13) = 1;
    }
  }
}

uint64_t method lookup function for AnimatorState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnimatorState);
}

uint64_t dispatch thunk of AnimatorState.__allocating_init(animation:interval:at:in:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

unsigned char *storeEnumTagSinglePayload for AnimatorState.Phase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    _DWORD *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245F56618);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          _DWORD *result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for AnimatorState.Phase()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for FrameVelocityFilter()
{
  return &unk_26FA5E3B0;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatorState.Fork(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    size_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *size_t v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v16(v14, v15, v4);
    *(void *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + v15) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AnimatorState.Fork(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AnimatorState.Fork(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  unint64_t v12 = (v10 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  swift_retain();
  swift_bridgeObjectRetain();
  v8(v11, v12, v7);
  *(void *)((*(void *)(v9 + 48) + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 48) + 7 + v12) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnimatorState.Fork(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  unint64_t v12 = (v10 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  (*(void (**)(uint64_t, unint64_t))(v8 + 24))(v11, (v10 + 8 + v7) & ~v10);
  *(void *)((*(void *)(v9 + 40) + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 40) + 7 + v12) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AnimatorState.Fork(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  *(void *)((*(void *)(v7 + 32) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 32) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for AnimatorState.Fork(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  uint64_t v11 = (v9 + 8 + v5) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  *(void *)((*(void *)(v8 + 24) + 7 + v10) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v8 + 24) + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatorState.Fork(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F56D18);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                  + v6
                                                                  + 8) & ~v6);
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for AnimatorState.Fork(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v18 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245F56F24);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t base witness table accessor for Equatable in AnimatorState<A>.Phase()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation;
  if (!lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation;
  if (!lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation;
  if (!lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation);
  }
  return result;
}

uint64_t outlined destroy of Slice<IndexSet>(uint64_t a1)
{
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(uint64_t a1)
{
}

void type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatorState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for CombinedAnimationState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
    }
  }
}

void type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?()
{
  if (!lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?)
  {
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(255, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?);
    }
  }
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatorState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for CombinedAnimationState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>);
    }
  }
}

uint64_t outlined init with take of AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>?()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>?)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>?);
    }
  }
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatorState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for CombinedAnimationState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>);
    }
  }
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>(uint64_t a1)
{
}

uint64_t outlined assign with copy of _AnyAnimatableData(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnimatorState<_AnyAnimatableData>.Fork(uint64_t a1)
{
  type metadata accessor for AnimatorState<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(uint64_t a1)
{
}

uint64_t outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>(uint64_t a1)
{
}

uint64_t outlined copy of _ShapeStyle_Pack.Fill.AnimatableData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  if (a11 != 255) {
    return outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 80);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v4);
  return a1;
}

uint64_t outlined copy of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>(uint64_t a1)
{
}

uint64_t outlined retain of AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  char v9 = *(unsigned char *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  char v8 = *(unsigned char *)(a1 + 96);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v11, v10, v2, v3, v4, v6, v5, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(uint64_t a1)
{
}

uint64_t outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>(uint64_t a1)
{
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatorState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
    }
  }
}

uint64_t outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(255, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
    lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for CombinedAnimationState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
    }
  }
}

void type metadata accessor for AnimatorState<CGFloat>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t _AnimationModifier.animation.getter()
{
  return swift_retain();
}

uint64_t _AnimationModifier.animation.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*_AnimationModifier.animation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnimationModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t _AnimationModifier.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*_AnimationModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnimationModifier.init(animation:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t v6 = (char *)a4 + *(int *)(type metadata accessor for _AnimationModifier() + 36);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v7(v6, a2, a3);
}

uint64_t static _AnimationModifier.makeArchivedView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void, _OWORD *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  long long v9 = *(_OWORD *)(a1 + 48);
  v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v9;
  v16[4] = *(_OWORD *)(a1 + 64);
  int v17 = *(_DWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v10;
  if (dynamic_cast_existential_2_conditional(a4)) {
    return project #1 <A><A1>(type:) in static _AnimationModifier.makeArchivedView(modifier:inputs:body:)((uint64_t)v16, (uint64_t)a2, a3, a5);
  }
  long long v12 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v12;
  void v14[4] = *(_OWORD *)(a1 + 64);
  int v15 = *(_DWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v13;
  return a2(0, v14);
}

uint64_t static _AnimationModifier.makeArchivedViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  int v5 = *a1;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v10 = a2[7];
  int v11 = *((_DWORD *)a2 + 16);
  uint64_t v12 = a2[9];
  char v13 = *((unsigned char *)a2 + 80);
  uint64_t v28 = *a2;
  int v29 = v6;
  long long v31 = *(_OWORD *)(a2 + 3);
  uint64_t v30 = v7;
  uint64_t v32 = v9;
  *(void *)&long long v33 = v8;
  *((void *)&v33 + 1) = v10;
  int v34 = v11;
  uint64_t v35 = v12;
  char v36 = v13;
  if ((v10 & 0x4000) != 0 && (uint64_t v14 = dynamic_cast_existential_2_conditional(a5)) != 0)
  {
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized project #1 <A><A1>(type:) in static _AnimationModifier.makeArchivedViewList(modifier:inputs:body:)(v15, (uint64_t)&v28);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for _AnimationModifier();
  int v27 = v5;
  swift_beginAccess();
  uint64_t v18 = v28;
  int v19 = v29;
  uint64_t v20 = v30;
  long long v21 = v31;
  uint64_t v22 = v32;
  long long v23 = v33;
  int v24 = v34;
  uint64_t v25 = v35;
  char v26 = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v27, (uint64_t)&v18, a3);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t project #1 <A><A1>(type:) in static _AnimationModifier.makeArchivedView(modifier:inputs:body:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  type metadata accessor for _AnimationModifier();
  type metadata accessor for _AnimationModifier();
  int v26 = Attribute.unsafeBitCast<A>(to:)();
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v40 = *(_OWORD *)a1;
  long long v41 = v5;
  long long v42 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = v40;
  outlined retain of _ViewInputs(a1);
  outlined retain of _GraphInputs((uint64_t)&v40);
  uint64_t v7 = swift_retain();
  uint64_t v8 = specialized find<A>(_:key:)(v7);
  if (v8) {
    int v9 = *(unsigned __int8 *)(v8 + 72) | 1;
  }
  else {
    int v9 = 1;
  }
  swift_release();
  outlined release of _GraphInputs((uint64_t)&v40);
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized find<A>(_:key:)(v10);
  if (!v11 || (Swift::UInt value = v6, v9 != *(unsigned __int8 *)(v11 + 72)))
  {
    type metadata accessor for TypedElement<DisplayList.Options>(0, &lazy cache variable for type metadata for TypedElement<DisplayList.Options>, (uint64_t)&type metadata for DisplayList.Options, (uint64_t)&protocol witness table for DisplayList.Options, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = v9;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for DisplayList.Options, 0, v6).value;
  }
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *((void *)&v42 + 1);
  uint64_t v16 = v41;
  int v17 = DWORD2(v40);
  uint64_t v18 = *((void *)&v41 + 1);
  uint64_t v19 = v42;
  long long v25 = *(_OWORD *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 72);
  swift_release();
  uint64_t v21 = type metadata accessor for ArchivedAnimationModifier.Effect();
  LODWORD(v30) = v26;
  uint64_t v22 = type metadata accessor for ArchivedAnimationModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)&v30, v21, v22, WitnessTable, &v39);
  *(void *)&long long v30 = value;
  DWORD2(v30) = v17;
  uint64_t v31 = v16;
  uint64_t v32 = v18;
  uint64_t v33 = v19;
  uint64_t v34 = v15;
  uint64_t v35 = v14;
  long long v36 = v25;
  uint64_t v37 = v20;
  int v38 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _RendererEffect._makeRendererEffect(effect:inputs:body:)(&v39, &v30, a2, a3, v21, (uint64_t)&protocol witness table for ArchivedAnimationModifier<A>.Effect, a4);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized project #1 <A><A1>(type:) in static _AnimationModifier.makeArchivedViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  type metadata accessor for _AnimationModifier();
  type metadata accessor for _AnimationModifier();
  int v3 = Attribute.unsafeBitCast<A>(to:)();
  swift_beginAccess();
  int v4 = *(_DWORD *)(a2 + 64);
  v16[0] = v3;
  v16[1] = v4;
  uint64_t v14 = type metadata accessor for ArchivedAnimationTrait();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, (uint64_t)&type metadata for ViewTraitCollection, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13, (uint64_t)v13, v14, MEMORY[0x263F8E628], v5, MEMORY[0x263F8E658], v6);
  swift_beginAccess();
  *(_DWORD *)(a2 + 64) = v11;
  if (*(void *)(a2 + 72))
  {
    char v7 = *(unsigned char *)(a2 + 80) & 1;
    uint64_t v11 = *(void *)(a2 + 72);
    char v12 = v7;
    specialized Set._Variant.insert(_:)(&v10, (uint64_t)&type metadata for ArchivedAnimationTraitKey);
    char v8 = v12;
    *(void *)(a2 + 72) = v11;
    *(unsigned char *)(a2 + 80) = v8;
  }
  return swift_endAccess();
}

uint64_t ArchivedAnimationModifier.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _AnimationModifier();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

double ArchivedAnimationModifier.value.getter@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v23 = a3;
  long long v25 = a4;
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _AnimationModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v22 - v16;
  int v24 = a1;
  ArchivedAnimationModifier.modifier.getter((uint64_t)&v22 - v16);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, &v17[*(int *)(v11 + 36)], a2);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v17, v11);
  StrongHash.init<A>(encodable:)((uint64_t)v10, a2, (uint64_t)&v26);
  long long v22 = v26;
  LODWORD(v10) = v27;
  ArchivedAnimationModifier.modifier.getter((uint64_t)v14);
  uint64_t v19 = *(void *)v14;
  swift_retain();
  v18(v14, v11);
  uint64_t v20 = v25;
  *long long v25 = v19;
  double result = *(double *)&v22;
  *(_OWORD *)(v20 + 1) = v22;
  *((_DWORD *)v20 + 6) = v10;
  return result;
}

uint64_t ArchivedAnimationModifier.Effect.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  int v6 = *((_DWORD *)v1 + 6);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v4;
  *(void *)(v7 + 24) = v5;
  *(_DWORD *)(v7 + 32) = v6;
  *(unsigned char *)(v7 + 36) = 0;
  *(void *)(v7 + 40) = v3;
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 18;

  return swift_retain();
}

double protocol witness for Rule.value.getter in conformance ArchivedAnimationModifier<A>@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return ArchivedAnimationModifier.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ArchivedAnimationModifier<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t ArchivedAnimationTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  unint64_t v44 = a4;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v7 - 8);
  float32x2_t v48 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for _AnimationModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v49 = a3;
  uint64_t v50 = a1;
  ArchivedAnimationModifier.modifier.getter((uint64_t)&v44 - v18);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, &v19[*(int *)(v13 + 36)], a2);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v19, v13);
  StrongHash.init<A>(encodable:)((uint64_t)v12, a2, (uint64_t)&v51);
  LODWORD(v48) = v51;
  unsigned int v21 = DWORD2(v51);
  uint64_t v46 = HIDWORD(v51);
  uint64_t v47 = DWORD1(v51);
  int v45 = v52;
  _ContainerValueWritingModifier.AddTrait.traits.getter(v50, (uint64_t *)&v51);
  if ((void)v51) {
    long long v22 = (void *)v51;
  }
  else {
    long long v22 = (void *)MEMORY[0x263F8EE78];
  }
  ArchivedAnimationModifier.modifier.getter((uint64_t)v16);
  uint64_t v23 = *v16;
  swift_retain();
  v20((char *)v16, v13);
  uint64_t v50 = v48 | (unint64_t)(v47 << 32);
  uint64_t v24 = v21;
  uint64_t v25 = v22[2];
  uint64_t v26 = v24 | (v46 << 32);
  if (v25)
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      if (v28 >= v22[2])
      {
        __break(1u);
        goto LABEL_19;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&v22[v27 + 4], (uint64_t)&v51);
      uint64_t v29 = v53;
      long long v30 = v54;
      __swift_project_boxed_opaque_existential_1(&v51, v53);
      uint64_t v31 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v30[1])(v29, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
      if (v31 == &type metadata for ArchivedAnimationTraitKey) {
        break;
      }
      ++v28;
      v27 += 5;
      if (v25 == v28) {
        goto LABEL_9;
      }
    }
    *(void *)&long long v51 = v23;
    *((void *)&v51 + 1) = v50;
    uint64_t v52 = v26;
    LODWORD(v53) = v45;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
    }
    if (v28 >= v22[2]) {
      __break(1u);
    }
    uint64_t v40 = v22[v27 + 7];
    uint64_t v41 = v22[v27 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v22[v27 + 4], v40);
    long long v42 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v41 + 24);
    type metadata accessor for Attribute<UInt32>(0, &lazy cache variable for type metadata for ArchivedAnimationTraitKey?, (uint64_t)&type metadata for ArchivedAnimationTraitKey, MEMORY[0x263F8D8F0]);
    v42(&v51, v43, v40, v41);
    uint64_t result = swift_release();
    uint64_t v32 = v44;
  }
  else
  {
LABEL_9:
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
    }
      long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    uint64_t v32 = v44;
    int v33 = v45;
    uint64_t v34 = v50;
    unint64_t v36 = v22[2];
    unint64_t v35 = v22[3];
    if (v36 >= v35 >> 1) {
      long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v22);
    }
    type metadata accessor for TypedElement<DisplayList.Options>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<ArchivedAnimationTraitKey>, (uint64_t)&type metadata for ArchivedAnimationTraitKey, (uint64_t)&protocol witness table for ArchivedAnimationTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    uint64_t v53 = v37;
    float32x2_t v54 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    uint64_t v38 = swift_allocObject();
    *(void *)&long long v51 = v38;
    *(void *)(v38 + 16) = v23;
    *(void *)(v38 + 24) = v34;
    *(void *)(v38 + 32) = v26;
    *(_DWORD *)(v38 + 40) = v33;
    v22[2] = v36 + 1;
    outlined init with take of ScrollStateRequest(&v51, (uint64_t)&v22[5 * v36 + 4]);
    uint64_t result = swift_release();
  }
  *uint64_t v32 = v22;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ArchivedAnimationTrait<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return ArchivedAnimationTrait.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 32), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ArchivedAnimationTrait<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t _AnimationView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _AnimationView.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_AnimationView.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnimationView.animation.getter()
{
  return swift_retain();
}

uint64_t _AnimationView.animation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 44);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*_AnimationView.animation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnimationView.init(content:animation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(int *)(type metadata accessor for _AnimationView() + 44);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1, a3);
  *(void *)(a4 + v8) = a2;
  return result;
}

uint64_t static _AnimationView._makeInputs(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int *a6@<X8>)
{
  unint64_t v36 = a6;
  uint64_t v37 = a2;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v34 - v11;
  uint64_t v13 = type metadata accessor for ValueTransactionSeed();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (_DWORD *)((char *)v34 - v15);
  LODWORD(v15) = *a1;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  v34[3] = v15;
  int v38 = v15;
  type metadata accessor for _AnimationView();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _AnimationView._makeInputs(view:inputs:), a3, v45);
  int v17 = v45[0];
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v18 = (id)AGSubgraphGetCurrent();
    if (!v18)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v19 = v18;
    id v20 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v20 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t v35 = a5;
  uint64_t Context = AGGraphGetContext();
  if (!Context) {
    __break(1u);
  }
  uint64_t v22 = Context;
  swift_retain();

  swift_beginAccess();
  int v23 = *(_DWORD *)(v22 + 68);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v12, 1, 1, a3);
  uint64_t v24 = ValueTransactionSeed.init(value:transactionSeed:oldValue:)(v17, v23, (uint64_t)v12, v16);
  int v25 = v17;
  MEMORY[0x270FA5388](v24);
  uint64_t v32 = v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x263F8E8F8], MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)&v34[-8], v13, MEMORY[0x263F8E628], v26, MEMORY[0x263F8E658], v27);
  (*(void (**)(_DWORD *, uint64_t))(v14 + 8))(v16, v13);
  LODWORD(v22) = v38;
  AGGraphSetFlags();
  closure #2 in static _AnimationView._makeInputs(view:inputs:)(1);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v29 = v37;
  int v30 = *(_DWORD *)(v37 + 28);
  int v38 = v22;
  int v39 = OffsetAttribute2;
  int v40 = v30;
  int v41 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v29 + 28) = result;
  *unint64_t v36 = v25;
  return result;
}

uint64_t closure #1 in static _AnimationView._makeInputs(view:inputs:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for _AnimationView();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t closure #2 in static _AnimationView._makeInputs(view:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _AnimationView();
  uint64_t v3 = a1 + *(int *)(v2 + 44);
  v9[2] = v2;
  type metadata accessor for Attribute<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Animation?, (uint64_t)&type metadata for Animation, MEMORY[0x263F8D8F0]);
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4, (uint64_t)v9, v5, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v9[5];
}

double static _AnimationView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  void (*v23)(uint64_t *__return_ptr, int *, uint64_t *);
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v36;
  int v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  long long v75;
  uint64_t v76;
  uint64_t v77;
  long long v78;
  uint64_t v79;
  int v80;
  uint64_t v81;

  uint64_t v81 = *MEMORY[0x263EF8340];
  int v9 = *a1;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  uint64_t v13 = a2[6];
  int v14 = *((_DWORD *)a2 + 20);
  long long v72 = *a2;
  double v74 = v11;
  double v75 = *(_OWORD *)(a2 + 3);
  double v76 = v12;
  unint64_t v77 = v13;
  unint64_t v78 = *(_OWORD *)(a2 + 7);
  unint64_t v79 = a2[9];
  uint64_t v73 = v10;
  char v80 = v14;
  LODWORD(v40) = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = a5;
  static _AnimationView._makeInputs(view:inputs:)(&v40, (uint64_t)&v72, a3, a4, a5, (int *)&v56);
  unint64_t v36 = v56;
  uint64_t v15 = v72;
  uint64_t v16 = v74;
  uint64_t v32 = v75;
  int v30 = v73;
  uint64_t v31 = DWORD1(v75);
  int v17 = HIDWORD(v75);
  int v33 = DWORD2(v75);
  uint64_t v18 = v76;
  uint64_t v19 = v77;
  int v20 = DWORD1(v78);
  unint64_t v28 = DWORD2(v78);
  uint64_t v29 = v78;
  int v21 = v79;
  uint64_t v26 = HIDWORD(v79);
  uint64_t v27 = HIDWORD(v78);
  int v25 = v80;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v56 = v15;
  unint64_t v57 = v30;
  char v58 = v16;
  uint64_t v59 = v32;
  uint64_t v60 = v31;
  uint64_t v63 = v18;
  float32x2_t v64 = v19;
  uint64_t v62 = v17;
  float32x4_t v65 = v29;
  double v66 = v20;
  float32x4_t v67 = v28;
  float32x4_t v68 = v27;
  uint64_t v69 = v21;
  long long v70 = v26;
  uint64_t v71 = v25;
  uint64_t v37 = v36;
  int v40 = v15;
  int v41 = v30;
  uint64_t v42 = v16;
  uint64_t v43 = v32;
  uint64_t v44 = v31;
  int v45 = 0;
  uint64_t v46 = v17;
  uint64_t v47 = v18;
  float32x2_t v48 = v19;
  uint64_t v49 = v29;
  uint64_t v50 = v20;
  long long v51 = v28;
  uint64_t v52 = v27;
  uint64_t v53 = v21;
  float32x2_t v54 = v26;
  uint64_t v55 = v25;
  int v23 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(v34 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(&v38, &v37, &v40);
  char v61 = v33;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v38, (uint64_t)&v56);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a6 = v38;
  uint64_t result = v39;
  a6[1] = v39;
  return result;
}

uint64_t static _AnimationView._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = *a1;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[5];
  int v12 = *((_DWORD *)a2 + 16);
  uint64_t v13 = a2[9];
  char v14 = *((unsigned char *)a2 + 80);
  uint64_t v37 = *a2;
  int v38 = v9;
  uint64_t v39 = v10;
  long long v40 = *(_OWORD *)(a2 + 3);
  uint64_t v41 = v11;
  long long v42 = *((_OWORD *)a2 + 3);
  int v43 = v12;
  uint64_t v44 = v13;
  char v45 = v14;
  int v36 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _AnimationView._makeInputs(view:inputs:)(&v36, (uint64_t)&v37, a3, a4, a5, (int *)&v27);
  uint64_t v15 = v27;
  uint64_t v16 = v37;
  int v26 = v38;
  uint64_t v17 = v39;
  long long v18 = v40;
  uint64_t v19 = v41;
  long long v20 = v42;
  int v25 = v43;
  uint64_t v21 = v44;
  char v22 = v45;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v36 = v15;
  uint64_t v27 = v16;
  int v28 = v26;
  uint64_t v29 = v17;
  long long v30 = v18;
  uint64_t v31 = v19;
  long long v32 = v20;
  int v33 = v25;
  uint64_t v34 = v21;
  char v35 = v22;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a5 + 32))(&v36, &v27, a3, a5);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v15, a3, a5);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static _AnimationView._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *((void *)a1 + 3);
  long long v7 = *a1;
  int v8 = v4;
  uint64_t v9 = v5;
  return (*(uint64_t (**)(long long *))(a4 + 40))(&v7);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _AnimationView<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, double *a4@<X8>)
{
  return static _AnimationView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _AnimationView<A>(int *a1, uint64_t *a2, uint64_t *a3)
{
  return static _AnimationView._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _AnimationView<A>(long long *a1, uint64_t a2, uint64_t a3)
{
  return static _AnimationView._viewListCount(inputs:)(a1, *(void *)(a2 + 16), a3, *(void *)(a2 + 32));
}

uint64_t View<>.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, a2, v8);
  uint64_t v11 = *(int *)(type metadata accessor for _AnimationView() + 44);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, a2);
  *(void *)(a3 + v11) = a1;
  return swift_retain();
}

_DWORD *protocol witness for Rule.value.getter in conformance ChildTransaction@<X0>(void *a1@<X8>)
{
  uint64_t result = ChildTransaction.value.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for _AnimationView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for _AnimationModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      if ((v15 + 1) >= 2) {
        return v15;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for _AnimationModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245F5A618);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)a1 = 0;
          *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)a1 = a2;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for _AnimationView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _AnimationView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F5A82CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _AnimationView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245F5AA2CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          unint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v18 = 0;
            *(_DWORD *)unint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_245F5AA54()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_245F5AAC4()
{
  return &protocol witness table for _AnimationView<A>;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueTransactionSeed(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 8) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    int v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v15 = *v16;
    unint64_t v17 = (void *)(((unint64_t)v15 + v8 + 4) & ~v8);
    unint64_t v18 = (const void *)(((unint64_t)v16 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v16 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v17, v18, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v4);
    }
  }
  return v3;
}

_DWORD *assignWithCopy for ValueTransactionSeed(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      return a1;
    }
    unint64_t v17 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v16 = v7 + 8;
    v17(v9, v6);
    int v14 = *(_DWORD *)(v16 + 76);
    size_t v15 = *(void *)(v16 + 56);
  }
  if (v14) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v15 + 1;
  }
  memcpy(v9, v10, v18);
  return a1;
}

_DWORD *initializeWithTake for ValueTransactionSeed(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v11 = *(void *)(v7 + 64);
    }
    else {
      size_t v11 = *(void *)(v7 + 64) + 1;
    }
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_DWORD *assignWithTake for ValueTransactionSeed(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      return a1;
    }
    unint64_t v17 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v16 = v7 + 8;
    v17(v9, v6);
    int v14 = *(_DWORD *)(v16 + 76);
    size_t v15 = *(void *)(v16 + 56);
  }
  if (v14) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v15 + 1;
  }
  memcpy(v9, v10, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueTransactionSeed(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = v8 + ((v7 + 8) & ~v7);
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_23;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 > 3) {
            LODWORD(v10) = 4;
          }
          switch((int)v10)
          {
            case 2:
              LODWORD(v10) = *a1;
              break;
            case 3:
              LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v10) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v10) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v10 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                               + v7
                                                               + 4) & ~v7);
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ValueTransactionSeed(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = v11 + ((v10 + 8) & ~v10);
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 == 0 || !v13)
  {
LABEL_15:
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_15;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_16:
    unsigned int v16 = ~v9 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_23:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245F5B4DCLL);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v8 >= 2)
        {
          unint64_t v19 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 4) & ~v10;
          uint64_t v20 = a2 + 1;
          uint64_t v21 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          v21(v19, v20);
        }
      }
      return;
  }
}

uint64_t partial apply for closure #1 in static _AnimationView._makeInputs(view:inputs:)(uint64_t a1)
{
  return closure #1 in static _AnimationView._makeInputs(view:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ArchivedAnimationTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ArchivedAnimationModifier.Effect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ArchivedAnimationModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for ArchivedAnimationModifier.Effect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ArchivedAnimationModifier.Effect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for ArchivedAnimationTraitKey()
{
  return &type metadata for ArchivedAnimationTraitKey;
}

void *type metadata accessor for ChildTransaction()
{
  return &unk_26FA526F8;
}

{
  return &unk_26FA52790;
}

unint64_t instantiation function for generic protocol witness table for ChildTransaction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ArchivedAnimationTrait<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ArchivedAnimationModifier<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ArchivedAnimationModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ArchivedAnimationTrait<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for TypedElement<DisplayList.Options>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_245F5B7F4()
{
  if (*(void *)(v0 + 16) != 1) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_245F5B834()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t StoredLocationBase.__allocating_init(initialValue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_allocObject();
  uint64_t v4 = specialized StoredLocationBase.init(initialValue:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 168) - 8) + 8))(a1);
  return v4;
}

uint64_t StoredLocationBase.init(initialValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized StoredLocationBase.init(initialValue:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 168) - 8) + 8))(a1);
  return v4;
}

unsigned char *(*StoredLocationBase.wasRead.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 24);
  return StoredLocationBase.wasRead.modify;
}

unsigned char *StoredLocationBase.wasRead.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 24) = result[8];
  return result;
}

uint64_t StoredLocationBase.update()(uint64_t a1)
{
  *(unsigned char *)(v1 + 24) = 1;
  StoredLocationBase.updateValue.getter(a1);
  return 1;
}

uint64_t StoredLocationBase.binding.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  unsigned int v5 = (char *)&v7 - v4;
  StoredLocationBase.updateValue.getter((uint64_t)&v7 - v4);
  Binding.init(value:location:)((uint64_t)v5, v2, a2);
  return swift_retain();
}

void StoredLocationBase.isUpdating.getter()
{
}

void StoredLocationBase.commit(transaction:id:mutation:)()
{
}

void StoredLocationBase.notifyObservers()()
{
}

void StoredLocationBase.__allocating_init()()
{
}

void StoredLocationBase.init()()
{
}

uint64_t StoredLocationBase.deinit()
{
  uint64_t v0 = AnyLocation.deinit();
  swift_release();
  return v0;
}

uint64_t StoredLocationBase.__deallocating_deinit()
{
  AnyLocation.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

void (*protocol witness for Location.wasRead.modify in conformance StoredLocationBase<A>(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = StoredLocationBase.wasRead.modify((uint64_t)v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void protocol witness for Location.set(_:transaction:) in conformance StoredLocationBase<A>(uint64_t a1, void *a2)
{
}

uint64_t StoredLocation.init(initialValue:host:signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = specialized StoredLocation.init(initialValue:host:signal:)(a1, a2, a3);
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 232) - 8) + 8))(a1);
  return v6;
}

void StoredLocation.__allocating_init(initialValue:)()
{
}

void StoredLocation.init(initialValue:)()
{
}

uint64_t StoredLocation.__ivar_destroyer()
{
  return swift_weakDestroy();
}

uint64_t ObservableLocation.addObserver(host:signal:)()
{
  return swift_endAccess();
}

uint64_t ObservableLocation.removeObserver(signal:)()
{
  swift_beginAccess();
  v4[0] = *(void *)(v0 + 32);
  uint64_t v1 = type metadata accessor for ObservableLocation.Observer();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 != 1)
  {
    swift_beginAccess();
    Array.remove(at:)();
    swift_endAccess();
    return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v1 - 8) + 8))(v4, v1);
  }
  return result;
}

BOOL ObservableLocation.isUpdating.getter()
{
  if (one-time initialization token for sharedGraph != -1) {
    swift_once();
  }
  return AGGraphGetCounter() != 0;
}

uint64_t ObservableLocation.commit(transaction:id:mutation:)(unint64_t a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  type metadata accessor for GraphHost();
  int v9 = v6;
  uint64_t v7 = type metadata accessor for StoredLocationBase.BeginUpdate();
  return static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:)(a1, (uint64_t)&v9, a3, v3, (uint64_t)&protocol witness table for ObservableLocation<A>, v7, (uint64_t)&protocol witness table for StoredLocationBase<A>.BeginUpdate);
}

uint64_t ObservableLocation.mutationHost.getter()
{
  swift_beginAccess();
  type metadata accessor for ObservableLocation.Observer();
  type metadata accessor for Array();
  _ss23_ContiguousArrayStorageCySo13NSRunLoopModeaGMaTm_0(0, &lazy cache variable for type metadata for GraphHost?, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, MEMORY[0x263F8D8F0]);
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t closure #1 in ObservableLocation.mutationHost.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Strong = *a1;
  uint64_t v6 = type metadata accessor for ObservableLocation.Observer();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  if (Strong)
  {
    unsigned int v8 = *(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8);
    swift_retain();
    uint64_t result = v8(v10, v6);
  }
  else
  {
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
  }
  *a3 = Strong;
  return result;
}

uint64_t ObservableLocation.notifyObservers()()
{
  swift_beginAccess();
  uint64_t v0 = type metadata accessor for ObservableLocation.Observer();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = MEMORY[0x24C522E60](v1, v0);
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    int v5 = *MEMORY[0x263F288F8];
    do
    {
      while (1)
      {
        swift_beginAccess();
        Array.subscript.getter();
        BOOL v6 = AGWeakAttributeGetAttribute() == v5;
        uint64_t v7 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v0 - 8) + 8);
        v7(&v8, v0);
        if (v6) {
          break;
        }
        swift_endAccess();
        uint64_t result = AGGraphInvalidateValue();
        if (++v4 >= v2) {
          return result;
        }
      }
      swift_endAccess();
      if (v4 != --v2)
      {
        uint64_t v8 = v4;
        swift_beginAccess();
        type metadata accessor for Array();
        swift_getWitnessTable();
        MutableCollection.swapAt(_:_:)();
        swift_endAccess();
      }
      swift_beginAccess();
      type metadata accessor for Array();
      Array.remove(at:)();
      swift_endAccess();
      uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t))v7)(&v8, v0);
    }
    while (v4 < v2);
  }
  return result;
}

uint64_t ObservableLocation.__allocating_init(initialValue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_allocObject();
  uint64_t v4 = specialized ObservableLocation.init(initialValue:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 232) - 8) + 8))(a1);
  return v4;
}

uint64_t ObservableLocation.init(initialValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized ObservableLocation.init(initialValue:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 232) - 8) + 8))(a1);
  return v4;
}

uint64_t ObservableLocation.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t ObservableLocation.deinit()
{
  uint64_t v0 = AnyLocation.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ObservableLocation.__deallocating_deinit()
{
  ObservableLocation.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_245F5C648()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_245F5C680()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in StoredLocationBase.set(_:transaction:)()
{
  return closure #3 in StoredLocationBase.set(_:transaction:)(*(void *)(v0 + 24), *(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

void specialized StoredLocationBase.init()()
{
}

void specialized StoredLocation.init(initialValue:)()
{
}

uint64_t type metadata accessor for ObservableLocation.Observer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ObservableLocation.removeObserver(signal:)()
{
  return static WeakAttribute.== infix(_:_:)() & 1;
}

uint64_t partial apply for closure #1 in ObservableLocation.mutationHost.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in ObservableLocation.mutationHost.getter(a1, a2, a3);
}

void _ss23_ContiguousArrayStorageCySo13NSRunLoopModeaGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized ObservableLocation.init(initialValue:)(uint64_t a1)
{
  type metadata accessor for ObservableLocation.Observer();
  swift_retain();
  *(void *)(v1 + 32) = Array.init()();
  swift_release();

  return specialized StoredLocationBase.init(initialValue:)(a1);
}

uint64_t method lookup function for StoredLocationBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StoredLocationBase);
}

uint64_t dispatch thunk of StoredLocationBase.__allocating_init(initialValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t method lookup function for StoredLocation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StoredLocation);
}

uint64_t dispatch thunk of StoredLocation.__allocating_init(initialValue:host:signal:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t type metadata completion function for ObservableLocation()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObservableLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for ObservableLocation.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for ObservableLocation.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakCopyAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t initializeWithTake for ObservableLocation.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

double assignWithTake for ObservableLocation.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_weakTakeAssign();
  double result = *(double *)(a2 + 8);
  *(double *)(v3 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StoredLocationBase.Data(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t assignWithCopy for StoredLocationBase.Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StoredLocationBase.Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StoredLocationBase.Data(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F5CDC0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for StoredLocationBase.Data(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *unint64_t v19 = v20;
            }
            else
            {
              int v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245F5CFC4);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

SwiftUI::ContainerValues __swiftcall ContainerValues.init(base:)(SwiftUI::ContainerValues base)
{
  void *v1 = *(void *)base.base.storage._rawValue;
  return base;
}

uint64_t ContainerValues.base.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t ContainerValues.base.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  return result;
}

uint64_t (*ContainerValues.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void (*ContainerValues.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[6] = malloc(v12);
  int v13 = malloc(v12);
  v9[7] = v13;
  ContainerValues.subscript.getter((uint64_t)v13);
  return ContainerValues.subscript.modify;
}

void ContainerValues.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    specialized ContainerValues.subscript.setter((uint64_t)v3);
    unsigned int v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized ContainerValues.subscript.setter(*(void *)(*(void *)a1 + 56));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t ContainerValues.tag<A>(for:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  return ViewTraitCollection.tag<A>(for:)(a1, a2);
}

uint64_t ContainerValues.hasTag<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v7 = (char *)v14 - v6;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *v2;
  ViewTraitCollection.tag<A>(for:)(a2, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v12 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v7, a2);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a2);
  }
  return v12 & 1;
}

uint64_t _GraphInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  specialized _ViewListCountInputs.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

uint64_t _GraphInputs.phase.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  int v2 = *(_DWORD *)(v1 + 32);
  if ((v2 & 0x40) == 0) {
    *(_DWORD *)(v1 + 32) = v2 | 0x40;
  }
  return result;
}

void static _GraphInputs.Options.viewRequestsLayoutComputer.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _GraphInputs.Options.viewNeedsGeometry.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static _GraphInputs.Options.viewDisplayListAccessibility.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static _GraphInputs.Options.viewNeedsGeometryAccessibility.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static _GraphInputs.Options.viewNeedsRespondersAccessibility.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static _GraphInputs.Options.viewStackOrientationIsDefined.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _GraphInputs.Options.viewStackOrientationIsHorizontal.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static _GraphInputs.Options.supportsVariableFrameDuration.getter(_DWORD *a1@<X8>)
{
  *a1 = 1024;
}

Swift::Void __swiftcall _GraphInputs.copyCaches()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  long long v10 = *(_OWORD *)(v1 + 48);
  long long v11 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  char v6 = *(unsigned char *)(v1 + 80);
  char v7 = *(unsigned char *)(v1 + 81);
  uint64_t v8 = *(void *)(v1 + 88);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v2;
  *(void *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v10;
  *(void *)(v9 + 64) = v4;
  *(void *)(v9 + 72) = v5;
  *(unsigned char *)(v9 + 80) = v6;
  *(unsigned char *)(v9 + 81) = v7;
  *(void *)(v9 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v0 + 16) = v9;
}

Swift::Void __swiftcall _GraphInputs.resetCaches()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(void *)(v5 + 88) = v4;
  swift_release();
  *(void *)(v0 + 16) = v5;
}

uint64_t _GraphInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 8);
  PropertyList.subscript.getter(a3, *v5, a3, v8);
  uint64_t v9 = type metadata accessor for Stack();
  Stack.push(_:)(a1, v9);
  v11[0] = v11[1];
  specialized PropertyList.subscript.setter((uint64_t)v11, a3, a3, v8);
  return swift_release();
}

uint64_t static GraphInput.isTriviallyReusable.getter()
{
  return 0;
}

void static GraphInput.makeReusable(indirectMap:value:)()
{
}

uint64_t static GraphInput.tryToReuse(_:by:indirectMap:testOnly:)()
{
  return 0;
}

uint64_t _GraphInputs.Phase.resetSeed.getter()
{
  return *v0 >> 1;
}

uint64_t _GraphInputs.Phase.resetSeed.setter(uint64_t result)
{
  _DWORD *v1 = *v1 & 1 | (2 * result);
  return result;
}

void protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance DisplayList.Options()
{
}

void static _GraphInputs.Options.needsStableDisplayListIDs.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t _GraphInputs.needsStableDisplayListIDs.getter()
{
  return *(unsigned char *)(v0 + 37) & 1;
}

uint64_t protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance BodyInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>(&lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>, &lazy cache variable for type metadata for Stack<BodyInputElement>, (uint64_t)&type metadata for BodyInputElement);
  return static GraphInput<>.makeReusable(indirectMap:value:)(a1, a2, a3, a4, v8);
}

uint64_t protocol witness for static GraphInput.tryToReuse(_:by:indirectMap:testOnly:) in conformance BodyInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>(&lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>, &lazy cache variable for type metadata for Stack<BodyInputElement>, (uint64_t)&type metadata for BodyInputElement);
  return static GraphInput<>.tryToReuse(_:by:indirectMap:testOnly:)(a1, a2, a3, a4, a5, a6, v12) & 1;
}

uint64_t static GraphInput<>.tryToReuse(_:by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v11(a2, a3, a4, AssociatedTypeWitness, a7) & 1;
}

void protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance BodyCountInput<A>()
{
}

BOOL _GraphInputs.Phase.isInserted.getter()
{
  return (*v0 & 1) == 0;
}

uint64_t _GraphInputs.animationsDisabled.getter()
{
  return *(_DWORD *)(v0 + 36) & 1;
}

uint64_t _GraphInputs.Phase.isBeingRemoved.setter(uint64_t result)
{
  _DWORD *v1 = *v1 & 0xFFFFFFFE | result & 1;
  return result;
}

void static _GraphInputs.Options.needsDynamicLayout.getter(_DWORD *a1@<X8>)
{
  *a1 = 2048;
}

double static _GraphInputs.invalid.getter@<D0>(uint64_t a1@<X8>)
{
  int v2 = *MEMORY[0x263F288F8];
  *(void *)a1 = 0;
  *(void *)(a1 + 32) = 0xFFFFFFFFLL;
  *(void *)(a1 + 40) = MEMORY[0x263F8EE88];
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  double result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(void *)(v5 + 88) = v4;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 28) = v2;
  return result;
}

uint64_t _GraphInputs.merge(_:)(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[5];
  uint64_t v5 = *a1;
  int v6 = v1;
  uint64_t v7 = v2;
  long long v8 = *(_OWORD *)(a1 + 3);
  uint64_t v9 = v3;
  return _GraphInputs.merge(_:ignoringPhase:)((uint64_t)&v5, 0);
}

void static _GraphInputs.Options.doNotScrape.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void _GraphInputs.Phase.init()(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

double _GraphInputs.init(time:phase:environment:transaction:)@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 32) = 0xFFFFFFFFLL;
  *(void *)(a5 + 40) = MEMORY[0x263F8EE88];
  *(_DWORD *)(a5 + 8) = a1;
  *(_DWORD *)(a5 + 24) = a2;
  uint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = v8;
  double result = 0.0;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_WORD *)(v10 + 80) = 256;
  *(void *)(v10 + 88) = v9;
  *(void *)(a5 + 16) = v10;
  *(_DWORD *)(a5 + 28) = a4;
  return result;
}

uint64_t protocol witness for static GraphInput.tryToReuse(_:by:indirectMap:testOnly:) in conformance StyleInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>(&lazy protocol witness table cache variable for type Stack<AnyStyleModifier> and conformance <A> Stack<A>, &lazy cache variable for type metadata for Stack<AnyStyleModifier>, (uint64_t)&type metadata for AnyStyleModifier);
  return static GraphInput<>.tryToReuse(_:by:indirectMap:testOnly:)(a1, a2, a3, a4, a5, a6, v12) & 1;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ReusableInputs@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = qword_26B1119A8;
  *a1 = static ReusableInputs.defaultValue;
  a1[1] = v2;

  return swift_retain();
}

uint64_t _GraphInputs.customInputs.getter()
{
  return swift_retain();
}

uint64_t _GraphInputs.customInputs.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*_GraphInputs.customInputs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void (*_GraphInputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  unint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  *unint64_t v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(void *)(a4 + 8);
  v9[2] = v4;
  v9[3] = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v12;
  size_t v13 = *(void *)(v12 + 64);
  void v9[6] = malloc(v13);
  v9[7] = malloc(v13);
  PropertyList.subscript.getter(a2, *v4, a3, v10);
  return _ViewListCountInputs.subscript.modify;
}

void (*_GraphInputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(Swift::Int **a1, char a2)
{
  long long v11 = malloc(0x50uLL);
  *a1 = v11;
  void v11[2] = a4;
  v11[3] = a5;
  void *v11 = a2;
  v11[1] = a3;
  uint64_t v12 = *(void *)(a4 + 8);
  v11[4] = v5;
  v11[5] = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[6] = AssociatedTypeWitness;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  v11[7] = v14;
  size_t v15 = *(void *)(v14 + 64);
  v11[8] = malloc(v15);
  v11[9] = malloc(v15);
  PropertyList.subscript.getter(a2, *v5, a3, v12);
  return _GraphInputs.subscript.modify;
}

void _GraphInputs.subscript.modify(Swift::Int **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[8];
  unint64_t v4 = (void *)(*a1)[9];
  Swift::Int v5 = (*a1)[6];
  Swift::Int v6 = (*a1)[7];
  uint64_t v11 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  Swift::Int v9 = **a1;
  Swift::Int v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(void *, void *, Swift::Int))(v6 + 16))(v3, v4, v5);
    _GraphInputs.recordReusableInput<A>(_:)(v8, v8, v7);
    specialized PropertyList.subscript.setter((uint64_t)v3, v9, v8, v11);
    uint64_t v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    _GraphInputs.recordReusableInput<A>(_:)(v2[1], v2[1], v2[2]);
    specialized PropertyList.subscript.setter((uint64_t)v4, v9, v8, v11);
    (*(void (**)(void *, Swift::Int))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t _GraphInputs.time.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t _GraphInputs.time.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_GraphInputs.time.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphInputs.Phase.init(value:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t (*_GraphInputs.Phase.resetSeed.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1 >> 1;
  return _GraphInputs.Phase.resetSeed.modify;
}

uint64_t _GraphInputs.Phase.resetSeed.modify(uint64_t result)
{
  **(_DWORD **)uint64_t result = **(_DWORD **)result & 1 | (2 * *(_DWORD *)(result + 8));
  return result;
}

uint64_t _GraphInputs.Phase.isBeingRemoved.getter()
{
  return *v0 & 1;
}

uint64_t (*_GraphInputs.Phase.isBeingRemoved.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1 & 1;
  return _GraphInputs.Phase.isBeingRemoved.modify;
}

uint64_t _GraphInputs.Phase.isBeingRemoved.modify(uint64_t result)
{
  **(_DWORD **)uint64_t result = **(_DWORD **)result & 0xFFFFFFFE | *(unsigned __int8 *)(result + 8);
  return result;
}

_DWORD *_GraphInputs.Phase.merge(_:)(_DWORD *result)
{
  unsigned int *v1 = ((*v1 & 0xFFFFFFFE) + *result) | *v1 & 1;
  return result;
}

void static _GraphInputs.Phase.invalid.getter(_DWORD *a1@<X8>)
{
  *a1 = -16;
}

BOOL static _GraphInputs.Phase.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t _GraphInputs.cachedEnvironment.getter()
{
  return swift_retain();
}

uint64_t key path setter for _GraphInputs.environment : _GraphInputs(int *a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(void *)(v6 + 88) = v5;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v6;
  int v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v8 | 0x20;
  }
  return result;
}

void (*_GraphInputs.environment.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  swift_beginAccess();
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 16);
  return _GraphInputs.environment.modify;
}

void _GraphInputs.environment.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v2 = *(_DWORD *)(*(void *)a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(void *)(v6 + 88) = v5;
  swift_release();
  *(void *)(v3 + 16) = v6;
  int v7 = *(_DWORD *)(v3 + 32);
  if ((v7 & 0x20) == 0) {
    *(_DWORD *)(v3 + 32) = v7 | 0x20;
  }

  free(v1);
}

uint64_t (*_GraphInputs.phase.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return _GraphInputs.phase.modify;
}

uint64_t _GraphInputs.phase.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    int v2 = *(_DWORD *)(*(void *)result + 32);
    if ((v2 & 0x40) == 0) {
      *(_DWORD *)(*(void *)result + 32) = v2 | 0x40;
    }
  }
  return result;
}

uint64_t _GraphInputs.transaction.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t (*_GraphInputs.transaction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _GraphInputs.changedDebugProperties.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 32);
}

_DWORD *_GraphInputs.changedDebugProperties.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*_GraphInputs.changedDebugProperties.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphInputs.Options.rawValue.getter()
{
  return *v0;
}

uint64_t _GraphInputs.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _GraphInputs.Options.animationsDisabled.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static _GraphInputs.Options.needsAccessibility.getter(_DWORD *a1@<X8>)
{
  *a1 = 4096;
}

void _GraphInputs.options.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 36);
}

_DWORD *_GraphInputs.options.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 36) = *result;
  return result;
}

uint64_t (*_GraphInputs.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphInputs.animationsDisabled.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFFFFE | result & 1;
  return result;
}

unsigned __int8 *(*_GraphInputs.animationsDisabled.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 36) & 1;
  return _GraphInputs.animationsDisabled.modify;
}

unsigned __int8 *_GraphInputs.animationsDisabled.modify(unsigned __int8 *result)
{
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFFFFE | result[8];
  return result;
}

uint64_t _GraphInputs.mergedInputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _GraphInputs.mergedInputs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t _GraphInputs.import(_:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[2];
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = a1[5];
  swift_retain();
  swift_release();
  *(void *)uint64_t v1 = v3;
  swift_beginAccess();
  int v7 = *(_DWORD *)(v4 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v8;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_WORD *)(v10 + 80) = 256;
  *(void *)(v10 + 88) = v9;
  swift_release();
  *(void *)(v1 + 16) = v10;
  int v11 = *(_DWORD *)(v1 + 32) | v5;
  *(void *)(v1 + 24) = a1[3];
  *(_DWORD *)(v1 + 32) = v11 | 0x60;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v6;
  return result;
}

uint64_t MergedEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v6 = *WeakValue;
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    PropertyList.merge(_:)(v6);
    swift_release();
    if (v4) {
      swift_release();
    }
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    swift_retain();
    uint64_t result = swift_retain();
  }
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MergedEnvironment@<X0>(void *a1@<X8>)
{
  return MergedEnvironment.value.getter(a1);
}

uint64_t MergedTransaction.value.getter()
{
  uint64_t v0 = *(void *)AGGraphGetValue();
  if (AGGraphGetWeakValue())
  {
    swift_retain();
    uint64_t v1 = swift_retain();
    PropertyList.merge(_:)(v1);
    swift_release();
  }
  else
  {
    swift_retain();
  }
  return v0;
}

uint64_t protocol witness for Rule.value.getter in conformance MergedTransaction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MergedTransaction.value.getter();
  *a1 = result;
  return result;
}

_DWORD *MergedPhase.value.getter@<X0>(unsigned int *a1@<X8>)
{
  unsigned int v2 = *(_DWORD *)AGGraphGetValue();
  uint64_t result = (_DWORD *)AGGraphGetWeakValue();
  if (result) {
    unsigned int v2 = (*result + (v2 & 0xFFFFFFFE)) | v2 & 1;
  }
  *a1 = v2;
  return result;
}

_DWORD *protocol witness for Rule.value.getter in conformance MergedPhase@<X0>(unsigned int *a1@<X8>)
{
  return MergedPhase.value.getter(a1);
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.Options and conformance _GraphInputs.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options;
  if (!lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options;
  if (!lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options;
  if (!lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options;
  if (!lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.Options and conformance _GraphInputs.Options);
  }
  return result;
}

_DWORD *sub_245F5EB90@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result >> 1;
  return result;
}

_DWORD *sub_245F5EBA0(_DWORD *result, int *a2)
{
  *a2 = *a2 & 1 | (2 * *result);
  return result;
}

unsigned char *sub_245F5EBB4@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result & 1;
  return result;
}

unsigned __int8 *sub_245F5EBC4(unsigned __int8 *result, unsigned int *a2)
{
  *a2 = *a2 & 0xFFFFFFFE | *result;
  return result;
}

uint64_t sub_245F5EBDC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 16);
  return result;
}

uint64_t sub_245F5EC28@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 24);
  return result;
}

_DWORD *sub_245F5EC34(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 24) = *result;
  int v2 = *(_DWORD *)(a2 + 32);
  if ((v2 & 0x40) == 0) {
    *(_DWORD *)(a2 + 32) = v2 | 0x40;
  }
  return result;
}

uint64_t sub_245F5EC50@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 36) & 1;
  return result;
}

unsigned __int8 *sub_245F5EC60(unsigned __int8 *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFFFFE | *result;
  return result;
}

uint64_t dispatch thunk of static GraphInput.isTriviallyReusable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static GraphInput.makeReusable(indirectMap:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static GraphInput.tryToReuse(_:by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t destroy for _GraphInputs()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _GraphInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _GraphInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _GraphInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t dispatch thunk of static _GraphInputsModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

void *type metadata accessor for MergedEnvironment()
{
  return &unk_26FA57B68;
}

void *type metadata accessor for MergedTransaction()
{
  return &unk_26FA57BF8;
}

void *type metadata accessor for MergedPhase()
{
  return &unk_26FA434A8;
}

unint64_t instantiation function for generic protocol witness table for MergedPhase(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MergedPhase and conformance MergedPhase();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MergedTransaction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MergedTransaction and conformance MergedTransaction();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MergedEnvironment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MergedEnvironment and conformance MergedEnvironment();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245F5EF30()
{
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ReusableInputs()
{
  return &type metadata for ReusableInputs;
}

uint64_t EnvironmentValues.watchDisplayVariant.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

void _DeviceVariant.hash(into:)()
{
}

void static _DeviceVariant.== infix(_:_:)()
{
}

void _DeviceVariant.hashValue.getter()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance _DeviceVariant()
{
}

void EnvironmentValues._deviceVariant.getter()
{
}

void EnvironmentValues._deviceVariant.setter()
{
}

void EnvironmentValues._deviceVariant.modify()
{
}

BOOL WatchDisplayVariant.isH430Compatible.getter()
{
  int v1 = *v0;
  return v1 == 4 || v1 == 7;
}

BOOL WatchDisplayVariant.isH484Compatible.getter()
{
  int v1 = *v0;
  return v1 == 5 || v1 == 8;
}

uint64_t key path getter for EnvironmentValues.watchDisplayVariant : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.watchDisplayVariant.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.watchDisplayVariant.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 1;
    }
    char *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.watchDisplayVariant.modify;
}

uint64_t EnvironmentValues.watchDisplayVariant.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

SwiftUI::WatchDisplayVariant_optional __swiftcall WatchDisplayVariant.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 9) {
    char v2 = 1;
  }
  else {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SwiftUI::WatchDisplayVariant_optional)rawValue;
}

uint64_t WatchDisplayVariant.rawValue.getter()
{
  return *v0;
}

SwiftUI::WatchDisplayVariant_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WatchDisplayVariant(Swift::Int *a1)
{
  return WatchDisplayVariant.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WatchDisplayVariant()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WatchDisplayVariant()
{
  return RawRepresentable<>.encode(to:)();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _DeviceVariant and conformance _DeviceVariant()
{
  unint64_t result = lazy protocol witness table cache variable for type _DeviceVariant and conformance _DeviceVariant;
  if (!lazy protocol witness table cache variable for type _DeviceVariant and conformance _DeviceVariant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DeviceVariant and conformance _DeviceVariant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchDisplayVariant and conformance WatchDisplayVariant()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant;
  if (!lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant;
  if (!lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchDisplayVariant and conformance WatchDisplayVariant);
  }
  return result;
}

void sub_245F5F5B0()
{
}

void sub_245F5F5D8()
{
}

uint64_t sub_245F5F5F0(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.watchDisplayVariant.setter(&v2);
}

unsigned char *storeEnumTagSinglePayload for _DeviceVariant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    _DWORD *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245F5F6F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          _DWORD *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DeviceVariant()
{
  return &type metadata for _DeviceVariant;
}

unsigned char *storeEnumTagSinglePayload for WatchDisplayVariant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    _DWORD *result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245F5F7F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          _DWORD *result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.WatchDisplayVariantKey()
{
  return &type metadata for EnvironmentValues.WatchDisplayVariantKey;
}

uint64_t TimeDataFormatting.FormatTransition.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClosedRange();
  MEMORY[0x24C522770](a1, v4, *(void *)(a2 + 48));
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static TimeDataFormatting.FormatTransition.== infix(_:_:)()
{
  if (static ClosedRange.== infix(_:_:)())
  {
    type metadata accessor for TimeDataFormatting.FormatTransition();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t TimeDataFormatting.FormatTransition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x66666F646E6168 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t TimeDataFormatting.FormatTransition.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x66666F646E6168;
  }
  else {
    return 0x65676E6172;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Pair.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  return Pair.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys(uint64_t a1)
{
  Pair.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  Hasher.init(_seed:)();
  Pair.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  return TimeDataFormatting.FormatTransition.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TimeDataFormatting.FormatTransition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.FormatTransition<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t TimeDataFormatting.FormatTransition.encode(to:)(void *a1, uint64_t a2)
{
  long long v9 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 40);
  long long v14 = v9;
  long long v15 = v10;
  type metadata accessor for TimeDataFormatting.FormatTransition.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v11 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v9 - v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for ClosedRange();
  uint64_t v16 = v10;
  swift_getWitnessTable();
  uint64_t v6 = v12;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v6) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v5, v3);
  }
  uint64_t v8 = v11;
  LOBYTE(v13) = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v5, v3);
}

Swift::Int TimeDataFormatting.FormatTransition.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  TimeDataFormatting.FormatTransition.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t TimeDataFormatting.FormatTransition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a7;
  uint64_t v34 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  int v36 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for ClosedRange();
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v41 = (char *)&v33 - v14;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  type metadata accessor for TimeDataFormatting.FormatTransition.CodingKeys();
  swift_getWitnessTable();
  uint64_t v44 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v37 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v39 = a2;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v42 = a4;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v17 = type metadata accessor for TimeDataFormatting.FormatTransition();
  uint64_t v33 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v33 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  int v43 = v16;
  uint64_t v20 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v21 = a1;
  if (v20) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v23 = v38;
  uint64_t v22 = v39;
  uint64_t v24 = (uint64_t)v21;
  int v25 = v19;
  uint64_t v26 = v37;
  LOBYTE(v46) = 0;
  uint64_t v51 = v42;
  uint64_t v27 = v40;
  swift_getWitnessTable();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v28 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  char v45 = v25;
  v28(v25, v41, v27);
  LOBYTE(v46) = 1;
  uint64_t v29 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v43, v44);
  long long v30 = v45;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v45[*(int *)(v17 + 60)], v29, v22);
  uint64_t v31 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v35, v30, v17);
  __swift_destroy_boxed_opaque_existential_1(v24);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v30, v17);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataFormatting.FormatTransition<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TimeDataFormatting.FormatTransition.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataFormatting.FormatTransition<A>(void *a1, uint64_t a2)
{
  return TimeDataFormatting.FormatTransition.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.FormatTransition<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  TimeDataFormatting.FormatTransition.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.FormatTransition<A>()
{
  return static TimeDataFormatting.FormatTransition.== infix(_:_:)();
}

double AnyInterfaceIdiom.reducedLuminanceBudget(for:)(unsigned char *a1)
{
  double v2 = 0.0;
  if (*a1)
  {
    if (*a1 != 1)
    {
      uint64_t v5 = 0x7FF0000000000000;
      return *(double *)&v5;
    }
    uint64_t v3 = *(void *)(v1 + 8);
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>);
    uint64_t v4 = *(void (**)(void))(v3 + 8);
    if ((((uint64_t (*)(void))v4)() & 1) == 0)
    {
      type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WidgetInterfaceIdiom>);
      if ((((uint64_t (*)(void))v4)() & 1) == 0)
      {
        type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WatchInterfaceIdiom>);
        v4();
      }
      uint64_t v5 = 0x404E000000000000;
      return *(double *)&v5;
    }
  }
  return v2;
}

uint64_t type metadata accessor for TimeDataFormatting.FormatTransition()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TimeDataFormatting.FormatTransition.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for Equatable in TimeDataFormatting.FormatTransition<A>()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of VariablePrecisionDiscreteFormatStyle.precisionTransition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata completion function for TimeDataFormatting.FormatTransition()
{
  uint64_t result = type metadata accessor for ClosedRange();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.FormatTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  uint64_t v11 = v7 + v8 + ((v7 + v8) & ~v8);
  unint64_t v12 = (v11 & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v16(a1, a2, v5);
    v16((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
    v16((uint64_t *)(((unint64_t)v4 + v11) & v9), (uint64_t *)(((unint64_t)a2 + v11) & v9), v5);
  }
  return v4;
}

uint64_t destroy for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = v6 + a1;
  v9(v7 & ~v5, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v9)((v7 + (v6 & ~v5)) & ~v5, v3);
}

uint64_t initializeWithCopy for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  v7((v9 + a1 + ((v8 + v9) & ~v9) + v8) & ~v9, (v9 + a2 + ((v8 + v9) & ~v9) + v8) & ~v9, v5);
  return a1;
}

uint64_t assignWithCopy for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  v7((v9 + a1 + ((v8 + v9) & ~v9) + v8) & ~v9, (v9 + a2 + ((v8 + v9) & ~v9) + v8) & ~v9, v5);
  return a1;
}

uint64_t initializeWithTake for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  v7((v9 + a1 + ((v8 + v9) & ~v9) + v8) & ~v9, (v9 + a2 + ((v8 + v9) & ~v9) + v8) & ~v9, v5);
  return a1;
}

uint64_t assignWithTake for TimeDataFormatting.FormatTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  v7((v9 + a1 + ((v8 + v9) & ~v9) + v8) & ~v9, (v9 + a2 + ((v8 + v9) & ~v9) + v8) & ~v9, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.FormatTransition(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6
       + *(unsigned __int8 *)(v4 + 80)
       + ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for TimeDataFormatting.FormatTransition(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245F60F38);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for TimeDataFormatting.FormatTransition.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    _DWORD *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245F6102CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          _DWORD *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataFormatting.FormatTransition<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

void protocol witness for ShapeStyle.resolve(in:) in conformance Color(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  long long v8 = *a1;
  *(float *)a2 = (*(float (**)(long long *))(*(void *)v4 + 104))(&v8);
  *(_DWORD *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v7;
}

uint64_t ColorProvider.staticColor.getter()
{
  return 0;
}

uint64_t ColorProvider.kitColor.getter()
{
  return 0;
}

uint64_t ColorProvider.colorDescription.getter(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.DisplayP3()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance ContentStyle.ID()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.BackgroundColorProvider()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance GradientColorProvider()
{
  outlined copy of EitherGradient(*(void *)v0, *(unsigned char *)(v0 + 8));
  return String.init<A>(describing:)();
}

uint64_t Color.provider.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*Color.provider.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Color.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustomColorProvider();
  MEMORY[0x270FA5388](v4);
  int v6 = (char *)&v8 - v5;
  swift_getWitnessTable();
  type metadata accessor for ColorBox();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(v6, a1, a2);
  return ColorBox.__allocating_init(_:)((uint64_t)v6);
}

uint64_t Color.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 136))();
}

uint64_t Color.description.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

Swift::Int Color.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 136))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

void Color.body(environment:)(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = *a1;
  *(float *)a3 = (*(float (**)(long long *))(*(void *)a2 + 104))(&v7);
  *(_DWORD *)(a3 + 4) = v4;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v6;
}

void AnyColorBox.resolve(in:)()
{
}

void AnyColorBox.apply(color:to:)()
{
}

void AnyColorBox.staticColor.getter()
{
}

void AnyColorBox.kitColor.getter()
{
}

void AnyColorBox.hash(into:)()
{
}

void AnyColorBox.description.getter()
{
}

void AnyColorBox.opacity(at:environment:)()
{
}

uint64_t AnyColorBox.deinit()
{
  return v0;
}

uint64_t AnyColorBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AnyColorBox.as<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  type metadata accessor for ColorBox();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v9 = *(void *)(a1 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v4 + *(void *)(*(void *)v4 + 176), a1);
    uint64_t v5 = v9;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 - 8);
    uint64_t v6 = 1;
  }
  long long v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);

  return v7(a2, v6, 1, a1);
}

float CustomColorProvider.resolve(in:)(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  (*(void (**)(uint64_t *__return_ptr, long long *, void))(*(void *)(a2 + 32) + 48))(&v4, &v3, *(void *)(a2 + 16));
  return *(float *)&v4;
}

uint64_t CustomColorProvider.colorDescription.getter(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return String.init<A>(describing:)();
}

uint64_t CustomColorProvider.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static CustomColorProvider.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int CustomColorProvider.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomColorProvider<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CustomColorProvider<A>()
{
  return static CustomColorProvider.== infix(_:_:)();
}

uint64_t ColorBox.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 168) + 48))(*(void *)(*(void *)v0 + 160));
}

uint64_t ColorBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 160) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 176));
}

uint64_t ObjcColor.color.getter()
{
  return swift_retain();
}

id ObjcColor.init(_:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC7SwiftUI9ObjcColor_color] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

Swift::Int ObjcColor.hash.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI9ObjcColor_color);
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v3);
  return Hasher._finalize()();
}

id ObjcColor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ObjcColor.init()()
{
}

id ObjcColor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.NamedColor()
{
  id v1 = *(id *)(v0 + 16);
  swift_bridgeObjectRetain();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.OpacityColor()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.HierarchicalOpacityColor()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.DestinationOverProvider()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.MixProvider()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.SettingOpacityProvider()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance Color.TintAdjustmentProvider()
{
  return String.init<A>(describing:)();
}

uint64_t type metadata accessor for CustomColorProvider()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **associated type witness table accessor for EnvironmentalView.EnvironmentBody : View in Color()
{
  return &protocol witness table for ColorView;
}

uint64_t dispatch thunk of ColorProvider.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ColorProvider.apply(color:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ColorProvider.staticColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ColorProvider.kitColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ColorProvider.colorDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ColorProvider.opacity(at:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t method lookup function for AnyColorBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyColorBox);
}

uint64_t dispatch thunk of AnyColorBox.apply(color:to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AnyColorBox.staticColor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AnyColorBox.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AnyColorBox.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of AnyColorBox.opacity(at:environment:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t method lookup function for ObjcColor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ObjcColor);
}

uint64_t dispatch thunk of ObjcColor.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t getEnumTagSinglePayload for CustomColorProvider(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CustomColorProvider(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245F6252CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for Equatable in CustomColorProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for CustomColorProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _BindingActionModifier.binding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Binding();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t _BindingActionModifier.binding.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Binding();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*_BindingActionModifier.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _BindingActionModifier.action : <A>_BindingActionModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(uint64_t a1)@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 16);
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  unsigned int v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for _BindingActionModifier() + 36));
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  unsigned int v10 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v10 + 2) = v5;
  *((void *)v10 + 3) = v6;
  *((void *)v10 + 4) = v9;
  *((void *)v10 + 5) = v8;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a4[1] = v10;

  return swift_retain();
}

uint64_t key path setter for _BindingActionModifier.action : <A>_BindingActionModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v9 + 2) = v5;
  *((void *)v9 + 3) = v6;
  *((void *)v9 + 4) = v8;
  *((void *)v9 + 5) = v7;
  unsigned int v10 = (uint64_t (**)(uint64_t))(a2 + *(int *)(type metadata accessor for _BindingActionModifier() + 36));
  swift_retain();
  uint64_t result = swift_release();
  void *v10 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  v10[1] = v9;
  return result;
}

uint64_t _BindingActionModifier.action.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t _BindingActionModifier.action.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_release();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_BindingActionModifier.action.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _BindingActionModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v31 = a4;
  long long v32 = a3;
  uint64_t v30 = a6;
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  int v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for BindingActionDispatcher();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v25 - v14;
  LODWORD(a1) = *a1;
  uint64_t v16 = *a2;
  int v17 = *((_DWORD *)a2 + 2);
  uint64_t v28 = a2[2];
  int v29 = *((_DWORD *)a2 + 20);
  default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v39);
  uint64_t v33 = v39;
  int v34 = v40;
  char v35 = v41;
  __n128 v18 = ((__n128 (*)(char *, uint64_t, uint64_t, uint64_t))*(void *)(*(void *)(a5 - 8) + 56))(v11, 1, 1, a5);
  v18.n128_u64[0] = a2[3];
  __n128 v27 = v18;
  BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((int)a1, v18.n128_i32[0], (uint64_t)&v33, (uint64_t)v11, 0, 0, 0, (uint64_t)v15);
  uint64_t v37 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  long long v26 = *(_OWORD *)(a2 + 5);
  uint64_t v19 = a2[4];
  long long v25 = *(_OWORD *)(a2 + 7);
  uint64_t v20 = a2[9];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)v36, v12, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v22);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v23 = AGGraphSetFlags();
  uint64_t v39 = v16;
  int v40 = v17;
  uint64_t v42 = v28;
  unint64_t v43 = v27.n128_u64[0];
  uint64_t v44 = v19;
  long long v45 = v26;
  long long v46 = v25;
  uint64_t v47 = v20;
  int v48 = v29;
  return v32(v23, &v39);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BindingActionModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _BindingActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), a6);
}

uint64_t sub_245F62BCC()
{
  return 16;
}

__n128 sub_245F62BD8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _BindingActionModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    uint64_t v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    int v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v17(v15, v16, v4);
    __n128 v18 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = v18[1];
    uint64_t v20 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v18;
    v20[1] = v19;
  }
  swift_retain();
  return a1;
}

void *initializeWithTake for _BindingActionModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v9 + 8) & ~v9, ((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v8 + 32) + 7;
  *(_OWORD *)(((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for _BindingActionModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 24) + 7;
  *(_OWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _BindingActionModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F63048);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  int v17 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
  }
  unint64_t v18 = *v17;
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for _BindingActionModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(((unint64_t)v18 + v9 + 8) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = a2 - 1;
              }
              *unint64_t v18 = v19;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245F63254);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_245F6327C()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for BindingActionDispatcher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 7;
  unint64_t v11 = (((v9 + 7 + ((v7 + 21) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    int v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v17 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v17 = *v16;
    unint64_t v18 = (void *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = (uint64_t *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = *v19;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)v19 + 5);
    *unint64_t v18 = v20;
    uint64_t v21 = (void *)(((unint64_t)v18 + v8 + 13) & ~v8);
    uint64_t v22 = (const void *)(((unint64_t)v19 + v8 + 13) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v19 + v8 + 13) & ~v8, 1, v4))
    {
      memcpy(v21, v22, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v21, v22, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v4);
    }
    unint64_t v23 = ((unint64_t)v21 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = ((unint64_t)v22 + v10) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v24 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v25 = *(void *)(v24 + 8);
      *(void *)unint64_t v23 = *(void *)v24;
      *(void *)(v23 + 8) = v25;
      swift_retain();
    }
    *(_DWORD *)((v23 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v24 + 19) & 0xFFFFFFFFFFFFFFF8);
  }
  return v3;
}

_DWORD *assignWithCopy for BindingActionDispatcher(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = ((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(unsigned char *)(v7 + 12) = *(unsigned char *)(v8 + 12);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)((v11 + 13 + v7) & ~v11);
  int v13 = (void *)((v11 + 13 + v8) & ~v11);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy(v12, v13, v19);
LABEL_12:
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v20 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v10 + 64) + 1;
  }
  uint64_t v21 = (void *)(((unint64_t)v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (unint64_t *)(((unint64_t)v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = *v22;
  if (*v21 < 0xFFFFFFFFuLL)
  {
    if (v23 >= 0xFFFFFFFF)
    {
      unint64_t v25 = v22[1];
      *uint64_t v21 = v23;
      v21[1] = v25;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    goto LABEL_22;
  }
  if (v23 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v24 = v22[1];
  *uint64_t v21 = v23;
  v21[1] = v24;
  swift_retain();
  swift_release();
LABEL_22:
  *(_DWORD *)(((unint64_t)v21 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v22 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for BindingActionDispatcher(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = (void *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (uint64_t *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = *v8;
  *(void *)((char *)v7 + 5) = *(uint64_t *)((char *)v8 + 5);
  *unint64_t v7 = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  int v13 = (void *)(((unint64_t)v7 + v12 + 13) & ~v12);
  int v14 = (const void *)(((unint64_t)v8 + v12 + 13) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10))
  {
    int v15 = *(_DWORD *)(v11 + 84);
    size_t v16 = *(void *)(v11 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v13, v14, v10);
    size_t v19 = *(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56);
    uint64_t v18 = v11 + 56;
    v19(v13, 0, 1, v10);
    int v15 = *(_DWORD *)(v18 + 28);
    size_t v16 = *(void *)(v18 + 8);
  }
  if (v15) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v16 + 1;
  }
  unint64_t v21 = ((unint64_t)v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v22 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v23 = *(void *)(v22 + 8);
    *(void *)unint64_t v21 = *(void *)v22;
    *(void *)(v21 + 8) = v23;
  }
  *(_DWORD *)((v21 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v22 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for BindingActionDispatcher(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = ((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(unsigned char *)(v7 + 12) = *(unsigned char *)(v8 + 12);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 13 + v7) & ~v11);
  int v13 = (void *)((v11 + 13 + v8) & ~v11);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy(v12, v13, v19);
LABEL_12:
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v20 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v10 + 64) + 1;
  }
  unint64_t v21 = (void *)(((unint64_t)v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (unint64_t *)(((unint64_t)v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = *v22;
  if (*v21 < 0xFFFFFFFFuLL)
  {
    if (v23 >= 0xFFFFFFFF)
    {
      unint64_t v25 = v22[1];
      *unint64_t v21 = v23;
      v21[1] = v25;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
    goto LABEL_22;
  }
  if (v23 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v24 = v22[1];
  *unint64_t v21 = v23;
  v21[1] = v24;
  swift_release();
LABEL_22:
  *(_DWORD *)(((unint64_t)v21 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v22 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BindingActionDispatcher(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v9 + 7;
  if (v7 < a2
    && *((unsigned char *)a1 + ((((v10 + ((v8 + 21) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v7 + *a1 + 1;
  }
  unint64_t v12 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 13) & ~v8;
  if (v6 < 0x7FFFFFFE)
  {
    unint64_t v14 = *(void *)((v10 + v12) & 0xFFFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    if ((v14 + 1) >= 2) {
      return v14;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v13 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v12);
    if (v13 >= 2) {
      return v13 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for BindingActionDispatcher(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 1;
  if (!v7) {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v7) {
    ++v11;
  }
  size_t v12 = (((v11 + 7 + ((v10 + 21) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v9 >= a2)
  {
    if (v9 < a3) {
      a1[v12] = 0;
    }
    if (a2)
    {
      unint64_t v14 = (unsigned char *)((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 13) & ~v10);
      if (v8 < 0x7FFFFFFE)
      {
        size_t v18 = (void *)((unint64_t)&v14[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *size_t v18 = 0;
          v18[1] = 0;
          *(_DWORD *)size_t v18 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *size_t v18 = a2;
        }
      }
      else if (v8 >= a2)
      {
        uint64_t v19 = a2 + 1;
        uint64_t v20 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v20(v14, v19);
      }
      else
      {
        if (v11 <= 3) {
          int v15 = ~(-1 << (8 * v11));
        }
        else {
          int v15 = -1;
        }
        if (v11)
        {
          int v16 = v15 & (~v8 + a2);
          if (v11 <= 3) {
            int v17 = v11;
          }
          else {
            int v17 = 4;
          }
          bzero(v14, v11);
          switch(v17)
          {
            case 2:
              *(_WORD *)unint64_t v14 = v16;
              break;
            case 3:
              *(_WORD *)unint64_t v14 = v16;
              void v14[2] = BYTE2(v16);
              break;
            case 4:
              *(_DWORD *)unint64_t v14 = v16;
              break;
            default:
              *unint64_t v14 = v16;
              break;
          }
        }
      }
    }
  }
  else
  {
    unsigned int v13 = ~v9 + a2;
    bzero(a1, v12);
    *(_DWORD *)a1 = v13;
    if (v9 < a3) {
      a1[v12] = 1;
    }
  }
}

uint64_t sub_245F63F08()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in BindingActionDispatcher.updateValue()()
{
  return (*(uint64_t (**)(unint64_t))(v0 + 32))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
}

uint64_t sub_245F64030()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245F64068()
{
  swift_release();

  return swift_deallocObject();
}

double SizeAndSpacingContext.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 8);
  double result = *(double *)a1;
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

uint64_t _PositionAwarePlacementContext.transform.getter@<X0>(uint64_t a1@<X8>)
{
  Inputuint64_t Value = AGGraphGetInputValue();
  double v3 = *(double *)(InputValue + 8);
  double v4 = *(double *)(InputValue + 16);
  double v5 = *(double *)(InputValue + 24);
  double v6 = *(double *)(InputValue + 32);
  *(void *)a1 = *(void *)InputValue;
  uint64_t v7 = AGGraphGetInputValue();
  double v8 = *(double *)v7;
  double v9 = *(double *)(v7 + 8);
  *(double *)(a1 + 24) = v5 - (*(double *)v7 - v3);
  *(double *)(a1 + 32) = v6 - (v9 - v4);
  *(double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v9;

  return swift_retain();
}

__n128 PlacementContext.init(base:parentSize:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 8);
  *(void *)a3 = *(void *)a1;
  *(_DWORD *)(a3 + 8) = v3;
  __n128 result = *(__n128 *)a2;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 32) = v5;
  *(unsigned char *)(a3 + 48) = 0;
  return result;
}

uint64_t ViewTransformable.convert(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Inputuint64_t Value = AGGraphGetInputValue();
  uint64_t v8 = *(void *)InputValue;
  double v9 = *(double *)(InputValue + 8);
  double v10 = *(double *)(InputValue + 16);
  double v11 = *(double *)(InputValue + 24);
  double v12 = *(double *)(InputValue + 32);
  uint64_t v13 = AGGraphGetInputValue();
  double v14 = *(double *)v13;
  double v15 = *(double *)(v13 + 8);
  double v16 = v11 - (*(double *)v13 - v9);
  v18[0] = v8;
  *(double *)&v18[1] = v14;
  *(double *)&void v18[2] = v15;
  *(double *)&v18[3] = v16;
  *(double *)&v18[4] = v12 - (v15 - v10);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(a4 + 8))(a2, v18, a3, a4);
}

{
  uint64_t InputValue;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  void v18[5];

  Inputuint64_t Value = AGGraphGetInputValue();
  uint64_t v8 = *(void *)InputValue;
  double v9 = *(double *)(InputValue + 8);
  double v10 = *(double *)(InputValue + 16);
  double v11 = *(double *)(InputValue + 24);
  double v12 = *(double *)(InputValue + 32);
  uint64_t v13 = AGGraphGetInputValue();
  double v14 = *(double *)v13;
  double v15 = *(double *)(v13 + 8);
  double v16 = v11 - (*(double *)v13 - v9);
  v18[0] = v8;
  *(double *)&v18[1] = v14;
  *(double *)&void v18[2] = v15;
  *(double *)&v18[3] = v16;
  *(double *)&v18[4] = v12 - (v15 - v10);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(a4 + 16))(a1, v18, a3, a4);
}

uint64_t SizeAndSpacingContext.context.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*SizeAndSpacingContext.context.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PlacementContext.init(context:owner:size:environment:transform:position:safeAreaInsets:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if ((a2 & 0x100000000) != 0) {
    int v5 = result;
  }
  else {
    int v5 = a2;
  }
  *(_DWORD *)a5 = result;
  *(_DWORD *)(a5 + 4) = v5;
  *(_DWORD *)(a5 + 8) = a4;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 1;
  return result;
}

uint64_t PlacementContext.init(context:size:environment:transform:position:safeAreaInsets:)@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = result;
  *(_DWORD *)(a4 + 4) = result;
  *(_DWORD *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = a2;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(unsigned char *)(a4 + 48) = 1;
  return result;
}

uint64_t PlacementContext.subscript.getter(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(v1 + 4);
  int v8 = *(_DWORD *)(v1 + 8);
  double v9 = a1;
  uint64_t v4 = *(void *)(*MEMORY[0x263F8EA20] + v2 + 8);
  uint64_t v5 = type metadata accessor for EnvironmentFetch();
  uint64_t v11 = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = swift_getWitnessTable();
  int v14 = 1;
  int v15 = v3;
  char v16 = 0;
  int v17 = &v8;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)partial apply for closure #1 in Rule<>.cachedValue(options:owner:), (uint64_t)v10, v5, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v6);
  return swift_release();
}

uint64_t _PositionAwarePlacementContext.init(context:owner:size:environment:transform:position:safeAreaInsets:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, _DWORD *a8@<X8>)
{
  if ((a2 & 0x100000000) != 0) {
    int v8 = result;
  }
  else {
    int v8 = a2;
  }
  *a8 = result;
  a8[1] = v8;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

double _PositionAwarePlacementContext.size.getter()
{
  return *(double *)AGGraphGetInputValue();
}

void _PositionAwarePlacementContext.unadjustedSafeAreaInsets.getter(void *a1@<X8>)
{
  if (*(_DWORD *)(v1 + 24) == *MEMORY[0x263F288F8])
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
    uint64_t v4 = *InputValue;
    uint64_t v5 = InputValue[1];
    uint64_t v6 = InputValue[2];
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v6;
    swift_retain();
    swift_bridgeObjectRetain();
  }
}

uint64_t _PositionAwarePlacementContext.subscript.getter(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(v1 + 4);
  int v8 = *(_DWORD *)(v1 + 12);
  double v9 = a1;
  uint64_t v4 = *(void *)(*MEMORY[0x263F8EA20] + v2 + 8);
  uint64_t v5 = type metadata accessor for EnvironmentFetch();
  uint64_t v11 = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = swift_getWitnessTable();
  int v14 = 1;
  int v15 = v3;
  char v16 = 0;
  int v17 = &v8;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)partial apply for closure #1 in Rule<>.cachedValue(options:owner:), (uint64_t)v10, v5, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v6);
  return swift_release();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EnvironmentFetch<A>(int a1)
{
  return EnvironmentFetch.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EnvironmentFetch<A>()
{
  Hasher.init(_seed:)();
  EnvironmentFetch.hash(into:)((int)&v2, *v0);
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for SizeAndSpacingContext()
{
  return &type metadata for SizeAndSpacingContext;
}

uint64_t getEnumTagSinglePayload for PlacementContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlacementContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlacementContext()
{
  return &type metadata for PlacementContext;
}

ValueMetadata *type metadata accessor for _PositionAwarePlacementContext()
{
  return &type metadata for _PositionAwarePlacementContext;
}

ValueMetadata *type metadata accessor for PlacementContext.ParentSize()
{
  return &type metadata for PlacementContext.ParentSize;
}

uint64_t sub_245F6488C()
{
  return swift_deallocObject();
}

void specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(void *a1, uint64_t a2, void *a3, id a4)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for OSSignpostID();
  unint64_t v56 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v14 = (char *)v54 - v13;
  uint64_t v15 = *(void *)(a2 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)a2;
  *(void *)&into.state.CC_LONG h4 = v15;
  uint64_t v59 = a2;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(a2 + 24);
  uint64_t v16 = ProtobufEncoder.archiveWriter.getter();
  if (v16)
  {
    uint64_t v17 = v16;
    unint64_t v57 = a3;
    uint64_t v60 = v4;
    id v58 = a4;
    *(void *)&c.h0 = a1;
    uint64_t v18 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
    unint64_t v19 = lazy protocol witness table accessor for type RBShader and conformance NSObject();
    id v20 = a1;
    AnyHashable.init<A>(_:)();
    unint64_t v21 = (uint64_t *)(v17 + 152);
    swift_beginAccess();
    uint64_t v22 = *(void *)(v17 + 152);
    if (*(void *)(v22 + 16))
    {
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&into);
      if (v24)
      {
        uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
        swift_endAccess();
        outlined destroy of AnyHashable((uint64_t)&into);
        lazy protocol witness table accessor for type Int and conformance Int();
        default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v26);
        static OSSignpostID.exclusive.getter();
        __n128 v27 = OSSignposter.logHandle.getter();
        int v28 = static os_signpost_type_t.event.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          LODWORD(v55) = v28;
          unint64_t v29 = v56;
          (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v11, v14, v9);
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = 134217984;
          *(void *)&into.state.h0 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_signpost_id_t v31 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_245728000, v27, (os_signpost_type_t)v55, v31, "addAttachment.cacheHit", "index=%{name=index}ld", v30, 0xCu);
          MEMORY[0x24C527CC0](v30, -1, -1);

          long long v32 = *(void (**)(char *, uint64_t))(v29 + 8);
          v32(v14, v9);
          v32(v11, v9);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v56 + 8))(v14, v9);
        }
        a4 = v58;
        int v48 = v57;
        if ((v25 & 0x8000000000000000) == 0) {
          goto LABEL_16;
        }
        goto LABEL_22;
      }
    }
    id v55 = v20;
    unint64_t v56 = v19;
    swift_endAccess();
    outlined destroy of AnyHashable((uint64_t)&into);
    uint64_t v33 = v57;
    id v34 = v58;
    uint64_t v35 = v60;
    int v36 = closure #1 in closure #1 in Shader.ResolvedShader.encode(to:)(v57, (uint64_t)v58);
    if (v35)
    {

LABEL_8:
      swift_release();
      return;
    }
    unint64_t v40 = (unint64_t)v36;
    unint64_t v41 = v37;
    v54[1] = v18;
    uint64_t v60 = 0;
    memset(&c, 0, sizeof(c));
    outlined copy of Data._Representation((uint64_t)v36, v37);
    CC_SHA1_Init(&c);
    into.state = c;
    Data.hash(into:)(&into);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
    outlined consume of Data._Representation(v40, v41);
    CC_LONG h4 = c.h4;
    uint64_t v43 = *(void *)&c.h0;
    uint64_t v44 = *(void *)&c.h2;
    swift_beginAccess();
    uint64_t v45 = specialized Collection<>.firstIndex(of:)(v43, v44, h4, *(void *)(v17 + 32));
    if (v46)
    {
      *(void *)&into.state.h0 = v43;
      *(void *)&into.state.h2 = v44;
      into.state.CC_LONG h4 = h4;
      LOBYTE(into.state.Nl) = 0;
      outlined copy of Data._Representation(v40, v41);
      uint64_t v51 = v60;
      uint64_t v25 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&into.state.h0, (const char *)v17, v40, v41);
      outlined consume of Data._Representation(v40, v41);
      outlined consume of Data._Representation(v40, v41);
      if (v51)
      {

        goto LABEL_8;
      }
      a4 = v58;
      int v48 = v57;
    }
    else
    {
      uint64_t v47 = v45;
      outlined consume of Data._Representation(v40, v41);
      a4 = v58;
      int v48 = v57;
      uint64_t v25 = v47;
    }
    id v62 = v55;
    id v52 = v55;
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = *v21;
    *unint64_t v21 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, (uint64_t)&into, isUniquelyReferenced_nonNull_native);
    *unint64_t v21 = v61;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&into);
    swift_endAccess();
    if ((v25 & 0x8000000000000000) == 0)
    {
LABEL_16:
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(v25);

      swift_release();
      goto LABEL_17;
    }
LABEL_22:

    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v38 = closure #1 in closure #1 in Shader.ResolvedShader.encode(to:)(a3, (uint64_t)a4);
  if (v4)
  {

    return;
  }
  uint64_t v49 = (uint64_t)v38;
  unint64_t v50 = v39;
  ProtobufEncoder.dataField(_:_:)(2, (uint64_t)v38, v39);
  outlined consume of Data._Representation(v49, v50);

LABEL_17:
}

void specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  id v58 = (void *)type metadata accessor for OSSignpostID();
  unint64_t v57 = *(v58 - 1);
  MEMORY[0x270FA5388](v58);
  unint64_t v56 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v56 - v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = *(void *)(a2 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)a2;
  *(void *)&into.state.CC_LONG h4 = v18;
  uint64_t v60 = a2;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(a2 + 24);
  uint64_t v19 = ProtobufEncoder.archiveWriter.getter();
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v59 = v3;
    *(void *)&c.h0 = a1;
    unint64_t v21 = lazy protocol witness table accessor for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:)();
    uint64_t v22 = a1;
    AnyHashable.init<A>(_:)();
    unint64_t v23 = (void *)(v20 + 152);
    swift_beginAccess();
    uint64_t v61 = v20;
    uint64_t v24 = *(void *)(v20 + 152);
    if (*(void *)(v24 + 16) && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&into), (v26 & 1) != 0))
    {
      uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&into);
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v28);
      static OSSignpostID.exclusive.getter();
      unint64_t v29 = OSSignposter.logHandle.getter();
      os_signpost_type_t v30 = static os_signpost_type_t.event.getter();
      os_signpost_id_t v31 = a3;
      if (OS_os_log.signpostsEnabled.getter())
      {
        unint64_t v32 = v57;
        uint64_t v33 = v56;
        id v34 = v58;
        (*(void (**)(char *, char *, void *))(v57 + 16))(v56, v10, v58);
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 134217984;
        *(void *)&into.state.h0 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_signpost_id_t v36 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v29, v30, v36, "addAttachment.cacheHit", "index=%{name=index}ld", v35, 0xCu);
        MEMORY[0x24C527CC0](v35, -1, -1);

        unint64_t v37 = *(void (**)(char *, void *))(v32 + 8);
        v37(v10, v34);
        v37(v33, v34);
      }
      else
      {

        (*(void (**)(char *, void *))(v57 + 8))(v10, v58);
      }
      if ((v27 & 0x8000000000000000) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      id v58 = v22;
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&into);
      os_signpost_id_t v31 = a3;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v59;
      uint64_t v39 = Data.init(contentsOf:options:)();
      if (v38)
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
LABEL_17:

        swift_release();
        return;
      }
      unint64_t v43 = v39;
      unint64_t v44 = v40;
      unint64_t v57 = v21;
      uint64_t v59 = v23;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      memset(&c, 0, sizeof(c));
      outlined copy of Data._Representation(v43, v44);
      CC_SHA1_Init(&c);
      into.state = c;
      Data.hash(into:)(&into);
      memset(&c, 0, 20);
      CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
      outlined consume of Data._Representation(v43, v44);
      CC_LONG h4 = c.h4;
      uint64_t v46 = v61;
      uint64_t v47 = *(void *)&c.h0;
      uint64_t v48 = *(void *)&c.h2;
      swift_beginAccess();
      uint64_t v49 = specialized Collection<>.firstIndex(of:)(v47, v48, h4, *(void *)(v46 + 32));
      if (v50)
      {
        *(void *)&into.state.h0 = v47;
        *(void *)&into.state.h2 = v48;
        into.state.CC_LONG h4 = h4;
        LOBYTE(into.state.Nl) = 0;
        outlined copy of Data._Representation(v43, v44);
        uint64_t v27 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&into.state.h0, (const char *)v46, v43, v44);
        outlined consume of Data._Representation(v43, v44);
      }
      else
      {
        uint64_t v27 = v49;
      }
      outlined consume of Data._Representation(v43, v44);
      uint64_t v63 = v58;
      uint64_t v53 = v58;
      AnyHashable.init<A>(_:)();
      float32x2_t v54 = v59;
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v62 = *v54;
      *float32x2_t v54 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, (uint64_t)&into, isUniquelyReferenced_nonNull_native);
      *float32x2_t v54 = v62;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)&into);
      swift_endAccess();
      if ((v27 & 0x8000000000000000) == 0)
      {
LABEL_16:
        ProtobufEncoder.encodeVarint(_:)(8uLL);
        ProtobufEncoder.encodeVarint(_:)(v27);
        goto LABEL_17;
      }
    }

    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = Data.init(contentsOf:options:)();
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  else
  {
    uint64_t v51 = v41;
    unint64_t v52 = v42;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    ProtobufEncoder.dataField(_:_:)(2, v51, v52);
    outlined consume of Data._Representation(v51, v52);
  }
}

Class specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(uint64_t a1)
{
  uint64_t v76 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v76);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  if (v8 < v9)
  {
    uint64_t v71 = (char *)v64 - v6;
    Class v2 = 0;
    long long v70 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v68 = v7;
    uint64_t v69 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v67 = MEMORY[0x263F8EE58] + 8;
    while (1)
    {
      unint64_t v11 = *(void *)(a1 + 24);
      if (v11)
      {
        unint64_t v12 = *(void *)(a1 + 32);
        if (v8 < v12) {
          goto LABEL_14;
        }
        if (v12 < v8) {
          goto LABEL_72;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t v11 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        goto LABEL_73;
      }
      if (v11 < 8) {
        goto LABEL_72;
      }
LABEL_14:
      if (v11 >> 3 != 1)
      {
        if (v11 >> 3 != 2)
        {
          switch(v11 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1) {
                goto LABEL_73;
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v10 = *(void *)(a1 + 8) + 8;
              if (v9 >= v10) {
                goto LABEL_6;
              }
              goto LABEL_72;
            case 2uLL:
              uint64_t v49 = ProtobufDecoder.decodeVarint()();
              if (v1) {
                goto LABEL_73;
              }
              if (v49 < 0) {
                goto LABEL_84;
              }
              unint64_t v10 = *(void *)(a1 + 8) + v49;
              if (v9 < v10) {
                goto LABEL_72;
              }
LABEL_6:
              *(void *)(a1 + 8) = v10;
              break;
            case 5uLL:
              unint64_t v10 = *(void *)(a1 + 8) + 4;
              if (v9 < v10) {
                goto LABEL_72;
              }
              goto LABEL_6;
            default:
              goto LABEL_72;
          }
          goto LABEL_7;
        }
        if ((v11 & 7) != 2) {
          goto LABEL_72;
        }
        uint64_t v13 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_73;
        }
        uint64_t v14 = v13;
        if (v13 < 0)
        {
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          JUMPOUT(0x245F65FA0);
        }
        uint64_t v15 = *(void *)(a1 + 8);
        if (v9 < v15 + v13) {
          goto LABEL_72;
        }
        *(void *)(a1 + 8) = v15 + v13;
        if (v13)
        {
          uint64_t v16 = v15 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v19 = v18;
          if (__OFADD__(v16, v14)) {
            goto LABEL_81;
          }
          if (v16 + v14 < v16) {
            goto LABEL_82;
          }
          uint64_t v20 = v17;
          uint64_t v21 = Data._Representation.subscript.getter();
          unint64_t v23 = v22;
          outlined consume of Data._Representation(v20, v19);
        }
        else
        {
          uint64_t v21 = 0;
          unint64_t v23 = 0xC000000000000000;
        }
        CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v46 = CGImageSourceCreateWithData(isa, 0);

        if (!v46)
        {
          lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
          swift_allocError();
          *uint64_t v62 = 0;
          swift_willThrow();
LABEL_79:

          outlined consume of Data._Representation(v21, v23);
          return v2;
        }
        CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v46, 0, 0);
        if (!ImageAtIndex)
        {
          lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
          swift_allocError();
          *uint64_t v63 = 0;
          swift_willThrow();

          goto LABEL_79;
        }
        Class v48 = ImageAtIndex;

        outlined consume of Data._Representation(v21, v23);
LABEL_53:
        Class v2 = v48;
        goto LABEL_7;
      }
      if ((v11 & 7) != 0)
      {
        if ((v11 & 7) != 2) {
          goto LABEL_72;
        }
        uint64_t v24 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_73;
        }
        if (v24 < 0) {
          goto LABEL_83;
        }
        unint64_t v25 = *(void *)(a1 + 8) + v24;
        if (v9 < v25)
        {
LABEL_72:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_73:

          return v2;
        }
        *(void *)(a1 + 24) = 8;
        *(void *)(a1 + 32) = v25;
      }
      uint64_t v26 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        goto LABEL_73;
      }
      uint64_t v66 = v26;
      uint64_t v27 = v2;
      uint64_t v28 = *(void *)(a1 + 48);
      uint64_t v29 = one-time initialization token for readerKey;
      id v30 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v29 != -1) {
        swift_once();
      }
      uint64_t v31 = v76;
      uint64_t v32 = __swift_project_value_buffer(v76, (uint64_t)static ArchiveReader.readerKey);
      uint64_t v33 = (uint64_t)v71;
      id v34 = *v70;
      (*v70)(v71, v32, v31);
      if (*(void *)(v28 + 16) && (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v36 & 1) != 0))
      {
        Class v2 = v27;
        outlined init with copy of Any(*(void *)(v28 + 56) + 32 * v35, (uint64_t)&v74);
      }
      else
      {
        Class v2 = v27;
        long long v74 = 0u;
        long long v75 = 0u;
      }
      unint64_t v37 = *v69;
      (*v69)(v71, v76);
      if (*((void *)&v75 + 1))
      {
        type metadata accessor for ArchiveReader();
        if (swift_dynamicCast())
        {
          v64[1] = *(void *)&v72[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v38 = *(void *)(a1 + 48);
          uint64_t v39 = one-time initialization token for cacheKey;
          id v65 = *(id *)a1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v39 != -1) {
            swift_once();
          }
          uint64_t v40 = v76;
          uint64_t v41 = __swift_project_value_buffer(v76, (uint64_t)static ArchiveReader.cacheKey);
          uint64_t v42 = v68;
          v34((char *)v68, v41, v40);
          if (*(void *)(v38 + 16) && (unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v42), (v44 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v38 + 56) + 32 * v43, (uint64_t)&v74);
          }
          else
          {
            long long v74 = 0u;
            long long v75 = 0u;
          }
          v37((char *)v68, v76);
          if (!*((void *)&v75 + 1))
          {
            outlined destroy of Any?((uint64_t)&v74);
LABEL_70:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_7;
          }
          type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_70;
          }
          char v50 = *(void **)&v72[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v51 = v66;
          if (v66 < 0) {
            goto LABEL_85;
          }
          swift_beginAccess();
          uint64_t v52 = v50[2];
          if (*(void *)(v52 + 16))
          {
            unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v51);
            if (v54)
            {
              outlined init with copy of Any(*(void *)(v52 + 56) + 32 * v53, (uint64_t)v72);
              outlined init with take of Any(v72, &v74);
              swift_endAccess();
              swift_release();
              swift_release();

              outlined init with take of Any(&v74, v72);
              type metadata accessor for CGImageRef(0);
              if (swift_dynamicCast()) {
                Class v2 = v73;
              }
              else {
                Class v2 = 0;
              }
              goto LABEL_7;
            }
          }
          id v65 = v50;
          swift_endAccess();
          ArchiveReader.subscript.getter(v51);
          uint64_t v56 = v55;
          unint64_t v58 = v57;
          Class v48 = specialized static CodableCGImage.import(from:)();

          outlined consume of Data._Representation(v56, v58);
          type metadata accessor for CGImageRef(0);
          *((void *)&v75 + 1) = v59;
          *(void *)&long long v74 = v48;
          swift_beginAccess();
          uint64_t v60 = v48;
          specialized Dictionary.subscript.setter((uint64_t)&v74, v51);
          swift_endAccess();
          swift_release();
          swift_release();
          goto LABEL_53;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v74);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_7:
      unint64_t v8 = *(void *)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 16);
      if (v8 >= v9)
      {
        *(void *)(a1 + 24) = 0;
        if (v2) {
          return v2;
        }
        goto LABEL_4;
      }
    }
  }
  *(void *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return v2;
}

uint64_t specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v85);
  MEMORY[0x270FA5388](v6);
  unint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = *(void *)(a1 + 16);
  if (v10 < v11)
  {
    unint64_t v79 = (char *)&v69 - v8;
    uint64_t v74 = v9;
    uint64_t v12 = 0;
    unint64_t v78 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v76 = 0;
    unint64_t v77 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v73 = MEMORY[0x263F8EE58] + 8;
    long long v75 = v5;
    while (1)
    {
      unint64_t v15 = *(void *)(a1 + 24);
      if (v15)
      {
        unint64_t v16 = *(void *)(a1 + 32);
        if (v10 < v16) {
          goto LABEL_14;
        }
        if (v16 < v10) {
          goto LABEL_75;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t v15 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        return swift_bridgeObjectRelease();
      }
      if (v15 < 8) {
        goto LABEL_75;
      }
LABEL_14:
      if (v15 >> 3 != 1)
      {
        if (v15 >> 3 == 2)
        {
          if ((v15 & 7) != 2) {
            goto LABEL_75;
          }
          uint64_t v17 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return swift_bridgeObjectRelease();
          }
          uint64_t v18 = v17;
          if (v17 < 0)
          {
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
            JUMPOUT(0x245F66908);
          }
          uint64_t v19 = *(void *)(a1 + 8);
          if (v11 < v19 + v17) {
            goto LABEL_75;
          }
          *(void *)(a1 + 8) = v19 + v17;
          if (v17)
          {
            uint64_t v20 = v19 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
            uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v23 = v22;
            if (__OFADD__(v20, v18)) {
              goto LABEL_82;
            }
            if (v20 + v18 < v20) {
              goto LABEL_83;
            }
            uint64_t v24 = v21;
            uint64_t v25 = Data._Representation.subscript.getter();
            unint64_t v27 = v26;
            outlined consume of Data._Representation(v24, v23);
          }
          else
          {
            uint64_t v25 = 0;
            unint64_t v27 = 0xC000000000000000;
          }
          static String.Encoding.utf8.getter();
          uint64_t v50 = String.init(data:encoding:)();
          if (!v51)
          {
            lazy protocol witness table accessor for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error();
            swift_allocError();
            swift_willThrow();
            swift_bridgeObjectRelease();
            return outlined consume of Data._Representation(v25, v27);
          }
          uint64_t v52 = v51;
          uint64_t v76 = v50;
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v25, v27);
          uint64_t v12 = v52;
        }
        else
        {
          switch(v15 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1) {
                return swift_bridgeObjectRelease();
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v14 = *(void *)(a1 + 8) + 8;
              if (v11 >= v14) {
                goto LABEL_6;
              }
              goto LABEL_75;
            case 2uLL:
              uint64_t v53 = ProtobufDecoder.decodeVarint()();
              if (v1) {
                return swift_bridgeObjectRelease();
              }
              if (v53 < 0) {
                goto LABEL_85;
              }
              unint64_t v14 = *(void *)(a1 + 8) + v53;
              if (v11 < v14) {
                goto LABEL_75;
              }
LABEL_6:
              *(void *)(a1 + 8) = v14;
              break;
            case 5uLL:
              unint64_t v14 = *(void *)(a1 + 8) + 4;
              if (v11 < v14) {
                goto LABEL_75;
              }
              goto LABEL_6;
            default:
              goto LABEL_75;
          }
        }
        goto LABEL_7;
      }
      if ((v15 & 7) != 0)
      {
        if ((v15 & 7) != 2) {
          goto LABEL_75;
        }
        uint64_t v28 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          return swift_bridgeObjectRelease();
        }
        if (v28 < 0) {
          goto LABEL_84;
        }
        unint64_t v29 = *(void *)(a1 + 8) + v28;
        if (v11 < v29)
        {
LABEL_75:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
        *(void *)(a1 + 24) = 8;
        *(void *)(a1 + 32) = v29;
      }
      uint64_t v30 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v72 = v30;
      uint64_t v31 = v12;
      uint64_t v32 = *(void *)(a1 + 48);
      uint64_t v33 = one-time initialization token for readerKey;
      id v34 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v33 != -1) {
        swift_once();
      }
      uint64_t v35 = v85;
      uint64_t v36 = __swift_project_value_buffer(v85, (uint64_t)static ArchiveReader.readerKey);
      uint64_t v37 = (uint64_t)v79;
      uint64_t v38 = *v78;
      (*v78)(v79, v36, v35);
      if (*(void *)(v32 + 16) && (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v37), (v40 & 1) != 0))
      {
        uint64_t v41 = v31;
        outlined init with copy of Any(*(void *)(v32 + 56) + 32 * v39, (uint64_t)&v83);
      }
      else
      {
        uint64_t v41 = v31;
        long long v83 = 0u;
        long long v84 = 0u;
      }
      uint64_t v42 = *v77;
      (*v77)(v79, v85);
      if (*((void *)&v84 + 1))
      {
        type metadata accessor for ArchiveReader();
        if (swift_dynamicCast())
        {
          uint64_t v71 = *(void *)&v80[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v43 = *(void *)(a1 + 48);
          uint64_t v44 = one-time initialization token for cacheKey;
          id v70 = *(id *)a1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v44 != -1) {
            swift_once();
          }
          uint64_t v45 = v85;
          uint64_t v46 = __swift_project_value_buffer(v85, (uint64_t)static ArchiveReader.cacheKey);
          uint64_t v47 = v74;
          v38((char *)v74, v46, v45);
          if (*(void *)(v43 + 16) && (unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v47), (v49 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v43 + 56) + 32 * v48, (uint64_t)&v83);
          }
          else
          {
            long long v83 = 0u;
            long long v84 = 0u;
          }
          v42((char *)v74, v85);
          if (*((void *)&v84 + 1))
          {
            type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
            uint64_t v12 = v41;
            if (swift_dynamicCast())
            {
              char v54 = *(void **)&v80[0];
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              uint64_t v55 = v72;
              if (v72 < 0) {
                goto LABEL_86;
              }
              swift_beginAccess();
              uint64_t v56 = v54[2];
              if (*(void *)(v56 + 16) && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v55), (v58 & 1) != 0))
              {
                outlined init with copy of Any(*(void *)(v56 + 56) + 32 * v57, (uint64_t)v80);
                outlined init with take of Any(v80, &v83);
                swift_endAccess();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                outlined init with take of Any(&v83, v80);
                int v59 = swift_dynamicCast();
                uint64_t v60 = v81;
                if (v59) {
                  uint64_t v12 = v82;
                }
                else {
                  uint64_t v12 = 0;
                }
                if (!v59) {
                  uint64_t v60 = 0;
                }
                uint64_t v76 = v60;
              }
              else
              {
                id v70 = v54;
                swift_endAccess();
                ArchiveReader.subscript.getter(v55);
                uint64_t v62 = v61;
                unint64_t v64 = v63;
                static String.Encoding.utf8.getter();
                uint64_t v65 = String.init(data:encoding:)();
                if (!v66)
                {
                  lazy protocol witness table accessor for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error();
                  swift_allocError();
                  swift_willThrow();
                  swift_release();
                  swift_bridgeObjectRelease();
                  outlined consume of Data._Representation(v62, v64);
                  return swift_release();
                }
                uint64_t v67 = v66;
                uint64_t v68 = v65;
                swift_bridgeObjectRelease();
                outlined consume of Data._Representation(v62, v64);
                *((void *)&v84 + 1) = &type metadata for Image.Location.BundlePath;
                uint64_t v76 = v68;
                *(void *)&long long v83 = v68;
                *((void *)&v83 + 1) = v67;
                swift_beginAccess();
                swift_bridgeObjectRetain();
                specialized Dictionary.subscript.setter((uint64_t)&v83, v55);
                swift_endAccess();
                swift_release();
                swift_release();
                uint64_t v12 = v67;
              }
            }
            else
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            goto LABEL_7;
          }
          outlined destroy of Any?((uint64_t)&v83);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_49;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v83);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_49:
      uint64_t v12 = v41;
LABEL_7:
      unint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      if (v10 >= v11)
      {
        *(void *)(a1 + 24) = 0;
        if (!v12) {
          goto LABEL_4;
        }
        return v76;
      }
    }
  }
  *(void *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return swift_bridgeObjectRelease_n();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  unint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  CFDataRef isa;
  CGDataProvider *v47;
  CGFontRef v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  CFDataRef v59;
  CGDataProvider *v60;
  CGFontRef v61;
  uint64_t v62;
  CGFont *v63;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (**v71)(char *, uint64_t);
  void (**v72)(char *, uint64_t, uint64_t);
  char *v73;
  _OWORD v74[2];
  uint64_t v75;
  long long v76;
  long long v77;
  uint64_t v78;

  unint64_t v78 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v78);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v7 < v8)
  {
    uint64_t v73 = (char *)&v65 - v5;
    uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    id v70 = v6;
    uint64_t v71 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v9 = 1;
    uint64_t v69 = MEMORY[0x263F8EE58] + 8;
    while (1)
    {
      unint64_t v11 = *(void *)(a1 + 24);
      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 32);
        if (v7 < v12) {
          goto LABEL_14;
        }
        if (v12 < v7) {
          goto LABEL_71;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t v11 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        goto LABEL_72;
      }
      if (v11 <= 7) {
        goto LABEL_71;
      }
LABEL_14:
      if (v11 >> 3 != 1)
      {
        if (v11 >> 3 == 2)
        {
          if ((v11 & 7) != 2) {
            goto LABEL_71;
          }
          uint64_t v13 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            goto LABEL_72;
          }
          unint64_t v14 = v13;
          if (v13 < 0)
          {
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            JUMPOUT(0x245F68CB8);
          }
          unint64_t v15 = *(void *)(a1 + 8);
          if (v8 < v15 + v13) {
            goto LABEL_71;
          }
          *(void *)(a1 + 8) = v15 + v13;
          if (v13)
          {
            unint64_t v16 = v15 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
            uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v19 = v18;
            if (__OFADD__(v16, v14)) {
              goto LABEL_77;
            }
            if (v16 + v14 < v16) {
              goto LABEL_78;
            }
            uint64_t v20 = v17;
            unint64_t v14 = Data._Representation.subscript.getter();
            unint64_t v22 = v21;
            outlined consume of Data._Representation(v20, v19);
          }
          else
          {
            unint64_t v22 = 0xC000000000000000;
          }
          CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v47 = CGDataProviderCreateWithCFData(isa);

          if (!v47) {
            goto LABEL_82;
          }
          unint64_t v48 = CGFontCreateWithDataProvider(v47);

          outlined consume of Shader.ResolvedShader?((id)v9);
          outlined consume of Data._Representation(v14, v22);
          uint64_t v9 = (uint64_t)v48;
        }
        else
        {
          switch(v11 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1) {
                goto LABEL_72;
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v10 = *(void *)(a1 + 8) + 8;
              if (v8 >= v10) {
                goto LABEL_6;
              }
              goto LABEL_71;
            case 2uLL:
              char v49 = ProtobufDecoder.decodeVarint()();
              if (v1) {
                goto LABEL_72;
              }
              if (v49 < 0) {
                goto LABEL_80;
              }
              unint64_t v10 = *(void *)(a1 + 8) + v49;
              if (v8 < v10) {
                goto LABEL_71;
              }
LABEL_6:
              *(void *)(a1 + 8) = v10;
              break;
            case 5uLL:
              unint64_t v10 = *(void *)(a1 + 8) + 4;
              if (v8 < v10) {
                goto LABEL_71;
              }
              goto LABEL_6;
            default:
              goto LABEL_71;
          }
        }
        goto LABEL_7;
      }
      if ((v11 & 7) != 0)
      {
        if ((v11 & 7) != 2) {
          goto LABEL_71;
        }
        unint64_t v23 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_72;
        }
        if (v23 < 0) {
          goto LABEL_79;
        }
        uint64_t v24 = *(void *)(a1 + 8) + v23;
        if (v8 < v24)
        {
LABEL_71:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_72;
        }
        *(void *)(a1 + 24) = 8;
        *(void *)(a1 + 32) = v24;
      }
      uint64_t v25 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        goto LABEL_72;
      }
      uint64_t v68 = v25;
      unint64_t v26 = v9;
      unint64_t v27 = *(void *)(a1 + 48);
      uint64_t v28 = one-time initialization token for readerKey;
      unint64_t v29 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28 != -1) {
        swift_once();
      }
      uint64_t v30 = v78;
      uint64_t v31 = __swift_project_value_buffer(v78, (uint64_t)static ArchiveReader.readerKey);
      uint64_t v32 = (uint64_t)v73;
      uint64_t v33 = *v72;
      (*v72)(v73, v31, v30);
      if (*(void *)(v27 + 16) && (id v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v35 & 1) != 0))
      {
        uint64_t v9 = v26;
        outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v34, (uint64_t)&v76);
      }
      else
      {
        uint64_t v9 = v26;
        uint64_t v76 = 0u;
        unint64_t v77 = 0u;
      }
      uint64_t v36 = *v71;
      (*v71)(v73, v78);
      if (!*((void *)&v77 + 1))
      {
        outlined destroy of Any?((uint64_t)&v76);
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_7;
      }
      type metadata accessor for ArchiveReader();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_48;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v38 = *(void **)(a1 + 40);
      uint64_t v37 = *(void *)(a1 + 48);
      unint64_t v39 = one-time initialization token for cacheKey;
      char v40 = *(id *)a1;
      uint64_t v66 = v38;
      uint64_t v67 = v40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v39 != -1) {
        swift_once();
      }
      uint64_t v41 = v78;
      uint64_t v42 = __swift_project_value_buffer(v78, (uint64_t)static ArchiveReader.cacheKey);
      uint64_t v43 = v70;
      v33((char *)v70, v42, v41);
      if (*(void *)(v37 + 16) && (uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v43), (v45 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v44, (uint64_t)&v76);
      }
      else
      {
        uint64_t v76 = 0u;
        unint64_t v77 = 0u;
      }
      v36((char *)v70, v78);
      if (*((void *)&v77 + 1))
      {
        type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
        if (swift_dynamicCast())
        {
          uint64_t v50 = *(void **)&v74[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v51 = v68;
          if (v68 < 0) {
            goto LABEL_81;
          }
          swift_beginAccess();
          uint64_t v52 = v50[2];
          if (*(void *)(v52 + 16) && (uint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v51), (v54 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v52 + 56) + 32 * v53, (uint64_t)v74);
            outlined init with take of Any(v74, &v76);
            swift_endAccess();
            swift_release();
            swift_release();
            outlined consume of Shader.ResolvedShader?((id)v9);
            outlined init with take of Any(&v76, v74);
            type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for CGFontRef?, (uint64_t (*)(uint64_t))type metadata accessor for CGFontRef, MEMORY[0x263F8D8F0]);
            if (swift_dynamicCast()) {
              uint64_t v9 = v75;
            }
            else {
              uint64_t v9 = 1;
            }
          }
          else
          {
            uint64_t v66 = v50 + 2;
            uint64_t v67 = v50;
            swift_endAccess();
            ArchiveReader.subscript.getter(v51);
            uint64_t v56 = v55;
            char v58 = v57;
            int v59 = Data._bridgeToObjectiveC()().super.isa;
            uint64_t v60 = CGDataProviderCreateWithCFData(v59);

            if (!v60) {
              goto LABEL_83;
            }
            uint64_t v61 = CGFontCreateWithDataProvider(v60);

            outlined consume of Shader.ResolvedShader?((id)v9);
            outlined consume of Data._Representation(v56, v58);
            type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for CGFontRef?, (uint64_t (*)(uint64_t))type metadata accessor for CGFontRef, MEMORY[0x263F8D8F0]);
            *((void *)&v77 + 1) = v62;
            *(void *)&uint64_t v76 = v61;
            swift_beginAccess();
            unint64_t v63 = v61;
            specialized Dictionary.subscript.setter((uint64_t)&v76, v51);
            swift_endAccess();
            swift_release();
            swift_release();
            uint64_t v9 = (uint64_t)v61;
          }
          goto LABEL_7;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v76);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_7:
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
      if (v7 >= v8)
      {
        *(void *)(a1 + 24) = 0;
        if (v9 != 1) {
          return v9;
        }
        goto LABEL_4;
      }
    }
  }
  *(void *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  uint64_t v9 = 1;
  outlined consume of Shader.ResolvedShader?((id)1);
LABEL_72:
  outlined consume of Shader.ResolvedShader?((id)v9);
  return v9;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  unint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  Class isa;
  uint64_t CGFontWithData;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Class v56;
  void *v57;
  uint64_t v58;
  id v59;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (**v67)(char *, uint64_t);
  void (**v68)(char *, uint64_t, uint64_t);
  char *v69;
  _OWORD v70[2];
  uint64_t v71;
  long long v72;
  long long v73;
  uint64_t v74;

  uint64_t v74 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v74);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v7 < v8)
  {
    uint64_t v69 = (char *)&v61 - v5;
    uint64_t v68 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v66 = v6;
    uint64_t v67 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v9 = 1;
    uint64_t v65 = MEMORY[0x263F8EE58] + 8;
    while (1)
    {
      unint64_t v11 = *(void *)(a1 + 24);
      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 32);
        if (v7 < v12) {
          goto LABEL_14;
        }
        if (v12 < v7) {
          goto LABEL_69;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t v11 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        goto LABEL_70;
      }
      if (v11 <= 7) {
        goto LABEL_69;
      }
LABEL_14:
      if (v11 >> 3 != 1)
      {
        if (v11 >> 3 == 2)
        {
          if ((v11 & 7) != 2) {
            goto LABEL_69;
          }
          uint64_t v13 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            goto LABEL_70;
          }
          unint64_t v14 = v13;
          if (v13 < 0)
          {
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
            JUMPOUT(0x245F69520);
          }
          unint64_t v15 = *(void *)(a1 + 8);
          if (v8 < v15 + v13) {
            goto LABEL_69;
          }
          *(void *)(a1 + 8) = v15 + v13;
          if (v13)
          {
            unint64_t v16 = v15 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
            uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v19 = v18;
            if (__OFADD__(v16, v14)) {
              goto LABEL_75;
            }
            if (v16 + v14 < v16) {
              goto LABEL_76;
            }
            uint64_t v20 = v17;
            unint64_t v14 = Data._Representation.subscript.getter();
            unint64_t v22 = v21;
            outlined consume of Data._Representation(v20, v19);
          }
          else
          {
            unint64_t v22 = 0xC000000000000000;
          }
          CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
          CGFontWithData = RBDecoderCreateCGFontWithData();

          outlined consume of Shader.ResolvedShader?((id)v9);
          outlined consume of Data._Representation(v14, v22);
          uint64_t v9 = CGFontWithData;
        }
        else
        {
          switch(v11 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1) {
                goto LABEL_70;
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v10 = *(void *)(a1 + 8) + 8;
              if (v8 >= v10) {
                goto LABEL_6;
              }
              goto LABEL_69;
            case 2uLL:
              uint64_t v46 = ProtobufDecoder.decodeVarint()();
              if (v1) {
                goto LABEL_70;
              }
              if (v46 < 0) {
                goto LABEL_78;
              }
              unint64_t v10 = *(void *)(a1 + 8) + v46;
              if (v8 < v10) {
                goto LABEL_69;
              }
LABEL_6:
              *(void *)(a1 + 8) = v10;
              break;
            case 5uLL:
              unint64_t v10 = *(void *)(a1 + 8) + 4;
              if (v8 < v10) {
                goto LABEL_69;
              }
              goto LABEL_6;
            default:
              goto LABEL_69;
          }
        }
        goto LABEL_7;
      }
      if ((v11 & 7) != 0)
      {
        if ((v11 & 7) != 2) {
          goto LABEL_69;
        }
        unint64_t v23 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_70;
        }
        if (v23 < 0) {
          goto LABEL_77;
        }
        uint64_t v24 = *(void *)(a1 + 8) + v23;
        if (v8 < v24)
        {
LABEL_69:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_70;
        }
        *(void *)(a1 + 24) = 8;
        *(void *)(a1 + 32) = v24;
      }
      uint64_t v25 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        goto LABEL_70;
      }
      unint64_t v64 = v25;
      unint64_t v26 = v9;
      unint64_t v27 = *(void *)(a1 + 48);
      uint64_t v28 = one-time initialization token for readerKey;
      unint64_t v29 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28 != -1) {
        swift_once();
      }
      uint64_t v30 = v74;
      uint64_t v31 = __swift_project_value_buffer(v74, (uint64_t)static ArchiveReader.readerKey);
      uint64_t v32 = (uint64_t)v69;
      uint64_t v33 = *v68;
      (*v68)(v69, v31, v30);
      if (*(void *)(v27 + 16) && (id v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v35 & 1) != 0))
      {
        uint64_t v9 = v26;
        outlined init with copy of Any(*(void *)(v27 + 56) + 32 * v34, (uint64_t)&v72);
      }
      else
      {
        uint64_t v9 = v26;
        uint64_t v72 = 0u;
        uint64_t v73 = 0u;
      }
      uint64_t v36 = *v67;
      (*v67)(v69, v74);
      if (!*((void *)&v73 + 1))
      {
        outlined destroy of Any?((uint64_t)&v72);
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_7;
      }
      type metadata accessor for ArchiveReader();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_48;
      }
      unint64_t v63 = *(void *)&v70[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v37 = *(void *)(a1 + 48);
      uint64_t v38 = one-time initialization token for cacheKey;
      uint64_t v62 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v38 != -1) {
        swift_once();
      }
      unint64_t v39 = v74;
      char v40 = __swift_project_value_buffer(v74, (uint64_t)static ArchiveReader.cacheKey);
      uint64_t v41 = v66;
      v33((char *)v66, v40, v39);
      if (*(void *)(v37 + 16) && (uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41), (v43 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v42, (uint64_t)&v72);
      }
      else
      {
        uint64_t v72 = 0u;
        uint64_t v73 = 0u;
      }
      v36((char *)v66, v74);
      if (*((void *)&v73 + 1))
      {
        type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
        if (swift_dynamicCast())
        {
          uint64_t v47 = *(void **)&v70[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          unint64_t v48 = v64;
          if (v64 < 0) {
            goto LABEL_79;
          }
          swift_beginAccess();
          char v49 = v47[2];
          if (*(void *)(v49 + 16) && (uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48), (v51 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v49 + 56) + 32 * v50, (uint64_t)v70);
            outlined init with take of Any(v70, &v72);
            swift_endAccess();
            swift_release();
            swift_release();
            outlined consume of Shader.ResolvedShader?((id)v9);
            outlined init with take of Any(&v72, v70);
            type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for CGFontRef?, (uint64_t (*)(uint64_t))type metadata accessor for CGFontRef, MEMORY[0x263F8D8F0]);
            if (swift_dynamicCast()) {
              uint64_t v9 = v71;
            }
            else {
              uint64_t v9 = 1;
            }
          }
          else
          {
            swift_endAccess();
            ArchiveReader.subscript.getter(v48);
            uint64_t v53 = v52;
            uint64_t v62 = v47;
            uint64_t v55 = v54;
            uint64_t v56 = Data._bridgeToObjectiveC()().super.isa;
            unint64_t v57 = (void *)RBDecoderCreateCGFontWithData();

            outlined consume of Shader.ResolvedShader?((id)v9);
            outlined consume of Data._Representation(v53, v55);
            type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for CGFontRef?, (uint64_t (*)(uint64_t))type metadata accessor for CGFontRef, MEMORY[0x263F8D8F0]);
            *((void *)&v73 + 1) = v58;
            *(void *)&uint64_t v72 = v57;
            swift_beginAccess();
            int v59 = v57;
            specialized Dictionary.subscript.setter((uint64_t)&v72, v48);
            swift_endAccess();
            swift_release();
            swift_release();
            uint64_t v9 = (uint64_t)v57;
          }
          goto LABEL_7;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v72);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_7:
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
      if (v7 >= v8)
      {
        *(void *)(a1 + 24) = 0;
        if (v9 != 1) {
          return v9;
        }
        goto LABEL_4;
      }
    }
  }
  *(void *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  uint64_t v9 = 1;
  outlined consume of Shader.ResolvedShader?((id)1);
LABEL_70:
  outlined consume of Shader.ResolvedShader?((id)v9);
  return v9;
}

void *specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(uint64_t a1, void *a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v74 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v74);
  MEMORY[0x270FA5388](v6);
  unint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = *(void *)(a1 + 16);
  if (v10 < v11)
  {
    uint64_t v73 = (char *)v65 - v8;
    uint64_t v68 = v9;
    uint64_t v3 = 0;
    uint64_t v71 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v67 = MEMORY[0x263F8EE58] + 8;
    id v70 = a2;
    while (1)
    {
      unint64_t v13 = *(void *)(a1 + 24);
      if (v13)
      {
        unint64_t v14 = *(void *)(a1 + 32);
        if (v10 < v14) {
          goto LABEL_14;
        }
        if (v14 < v10) {
          goto LABEL_73;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t v13 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_74;
      }
      if (v13 < 8) {
        goto LABEL_73;
      }
LABEL_14:
      if (v13 >> 3 != 1)
      {
        if (v13 >> 3 == 2)
        {
          if ((v13 & 7) != 2) {
            goto LABEL_73;
          }
          uint64_t v15 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_74;
          }
          uint64_t v16 = v15;
          if (v15 < 0)
          {
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
          }
          uint64_t v17 = *(void *)(a1 + 8);
          if (v11 < v17 + v15) {
            goto LABEL_73;
          }
          *(void *)(a1 + 8) = v17 + v15;
          if (v15)
          {
            uint64_t v18 = v17 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
            uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v21 = v20;
            if (__OFADD__(v18, v16)) {
              goto LABEL_80;
            }
            if (v18 + v16 < v18) {
              goto LABEL_81;
            }
            uint64_t v22 = v19;
            uint64_t v23 = Data._Representation.subscript.getter();
            unint64_t v25 = v24;
            outlined consume of Data._Representation(v22, v21);
          }
          else
          {
            uint64_t v23 = 0;
            unint64_t v25 = 0xC000000000000000;
          }
          char v49 = self;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          *(void *)&long long v77 = 0;
          id v51 = objc_msgSend(v49, sel_decodedObjectWithData_delegate_error_, isa, a2, &v77);

          if (!v51)
          {
            id v64 = (id)v77;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            outlined consume of Data._Representation(v23, v25);

            return v3;
          }
          id v52 = (id)v77;

          outlined consume of Data._Representation(v23, v25);
          uint64_t v3 = v51;
        }
        else
        {
          switch(v13 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v2) {
                goto LABEL_74;
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v12 = *(void *)(a1 + 8) + 8;
              if (v11 >= v12) {
                goto LABEL_6;
              }
              goto LABEL_73;
            case 2uLL:
              uint64_t v53 = ProtobufDecoder.decodeVarint()();
              if (v2) {
                goto LABEL_74;
              }
              if (v53 < 0) {
                goto LABEL_83;
              }
              unint64_t v12 = *(void *)(a1 + 8) + v53;
              if (v11 < v12) {
                goto LABEL_73;
              }
LABEL_6:
              *(void *)(a1 + 8) = v12;
              break;
            case 5uLL:
              unint64_t v12 = *(void *)(a1 + 8) + 4;
              if (v11 < v12) {
                goto LABEL_73;
              }
              goto LABEL_6;
            default:
              goto LABEL_73;
          }
        }
        goto LABEL_7;
      }
      if ((v13 & 7) != 0)
      {
        if ((v13 & 7) != 2) {
          goto LABEL_73;
        }
        uint64_t v26 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_74;
        }
        if (v26 < 0) {
          goto LABEL_82;
        }
        unint64_t v27 = *(void *)(a1 + 8) + v26;
        if (v11 < v27)
        {
LABEL_73:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_74:

          return v3;
        }
        *(void *)(a1 + 24) = 8;
        *(void *)(a1 + 32) = v27;
      }
      uint64_t v28 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_74;
      }
      uint64_t v69 = v28;
      unint64_t v29 = v3;
      uint64_t v30 = *(void *)(a1 + 48);
      uint64_t v31 = one-time initialization token for readerKey;
      id v32 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v31 != -1) {
        swift_once();
      }
      uint64_t v33 = v74;
      uint64_t v34 = __swift_project_value_buffer(v74, (uint64_t)static ArchiveReader.readerKey);
      uint64_t v35 = (uint64_t)v73;
      uint64_t v36 = *v72;
      (*v72)(v73, v34, v33);
      if (*(void *)(v30 + 16) && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35), (v38 & 1) != 0))
      {
        unint64_t v39 = v29;
        outlined init with copy of Any(*(void *)(v30 + 56) + 32 * v37, (uint64_t)&v77);
      }
      else
      {
        unint64_t v39 = v29;
        long long v77 = 0u;
        long long v78 = 0u;
      }
      char v40 = *v71;
      (*v71)(v73, v74);
      if (!*((void *)&v78 + 1))
      {
        outlined destroy of Any?((uint64_t)&v77);
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_49;
      }
      type metadata accessor for ArchiveReader();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_48;
      }
      v65[1] = *(void *)&v75[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v41 = *(void *)(a1 + 48);
      uint64_t v42 = one-time initialization token for cacheKey;
      id v66 = *(id *)a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v42 != -1) {
        swift_once();
      }
      uint64_t v43 = v74;
      uint64_t v44 = __swift_project_value_buffer(v74, (uint64_t)static ArchiveReader.cacheKey);
      uint64_t v45 = v68;
      v36((char *)v68, v44, v43);
      if (*(void *)(v41 + 16))
      {
        unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
        uint64_t v47 = v69;
        if (v48)
        {
          outlined init with copy of Any(*(void *)(v41 + 56) + 32 * v46, (uint64_t)&v77);
        }
        else
        {
          long long v77 = 0u;
          long long v78 = 0u;
        }
      }
      else
      {
        long long v77 = 0u;
        long long v78 = 0u;
        uint64_t v47 = v69;
      }
      v40((char *)v68, v74);
      if (*((void *)&v78 + 1))
      {
        type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
        uint64_t v3 = v39;
        if (swift_dynamicCast())
        {
          uint64_t v54 = *(void *)&v75[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          a2 = v70;
          if (v47 < 0) {
            goto LABEL_84;
          }
          swift_beginAccess();
          uint64_t v55 = *(void *)(v54 + 16);
          if (*(void *)(v55 + 16) && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v47), (v57 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v55 + 56) + 32 * v56, (uint64_t)v75);
            outlined init with take of Any(v75, &v77);
            swift_endAccess();
            swift_release();
            swift_release();

            outlined init with take of Any(&v77, v75);
            type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
            if (swift_dynamicCast()) {
              uint64_t v3 = v76;
            }
            else {
              uint64_t v3 = 0;
            }
          }
          else
          {
            uint64_t v69 = v54;
            swift_endAccess();
            ArchiveReader.subscript.getter(v47);
            uint64_t v59 = v58;
            unint64_t v61 = v60;
            closure #1 in closure #1 in Shader.ResolvedShader.init(from:)((uint64_t)a2, &v77);

            outlined consume of Data._Representation(v59, v61);
            uint64_t v3 = (void *)v77;
            if (!(void)v77)
            {
              __break(1u);
              JUMPOUT(0x245F6725CLL);
            }
            *((void *)&v78 + 1) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
            *(void *)&long long v77 = v3;
            swift_beginAccess();
            id v62 = v3;
            specialized Dictionary.subscript.setter((uint64_t)&v77, v47);
            swift_endAccess();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          a2 = v70;
        }
        goto LABEL_7;
      }
      outlined destroy of Any?((uint64_t)&v77);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_49:
      uint64_t v3 = v39;
      a2 = v70;
LABEL_7:
      unint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      if (v10 >= v11)
      {
        *(void *)(a1 + 24) = 0;
        if (!v3) {
          goto LABEL_4;
        }

        return v3;
      }
    }
  }
  *(void *)(a1 + 24) = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();

  return v3;
}

void *specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(id *a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v7);
  id v11 = a1[1];
  unint64_t v12 = (unint64_t)a1[2];
  if ((unint64_t)v11 < v12)
  {
    uint64_t v67 = (char *)&v59 - v9;
    uint64_t v63 = v10;
    id v73 = 0;
    uint64_t v65 = (void (**)(char *, uint64_t))(v8 + 8);
    id v66 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v62 = MEMORY[0x263F8EE58] + 8;
    uint64_t v64 = a2;
    while (1)
    {
      unint64_t v14 = (unint64_t)a1[3];
      if (v14)
      {
        id v15 = a1[4];
        if (v11 < v15) {
          goto LABEL_14;
        }
        if (v15 < v11) {
          goto LABEL_70;
        }
        a1[3] = 0;
      }
      uint64_t v2 = a1;
      unint64_t v14 = ProtobufDecoder.decodeVarint()();
      if (v3) {
        goto LABEL_71;
      }
      if (v14 < 8) {
        goto LABEL_70;
      }
LABEL_14:
      if (v14 >> 3 != 1)
      {
        if (v14 >> 3 == 2)
        {
          if ((v14 & 7) != 2) {
            goto LABEL_70;
          }
          uint64_t v2 = a1;
          uint64_t v16 = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_71;
          }
          uint64_t v2 = (void *)v16;
          if (v16 < 0)
          {
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
            JUMPOUT(0x245F67BB0);
          }
          uint64_t v17 = a1[1];
          if (v12 < (unint64_t)&v17[v16]) {
            goto LABEL_70;
          }
          a1[1] = &v17[v16];
          if (v16)
          {
            int64_t v18 = v17 - (unsigned char *)objc_msgSend(objc_retainAutorelease(*a1), sel_bytes);
            uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v21 = v20;
            if (__OFADD__(v18, v2)) {
              goto LABEL_77;
            }
            if ((uint64_t)v2 + v18 < v18) {
              goto LABEL_78;
            }
            uint64_t v22 = v19;
            uint64_t v23 = Data._Representation.subscript.getter();
            uint64_t v2 = v24;
            outlined consume of Data._Representation(v22, v21);
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v2 = (void *)0xC000000000000000;
          }
          outlined copy of Data._Representation(v23, (unint64_t)v2);
          ProtobufDecoder.init(_:)(v23, (unint64_t)v2, (objc_class **)&v70);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v72 = a2;
          uint64_t v42 = specialized CodablePlatformFont.init(from:)(&v70);
          uint64_t v43 = (void *)v70;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          outlined consume of Data._Representation(v23, (unint64_t)v2);
          id v73 = v42;
        }
        else
        {
          switch(v14 & 7)
          {
            case 0uLL:
              uint64_t v2 = a1;
              ProtobufDecoder.decodeVarint()();
              if (v3) {
                goto LABEL_71;
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v13 = (unint64_t)a1[1] + 8;
              if (v12 >= v13) {
                goto LABEL_6;
              }
              goto LABEL_70;
            case 2uLL:
              uint64_t v2 = a1;
              uint64_t v44 = ProtobufDecoder.decodeVarint()();
              if (v3) {
                goto LABEL_71;
              }
              if (v44 < 0) {
                goto LABEL_80;
              }
              unint64_t v13 = (unint64_t)a1[1] + v44;
              if (v12 < v13) {
                goto LABEL_70;
              }
LABEL_6:
              a1[1] = (id)v13;
              break;
            case 5uLL:
              unint64_t v13 = (unint64_t)a1[1] + 4;
              if (v12 < v13) {
                goto LABEL_70;
              }
              goto LABEL_6;
            default:
              goto LABEL_70;
          }
        }
        goto LABEL_7;
      }
      if ((v14 & 7) != 0)
      {
        if ((v14 & 7) != 2) {
          goto LABEL_70;
        }
        uint64_t v2 = a1;
        uint64_t v25 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_71;
        }
        if (v25 < 0) {
          goto LABEL_79;
        }
        unint64_t v26 = (unint64_t)a1[1] + v25;
        if (v12 < v26)
        {
LABEL_70:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_71:
          swift_bridgeObjectRelease();

          return v2;
        }
        a1[3] = (id)8;
        a1[4] = (id)v26;
      }
      uint64_t v2 = a1;
      uint64_t v27 = ProtobufDecoder.decodeVarint()();
      if (v3) {
        goto LABEL_71;
      }
      uint64_t v28 = v27;
      uint64_t v2 = a1[6];
      uint64_t v29 = one-time initialization token for readerKey;
      id v30 = *a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v29 != -1) {
        swift_once();
      }
      uint64_t v31 = __swift_project_value_buffer(v6, (uint64_t)static ArchiveReader.readerKey);
      uint64_t v32 = (uint64_t)v67;
      uint64_t v33 = *v66;
      (*v66)(v67, v31, v6);
      if (v2[2] && (unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v35 & 1) != 0))
      {
        outlined init with copy of Any(v2[7] + 32 * v34, (uint64_t)&v70);
      }
      else
      {
        long long v70 = 0u;
        long long v71 = 0u;
      }
      uint64_t v36 = *v65;
      (*v65)(v67, v6);
      if (!*((void *)&v71 + 1))
      {
        outlined destroy of Any?((uint64_t)&v70);
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_69;
      }
      type metadata accessor for ArchiveReader();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_48;
      }
      uint64_t v61 = *(void *)&v68[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v2 = a1[6];
      uint64_t v37 = one-time initialization token for cacheKey;
      id v60 = *a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37 != -1) {
        swift_once();
      }
      uint64_t v38 = __swift_project_value_buffer(v6, (uint64_t)static ArchiveReader.cacheKey);
      uint64_t v39 = v63;
      v33((char *)v63, v38, v6);
      if (v2[2] && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39), (v41 & 1) != 0))
      {
        outlined init with copy of Any(v2[7] + 32 * v40, (uint64_t)&v70);
      }
      else
      {
        long long v70 = 0u;
        long long v71 = 0u;
      }
      v36((char *)v63, v6);
      if (*((void *)&v71 + 1))
      {
        type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
        if (swift_dynamicCast())
        {
          uint64_t v45 = *(void **)&v68[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (v28 < 0) {
            goto LABEL_81;
          }
          swift_beginAccess();
          uint64_t v2 = (void *)v45[2];
          if (v2[2] && (unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v28), (v47 & 1) != 0))
          {
            outlined init with copy of Any(v2[7] + 32 * v46, (uint64_t)v68);
            outlined init with take of Any(v68, &v70);
            swift_endAccess();
            swift_release();
            swift_release();

            outlined init with take of Any(&v70, v68);
            int v48 = swift_dynamicCast();
            char v49 = v69;
            if (!v48) {
              char v49 = 0;
            }
            id v73 = v49;
          }
          else
          {
            uint64_t v59 = v45 + 2;
            id v60 = v45;
            swift_endAccess();
            ArchiveReader.subscript.getter(v28);
            uint64_t v51 = v50;
            unint64_t v53 = v52;
            outlined copy of Data._Representation(v50, v52);
            ProtobufDecoder.init(_:)(v51, v53, (objc_class **)&v70);
            uint64_t v54 = v64;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v72 = v54;
            uint64_t v55 = specialized CodablePlatformFont.init(from:)(&v70);
            unint64_t v56 = (void *)v70;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            outlined consume of Data._Representation(v51, v53);
            *((void *)&v71 + 1) = &type metadata for CodablePlatformFont;
            *(void *)&long long v70 = v55;
            uint64_t v2 = v59;
            swift_beginAccess();
            char v57 = v55;
            specialized Dictionary.subscript.setter((uint64_t)&v70, v28);
            swift_endAccess();
            swift_release();
            swift_release();
            id v73 = v55;
          }
          goto LABEL_69;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v70);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_69:
      a2 = v64;
LABEL_7:
      id v11 = a1[1];
      unint64_t v12 = (unint64_t)a1[2];
      if ((unint64_t)v11 >= v12)
      {
        a1[3] = 0;
        uint64_t v2 = v73;
        if (v73) {
          goto LABEL_74;
        }
        goto LABEL_4;
      }
    }
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_74:
  swift_bridgeObjectRelease();
  return v2;
}

void specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v79 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v79);
  MEMORY[0x270FA5388](v5);
  unint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  if (v9 >= v10)
  {
    uint64_t v11 = 0;
    *(void *)(a1 + 24) = 0;
    unint64_t v12 = 0xF000000000000000;
LABEL_4:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    outlined consume of Data?(v11, v12);
LABEL_75:
    outlined consume of Data?(v11, v12);
    return;
  }
  id v73 = (char *)&v63 - v7;
  uint64_t v67 = v8;
  uint64_t v64 = a2;
  uint64_t v11 = 0;
  uint64_t v69 = (void (**)(char *, uint64_t))(v6 + 8);
  long long v70 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v66 = MEMORY[0x263F8EE58] + 8;
  unint64_t v12 = 0xF000000000000000;
  do
  {
    while (1)
    {
      unint64_t v14 = *(void *)(a1 + 24);
      if (v14)
      {
        unint64_t v15 = *(void *)(a1 + 32);
        if (v9 < v15) {
          goto LABEL_14;
        }
        if (v15 < v9) {
          goto LABEL_74;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t v14 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_75;
      }
      if (v14 < 8) {
        goto LABEL_74;
      }
LABEL_14:
      if (v14 >> 3 == 1) {
        break;
      }
      if (v14 >> 3 != 2)
      {
        switch(v14 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_75;
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v13 = *(void *)(a1 + 8) + 8;
            if (v10 >= v13) {
              goto LABEL_6;
            }
            goto LABEL_74;
          case 2uLL:
            uint64_t v50 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_75;
            }
            if (v50 < 0) {
              goto LABEL_82;
            }
            unint64_t v13 = *(void *)(a1 + 8) + v50;
            if (v10 < v13) {
              goto LABEL_74;
            }
LABEL_6:
            *(void *)(a1 + 8) = v13;
            break;
          case 5uLL:
            unint64_t v13 = *(void *)(a1 + 8) + 4;
            if (v10 < v13) {
              goto LABEL_74;
            }
            goto LABEL_6;
          default:
            goto LABEL_74;
        }
        goto LABEL_7;
      }
      if ((v14 & 7) != 2) {
        goto LABEL_74;
      }
      uint64_t v16 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_75;
      }
      uint64_t v17 = v16;
      if (v16 < 0)
      {
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        JUMPOUT(0x245F68420);
      }
      uint64_t v18 = *(void *)(a1 + 8);
      if (v10 < v18 + v16) {
        goto LABEL_74;
      }
      *(void *)(a1 + 8) = v18 + v16;
      if (v16)
      {
        uint64_t v19 = v18 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
        uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v22 = v21;
        if (__OFADD__(v19, v17)) {
          goto LABEL_79;
        }
        if (v19 + v17 < v19) {
          goto LABEL_80;
        }
        uint64_t v23 = v20;
        uint64_t v24 = Data._Representation.subscript.getter();
        unint64_t v26 = v25;
        outlined consume of Data._Representation(v23, v22);
        outlined consume of Data?(v11, v12);
        uint64_t v11 = v24;
        unint64_t v12 = v26;
        goto LABEL_7;
      }
      outlined consume of Data?(v11, v12);
      uint64_t v11 = 0;
      unint64_t v9 = *(void *)(a1 + 8);
      unint64_t v10 = *(void *)(a1 + 16);
      unint64_t v12 = 0xC000000000000000;
      if (v9 >= v10)
      {
        uint64_t v11 = 0;
        *(void *)(a1 + 24) = 0;
        goto LABEL_77;
      }
    }
    if ((v14 & 7) != 0)
    {
      if ((v14 & 7) != 2) {
        goto LABEL_74;
      }
      uint64_t v27 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_75;
      }
      if (v27 < 0) {
        goto LABEL_81;
      }
      unint64_t v28 = *(void *)(a1 + 8) + v27;
      if (v10 < v28)
      {
LABEL_74:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_75;
      }
      *(void *)(a1 + 24) = 8;
      *(void *)(a1 + 32) = v28;
    }
    uint64_t v68 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_75;
    }
    uint64_t v29 = v11;
    uint64_t v30 = *(void *)(a1 + 48);
    uint64_t v31 = one-time initialization token for readerKey;
    id v72 = *(id *)a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v31 != -1) {
      swift_once();
    }
    uint64_t v32 = v79;
    uint64_t v33 = __swift_project_value_buffer(v79, (uint64_t)static ArchiveReader.readerKey);
    unint64_t v34 = *v70;
    uint64_t v35 = (uint64_t)v73;
    (*v70)(v73, v33, v32);
    uint64_t v36 = *(void *)(v30 + 16);
    unint64_t v71 = v12;
    if (v36 && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35), (v38 & 1) != 0))
    {
      uint64_t v39 = v29;
      outlined init with copy of Any(*(void *)(v30 + 56) + 32 * v37, (uint64_t)&v77);
    }
    else
    {
      uint64_t v39 = v29;
      long long v77 = 0u;
      long long v78 = 0u;
    }
    unint64_t v40 = *v69;
    (*v69)(v73, v79);
    if (!*((void *)&v78 + 1))
    {
      outlined destroy of Any?((uint64_t)&v77);
LABEL_48:
      swift_bridgeObjectRelease();
LABEL_49:
      swift_bridgeObjectRelease();

      uint64_t v11 = v39;
LABEL_50:
      unint64_t v12 = v71;
      goto LABEL_7;
    }
    type metadata accessor for ArchiveReader();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_48;
    }
    uint64_t v41 = *(void *)&v74[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v43 = *(void *)(a1 + 40);
    uint64_t v42 = *(void *)(a1 + 48);
    uint64_t v44 = one-time initialization token for cacheKey;
    id v72 = *(id *)a1;
    uint64_t v65 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44 != -1) {
      swift_once();
    }
    uint64_t v45 = v79;
    uint64_t v46 = __swift_project_value_buffer(v79, (uint64_t)static ArchiveReader.cacheKey);
    uint64_t v47 = v67;
    v34((char *)v67, v46, v45);
    if (*(void *)(v42 + 16) && (unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v47), (v49 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v42 + 56) + 32 * v48, (uint64_t)&v77);
    }
    else
    {
      long long v77 = 0u;
      long long v78 = 0u;
    }
    v40((char *)v67, v79);
    if (!*((void *)&v78 + 1))
    {
      outlined destroy of Any?((uint64_t)&v77);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
    uint64_t v11 = v39;
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_50;
    }
    uint64_t v51 = v41;
    uint64_t v52 = *(void *)&v74[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    unint64_t v53 = v71;
    uint64_t v54 = v68;
    if (v68 < 0) {
      goto LABEL_83;
    }
    swift_beginAccess();
    uint64_t v55 = *(void *)(v52 + 16);
    if (*(void *)(v55 + 16) && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v54), (v57 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v55 + 56) + 32 * v56, (uint64_t)v74);
      outlined init with take of Any(v74, &v77);
      swift_endAccess();
      swift_release();
      swift_release();
      outlined consume of Data?(v11, v53);
      outlined init with take of Any(&v77, v74);
      int v58 = swift_dynamicCast();
      if (v58) {
        unint64_t v12 = v76;
      }
      else {
        unint64_t v12 = 0xF000000000000000;
      }
      if (v58) {
        uint64_t v11 = v75;
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      swift_endAccess();
      uint64_t v63 = v51;
      ArchiveReader.subscript.getter(v54);
      uint64_t v60 = v59;
      unint64_t v12 = v61;
      outlined consume of Data?(v11, v53);
      *((void *)&v78 + 1) = MEMORY[0x263F06F78];
      *(void *)&long long v77 = v60;
      *((void *)&v77 + 1) = v12;
      swift_beginAccess();
      outlined copy of Data._Representation(v60, v12);
      specialized Dictionary.subscript.setter((uint64_t)&v77, v54);
      swift_endAccess();
      swift_release();
      swift_release();
      uint64_t v11 = v60;
    }
LABEL_7:
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v10 = *(void *)(a1 + 16);
  }
  while (v9 < v10);
  *(void *)(a1 + 24) = 0;
  if (v12 >> 60 == 15) {
    goto LABEL_4;
  }
LABEL_77:
  uint64_t v62 = v64;
  *uint64_t v64 = v11;
  v62[1] = v12;
}

uint64_t ProtobufEncoder.archiveWriter.getter()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 32);
  if (one-time initialization token for writerKey != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchiveWriter.writerKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(void *)(v5 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((void *)&v12 + 1))
  {
    type metadata accessor for ArchiveWriter(0);
    if (swift_dynamicCast()) {
      return v10[1];
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v11);
    return 0;
  }
}

uint64_t ArchiveWriter.addAttachment(data:)(unint64_t a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(&v11, 0, sizeof(v11));
  outlined copy of Data._Representation(a1, a2);
  CC_SHA1_Init(&v11);
  into.state = v11;
  Data.hash(into:)(&into);
  memset(&v11, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&v11, &into.state);
  outlined consume of Data._Representation(a1, a2);
  CC_LONG h4 = v11.h4;
  long long v6 = *(_OWORD *)&v11.h0;
  swift_beginAccess();
  uint64_t v7 = specialized Collection<>.firstIndex(of:)(v6, *((uint64_t *)&v6 + 1), h4, *(void *)(v2 + 32));
  if ((v8 & 1) == 0) {
    return v7;
  }
  *(_OWORD *)&v11.h0 = v6;
  v11.CC_LONG h4 = h4;
  LOBYTE(v11.Nl) = 0;
  outlined copy of Data._Representation(a1, a2);
  uint64_t v9 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&v11.h0, (const char *)v2, a1, a2);
  outlined consume of Data._Representation(a1, a2);
  return v9;
}

uint64_t ProtobufDecoder.archiveReader.getter()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 48);
  if (one-time initialization token for readerKey != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchiveReader.readerKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(void *)(v5 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((void *)&v12 + 1))
  {
    type metadata accessor for ArchiveReader();
    if (swift_dynamicCast()) {
      return v10[1];
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v11);
    return 0;
  }
}

uint64_t ProtobufEncoder.binaryPlistData<A>(for:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  uint64_t v4 = *(void *)(a2 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, a1, a2);
  _finalizeUninitializedArray<A>(_:)();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Data.init<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  type metadata accessor for ContiguousBytes();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  outlined destroy of ContiguousBytes?((uint64_t)v38);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      unint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      unint64_t v7 = (uint64_t *)v4;
    }
    char v8 = specialized Data._Representation.init(_:)(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  char v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = specialized Data._Representation.init(count:)(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x270FA5388](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.init<A>(_:));
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  char v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    outlined consume of Data?(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  outlined consume of Data?((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t ProtobufDecoder.value<A>(fromBinaryPlist:type:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v12 = a3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v12 - v6;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for Array();
  uint64_t v15 = a2;
  swift_getWitnessTable();
  uint64_t v8 = v14;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v8) {
    return swift_release();
  }
  uint64_t v9 = v13;
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v5);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v12, v7, a1);
}

uint64_t one-time initialization function for writerKey(uint64_t a1)
{
  return one-time initialization function for writerKey(a1, static ArchiveWriter.writerKey);
}

uint64_t static ArchiveWriter.writerKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for writerKey, (uint64_t)static ArchiveWriter.writerKey, a1);
}

uint64_t ArchiveWriter.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(void *)(v0 + 136) = 0;
  *(unsigned char *)(v0 + 144) = 1;
  *(void *)(v0 + 152) = MEMORY[0x263F8EE80];
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  if (one-time initialization token for archiving != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for OSSignposter();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v0 + v2, v4, v3);
  return v0;
}

uint64_t ArchiveWriter.init()()
{
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(void *)(v0 + 136) = 0;
  *(unsigned char *)(v0 + 144) = 1;
  *(void *)(v0 + 152) = MEMORY[0x263F8EE80];
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  if (one-time initialization token for archiving != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for OSSignposter();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v0 + v2, v4, v3);
  return v0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ArchiveWriter.finalize()()
{
  uint64_t v2 = v1;
  if ((*(unsigned char *)(v0 + 16) & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v3 + 16);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v0 + 160);
    type metadata accessor for (offset: UInt64, size: UInt64)();
    uint64_t v7 = v6;
    swift_bridgeObjectRetain();
    v5(v3 + 32, v4, v7);
    swift_bridgeObjectRelease();
    if (!v2)
    {
      if (HIDWORD(*(void *)(*(void *)(v0 + 24) + 16)))
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        v8[0] = *(void *)(*(void *)(v0 + 24) + 16);
        v8[1] = -782886287;
        v5((uint64_t)v8, 2, MEMORY[0x263F8E8F8]);
        *(unsigned char *)(v0 + 16) = 1;
      }
    }
  }
}

uint64_t ArchiveWriter.addAttachment(hash:from:)(unint64_t *a1, void (*a2)(const char *), char **a3)
{
  double v98 = a3;
  double v99 = a2;
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v88 = type metadata accessor for OSSignpostError();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  double v91 = (char *)v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  double v92 = (char *)v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  Swift::Int v11 = (char *)v80 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v80 - v13;
  unint64_t v15 = *a1;
  unint64_t v95 = a1[1];
  LODWORD(v93) = *((_DWORD *)a1 + 4);
  LODWORD(v97) = *((unsigned __int8 *)a1 + 20);
  double v100 = v3;
  uint64_t v16 = &v3[OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter];
  static OSSignpostID.exclusive.getter();
  double v90 = v16;
  uint64_t v17 = OSSignposter.logHandle.getter();
  os_signpost_type_t v18 = static os_signpost_type_t.begin.getter();
  char v19 = OS_os_log.signpostsEnabled.getter();
  uint64_t v96 = v6;
  unint64_t v94 = v15;
  if (v19)
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    LODWORD(v15) = v7 + 16;
    v20(v11, v14, v6);
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245728000, v17, v18, v22, "addAttachment", "", v21, 2u);
    BOOL v23 = v21;
    uint64_t v6 = v96;
    MEMORY[0x24C527CC0](v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  else
  {

    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  }
  double v86 = v20;
  unint64_t v85 = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v20(v11, v14, v6);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  double v89 = v11;
  uint64_t v24 = OSSignpostIntervalState.init(id:isOpen:)();
  unsigned int v26 = (void *)(v7 + 8);
  unint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25(v14, v6);
  uint64_t v27 = v100;
  uint64_t v28 = v101;
  if (!*((void *)v100 + 5))
  {
    uint64_t v36 = MEMORY[0x263F8E778];
    unint64_t v34 = 16;
    unint64_t v37 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v37[2] = 16;
    v37[5] = 0;
    v37[4] = 0;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 160))(v37 + 4, 16, v36);
    if (v28) {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
  char v29 = (char)v97;
  if (v97)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    long long v101 = *(_OWORD *)&c.h0;
    long long v84 = *(_OWORD *)&c.h4;
    long long v83 = *(_OWORD *)&c.data[1];
    long long v82 = *(_OWORD *)&c.data[5];
    long long v81 = *(_OWORD *)&c.data[9];
    uint64_t v30 = *(void *)&c.data[13];
    uint64_t v31 = *(void *)&c.data[15];
    swift_beginAccess();
    long long v32 = v84;
    *((_OWORD *)v27 + 3) = v101;
    *((_OWORD *)v27 + 4) = v32;
    long long v33 = v82;
    *((_OWORD *)v27 + 5) = v83;
    *((_OWORD *)v27 + 6) = v33;
    *((_OWORD *)v27 + 7) = v81;
    *((void *)v27 + 16) = v30;
    *((void *)v27 + 17) = v31;
    *((unsigned char *)v27 + 144) = 0;
  }
  unint64_t v34 = *((void *)v27 + 5);
  uint64_t v35 = v98;
  v99(v27);
  if (v28)
  {
    swift_release();
    return v34;
  }
  unint64_t v38 = *((void *)v27 + 5);
  double v99 = (void (*)(const char *))(v38 - v34);
  if (v38 < v34)
  {
    __break(1u);
LABEL_39:
    unsigned int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    *(void *)double v97 = v26;
LABEL_20:
    unint64_t v51 = v26[2];
    unint64_t v50 = v26[3];
    if (v51 >= v50 >> 1)
    {
      unsigned int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v26);
      *(void *)double v97 = v26;
    }
    uint64_t v52 = v99;
    unint64_t v53 = (unint64_t)v99 + 15;
    v26[2] = v51 + 1;
    uint64_t v54 = &v26[2 * v51];
    v54[4] = v84;
    v54[5] = v52;
    swift_endAccess();
    swift_beginAccess();
    uint64_t v55 = *v35;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v35 = v55;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
      *uint64_t v35 = v55;
    }
    unint64_t v34 = v53 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v58 = *((void *)v55 + 2);
    unint64_t v57 = *((void *)v55 + 3);
    int v59 = v95;
    int v60 = (int)v98;
    if (v58 >= v57 >> 1)
    {
      uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v55);
      int v60 = (int)v98;
      int v59 = v95;
      uint64_t v55 = v79;
      *uint64_t v35 = v79;
    }
    *((void *)v55 + 2) = v58 + 1;
    unint64_t v61 = &v55[20 * v58];
    *((_DWORD *)v61 + 8) = v94;
    *((_DWORD *)v61 + 9) = v60;
    *((_DWORD *)v61 + 10) = v59;
    *((_DWORD *)v61 + 11) = v25;
    *((_DWORD *)v61 + 12) = v15;
    swift_endAccess();
    if ((void (*)(const char *))v34 == v99) {
      goto LABEL_31;
    }
    if (v34 < (unint64_t)v99) {
      __break(1u);
    }
    uint64_t v62 = specialized Array.init(repeating:count:)(0, v34 - (void)v99);
    uint64_t v63 = v101;
    (*(void (**)(uint64_t, void, void))(*(void *)v27 + 160))(v62 + 32, *(void *)(v62 + 16), MEMORY[0x263F8E778]);
    if (!v63)
    {
      *(void *)&long long v101 = 0;
      swift_bridgeObjectRelease();
LABEL_31:
      unint64_t v34 = *(void *)(*(void *)v97 + 16) - 1;
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v64);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v65);
      uint64_t v66 = OSSignposter.logHandle.getter();
      uint64_t v67 = v92;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v68 = static os_signpost_type_t.end.getter();
      char v69 = OS_os_log.signpostsEnabled.getter();
      long long v70 = v91;
      if (v69)
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v71 = v87;
        uint64_t v72 = v88;
        if ((*(unsigned int (**)(char *, uint64_t))(v87 + 88))(v70, v88) == *MEMORY[0x263F90238])
        {
          char v73 = 0;
          double v100 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
          double v100 = "index=%{name=index}ld size=%{xcode:size-in-bytes, name=size}llu";
          char v73 = 2;
        }
        uint64_t v74 = v89;
        uint64_t v75 = v96;
        v86(v89, v67, v96);
        uint64_t v76 = swift_slowAlloc();
        *(unsigned char *)uint64_t v76 = 0;
        *(unsigned char *)(v76 + 1) = v73;
        *(_WORD *)(v76 + 2) = 2048;
        *(void *)md = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v76 + 12) = 2048;
        *(void *)md = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_signpost_id_t v77 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v66, v68, v77, "addAttachment", v100, (uint8_t *)v76, 0x16u);
        MEMORY[0x24C527CC0](v76, -1, -1);

        long long v78 = (void (*)(char *, uint64_t))v80[0];
        ((void (*)(char *, uint64_t))v80[0])(v67, v75);
        swift_release();
        v78(v74, v75);
      }
      else
      {

        ((void (*)(char *, uint64_t))v80[0])(v67, v96);
        swift_release();
      }
      return v34;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    return v34;
  }
  v80[1] = v24;
  v80[0] = v25;
  *(void *)&long long v84 = v34;
  if ((v29 & 1) == 0)
  {
    unint64_t v41 = v94;
    unint64_t v43 = v95;
    long long v40 = (char **)HIDWORD(v94);
    unint64_t v42 = HIDWORD(v95);
    int v44 = (int)v93;
LABEL_17:
    uint64_t v35 = (char **)(v27 + 32);
    swift_beginAccess();
    uint64_t v45 = *((void *)v27 + 4);
    unint64_t v94 = v41;
    double v98 = v40;
    unint64_t v95 = v43;
    uint64_t v46 = specialized Collection<>.firstIndex(of:)(v41 | ((void)v40 << 32), v43 | (v42 << 32), v44, v45);
    if ((v47 & 1) == 0)
    {
      unint64_t v34 = v46;
      uint64_t v48 = v84;
      (*(void (**)(void))(*(void *)v27 + 168))(v84);
      swift_release();
      *((void *)v27 + 5) = v48;
      return v34;
    }
    LODWORD(v15) = v44;
    LODWORD(v25) = v42;
    double v93 = v26;
    double v97 = (char *)(v27 + 24);
    swift_beginAccess();
    unsigned int v26 = (void *)*((void *)v27 + 3);
    char v49 = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v27 + 3) = v26;
    *(void *)&long long v101 = 0;
    if (v49) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
  uint64_t result = swift_beginAccess();
  if ((v27[144] & 1) == 0)
  {
    *(void *)md = 0;
    uint64_t v103 = 0;
    int v104 = 0;
    CC_SHA1_Final(md, (CC_SHA1_CTX *)(v27 + 48));
    unint64_t v41 = *(unsigned int *)md;
    long long v40 = (char **)*(unsigned int *)&md[4];
    unint64_t v43 = v103;
    unint64_t v42 = HIDWORD(v103);
    int v44 = v104;
    swift_endAccess();
    *((_OWORD *)v27 + 7) = 0u;
    *((_OWORD *)v27 + 8) = 0u;
    *((_OWORD *)v27 + 5) = 0u;
    *((_OWORD *)v27 + 6) = 0u;
    *((_OWORD *)v27 + 3) = 0u;
    *((_OWORD *)v27 + 4) = 0u;
    *((unsigned char *)v27 + 144) = 1;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

void ArchiveWriter.append(_:)()
{
}

void ArchiveWriter.append<A>(_:)()
{
}

void ArchiveWriter.rewind(to:)()
{
}

uint64_t ArchiveWriter.didAppendBytes(ptr:count:)(uint64_t result, uint64_t a2)
{
  if (a2 >= 1)
  {
    uint64_t v4 = *(void *)(v2 + 40);
    BOOL v5 = __CFADD__(v4, a2);
    uint64_t v6 = v4 + a2;
    if (v5)
    {
      __break(1u);
    }
    else
    {
      uint64_t v7 = (const void *)result;
      *(void *)(v2 + 40) = v6;
      swift_beginAccess();
      if (*(unsigned char *)(v2 + 144)) {
        return swift_endAccess();
      }
      if (v7)
      {
        if (!HIDWORD(a2))
        {
          CC_SHA1_Update((CC_SHA1_CTX *)(v2 + 48), v7, a2);
          return swift_endAccess();
        }
LABEL_11:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t ArchiveWriter.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  uint64_t v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ArchiveWriter.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  uint64_t v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t FileArchiveWriter.__allocating_init(file:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file) = a1;
  *(unsigned char *)(v2 + 16) = 0;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(void *)(v2 + 136) = 0;
  uint64_t v4 = MEMORY[0x263F8EE80];
  *(unsigned char *)(v2 + 144) = 1;
  *(void *)(v2 + 152) = v4;
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  uint64_t v6 = one-time initialization token for archiving;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = v2 + v5;
  uint64_t v9 = type metadata accessor for OSSignposter();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, v10, v9);

  return v2;
}

uint64_t FileArchiveWriter.init(file:)(void *a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file) = a1;
  *(unsigned char *)(v1 + 16) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(void *)(v1 + 136) = 0;
  uint64_t v3 = MEMORY[0x263F8EE80];
  *(unsigned char *)(v1 + 144) = 1;
  *(void *)(v1 + 152) = v3;
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  uint64_t v5 = one-time initialization token for archiving;
  id v6 = a1;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v1 + v4, v8, v7);

  return v1;
}

uint64_t FileArchiveWriter.__allocating_init(url:)(uint64_t a1)
{
  uint64_t v2 = v1;
  URL.path.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v4 = open(_:_:_:)();
  swift_release();
  if ((v4 & 0x80000000) != 0)
  {
    lazy protocol witness table accessor for type Error and conformance Error();
    swift_allocError();
    *(void *)uint64_t v13 = 0;
    *(unsigned char *)(v13 + 8) = 1;
    swift_willThrow();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  }
  else
  {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08840]), sel_initWithFileDescriptor_closeOnDealloc_, v4, 1);
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file) = v5;
    *(unsigned char *)(v2 + 16) = 0;
    uint64_t v6 = MEMORY[0x263F8EE78];
    *(void *)(v2 + 24) = MEMORY[0x263F8EE78];
    *(void *)(v2 + 32) = v6;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(void *)(v2 + 136) = 0;
    *(unsigned char *)(v2 + 144) = 1;
    *(void *)(v2 + 152) = MEMORY[0x263F8EE80];
    uint64_t v7 = v2 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
    uint64_t v8 = one-time initialization token for archiving;
    id v9 = v5;
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for OSSignposter();
    uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Signpost.archiving);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v7, v11, v10);

    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FileArchiveWriter.finalize()()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  if ((*(unsigned char *)(v0 + 16) & 1) == 0)
  {
    ArchiveWriter.finalize()();
    if (!v1)
    {
      uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file);
      v6[0] = 0;
      if (objc_msgSend(v2, sel_closeAndReturnError_, v6))
      {
        id v3 = v6[0];
      }
      else
      {
        id v4 = v6[0];
        id v5 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

uint64_t FileArchiveWriter.append(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((result ^ (unint64_t)(result << 32)) >> 32) {
        goto LABEL_9;
      }
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      if (v4 != v5)
      {
        if (a2 >> 62 == 2)
        {
          swift_retain();
          swift_retain();
          swift_retain();
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v4, v5);
          swift_release();
          uint64_t result = swift_release();
        }
        else
        {
LABEL_9:
          if (result >> 32 < (int)result) {
            __break(1u);
          }
          swift_retain();
          outlined copy of Data._Representation(v3, a2);
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v3, v3 >> 32);
          uint64_t result = outlined consume of Data._Representation(v3, a2);
        }
      }
      break;
    case 3uLL:
      return result;
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
        uint64_t v6 = result;
        __int16 v7 = a2;
        char v8 = BYTE2(a2);
        char v9 = BYTE3(a2);
        char v10 = BYTE4(a2);
        char v11 = BYTE5(a2);
        swift_retain();
        FileArchiveWriter.appendBytes(_:size:)((char *)&v6, BYTE6(a2));
        uint64_t result = swift_release();
      }
      break;
  }
  return result;
}

id FileArchiveWriter.appendBytes(_:size:)(char *a1, uint64_t a2)
{
  id result = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file), sel_fileDescriptor);
  if (a2 >= 1)
  {
    int v6 = (int)result;
    int64_t v7 = a2;
    char v8 = a1;
    do
    {
      while (1)
      {
        ssize_t v9 = write(v6, v8, v7);
        if ((v9 & 0x8000000000000000) == 0) {
          break;
        }
        if (MEMORY[0x24C521F80]() != 35)
        {
          uint64_t v10 = (int)MEMORY[0x24C521F80]();
          lazy protocol witness table accessor for type Error and conformance Error();
          swift_allocError();
          *(void *)uint64_t v11 = v10;
          *(unsigned char *)(v11 + 8) = 0;
          return (id)swift_willThrow();
        }
      }
      v7 -= v9;
      v8 += v9;
    }
    while (v7 > 0);
    uint64_t v12 = *(void *)(v2 + 40);
    BOOL v13 = __CFADD__(v12, a2);
    uint64_t v14 = v12 + a2;
    if (v13)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v2 + 40) = v14;
      swift_beginAccess();
      if (*(unsigned char *)(v2 + 144) == 1) {
        return (id)swift_endAccess();
      }
      if (!HIDWORD(a2))
      {
        CC_SHA1_Update((CC_SHA1_CTX *)(v2 + 48), a1, a2);
        return (id)swift_endAccess();
      }
    }
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void FileArchiveWriter.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = (char *)UnsafeBufferPointer.baseAddress.getter();
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(a3 - 8) + 72);
      if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
      {
        FileArchiveWriter.appendBytes(_:size:)(v5, a2 * v6);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FileArchiveWriter.rewind(to:)(Swift::UInt64 to)
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI17FileArchiveWriter_file);
  v6[0] = 0;
  if (objc_msgSend(v3, sel_truncateAtOffset_error_, to, v6))
  {
    id v4 = v6[0];
  }
  else
  {
    id v5 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void FileArchiveWriter.__allocating_init()()
{
}

void FileArchiveWriter.init()()
{
}

void FileArchiveWriter.__ivar_destroyer()
{
}

uint64_t FileArchiveWriter.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  uint64_t v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t FileArchiveWriter.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  uint64_t v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t DataArchiveWriter.finalizeData()()
{
  ArchiveWriter.finalize()();
  if (!v1)
  {
    uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data;
    swift_beginAccess();
    uint64_t v0 = *(void *)v2;
    outlined copy of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  }
  return v0;
}

uint64_t DataArchiveWriter.append(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  v12[3] = *MEMORY[0x263EF8340];
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, v2);
      if (v3) {
        goto LABEL_14;
      }
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      a2 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v10, v9, a2, v5);
      if (v4) {
        goto LABEL_13;
      }
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v12, 0, 14);
      swift_retain();
      char v8 = (char *)v12;
      goto LABEL_6;
    default:
      v12[0] = a1;
      LOWORD(v12[1]) = a2;
      BYTE2(v12[1]) = BYTE2(a2);
      BYTE3(v12[1]) = BYTE3(a2);
      BYTE4(v12[1]) = BYTE4(a2);
      BYTE5(v12[1]) = BYTE5(a2);
      swift_retain();
      char v8 = (char *)v12 + BYTE6(a2);
LABEL_6:
      closure #1 in DataArchiveWriter.append(_:)((uint64_t)v12, (uint64_t)v8, v2);
      if (v3)
      {
        swift_release();
        __break(1u);
LABEL_13:
        swift_release();
        swift_release();
        __break(1u);
LABEL_14:
        outlined consume of Data._Representation(a1, a2);
        __break(1u);
        JUMPOUT(0x245F6C3FCLL);
      }
      uint64_t result = swift_release();
      break;
  }
  return result;
}

uint64_t closure #1 in DataArchiveWriter.append(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = (const void *)result;
    unint64_t v4 = a2 - result;
    if (a2 - result >= 1)
    {
      uint64_t v6 = *(void *)(a3 + 40);
      BOOL v7 = __CFADD__(v6, v4);
      uint64_t v8 = v6 + v4;
      if (v7)
      {
        __break(1u);
      }
      else
      {
        *(void *)(a3 + 40) = v8;
        swift_beginAccess();
        if (*(unsigned char *)(a3 + 144)) {
          return swift_endAccess();
        }
        if (!HIDWORD(v4))
        {
          CC_SHA1_Update((CC_SHA1_CTX *)(a3 + 48), v3, v4);
          return swift_endAccess();
        }
      }
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t DataArchiveWriter.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  Data.append<A>(_:)();
  swift_endAccess();
  uint64_t result = UnsafeBufferPointer.baseAddress.getter();
  uint64_t v6 = *(void *)(*(void *)(a3 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63) {
    return ArchiveWriter.didAppendBytes(ptr:count:)(result, a2 * v6);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataArchiveWriter.rewind(to:)(Swift::UInt64 to)
{
  if ((to & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x245F6C6C4);
  }
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data);
  swift_beginAccess();
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  int64_t v6 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      BOOL v7 = __OFSUB__(HIDWORD(v4), v4);
      int v8 = HIDWORD(v4) - v4;
      if (v7) {
        goto LABEL_11;
      }
      int64_t v6 = v8;
LABEL_7:
      if (v6 < (uint64_t)to) {
        goto LABEL_10;
      }
      swift_beginAccess();
      Data._Representation.replaceSubrange(_:with:count:)();
      swift_endAccess();
      return;
    case 2uLL:
      uint64_t v11 = v4 + 16;
      uint64_t v9 = *(void *)(v4 + 16);
      uint64_t v10 = *(void *)(v11 + 8);
      int64_t v6 = v10 - v9;
      if (!__OFSUB__(v10, v9)) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_7;
    default:
      int64_t v6 = BYTE6(v5);
      goto LABEL_7;
  }
}

uint64_t DataArchiveWriter.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data) = xmmword_2461B9DE0;
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(void *)(v0 + 136) = 0;
  *(unsigned char *)(v0 + 144) = 1;
  *(void *)(v0 + 152) = MEMORY[0x263F8EE80];
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  if (one-time initialization token for archiving != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for OSSignposter();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v0 + v2, v4, v3);
  return v0;
}

uint64_t DataArchiveWriter.init()()
{
  *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data) = xmmword_2461B9DE0;
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(unsigned char *)(v0 + 144) = 1;
  *(void *)(v0 + 152) = MEMORY[0x263F8EE80];
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  if (one-time initialization token for archiving != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for OSSignposter();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Signpost.archiving);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v0 + v2, v4, v3);
  return v0;
}

uint64_t DataArchiveWriter.__ivar_destroyer()
{
  return outlined consume of Data._Representation(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data + 8));
}

uint64_t DataArchiveWriter.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  uint64_t v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data._Representation(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data + 8));
  return v0;
}

uint64_t DataArchiveWriter.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter;
  uint64_t v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data._Representation(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17DataArchiveWriter_data + 8));

  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for readerKey(uint64_t a1)
{
  return one-time initialization function for writerKey(a1, static ArchiveReader.readerKey);
}

uint64_t one-time initialization function for writerKey(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for CodingUserInfoKey?, MEMORY[0x263F8DEA0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v6, a2);
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  }
  __break(1u);
  return result;
}

uint64_t static ArchiveReader.readerKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for readerKey, (uint64_t)static ArchiveReader.readerKey, a1);
}

uint64_t one-time initialization function for cacheKey(uint64_t a1)
{
  return one-time initialization function for writerKey(a1, static ArchiveReader.cacheKey);
}

uint64_t static ArchiveReader.cacheKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for cacheKey, (uint64_t)static ArchiveReader.cacheKey, a1);
}

uint64_t one-time initialization function for namedImagesKey(uint64_t a1)
{
  return one-time initialization function for writerKey(a1, static ArchiveReader.namedImagesKey);
}

uint64_t static ArchiveReader.namedImagesKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for namedImagesKey, (uint64_t)static ArchiveReader.namedImagesKey, a1);
}

uint64_t ArchiveReader.init(buffer:)(unint64_t a1, uint64_t a2)
{
  if (a2 < 1 || (a2 & 7) != 0) {
    goto LABEL_5;
  }
  if (a1)
  {
    unint64_t v3 = a1 + a2;
    uint64_t v4 = (_DWORD *)(a1 + a2 - 4);
    if ((unint64_t)v4 < a1)
    {
LABEL_5:
      lazy protocol witness table accessor for type Error and conformance Error();
      swift_allocError();
      uint64_t v6 = 1;
LABEL_6:
      *(void *)uint64_t v5 = v6;
      *(unsigned char *)(v5 + 8) = 1;
      swift_willThrow();
      type metadata accessor for ArchiveReader();
      swift_deallocPartialClassInstance();
      return (uint64_t)v2;
    }
    if (*v4 != -782886287)
    {
      lazy protocol witness table accessor for type Error and conformance Error();
      swift_allocError();
      uint64_t v6 = 2;
      goto LABEL_6;
    }
    uint64_t v8 = *(unsigned int *)(v3 - 8);
    uint64_t v9 = -16 * v8;
    uint64_t v10 = (uint64_t *)(v3 - 8 - 16 * v8);
    uint64_t v11 = (char *)v10 - a1;
    if ((unint64_t)v10 < a1)
    {
      lazy protocol witness table accessor for type Error and conformance Error();
      swift_allocError();
      uint64_t v6 = 3;
      goto LABEL_6;
    }
    if ((uint64_t)((uint64_t)v10 - a1) >= 0)
    {
      v2[2] = a1;
      v2[3] = a2;
      v2[4] = v10;
      v2[5] = v8;
      if (v8)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = v10[1];
        BOOL v14 = __CFADD__(v13, v12);
        unint64_t v15 = v13 + v12;
        if (v14 || (unint64_t)v11 < v15)
        {
LABEL_19:
          lazy protocol witness table accessor for type Error and conformance Error();
          swift_allocError();
          *(void *)uint64_t v19 = 4;
          *(unsigned char *)(v19 + 8) = 1;
          swift_willThrow();
          swift_release();
        }
        else
        {
          while (v9 != -16)
          {
            uint64_t v17 = *(void *)(v3 + v9 + 8);
            uint64_t v16 = *(void *)(v3 + v9 + 16);
            BOOL v14 = __CFADD__(v16, v17);
            unint64_t v18 = v16 + v17;
            if (!v14)
            {
              v9 += 16;
              if ((unint64_t)v11 >= v18) {
                continue;
              }
            }
            goto LABEL_19;
          }
        }
      }
      return (uint64_t)v2;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ArchiveReader.startIndex.getter()
{
  return 0;
}

uint64_t ArchiveReader.endIndex.getter()
{
  return *(void *)(v0 + 40);
}

void ArchiveReader.subscript.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Data.Deallocator();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t (**)())((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(v1 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = (uint64_t *)(*(void *)(v1 + 32) + 16 * a1);
  uint64_t v9 = *v8;
  if (*v8 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v10 = v8[1];
  swift_retain();
  if (v10 < 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v11 = v7 + v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v1;
  *uint64_t v6 = OptionalAnchorBox.__ivar_destroyer;
  v6[1] = (uint64_t (*)())v12;
  (*(void (**)(uint64_t (**)(), void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F06F10], v3);
  Data.Deallocator._deallocator.getter();
  if (v10)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    specialized Data._Representation.init(_:count:)(v13, v10);
  }
  else
  {
    BOOL v14 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
    v14(v11, 0);
    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t (**)(), uint64_t))(v4 + 8))(v6, v3);
}

uint64_t closure #1 in ArchiveReader.subscript.getter()
{
  return swift_release();
}

uint64_t ArchiveReader.deinit()
{
  return v0;
}

uint64_t ArchiveReader.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance ArchiveReader@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < *(void *)(*(void *)v2 + 40))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ArchiveReader(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0 && v2 < *(void *)(*(void *)v1 + 40))
  {
    _DWORD *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance ArchiveReader(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 40);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ArchiveReader(void *a1, uint64_t *a2))(uint64_t a1)
{
  ArchiveReader.subscript.getter(*a2);
  a1[2] = v3;
  a1[3] = v4;
  *a1 = v3;
  a1[1] = v4;
  return protocol witness for Collection.subscript.read in conformance ArchiveReader;
}

uint64_t protocol witness for Collection.subscript.read in conformance ArchiveReader(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for Collection.subscript.getter in conformance ArchiveReader@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v6 = *a1;
  if (*a1 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = a1[1];
  if (v5 >= v7)
  {
    *a2 = v6;
    a2[1] = v7;
    a2[2] = result;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance ArchiveReader(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ArchiveReader@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0 && *(void *)(*(void *)v3 + 40) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance ArchiveReader@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance ArchiveReader(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)v2 + 40);
  if (v4 >= *a2)
  {
    uint64_t v5 = *result;
    if (((v3 | *result) & 0x8000000000000000) == 0 && v4 >= v5) {
      return (uint64_t *)(v3 - v5);
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance ArchiveReader@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || v3 >= *(void *)(*(void *)v2 + 40)) {
    __break(1u);
  }
  else {
    *a2 = v3 + 1;
  }
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance ArchiveReader(uint64_t *result)
{
  uint64_t v2 = *result;
  if (*result < 0 || v2 >= *(void *)(*(void *)v1 + 40)) {
    __break(1u);
  }
  else {
    _DWORD *result = v2 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ArchiveReader(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t *protocol witness for Sequence._copyToContiguousArray() in conformance ArchiveReader()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ArchiveReader(char *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ArchiveReader()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

void *FileArchiveReader.UnmapBuffer.__deallocating_deinit()
{
  uint64_t result = *(void **)(v0 + 16);
  if (result)
  {
    munmap(result, *(void *)(v0 + 24));
    return (void *)swift_deallocClassInstance();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id FileArchiveReader.__allocating_init(file:)(void *a1)
{
  return FileArchiveReader.init(file:)(a1);
}

id FileArchiveReader.init(file:)(void *a1)
{
  uint64_t v3 = v1;
  v19[1] = *(id *)MEMORY[0x263EF8340];
  swift_retain();
  size_t v5 = (size_t)objc_msgSend(a1, sel_seekToEndOfFile);
  if ((v5 & 0x8000000000000000) != 0) {
    __break(1u);
  }
  id v6 = (id)v5;
  if (v5 >= 0x8000) {
    uint64_t v7 = (uint64_t)mmap(0, v5, 1, 2, (int)objc_msgSend(a1, sel_fileDescriptor), 0);
  }
  else {
    uint64_t v7 = MAP_FAILED.getter();
  }
  id v8 = (id)v7;
  id result = (id)MAP_FAILED.getter();
  if (v8)
  {
    if (!result || v8 != result)
    {
      *(void *)(v3 + 48) = 0;
      type metadata accessor for FileArchiveReader.UnmapBuffer();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v8;
      *(void *)(v10 + 24) = v6;
      *(void *)(v3 + 56) = v10;
LABEL_9:
      swift_release();
      uint64_t v3 = ArchiveReader.init(buffer:)((unint64_t)v8, (uint64_t)v6);

      return (id)v3;
    }
  }
  else if (result)
  {
    *(void *)(v3 + 48) = 0;
    __break(1u);
    goto LABEL_24;
  }
  v19[0] = 0;
  if (!objc_msgSend(a1, sel_seekToOffset_error_, 0, v19))
  {
    id v14 = v19[0];
    swift_release();
    _convertNSErrorToError(_:)();

LABEL_15:
    swift_willThrow();

    goto LABEL_16;
  }
  id v11 = v19[0];
  uint64_t v12 = NSFileHandle.readToEnd()();
  if (v2)
  {

    swift_release();
LABEL_16:
    swift_deallocPartialClassInstance();
    return (id)v3;
  }
  unint64_t v15 = v13;
  if (v13 >> 60 == 15)
  {
    swift_release();
    lazy protocol witness table accessor for type Error and conformance Error();
    swift_allocError();
    *(void *)uint64_t v16 = 5;
    *(unsigned char *)(v16 + 8) = 1;
    goto LABEL_15;
  }
  uint64_t v17 = v12;
  v18.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(NSData *)(v3 + 48) = v18;
  id v8 = [(objc_class *)v18.super.isa bytes];
  id result = *(id *)(v3 + 48);
  if (result)
  {
    id v6 = objc_msgSend(result, sel_length);
    outlined consume of Data?(v17, v15);
    *(void *)(v3 + 56) = 0;
    goto LABEL_9;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t FileArchiveReader.__allocating_init(url:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSFileHandle);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v8 = (uint64_t)v6;
  uint64_t v9 = v7;
  id v10 = @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(v8);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  else
  {
    id v11 = v10;
    swift_allocObject();
    uint64_t v9 = (uint64_t)FileArchiveReader.init(file:)(v11);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return v9;
}

id @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(uint64_t a1)
{
  uint64_t v13 = (NSURL *)*MEMORY[0x263EF8340];
  URL._bridgeToObjectiveC()(v13);
  uint64_t v3 = v2;
  id v12 = 0;
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, &v12);

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t FileArchiveReader.__ivar_destroyer()
{
  return swift_release();
}

uint64_t FileArchiveReader.deinit()
{
  swift_release();
  return v0;
}

uint64_t FileArchiveReader.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t DataArchiveReader.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  swift_retain();
  v5.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(NSData *)(v4 + 48) = v5;
  id v6 = [(objc_class *)v5.super.isa bytes];
  id v7 = objc_msgSend(*(id *)(v4 + 48), sel_length);
  swift_release();
  uint64_t v8 = ArchiveReader.init(buffer:)((unint64_t)v6, (uint64_t)v7);
  outlined consume of Data._Representation(a1, a2);
  return v8;
}

uint64_t DataArchiveReader.init(data:)(uint64_t a1, unint64_t a2)
{
  swift_retain();
  v5.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(NSData *)(v2 + 48) = v5;
  id v6 = [(objc_class *)v5.super.isa bytes];
  id v7 = objc_msgSend(*(id *)(v2 + 48), sel_length);
  swift_release();
  uint64_t v8 = ArchiveReader.init(buffer:)((unint64_t)v6, (uint64_t)v7);
  outlined consume of Data._Representation(a1, a2);
  return v8;
}

void DataArchiveReader.__ivar_destroyer()
{
}

uint64_t DataArchiveReader.deinit()
{
  return v0;
}

uint64_t DataArchiveReader.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void ArchiveWriter.withDataConsumer(do:)(void (*a1)(void))
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t info = v1;
  id v10 = 0;
  cbks.putBytes = (CGDataConsumerPutBytesCallback)@objc closure #1 in closure #1 in ArchiveWriter.withDataConsumer(do:);
  cbks.releaseConsumer = 0;
  swift_retain();
  CGDataConsumerRef v4 = CGDataConsumerCreate(&info, &cbks);
  if (!v4) {
    __break(1u);
  }
  CGDataConsumerRef v5 = v4;
  a1();

  if (v2)
  {
    swift_release();
  }
  else
  {
    id v6 = v10;
    if (v10)
    {
      id v7 = v10;
      swift_willThrow();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t closure #1 in closure #1 in ArchiveWriter.withDataConsumer(do:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    CGDataConsumerRef v5 = *(void (**)(uint64_t, uint64_t, void))(**(void **)result + 160);
    swift_retain();
    v5(a2, a3, MEMORY[0x263F8E778]);
    swift_release();
    return a3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = v8 + v12;
  if (v8) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  closure #1 in DataArchiveWriter.append(_:)(v8, v14, a4);
  return swift_release();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  CGDataConsumerRef v5 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    v5 += a1 - result;
  }
  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!v5)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (result >= v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = result;
  }
  FileArchiveWriter.appendBytes(_:size:)(v5, v8);
  return swift_release();
}

char *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  CGDataConsumerRef v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_2461B9DE0;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *CGDataConsumerRef v5 = v4;
        goto LABEL_19;
      }
      *CGDataConsumerRef v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        uint64_t *v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        uint64_t *v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      uint64_t *v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data._Representation.init(_:count:)(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = __DataStorage._length.getter();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = specialized Data.InlineData.init(_:)(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized ArchiveWriter.addAttachment(hash:from:)(unint64_t *a1, const char *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v99 = a4;
  unint64_t v98 = a3;
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v88 = type metadata accessor for OSSignpostError();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  double v91 = (char *)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v92 = (char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v80 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v80 - v14;
  unint64_t v16 = *a1;
  unint64_t v95 = a1[1];
  LODWORD(v93) = *((_DWORD *)a1 + 4);
  LODWORD(v97) = *((unsigned __int8 *)a1 + 20);
  double v100 = a2;
  uint64_t v17 = &a2[OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter];
  static OSSignpostID.exclusive.getter();
  double v90 = v17;
  NSData v18 = OSSignposter.logHandle.getter();
  os_signpost_type_t v19 = static os_signpost_type_t.begin.getter();
  char v20 = OS_os_log.signpostsEnabled.getter();
  unint64_t v96 = v7;
  unint64_t v94 = v16;
  if (v20)
  {
    uint64_t v21 = *(void (**)(char *, char *, unint64_t))(v8 + 16);
    LODWORD(v16) = v8 + 16;
    v21(v12, v15, v7);
    os_signpost_id_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_signpost_id_t v22 = 0;
    os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245728000, v18, v19, v23, "addAttachment", "", v22, 2u);
    uint64_t v24 = v22;
    unint64_t v7 = v96;
    MEMORY[0x24C527CC0](v24, -1, -1);

    (*(void (**)(char *, unint64_t))(v8 + 8))(v12, v7);
  }
  else
  {

    uint64_t v21 = *(void (**)(char *, char *, unint64_t))(v8 + 16);
  }
  double v86 = v21;
  unint64_t v85 = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v21(v12, v15, v7);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  double v89 = v12;
  uint64_t v25 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v27 = (void *)(v8 + 8);
  unsigned int v26 = *(void (**)(char *, unint64_t))(v8 + 8);
  v26(v15, v7);
  uint64_t v28 = v100;
  uint64_t v29 = v101;
  if (!*((void *)v100 + 5))
  {
    uint64_t v35 = v26;
    uint64_t v36 = MEMORY[0x263F8E778];
    unint64_t v7 = 16;
    unint64_t v37 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v37[2] = 16;
    v37[5] = 0;
    v37[4] = 0;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 160))(v37 + 4, 16, v36);
    if (v29) {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    unsigned int v26 = v35;
  }
  char v30 = (char)v97;
  if (v97)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    long long v101 = *(_OWORD *)&c.h0;
    long long v84 = *(_OWORD *)&c.h4;
    long long v83 = *(_OWORD *)&c.data[1];
    long long v82 = *(_OWORD *)&c.data[5];
    long long v81 = *(_OWORD *)&c.data[9];
    uint64_t v31 = *(void *)&c.data[13];
    unint64_t v7 = *(void *)&c.data[15];
    swift_beginAccess();
    long long v32 = v84;
    *((_OWORD *)v28 + 3) = v101;
    *((_OWORD *)v28 + 4) = v32;
    long long v33 = v82;
    *((_OWORD *)v28 + 5) = v83;
    *((_OWORD *)v28 + 6) = v33;
    *((_OWORD *)v28 + 7) = v81;
    *((void *)v28 + 16) = v31;
    *((void *)v28 + 17) = v7;
    *((unsigned char *)v28 + 144) = 0;
  }
  unint64_t v34 = (char **)*((void *)v28 + 5);
  (*(void (**)(unint64_t, unint64_t))(*(void *)v28 + 152))(v98, v99);
  if (v29)
  {
    swift_release();
    return v7;
  }
  unint64_t v38 = *((void *)v28 + 5);
  unint64_t v99 = v38 - (void)v34;
  if (v38 < (unint64_t)v34)
  {
    __break(1u);
LABEL_39:
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
    *(void *)double v97 = v27;
LABEL_20:
    unint64_t v51 = v27[2];
    unint64_t v50 = v27[3];
    if (v51 >= v50 >> 1)
    {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v27);
      *(void *)double v97 = v27;
    }
    unint64_t v52 = v99;
    unint64_t v53 = v99 + 15;
    v27[2] = v51 + 1;
    uint64_t v54 = &v27[2 * v51];
    v54[4] = v84;
    v54[5] = v52;
    swift_endAccess();
    swift_beginAccess();
    uint64_t v55 = *v34;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v34 = v55;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
      *unint64_t v34 = v55;
    }
    unint64_t v7 = v53 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v58 = *((void *)v55 + 2);
    unint64_t v57 = *((void *)v55 + 3);
    int v59 = v95;
    int v60 = v98;
    if (v58 >= v57 >> 1)
    {
      uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v55);
      int v60 = v98;
      int v59 = v95;
      uint64_t v55 = v79;
      *unint64_t v34 = v79;
    }
    *((void *)v55 + 2) = v58 + 1;
    unint64_t v61 = &v55[20 * v58];
    *((_DWORD *)v61 + 8) = v94;
    *((_DWORD *)v61 + 9) = v60;
    *((_DWORD *)v61 + 10) = v59;
    *((_DWORD *)v61 + 11) = v26;
    *((_DWORD *)v61 + 12) = v16;
    swift_endAccess();
    if (v7 == v99) {
      goto LABEL_31;
    }
    if (v7 < v99) {
      __break(1u);
    }
    uint64_t v62 = specialized Array.init(repeating:count:)(0, v7 - v99);
    uint64_t v63 = v101;
    (*(void (**)(uint64_t, void, void))(*(void *)v28 + 160))(v62 + 32, *(void *)(v62 + 16), MEMORY[0x263F8E778]);
    if (!v63)
    {
      *(void *)&long long v101 = 0;
      swift_bridgeObjectRelease();
LABEL_31:
      unint64_t v7 = *(void *)(*(void *)v97 + 16) - 1;
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v64);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v65);
      uint64_t v66 = OSSignposter.logHandle.getter();
      uint64_t v67 = v92;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v68 = static os_signpost_type_t.end.getter();
      char v69 = OS_os_log.signpostsEnabled.getter();
      long long v70 = v91;
      if (v69)
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v71 = v87;
        uint64_t v72 = v88;
        if ((*(unsigned int (**)(char *, uint64_t))(v87 + 88))(v70, v88) == *MEMORY[0x263F90238])
        {
          char v73 = 0;
          double v100 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
          double v100 = "index=%{name=index}ld size=%{xcode:size-in-bytes, name=size}llu";
          char v73 = 2;
        }
        uint64_t v74 = v89;
        unint64_t v75 = v96;
        v86(v89, v67, v96);
        uint64_t v76 = swift_slowAlloc();
        *(unsigned char *)uint64_t v76 = 0;
        *(unsigned char *)(v76 + 1) = v73;
        *(_WORD *)(v76 + 2) = 2048;
        *(void *)md = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v76 + 12) = 2048;
        *(void *)md = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_signpost_id_t v77 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v66, v68, v77, "addAttachment", v100, (uint8_t *)v76, 0x16u);
        MEMORY[0x24C527CC0](v76, -1, -1);

        long long v78 = (void (*)(char *, unint64_t))v80[0];
        ((void (*)(char *, unint64_t))v80[0])(v67, v75);
        swift_release();
        v78(v74, v75);
      }
      else
      {

        ((void (*)(char *, unint64_t))v80[0])(v67, v96);
        swift_release();
      }
      return v7;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }
  v80[1] = v25;
  v80[0] = v26;
  *(void *)&long long v84 = v34;
  if ((v30 & 1) == 0)
  {
    unint64_t v40 = v94;
    unint64_t v43 = v95;
    unint64_t v41 = HIDWORD(v94);
    unint64_t v42 = HIDWORD(v95);
    int v44 = (int)v93;
LABEL_17:
    unint64_t v34 = (char **)(v28 + 32);
    swift_beginAccess();
    uint64_t v45 = *((void *)v28 + 4);
    unint64_t v94 = v40;
    unint64_t v98 = v41;
    unint64_t v95 = v43;
    uint64_t v46 = specialized Collection<>.firstIndex(of:)(v40 | (v41 << 32), v43 | (v42 << 32), v44, v45);
    if ((v47 & 1) == 0)
    {
      unint64_t v7 = v46;
      uint64_t v48 = v84;
      (*(void (**)(void))(*(void *)v28 + 168))(v84);
      swift_release();
      *((void *)v28 + 5) = v48;
      return v7;
    }
    LODWORD(v16) = v44;
    LODWORD(v26) = v42;
    double v93 = v27;
    double v97 = (char *)(v28 + 24);
    swift_beginAccess();
    uint64_t v27 = (void *)*((void *)v28 + 3);
    char v49 = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v28 + 3) = v27;
    *(void *)&long long v101 = 0;
    if (v49) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
  uint64_t result = swift_beginAccess();
  if ((v28[144] & 1) == 0)
  {
    *(void *)md = 0;
    uint64_t v103 = 0;
    int v104 = 0;
    CC_SHA1_Final(md, (CC_SHA1_CTX *)(v28 + 48));
    unint64_t v40 = *(unsigned int *)md;
    unint64_t v41 = *(unsigned int *)&md[4];
    unint64_t v43 = v103;
    unint64_t v42 = HIDWORD(v103);
    int v44 = v104;
    swift_endAccess();
    *((_OWORD *)v28 + 7) = 0u;
    *((_OWORD *)v28 + 8) = 0u;
    *((_OWORD *)v28 + 5) = 0u;
    *((_OWORD *)v28 + 6) = 0u;
    *((_OWORD *)v28 + 3) = 0u;
    *((_OWORD *)v28 + 4) = 0u;
    *((unsigned char *)v28 + 144) = 1;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

void type metadata accessor for (offset: UInt64, size: UInt64)()
{
  if (!lazy cache variable for type metadata for (offset: UInt64, size: UInt64))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: UInt64, size: UInt64));
    }
  }
}

uint64_t sub_245F6F350()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for FileArchiveReader.UnmapBuffer()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, a2, (void (*)(uint64_t))type metadata accessor for ArchiveReader);
}

{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, a2, (void (*)(uint64_t))type metadata accessor for ArchiveReader);
}

uint64_t type metadata accessor for ArchiveReader()
{
  return self;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ArchiveReader()
{
  return lazy protocol witness table accessor for type Slice<ArchiveReader> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<ArchiveReader> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader);
}

void type metadata accessor for Slice<ArchiveReader>(uint64_t a1)
{
}

uint64_t base witness table accessor for Collection in ArchiveReader(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, a2, (void (*)(uint64_t))type metadata accessor for ArchiveReader);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ArchiveReader()
{
  return lazy protocol witness table accessor for type Slice<ArchiveReader> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<ArchiveReader> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader);
}

uint64_t lazy protocol witness table accessor for type Slice<ArchiveReader> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<ArchiveReader>(255);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Sequence in ArchiveReader(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, a2, (void (*)(uint64_t))type metadata accessor for ArchiveReader);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in ArchiveReader()
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type Slice<ArchiveReader> and conformance Slice<A>, 255, type metadata accessor for Slice<ArchiveReader>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ArchiveReader()
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type IndexingIterator<ArchiveReader> and conformance IndexingIterator<A>, 255, type metadata accessor for IndexingIterator<ArchiveReader>);
}

uint64_t lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<ArchiveReader>(uint64_t a1)
{
}

void type metadata accessor for Slice<ArchiveReader>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ArchiveReader();
    uint64_t v8 = lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, v7, (void (*)(uint64_t))type metadata accessor for ArchiveReader);
    unint64_t v9 = a3(a1, v6, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t ObjC metadata update function for ArchiveWriter()
{
  return type metadata accessor for ArchiveWriter(0);
}

uint64_t type metadata accessor for ArchiveWriter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ArchiveWriter);
}

uint64_t type metadata completion function for ArchiveWriter()
{
  uint64_t result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ArchiveWriter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ArchiveWriter);
}

uint64_t dispatch thunk of ArchiveWriter.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ArchiveWriter.finalize()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ArchiveWriter.append(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ArchiveWriter.append<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t ObjC metadata update function for FileArchiveWriter()
{
  return type metadata accessor for FileArchiveWriter(0);
}

uint64_t type metadata accessor for FileArchiveWriter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, type metadata singleton initialization cache for FileArchiveWriter);
}

uint64_t type metadata completion function for FileArchiveWriter()
{
  return type metadata completion function for FileArchiveWriter();
}

{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FileArchiveWriter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FileArchiveWriter);
}

uint64_t dispatch thunk of FileArchiveWriter.__allocating_init(file:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t ObjC metadata update function for DataArchiveWriter()
{
  return type metadata accessor for DataArchiveWriter(0);
}

uint64_t type metadata accessor for DataArchiveWriter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DataArchiveWriter);
}

uint64_t type metadata completion function for DataArchiveWriter()
{
  return type metadata completion function for FileArchiveWriter();
}

uint64_t method lookup function for ArchiveReader(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ArchiveReader);
}

uint64_t type metadata accessor for FileArchiveReader()
{
  return self;
}

uint64_t method lookup function for FileArchiveReader(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FileArchiveReader);
}

uint64_t dispatch thunk of FileArchiveReader.__allocating_init(file:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for DataArchiveReader()
{
  return self;
}

uint64_t method lookup function for DataArchiveReader(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DataArchiveReader);
}

uint64_t dispatch thunk of DataArchiveReader.__allocating_init(data:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unsigned char *specialized Data._Representation.init(_:)(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v53 = type metadata accessor for OSSignpostID();
  uint64_t v52 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  unint64_t v51 = &v48[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v48[-v13];
  uint64_t v15 = *(void *)(a3 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)a3;
  *(void *)&into.state.CC_LONG h4 = v15;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(a3 + 24);
  uint64_t v16 = ProtobufEncoder.archiveWriter.getter();
  if (!v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = specialized Data.init<A>(_:)(a4, a5);
    unint64_t v43 = v42;
    ProtobufEncoder.dataField(_:_:)(2, v41, v42);
    return outlined consume of Data._Representation(v41, v43);
  }
  uint64_t v17 = v16;
  unint64_t v50 = a5;
  uint64_t v54 = v5;
  *(void *)&c.h0 = a1;
  *(void *)&c.h2 = a2;
  unint64_t v18 = lazy protocol witness table accessor for type Image.Location.BundlePath and conformance Image.Location.BundlePath();
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  os_signpost_type_t v19 = (uint64_t *)(v17 + 152);
  swift_beginAccess();
  uint64_t v20 = *(void *)(v17 + 152);
  if (*(void *)(v20 + 16) && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&into), (v22 & 1) != 0))
  {
    Swift::UInt v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
    swift_endAccess();
    outlined destroy of AnyHashable((uint64_t)&into);
    lazy protocol witness table accessor for type Int and conformance Int();
    default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v24);
    static OSSignpostID.exclusive.getter();
    uint64_t v25 = OSSignposter.logHandle.getter();
    int v26 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v27 = v52;
      uint64_t v28 = *(void (**)(void))(v52 + 16);
      int v49 = v26;
      uint64_t v29 = v53;
      v28();
      char v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v30 = 134217984;
      *(void *)&into.state.h0 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_signpost_id_t v31 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245728000, v25, (os_signpost_type_t)v49, v31, "addAttachment.cacheHit", "index=%{name=index}ld", v30, 0xCu);
      MEMORY[0x24C527CC0](v30, -1, -1);

      long long v32 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
      v32(v14, v29);
      v32(v51, v29);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v14, v53);
    }
  }
  else
  {
    unint64_t v51 = (unsigned char *)v18;
    uint64_t v52 = a2;
    swift_endAccess();
    outlined destroy of AnyHashable((uint64_t)&into);
    unint64_t v33 = v50;
    swift_bridgeObjectRetain();
    uint64_t v34 = specialized Data.init<A>(_:)(a4, v33);
    unint64_t v36 = v35;
    memset(&c, 0, sizeof(c));
    outlined copy of Data._Representation(v34, v35);
    CC_SHA1_Init(&c);
    into.state = c;
    Data.hash(into:)(&into);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
    outlined consume of Data._Representation(v34, v36);
    CC_LONG h4 = c.h4;
    uint64_t v38 = *(void *)&c.h0;
    uint64_t v39 = *(void *)&c.h2;
    swift_beginAccess();
    uint64_t v53 = specialized Collection<>.firstIndex(of:)(v38, v39, h4, *(void *)(v17 + 32));
    if (v40)
    {
      *(void *)&into.state.h0 = v38;
      *(void *)&into.state.h2 = v39;
      into.state.CC_LONG h4 = h4;
      LOBYTE(into.state.Nl) = 0;
      outlined copy of Data._Representation(v34, v36);
      uint64_t v45 = v54;
      uint64_t v46 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&into.state.h0, (const char *)v17, v34, v36);
      outlined consume of Data._Representation(v34, v36);
      outlined consume of Data._Representation(v34, v36);
      uint64_t v54 = v45;
      if (v45) {
        return swift_release();
      }
      uint64_t v53 = v46;
    }
    else
    {
      outlined consume of Data._Representation(v34, v36);
    }
    uint64_t v56 = a1;
    uint64_t v57 = v52;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v55 = *v19;
    *os_signpost_type_t v19 = 0x8000000000000000;
    Swift::UInt v23 = v53;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v53, (uint64_t)&into, isUniquelyReferenced_nonNull_native);
    *os_signpost_type_t v19 = v55;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&into);
    swift_endAccess();
  }
  if ((v23 & 0x8000000000000000) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v23);
    return swift_release();
  }
  return result;
}

uint64_t specialized ArchiveWriter.addAttachment(hash:from:)(unint64_t *a1, const char *a2, void (*a3)(void), unint64_t a4)
{
  return specialized ArchiveWriter.addAttachment(hash:from:)(a1, a2, a3, a4);
}

{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  const char *v17;
  NSObject *v18;
  os_signpost_type_t v19;
  char v20;
  void (*v21)(char *, char *, unint64_t);
  uint8_t *v22;
  os_signpost_id_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t);
  void *v27;
  const char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  long long v32;
  long long v33;
  char **v34;
  void (*v35)(char *, unint64_t);
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t result;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  char *v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  char *v67;
  os_signpost_type_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  os_signpost_id_t v77;
  void (*v78)(char *, unint64_t);
  char *v79;
  void v80[2];
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  unint64_t v85;
  void (*v86)(char *, char *, unint64_t);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  const char *v90;
  char *v91;
  char *v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  void (*v98)(void);
  unint64_t v99;
  const char *v100;
  long long v101;
  unsigned __int8 md[8];
  uint64_t v103;
  int v104;
  CC_SHA1_CTX c;
  uint64_t v106;

  unint64_t v99 = a4;
  unint64_t v98 = a3;
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v88 = type metadata accessor for OSSignpostError();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  double v91 = (char *)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v92 = (char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v80 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v80 - v14;
  uint64_t v16 = *a1;
  unint64_t v95 = a1[1];
  LODWORD(v93) = *((_DWORD *)a1 + 4);
  LODWORD(v97) = *((unsigned __int8 *)a1 + 20);
  double v100 = a2;
  uint64_t v17 = &a2[OBJC_IVAR____TtC7SwiftUI13ArchiveWriter_signposter];
  static OSSignpostID.exclusive.getter();
  double v90 = v17;
  unint64_t v18 = OSSignposter.logHandle.getter();
  os_signpost_type_t v19 = static os_signpost_type_t.begin.getter();
  uint64_t v20 = OS_os_log.signpostsEnabled.getter();
  unint64_t v96 = v7;
  unint64_t v94 = v16;
  if (v20)
  {
    unint64_t v21 = *(void (**)(char *, char *, unint64_t))(v8 + 16);
    LODWORD(v16) = v8 + 16;
    v21(v12, v15, v7);
    char v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v22 = 0;
    Swift::UInt v23 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245728000, v18, v19, v23, "addAttachment", "", v22, 2u);
    uint64_t v24 = v22;
    uint64_t v7 = v96;
    MEMORY[0x24C527CC0](v24, -1, -1);

    (*(void (**)(char *, unint64_t))(v8 + 8))(v12, v7);
  }
  else
  {

    unint64_t v21 = *(void (**)(char *, char *, unint64_t))(v8 + 16);
  }
  double v86 = v21;
  unint64_t v85 = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v21(v12, v15, v7);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  double v89 = v12;
  uint64_t v25 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v27 = (void *)(v8 + 8);
  int v26 = *(void (**)(char *, unint64_t))(v8 + 8);
  v26(v15, v7);
  uint64_t v28 = v100;
  uint64_t v29 = v101;
  if (!*((void *)v100 + 5))
  {
    unint64_t v35 = v26;
    unint64_t v36 = MEMORY[0x263F8E778];
    uint64_t v7 = 16;
    unint64_t v37 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v37[2] = 16;
    v37[5] = 0;
    v37[4] = 0;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 160))(v37 + 4, 16, v36);
    if (v29) {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    int v26 = v35;
  }
  char v30 = (char)v97;
  if (v97)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    long long v101 = *(_OWORD *)&c.h0;
    long long v84 = *(_OWORD *)&c.h4;
    long long v83 = *(_OWORD *)&c.data[1];
    long long v82 = *(_OWORD *)&c.data[5];
    long long v81 = *(_OWORD *)&c.data[9];
    os_signpost_id_t v31 = *(void *)&c.data[13];
    uint64_t v7 = *(void *)&c.data[15];
    swift_beginAccess();
    long long v32 = v84;
    *((_OWORD *)v28 + 3) = v101;
    *((_OWORD *)v28 + 4) = v32;
    unint64_t v33 = v82;
    *((_OWORD *)v28 + 5) = v83;
    *((_OWORD *)v28 + 6) = v33;
    *((_OWORD *)v28 + 7) = v81;
    *((void *)v28 + 16) = v31;
    *((void *)v28 + 17) = v7;
    *((unsigned char *)v28 + 144) = 0;
  }
  uint64_t v34 = (char **)*((void *)v28 + 5);
  ArchiveWriter.withDataConsumer(do:)(v98);
  if (v29)
  {
    swift_release();
    return v7;
  }
  uint64_t v38 = *((void *)v28 + 5);
  unint64_t v99 = v38 - (void)v34;
  if (v38 < (unint64_t)v34)
  {
    __break(1u);
LABEL_39:
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
    *(void *)double v97 = v27;
LABEL_20:
    unint64_t v51 = v27[2];
    unint64_t v50 = v27[3];
    if (v51 >= v50 >> 1)
    {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v27);
      *(void *)double v97 = v27;
    }
    uint64_t v52 = v99;
    uint64_t v53 = v99 + 15;
    v27[2] = v51 + 1;
    uint64_t v54 = &v27[2 * v51];
    v54[4] = v84;
    v54[5] = v52;
    swift_endAccess();
    swift_beginAccess();
    uint64_t v55 = *v34;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v34 = v55;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
      *uint64_t v34 = v55;
    }
    uint64_t v7 = v53 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v58 = *((void *)v55 + 2);
    uint64_t v57 = *((void *)v55 + 3);
    int v59 = v95;
    uint64_t v60 = (int)v98;
    if (v58 >= v57 >> 1)
    {
      uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v55);
      uint64_t v60 = (int)v98;
      int v59 = v95;
      uint64_t v55 = v79;
      *uint64_t v34 = v79;
    }
    *((void *)v55 + 2) = v58 + 1;
    unint64_t v61 = &v55[20 * v58];
    *((_DWORD *)v61 + 8) = v94;
    *((_DWORD *)v61 + 9) = v60;
    *((_DWORD *)v61 + 10) = v59;
    *((_DWORD *)v61 + 11) = v26;
    *((_DWORD *)v61 + 12) = v16;
    swift_endAccess();
    if (v7 == v99) {
      goto LABEL_31;
    }
    if (v7 < v99) {
      __break(1u);
    }
    uint64_t v62 = specialized Array.init(repeating:count:)(0, v7 - v99);
    uint64_t v63 = v101;
    (*(void (**)(uint64_t, void, void))(*(void *)v28 + 160))(v62 + 32, *(void *)(v62 + 16), MEMORY[0x263F8E778]);
    if (!v63)
    {
      *(void *)&long long v101 = 0;
      swift_bridgeObjectRelease();
LABEL_31:
      uint64_t v7 = *(void *)(*(void *)v97 + 16) - 1;
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v64);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v65);
      uint64_t v66 = OSSignposter.logHandle.getter();
      uint64_t v67 = v92;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v68 = static os_signpost_type_t.end.getter();
      char v69 = OS_os_log.signpostsEnabled.getter();
      long long v70 = v91;
      if (v69)
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v71 = v87;
        uint64_t v72 = v88;
        if ((*(unsigned int (**)(char *, uint64_t))(v87 + 88))(v70, v88) == *MEMORY[0x263F90238])
        {
          char v73 = 0;
          double v100 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
          double v100 = "index=%{name=index}ld size=%{xcode:size-in-bytes, name=size}llu";
          char v73 = 2;
        }
        uint64_t v74 = v89;
        unint64_t v75 = v96;
        v86(v89, v67, v96);
        uint64_t v76 = swift_slowAlloc();
        *(unsigned char *)uint64_t v76 = 0;
        *(unsigned char *)(v76 + 1) = v73;
        *(_WORD *)(v76 + 2) = 2048;
        *(void *)md = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v76 + 12) = 2048;
        *(void *)md = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_signpost_id_t v77 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v66, v68, v77, "addAttachment", v100, (uint8_t *)v76, 0x16u);
        MEMORY[0x24C527CC0](v76, -1, -1);

        long long v78 = (void (*)(char *, unint64_t))v80[0];
        ((void (*)(char *, unint64_t))v80[0])(v67, v75);
        swift_release();
        v78(v74, v75);
      }
      else
      {

        ((void (*)(char *, unint64_t))v80[0])(v67, v96);
        swift_release();
      }
      return v7;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }
  v80[1] = v25;
  v80[0] = v26;
  *(void *)&long long v84 = v34;
  if ((v30 & 1) == 0)
  {
    char v40 = v94;
    unint64_t v43 = v95;
    uint64_t v41 = HIDWORD(v94);
    unint64_t v42 = HIDWORD(v95);
    int v44 = (int)v93;
LABEL_17:
    uint64_t v34 = (char **)(v28 + 32);
    swift_beginAccess();
    uint64_t v45 = *((void *)v28 + 4);
    unint64_t v94 = v40;
    unint64_t v98 = (void (*)(void))v41;
    unint64_t v95 = v43;
    uint64_t v46 = specialized Collection<>.firstIndex(of:)(v40 | (v41 << 32), v43 | (v42 << 32), v44, v45);
    if ((v47 & 1) == 0)
    {
      uint64_t v7 = v46;
      uint64_t v48 = v84;
      (*(void (**)(void))(*(void *)v28 + 168))(v84);
      swift_release();
      *((void *)v28 + 5) = v48;
      return v7;
    }
    LODWORD(v16) = v44;
    LODWORD(v26) = v42;
    double v93 = v27;
    double v97 = (char *)(v28 + 24);
    swift_beginAccess();
    uint64_t v27 = (void *)*((void *)v28 + 3);
    int v49 = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v28 + 3) = v27;
    *(void *)&long long v101 = 0;
    if (v49) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
  uint64_t result = swift_beginAccess();
  if ((v28[144] & 1) == 0)
  {
    *(void *)md = 0;
    uint64_t v103 = 0;
    int v104 = 0;
    CC_SHA1_Final(md, (CC_SHA1_CTX *)(v28 + 48));
    char v40 = *(unsigned int *)md;
    uint64_t v41 = *(unsigned int *)&md[4];
    unint64_t v43 = v103;
    unint64_t v42 = HIDWORD(v103);
    int v44 = v104;
    swift_endAccess();
    *((_OWORD *)v28 + 7) = 0u;
    *((_OWORD *)v28 + 8) = 0u;
    *((_OWORD *)v28 + 5) = 0u;
    *((_OWORD *)v28 + 6) = 0u;
    *((_OWORD *)v28 + 3) = 0u;
    *((_OWORD *)v28 + 4) = 0u;
    *((unsigned char *)v28 + 144) = 1;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

unint64_t type metadata accessor for ContiguousBytes()
{
  unint64_t result = lazy cache variable for type metadata for ContiguousBytes;
  if (!lazy cache variable for type metadata for ContiguousBytes)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContiguousBytes);
  }
  return result;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for ContiguousBytes?, (uint64_t (*)(uint64_t))type metadata accessor for ContiguousBytes, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  void v12[2] = v13;
  unint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error;
  if (!lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error;
  if (!lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableCGImage.Error and conformance CodableCGImage.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RBShader and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type RBShader and conformance NSObject;
  if (!lazy protocol witness table cache variable for type RBShader and conformance NSObject)
  {
    type metadata accessor for CAPresentationModifier(255, &lazy cache variable for type metadata for RBShader);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RBShader and conformance NSObject);
  }
  return result;
}

uint64_t _ValueActionModifier.init(value:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _ValueActionModifier.init(value:action:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, a6);
}

uint64_t _ValueActionModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ValueActionModifier.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ValueActionModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ValueActionModifier.action.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t _ValueActionModifier.action.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_release();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_ValueActionModifier.action.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ValueActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ValueActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, a7, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8);
}

uint64_t _ValueActionModifier.sendAction(old:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, v5, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v2, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a2) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v12, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v12, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v8, a2);
  }
  unint64_t v18 = *(void (**)(uint64_t))&v16[*(int *)(a2 + 36)];
  swift_retain();
  v17(v16, a2);
  v18(v2);
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ValueActionModifier<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t _ValueActionModifier2.init(value:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _ValueActionModifier.init(value:action:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier2, a6);
}

uint64_t _ValueActionModifier.init(value:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  double v14 = (void *)(a7 + *(int *)(result + 36));
  *double v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t (*_ValueActionModifier2.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ValueActionModifier2.action.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t View._transactionalOnChange<A>(of:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a6;
  uint64_t v22 = a4;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for _ValueActionModifier3();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a5, v15);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, a5);
  unint64_t v18 = &v17[*(int *)(v13 + 36)];
  *(void *)unint64_t v18 = a2;
  *((void *)v18 + 1) = a3;
  View.modifier<A>(_:)(v17, v22, v13);
  os_signpost_type_t v19 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  return v19(v17, v13);
}

uint64_t (*_ValueActionModifier3.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _ValueActionModifier.action : <A>_ValueActionModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v8 = *(void *)(a3 + a2 - 16);
  uint64_t v9 = *(void *)(a3 + a2 - 8);
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(a4(0, v8, v9) + 36));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = v8;
  v13[3] = v9;
  v13[4] = v12;
  v13[5] = v11;
  *a6 = a5;
  a6[1] = v13;

  return swift_retain();
}

uint64_t key path setter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v10 = *(void *)(a4 + a3 - 16);
  uint64_t v11 = *(void *)(a4 + a3 - 8);
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v10;
  v14[3] = v11;
  void v14[4] = v13;
  _OWORD v14[5] = v12;
  double v15 = (void *)(a2 + *(int *)(a6(0, v10, v11) + 36));
  swift_retain();
  uint64_t result = swift_release();
  *double v15 = a7;
  v15[1] = v14;
  return result;
}

uint64_t _ValueActionModifier2.action.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t _ValueActionModifier2.action.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_release();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_ValueActionModifier3.action.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ValueActionModifier3._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v32 = a6;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for ValueActionDispatcher3();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (_DWORD *)((char *)&v25 - v15);
  int v17 = *a1;
  uint64_t v18 = *(void *)a2;
  int v29 = *(_DWORD *)(a2 + 8);
  uint64_t v28 = *(void *)(a2 + 16);
  LODWORD(a1) = *(_DWORD *)(a2 + 24);
  int v30 = *(_DWORD *)(a2 + 36);
  int v31 = *(_DWORD *)(a2 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a5 - 8) + 56))(v11, 1, 1, a5, v14);
  default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v41);
  uint64_t v35 = v41;
  int v36 = v42;
  char v37 = v43;
  *(void *)&long long v19 = *(void *)(a2 + 28);
  long long v27 = v19;
  ValueActionDispatcher3.init(modifier:phase:transaction:oldValue:lastResetSeed:cycleDetector:)(v17, (int)a1, v19, (uint64_t)v11, 0, &v35, v16);
  uint64_t v39 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  long long v26 = *(_OWORD *)(a2 + 40);
  long long v25 = *(_OWORD *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 72);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v38, v12, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v22);
  (*(void (**)(_DWORD *, uint64_t))(v13 + 8))(v16, v12);
  uint64_t v23 = AGGraphSetFlags();
  uint64_t v41 = v18;
  int v42 = v29;
  uint64_t v44 = v28;
  int v45 = (int)a1;
  uint64_t v46 = v27;
  int v47 = v30;
  long long v48 = v26;
  long long v49 = v25;
  uint64_t v50 = v20;
  int v51 = v31;
  return v34(v23, &v41);
}

uint64_t ValueActionDispatcher3.init(modifier:phase:transaction:oldValue:lastResetSeed:cycleDetector:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X5>, _DWORD *a7@<X8>)
{
  int v11 = *((_DWORD *)a6 + 2);
  char v12 = *((unsigned char *)a6 + 12);
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  uint64_t v13 = (int *)type metadata accessor for ValueActionDispatcher3();
  double v14 = (char *)a7 + v13[11];
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *a6;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a4, v15);
  *(_DWORD *)((char *)a7 + v13[12]) = a5;
  uint64_t v18 = (char *)a7 + v13[13];
  *(void *)uint64_t v18 = v16;
  *((_DWORD *)v18 + 2) = v11;
  v18[12] = v12;
  return result;
}

uint64_t static _ValueActionModifier3._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v32 = a6;
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  int v11 = (char *)&v23 - v10;
  uint64_t v12 = type metadata accessor for ValueActionDispatcher3();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (_DWORD *)((char *)&v23 - v14);
  int v16 = *a1;
  uint64_t v17 = *(void *)a2;
  int v25 = *(_DWORD *)(a2 + 8);
  uint64_t v24 = *(void *)(a2 + 16);
  LODWORD(a1) = *(_DWORD *)(a2 + 24);
  int v31 = *(_DWORD *)(a2 + 36);
  long long v30 = *(_OWORD *)(a2 + 40);
  uint64_t v29 = *(void *)(a2 + 56);
  int v28 = *(_DWORD *)(a2 + 64);
  uint64_t v27 = *(void *)(a2 + 72);
  int v26 = *(unsigned __int8 *)(a2 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v11, 1, 1, a5);
  default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v41);
  uint64_t v35 = v41;
  int v36 = v42;
  char v37 = v43;
  *(void *)&long long v18 = *(void *)(a2 + 28);
  long long v23 = v18;
  ValueActionDispatcher3.init(modifier:phase:transaction:oldValue:lastResetSeed:cycleDetector:)(v16, (int)a1, v18, (uint64_t)v11, 0, &v35, v15);
  uint64_t v39 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v38, v12, MEMORY[0x263F8E628], v19, MEMORY[0x263F8E658], v20);
  (*(void (**)(_DWORD *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v21 = AGGraphSetFlags();
  uint64_t v41 = v17;
  int v42 = v25;
  uint64_t v44 = v24;
  int v45 = (int)a1;
  uint64_t v46 = v23;
  int v47 = v31;
  long long v48 = v30;
  uint64_t v49 = v29;
  int v50 = v28;
  uint64_t v51 = v27;
  char v52 = v26;
  return v34(v21, &v41);
}

uint64_t ValueActionDispatcher3.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ValueActionModifier3();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ValueActionModifier3<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier3._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ValueActionModifier3<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier3._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), a6);
}

uint64_t ValueActionDispatcher3.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v66 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v56 - v9;
  uint64_t v11 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v62 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v63 = (char *)&v56 - v16;
  uint64_t v64 = v15;
  uint64_t v17 = type metadata accessor for _ValueActionModifier3();
  uint64_t v67 = *(void *)(v17 - 8);
  uint64_t v68 = v17;
  uint64_t v18 = *(void *)(v67 + 64);
  MEMORY[0x270FA5388](v17);
  unint64_t v61 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v56 - v20;
  int v22 = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v23 = *(int *)(a1 + 48);
  int v24 = *(_DWORD *)(v1 + v23);
  char v69 = v21;
  if (v22 != v24)
  {
    *(_DWORD *)(v1 + v23) = v22;
    uint64_t v25 = v1 + *(int *)(a1 + 44);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2 + *(int *)(a1 + 44), v5);
    uint64_t v21 = v69;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v25, 1, 1, v4);
    uint64_t v26 = v2 + *(int *)(a1 + 52);
    *(void *)(v26 + 4) = 0xFFFFFFFFLL;
    *(unsigned char *)(v26 + 12) = 0;
  }
  ValueActionDispatcher3.modifier.getter((uint64_t)v21);
  uint64_t v27 = *(void (**)(char *))(v6 + 16);
  uint64_t v65 = v2 + *(int *)(a1 + 44);
  v27(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v4) != 1)
  {
    uint64_t v58 = v6;
    uint64_t v59 = v5;
    int v28 = v63;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v57(v63, v10, v4);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v28, v4);
      uint64_t v6 = v58;
      uint64_t v5 = v59;
      goto LABEL_7;
    }
    uint64_t v31 = v2 + *(int *)(a1 + 52);
    AGGraphClearUpdate();
    int v32 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    if (*(_DWORD *)(v31 + 4) == v32)
    {
      int v33 = *(_DWORD *)(v31 + 8);
      uint64_t v30 = v11;
      if (!v33 || (int v34 = v33 - 1, (*(_DWORD *)(v31 + 8) = v34) == 0))
      {
        if ((*(unsigned char *)(v31 + 12) & 1) == 0)
        {
          v70[0] = 0;
          v70[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(44);
          v70[0] = 0;
          v70[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(23);
          swift_bridgeObjectRelease();
          strcpy((char *)v70, "onChange(of: ");
          HIWORD(v70[1]) = -4864;
          v35._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          v36._countAndFlagsBits = 0x6E6F697463612029;
          v36._object = (void *)0xE800000000000000;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          v37._object = (void *)0x800000024621E040;
          v37._countAndFlagsBits = 0xD00000000000002ALL;
          String.append(_:)(v37);
          specialized static Log.externalWarning(_:)(v70[0], v70[1]);
          swift_bridgeObjectRelease();
          *(unsigned char *)(v31 + 12) = 1;
        }
        (*(void (**)(char *, uint64_t))(v11 + 8))(v28, v4);
LABEL_22:
        uint64_t v6 = v58;
        uint64_t v5 = v59;
        uint64_t v29 = v66;
        goto LABEL_23;
      }
    }
    else
    {
      *(_DWORD *)(v31 + 4) = v32;
      *(_DWORD *)(v31 + 8) = 2;
      uint64_t v30 = v11;
    }
    AGGraphClearUpdate();
    closure #1 in ValueActionDispatcher3.updateValue()(v70);
    AGGraphSetUpdate();
    uint64_t v38 = v28;
    uint64_t v39 = v70[0];
    uint64_t v40 = v67;
    uint64_t v41 = v68;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v61, v69, v68);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v62, v38, v4);
    unint64_t v42 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    unint64_t v43 = (v18 + *(unsigned __int8 *)(v30 + 80) + v42) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    unint64_t v44 = (v60 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v45 = swift_allocObject();
    uint64_t v46 = v64;
    *(void *)(v45 + 16) = v4;
    *(void *)(v45 + 24) = v46;
    (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v45 + v42, v61, v41);
    v57((char *)(v45 + v43), v62, v4);
    *(void *)(v45 + v44) = v39;
    swift_retain();
    specialized static Update.begin()();
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = partial apply for closure #2 in ValueActionDispatcher3.updateValue();
    *(void *)(v47 + 24) = v45;
    uint64_t v48 = one-time initialization token for actions;
    swift_retain();
    if (v48 != -1) {
      swift_once();
    }
    uint64_t v49 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
    }
    unint64_t v51 = v49[2];
    unint64_t v50 = v49[3];
    if (v51 >= v50 >> 1) {
      uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v49);
    }
    v49[2] = v51 + 1;
    char v52 = &v49[2 * v51];
    v52[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    v52[5] = v47;
    static Update.actions = v49;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v63, v4);
    goto LABEL_22;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
LABEL_7:
  uint64_t v29 = v66;
  uint64_t v30 = v11;
LABEL_23:
  uint64_t v53 = v65;
  uint64_t v54 = v69;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v29, v69, v4);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v54, v68);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v29, 0, 1, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 40))(v53, v29, v5);
}

uint64_t closure #1 in ValueActionDispatcher3.updateValue()@<X0>(void *a1@<X8>)
{
  type metadata accessor for ValueActionDispatcher3();
  *a1 = *(void *)AGGraphGetValue();

  return swift_retain();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ValueActionDispatcher3<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t sub_245F72B70()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v7(v0 + v3, v1);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v6, 1, v1)) {
    v7(v0 + v6, v1);
  }

  return swift_deallocObject();
}

uint64_t sub_245F72CD0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245F72D08()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_245F72DCC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for _ValueActionModifier3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ValueActionDispatcher3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245F72E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (), a4);
}

uint64_t sub_245F72E7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_26FA91EA8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ()));
}

uint64_t sub_245F72EC4()
{
  return 16;
}

__n128 sub_245F72ED0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245F72EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier2, (uint64_t)partial apply for closure #1 in Transaction.forEach<A>(keyType:_:), a4);
}

uint64_t sub_245F72F24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_26FA91E58, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier2, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A) -> (@out ()));
}

uint64_t sub_245F72F6C()
{
  return 16;
}

__n128 sub_245F72F78(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245F72F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A, @guaranteed Transaction) -> (), a4);
}

uint64_t sub_245F72FCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ValueActionModifier.action : <A>_ValueActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_26FA91E08, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A, @in_guaranteed Transaction) -> (@out ()));
}

uint64_t sub_245F73014()
{
  return 16;
}

__n128 sub_245F73020(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of ValueActionModifierProtocol.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ValueActionModifierProtocol.sendAction(old:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueActionDispatcher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 3;
  unint64_t v11 = ((((v9 + 3 + ((v7 + 8) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + 13;
  int v12 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v15 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v16 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v17 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v16 = *v17;
    uint64_t v18 = (void *)(((unint64_t)v16 + v8 + 4) & ~v8);
    uint64_t v19 = (const void *)(((unint64_t)v17 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v17 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v18, v19, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v4);
    }
    uint64_t v20 = (_DWORD *)(((unint64_t)v18 + v10) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v21 = (_DWORD *)(((unint64_t)v19 + v10) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v20 = *v21;
    int v22 = (uint64_t *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v23 = *v22;
    int v24 = (void *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *(void *)((char *)v24 + 5) = *(uint64_t *)((char *)v22 + 5);
    *int v24 = v23;
  }
  return v3;
}

_DWORD *assignWithCopy for ValueActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  size_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  unint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v18 = (_DWORD *)(((unint64_t)v9 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v19 = (_DWORD *)(((unint64_t)v10 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v20 = *(_DWORD *)v21;
  *(_DWORD *)(v20 + 4) = *(_DWORD *)(v21 + 4);
  *(_DWORD *)(v20 + 8) = *(_DWORD *)(v21 + 8);
  *(unsigned char *)(v20 + 12) = *(unsigned char *)(v21 + 12);
  return a1;
}

_DWORD *initializeWithTake for ValueActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  size_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    size_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  uint64_t v17 = (_DWORD *)(((unint64_t)v9 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)(((unint64_t)v10 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v17 = *v18;
  uint64_t v19 = (uint64_t *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = *v19;
  unint64_t v21 = (void *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *(void *)((char *)v21 + 5) = *(uint64_t *)((char *)v19 + 5);
  *unint64_t v21 = v20;
  return a1;
}

_DWORD *assignWithTake for ValueActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  size_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v18 = (_DWORD *)(((unint64_t)v9 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v19 = (_DWORD *)(((unint64_t)v10 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v20 = *(_DWORD *)v21;
  *(_DWORD *)(v20 + 4) = *(_DWORD *)(v21 + 4);
  *(_DWORD *)(v20 + 8) = *(_DWORD *)(v21 + 8);
  *(unsigned char *)(v20 + 12) = *(unsigned char *)(v21 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueActionDispatcher(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + 3;
  if (v8 < a2)
  {
    unint64_t v12 = ((((v11 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 13;
    unsigned int v13 = (a2 - v8 + 255) >> (8 * v12);
    if (v12 < 4) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      LODWORD(v15) = 4;
    }
    else {
      LODWORD(v15) = 2;
    }
    if (v14 < 0x100) {
      LODWORD(v15) = 1;
    }
    if (v14 >= 2) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = a1[v12];
        if (!a1[v12]) {
          break;
        }
        goto LABEL_26;
      case 2:
        int v16 = *(unsigned __int16 *)&a1[v12];
        if (*(_WORD *)&a1[v12]) {
          goto LABEL_26;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F73970);
      case 4:
        int v16 = *(_DWORD *)&a1[v12];
        if (!v16) {
          break;
        }
LABEL_26:
        int v17 = (v16 - 1) << (8 * v12);
        if (v12 >= 4) {
          int v17 = 0;
        }
        if (((((v11 + ((v9 + 8) & ~v9)) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) == 0xFFFFFFF4) {
          int v18 = *a1;
        }
        else {
          int v18 = *(_DWORD *)a1;
        }
        int v23 = v8 + (v18 | v17);
        return (v23 + 1);
      default:
        break;
    }
  }
  unint64_t v19 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v7 >= 0xFE)
  {
    unsigned int v20 = (*(uint64_t (**)(unint64_t))(v5 + 48))(v19);
    if (v20 >= 2) {
      return v20 - 1;
    }
    else {
      return 0;
    }
  }
  unsigned int v22 = *(unsigned __int8 *)(((((v11 + v19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 12);
  if (v22 < 2) {
    return 0;
  }
  int v23 = (v22 + 2147483646) & 0x7FFFFFFF;
  return (v23 + 1);
}

void storeEnumTagSinglePayload for ValueActionDispatcher(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((((v12 + 3 + ((v11 + 8) & ~v11)) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 13;
  char v14 = 8 * v13;
  if (v10 < a3)
  {
    unsigned int v15 = (a3 - v10 + 255) >> v14;
    if (v13 <= 3) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v6 = v17;
    }
    else {
      int v6 = 0;
    }
  }
  if (v10 < a2)
  {
    if (v13 < 4) {
      unsigned int v18 = ((~v10 + a2) >> v14) + 1;
    }
    else {
      unsigned int v18 = 1;
    }
    if (v13 >= 4) {
      unsigned int v19 = ~v10 + a2;
    }
    else {
      unsigned int v19 = (~(_BYTE)v10 + a2);
    }
    bzero(a1, v13);
    if (v13 == 1) {
      *a1 = v19;
    }
    else {
      *(_DWORD *)a1 = v19;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x245F73C70);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        unsigned int v20 = (unsigned char *)((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11);
        if (v9 < 0xFE)
        {
          unint64_t v24 = (((unint64_t)&v20[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
          if (a2 > 0xFE)
          {
            *(unsigned char *)(v24 + 12) = 0;
            *(_DWORD *)(v24 + 8) = 0;
            *(void *)unint64_t v24 = a2 - 255;
          }
          else
          {
            *(unsigned char *)(v24 + 12) = a2 + 1;
          }
        }
        else if (v9 >= a2)
        {
          uint64_t v25 = a2 + 1;
          uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          unint64_t v27 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11;
          v26(v27, v25);
        }
        else
        {
          if (v12 <= 3) {
            int v21 = ~(-1 << (8 * v12));
          }
          else {
            int v21 = -1;
          }
          if (v12)
          {
            int v22 = v21 & (~v9 + a2);
            if (v12 <= 3) {
              int v23 = v12;
            }
            else {
              int v23 = 4;
            }
            bzero(v20, v12);
            switch(v23)
            {
              case 2:
                *(_WORD *)unsigned int v20 = v22;
                break;
              case 3:
                *(_WORD *)unsigned int v20 = v22;
                v20[2] = BYTE2(v22);
                break;
              case 4:
                *(_DWORD *)unsigned int v20 = v22;
                break;
              default:
                *unsigned int v20 = v22;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_245F73CE4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA20_ValueActionModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _ValueActionModifier);
}

uint64_t sub_245F73D04()
{
  return swift_getWitnessTable();
}

uint64_t sub_245F73DB8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA20_ValueActionModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _ValueActionModifier3);
}

uint64_t get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA20_ValueActionModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for ValueActionDispatcher3()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueActionDispatcher3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 3;
  unint64_t v11 = ((((v9 + 3 + ((v7 + 12) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + 13;
  int v12 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v15 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unsigned int v16 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v17 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v16 = *v17;
    unsigned int v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v18 = *v19;
    unsigned int v20 = (void *)(((unint64_t)v18 + v8 + 4) & ~v8);
    int v21 = (const void *)(((unint64_t)v19 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v19 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v20, v21, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v20, v21, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v4);
    }
    int v22 = (_DWORD *)(((unint64_t)v20 + v10) & 0xFFFFFFFFFFFFFFFCLL);
    int v23 = (_DWORD *)(((unint64_t)v21 + v10) & 0xFFFFFFFFFFFFFFFCLL);
    *int v22 = *v23;
    unint64_t v24 = (uint64_t *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v25 = *v24;
    uint64_t v26 = (void *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *(void *)((char *)v26 + 5) = *(uint64_t *)((char *)v24 + 5);
    *uint64_t v26 = v25;
  }
  return v3;
}

uint64_t destroy for ValueActionDispatcher3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v3 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v5(v3, v2);
  }
  return result;
}

_DWORD *initializeWithCopy for ValueActionDispatcher3(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)(((unint64_t)v7 + v11 + 4) & ~v11);
  size_t v13 = (const void *)(((unint64_t)v8 + v11 + 4) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    int v14 = *(_DWORD *)(v10 + 84);
    size_t v15 = *(void *)(v10 + 64);
    if (v14) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v12, v13, v9);
    unsigned int v18 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
    uint64_t v17 = v10 + 56;
    v18(v12, 0, 1, v9);
    int v14 = *(_DWORD *)(v17 + 28);
    size_t v15 = *(void *)(v17 + 8);
  }
  if (v14) {
    size_t v19 = v15;
  }
  else {
    size_t v19 = v15 + 1;
  }
  unsigned int v20 = (_DWORD *)(((unint64_t)v12 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  int v21 = (_DWORD *)(((unint64_t)v13 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v20 = *v21;
  int v22 = (uint64_t *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v23 = *v22;
  unint64_t v24 = (void *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *(void *)((char *)v24 + 5) = *(uint64_t *)((char *)v22 + 5);
  *unint64_t v24 = v23;
  return a1;
}

_DWORD *assignWithCopy for ValueActionDispatcher3(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)(((unint64_t)v7 + v11 + 4) & ~v11);
  size_t v13 = (void *)(((unint64_t)v8 + v11 + 4) & ~v11);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy(v12, v13, v19);
LABEL_12:
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v20 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v10 + 64) + 1;
  }
  int v21 = (_DWORD *)(((unint64_t)v12 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  int v22 = (_DWORD *)(((unint64_t)v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *int v21 = *v22;
  unint64_t v23 = ((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v24 = ((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v23 = *(_DWORD *)v24;
  *(_DWORD *)(v23 + 4) = *(_DWORD *)(v24 + 4);
  *(_DWORD *)(v23 + 8) = *(_DWORD *)(v24 + 8);
  *(unsigned char *)(v23 + 12) = *(unsigned char *)(v24 + 12);
  return a1;
}

_DWORD *initializeWithTake for ValueActionDispatcher3(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)(((unint64_t)v7 + v11 + 4) & ~v11);
  size_t v13 = (const void *)(((unint64_t)v8 + v11 + 4) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    int v14 = *(_DWORD *)(v10 + 84);
    size_t v15 = *(void *)(v10 + 64);
    if (v14) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    size_t v18 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
    uint64_t v17 = v10 + 56;
    v18(v12, 0, 1, v9);
    int v14 = *(_DWORD *)(v17 + 28);
    size_t v15 = *(void *)(v17 + 8);
  }
  if (v14) {
    size_t v19 = v15;
  }
  else {
    size_t v19 = v15 + 1;
  }
  uint64_t v20 = (_DWORD *)(((unint64_t)v12 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  int v21 = (_DWORD *)(((unint64_t)v13 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v20 = *v21;
  int v22 = (uint64_t *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v23 = *v22;
  unint64_t v24 = (void *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *(void *)((char *)v24 + 5) = *(uint64_t *)((char *)v22 + 5);
  *unint64_t v24 = v23;
  return a1;
}

_DWORD *assignWithTake for ValueActionDispatcher3(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)(((unint64_t)v7 + v11 + 4) & ~v11);
  size_t v13 = (void *)(((unint64_t)v8 + v11 + 4) & ~v11);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy(v12, v13, v19);
LABEL_12:
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v20 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v10 + 64) + 1;
  }
  int v21 = (_DWORD *)(((unint64_t)v12 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  int v22 = (_DWORD *)(((unint64_t)v13 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *int v21 = *v22;
  unint64_t v23 = ((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v24 = ((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v23 = *(_DWORD *)v24;
  *(_DWORD *)(v23 + 4) = *(_DWORD *)(v24 + 4);
  *(_DWORD *)(v23 + 8) = *(_DWORD *)(v24 + 8);
  *(unsigned char *)(v23 + 12) = *(unsigned char *)(v24 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueActionDispatcher3(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + 3;
  if (v8 < a2)
  {
    unint64_t v12 = ((((v11 + ((v9 + 12) & ~v9)) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 13;
    unsigned int v13 = (a2 - v8 + 255) >> (8 * v12);
    if (v12 < 4) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      LODWORD(v15) = 4;
    }
    else {
      LODWORD(v15) = 2;
    }
    if (v14 < 0x100) {
      LODWORD(v15) = 1;
    }
    if (v14 >= 2) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = a1[v12];
        if (!a1[v12]) {
          break;
        }
        goto LABEL_26;
      case 2:
        int v16 = *(unsigned __int16 *)&a1[v12];
        if (*(_WORD *)&a1[v12]) {
          goto LABEL_26;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F74AD4);
      case 4:
        int v16 = *(_DWORD *)&a1[v12];
        if (!v16) {
          break;
        }
LABEL_26:
        int v17 = (v16 - 1) << (8 * v12);
        if (v12 >= 4) {
          int v17 = 0;
        }
        if (((((v11 + ((v9 + 12) & ~v9)) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) == 0xFFFFFFF4) {
          int v18 = *a1;
        }
        else {
          int v18 = *(_DWORD *)a1;
        }
        int v23 = v8 + (v18 | v17);
        return (v23 + 1);
      default:
        break;
    }
  }
  unint64_t v19 = (((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v7 >= 0xFE)
  {
    unsigned int v20 = (*(uint64_t (**)(unint64_t))(v5 + 48))(v19);
    if (v20 >= 2) {
      return v20 - 1;
    }
    else {
      return 0;
    }
  }
  unsigned int v22 = *(unsigned __int8 *)(((((v11 + v19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 12);
  if (v22 < 2) {
    return 0;
  }
  int v23 = (v22 + 2147483646) & 0x7FFFFFFF;
  return (v23 + 1);
}

void storeEnumTagSinglePayload for ValueActionDispatcher3(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((((v12 + 3 + ((v11 + 12) & ~v11)) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 13;
  char v14 = 8 * v13;
  if (v10 < a3)
  {
    unsigned int v15 = (a3 - v10 + 255) >> v14;
    if (v13 <= 3) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v6 = v17;
    }
    else {
      int v6 = 0;
    }
  }
  if (v10 < a2)
  {
    if (v13 < 4) {
      unsigned int v18 = ((~v10 + a2) >> v14) + 1;
    }
    else {
      unsigned int v18 = 1;
    }
    if (v13 >= 4) {
      unsigned int v19 = ~v10 + a2;
    }
    else {
      unsigned int v19 = (~(_BYTE)v10 + a2);
    }
    bzero(a1, v13);
    if (v13 == 1) {
      *a1 = v19;
    }
    else {
      *(_DWORD *)a1 = v19;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x245F74DDCLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        unsigned int v20 = (unsigned char *)((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11);
        if (v9 < 0xFE)
        {
          unint64_t v24 = (((unint64_t)&v20[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
          if (a2 > 0xFE)
          {
            *(unsigned char *)(v24 + 12) = 0;
            *(_DWORD *)(v24 + 8) = 0;
            *(void *)unint64_t v24 = a2 - 255;
          }
          else
          {
            *(unsigned char *)(v24 + 12) = a2 + 1;
          }
        }
        else if (v9 >= a2)
        {
          uint64_t v25 = a2 + 1;
          uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          unint64_t v27 = (((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11;
          v26(v27, v25);
        }
        else
        {
          if (v12 <= 3) {
            int v21 = ~(-1 << (8 * v12));
          }
          else {
            int v21 = -1;
          }
          if (v12)
          {
            int v22 = v21 & (~v9 + a2);
            if (v12 <= 3) {
              int v23 = v12;
            }
            else {
              int v23 = 4;
            }
            bzero(v20, v12);
            switch(v23)
            {
              case 2:
                *(_WORD *)unsigned int v20 = v22;
                break;
              case 3:
                *(_WORD *)unsigned int v20 = v22;
                v20[2] = BYTE2(v22);
                break;
              case 4:
                *(_DWORD *)unsigned int v20 = v22;
                break;
              default:
                *unsigned int v20 = v22;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for ValueActionDispatcher3<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ValueActionDispatcher3<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245F74E6C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for _ValueActionModifier3() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(v1 - 8);
  int v6 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v6(v0 + v3, v1);
  swift_release();
  v6(v0 + v7, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ValueActionDispatcher3.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for _ValueActionModifier3();
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return (*(uint64_t (**)(unint64_t))(v0 + v4 + *(int *)(v2 + 36)))(v0+ ((v4 + *(void *)(v3 + 64) + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)));
}

uint64_t sub_245F750A4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A, @in_guaranteed Transaction) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v3 + 32);
  uint64_t v6 = a3;
  return v4(a1, a2, &v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A, @guaranteed Transaction) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 32))(a1, a2, *a3);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t AnimationState.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *v4;
  if (!*(void *)(v7 + 16)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  }
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v9 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  }
  outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v8, (uint64_t)v11);
  outlined init with take of Any(v11, v12);
  outlined init with take of Any(v12, v11);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

uint64_t AnimationState.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized AnimationState.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

void (*AnimationState.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  _OWORD v11[2] = a4;
  void *v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  unsigned int v15 = malloc(v14);
  v11[8] = v15;
  AnimationState.subscript.getter((uint64_t)v15, v16, a4, a5);
  return AnimationState.subscript.modify;
}

void AnimationState.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[7];
  unint64_t v4 = (void *)(*a1)[8];
  uint64_t v5 = (*a1)[5];
  uint64_t v6 = (*a1)[6];
  uint64_t v8 = (*a1)[1];
  uint64_t v7 = (*a1)[2];
  uint64_t v9 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[7], v4, v5);
    specialized AnimationState.subscript.setter((uint64_t)v3, v9, v8, v7);
    unsigned int v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    specialized AnimationState.subscript.setter((*a1)[8], v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t specialized AnimationState.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_1, a1, AssociatedTypeWitness);
  return specialized Dictionary.subscript.setter((uint64_t)v9, a4);
}

uint64_t type metadata accessor for AnimationState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of static AnimationStateKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t Transaction.isAnimated.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (!v1)
  {
    swift_release();
    goto LABEL_5;
  }
  uint64_t v2 = *(void *)(v1 + 72);
  swift_release();
  if (!v2)
  {
LABEL_5:
    char v5 = 0;
    return v5 & 1;
  }
  uint64_t v3 = swift_retain();
  char v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_release();
  char v5 = v4 ^ 1;
  return v5 & 1;
}

uint64_t specialized Transaction.forEach<A>(keyType:_:)(uint64_t result, uint64_t a2, void *a3)
{
  v5[2] = result;
  v5[3] = a2;
  if (a3)
  {
    type metadata accessor for TransactionPropertyKey<AnimationKey>();
    BloomFilter.init(hashValue:)(v4);
    return _s7SwiftUI12PropertyListV7ElementC7forEach6filter_SbAA11BloomFilterV_ys9UnmanagedVyAEG_SbztXEtF03_s7a4UI12cd54V7forEach7keyType_yxm_y5ValueQz_SbztXEtAA0C3KeyRzlFys9k5VyAC7e3CG_U121XEfU_AA011TransactioncJ033_B2543BCA257433E04979186A1DC2B6BCLLVyAA09AnimationJ033_D98E9A1069CEEADA58829ED440E36F30LLVG_Tg5xSbRi_zRi0_zlyAA9AnimationVSgIsgnl_Tf1ncn_nTf4nng_n(&v6, a3, (void (*)(uint64_t *, BOOL *))partial apply for specialized closure #1 in Transaction.forEach<A>(keyType:_:), (uint64_t)v5);
  }
  return result;
}

uint64_t Transaction.effectiveAnimation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 72);
    swift_retain();
    swift_release();
    if (v2) {
      return v2;
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v3 = swift_retain();
  char v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_release();
  if ((v4 & 1) == 0) {
    return 0;
  }
  if (one-time initialization token for velocityTracking != -1) {
    swift_once();
  }
  uint64_t v2 = static Animation.velocityTracking;
  swift_retain();
  return v2;
}

uint64_t Transaction._animationFrameInterval.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 72);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_release();
  return v2;
}

unint64_t Transaction._animationReason.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (v1)
  {
    uint64_t v2 = *(unsigned int *)(v1 + 72);
    unsigned __int8 v3 = *(unsigned char *)(v1 + 76);
  }
  else
  {
    uint64_t v2 = 0;
    unsigned __int8 v3 = 1;
  }
  swift_release();
  return v2 | ((unint64_t)v3 << 32);
}

uint64_t key path getter for Transaction.animation : Transaction@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 72);
    swift_retain();
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t key path setter for Transaction.animation : Transaction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  swift_release_n();
  return swift_release();
}

uint64_t (*Transaction.animation.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    swift_retain();
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_release();
  *a1 = v5;
  return Transaction.animation.modify;
}

uint64_t Transaction.animation.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = (uint64_t *)a1[3];
  uint64_t v4 = *a1;
  swift_retain();
  swift_retain();
  if (a2)
  {
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v4);
    swift_release();
    swift_release_n();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v3, v4);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t key path setter for Transaction._animationFrameInterval : Transaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t Transaction._animationFrameInterval.setter(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, v4);
  return swift_release();
}

void (*Transaction._animationFrameInterval.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    char v7 = *(unsigned char *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  swift_release();
  void *v3 = v6;
  *((unsigned char *)v3 + 8) = v7;
  return Transaction._animationFrameInterval.modify;
}

void Transaction._animationFrameInterval.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  char v4 = *((unsigned char *)*a1 + 8);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

uint64_t key path setter for Transaction._animationReason : Transaction(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unsigned __int8 v4 = *((unsigned char *)a1 + 4);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3 | ((unint64_t)v4 << 32));
  return swift_release();
}

uint64_t Transaction._animationReason.setter(unint64_t a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1 | ((HIDWORD(a1) & 1) << 32));
  return swift_release();
}

uint64_t (*Transaction._animationReason.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 72);
    char v6 = *(unsigned char *)(v4 + 76);
  }
  else
  {
    int v5 = 0;
    char v6 = 1;
  }
  swift_release();
  *(_DWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 28) = v6;
  return Transaction._animationReason.modify;
}

uint64_t Transaction._animationReason.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 28);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v1 | ((unint64_t)v3 << 32));

  return swift_release();
}

uint64_t key path getter for Transaction.disablesAnimations : Transaction@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  char v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  uint64_t result = swift_release();
  *a1 = v3 & 1;
  return result;
}

void (*Transaction.disablesAnimations.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction.disablesAnimations.modify;
}

void Transaction.disablesAnimations.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();

  free(v1);
}

uint64_t Transaction.disablesContentTransitions.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (v1) {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_release();
  return v2;
}

uint64_t key path getter for Transaction.disablesContentTransitions : Transaction@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3) {
    char v4 = *(unsigned char *)(v3 + 72);
  }
  else {
    char v4 = 0;
  }
  uint64_t result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t key path setter for Transaction.disablesAnimations : Transaction(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v7 = *a1;
  swift_retain();
  a5(a2, v7, &v9);
  return swift_release();
}

uint64_t Transaction.disablesContentTransitions.setter(uint64_t a1)
{
  return Transaction.disablesAnimations.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t (*Transaction.disablesContentTransitions.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4) {
    char v5 = *(unsigned char *)(v4 + 72);
  }
  else {
    char v5 = 0;
  }
  swift_release();
  *(unsigned char *)(a1 + 24) = v5;
  return Transaction.disablesContentTransitions.modify;
}

uint64_t Transaction.disablesContentTransitions.modify(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  char v2 = *(unsigned char *)(a1 + 24);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);

  return swift_release();
}

uint64_t closure #1 in Transaction.animationIgnoringTransitionPhase.getter(uint64_t *a1, unsigned char *a2, uint64_t *a3)
{
  uint64_t result = *a1;
  if (result)
  {
    *a3 = result;
    swift_retain();
    uint64_t result = swift_release();
    *a2 = 1;
  }
  return result;
}

uint64_t Transaction.animationFrameInterval.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 72);
  }
  else {
    uint64_t v2 = 0;
  }
  swift_release();
  return v2;
}

uint64_t key path getter for Transaction._animationFrameInterval : Transaction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 72);
    char v5 = *(unsigned char *)(v3 + 80);
  }
  else
  {
    uint64_t v4 = 0;
    char v5 = 1;
  }
  uint64_t result = swift_release();
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

void (*Transaction.animationFrameInterval.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    char v7 = *(unsigned char *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  swift_release();
  void *v3 = v6;
  *((unsigned char *)v3 + 8) = v7;
  return Transaction._animationFrameInterval.modify;
}

unint64_t Transaction.animationReason.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (v1)
  {
    uint64_t v2 = *(unsigned int *)(v1 + 72);
    unsigned __int8 v3 = *(unsigned char *)(v1 + 76);
  }
  else
  {
    uint64_t v2 = 0;
    unsigned __int8 v3 = 1;
  }
  swift_release();
  return v2 | ((unint64_t)v3 << 32);
}

uint64_t key path getter for Transaction._animationReason : Transaction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 72);
    char v5 = *(unsigned char *)(v3 + 76);
  }
  else
  {
    int v4 = 0;
    char v5 = 1;
  }
  uint64_t result = swift_release();
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v5;
  return result;
}

uint64_t (*Transaction.animationReason.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 72);
    char v6 = *(unsigned char *)(v4 + 76);
  }
  else
  {
    int v5 = 0;
    char v6 = 1;
  }
  swift_release();
  *(_DWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 28) = v6;
  return Transaction._animationReason.modify;
}

uint64_t sub_245F764EC@<X0>(uint64_t a1@<X8>)
{
  return key path getter for Transaction._animationFrameInterval : Transaction(a1);
}

uint64_t sub_245F76508@<X0>(uint64_t a1@<X8>)
{
  return key path getter for Transaction._animationReason : Transaction(a1);
}

uint64_t sub_245F76528(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.disablesAnimations : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245F76558(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.disablesAnimations : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245F76584@<X0>(uint64_t a1@<X8>)
{
  return key path getter for Transaction._animationFrameInterval : Transaction(a1);
}

uint64_t sub_245F765A0@<X0>(uint64_t a1@<X8>)
{
  return key path getter for Transaction._animationReason : Transaction(a1);
}

ValueMetadata *type metadata accessor for AnimationKey()
{
  return &type metadata for AnimationKey;
}

uint64_t partial apply for specialized closure #1 in Transaction.forEach<A>(keyType:_:)(uint64_t *a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = *a1;
  return v2(&v4);
}

ValueMetadata *type metadata accessor for DisablesAnimationsKey()
{
  return &type metadata for DisablesAnimationsKey;
}

ValueMetadata *type metadata accessor for AnimationFrameIntervalKey()
{
  return &type metadata for AnimationFrameIntervalKey;
}

ValueMetadata *type metadata accessor for AnimationReasonKey()
{
  return &type metadata for AnimationReasonKey;
}

ValueMetadata *type metadata accessor for DisablesContentTransitionsKey()
{
  return &type metadata for DisablesContentTransitionsKey;
}

uint64_t EventBindingBridge.eventBindingManager.getter()
{
  return swift_weakLoadStrong();
}

uint64_t key path getter for EventBindingBridge.responderWasBoundHandler : EventBindingBridge@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    char v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ResponderNode) -> ();
  }
  else
  {
    char v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v4);
}

uint64_t key path setter for EventBindingBridge.responderWasBoundHandler : EventBindingBridge(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ResponderNode) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 24);
  *(void *)(v7 + 24) = v6;
  *(void *)(v7 + 32) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
}

uint64_t EventBindingBridge.responderWasBoundHandler.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t EventBindingBridge.responderWasBoundHandler.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
}

uint64_t (*EventBindingBridge.responderWasBoundHandler.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void *EventBindingBridge.__allocating_init(eventBindingManager:)()
{
  uint64_t v0 = (void *)swift_allocObject();
  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = MEMORY[0x263F8EE80];
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

void *EventBindingBridge.__allocating_init()()
{
  uint64_t v0 = (void *)swift_allocObject();
  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = MEMORY[0x263F8EE80];
  return v0;
}

void *EventBindingBridge.init()()
{
  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = MEMORY[0x263F8EE80];
  return v0;
}

uint64_t EventBindingBridge.eventSources.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t EventBindingBridge.send(_:source:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v90 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  swift_bridgeObjectRetain();
  double v93 = (uint64_t *)(v2 + 40);
  swift_beginAccess();
  unint64_t v7 = 0;
  unint64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unint64_t v86 = v8 - 1;
  int64_t v92 = v8;
  unint64_t v88 = v8 - 5;
  uint64_t v9 = (void *)MEMORY[0x263F8EE80];
  uint64_t v87 = v3 + 104;
  uint64_t v91 = v3;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v7 << 6);
LABEL_9:
      uint64_t v13 = *(void *)(v3 + 56);
      size_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v12);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      *(void *)&long long v101 = v16;
      *((void *)&v101 + 1) = v15;
      outlined init with copy of AnyTrackedValue(v13 + 40 * v12, (uint64_t)&v102);
      goto LABEL_16;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_91;
    }
    if (v17 >= v92)
    {
      unint64_t v19 = v7;
    }
    else
    {
      unint64_t v18 = *(void *)(v90 + 8 * v17);
      if (v18) {
        goto LABEL_13;
      }
      unint64_t v19 = v7 + 1;
      if ((uint64_t)(v7 + 2) < v92)
      {
        unint64_t v18 = *(void *)(v90 + 8 * (v7 + 2));
        if (v18)
        {
          int64_t v17 = v7 + 2;
LABEL_13:
          unint64_t v6 = (v18 - 1) & v18;
          unint64_t v12 = __clz(__rbit64(v18)) + (v17 << 6);
          unint64_t v7 = v17;
          goto LABEL_9;
        }
        unint64_t v19 = v7 + 2;
        if ((uint64_t)(v7 + 3) < v92)
        {
          unint64_t v18 = *(void *)(v90 + 8 * (v7 + 3));
          if (v18)
          {
            int64_t v17 = v7 + 3;
            goto LABEL_13;
          }
          int64_t v17 = v7 + 4;
          unint64_t v19 = v7 + 3;
          if ((uint64_t)(v7 + 4) < v92)
          {
            unint64_t v18 = *(void *)(v90 + 8 * v17);
            if (v18) {
              goto LABEL_13;
            }
            while (v88 != v7)
            {
              unint64_t v18 = *(void *)(v87 + 8 * v7++);
              if (v18)
              {
                int64_t v17 = v7 + 4;
                goto LABEL_13;
              }
            }
            unint64_t v19 = v86;
          }
        }
      }
    }
    unint64_t v6 = 0;
    uint64_t v104 = 0;
    long long v102 = 0u;
    long long v103 = 0u;
    unint64_t v7 = v19;
    long long v101 = 0u;
LABEL_16:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v101, (uint64_t)v105);
    Swift::UInt v20 = v105[0];
    if (!v105[0])
    {
      swift_release();
      if (!v9[2] || (swift_beginAccess(), !swift_weakLoadStrong()))
      {
        swift_bridgeObjectRelease();
        return MEMORY[0x263F8EE88];
      }
      swift_weakInit();
      if (one-time initialization token for _lock == -1)
      {
LABEL_84:
        uint64_t v83 = static Update._lock;
        _MovableLockLock(static Update._lock);
        specialized static Update.begin()();
        swift_beginAccess();
        if (swift_weakLoadStrong())
        {
          uint64_t v84 = EventBindingManager.sendDownstream(_:)((uint64_t)v9);
          swift_release();
        }
        else
        {
          uint64_t v84 = MEMORY[0x263F8EE88];
        }
        static Update.end()();
        _MovableLockUnlock(v83);
        swift_weakDestroy();
        swift_release();
        swift_bridgeObjectRelease();
        return v84;
      }
LABEL_97:
      swift_once();
      goto LABEL_84;
    }
    Swift::UInt v21 = v105[1];
    outlined init with take of ScrollStateRequest(v106, (uint64_t)&v101);
    outlined init with copy of AnyTrackedValue((uint64_t)&v101, (uint64_t)v100);
    outlined init with copy of AnyTrackedValue((uint64_t)v100, (uint64_t)v96);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for NonGestureEventType);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(v94, (uint64_t)v99);
      outlined init with copy of AnyTrackedValue((uint64_t)v99, (uint64_t)v96);
      uint64_t v22 = v97;
      uint64_t v23 = v98;
      __swift_project_boxed_opaque_existential_1(v96, v97);
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v23 + 8) + 8))(v94, v22);
      uint64_t v24 = v97;
      uint64_t v25 = v98;
      __swift_project_boxed_opaque_existential_1(v96, v97);
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v25 + 8) + 16))(v94, v24);
      uint64_t v26 = v97;
      uint64_t v27 = v98;
      __swift_project_boxed_opaque_existential_1(v96, v97);
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v27 + 8) + 24))(v94, v26);
      swift_retain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
      swift_release();
      outlined init with copy of AnyTrackedValue((uint64_t)&v101, (uint64_t)v100);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v99[0] = v9;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      uint64_t v31 = v9[2];
      BOOL v32 = (v29 & 1) == 0;
      uint64_t v33 = v31 + v32;
      if (!__OFADD__(v31, v32))
      {
        char v34 = v29;
        if (v9[3] >= v33)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v9 = (void *)v99[0];
            if (v29) {
              goto LABEL_4;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            uint64_t v9 = (void *)v99[0];
            if (v34) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
          unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          if ((v34 & 1) != (v36 & 1)) {
            goto LABEL_98;
          }
          unint64_t v30 = v35;
          uint64_t v9 = (void *)v99[0];
          if (v34) {
            goto LABEL_4;
          }
        }
        v9[(v30 >> 6) + 8] |= 1 << v30;
        uint64_t v55 = (Swift::UInt *)(v9[6] + 16 * v30);
        *uint64_t v55 = v20;
        v55[1] = v21;
        outlined init with take of ScrollStateRequest(v100, v9[7] + 40 * v30);
        uint64_t v56 = v9[2];
        BOOL v57 = __OFADD__(v56, 1);
        uint64_t v58 = v56 + 1;
        if (v57) {
          goto LABEL_93;
        }
LABEL_63:
        v9[2] = v58;
        goto LABEL_5;
      }
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    uint64_t v95 = 0;
    memset(v94, 0, sizeof(v94));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
    outlined destroy of NonGestureEventType?((uint64_t)v94);
    uint64_t v37 = *v93;
    if (*(void *)(*v93 + 16))
    {
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      if (v39)
      {
        unsigned __int8 v40 = *(unsigned char *)(*(void *)(v37 + 56) + 16 * v38 + 8);
        int v41 = v40;
        goto LABEL_38;
      }
    }
    uint64_t v42 = *((void *)&v102 + 1);
    uint64_t v43 = v103;
    __swift_project_boxed_opaque_existential_1(&v101, *((uint64_t *)&v102 + 1));
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v43 + 8))(v100, v42, v43);
    if (LOBYTE(v100[0]) == 1) {
      break;
    }
    unsigned __int8 v40 = 0;
    int v41 = 2;
LABEL_38:
    uint64_t v59 = *((void *)&v102 + 1);
    uint64_t v60 = v103;
    __swift_project_boxed_opaque_existential_1(&v101, *((uint64_t *)&v102 + 1));
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v60 + 8))(v100, v59, v60);
    if (LOBYTE(v100[0]) != 1)
    {
      swift_beginAccess();
      unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      if (v62)
      {
        unint64_t v63 = v61;
        char v64 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v65 = *v93;
        v99[0] = *v93;
        uint64_t *v93 = 0x8000000000000000;
        if ((v64 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v65 = v99[0];
        }
        specialized _NativeDictionary._delete(at:)(v63, v65);
        uint64_t *v93 = v65;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
    }
    if (v41 == 2) {
      unsigned __int8 v66 = 0;
    }
    else {
      unsigned __int8 v66 = v40;
    }
    uint64_t v3 = v91;
    if ((v66 & 1) == 0) {
      goto LABEL_55;
    }
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v101);
  }
  swift_beginAccess();
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  v99[0] = *v93;
  uint64_t v45 = v99[0];
  uint64_t *v93 = 0x8000000000000000;
  unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  uint64_t v48 = *(void *)(v45 + 16);
  BOOL v49 = (v46 & 1) == 0;
  uint64_t v50 = v48 + v49;
  if (__OFADD__(v48, v49)) {
    goto LABEL_94;
  }
  char v51 = v46;
  if (*(void *)(v45 + 24) >= v50)
  {
    uint64_t v54 = v93;
    if ((v44 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_31;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, v44);
    unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
    if ((v51 & 1) != (v53 & 1)) {
      goto LABEL_98;
    }
    unint64_t v47 = v52;
LABEL_31:
    uint64_t v54 = v93;
  }
  uint64_t v67 = (void *)v99[0];
  if (v51)
  {
    uint64_t v68 = *(void *)(v99[0] + 56) + 16 * v47;
    *(void *)uint64_t v68 = a2;
    *(unsigned char *)(v68 + 8) = 0;
  }
  else
  {
    *(void *)(v99[0] + 8 * (v47 >> 6) + 64) |= 1 << v47;
    char v69 = (Swift::UInt *)(v67[6] + 16 * v47);
    *char v69 = v20;
    v69[1] = v21;
    uint64_t v70 = v67[7] + 16 * v47;
    *(void *)uint64_t v70 = a2;
    *(unsigned char *)(v70 + 8) = 0;
    uint64_t v71 = v67[2];
    BOOL v57 = __OFADD__(v71, 1);
    uint64_t v72 = v71 + 1;
    if (v57) {
      goto LABEL_96;
    }
    _OWORD v67[2] = v72;
  }
  *uint64_t v54 = (uint64_t)v67;
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_55:
  outlined init with copy of AnyTrackedValue((uint64_t)&v101, (uint64_t)v100);
  char v73 = swift_isUniquelyReferenced_nonNull_native();
  v99[0] = v9;
  unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  uint64_t v75 = v9[2];
  BOOL v76 = (v74 & 1) == 0;
  uint64_t v77 = v75 + v76;
  if (__OFADD__(v75, v76)) {
    goto LABEL_92;
  }
  char v78 = v74;
  if (v9[3] >= v77)
  {
    if ((v73 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = (void *)v99[0];
      if ((v78 & 1) == 0) {
        goto LABEL_62;
      }
      goto LABEL_4;
    }
    uint64_t v9 = (void *)v99[0];
    if (v74) {
      goto LABEL_4;
    }
LABEL_62:
    v9[(v30 >> 6) + 8] |= 1 << v30;
    long long v81 = (Swift::UInt *)(v9[6] + 16 * v30);
    *long long v81 = v20;
    v81[1] = v21;
    outlined init with take of ScrollStateRequest(v100, v9[7] + 40 * v30);
    uint64_t v82 = v9[2];
    BOOL v57 = __OFADD__(v82, 1);
    uint64_t v58 = v82 + 1;
    if (v57) {
      goto LABEL_95;
    }
    goto LABEL_63;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, v73);
  unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  if ((v78 & 1) == (v80 & 1))
  {
    unint64_t v30 = v79;
    uint64_t v9 = (void *)v99[0];
    if ((v78 & 1) == 0) {
      goto LABEL_62;
    }
LABEL_4:
    uint64_t v10 = v9[7] + 40 * v30;
    __swift_destroy_boxed_opaque_existential_1(v10);
    outlined init with take of ScrollStateRequest(v100, v10);
LABEL_5:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_98:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t EventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = (uint64_t *)(v3 + 40);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 40);
  uint64_t v7 = v6 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v6 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  char v29 = 0;
  int64_t v13 = 0;
  if (v10) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  if (v16 < v11)
  {
    unint64_t v17 = *(void *)(v7 + 8 * v16);
    ++v13;
    if (v17) {
      goto LABEL_21;
    }
    int64_t v13 = v16 + 1;
    if (v16 + 1 >= v11) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (v17) {
      goto LABEL_21;
    }
    int64_t v13 = v16 + 2;
    if (v16 + 2 >= v11) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (v17)
    {
LABEL_21:
      unint64_t v10 = (v17 - 1) & v17;
      for (unint64_t i = __clz(__rbit64(v17)) + (v13 << 6); ; unint64_t i = v14 | (v13 << 6))
      {
        uint64_t v19 = *(void *)(v6 + 56);
        if (*(void *)(v19 + 16 * i) == a1)
        {
          Swift::UInt v20 = (Swift::UInt *)(*(void *)(v6 + 48) + 16 * i);
          Swift::UInt v21 = *v20;
          Swift::UInt v22 = v20[1];
          swift_beginAccess();
          unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
          if (v24)
          {
            unint64_t v25 = v23;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v27 = *v5;
            uint64_t v30 = *v5;
            *uint64_t v5 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v27 = v30;
            }
            specialized _NativeDictionary._delete(at:)(v25, v27);
            *uint64_t v5 = v27;
            swift_bridgeObjectRelease();
          }
          uint64_t result = swift_endAccess();
          if (!v10) {
            goto LABEL_8;
          }
        }
        else
        {
          v29 |= *(unsigned char *)(v19 + 16 * i + 8) ^ 1;
          if (!v10) {
            goto LABEL_8;
          }
        }
LABEL_7:
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
      }
    }
    int64_t v18 = v16 + 3;
    if (v18 < v11)
    {
      unint64_t v17 = *(void *)(v7 + 8 * v18);
      if (v17)
      {
        int64_t v13 = v18;
        goto LABEL_21;
      }
      while (1)
      {
        int64_t v13 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_33;
        }
        if (v13 >= v11) {
          break;
        }
        unint64_t v17 = *(void *)(v7 + 8 * v13);
        ++v18;
        if (v17) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_28:
  uint64_t result = swift_release();
  if ((v29 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      EventBindingManager.reset(resetForwardedEventDispatchers:)(a3 & 1);
      return swift_release();
    }
  }
  return result;
}

uint64_t EventBindingBridge.resetEvents()()
{
  uint64_t v1 = (void *)(v0 + 40);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v36 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & v3;
  int64_t v37 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v38 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v7 << 6);
    }
    else
    {
      int64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_36;
      }
      if (v11 >= v37) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v36 + 8 * v11);
      ++v7;
      if (!v12)
      {
        int64_t v7 = v11 + 1;
        if (v11 + 1 >= v37) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v36 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 2;
          if (v11 + 2 >= v37) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v36 + 8 * v7);
          if (!v12)
          {
            int64_t v13 = v11 + 3;
            if (v13 >= v37) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v36 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                int64_t v7 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_37;
                }
                if (v7 >= v37) {
                  return swift_release();
                }
                unint64_t v12 = *(void *)(v36 + 8 * v7);
                ++v13;
                if (v12) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v7 = v13;
          }
        }
      }
LABEL_21:
      unint64_t v6 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
    }
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (Swift::UInt *)(*(void *)(v38 + 48) + v14);
    Swift::UInt v17 = *v15;
    Swift::UInt v16 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v38 + 56) + v14);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::UInt v20 = (void *)*v1;
    char v39 = (void *)*v1;
    void *v1 = 0x8000000000000000;
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    uint64_t v23 = v20[2];
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    char v26 = v21;
    if (v20[3] >= v25)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        char v29 = v39;
        if (v21) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        char v29 = v39;
        if (v26) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_38;
      }
      unint64_t v22 = v27;
      char v29 = v39;
      if (v26)
      {
LABEL_4:
        uint64_t v8 = v29[7] + 16 * v22;
        *(void *)uint64_t v8 = v18;
        *(unsigned char *)(v8 + 8) = 1;
        goto LABEL_5;
      }
    }
    v29[(v22 >> 6) + 8] |= 1 << v22;
    uint64_t v30 = (Swift::UInt *)(v29[6] + 16 * v22);
    *uint64_t v30 = v17;
    v30[1] = v16;
    uint64_t v31 = v29[7] + 16 * v22;
    *(void *)uint64_t v31 = v18;
    *(unsigned char *)(v31 + 8) = 1;
    uint64_t v32 = v29[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_35;
    }
    v29[2] = v34;
LABEL_5:
    void *v1 = v29;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall EventBindingBridge.setInheritedPhase(_:)(SwiftUI::_GestureInputs::InheritedPhase a1)
{
  uint64_t v1 = *(void *)a1.rawValue;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    uint64_t v4 = Strong + 16;
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v4))
    {
      uint64_t v5 = *(void *)(v3 + 24);
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      uint64_t v6 = static Update._lock;
      _MovableLockLock(static Update._lock);
      specialized static Update.begin()();
      uint64_t ObjectType = swift_getObjectType();
      v9[0] = v1;
      (*(void (**)(void *, uint64_t, uint64_t))(v5 + 40))(v9, ObjectType, v5);
      unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      swift_weakInit();
      _MovableLockLock(v6);
      specialized static Update.begin()();
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        EventBindingManager.sendDownstream(_:)(v8);
        swift_release();
      }
      static Update.end()();
      _MovableLockUnlock(v6);
      swift_weakDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      static Update.end()();
      _MovableLockUnlock(v6);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t EventBindingBridge.source(for:)()
{
  return 0;
}

uint64_t EventBindingBridge.__deallocating_deinit()
{
  swift_weakDestroy();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v0 + 24));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t EventBindingBridge.didBind(to:id:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = swift_beginAccess();
  uint64_t v7 = v2[3];
  if (v7)
  {
    uint64_t v8 = v2[4];
    unint64_t v9 = (void *)swift_allocObject();
    v9[2] = v7;
    void v9[3] = v8;
    uint64_t v9[4] = v3;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
    swift_retain();
    specialized static Update.begin()();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = partial apply for closure #1 in EventBindingBridge.didBind(to:id:);
    *(void *)(v10 + 24) = v9;
    uint64_t v11 = one-time initialization token for actions;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    unint64_t v12 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    _OWORD v12[2] = v14 + 1;
    uint64_t v15 = &v12[2 * v14];
    v15[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    v15[5] = v10;
    static Update.actions = v12;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
    uint64_t v6 = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*v2 + 192))(v6);
  uint64_t v16 = *(void *)(v25 + 16);
  if (v16)
  {
    Swift::UInt v17 = (uint64_t *)(v25 + 40);
    do
    {
      uint64_t v18 = *v17;
      uint64_t ObjectType = swift_getObjectType();
      v26[1] = v5;
      uint64_t v27 = v3;
      v26[0] = v4;
      uint64_t v20 = v3;
      uint64_t v21 = v5;
      uint64_t v22 = v4;
      uint64_t v23 = *(void (**)(uint64_t *, void *, void *, uint64_t, uint64_t))(v18 + 40);
      swift_unknownObjectRetain();
      v23(&v27, v26, v2, ObjectType, v18);
      uint64_t v4 = v22;
      uint64_t v5 = v21;
      uint64_t v3 = v20;
      swift_unknownObjectRelease();
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_245F77D7C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EventBindingBridge.didBind(to:id:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t specialized EventBindingBridge.didUpdate(phase:in:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  int v3 = a1[1];
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v1 + 192))();
  uint64_t v4 = *(void *)(v11 + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v11 + 40);
    do
    {
      uint64_t v6 = *v5;
      uint64_t ObjectType = swift_getObjectType();
      v12[0] = v2;
      v12[1] = v3;
      uint64_t v8 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 24);
      swift_unknownObjectRetain();
      v8(v12, v1, ObjectType, v6);
      swift_unknownObjectRelease();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 2 || (v3 == 3 ? (BOOL v10 = v2 == 0) : (BOOL v10 = 0), v10))
  {
    return EventBindingBridge.resetEvents()();
  }
  return result;
}

uint64_t specialized EventBindingBridge.didUpdate(gestureCategory:in:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 192))();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v3 + 40);
    do
    {
      uint64_t v6 = *v5;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v10 = v2;
      uint64_t v8 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v6 + 32);
      swift_unknownObjectRetain();
      v8(&v10, v1, ObjectType, v6);
      swift_unknownObjectRelease();
      v5 += 2;
      --v4;
    }
    while (v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_245F78000@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_245F78050()
{
  return swift_weakAssign();
}

uint64_t method lookup function for EventBindingBridge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EventBindingBridge);
}

uint64_t dispatch thunk of EventBindingBridge.eventBindingManager.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of EventBindingBridge.responderWasBoundHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of EventBindingBridge.responderWasBoundHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of EventBindingBridge.responderWasBoundHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of EventBindingBridge.__allocating_init(eventBindingManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of EventBindingBridge.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of EventBindingBridge.eventSources.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of EventBindingBridge.send(_:source:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of EventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of EventBindingBridge.setInheritedPhase(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of EventBindingBridge.source(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

ValueMetadata *type metadata accessor for EventBindingBridge.TrackedEventState()
{
  return &type metadata for EventBindingBridge.TrackedEventState;
}

uint64_t sub_245F7823C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ResponderNode) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ResponderNode) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void (*specialized AtomicBox.wrappedValue.modify(os_unfair_lock_s **a1, os_unfair_lock_s *a2))(os_unfair_lock_s **a1)
{
  *a1 = a2;
  os_unfair_lock_lock(a2 + 4);
  return AtomicBox.wrappedValue.modifyspecialized ;
}

float CUIDesignLibraryCacheKey.Entry.color.getter()
{
  return *(float *)v0;
}

void CUIDesignLibraryCacheKey.Entry.color.setter(float a1, float a2, float a3, float a4)
{
  *uint64_t v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  void v4[3] = a4;
}

uint64_t (*CUIDesignLibraryCacheKey.Entry.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.Entry.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *CUIDesignLibraryCacheKey.Entry.blendMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Entry.blendMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

char *CUIDesignLibraryCacheKey.Entry.init(color:blendMode:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  char v6 = *result;
  *(float *)a2 = a3;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = a5;
  *(float *)(a2 + 12) = a6;
  *(unsigned char *)(a2 + 16) = v6;
  return result;
}

void CUIDesignLibraryCacheKey.Entry.hash(into:)()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 12);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 16);
  if ((*(_DWORD *)v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = *(_DWORD *)v0;
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v6 = v1;
  }
  else {
    Swift::UInt32 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = v2;
  }
  else {
    Swift::UInt32 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v8 = v3;
  }
  else {
    Swift::UInt32 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v4);
}

Swift::Int CUIDesignLibraryCacheKey.Entry.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CUIDesignLibraryCacheKey.Entry()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CUIDesignLibraryCacheKey.Entry()
{
  return Hasher._finalize()();
}

uint64_t static CUIDesignLibraryCacheKey.cache.getter()
{
  if (one-time initialization token for _cache != -1) {
    swift_once();
  }
  uint64_t v0 = static CUIDesignLibraryCacheKey._cache;
  Swift::UInt32 v1 = (os_unfair_lock_s *)((char *)static CUIDesignLibraryCacheKey._cache + 16);
  swift_retain();
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0[3];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  swift_release();
  return v2;
}

uint64_t static CUIDesignLibraryCacheKey.cache.setter(uint64_t a1)
{
  if (one-time initialization token for _cache != -1) {
    swift_once();
  }
  uint64_t v2 = static CUIDesignLibraryCacheKey._cache;
  Swift::UInt32 v3 = (os_unfair_lock_s *)((char *)static CUIDesignLibraryCacheKey._cache + 16);
  swift_retain();
  os_unfair_lock_lock(v3);
  v2[3] = a1;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v3);

  return swift_release();
}

void (*static CUIDesignLibraryCacheKey.cache.modify(os_unfair_lock_s ***a1))(void *a1)
{
  uint64_t v2 = (os_unfair_lock_s **)malloc(0x30uLL);
  *a1 = v2;
  if (one-time initialization token for _cache != -1) {
    swift_once();
  }
  Swift::UInt32 v3 = (os_unfair_lock_s *)static CUIDesignLibraryCacheKey._cache;
  v2[4] = (os_unfair_lock_s *)static CUIDesignLibraryCacheKey._cache;
  swift_retain();
  v2[5] = (os_unfair_lock_s *)specialized AtomicBox.wrappedValue.modify(v2, v3);
  return static CUIDesignLibraryCacheKey.cache.modify;
}

void static CUIDesignLibraryCacheKey.cache.modify(void *a1)
{
  Swift::UInt32 v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_release();

  free(v1);
}

uint64_t static CUIDesignLibraryCacheKey.$cache.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for _cache != -1) {
    swift_once();
  }
  *a1 = static CUIDesignLibraryCacheKey._cache;

  return swift_retain();
}

void CUIDesignLibraryCacheKey.Props.scheme.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *CUIDesignLibraryCacheKey.Props.scheme.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Props.scheme.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.Props.contrast.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *CUIDesignLibraryCacheKey.Props.contrast.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Props.contrast.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.Props.gamut.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

unsigned char *CUIDesignLibraryCacheKey.Props.gamut.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 2) = *result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Props.gamut.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CUIDesignLibraryCacheKey.Props.styling.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CUIDesignLibraryCacheKey.Props.styling.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.Props.styling.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.Props.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt v3 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int CUIDesignLibraryCacheKey.Props.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CUIDesignLibraryCacheKey.Props()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CUIDesignLibraryCacheKey.Props()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt v3 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CUIDesignLibraryCacheKey.Props()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt v3 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t CUIDesignLibraryCacheKey.name.getter()
{
  return *(void *)v0;
}

uint64_t CUIDesignLibraryCacheKey.name.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void CUIDesignLibraryCacheKey.props.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 9);
  char v3 = *(unsigned char *)(v1 + 10);
  uint64_t v4 = *(void *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(void *)(a1 + 8) = v4;
}

uint64_t CUIDesignLibraryCacheKey.props.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 1);
  char v3 = *(unsigned char *)(result + 2);
  uint64_t v4 = *(void *)(result + 8);
  *(unsigned char *)(v1 + 8) = *(unsigned char *)result;
  *(unsigned char *)(v1 + 9) = v2;
  *(unsigned char *)(v1 + 10) = v3;
  *(void *)(v1 + 16) = v4;
  return result;
}

uint64_t (*CUIDesignLibraryCacheKey.props.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CUIDesignLibraryCacheKey.cuiDisplayGamut.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

void CUIDesignLibraryCacheKey.hash(into:)()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 9);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 10);
  Swift::UInt v4 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

BOOL static CUIDesignLibraryCacheKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  BOOL result = 0;
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 10) ^ *(unsigned __int8 *)(a2 + 10)) & 1) == 0)
  {
    return *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return result;
}

Swift::Int CUIDesignLibraryCacheKey.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 10);
  Swift::UInt v5 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CUIDesignLibraryCacheKey()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 10);
  Swift::UInt v5 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CUIDesignLibraryCacheKey()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 9);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 10);
  Swift::UInt v4 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CUIDesignLibraryCacheKey()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 9);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 10);
  Swift::UInt v4 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CUIDesignLibraryCacheKey(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    unsigned __int8 v3 = *(unsigned char *)(a2 + 10);
    unsigned __int8 v4 = *(unsigned char *)(a2 + 9);
    unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    unsigned __int8 v7 = *(unsigned char *)(a1 + 10);
    unsigned __int8 v8 = *(unsigned char *)(a1 + 9);
    v13[0] = *(unsigned char *)(a1 + 8);
    v13[1] = v8;
    void v13[2] = v7;
    uint64_t v14 = v6;
    v11[0] = v5;
    v11[1] = v4;
    _OWORD v11[2] = v3;
    uint64_t v12 = v2;
    return specialized static CUIDesignLibraryCacheKey.Props.== infix(_:_:)(v13, v11);
  }
  else
  {
    return 0;
  }
}

BOOL specialized static CUIDesignLibraryCacheKey.Entry.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1) != 0
      && a1[1].u8[0] == a2[1].u8[0];
}

unint64_t lazy protocol witness table accessor for type CUIDesignLibraryCacheKey.Entry and conformance CUIDesignLibraryCacheKey.Entry()
{
  unint64_t result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Entry and conformance CUIDesignLibraryCacheKey.Entry;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Entry and conformance CUIDesignLibraryCacheKey.Entry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey.Entry and conformance CUIDesignLibraryCacheKey.Entry);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CUIDesignLibraryCacheKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIDesignLibraryCacheKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CUIDesignLibraryCacheKey()
{
  return &type metadata for CUIDesignLibraryCacheKey;
}

uint64_t getEnumTagSinglePayload for CUIDesignLibraryCacheKey.Entry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xEC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 236);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 0x15;
  int v5 = v3 - 21;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CUIDesignLibraryCacheKey.Entry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 236;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xEC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xEC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 20;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CUIDesignLibraryCacheKey.Entry()
{
  return &type metadata for CUIDesignLibraryCacheKey.Entry;
}

uint64_t getEnumTagSinglePayload for CUIDesignLibraryCacheKey.Props(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for CoreUIDefaultSystemColorDefinition()
{
  return &type metadata for CoreUIDefaultSystemColorDefinition;
}

uint64_t static UnaryView._viewListCount(inputs:)()
{
  return 1;
}

void protocol witness for View.body.getter in conformance ZStack<A>()
{
}

void PrimitiveView.body.getter()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Image.Resolved@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Image.Resolved>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance Image.Resolved()
{
}

void protocol witness for View.body.getter in conformance VStack<A>()
{
}

void protocol witness for View.body.getter in conformance _ViewModifier_Content<A>()
{
}

void protocol witness for View.body.getter in conformance PlaceholderContentView<A>()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance KeyframeAnimator<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void protocol witness for View.body.getter in conformance KeyframeAnimator<A, B, C>()
{
}

void protocol witness for View.body.getter in conformance TupleView<A>()
{
}

void protocol witness for View.body.getter in conformance <A> Group<A>()
{
}

{
  swift_getWitnessTable();
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance Spacer()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _TextBaselineRelativeSpacer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_TextBaselineRelativeSpacer>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_TextBaselineRelativeSpacer>, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _TextBaselineRelativeSpacer()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _HSpacer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_HSpacer>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_HSpacer>, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _HSpacer()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _VSpacer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_VSpacer>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_VSpacer>, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _VSpacer()
{
}

void protocol witness for View.body.getter in conformance <> StaticIf<A, B, C>()
{
}

{
  swift_getWitnessTable();
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance HStack<A>()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _PreferenceReadingView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void protocol witness for View.body.getter in conformance _PreferenceReadingView<A, B>()
{
}

void protocol witness for View.body.getter in conformance Text()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StyledTextContentView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<StyledTextContentView>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance StyledTextContentView()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DynamicTextView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<DynamicTextView>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<DynamicTextView>, (uint64_t)&type metadata for DynamicTextView, (uint64_t)&protocol witness table for DynamicTextView);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance DynamicTextView()
{
}

uint64_t static MultiView._viewListCount(inputs:)()
{
  return 0;
}

void protocol witness for View.body.getter in conformance MaterialView<A>()
{
}

void protocol witness for View.body.getter in conformance <> _VariadicView.Tree<A, B>()
{
}

uint64_t specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)v5);
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    AGGraphCreateOffsetAttribute2();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>();
    lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child();
    int v2 = Attribute.init<A>(body:value:flags:update:)();
    specialized static ForEach<>._makeViewList(view:inputs:)(v2, (uint64_t)v5, a1);
    AGSubgraphEndTreeElement();
  }
  else
  {
    AGGraphCreateOffsetAttribute2();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>();
    lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child();
    int v3 = Attribute.init<A>(body:value:flags:update:)();
    specialized static ForEach<>._makeViewList(view:inputs:)(v3, (uint64_t)v5, a1);
  }
  return outlined release of _ViewListInputs((uint64_t)v5);
}

{
  int v2;
  int v3;
  unsigned char v5[88];
  uint64_t v6;

  uint64_t v6 = *MEMORY[0x263EF8340];
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)v5);
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    AGGraphCreateOffsetAttribute2();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
    lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
    int v2 = Attribute.init<A>(body:value:flags:update:)();
    specialized static ForEach<>._makeViewList(view:inputs:)(v2, (uint64_t)v5, a1);
    AGSubgraphEndTreeElement();
  }
  else
  {
    AGGraphCreateOffsetAttribute2();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
    lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
    int v3 = Attribute.init<A>(body:value:flags:update:)();
    specialized static ForEach<>._makeViewList(view:inputs:)(v3, (uint64_t)v5, a1);
  }
  return outlined release of _ViewListInputs((uint64_t)v5);
}

uint64_t specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = a1[3];
  *(_OWORD *)&v18[16] = a1[2];
  long long v19 = v2;
  long long v20 = a1[4];
  int v21 = *((_DWORD *)a1 + 20);
  long long v3 = a1[1];
  long long v17 = *a1;
  *(_OWORD *)int v18 = v3;
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v22);
  uint64_t v4 = v22;
  int v5 = v23;
  uint64_t v6 = v24;
  long long v15 = v25;
  uint64_t v7 = v26;
  uint64_t v8 = v27;
  uint64_t v9 = v28;
  int v10 = v29;
  uint64_t v11 = v30;
  char v12 = v31;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&long long v17 = v4;
  DWORD2(v17) = v5;
  *(void *)int v18 = v6;
  *(_OWORD *)&v18[8] = v15;
  *(void *)&v18[24] = v7;
  *(void *)&long long v19 = v8;
  *((void *)&v19 + 1) = v9;
  LODWORD(v20) = v10;
  *((void *)&v20 + 1) = v11;
  LOBYTE(v21) = v12;
  off_26BA34FD0((uint64_t)&v17, a2);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)v5);
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    specialized static ForEach<>._makeViewList(view:inputs:)(a1, (uint64_t)v5, a2);
    AGSubgraphEndTreeElement();
  }
  else
  {
    specialized static ForEach<>._makeViewList(view:inputs:)(a1, (uint64_t)v5, a2);
  }
  return outlined release of _ViewListInputs((uint64_t)v5);
}

void protocol witness for View.body.getter in conformance GeometryReader<A>()
{
}

void protocol witness for View.body.getter in conformance EnvironmentReader<A>()
{
}

void protocol witness for View.body.getter in conformance _DelayedPreferenceView<A, B>()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _DetachedView<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void protocol witness for View.body.getter in conformance _DetachedView<A, B, C>()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _DetachedPlaceholder<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void protocol witness for View.body.getter in conformance _DetachedPlaceholder<A>()
{
}

void protocol witness for View.body.getter in conformance _AnimationView<A>()
{
}

void protocol witness for View.body.getter in conformance Color()
{
}

void specialized View.bodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = 0x73694C776569565FLL;
  v0._object = (void *)0xEE00776569565F74;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000246223360;
  v0._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized View.bodyError()(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized View.bodyError()(uint64_t a1)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = a1;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 46;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void View.bodyError()()
{
}

uint64_t _UnaryViewAdaptor.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _UnaryViewAdaptor.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_UnaryViewAdaptor.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void protocol witness for View.body.getter in conformance _UnaryViewAdaptor<A>()
{
}

uint64_t static ViewDescriptor.typeCache.getter()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static ViewDescriptor.typeCache.setter(void *a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static ViewDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ViewDescriptor.typeCache.modify())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static ViewDescriptor.insertConditionalType(key:value:)(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if (one-time initialization token for conditionalCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = static ViewDescriptor.conditionalCache;
  static ViewDescriptor.conditionalCache = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v5, a1, isUniquelyReferenced_nonNull_native);
  static ViewDescriptor.conditionalCache = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance ViewDescriptor(void *a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static ViewDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

void protocol witness for View.body.getter in conformance EmptyView()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _VariadicView_Children@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance _VariadicView_Children(a1, a2, (uint64_t)partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:), a3);
}

void protocol witness for View.body.getter in conformance _VariadicView_Children()
{
}

void protocol witness for View.body.getter in conformance _VariadicView_Children.Element()
{
}

void protocol witness for View.body.getter in conformance _ViewList_View()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PhaseAnimator<A, B>.StateTransitioningContainer@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void protocol witness for View.body.getter in conformance PhaseAnimator<A, B>.StateTransitioningContainer()
{
}

void protocol witness for View.body.getter in conformance AnyView()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _BackdropEffectPlaceholder@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_BackdropEffectPlaceholder>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_BackdropEffectPlaceholder>, (uint64_t)&type metadata for _BackdropEffectPlaceholder, (uint64_t)&protocol witness table for _BackdropEffectPlaceholder);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance _BackdropEffectPlaceholder()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MeshGradient@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<MeshGradient>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance <A> A?()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TestIDView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void protocol witness for View.body.getter in conformance TestIDView<A, B>()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SubviewsCollection@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance _VariadicView_Children(a1, a2, (uint64_t)partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:), a3);
}

void protocol witness for View.body.getter in conformance SubviewsCollection()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SubviewsCollectionSlice@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance _VariadicView_Children(a1, a2, (uint64_t)partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:), a3);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _VariadicView_Children@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  int v6 = *a1;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 20);
  uint64_t v13 = *a2;
  int v14 = v7;
  uint64_t v15 = v8;
  long long v10 = *(_OWORD *)(a2 + 5);
  long long v16 = *(_OWORD *)(a2 + 3);
  long long v17 = v10;
  long long v18 = *(_OWORD *)(a2 + 7);
  uint64_t v19 = a2[9];
  int v20 = v9;
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = v6;
  static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v13, a3, v11, a4);

  return swift_release();
}

void protocol witness for View.body.getter in conformance SubviewsCollectionSlice()
{
}

void protocol witness for View.body.getter in conformance <> _ConditionalContent<A, B>()
{
}

void protocol witness for View.body.getter in conformance <> ForEach<A, B, C>()
{
}

void protocol witness for View.body.getter in conformance Canvas<A>()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ColorView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<ColorView>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance ColorView()
{
}

void protocol witness for View.body.getter in conformance _ShapeView<A, B>()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AnimatedShape<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void protocol witness for View.body.getter in conformance AnimatedShape<A>()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FillShapeView<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

void protocol witness for View.body.getter in conformance FillShapeView<A, B, C>()
{
}

void protocol witness for View.body.getter in conformance StrokeShapeView<A, B, C>()
{
}

void protocol witness for View.body.getter in conformance StrokeBorderShapeView<A, B, C>()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BackdropView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<BackdropView>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void protocol witness for View.body.getter in conformance BackdropView()
{
}

void protocol witness for View.body.getter in conformance Image()
{
}

void protocol witness for View.body.getter in conformance Subview()
{
}

void specialized PrimitiveView.body.getter()
{
}

uint64_t dispatch thunk of static View._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static View._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static View._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of View.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t getEnumTagSinglePayload for _UnaryViewAdaptor(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _UnaryViewAdaptor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245F7B990);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t dispatch thunk of ViewVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ViewTypeVisitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t sub_245F7B9EC()
{
  return swift_deallocObject();
}

uint64_t sub_245F7BA48()
{
  return swift_deallocObject();
}

uint64_t sub_245F7BAB4()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v2;
  v5[4] = *(_OWORD *)(a1 + 64);
  int v6 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  return specialized closure #1 in static View.makeImplicitRoot(view:inputs:)(v5, a2);
}

uint64_t AnimatablePair.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, v3);
  uint64_t v6 = v3 + *(int *)(a3 + 52);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 24) - 8) + 16);

  return v7(a2, v6);
}

uint64_t static AnimatablePair.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static AnimatablePair.-= infix(_:_:)(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8DF38]);
}

uint64_t static AnimatablePair.zero.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  unsigned int v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unsigned int v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  return AnimatablePair.init(_:_:)((uint64_t)v10, (uint64_t)v7, a1, a2, a3);
}

uint64_t static AnimatablePair.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static AnimatablePair.-= infix(_:_:)(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8DF30]);
}

uint64_t static AnimatablePair.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, void))
{
  a7(a1, a2, a3, *(void *)(a5 + 8));
  uint64_t v12 = type metadata accessor for AnimatablePair();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))a7)(a1 + *(int *)(v12 + 52), a2 + *(int *)(v12 + 52), a4, *(void *)(a6 + 8));
}

Swift::Void __swiftcall AnimatablePair.scale(by:)(Swift::Double by)
{
  uint64_t v2 = v1;
  (*(void (**)(void))(*(void *)(v1 + 32) + 16))(*(void *)(v1 + 16));
  (*(void (**)(void, double))(*(void *)(v2 + 40) + 16))(*(void *)(v2 + 24), by);
}

double AnimatablePair.magnitudeSquared.getter(void *a1)
{
  double v2 = (*(double (**)(void))(a1[4] + 24))(a1[2]);
  return v2 + (*(double (**)(void))(a1[5] + 24))(a1[3]);
}

uint64_t Array<A>.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v10[5] = a1;
  void v10[2] = a2;
  v10[3] = a3;
  uint64_t v5 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Array<A>.animatableData.getter, (uint64_t)v10, v5, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v8);
  *a4 = result;
  return result;
}

uint64_t Array<A>.animatableData.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = MEMORY[0x24C522E60](v9, v5);
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = MEMORY[0x24C522E60](v11, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12 >= v10) {
    uint64_t v14 = v10;
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v14)
    {
      Swift::Int v15 = 0;
      uint64_t v20 = a2;
      uint64_t v21 = a3;
      char v16 = *(void (**)(char *, uint64_t, uint64_t))(a3 + 32);
      uint64_t v18 = AssociatedTypeWitness;
      uint64_t v19 = v16;
      do
      {
        uint64_t v17 = v14;
        swift_bridgeObjectRetain();
        Array.subscript.getter();
        swift_bridgeObjectRelease();
        Array._makeMutableAndUnique()();
        Array._checkSubscript_mutating(_:)(v15);
        _swift_isClassOrObjCExistentialType();
        v19(v8, v5, v21);
        uint64_t v14 = v17;
        ++v15;
      }
      while (v17 != v15);
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static AnimatablePair.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static AnimatablePair.- infix(_:_:)(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8DF28], a7);
}

uint64_t AnimatablePair.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AnimatablePair.first.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AnimatablePair.first.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AnimatablePair.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t AnimatablePair.second.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*AnimatablePair.second.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for AnimatablePair.subscript() : <A, B>AnimatablePair<A, B>AB@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v3 = *(void *)(a2 + a1 - 32);
  uint64_t v4 = *(void *)(a2 + a1 - 8);
  long long v24 = *(_OWORD *)(a2 + a1 - 24);
  uint64_t v5 = v24;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v24 - v12;
  uint64_t v14 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v26 = v3;
  long long v27 = v24;
  uint64_t v28 = v4;
  uint64_t v18 = type metadata accessor for AnimatablePair();
  AnimatablePair.subscript.getter((uint64_t)v17, (uint64_t)v13, v18);
  uint64_t v19 = &v9[*(int *)(v7 + 56)];
  uint64_t v20 = *(void (**)(void))(v14 + 32);
  ((void (*)(char *, char *, uint64_t))v20)(v9, v17, v3);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v21(v19, v13, v5);
  uint64_t v22 = v25 + *(int *)(v7 + 56);
  v20();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(v22, v19, v5);
}

uint64_t key path setter for AnimatablePair.subscript() : <A, B>AnimatablePair<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 32);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  long long v18 = *(_OWORD *)(a4 + a3 - 24);
  uint64_t v7 = v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  double v9 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v13 = *(int *)(v12 + 56);
  uint64_t v14 = (uint64_t)&v11[v13];
  uint64_t v15 = a1 + v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(v5 - 8) + 16))(v11, a1, v5, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v14, v15, v7);
  uint64_t v19 = v5;
  long long v20 = v18;
  uint64_t v21 = v6;
  uint64_t v16 = type metadata accessor for AnimatablePair();
  return AnimatablePair.subscript.setter((uint64_t)v11, v14, v16);
}

uint64_t AnimatablePair.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v28 = a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  double v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v26 = (char *)&v25 + *(int *)(v7 + 56) - v12;
  uint64_t v14 = v26;
  uint64_t v27 = v5;
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 32);
  v16((char *)&v25 - v12, a1, v5, v11);
  uint64_t v17 = v4;
  uint64_t v25 = v4;
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
  v19(v14, v28, v17);
  long long v20 = &v9[*(int *)(v7 + 56)];
  uint64_t v21 = v27;
  ((void (*)(char *, char *, uint64_t))v16)(v9, v13, v27);
  uint64_t v22 = v25;
  v19(v20, (uint64_t)v26, v25);
  uint64_t v23 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v30, v9, v21);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 40))(v23 + *(int *)(v29 + 52), v20, v22);
}

void (*AnimatablePair.subscript.modify(void *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v5 = malloc(0x58uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  v5[2] = v7;
  v5[3] = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[4] = TupleTypeMetadata2;
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  long long v5[5] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v5[6] = malloc(v10);
  __n128 v11 = (char *)malloc(v10);
  v5[7] = v11;
  uint64_t v12 = *(int *)(TupleTypeMetadata2 + 48);
  *((_DWORD *)v5 + 20) = v12;
  uint64_t v13 = &v11[v12];
  uint64_t v14 = *(void *)(v7 - 8);
  v5[8] = v14;
  (*(void (**)(void))(v14 + 16))();
  uint64_t v15 = v2 + *(int *)(a2 + 52);
  uint64_t v16 = *(void *)(v6 - 8);
  v5[9] = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v15, v6);
  return AnimatablePair.subscript.modify;
}

void AnimatablePair.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *(void **)(*a1 + 48);
  uint64_t v3 = *(char **)(*a1 + 56);
  if (a2)
  {
    uint64_t v5 = *(void *)(v2 + 32);
    uint64_t v6 = *(void *)(v2 + 40);
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t v8 = *(void *)v2;
    uint64_t v11 = *(void *)(v2 + 72);
    uint64_t v9 = &v3[*(int *)(v2 + 80)];
    uint64_t v10 = (uint64_t)v4 + *(int *)(v5 + 48);
    (*(void (**)(void, void))(*(void *)(v2 + 64) + 16))(*(void *)(v2 + 48), *(void *)(v2 + 56));
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v10, v9, v7);
    AnimatablePair.subscript.setter((uint64_t)v4, v10, v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    AnimatablePair.subscript.setter(*(void *)(v2 + 56), (uint64_t)&v3[*(int *)(v2 + 80)], *(void *)v2);
  }
  free(v3);
  free(v4);

  free((void *)v2);
}

uint64_t static AnimatablePair.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static AnimatablePair.- infix(_:_:)(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8DF20], a7);
}

uint64_t static AnimatablePair.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t, uint64_t, uint64_t, void)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v25 = a8;
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  long long v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21(v18);
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v22 = type metadata accessor for AnimatablePair();
  a7(a1 + *(int *)(v22 + 52), a2 + *(int *)(v22 + 52), a4, *(void *)(a6 + 8));
  return AnimatablePair.init(_:_:)((uint64_t)v20, (uint64_t)v16, a3, a4, v25);
}

uint64_t protocol witness for VectorArithmetic.scale(by:) in conformance AnimatablePair<A, B>(void *a1, double a2)
{
  return (*(uint64_t (**)(void, double))(a1[5] + 16))(a1[3], a2);
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance AnimatablePair<A, B>(void *a1)
{
  double v2 = (*(double (**)(void))(a1[4] + 24))(a1[2]);
  return v2 + (*(double (**)(void))(a1[5] + 24))(a1[3]);
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance AnimatablePair<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v6 + 16);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  return AnimatablePair.init(_:_:)((uint64_t)v9, (uint64_t)v5, v7, v3, a2);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatablePair<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatablePair<A, B>(a1, a2, a3, MEMORY[0x263F8DF20], a4);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatablePair<A, B>(a1, a2, a3, a4, MEMORY[0x263F8DF30]);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance AnimatablePair<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatablePair<A, B>(a1, a2, a3, MEMORY[0x263F8DF28], a4);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatablePair<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, uint64_t, void)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v9 = *(void *)(a3 + 24);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 16);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18(v15);
  a4(a1 + *(int *)(a3 + 52), a2 + *(int *)(a3 + 52), v9, *(void *)(*(void *)(a3 + 40) + 8));
  return AnimatablePair.init(_:_:)((uint64_t)v17, (uint64_t)v11, v13, v9, v21);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatablePair<A, B>(a1, a2, a3, a4, MEMORY[0x263F8DF38]);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatablePair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return ((uint64_t (*)(uint64_t, uint64_t))a5)(a1 + *(int *)(a3 + 52), a2 + *(int *)(a3 + 52));
}

uint64_t AnimatableArray.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnimatableArray.elements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*AnimatableArray.elements.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AnimatableArray.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static AnimatableArray.zero.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Array._allocateUninitialized(_:)();
  *a1 = result;
  return result;
}

uint64_t static AnimatableArray.+= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AnimatableArray.+= infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF30]);
}

uint64_t static AnimatableArray.-= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AnimatableArray.+= infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF38]);
}

uint64_t static AnimatableArray.+= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(unint64_t, char *, uint64_t, void))
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v12;
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x24C522E60](v14, a3);
  swift_bridgeObjectRelease();
  uint64_t result = MEMORY[0x24C522E60](v13, a3);
  if (result >= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = result;
  }
  if (v17 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v27 = a4;
    if (v17)
    {
      double v18 = a5;
      Swift::Int v19 = 0;
      uint64_t v26 = v9 + 8;
      do
      {
        Swift::Int v20 = v19 + 1;
        uint64_t v21 = v17;
        Array.subscript.getter();
        type metadata accessor for Array();
        uint64_t v22 = v18;
        Array._makeMutableAndUnique()();
        uint64_t v23 = *a1;
        Array._checkSubscript_mutating(_:)(v19);
        char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        uint64_t v25 = v23 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0) {
          uint64_t v25 = v23;
        }
        v22(v25+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v19, v11, a3, *(void *)(v27 + 8));
        double v18 = v22;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
        uint64_t v17 = v21;
        ++v19;
      }
      while (v21 != v20);
    }
  }
  return result;
}

uint64_t static AnimatableArray.+ infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return static AnimatableArray.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t *, uint64_t, uint64_t))static AnimatableArray.+= infix(_:_:), a5);
}

uint64_t static AnimatableArray.- infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return static AnimatableArray.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t *, uint64_t, uint64_t))static AnimatableArray.-= infix(_:_:), a5);
}

uint64_t static AnimatableArray.+ infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void *, uint64_t *, uint64_t, uint64_t)@<X4>, void *a6@<X8>)
{
  uint64_t v10 = *a2;
  *a6 = *a1;
  uint64_t v12 = v10;
  swift_bridgeObjectRetain();
  return a5(a6, &v12, a3, a4);
}

Swift::Void __swiftcall AnimatableArray.scale(by:)(Swift::Double by)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  type metadata accessor for Array();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  Swift::Int v5 = v8;
  if (v8 != v9)
  {
    if (v9 < v8)
    {
      __break(1u);
    }
    else if (v8 < v9)
    {
      uint64_t v6 = *(void *)(v2 + 24);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t, double))(v6 + 16);
      do
      {
        Array._makeMutableAndUnique()();
        Array._checkSubscript_mutating(_:)(v5);
        _swift_isClassOrObjCExistentialType();
        v7(v4, v6, by);
        ++v5;
      }
      while (v9 != v5);
      return;
    }
    __break(1u);
  }
}

double AnimatableArray.magnitudeSquared.getter()
{
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static AnimatableArray.== infix(_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F9DCF8](*a1, *a2, a3, *(void *)(*(void *)(a4 + 8) + 8));
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance AnimatableArray<A>@<X0>(uint64_t *a1@<X8>)
{
  return static AnimatableArray.zero.getter(a1);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatableArray<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatableArray<A>(a1, a2, a3, (uint64_t (*)(void *, uint64_t *, uint64_t, uint64_t))static AnimatableArray.+= infix(_:_:), a4);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance AnimatableArray<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static AnimatableArray.+= infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance AnimatableArray<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatableArray<A>(a1, a2, a3, (uint64_t (*)(void *, uint64_t *, uint64_t, uint64_t))static AnimatableArray.-= infix(_:_:), a4);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance AnimatableArray<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void *, uint64_t *, uint64_t, uint64_t)@<X4>, void *a5@<X8>)
{
  uint64_t v7 = *a2;
  *a5 = *a1;
  uint64_t v11 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  swift_bridgeObjectRetain();
  return a4(a5, &v11, v8, v9);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance AnimatableArray<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static AnimatableArray.-= infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatableArray<A>(void *a1, void *a2, uint64_t a3)
{
  return static AnimatableArray.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t key path setter for Array<A>.animatableData : <A>[A](uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  uint64_t v5 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  return Array<A>.animatableData.setter((uint64_t)&v7, v5, v4);
}

uint64_t partial apply for closure #1 in Array<A>.animatableData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t (*Array<A>.animatableData.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = (uint64_t)v3;
  a1[1] = a2;
  Array<A>.animatableData.getter(*v3, *(void *)(a2 + 16), a3, a1);
  return Array<A>.animatableData.modify;
}

uint64_t Array<A>.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  if (a2)
  {
    uint64_t v5 = *a1;
    swift_bridgeObjectRetain();
    Array<A>.animatableData.setter((uint64_t)&v5, v3, v2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *a1;
    return Array<A>.animatableData.setter((uint64_t)&v5, v3, v2);
  }
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v5 = v2;
  }
  if (*(void *)(v5 + 16) <= (unint64_t)a1) {
    goto LABEL_7;
  }
}

double partial apply for closure #1 in AnimatableArray.magnitudeSquared.getter@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v4 = *a1;
  double result = v4
         + (*(double (**)(void, void))(*(void *)(v2 + 24) + 24))(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_245F7D924()
{
  return 32;
}

__n128 sub_245F7D930(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_245F7D93C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = Array<A>.animatableData.getter(*a1, *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8), &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_245F7D984()
{
  return 16;
}

__n128 sub_245F7D990(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t key path getter for _ViewInputs.environment : _ViewInputs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 16);
  return result;
}

double _GestureInputs.init(_:viewSubgraph:events:time:resetSeed:inheritedPhase:gesturePreferenceKeys:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[2];
  int v10 = *((_DWORD *)a1 + 20);
  *(_DWORD *)(a8 + 116) = a6;
  *(_DWORD *)(a8 + 120) = 0;
  *(void *)a8 = v8;
  *(void *)(a8 + 16) = v9;
  *(_OWORD *)(a8 + 24) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a8 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(a8 + 56) = *(_OWORD *)(a1 + 7);
  double result = *((double *)a1 + 9);
  *(double *)(a8 + 72) = result;
  *(_DWORD *)(a8 + 80) = v10;
  *(_DWORD *)(a8 + 8) = a4;
  *(_DWORD *)(a8 + 112) = a5;
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)(a8 + 88) = a2;
  *(void *)(a8 + 96) = v12;
  *(_DWORD *)(a8 + 104) = a7;
  *(_DWORD *)(a8 + 108) = a3;
  return result;
}

void static _GestureInputs.Options.gestureGraph.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static _GestureInputs.Options.skipCombiners.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _GestureInputs.Options.includeDebugOutput.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

unint64_t _GestureOutputs.debugData.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 4);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t _GestureOutputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = PreferencesOutputs.subscript.getter(a1, a3, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t _GestureOutputs.init(phase:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *MEMORY[0x263F288F8];
  *(void *)(a2 + 8) = MEMORY[0x263F8EE78];
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)a2 = result;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

void protocol witness for Gesture.body.getter in conformance SimultaneousGesture<A, B>()
{
}

void PrimitiveGesture.body.getter()
{
}

void protocol witness for Gesture.body.getter in conformance ExclusiveGesture<A, B>()
{
}

uint64_t _GestureInputs.time.getter()
{
  return *(unsigned int *)(v0 + 8);
}

void protocol witness for Gesture.body.getter in conformance <> StaticIf<A, B, C>()
{
}

unint64_t _GestureInputs.animatedPosition()()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(_DWORD *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  int v6 = *(_DWORD *)(v0 + 80);
  AGGraphClearUpdate();
  id v7 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t v11 = v1;
  int v12 = v2;
  uint64_t v13 = v3;
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v14 = *(void *)(v0 + 24);
  uint64_t v15 = v8;
  uint64_t v16 = v4;
  uint64_t v17 = v5;
  long long v18 = *(_OWORD *)(v0 + 56);
  uint64_t v19 = *(void *)(v0 + 72);
  int v20 = v6;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v9 = CachedEnvironment.animatedPosition(for:)(&v11);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v9;
}

uint64_t _GestureInputs.transform.getter()
{
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 0;
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v3, 0);
  AGGraphClearUpdate();
  id v0 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return IndirectAttribute2;
}

void static _GestureInputs.Options.preconvertedEventLocations.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for Gesture.body.getter in conformance ModifierGesture<A, B>()
{
}

uint64_t _GestureInputs.position.getter()
{
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v0 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return IndirectAttribute2;
}

uint64_t _GestureInputs.size.getter()
{
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v0 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return IndirectAttribute2;
}

uint64_t _GestureOutputs.debugData.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 4) = v2;
  return result;
}

void static _GestureInputs.Options.allowsIncompleteEventSequences.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void protocol witness for Gesture.body.getter in conformance EventListener<A>()
{
}

void protocol witness for Gesture.body.getter in conformance _EndedGesture<A>()
{
}

void protocol witness for Gesture.body.getter in conformance _ChangedGesture<A>()
{
}

uint64_t _GestureOutputs.withPhase<A>(_:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(v2 + 4);
  uint64_t v5 = *(void *)(v2 + 8);
  int v6 = *(_DWORD *)(v2 + 16);
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = v4;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance OpenURLGesture<A>@<X0>(int *a1@<X0>, long long *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static Gesture<>._makeGesture(gesture:inputs:)(a1, a2, a3, a4);
}

uint64_t specialized static Gesture<>._makeGesture(gesture:inputs:)@<X0>(int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  type metadata accessor for DefaultRule<GestureDebug.Data>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  static DynamicPropertyCache.fields(of:)(v5, (uint64_t)&v27);
  long long v6 = v27;
  char v7 = v28;
  char v8 = BYTE4(v28);
  long long v9 = a2[5];
  long long v31 = a2[4];
  long long v32 = v9;
  v33[0] = a2[6];
  *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)a2 + 108);
  long long v10 = a2[1];
  long long v27 = *a2;
  long long v28 = v10;
  long long v11 = a2[3];
  long long v29 = a2[2];
  long long v30 = v11;
  outlined retain of _GestureInputs((uint64_t)a2);
  int v12 = a1;
  if (v8) {
    specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v20 + 8, v6, *((uint64_t *)&v6 + 1), v7, a1, (uint64_t)&v27);
  }
  else {
    specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v20 + 8, v6, *((uint64_t *)&v6 + 1), v7, a1, (uint64_t)&v27);
  }
  uint64_t v13 = *((void *)&v20 + 1);
  uint64_t v14 = v21;
  char v15 = BYTE8(v21);
  specialized static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)a2, (uint64_t)&v20);
  long long v16 = v20;
  int v18 = v21;
  if ((v15 & 1) == 0)
  {
    LOBYTE(v20) = v7;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v12, v6, *((uint64_t *)&v6 + 1), v7, v13, v14);
  }
  long long v24 = v31;
  long long v25 = v32;
  v26[0] = v33[0];
  *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)((char *)v33 + 12);
  long long v20 = v27;
  long long v21 = v28;
  long long v22 = v29;
  long long v23 = v30;
  outlined release of _GestureInputs((uint64_t)&v20);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_OWORD *)a3 = v16;
  *(_DWORD *)(a3 + 16) = v18;
  return result;
}

{
  long long v5;
  char v6;
  char v7;
  long long v8;
  long long v9;
  long long v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  long long v15;
  uint64_t result;
  int v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  _OWORD v25[2];
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  _OWORD v32[2];
  uint64_t v33;

  uint64_t v33 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)((uint64_t)&type metadata for DistanceGesture, (uint64_t)&v26);
  uint64_t v5 = v26;
  long long v6 = v27;
  char v7 = BYTE4(v27);
  char v8 = a2[5];
  long long v30 = a2[4];
  long long v31 = v8;
  v32[0] = a2[6];
  *(_OWORD *)((char *)v32 + 12) = *(long long *)((char *)a2 + 108);
  long long v9 = a2[1];
  uint64_t v26 = *a2;
  long long v27 = v9;
  long long v10 = a2[3];
  long long v28 = a2[2];
  long long v29 = v10;
  outlined retain of _GestureInputs((uint64_t)a2);
  long long v11 = a1;
  if (v7) {
    specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v19, (uint64_t)&v19 + 8, v5, *((uint64_t *)&v5 + 1), v6, a1, (uint64_t)&v26);
  }
  else {
    specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v19, (uint64_t)&v19 + 8, v5, *((uint64_t *)&v5 + 1), v6, a1, (uint64_t)&v26);
  }
  int v12 = *((void *)&v19 + 1);
  uint64_t v13 = v20;
  uint64_t v14 = BYTE8(v20);
  specialized static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)a2, (uint64_t)&v19);
  char v15 = v19;
  uint64_t v17 = v20;
  if ((v14 & 1) == 0)
  {
    LOBYTE(v19) = v6;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v11, v5, *((uint64_t *)&v5 + 1), v6, v12, v13);
  }
  long long v23 = v30;
  long long v24 = v31;
  v25[0] = v32[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v32 + 12);
  uint64_t v19 = v26;
  long long v20 = v27;
  long long v21 = v28;
  long long v22 = v29;
  outlined release of _GestureInputs((uint64_t)&v19);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_OWORD *)a3 = v15;
  *(_DWORD *)(a3 + 16) = v17;
  return result;
}

void specialized static Gesture<>._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2)
{
  static DynamicPropertyCache.fields(of:)(MEMORY[0x263F8E628], (uint64_t)v10);
  uint64_t v4 = v10[0];
  uint64_t v5 = v10[1];
  unsigned __int8 v6 = v11;
  unsigned int v7 = v12;
  outlined retain of _GestureInputs(a2);
  LOBYTE(v10[0]) = v6;
  specialized BodyAccessor.makeBody(container:inputs:fields:)(v9, v8, a1, v10, v4, v5, v6 | ((unint64_t)v7 << 32));
}

void sub_245F7E554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  specialized static Gesture<>._makeGesture(gesture:inputs:)(a14, v14);
}

uint64_t sub_245F7E574()
{
  if ((*(unsigned char *)(v2 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? v1 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = 1;
    }
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v9, 0x100000000, v2);
  }
  if ((v7 & 1) == 0) {
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v6, v3, v4, v5, v12, v11);
  }
  outlined release of _GestureInputs(v2);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)uint64_t v0 = v13;
  *(void *)(v0 + 8) = v14;
  *(_DWORD *)(v0 + 16) = v15;
  return result;
}

uint64_t static Gesture<>._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  long long v7 = a2[5];
  long long v54 = a2[4];
  long long v55 = v7;
  *(_OWORD *)uint64_t v56 = a2[6];
  *(_OWORD *)&v56[12] = *(long long *)((char *)a2 + 108);
  long long v8 = a2[1];
  long long v50 = *a2;
  long long v51 = v8;
  long long v9 = a2[3];
  long long v52 = a2[2];
  long long v53 = v9;
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v43);
  long long v10 = v43;
  char v11 = v44;
  int v12 = DWORD1(v44);
  long long v47 = v54;
  long long v48 = v55;
  v49[0] = *(_OWORD *)v56;
  *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)&v56[12];
  long long v43 = v50;
  long long v44 = v51;
  long long v45 = v52;
  long long v46 = v53;
  int v27 = v12;
  int v28 = v6;
  LODWORD(v35) = v6;
  long long v36 = v10;
  char v30 = v11;
  LOBYTE(v37) = v11;
  DWORD1(v37) = v12;
  outlined retain of _GestureInputs((uint64_t)&v50);
  uint64_t v13 = type metadata accessor for GestureBodyAccessor();
  uint64_t WitnessTable = swift_getWitnessTable();
  BodyAccessor.makeBody(container:inputs:fields:)(&v31, (uint64_t)&v32, (uint64_t)&v35, (uint64_t)&v43, (uint64_t)&v36, v13, WitnessTable);
  long long v26 = v32;
  char v29 = v33;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v40 = v54;
  long long v41 = v55;
  v42[0] = *(_OWORD *)v56;
  *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)&v56[12];
  long long v36 = v50;
  long long v37 = v51;
  long long v38 = v52;
  long long v39 = v53;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(long long *__return_ptr, int *, long long *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v32, &v31, &v36, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v56[24] & 8) != 0 && !(swift_conformsToProtocol2() ? AssociatedTypeWitness : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v18 = 2;
    }
    else {
      char v18 = 1;
    }
    LOBYTE(v35) = v18;
    long long v40 = v54;
    long long v41 = v55;
    v42[0] = *(_OWORD *)v56;
    *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)&v56[12];
    long long v36 = v50;
    long long v37 = v51;
    long long v38 = v52;
    long long v39 = v53;
    unsigned int v19 = DWORD1(v32);
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    BOOL v20 = v19 == *MEMORY[0x263F288F8];
    if (v19 == *MEMORY[0x263F288F8]) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v19;
    }
    LOBYTE(v31) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(AssociatedTypeWitness, (char *)&v35, 0x100000000, &v36, v21 | ((unint64_t)v20 << 32), 0x100000000);
  }
  uint64_t v22 = *((void *)&v32 + 1);
  uint64_t v23 = v32;
  int v24 = v33;
  if ((v29 & 1) == 0)
  {
    long long v35 = v26;
    int v31 = v28;
    long long v32 = v10;
    LOBYTE(v33) = v30;
    int v34 = v27;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v31, (uint64_t *)&v32, a3);
  }
  long long v40 = v47;
  long long v41 = v48;
  v42[0] = v49[0];
  *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v49 + 12);
  long long v36 = v43;
  long long v37 = v44;
  long long v38 = v45;
  long long v39 = v46;
  outlined release of _GestureInputs((uint64_t)&v36);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a4 = v23;
  *(void *)(a4 + 8) = v22;
  *(_DWORD *)(a4 + 16) = v24;
  return result;
}

uint64_t _GestureInputs.makeDefaultOutputs<A>()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(v1 + 96);
  int v4 = *(_DWORD *)(v1 + 104);
  int v5 = *(_DWORD *)(v1 + 120);
  uint64_t v6 = type metadata accessor for GesturePhase();
  swift_getWitnessTable();
  DefaultRule.init()(&v17);
  uint64_t v15 = v17;
  uint64_t v21 = v6;
  uint64_t v7 = type metadata accessor for DefaultRule();
  uint64_t v22 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v15, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v20, v7, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  int v10 = v19;
  int v11 = *MEMORY[0x263F288F8];
  if ((v5 & 8) != 0)
  {
    uint64_t v17 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for DefaultRule<GestureDebug.Data>(0, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DefaultRule);
    lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>();
    int v11 = Attribute.init<A>(body:value:flags:update:)();
  }
  uint64_t v15 = v3;
  int v16 = v4;
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v17);
  uint64_t v12 = v17;
  int v13 = v18;
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a1 = v10;
  *(_DWORD *)(a1 + 4) = v11;
  *(void *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 16) = v13;
  return result;
}

void _GestureInputs.mergeViewInputs(_:viewSubgraph:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  int v16 = *((_DWORD *)a1 + 20);
  int v18 = *(_DWORD *)(v2 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)uint64_t v2 = v4;
  *(void *)(v2 + 16) = v5;
  uint64_t v8 = a1[4];
  *(void *)(v2 + 24) = a1[3];
  *(void *)(v2 + 32) = v8;
  *(void *)(v2 + 40) = v6;
  *(void *)(v2 + 48) = v7;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 7);
  *(void *)(v2 + 72) = a1[9];
  *(_DWORD *)(v2 + 80) = v16;
  *(_DWORD *)(v2 + 8) = v18;
  swift_beginAccess();
  LODWORD(v6) = *(_DWORD *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  long long v17 = *(_OWORD *)(v5 + 48);
  long long v19 = *(_OWORD *)(v5 + 32);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(void *)(v5 + 72);
  char v12 = *(unsigned char *)(v5 + 80);
  char v13 = *(unsigned char *)(v5 + 81);
  uint64_t v14 = *(void *)(v5 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v6;
  *(void *)(v15 + 24) = v9;
  *(_OWORD *)(v15 + 32) = v19;
  *(_OWORD *)(v15 + 48) = v17;
  *(void *)(v15 + 64) = v10;
  *(void *)(v15 + 72) = v11;
  *(unsigned char *)(v15 + 80) = v12;
  *(unsigned char *)(v15 + 81) = v13;
  *(void *)(v15 + 88) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v2 + 16) = v15;
  objc_storeStrong((id *)(v2 + 88), a2);
}

uint64_t _GestureOutputs.overrideDefaultValues(_:)(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  int v5 = *(_DWORD *)(v1 + 4);
  uint64_t v6 = *(void *)(v1 + 8);
  int v7 = *(_DWORD *)(v1 + 16);
  type metadata accessor for GesturePhase();
  swift_getWitnessTable();
  LOBYTE(v13) = 0;
  uint64_t v8 = Attribute.overrideDefaultValue<A>(_:type:)();
  if (v5 != *MEMORY[0x263F288F8] && v2 != *MEMORY[0x263F288F8])
  {
    MEMORY[0x270FA5388](v8);
    type metadata accessor for DefaultRule<GestureDebug.Data>(0, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DefaultRule);
    MEMORY[0x270FA5388](v9);
    AGGraphMutateAttribute();
  }
  uint64_t v13 = v6;
  int v14 = v7;
  uint64_t v11 = v3;
  int v12 = v4;
  return PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v11);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance DistanceGesture@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[5];
  v8[4] = a2[4];
  v8[5] = v4;
  v9[0] = a2[6];
  *(_OWORD *)((char *)v9 + 12) = *(long long *)((char *)a2 + 108);
  long long v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  long long v6 = a2[3];
  _DWORD v8[2] = a2[2];
  v8[3] = v6;
  return specialized static Gesture<>._makeGesture(gesture:inputs:)(v3, v8, a3);
}

uint64_t _GestureInputs.intern<A>(_:id:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v5 = *a2;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v6 = (id)AGSubgraphGetCurrent();
    if (!v6) {
      goto LABEL_8;
    }
    int v7 = v6;
    id v8 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v8 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    char v12 = v5;
    Swift::UInt v9 = default argument 1 of GraphHost.intern<A>(_:for:id:)(a3);
    uint64_t v10 = GraphHost.intern<A>(_:for:id:)(a1, v9, &v12, a3);
    swift_release();
    return v10;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for Gesture.body.getter in conformance _MapGesture<A, B>()
{
}

void protocol witness for Gesture.body.getter in conformance EmptyGesture<A>()
{
}

uint64_t _GestureInputs.makeIndirectOutputs<A>()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GesturePhase();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)v15 - v5;
  uint64_t v7 = *(void *)(v1 + 96);
  int v8 = *(_DWORD *)(v1 + 104);
  int v9 = *(_DWORD *)(v1 + 120);
  static GesturePhase.defaultValue.getter();
  LOBYTE(v19[0]) = 0;
  _GestureInputs.intern<A>(_:id:)((uint64_t)v6, (char *)v19, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  int v11 = *MEMORY[0x263F288F8];
  if ((v9 & 8) != 0)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    v19[6] = xmmword_268EFAF78;
    v19[7] = xmmword_268EFAF88;
    v19[8] = xmmword_268EFAF98;
    id v19[2] = xmmword_268EFAF38;
    v19[3] = xmmword_268EFAF48;
    v19[4] = xmmword_268EFAF58;
    v19[5] = xmmword_268EFAF68;
    v19[0] = static GestureDebug.Data.defaultValue;
    v19[1] = xmmword_268EFAF28;
    outlined retain of GestureDebug.Data((uint64_t)v19);
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v19, 0);
    outlined release of GestureDebug.Data((uint64_t)v19);
    int v11 = AGGraphCreateIndirectAttribute2();
  }
  void v15[2] = v7;
  int v16 = v8;
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v17);
  uint64_t v12 = v17;
  int v13 = v18;
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a1 = IndirectAttribute2;
  *(_DWORD *)(a1 + 4) = v11;
  *(void *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t _GestureOutputs.setIndirectDependency(_:)()
{
  int v1 = *(_DWORD *)(v0 + 4);
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *MEMORY[0x263F288F8];
  uint64_t result = AGGraphSetIndirectDependency();
  if (v1 != v3) {
    uint64_t result = AGGraphSetIndirectDependency();
  }
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v6 += 24;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void protocol witness for Gesture.body.getter in conformance AnyGesture<A>()
{
}

Swift::Void __swiftcall _GestureInputs.copyCaches()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  long long v10 = *(_OWORD *)(v1 + 48);
  long long v11 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  char v6 = *(unsigned char *)(v1 + 80);
  char v7 = *(unsigned char *)(v1 + 81);
  uint64_t v8 = *(void *)(v1 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v2;
  *(void *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v10;
  *(void *)(v9 + 64) = v4;
  *(void *)(v9 + 72) = v5;
  *(unsigned char *)(v9 + 80) = v6;
  *(unsigned char *)(v9 + 81) = v7;
  *(void *)(v9 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v0 + 16) = v9;
}

uint64_t _GestureOutputs.attachIndirectOutputs(_:)(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  int v5 = *(_DWORD *)(v1 + 4);
  uint64_t v6 = *(void *)(v1 + 8);
  int v7 = *(_DWORD *)(v1 + 16);
  AGGraphSetIndirectAttribute();
  if (v5 != *MEMORY[0x263F288F8] && v2 != *MEMORY[0x263F288F8]) {
    AGGraphSetIndirectAttribute();
  }
  uint64_t v11 = v6;
  int v12 = v7;
  uint64_t v9 = v3;
  int v10 = v4;
  return PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v9);
}

Swift::Void __swiftcall _GestureOutputs.detachIndirectOutputs()()
{
  int v1 = *(_DWORD *)(v0 + 4);
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *MEMORY[0x263F288F8];
  AGGraphSetIndirectAttribute();
  if (v1 != v3) {
    AGGraphSetIndirectAttribute();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 48;
    do
    {
      AGGraphSetIndirectAttribute();
      v5 += 24;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t _GestureInputs.failedPhase.getter()
{
  return specialized _GestureInputs.intern<A>(_:id:)(768, 4);
}

void protocol witness for Gesture.body.getter in conformance SubviewsGesture()
{
}

void protocol witness for Gesture.body.getter in conformance A?<A>.Empty()
{
}

void protocol witness for Gesture.body.getter in conformance <A> A?()
{
}

uint64_t specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t *a1)
{
  uint64_t result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

double static PubliclyPrimitiveGesture._makeGesture(gesture:inputs:)@<D0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)(a1, a2);
}

double static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)@<D0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = a1[5];
  long long v33 = a1[4];
  long long v34 = v3;
  long long v35 = a1[6];
  uint64_t v36 = *((void *)a1 + 14);
  long long v4 = a1[1];
  long long v29 = *a1;
  long long v30 = v4;
  long long v5 = a1[3];
  long long v31 = a1[2];
  long long v32 = v5;
  int v6 = *((_DWORD *)a1 + 30);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  KeyPath = (void *)swift_getKeyPath();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter(KeyPath, &v26);
  swift_release();
  long long v21 = v33;
  long long v22 = v34;
  long long v23 = v35;
  uint64_t v24 = v36;
  long long v17 = v29;
  long long v18 = v30;
  long long v19 = v31;
  long long v20 = v32;
  int v25 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(void *__return_ptr, int *, long long *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v27, &v26, &v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v6 & 8) != 0 && !(swift_conformsToProtocol2() ? AssociatedTypeWitness : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v11 = 2;
    }
    else {
      char v11 = 1;
    }
    LOBYTE(v26) = v11;
    long long v21 = v33;
    long long v22 = v34;
    long long v23 = v35;
    uint64_t v24 = v36;
    long long v17 = v29;
    long long v18 = v30;
    long long v19 = v31;
    long long v20 = v32;
    int v25 = v6;
    unsigned int v12 = HIDWORD(v27[0]);
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    if (v12 == *MEMORY[0x263F288F8]) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v12;
    }
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(AssociatedTypeWitness, (char *)&v26, 0x100000000, &v17, v13 | ((unint64_t)(v12 == *MEMORY[0x263F288F8]) << 32), 0x100000000);
  }
  uint64_t v14 = v27[1];
  int v15 = v28;
  double result = *(double *)v27;
  *(void *)a2 = v27[0];
  *(void *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = v15;
  return result;
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance Never(unsigned int *a1, _OWORD *a2)
{
  uint64_t v2 = *a1;
  long long v3 = a2[5];
  v6[4] = a2[4];
  v6[5] = v3;
  v7[0] = a2[6];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 108);
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  long long v5 = a2[3];
  id v6[2] = a2[2];
  v6[3] = v5;
  specialized static Gesture<>._makeGesture(gesture:inputs:)(v2, (uint64_t)v6);
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance GestureBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
}

uint64_t _GestureInputs.viewInputs.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  int v6 = *(_DWORD *)(v1 + 80);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 72) = *(void *)(v1 + 72);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

double _GestureInputs.viewInputs.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  int v6 = *((_DWORD *)a1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)uint64_t v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(void *)(v1 + 16) = v5;
  uint64_t v7 = a1[4];
  *(void *)(v1 + 24) = a1[3];
  *(void *)(v1 + 32) = v7;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v1 + 56) = *(_OWORD *)(a1 + 7);
  double result = *((double *)a1 + 9);
  *(double *)(v1 + 72) = result;
  *(_DWORD *)(v1 + 80) = v6;
  return result;
}

uint64_t (*_GestureInputs.viewInputs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id _GestureInputs.viewSubgraph.getter()
{
  return *(id *)(v0 + 88);
}

void _GestureInputs.viewSubgraph.setter(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
}

uint64_t (*_GestureInputs.viewSubgraph.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.preferences.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 104);
  *(void *)a1 = *(void *)(v1 + 96);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _GestureInputs.preferences.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = v2;
  *(_DWORD *)(v1 + 104) = v3;
  return result;
}

uint64_t (*_GestureInputs.preferences.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.events.getter()
{
  return *(unsigned int *)(v0 + 108);
}

uint64_t _GestureInputs.events.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 108) = result;
  return result;
}

uint64_t (*_GestureInputs.events.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.resetSeed.getter()
{
  return *(unsigned int *)(v0 + 112);
}

uint64_t _GestureInputs.resetSeed.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 112) = result;
  return result;
}

uint64_t (*_GestureInputs.resetSeed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.InheritedPhase.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::_GestureInputs::InheritedPhase __swiftcall _GestureInputs.InheritedPhase.init(rawValue:)(SwiftUI::_GestureInputs::InheritedPhase rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static _GestureInputs.InheritedPhase.active.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static _GestureInputs.InheritedPhase.defaultValue.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t _GestureInputs.inheritedPhase.getter()
{
  return *(unsigned int *)(v0 + 116);
}

uint64_t _GestureInputs.inheritedPhase.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 116) = result;
  return result;
}

uint64_t (*_GestureInputs.inheritedPhase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _GestureInputs.options.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 120);
}

_DWORD *_GestureInputs.options.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 120) = *result;
  return result;
}

uint64_t (*_GestureInputs.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_GestureInputs.platformInputs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureInputs.mapEnvironment<A>(_:)(void *a1)
{
  long long v3 = v1[5];
  unsigned char v9[4] = v1[4];
  v9[5] = v3;
  v10[0] = v1[6];
  *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)v1 + 108);
  long long v4 = v1[1];
  v9[0] = *v1;
  v9[1] = v4;
  long long v5 = v1[3];
  _OWORD v9[2] = v1[2];
  void v9[3] = v5;
  AGGraphClearUpdate();
  id v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in _GestureInputs.mapEnvironment<A>(_:)((uint64_t)v9, a1, &v8);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v8;
}

uint64_t closure #1 in _GestureInputs.mapEnvironment<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 48);
  _DWORD v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  int v9 = *(_DWORD *)(a1 + 80);
  outlined retain of _ViewInputs((uint64_t)v8);
  LODWORD(a2) = _ViewInputs.mapEnvironment<A>(_:)(a2);
  uint64_t result = outlined release of _ViewInputs((uint64_t)v8);
  *a3 = a2;
  return result;
}

uint64_t _GestureInputs.environment.getter()
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v1 = static CoreGlue2.shared;
  v0(&v5);

  specialized _GestureInputs.intern<A>(_:id:)(v5, v6, 0);
  AGGraphClearUpdate();
  id v2 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  swift_beginAccess();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_release();
  swift_release();
  return IndirectAttribute2;
}

uint64_t _GestureInputs.Options.rawValue.getter()
{
  return *v0;
}

uint64_t _GestureInputs.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _GestureOutputs.phase.getter()
{
  return *v0;
}

uint64_t _GestureOutputs.phase.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*_GestureOutputs.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GestureOutputs.preferences.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _GestureOutputs.preferences.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*_GestureOutputs.preferences.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t key path getter for _GestureOutputs.debugData : <A>_GestureOutputs<A>@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = _GestureOutputs.debugData.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for _GestureOutputs.debugData : <A>_GestureOutputs<A>(unsigned int *a1)
{
  return _GestureOutputs.debugData.setter(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t (*_GestureOutputs.debugData.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 4);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return _GestureOutputs.debugData.modify;
}

uint64_t _GestureOutputs.debugData.modify(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (*(unsigned char *)(result + 12)) {
    int v1 = *(_DWORD *)(result + 16);
  }
  *(_DWORD *)(*(void *)result + 4) = v1;
  return result;
}

unint64_t _GestureOutputs.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    BOOL v4 = (unsigned int *)(v2 + 48);
    while (*((void *)v4 - 2) != a1)
    {
      v4 += 6;
      if (!--v3) {
        goto LABEL_5;
      }
    }
    unsigned __int8 v5 = 0;
    uint64_t v3 = *v4;
  }
  else
  {
LABEL_5:
    unsigned __int8 v5 = 1;
  }
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t _GestureOutputs.subscript.setter(unint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  return PreferencesOutputs.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), a2, a3);
}

uint64_t (*_GestureOutputs.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(v4 + 48);
    while (*((void *)v6 - 2) != a2)
    {
      v6 += 6;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    char v7 = 0;
    LODWORD(v5) = *v6;
  }
  else
  {
LABEL_5:
    char v7 = 1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 28) = v7;
  return _GestureOutputs.subscript.modify;
}

uint64_t _GestureOutputs.subscript.modify(uint64_t a1)
{
  return PreferencesOutputs.subscript.setter(*(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32), *(ValueMetadata **)a1, *(void *)(a1 + 8));
}

uint64_t _GestureOutputs.subscript.setter(unint64_t a1, ValueMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PreferencesOutputs.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), a2, a4, a5);
}

void (*_GestureOutputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(ValueMetadata ***a1)
{
  int v10 = malloc(0x28uLL);
  *a1 = v10;
  _OWORD v10[2] = a5;
  v10[3] = v5;
  void *v10 = a2;
  v10[1] = a4;
  unint64_t v11 = PreferencesOutputs.subscript.getter(a2, a4, a5);
  *((_DWORD *)v10 + 8) = v11;
  *((unsigned char *)v10 + 36) = BYTE4(v11) & 1;
  return _GestureOutputs.subscript.modify;
}

void _GestureOutputs.subscript.modify(ValueMetadata ***a1)
{
  uint64_t v1 = *a1;
  PreferencesOutputs.subscript.setter(*((unsigned int *)*a1 + 8) | ((unint64_t)*((unsigned __int8 *)*a1 + 36) << 32), **a1, (uint64_t)(*a1)[1], (uint64_t)(*a1)[2]);

  free(v1);
}

uint64_t _GestureOutputs.appendPreference<A>(key:value:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PreferencesOutputs.appendPreference<A>(key:value:)(a1, a2, a4, a5);
}

uint64_t _GestureOutputs.forEachPreference(_:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t, void))result;
    swift_bridgeObjectRetain();
    uint64_t v5 = (_DWORD *)(v2 + 48);
    do
    {
      uint64_t v6 = *((void *)v5 - 2);
      uint64_t v7 = *((void *)v5 - 1);
      unsigned int v8 = *v5;
      v5 += 6;
      v4(v6, v7, v8);
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t GestureCategory.rawValue.getter()
{
  return *(void *)v0;
}

void static GestureCategory.drag.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static GestureCategory.select.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static GestureCategory.longPress.getter(void *a1@<X8>)
{
  *a1 = 16;
}

uint64_t static GestureCategory.Key._includesRemovedValues.getter()
{
  return 1;
}

void static GestureCategory.Key.defaultValue.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void *static GestureCategory.Key.reduce(value:nextValue:)(void *a1, void *(*a2)(uint64_t *__return_ptr))
{
  unint64_t result = a2(&v4);
  *a1 |= v4;
  return result;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance GestureCategory.Key(void *a1, void *(*a2)(uint64_t *__return_ptr))
{
  unint64_t result = a2(&v4);
  *a1 |= v4;
  return result;
}

uint64_t static GestureDescriptor.typeCache.getter()
{
  return static ObservationRegistrar.latestTriggers.getter(&one-time initialization token for typeCache);
}

uint64_t static GestureDescriptor.typeCache.setter(uint64_t a1)
{
  return static ObservationRegistrar.latestTriggers.setter(a1, &one-time initialization token for typeCache, &static GestureDescriptor.typeCache);
}

uint64_t (*static GestureDescriptor.typeCache.modify())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureDescriptor(uint64_t a1, uint64_t a2)
{
  return protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureDescriptor(a1, a2, &one-time initialization token for typeCache);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureDescriptor(a1, a2, a3, &one-time initialization token for typeCache, &static GestureDescriptor.typeCache);
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance GestureDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static GestureModifierDescriptor.typeCache.getter()
{
  return static ObservationRegistrar.latestTriggers.getter(&one-time initialization token for typeCache);
}

uint64_t static GestureModifierDescriptor.typeCache.setter(uint64_t a1)
{
  return static ObservationRegistrar.latestTriggers.setter(a1, &one-time initialization token for typeCache, &static GestureModifierDescriptor.typeCache);
}

uint64_t (*static GestureModifierDescriptor.typeCache.modify())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureModifierDescriptor(uint64_t a1, uint64_t a2)
{
  return protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureDescriptor(a1, a2, &one-time initialization token for typeCache);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance GestureDescriptor(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureModifierDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureDescriptor(a1, a2, a3, &one-time initialization token for typeCache, &static GestureModifierDescriptor.typeCache);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance GestureDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (*a4 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a5 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance GestureModifierDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

void protocol witness for Gesture.body.getter in conformance SizeGesture<A>()
{
}

void protocol witness for Gesture.body.getter in conformance DefaultLayoutGesture()
{
}

void protocol witness for Gesture.body.getter in conformance TapGesture()
{
}

void specialized PrimitiveGesture.body.getter()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for GestureBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _GestureOutputs()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>;
  if (!lazy protocol witness table cache variable for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>)
  {
    type metadata accessor for DefaultRule<GestureDebug.Data>(255, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DefaultRule);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t *a1)
{
  uint64_t result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t sub_245F80D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 32))(*(void *)(a3 + a2 - 16));
}

uint64_t sub_245F80DB4()
{
  return 16;
}

__n128 sub_245F80DC0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void specialized PrimitiveGesture.body.getter(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized GestureBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v44 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v45 = (char *)v35 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v16 = (char *)v35 - v15;
  if (a2)
  {
    uint64_t v43 = a1;
    int v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
      AGGraphSetUpdate();
      uint64_t v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x270FA5388](v33);
      v35[-2] = type metadata accessor for GestureBodyAccessor();
      v35[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v35[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    int v38 = v17;
    long long v39 = v16;
    uint64_t v40 = v14;
    uint64_t v41 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v19 = AGTypeID.description.getter();
    uint64_t v21 = v20;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v19;
    long long v23 = (void (**)(char *, uint64_t, uint64_t))(inited + 32);
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 40) = v21;
    uint64_t v42 = a3;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v37 = inited + 72;
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v22;
    *(void *)(inited + 80) = v24;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v44 + 16;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v10, v45, v8);
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v26 = swift_initStackObject();
    long long v46 = xmmword_2461BE2B0;
    *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v35[1] = inited;
        uint64_t v36 = a4;
        uint64_t inited = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v37, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v47);
        swift_bridgeObjectRelease();
        if (!v48)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v47);
          swift_bridgeObjectRelease();
          long long v32 = *(void (**)(char *, uint64_t))(v44 + 8);
          v32(v45, v8);
          v32(v10, v8);
          a4 = v36;
          uint64_t AssociatedTypeWitness = v41;
          a3 = v42;
          int v16 = v39;
          uint64_t v14 = v40;
          goto LABEL_15;
        }
        long long v23 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
        outlined destroy of CVarArg?((uint64_t)v47);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          long long v29 = *v23;
          while (1)
          {
            v29(v10, v28, v8);
            uint64_t v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v46;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(void *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            uint64_t v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v47);
            swift_bridgeObjectRelease();
            if (!v48) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v47);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

_UNKNOWN **associated type witness table accessor for Gesture.Body : Gesture in Never()
{
  return &protocol witness table for Never;
}

unint64_t lazy protocol witness table accessor for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase;
  if (!lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase;
  if (!lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase;
  if (!lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase;
  if (!lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.InheritedPhase and conformance _GestureInputs.InheritedPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GestureInputs.Options and conformance _GestureInputs.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options;
  if (!lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options;
  if (!lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options;
  if (!lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options;
  if (!lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GestureInputs.Options and conformance _GestureInputs.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureCategory and conformance GestureCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory;
  if (!lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory;
  if (!lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory;
  if (!lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory;
  if (!lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureCategory and conformance GestureCategory);
  }
  return result;
}

uint64_t sub_245F818D4()
{
  return 8;
}

void *sub_245F818E0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t dispatch thunk of static Gesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of Gesture.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PubliclyPrimitiveGesture.internalBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t destroy for _GestureInputs(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _GestureInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  Swift::String v5 = *(void **)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _GestureInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v4 = *(void **)(a2 + 88);
  Swift::String v5 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v4;
  id v6 = v4;

  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for _GestureInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);

  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for _GestureInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 124)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _GestureInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 124) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 124) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _GestureInputs()
{
  return &type metadata for _GestureInputs;
}

ValueMetadata *type metadata accessor for _GestureInputs.InheritedPhase()
{
  return &type metadata for _GestureInputs.InheritedPhase;
}

ValueMetadata *type metadata accessor for _GestureInputs.Options()
{
  return &type metadata for _GestureInputs.Options;
}

uint64_t initializeBufferWithCopyOfBuffer for _GestureOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _GestureOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for _GestureOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _GestureOutputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _GestureOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureCategory()
{
  return &type metadata for GestureCategory;
}

ValueMetadata *type metadata accessor for GestureCategory.Key()
{
  return &type metadata for GestureCategory.Key;
}

ValueMetadata *type metadata accessor for GestureDescriptor()
{
  return &type metadata for GestureDescriptor;
}

ValueMetadata *type metadata accessor for GestureModifierDescriptor()
{
  return &type metadata for GestureModifierDescriptor;
}

ValueMetadata *type metadata accessor for PlatformGestureInputs()
{
  return &type metadata for PlatformGestureInputs;
}

void type metadata accessor for DefaultRule<GestureDebug.Data>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t Color.Resolved.init(failableCGColor:)(void *a1)
{
  return specialized Color.Resolved.init(failableCGColor:)(a1);
}

float CGColorRef.resolve(in:)()
{
  LODWORD(result) = specialized Color.Resolved.init(failableCGColor:)(v0);
  if (v2) {
    return 0.0;
  }
  return result;
}

void *CGColorRef.staticColor.getter()
{
  id v1 = v0;
  return v0;
}

id protocol witness for ColorProvider.staticColor.getter in conformance CGColorRef()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

id static Color.Resolved.srgb.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for srgb, (void **)&static Color.Resolved.srgb);
}

id static Color.Resolved.srgbExtended.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for srgbExtended, (void **)&static Color.Resolved.srgbExtended);
}

id static Color.Resolved.srgbLinear.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for srgbLinear, (void **)&static Color.Resolved.srgbLinear);
}

id static Color.Resolved.srgbExtendedLinear.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for srgbExtendedLinear, (void **)&static Color.Resolved.srgbExtendedLinear);
}

id static Color.Resolved.displayP3.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for displayP3, (void **)&static Color.Resolved.displayP3);
}

CGGradientRef ResolvedGradient.cgGradient.getter()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for srgbExtended != -1) {
    swift_once();
  }
  id v2 = (CGColorSpace *)static Color.Resolved.srgbExtended;
  int64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v4 = (float *)(v1 + 44);
    int64_t v5 = v3;
    do
    {
      specialized ObjectCache.subscript.getter(*(v4 - 3), *(v4 - 2), *(v4 - 1), *v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 12;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CGColorRef(0);
  v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v7 = v14;
    unint64_t v8 = *(void *)(v14 + 16);
    uint64_t v9 = 48;
    do
    {
      uint64_t v10 = *(void *)(v1 + v9);
      unint64_t v11 = *(void *)(v14 + 24);
      if (v8 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v8 + 1, 1);
      }
      *(void *)(v14 + 16) = v8 + 1;
      *(void *)(v14 + 8 * v8 + 32) = v10;
      v9 += 48;
      ++v8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  CGGradientRef v12 = CGGradientCreateWithColors(v2, v6.super.isa, (const CGFloat *)(v7 + 32));

  swift_bridgeObjectRelease();
  return v12;
}

Swift::Bool __swiftcall LayoutComputer.ignoresAutomaticPadding()()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 96))() & 1;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock)) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 96))() & 1;
  }
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Double __swiftcall LayoutEngine.layoutPriority()()
{
  return 0.0;
}

Swift::Bool __swiftcall LayoutEngine.ignoresAutomaticPadding()()
{
  return 0;
}

Swift::Bool __swiftcall LayoutEngine.requiresSpacingProjection()()
{
  return 0;
}

void protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance ResolvedImageLayoutEngine()
{
}

void LayoutEngine.childGeometries(at:origin:)()
{
}

uint64_t LayoutEngine.debugContentDescription.getter()
{
  return 0;
}

uint64_t LayoutComputer.lengthThatFits(_:in:)(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 24);
  uint64_t v8 = *v2;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t v10 = v4;
    char v11 = v5;
    uint64_t v12 = v6;
    char v13 = v7;
    return (*(uint64_t (**)(uint64_t *, void))(*(void *)v8 + 128))(&v10, a2 & 1);
  }
  return result;
}

Swift::Bool __swiftcall LayoutComputer.requiresSpacingProjection()()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 104))() & 1;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock)) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 104))() & 1;
  }
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t LayoutComputer.childGeometries(at:origin:)(long long *a1, double a2, double a3)
{
  long long v6 = *a1;
  long long v7 = a1[1];
  uint64_t v8 = *v3;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
  {
    long long v12 = a1[1];
    long long v14 = *a1;
    swift_once();
    long long v7 = v12;
    long long v6 = v14;
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  long long v11 = v7;
  long long v13 = v6;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  BOOL IsOwner = _MovableLockIsOwner(static Update._lock);
  long long v7 = v11;
  long long v6 = v13;
  if (!IsOwner)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v15[0] = v6;
    v15[1] = v7;
    return (*(uint64_t (**)(_OWORD *, double, double))(*(void *)v8 + 136))(v15, a2, a3);
  }
  return result;
}

uint64_t *TracingLayoutEngineBox.__allocating_init(_:)(unsigned char *a1)
{
  return TracingLayoutEngineBox.init(_:)(a1);
}

double LayoutComputer.DefaultEngine.sizeThatFits(_:)(uint64_t a1)
{
  double result = *(double *)a1;
  if (*(unsigned char *)(a1 + 8)) {
    return 10.0;
  }
  return result;
}

uint64_t LayoutComputer.DefaultEngine.childGeometries(at:origin:)()
{
  return MEMORY[0x263F8EE78];
}

double protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance LayoutComputer.DefaultEngine(uint64_t a1, char a2)
{
  double result = *(double *)a1;
  double v3 = *(double *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8)) {
    double result = 10.0;
  }
  if (*(unsigned char *)(a1 + 24)) {
    double v3 = 10.0;
  }
  if (a2) {
    return v3;
  }
  return result;
}

uint64_t static LayoutComputer.defaultValue.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)&static LayoutComputer.defaultValue + 1);
  *a1 = static LayoutComputer.defaultValue;
  a1[1] = v2;

  return swift_retain();
}

uint64_t protocol witness for static Defaultable.defaultValue.getter in conformance LayoutComputer@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)&static LayoutComputer.defaultValue + 1);
  *a1 = static LayoutComputer.defaultValue;
  a1[1] = v2;

  return swift_retain();
}

void AnyLayoutEngineBox.mutateEngine<A, B>(as:do:)()
{
}

void AnyLayoutEngineBox.layoutPriority()()
{
}

void AnyLayoutEngineBox.ignoresAutomaticPadding()()
{
}

void AnyLayoutEngineBox.requiresSpacingProjection()()
{
}

void AnyLayoutEngineBox.spacing()()
{
}

void AnyLayoutEngineBox.sizeThatFits(_:)()
{
}

void AnyLayoutEngineBox.lengthThatFits(_:in:)()
{
}

void AnyLayoutEngineBox.childGeometries(at:origin:)()
{
}

void AnyLayoutEngineBox.explicitAlignment(_:at:)()
{
}

uint64_t LayoutEngineBox.ignoresAutomaticPadding()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  long long v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v9 - v6, (uint64_t)v1 + *(void *)(v2 + 176), v3, v5);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 168) + 16))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v2 & 1;
}

uint64_t *TracingLayoutEngineBox.init(_:)(unsigned char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 192);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  long long v11 = &v26[-v10];
  uint64_t v12 = (uint64_t)v2 + *(void *)(v4 + 208);
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  BOOL v14 = CurrentAttribute == *MEMORY[0x263F288F8];
  if (CurrentAttribute == *MEMORY[0x263F288F8]) {
    int v15 = 0;
  }
  else {
    int v15 = CurrentAttribute;
  }
  *(_DWORD *)uint64_t v12 = v15;
  *(unsigned char *)(v12 + 4) = v14;
  int v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16);
  v16(v11, a1, v5);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)(*(void *)(*v2 + 160) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 176), v11);
  v16(v8, (unsigned char *)v2 + *(void *)(*v2 + 176), v5);
  uint64_t v17 = *(void *)(v4 + 200);
  long long v18 = *(void (**)(uint64_t, uint64_t))(v17 + 72);
  swift_retain();
  v18(v5, v17);
  uint64_t v20 = v19;
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v21(v8, v5);
  if (v20)
  {
    unint64_t v22 = (unsigned int *)((char *)v2 + *(void *)(*v2 + 208));
    uint64_t v23 = *v22;
    unsigned __int8 v24 = *((unsigned char *)v22 + 4);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      swift_retain();
      v26[4] = v24;
      LayoutTrace.Recorder.traceContentDescription(_:_:)(v23 | ((unint64_t)v24 << 32));
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
    v21(a1, v5);
  }
  else
  {
    v21(a1, v5);
    swift_release();
  }
  return v2;
}

uint64_t TracingLayoutEngineBox.sizeThatFits(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  char v5 = *((unsigned char *)a1 + 24);
  uint64_t v6 = (unsigned int *)(v1 + *(void *)(*(void *)v1 + 208));
  uint64_t v7 = *v6;
  unsigned __int8 v8 = *((unsigned char *)v6 + 4);
  uint64_t result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    uint64_t v10 = v2;
    char v11 = v3;
    uint64_t v12 = v4;
    char v13 = v5;
    swift_retain();
    LayoutTrace.Recorder.traceSizeThatFits(_:proposal:_:)(v7 | ((unint64_t)v8 << 32), (uint64_t)&v10, (double (*)(uint64_t))partial apply for closure #1 in TracingLayoutEngineBox.sizeThatFits(_:));
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TracingLayoutEngineBox.lengthThatFits(_:in:)(uint64_t *a1, char a2)
{
  uint64_t v3 = a2 & 1;
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 24);
  unsigned __int8 v8 = (unsigned int *)(v2 + *(void *)(*(void *)v2 + 208));
  uint64_t v9 = *v8;
  unsigned __int8 v10 = *((unsigned char *)v8 + 4);
  uint64_t result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    uint64_t v12 = v4;
    char v13 = v5;
    uint64_t v14 = v6;
    char v15 = v7;
    swift_retain();
    LayoutTrace.Recorder.traceLengthThatFits(_:proposal:in:_:)(v9 | ((unint64_t)v10 << 32), (uint64_t)&v12, v3, (double (*)(uint64_t))partial apply for closure #1 in TracingLayoutEngineBox.lengthThatFits(_:in:));
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TracingLayoutEngineBox.childGeometries(at:origin:)(void **a1, double a2, double a3)
{
  uint64_t v4 = v3;
  char v7 = *a1;
  uint64_t v8 = (uint64_t)a1[1];
  uint64_t v9 = a1[2];
  unsigned __int8 v10 = a1[3];
  char v11 = (char *)v3 + *(void *)(*v3 + 208);
  int v12 = *(_DWORD *)v11;
  int v13 = v11[4];
  uint64_t result = swift_beginAccess();
  char v15 = static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_retain();
    LayoutTrace.Recorder.activateFrameIfNeeded()();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if (v13) {
      int v16 = 0;
    }
    else {
      int v16 = v12;
    }
    swift_beginAccess();
    uint64_t v17 = static CoreGlue.shared;
    uint64_t v26 = v15;
    uint64_t v27 = (uint64_t)v7;
    uint64_t v28 = v8;
    long long v29 = v9;
    uint64_t v30 = v10;
    double v31 = a2;
    double v32 = a3;
    int v33 = v16;
    long long v18 = (void *)MEMORY[0x263F8EED0];
    uint64_t v19 = *(void (**)(void **))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x90);
    swift_retain();
    id v20 = v17;
    v19(&v26);

    swift_release();
    uint64_t v21 = *v4;
    uint64_t v26 = v7;
    uint64_t v27 = v8;
    uint64_t v28 = (uint64_t)v9;
    long long v29 = v10;
    uint64_t v22 = (*(uint64_t (**)(void **, void, double, double))(*(void *)(v21 + 168) + 56))(&v26, *(void *)(v21 + 160), a2, a3);
    uint64_t v23 = static CoreGlue.shared;
    uint64_t v26 = v15;
    uint64_t v27 = v22;
    unsigned __int8 v24 = *(void (**)(void **))((*v18 & *(void *)static CoreGlue.shared) + 0xA0);
    swift_retain();
    id v25 = v23;
    swift_bridgeObjectRetain();
    v24(&v26);

    swift_bridgeObjectRelease();
    swift_release_n();
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TracingLayoutEngineBox.explicitAlignment(_:at:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = (unsigned int *)(v2 + *(void *)(*(void *)v2 + 208));
  uint64_t v9 = *v8;
  unsigned __int8 v10 = *((unsigned char *)v8 + 4);
  uint64_t result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    v13[0] = v4;
    v13[1] = v5;
    void v13[2] = v6;
    v13[3] = v7;
    swift_retain();
    uint64_t v12 = LayoutTrace.Recorder.traceExplicitAlignment(_:alignment:at:body:)(v9 | ((unint64_t)v10 << 32), a1, (uint64_t)v13, partial apply for closure #1 in TracingLayoutEngineBox.explicitAlignment(_:at:));
    swift_release();
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance InsetLayoutComputer.Engine(uint64_t *a1, char a2)
{
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  char v5 = *((unsigned char *)a1 + 24);
  uint64_t v8 = *a1;
  char v9 = v3;
  uint64_t v10 = v4;
  char v11 = v5;
  InsetLayoutComputer.Engine.sizeThatFits(_:)((uint64_t)&v8);
  if (a2) {
    return v7;
  }
  return result;
}

uint64_t type metadata accessor for TracingLayoutEngineBox()
{
  return __swift_instantiateGenericMetadata();
}

void *assignWithTake for LayoutComputer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for LayoutComputer()
{
  return &type metadata for LayoutComputer;
}

ValueMetadata *type metadata accessor for LayoutComputer.DefaultEngine()
{
  return &type metadata for LayoutComputer.DefaultEngine;
}

uint64_t dispatch thunk of LayoutEngine.layoutPriority()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LayoutEngine.ignoresAutomaticPadding()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LayoutEngine.requiresSpacingProjection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LayoutEngine.spacing()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of LayoutEngine.lengthThatFits(_:in:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 48))(a1, a2 & 1);
}

uint64_t dispatch thunk of LayoutEngine.childGeometries(at:origin:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of LayoutEngine.explicitAlignment(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of LayoutEngine.debugContentDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t type metadata completion function for TracingLayoutEngineBox()
{
  return swift_initClassMetadata2();
}

uint64_t partial apply for closure #1 in TracingLayoutEngineBox.explicitAlignment(_:at:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = **(void **)(v0 + 16);
  long long v3 = *(_OWORD *)(v0 + 48);
  v5[0] = *(_OWORD *)(v0 + 32);
  v5[1] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *, void))(*(void *)(v2 + 168) + 64))(v1, v5, *(void *)(v2 + 160));
}

uint64_t partial apply for closure #1 in TracingLayoutEngineBox.lengthThatFits(_:in:)()
{
  char v1 = *(unsigned char *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(unsigned char *)(v0 + 48);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 49);
  uint64_t v5 = **(void **)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 24);
  char v8 = v1;
  uint64_t v9 = v2;
  char v10 = v3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, void))(*(void *)(v5 + 168) + 48))(&v7, v4, *(void *)(v5 + 160));
}

uint64_t partial apply for closure #1 in TracingLayoutEngineBox.sizeThatFits(_:)()
{
  char v1 = *(unsigned char *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(unsigned char *)(v0 + 48);
  uint64_t v4 = **(void **)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  char v7 = v1;
  uint64_t v8 = v2;
  char v9 = v3;
  return (*(uint64_t (**)(uint64_t *, void))(*(void *)(v4 + 168) + 40))(&v6, *(void *)(v4 + 160));
}

uint64_t specialized RangeSet.insert(contentsOf:)()
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v23 - v3;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)&v23 - v10;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v23 = v12;
  RangeSet.ranges.getter();
  unsigned __int8 v24 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v24(v8, v4, v1);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
  dispatch thunk of Collection.startIndex.getter();
  int v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v25 = v2 + 8;
  v13(v4, v1);
  *(void *)&v8[*(int *)(v6 + 44)] = v28[0];
  _sypSgWObTm_6((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  uint64_t v14 = &v11[*(int *)(v6 + 44)];
  uint64_t v15 = *(void *)v14;
  dispatch thunk of Collection.endIndex.getter();
  if (v15 == v28[0]) {
    return _sypSgWOhTm_13((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  }
  while (1)
  {
    long long v18 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    v18(v28, 0);
    v24(v4, v11, v1);
    dispatch thunk of Collection.formIndex(after:)();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v4, v1);
    uint64_t v26 = v21;
    uint64_t v27 = v20;
    if (__OFSUB__(v20, v21)) {
      break;
    }
    if (v20 != v21)
    {
      uint64_t v22 = (void (*)(void *, void))RangeSet._ranges.modify();
      RangeSet.Ranges._insert(contentsOf:)();
      v22(v28, 0);
    }
    uint64_t v17 = *(void *)v14;
    dispatch thunk of Collection.endIndex.getter();
    if (v17 == v28[0]) {
      return _sypSgWOhTm_13((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    }
  }
  __break(1u);
  return result;
}

void specialized EnumeratedSequence.Iterator.next()(uint64_t a1@<X8>)
{
  CFArrayRef v3 = *(const __CFArray **)(v1 + 48);
  uint64_t v4 = *(const __CTLine **)v1;
  uint64_t v5 = *(void *)(v1 + 8);
  int v6 = *(unsigned __int8 *)(v1 + 16);
  long long v19 = *(_OWORD *)(v1 + 24);
  int v7 = *(_DWORD *)(v1 + 40);
  uint64_t v8 = *(const __CTLine **)v1;
  if (v6)
  {
    uint64_t v9 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v8);
    if (!v9)
    {
      if (!v3) {
        goto LABEL_7;
      }
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v8, v5, 0);
    swift_release();
    uint64_t v9 = v4;
  }
  CFArrayRef RunCount = _CTLineGetRunCount(v9);

  if (v3 == RunCount)
  {
LABEL_7:
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if (!v6)
  {
    int v18 = v7;
    outlined copy of Text.Layout.Line.Line(v4, v5, 0);
    swift_release();
    outlined copy of Text.Layout.Line.Line(v4, v5, 0);

    outlined copy of Text.Layout.Line.Line(v4, v5, 0);
    outlined copy of Text.Layout.Line.Line(v4, v5, 0);
    swift_release();
    uint64_t v15 = v4;
    uint64_t v12 = v4;
    CFArrayRef v14 = (const __CFArray *)v5;
    goto LABEL_13;
  }
LABEL_9:
  char v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v4);
  if (!v11) {
    goto LABEL_21;
  }
  uint64_t v12 = v11;
  outlined copy of Text.Layout.Line.Line(v4, v5, 1);
  int v13 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v4);
  CFArrayRef v14 = 0;
  int v18 = v7;
  if (v13)
  {
    uint64_t v15 = v13;
LABEL_13:
    CFArrayRef v16 = v14;
    CFArrayRef v14 = _CTLineGetRunCount(v15);

    goto LABEL_15;
  }
  LOBYTE(v6) = 1;
  CFArrayRef v16 = 0;
LABEL_15:
  outlined consume of Text.Layout.Line.Line(v4, v5, v6);
  if (((unint64_t)v3 & 0x8000000000000000) != 0 || (uint64_t)v3 >= (uint64_t)v14)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 48) = (char *)v3 + 1;
    uint64_t v17 = *(void *)(v1 + 56);
    if (!__OFADD__(v17, 1))
    {
      *(void *)(v1 + 56) = v17 + 1;
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v12;
      *(void *)(a1 + 16) = v3;
      *(_OWORD *)(a1 + 24) = v19;
      *(_DWORD *)(a1 + 40) = v18;
      *(void *)(a1 + 48) = v16;
      return;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

{
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  long long v8;
  int v9;
  uint64_t v10;

  uint64_t v2 = v1[3];
  CFArrayRef v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 255;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    return;
  }
  if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + 48 * v2;
    uint64_t v5 = *(void **)(v4 + 32);
    int v6 = *(void *)(v4 + 40);
    int v7 = *(unsigned char *)(v4 + 48);
    uint64_t v8 = *(_OWORD *)(v4 + 56);
    uint64_t v9 = *(_DWORD *)(v4 + 72);
    v1[3] = v2 + 1;
    uint64_t v10 = v1[4];
    if (!__OFADD__(v10, 1))
    {
      v1[4] = v10 + 1;
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v6;
      *(unsigned char *)(a1 + 24) = v7;
      *(_OWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 48) = v9;
      outlined copy of Text.Layout.Line.Line(v5, v6, v7);
      return;
    }
  }
  __break(1u);
}

uint64_t Text.Effect.Keyframes.appendPartial(map:keyframes:baseFragmentIdentifierMap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v142 = a7;
  uint64_t v141 = a6;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v156 = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v155 = (char *)&v141 - v17;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v150 = a5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Text.Effect.Keyframes.Storage();
    swift_allocObject();
    long long v19 = (void *)swift_retain();
    uint64_t v20 = specialized Text.Effect.Keyframes.Storage.init(_:)(v19);
    a5 = v150;
    swift_release();
    *uint64_t v9 = (uint64_t)v20;
    swift_release();
  }
  uint64_t v21 = *v9;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  v163[0] = *(void *)(v21 + 16);
  *(void *)(v21 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v22, v163, specialized LazyMapSequence.Iterator.next(), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
  *(void *)(v21 + 16) = v163[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v23 = *v9;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  v163[0] = *(void *)(v23 + 24);
  *(void *)(v23 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v24, v163, specialized LazyMapSequence.Iterator.next(), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
  *(void *)(v23 + 24) = v163[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v25 = *v9;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  v163[0] = *(void *)(v25 + 32);
  *(void *)(v25 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v26, v163, specialized LazyMapSequence.Iterator.next(), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
  *(void *)(v25 + 32) = v163[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v27 = swift_bridgeObjectRetain();
  specialized Set.formUnion<A>(_:)(v27);
  swift_endAccess();
  uint64_t v28 = *(void *)(a5 + 64);
  uint64_t v143 = a5 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(a5 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & v28;
  int64_t v144 = (unint64_t)(v29 + 63) >> 6;
  v153 = (void (**)(uint64_t, char *, uint64_t))(v16 + 32);
  v154 = (void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  swift_bridgeObjectRetain();
  int64_t v32 = 0;
  uint64_t v157 = a8;
  int v33 = v9;
  v145 = v9;
  while (1)
  {
    if (v31)
    {
      uint64_t v146 = (v31 - 1) & v31;
      int64_t v147 = v32;
      unint64_t v35 = __clz(__rbit64(v31)) | (v32 << 6);
      goto LABEL_25;
    }
    int64_t v36 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      goto LABEL_86;
    }
    if (v36 >= v144) {
      break;
    }
    unint64_t v37 = *(void *)(v143 + 8 * v36);
    int64_t v38 = v32 + 1;
    if (!v37)
    {
      int64_t v38 = v32 + 2;
      if (v32 + 2 >= v144) {
        break;
      }
      unint64_t v37 = *(void *)(v143 + 8 * v38);
      if (!v37)
      {
        int64_t v38 = v32 + 3;
        if (v32 + 3 >= v144) {
          break;
        }
        unint64_t v37 = *(void *)(v143 + 8 * v38);
        if (!v37)
        {
          uint64_t v39 = v32 + 4;
          if (v32 + 4 >= v144) {
            break;
          }
          unint64_t v37 = *(void *)(v143 + 8 * v39);
          if (!v37)
          {
            while (1)
            {
              int64_t v38 = v39 + 1;
              if (__OFADD__(v39, 1)) {
                goto LABEL_90;
              }
              if (v38 >= v144) {
                goto LABEL_49;
              }
              unint64_t v37 = *(void *)(v143 + 8 * v38);
              ++v39;
              if (v37) {
                goto LABEL_24;
              }
            }
          }
          int64_t v38 = v32 + 4;
        }
      }
    }
LABEL_24:
    uint64_t v146 = (v37 - 1) & v37;
    int64_t v147 = v38;
    unint64_t v35 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_25:
    uint64_t v40 = 16 * v35;
    uint64_t v41 = *(void *)(a5 + 56);
    uint64_t v42 = (Swift::UInt64 *)(*(void *)(a5 + 48) + v40);
    uint64_t v43 = v42[1];
    Swift::UInt64 v151 = *v42;
    uint64_t v44 = (uint64_t *)(v41 + v40);
    uint64_t v45 = *v44;
    int v148 = *((unsigned __int8 *)v44 + 8);
    uint64_t v46 = *(void *)(v45 + 16);
    uint64_t v152 = v43;
    uint64_t v149 = v45;
    if (v46)
    {
      uint64_t v164 = MEMORY[0x263F8EE78];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      long long v47 = (uint64_t *)(v45 + 32);
      do
      {
        uint64_t v48 = *v47;
        uint64_t v49 = *(void *)(a8 + 8);
        uint64_t v50 = *(void *)(*v47 + 88);
        swift_retain();
        if (v49 != v50)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Text.Effect.KeyframeLayout.Fragment.Storage();
            uint64_t v51 = swift_allocObject();
            *(_OWORD *)(v51 + 16) = *(_OWORD *)(v48 + 16);
            long long v52 = *(void **)(v48 + 32);
            uint64_t v159 = *(void *)(v48 + 40);
            uint64_t v53 = v159;
            v160 = v52;
            unsigned __int8 v54 = *(unsigned char *)(v48 + 48);
            LODWORD(v158) = v54;
            int v55 = *(_DWORD *)(v48 + 72);
            long long v56 = *(_OWORD *)(v48 + 56);
            *(void *)(v51 + 32) = v52;
            *(void *)(v51 + 40) = v53;
            *(unsigned char *)(v51 + 48) = v54;
            *(_OWORD *)(v51 + 56) = v56;
            *(_DWORD *)(v51 + 72) = v55;
            uint64_t v57 = *(void **)(v48 + 80);
            *(void *)(v51 + 80) = v57;
            *(void *)(v51 + 88) = *(void *)(v48 + 88);
            *(void *)(v51 + 96) = *(void *)(v48 + 96);
            uint64_t v58 = *(void *)(v48 + 112);
            unint64_t v161 = *(void *)(v48 + 104);
            *(void *)(v51 + 104) = v161;
            *(void *)(v51 + 112) = v58;
            long long v59 = *(_OWORD *)(v48 + 136);
            *(_OWORD *)(v51 + 120) = *(_OWORD *)(v48 + 120);
            *(_OWORD *)(v51 + 136) = v59;
            long long v60 = *(_OWORD *)(v48 + 168);
            *(_OWORD *)(v51 + 152) = *(_OWORD *)(v48 + 152);
            *(_OWORD *)(v51 + 168) = v60;
            long long v61 = *(_OWORD *)(v48 + 200);
            *(_OWORD *)(v51 + 184) = *(_OWORD *)(v48 + 184);
            *(_OWORD *)(v51 + 200) = v61;
            char v62 = v155;
            uint64_t v63 = v156;
            (*v154)(v155, v48+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v156);
            (*v153)(v51+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v62, v63);
            outlined copy of Text.Layout.Line.Line(v160, v159, v158);
            id v64 = v57;
            a8 = v157;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_release();
            uint64_t v48 = v51;
          }
          *(void *)(v48 + 88) = v49;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v47;
        --v46;
      }
      while (v46);
      uint64_t v65 = v164;
      int v33 = v145;
      a5 = v150;
      uint64_t v43 = v152;
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v65 = MEMORY[0x263F8EE78];
    }
    uint64_t v66 = *v33;
    swift_beginAccess();
    uint64_t v67 = *(void *)(v66 + 48);
    if (!*(void *)(v67 + 16)) {
      goto LABEL_38;
    }
    swift_retain();
    Swift::UInt64 v68 = v151;
    unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v43);
    if ((v70 & 1) == 0)
    {
      swift_release();
LABEL_38:
      swift_endAccess();
      uint64_t v78 = *v33;
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v79 = v43;
      char v80 = (void *)(v78 + 48);
      swift_beginAccess();
      char v81 = swift_isUniquelyReferenced_nonNull_native();
      v163[0] = *(void *)(v78 + 48);
      uint64_t v82 = v163[0];
      *(void *)(v78 + 48) = 0x8000000000000000;
      Swift::UInt64 v83 = v151;
      unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v79);
      uint64_t v86 = *(void *)(v82 + 16);
      BOOL v87 = (v84 & 1) == 0;
      uint64_t v88 = v86 + v87;
      if (!__OFADD__(v86, v87))
      {
        char v89 = v84;
        if (*(void *)(v82 + 24) >= v88)
        {
          if (v81)
          {
            int64_t v92 = (void *)v163[0];
            if ((v84 & 1) == 0) {
              goto LABEL_45;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            int64_t v92 = (void *)v163[0];
            if ((v89 & 1) == 0) {
              goto LABEL_45;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v88, v81);
          unint64_t v90 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v152);
          if ((v89 & 1) != (v91 & 1)) {
            goto LABEL_92;
          }
          unint64_t v85 = v90;
          int64_t v92 = (void *)v163[0];
          if ((v89 & 1) == 0)
          {
LABEL_45:
            v92[(v85 >> 6) + 8] |= 1 << v85;
            uint64_t v93 = 16 * v85;
            unint64_t v94 = (Swift::UInt64 *)(v92[6] + 16 * v85);
            uint64_t v95 = v152;
            *unint64_t v94 = v83;
            v94[1] = v95;
            uint64_t v96 = v92[7] + v93;
            *(void *)uint64_t v96 = v65;
            *(unsigned char *)(v96 + 8) = v148;
            uint64_t v97 = v92[2];
            BOOL v98 = __OFADD__(v97, 1);
            uint64_t v99 = v97 + 1;
            if (v98) {
              goto LABEL_88;
            }
            v92[2] = v99;
            swift_retain();
            goto LABEL_7;
          }
        }
        uint64_t v34 = v92[7] + 16 * v85;
        swift_bridgeObjectRelease();
        *(void *)uint64_t v34 = v65;
        *(unsigned char *)(v34 + 8) = v148;
LABEL_7:
        *char v80 = v92;
        swift_release();
        swift_bridgeObjectRelease();
        swift_endAccess();
        a5 = v150;
        goto LABEL_8;
      }
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    uint64_t v71 = *(void *)(v67 + 56) + 16 * v69;
    uint64_t v72 = *(void *)v71;
    char v73 = *(unsigned char *)(v71 + 8);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    char v74 = v73 | v148;
    uint64_t v75 = *v145;
    uint64_t v164 = v72;
    swift_retain();
    specialized Array.append<A>(contentsOf:)(v65);
    uint64_t v76 = v164;
    swift_beginAccess();
    char v77 = swift_isUniquelyReferenced_nonNull_native();
    v163[0] = *(void *)(v75 + 48);
    *(void *)(v75 + 48) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v76, v74, v68, v152, v77);
    *(void *)(v75 + 48) = v163[0];
    int v33 = v145;
    swift_release();
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_8:
    int64_t v32 = v147;
    unint64_t v31 = v146;
    swift_release();
  }
LABEL_49:
  swift_release();
  uint64_t v100 = *v33;
  swift_beginAccess();
  uint64_t v101 = *(void *)(v100 + 48);
  uint64_t v102 = *(void *)(v101 + 64);
  uint64_t v158 = v101 + 64;
  uint64_t v103 = 1 << *(unsigned char *)(v101 + 32);
  uint64_t v104 = -1;
  if (v103 < 64) {
    uint64_t v104 = ~(-1 << v103);
  }
  unint64_t v105 = v104 & v102;
  uint64_t v159 = (unint64_t)(v103 + 63) >> 6;
  v160 = (void *)v101;
  swift_bridgeObjectRetain();
  uint64_t v106 = 0;
  if (v105) {
    goto LABEL_55;
  }
LABEL_56:
  uint64_t v110 = v106 + 1;
  if (__OFADD__(v106, 1)) {
    goto LABEL_87;
  }
  if (v110 >= v159) {
    goto LABEL_83;
  }
  unint64_t v111 = *(void *)(v158 + 8 * v110);
  ++v106;
  if (v111)
  {
LABEL_69:
    unint64_t v105 = (v111 - 1) & v111;
    for (unint64_t i = __clz(__rbit64(v111)) + (v106 << 6); ; unint64_t i = v108 | (v106 << 6))
    {
      uint64_t v113 = 16 * i;
      uint64_t v114 = (Swift::UInt64 *)(*((void *)v160 + 6) + v113);
      Swift::UInt64 v116 = *v114;
      uint64_t v115 = v114[1];
      uint64_t v117 = *((void *)v160 + 7) + v113;
      uint64_t v118 = *(void *)v117;
      char v119 = *(unsigned char *)(v117 + 8);
      uint64_t v120 = *(void *)(a5 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v120 && (specialized __RawDictionaryStorage.find<A>(_:)(v116, v115), (v121 & 1) != 0))
      {
        swift_release();
        swift_bridgeObjectRelease();
        if (!v105) {
          goto LABEL_56;
        }
      }
      else
      {
        unint64_t v161 = v105;
        uint64_t v122 = *v145;
        uint64_t v123 = (void *)(*v145 + 48);
        swift_beginAccess();
        swift_retain();
        char v124 = swift_isUniquelyReferenced_nonNull_native();
        v162 = *(void **)(v122 + 48);
        v125 = v162;
        *(void *)(v122 + 48) = 0x8000000000000000;
        unint64_t v127 = specialized __RawDictionaryStorage.find<A>(_:)(v116, v115);
        uint64_t v128 = v125[2];
        BOOL v129 = (v126 & 1) == 0;
        uint64_t v130 = v128 + v129;
        if (__OFADD__(v128, v129)) {
          goto LABEL_85;
        }
        char v131 = v126;
        if (v125[3] >= v130)
        {
          if ((v124 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v130, v124);
          unint64_t v132 = specialized __RawDictionaryStorage.find<A>(_:)(v116, v115);
          if ((v131 & 1) != (v133 & 1)) {
            goto LABEL_92;
          }
          unint64_t v127 = v132;
        }
        char v134 = v119 | 2;
        v135 = v162;
        if (v131)
        {
          uint64_t v107 = v162[7] + 16 * v127;
          swift_bridgeObjectRelease();
          *(void *)uint64_t v107 = v118;
          *(unsigned char *)(v107 + 8) = v134;
        }
        else
        {
          v162[(v127 >> 6) + 8] |= 1 << v127;
          v136 = (Swift::UInt64 *)(v135[6] + 16 * v127);
          Swift::UInt64 *v136 = v116;
          v136[1] = v115;
          uint64_t v137 = v135[7] + 16 * v127;
          *(void *)uint64_t v137 = v118;
          *(unsigned char *)(v137 + 8) = v134;
          uint64_t v138 = v135[2];
          BOOL v98 = __OFADD__(v138, 1);
          uint64_t v139 = v138 + 1;
          if (v98) {
            goto LABEL_89;
          }
          v135[2] = v139;
          swift_retain();
        }
        *uint64_t v123 = v135;
        swift_release();
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        a5 = v150;
        unint64_t v105 = v161;
        if (!v161) {
          goto LABEL_56;
        }
      }
LABEL_55:
      unint64_t v108 = __clz(__rbit64(v105));
      v105 &= v105 - 1;
    }
  }
  uint64_t v106 = v110 + 1;
  if (v110 + 1 >= v159)
  {
LABEL_83:
    swift_release();
    return specialized Text.Effect.BaseFragmentIdentifierMap.updateKeyframes(_:)(v141, v142);
  }
  unint64_t v111 = *(void *)(v158 + 8 * v106);
  if (v111) {
    goto LABEL_69;
  }
  uint64_t v106 = v110 + 2;
  if (v110 + 2 >= v159) {
    goto LABEL_83;
  }
  unint64_t v111 = *(void *)(v158 + 8 * v106);
  if (v111) {
    goto LABEL_69;
  }
  uint64_t v112 = v110 + 3;
  if (v112 >= v159) {
    goto LABEL_83;
  }
  unint64_t v111 = *(void *)(v158 + 8 * v112);
  if (v111)
  {
    uint64_t v106 = v112;
    goto LABEL_69;
  }
  while (1)
  {
    uint64_t v106 = v112 + 1;
    if (__OFADD__(v112, 1)) {
      break;
    }
    if (v106 >= v159) {
      goto LABEL_83;
    }
    unint64_t v111 = *(void *)(v158 + 8 * v106);
    ++v112;
    if (v111) {
      goto LABEL_69;
    }
  }
LABEL_91:
  __break(1u);
LABEL_92:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *Text.Effect.Keyframes.validAnimation(_:)(Swift::UInt64 a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = 0;
  if (!specialized Set.contains(_:)(a1, *(void *)(a2 + 40)))
  {
    swift_beginAccess();
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(v5 + 16) && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
    {
      uint64_t v4 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
      id v8 = v4;
    }
    else
    {
      uint64_t v4 = 0;
    }
    swift_endAccess();
  }
  return v4;
}

void *Text.Effect.Keyframes.validTransform(_:)(Swift::UInt64 a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = 0;
  if (!specialized Set.contains(_:)(a1, *(void *)(a2 + 40)))
  {
    swift_beginAccess();
    uint64_t v5 = *(void *)(a2 + 24);
    if (*(void *)(v5 + 16) && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
    {
      uint64_t v4 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
      id v8 = v4;
    }
    else
    {
      uint64_t v4 = 0;
    }
    swift_endAccess();
  }
  return v4;
}

void *Text.Effect.Keyframes.validFilter(_:)(Swift::UInt64 a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = 0;
  if (!specialized Set.contains(_:)(a1, *(void *)(a2 + 40)))
  {
    swift_beginAccess();
    uint64_t v5 = *(void *)(a2 + 32);
    if (*(void *)(v5 + 16) && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
    {
      uint64_t v4 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
      id v8 = v4;
    }
    else
    {
      uint64_t v4 = 0;
    }
    swift_endAccess();
  }
  return v4;
}

Swift::Int_optional __swiftcall Text.Effect.VisualOrderCollection.Iterator.next()()
{
  Swift::Int v2 = v1[1];
  Swift::Int v3 = *(void *)(*v1 + 16);
  if (v2 < v3)
  {
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *v1 + 24 * v2;
      Swift::Int v5 = *(void *)(v4 + 32);
      uint64_t v6 = *(void *)(v4 + 40);
      int v7 = *(unsigned __int8 *)(v4 + 48);
      if (!v7) {
        goto LABEL_12;
      }
      if (v7 != 1) {
        goto LABEL_17;
      }
      uint64_t v8 = v6 - 1;
      if (!__OFSUB__(v6, 1))
      {
        uint64_t v9 = v1 + 2;
        Swift::Int v10 = v1[2];
        Swift::Int v0 = v8 - v10;
        if (!__OFSUB__(v8, v10))
        {
          Swift::Int v11 = v10 + 1;
          if (!__OFADD__(v10, 1))
          {
            *uint64_t v9 = v11;
            BOOL v12 = __OFSUB__(v6, v5);
            Swift::Int v5 = v6 - v5;
            if (!v12) {
              goto LABEL_15;
            }
            __break(1u);
LABEL_12:
            uint64_t v9 = v1 + 2;
            Swift::Int v13 = v1[2];
            Swift::Int v0 = v5 + v13;
            if (!__OFADD__(v5, v13))
            {
              BOOL v12 = __OFADD__(v13, 1);
              Swift::Int v11 = v13 + 1;
              if (!v12)
              {
                *uint64_t v9 = v11;
                BOOL v12 = __OFSUB__(v6, v5);
                Swift::Int v5 = v6 - v5;
                if (!v12)
                {
LABEL_15:
                  if (v11 < v5) {
                    goto LABEL_18;
                  }
                  *uint64_t v9 = 0;
                  Swift::Int v5 = v0;
LABEL_17:
                  v1[1] = v2 + 1;
                  Swift::Int v0 = v5;
                  goto LABEL_18;
                }
LABEL_25:
                __break(1u);
                goto LABEL_26;
              }
LABEL_24:
              __break(1u);
              goto LABEL_25;
            }
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  Swift::Int v0 = 0;
LABEL_18:
  Swift::Bool v14 = v2 >= v3;
LABEL_26:
  result.Swift::UInt value = v0;
  result.is_nil = v14;
  return result;
}

Swift::Int protocol witness for IteratorProtocol.next() in conformance Text.Effect.VisualOrderCollection.Iterator@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3 = Text.Effect.VisualOrderCollection.Iterator.next()();
  *(void *)a1 = v3.value;
  *(unsigned char *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.VisualOrderCollection(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.VisualOrderCollection()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.VisualOrderCollection(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t Text.Effect.Keyframes.Storage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.Keyframes.Storage()
{
  return self;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Key()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  (*(void (**)(unsigned char *))(*(void *)v2 + 88))(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Text.Effect.Key(uint64_t a1)
{
  Swift::UInt64 v3 = v1[1];
  Hasher._combine(_:)(*v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 88))(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Key()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  (*(void (**)(unsigned char *))(*(void *)v2 + 88))(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Key(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))(a2[1]) & 1;
  }
  else {
    return 0;
  }
}

double Text.Layout.Cluster.xrange.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0.0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = a3 + 48;
  double v6 = INFINITY;
  double v7 = -INFINITY;
  do
  {
    int v18 = *(void **)(v5 - 16);
    CFIndex v19 = *(void *)(v5 + 32);
    uint64_t v20 = *(void *)(v5 + 40);
    if (v19 == v20)
    {
      swift_retain();
      id v8 = v18;
      double v9 = 0.0;
      double v10 = 0.0;
      double TypographicBounds = 0.0;
      double v12 = 0.0;
      double v13 = 0.0;
    }
    else
    {
      double v21 = *(double *)v5;
      double v22 = *(double *)(v5 + 8);
      CFIndex v23 = *(void *)(v5 - 8);
      swift_retain_n();
      char v24 = v18;
      uint64_t v25 = (id)_CTLineGetRunAtIndex(v24, v23);
      BOOL v26 = __OFSUB__(v20, v19);
      CFIndex v27 = v20 - v19;
      if (v26) {
        __break(1u);
      }
      uint64_t v28 = v25;
      buffer.x = 0.0;
      buffer.y = 0.0;
      CGFloat descent = 0.0;
      CGFloat ascent = 0.0;
      v32.y = 0.0;
      CGFloat leading = 0.0;
      v32.x = 0.0;
      v38.location = v19;
      v38.length = 1;
      CTRunGetPositions(v25, v38, &buffer);
      v39.location = v19;
      v39.length = 1;
      CTRunGetBaseAdvancesAndOrigins(v28, v39, 0, &v32);
      CGFloat v29 = buffer.x - v32.x;
      CGFloat v30 = buffer.y - v32.y;
      v40.location = v19;
      v40.length = v27;
      double TypographicBounds = CTRunGetTypographicBounds(v28, v40, &ascent, &descent, &leading);
      swift_release();

      double v13 = fabs(descent);
      double v12 = ascent;
      double v9 = v21 + v29;
      double v10 = v22 - v30;
    }
    v5 += 64;
    double v14 = v10 - v12;
    double v15 = v12 + v13;
    v41.origin.x = v9;
    v41.origin.y = v14;
    v41.size.width = TypographicBounds;
    v41.size.height = v15;
    double MinX = CGRectGetMinX(v41);
    if (MinX < v6) {
      double v6 = MinX;
    }
    v42.origin.x = v9;
    v42.origin.y = v14;
    v42.size.width = TypographicBounds;
    v42.size.height = v15;
    double MaxX = CGRectGetMaxX(v42);
    swift_release();

    if (v7 <= MaxX) {
      double v7 = MaxX;
    }
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (v6 > v7)
  {
    __break(1u);
    return 0.0;
  }
  return v6;
}

uint64_t Text.Effect.KeyframeLayout.Fragment.Storage.__deallocating_deinit()
{
  outlined consume of Text.Layout.Line.Line(*(void **)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for Text.Effect.KeyframeLayout.Fragment.Storage()
{
  return type metadata accessor for Text.Effect.KeyframeLayout.Fragment.Storage();
}

uint64_t type metadata accessor for Text.Effect.KeyframeLayout.Fragment.Storage()
{
  uint64_t result = type metadata singleton initialization cache for Text.Effect.KeyframeLayout.Fragment.Storage;
  if (!type metadata singleton initialization cache for Text.Effect.KeyframeLayout.Fragment.Storage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for Text.Effect.KeyframeLayout.Fragment.Storage()
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void *assignWithCopy for Text.Effect.VisualOrderCollection(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for Text.Effect.VisualOrderCollection(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.VisualOrderCollection()
{
  return &type metadata for Text.Effect.VisualOrderCollection;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeLayout()
{
  return &type metadata for Text.Effect.KeyframeLayout;
}

void *assignWithCopy for Text.Effect.Key(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for Text.Effect.Key(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Key()
{
  return &type metadata for Text.Effect.Key;
}

ValueMetadata *type metadata accessor for Text.Effect.Keyframes()
{
  return &type metadata for Text.Effect.Keyframes;
}

ValueMetadata *type metadata accessor for Text.Effect.Keyframes.Version()
{
  return &type metadata for Text.Effect.Keyframes.Version;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeLayout> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.KeyframeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout, (uint64_t)&type metadata for Text.Effect.KeyframeLayout, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
  }
  return result;
}

BOOL Text.Effect.KeyframeLayout.Fragment.isTooComplex.getter(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + 80), sel_string);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  swift_bridgeObjectRetain();
  unint64_t v5 = specialized RangeReplaceableCollection.filter(_:)(v2, v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = v5;
  }
  if (((v7 >> 60) & ((v5 & 0x800000000000000) == 0)) != 0) {
    uint64_t v9 = 11;
  }
  else {
    uint64_t v9 = 7;
  }
  unint64_t v10 = v9 | (v8 << 16);
  int64_t v11 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, v5, v7);
  uint64_t v12 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v12 = v2;
  }
  if (((v4 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v13 = 11;
  }
  else {
    uint64_t v13 = 7;
  }
  if ((double)v11 / (double)(uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v13 | (v12 << 16), v2, v4) <= 0.9)
  {
    int64_t v15 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v15 > 500;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
}

id Text.Effect.KeyframeLayout.Fragment.runIndices(for:)(uint64_t a1, uint64_t a2)
{
  _ss8RangeSetV6RangesVySi_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v42 = v4;
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v39 - v5;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v46 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v39 - v9;
  _ss8RangeSetV6RangesVySi_GMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v40 = *(void *)(v11 - 8);
  uint64_t v41 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v39 - v12;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  double v17 = MEMORY[0x270FA5388](v14);
  CFIndex v19 = (char *)&v39 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v39 - v18, a2+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v15, v17);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>();
  uint64_t v47 = a1;
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  double v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v45 = v15;
  v21(v19, v15);
  if (v20)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>();
    uint64_t v22 = swift_allocObject();
    long long v23 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v22 + 16) = xmmword_2461B9DC0;
    *(_OWORD *)(v22 + 32) = v23;
    return (id)v22;
  }
  CFRange v39 = v6;
  id result = (id)RangeSet.init()();
  CFIndex v25 = *(void *)(a2 + 16);
  CFIndex v26 = *(void *)(a2 + 24);
  if (v25 == v26)
  {
LABEL_4:
    uint64_t v27 = v41;
    RangeSet.ranges.getter();
    lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges();
    uint64_t v22 = dispatch thunk of Sequence._copyToContiguousArray()();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v27);
    return (id)v22;
  }
  if (v26 >= v25)
  {
    uint64_t v28 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = v13;
    uint64_t v44 = a2;
    while (v25 < v26)
    {
      unint64_t v31 = *(void **)(a2 + 32);
      uint64_t v30 = *(void *)(a2 + 40);
      if (*(unsigned char *)(a2 + 48))
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(a2 + 32), *(void *)(a2 + 40), 1);
        id result = (id)_NSTextLineFragmentGetCTLine(v31);
        if (!result) {
          goto LABEL_22;
        }
        id v32 = result;
        outlined consume of Text.Layout.Line.Line(v31, v30, 1);
        unint64_t v31 = v32;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(a2 + 32), *(void *)(a2 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v31, v30, 0);

        swift_release();
      }
      int v33 = (id)_CTLineGetRunAtIndex((const __CTLine *)v31, v25);
      CFRange StringRange = CTRunGetStringRange((CTRunRef)v33);

      id result = (id)swift_release();
      if (__OFADD__(StringRange.location, StringRange.length)) {
        goto LABEL_19;
      }
      if (StringRange.location + StringRange.length < StringRange.location) {
        goto LABEL_20;
      }
      CFIndex v35 = v25 + 1;
      v48[0] = StringRange.location;
      v48[1] = StringRange.location + StringRange.length;
      uint64_t v36 = RangeSet.ranges.getter();
      MEMORY[0x270FA5388](v36);
      *(&v39 - 2) = (char *)v48;
      char v37 = specialized Sequence.contains(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in RangeSet.overlaps(_:), (uint64_t)(&v39 - 4));
      id result = (id)(*v28)(v10, v46);
      uint64_t v13 = v43;
      if (v37)
      {
        unsigned char v48[4] = v25;
        v48[5] = v25 + 1;
        CFRange v38 = (uint64_t (*)(void *, void))RangeSet._ranges.modify();
        RangeSet.Ranges._insert(contentsOf:)();
        id result = (id)v38(v48, 0);
      }
      CFIndex v25 = v35;
      BOOL v29 = v26 == v35;
      a2 = v44;
      if (v29) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 >= *(void *)(*(void *)v2 + 16) && v3 < *(void *)(*(void *)v2 + 24))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.KeyframeLayout.Fragment(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 >= *(void *)(*(void *)v1 + 16) && v2 < *(void *)(*(void *)v1 + 24))
  {
    void *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Effect.KeyframeLayout.Fragment(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 24);
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.KeyframeLayout.Fragment(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = Text.Effect.KeyframeLayout.Fragment.subscript.read(v5, *a2, *v2);
  return protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>;
}

void (*Text.Effect.KeyframeLayout.Fragment.subscript.read(void *a1, uint64_t a2, uint64_t a3))(id **a1)
{
  unint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  uint64_t v8 = *(void (**)(id **))(a3 + 32);
  uint64_t v7 = *(void *)(a3 + 40);
  long long v12 = *(_OWORD *)(a3 + 56);
  int v9 = *(_DWORD *)(a3 + 72);
  if ((*(unsigned char *)(a3 + 48) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v8, v7, 0);
    outlined copy of Text.Layout.Line.Line(v8, v7, 0);

    swift_release();
    goto LABEL_5;
  }
  outlined copy of Text.Layout.Line.Line(v8, v7, 1);
  id result = (void (*)(id **))(id)_NSTextLineFragmentGetCTLine(v8);
  if (result)
  {
    uint64_t v11 = result;
    outlined consume of Text.Layout.Line.Line(v8, v7, 1);
    uint64_t v7 = 0;
    uint64_t v8 = v11;
LABEL_5:
    *unint64_t v6 = v8;
    v6[1] = a2;
    *((_OWORD *)v6 + 1) = v12;
    *((_DWORD *)v6 + 8) = v9;
    v6[5] = v7;
    return Text.Layout.Line.subscript.read;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *v2;
  uint64_t v6 = *(void *)(*v2 + 16);
  uint64_t v5 = *(void *)(*v2 + 24);
  if (v5 < v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v7 = *a1;
  if (*a1 < v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = a1[1];
  if (v5 >= v8)
  {
    *a2 = v7;
    a2[1] = v8;
    a2[2] = result;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Effect.KeyframeLayout.Fragment(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  if (v3 < v2)
  {
    __break(1u);
  }
  else
  {
    *a1 = v2;
    a1[1] = v3;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Effect.KeyframeLayout.Fragment()
{
  return *(void *)(*(void *)v0 + 16) == *(void *)(*(void *)v0 + 24);
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 >= *(void *)(*(void *)v3 + 16) && *(void *)(*(void *)v3 + 24) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Effect.KeyframeLayout.Fragment(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  uint64_t v6 = *(void *)(*(void *)v2 + 16);
  uint64_t v5 = *(void *)(*(void *)v2 + 24);
  if (v5 < *a2 || v4 < v6 || v3 < v6 || v5 < v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = (uint64_t *)(v4 - v3);
  if (__OFSUB__(v4, v3)) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance Text.Effect.KeyframeLayout.Fragment@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *(void *)(*(void *)v2 + 24);
  if (*result >= *(void *)(*(void *)v2 + 16))
  {
    BOOL v6 = __OFSUB__(v3, v4);
    BOOL v5 = v3 - v4 < 0;
  }
  else
  {
    BOOL v6 = 0;
    BOOL v5 = 0;
  }
  if (v5 != v6) {
    *a2 = v3 + 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance Text.Effect.KeyframeLayout.Fragment(uint64_t *result)
{
  uint64_t v2 = *result;
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  if (*result >= *(void *)(*(void *)v1 + 16))
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 != v5) {
    void *result = v2 + 1;
  }
  else {
    __break(1u);
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.KeyframeLayout.Fragment(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = v2;
}

uint64_t protocol witness for Collection.count.getter in conformance Text.Effect.KeyframeLayout.Fragment()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  uint64_t result = v1 - v2;
  if (v1 < v2)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v1, v2)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.KeyframeLayout.Fragment()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.KeyframeLayout.Fragment(void *a1, uint64_t a2, uint64_t a3)
{
  specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  unint64_t v10 = (void **)(a1 + 16);
  swift_beginAccess();
  uint64_t v11 = *(char **)(a1 + 16);
  if (!v11)
  {
    long long v12 = 0;
    goto LABEL_14;
  }
  swift_beginAccess();
  long long v12 = 0;
  if (*(unsigned char *)(a2 + 32))
  {
LABEL_14:
    swift_beginAccess();
    uint64_t v34 = *v10;
    char *v10 = 0;

    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v12);
  }
  uint64_t v13 = (void *)(a3 + 16);
  CFIndex v15 = *(void *)(a2 + 16);
  CFIndex v14 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)&v11[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
  long long v17 = a4[1];
  long long v37 = *a4;
  v38[0] = v17;
  *(_OWORD *)((char *)v38 + 12) = *(long long *)((char *)a4 + 28);
  type metadata accessor for Text.Effect.KeyframeLayout.Fragment.Storage();
  swift_allocObject();
  uint64_t v18 = v11;
  outlined retain of Text.Layout.Line((uint64_t)a4);
  CFIndex v19 = a5;
  specialized Text.Effect.KeyframeLayout.Fragment.Storage.init(line:runIndices:attributedString:)((uint64_t)&v37, v15, v14, v19);

  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  double v21 = (void *)*v13;
  uint64_t v36 = (void *)*v13;
  *uint64_t v13 = 0x8000000000000000;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
  uint64_t v24 = v21[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
LABEL_16:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_13:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

    swift_beginAccess();
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *(unsigned char *)(a2 + 32) = 1;
    long long v12 = protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.AnimatableData;
    goto LABEL_14;
  }
  char v27 = v22;
  if (v21[3] >= v26)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      double v21 = v36;
    }
LABEL_10:
    CFIndex v19 = v18;
    *uint64_t v13 = v21;
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)*v13;
    swift_bridgeObjectRetain();
    if ((v27 & 1) == 0) {
      specialized _NativeDictionary._insert(at:key:value:)(v23, v16, MEMORY[0x263F8EE78], v30);
    }
    uint64_t v31 = v30[7];
    uint64_t v32 = swift_bridgeObjectRelease();
    uint64_t v33 = v31 + 8 * v23;
    MEMORY[0x24C522D60](v32);
    uint64_t v18 = (char *)(a2 + 16);
    if (*(void *)(*(void *)v33 + 16) < *(void *)(*(void *)v33 + 24) >> 1) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
  double v21 = v36;
  uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    goto LABEL_10;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *protocol witness for Collection.subscript.read in conformance Text.Effect.KeyframeLayout(void *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    void *result = *(void *)(*(void *)v2 + 8 * v3 + 32);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.KeyframeLayout@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *(uint64_t **)v2, *(void *)(*(void *)v2 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    char v5 = v2[8];
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = result;
    *(unsigned char *)(a2 + 24) = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.KeyframeLayout@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.KeyframeLayout(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.KeyframeLayout()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(void **)v0, *(unsigned char *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.KeyframeLayout(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *(void **)v3, *(unsigned char *)(v3 + 8));
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>);
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout> and conformance Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout, (uint64_t)&type metadata for Text.Effect.KeyframeLayout, MEMORY[0x263F8E738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance Slice<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, &lazy cache variable for type metadata for Range<Text.Effect.FragmentIdentifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier, (uint64_t)&type metadata for Text.Effect.FragmentIdentifier, MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.KeyframeLayout()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout and conformance Text.Effect.KeyframeLayout, (uint64_t)&type metadata for Text.Effect.KeyframeLayout, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.VisualOrderCollection.Iterator and conformance Text.Effect.VisualOrderCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.VisualOrderCollection.Iterator and conformance Text.Effect.VisualOrderCollection.Iterator;
  if (!lazy protocol witness table cache variable for type Text.Effect.VisualOrderCollection.Iterator and conformance Text.Effect.VisualOrderCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.VisualOrderCollection.Iterator and conformance Text.Effect.VisualOrderCollection.Iterator);
  }
  return result;
}

uint64_t implicit closure #3 in Text.Effect.PartialMap.validate(keyframes:size:)(uint64_t *a1)
{
  _StringGuts.grow(_:)(41);
  v2._object = (void *)0x80000002462237B0;
  v2._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 44;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 657961;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  uint64_t v8 = *a1;
  char v7 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x24C522A60](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unint64_t lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>;
  if (!lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance RangeSet<A>);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t (*a6)(void), void (*a7)(void), void (*a8)(void))
{
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_retain();
  uint64_t v14 = ((uint64_t (*)(uint64_t))a6)(v13);
  if (!v15) {
    goto LABEL_23;
  }
  uint64_t v16 = v14;
  long long v17 = v15;
  int v55 = a7;
  uint64_t v18 = (void *)*a5;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  uint64_t v21 = v18[2];
  BOOL v22 = (v19 & 1) == 0;
  if (__OFADD__(v21, v22))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v23 = v19;
  if (v18[3] >= v21 + v22)
  {
    if (a4)
    {
      uint64_t v26 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
    else
    {
      v55();
      uint64_t v26 = (void *)*a5;
      if (v23) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v26[(v20 >> 6) + 8] |= 1 << v20;
    uint64_t v30 = 8 * v20;
    *(void *)(v26[6] + v30) = v16;
    *(void *)(v26[7] + v30) = v17;
    uint64_t v31 = v26[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    _OWORD v26[2] = v33;
LABEL_13:
    uint64_t v34 = a6();
    if (v35)
    {
      uint64_t v36 = v34;
      long long v37 = v35;
      do
      {
        uint64_t v42 = (void *)*a5;
        unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
        uint64_t v45 = v42[2];
        BOOL v46 = (v44 & 1) == 0;
        BOOL v32 = __OFADD__(v45, v46);
        uint64_t v47 = v45 + v46;
        if (v32) {
          goto LABEL_24;
        }
        char v48 = v44;
        if (v42[3] < v47)
        {
          ((void (*)(uint64_t, uint64_t))a8)(v47, 1);
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
          if ((v48 & 1) != (v49 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v50 = (void *)*a5;
        if (v48)
        {
          uint64_t v38 = 8 * v43;
          id v39 = *(id *)(v50[7] + 8 * v43);

          uint64_t v40 = v50[7];
          *(void *)(v40 + v38) = v39;
        }
        else
        {
          v50[(v43 >> 6) + 8] |= 1 << v43;
          uint64_t v51 = 8 * v43;
          *(void *)(v50[6] + v51) = v36;
          *(void *)(v50[7] + v51) = v37;
          uint64_t v52 = v50[2];
          BOOL v32 = __OFADD__(v52, 1);
          uint64_t v53 = v52 + 1;
          if (v32) {
            goto LABEL_25;
          }
          v50[2] = v53;
        }
        uint64_t v36 = a6();
        long long v37 = v41;
      }
      while (v41);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  a8();
  uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
  if ((v23 & 1) == (v25 & 1))
  {
    unint64_t v20 = v24;
    uint64_t v26 = (void *)*a5;
    if ((v23 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v27 = 8 * v20;
    id v28 = *(id *)(v26[7] + 8 * v20);

    uint64_t v29 = v26[7];
    *(void *)(v29 + v27) = v28;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  char v3 = (void *)a1[1];
  *a2 = v2;
  a2[1] = v3;
  return v3;
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      void v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          unint64_t v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(unsigned char *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }
      return v5 << 16;
    }
    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

unint64_t String.UnicodeScalarView.distance(from:to:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unint64_t v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO14KeyframeLayoutV_Sis5NeverOTg503_s7d3UI4f5VAAE6g44O10PartialMapV8validate9keyframes4sizeyAE0e8h23F0V_So6CGSizeVtFSiAE0J6I16V8FragmentVXEfU_Tf1cn_nTf4x_nTm(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v8;
    uint64_t v4 = a1 + 32;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)v4 + 96) + 16);
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(void *)(result + 8 * v7 + 32) = v5;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *specialized Text.Effect.VisualOrderCollection.init(_:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  int64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 48;
  unint64_t v6 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v3 >= (uint64_t)v2) {
      goto LABEL_67;
    }
    uint64_t v10 = v3 + 1;
    uint64_t v1 = *(void *)(v4 + 8 * v3);
    if (v3 + 1 == v2) {
      break;
    }
    if (v3 + 1 >= v2) {
      goto LABEL_68;
    }
    uint64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1)) {
      goto LABEL_69;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v10);
    if (v11 == v12)
    {
      uint64_t v13 = v2;
      int64_t v14 = v3;
      if (v3 + 2 != v2)
      {
        while (1)
        {
          int64_t v15 = v14 + 3;
          if (__OFADD__(v14 + 2, 1)) {
            break;
          }
          uint64_t v16 = v15 - v10;
          if (__OFSUB__(v15, v10)) {
            goto LABEL_60;
          }
          BOOL v17 = __OFADD__(v1, v16);
          uint64_t v18 = v1 + v16;
          if (v17) {
            goto LABEL_61;
          }
          if (v14 + 2 >= v2) {
            goto LABEL_62;
          }
          if (v18 != *(void *)(v5 + 8 * v14))
          {
            uint64_t v13 = v14 + 2;
            goto LABEL_34;
          }
          ++v14;
          if (v15 == v2)
          {
            uint64_t v13 = v2;
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
LABEL_34:
      if (v13 <= v3) {
        goto LABEL_71;
      }
      if (v13 < 1) {
        goto LABEL_72;
      }
      if (v13 > (uint64_t)v2) {
        goto LABEL_73;
      }
      uint64_t v26 = *(void *)(v4 + 8 * (v13 - 1));
      uint64_t v11 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        goto LABEL_74;
      }
      if (v11 < v1) {
        goto LABEL_75;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      }
      unint64_t v28 = v6[2];
      unint64_t v27 = v6[3];
      if (v28 >= v27 >> 1) {
        unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v6);
      }
      char v7 = 0;
      id v6[2] = v28 + 1;
      uint64_t v8 = &v6[3 * v28];
      v8[4] = v1;
      uint64_t v9 = v8 + 4;
    }
    else
    {
      if (__OFSUB__(v1, 1)) {
        goto LABEL_70;
      }
      if (v1 - 1 == v12)
      {
        uint64_t v13 = v2;
        int64_t v19 = v3;
        if (v3 + 2 != v2)
        {
          while (1)
          {
            int64_t v20 = v19 + 3;
            if (__OFADD__(v19 + 2, 1)) {
              goto LABEL_63;
            }
            uint64_t v21 = v20 - v10;
            if (__OFSUB__(v20, v10)) {
              goto LABEL_64;
            }
            BOOL v17 = __OFSUB__(v1, v21);
            uint64_t v22 = v1 - v21;
            if (v17) {
              goto LABEL_65;
            }
            if (v19 + 2 >= v2) {
              goto LABEL_66;
            }
            if (v22 != *(void *)(v5 + 8 * v19))
            {
              uint64_t v13 = v19 + 2;
              break;
            }
            ++v19;
            if (v20 == v2)
            {
              uint64_t v13 = v2;
              break;
            }
          }
        }
        if (v13 <= v3) {
          goto LABEL_76;
        }
        if (v13 < 1) {
          goto LABEL_77;
        }
        if (v13 > (uint64_t)v2) {
          goto LABEL_78;
        }
        uint64_t v1 = *(void *)(v4 + 8 * (v13 - 1));
        if (v11 < v1) {
          goto LABEL_79;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        unint64_t v30 = v6[2];
        unint64_t v29 = v6[3];
        if (v30 >= v29 >> 1) {
          unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v6);
        }
        id v6[2] = v30 + 1;
        uint64_t v31 = &v6[3 * v30];
        v31[4] = v1;
        uint64_t v9 = v31 + 4;
        char v7 = 1;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        unint64_t v24 = v6[2];
        unint64_t v23 = v6[3];
        if (v24 >= v23 >> 1) {
          unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v6);
        }
        uint64_t v11 = 0;
        id v6[2] = v24 + 1;
        char v25 = &v6[3 * v24];
        v25[4] = v1;
        uint64_t v9 = v25 + 4;
        char v7 = 2;
        uint64_t v13 = v10;
      }
    }
    v9[1] = v11;
    *((unsigned char *)v9 + 16) = v7;
    int64_t v3 = v13;
    if (v13 == v2) {
      return v6;
    }
  }
  if (swift_isUniquelyReferenced_nonNull_native()) {
    goto LABEL_55;
  }
LABEL_80:
  unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
LABEL_55:
  unint64_t v33 = v6[2];
  unint64_t v32 = v6[3];
  if (v33 >= v32 >> 1) {
    unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v6);
  }
  id v6[2] = v33 + 1;
  uint64_t v34 = &v6[3 * v33];
  _DWORD v34[4] = v1;
  v34[5] = 0;
  *((unsigned char *)v34 + 48) = 2;
  return v6;
}

uint64_t specialized Text.Effect.KeyframeLayout.Fragment.Storage.init(line:runIndices:attributedString:)(uint64_t a1, CFIndex a2, CFIndex a3, void *a4)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  MEMORY[0x270FA5388](v9);
  uint64_t v86 = (char *)&v81 - v12;
  if (a2 == a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v13 = *(void **)a1;
  CGFloat v14 = *(double *)(a1 + 8);
  int v15 = *(unsigned __int8 *)(a1 + 16);
  double v16 = *(double *)(a1 + 24);
  double v17 = *(double *)(a1 + 32);
  int v18 = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 32) = *(void *)a1;
  *(CGFloat *)(v4 + 40) = v14;
  *(unsigned char *)(v4 + 48) = v15;
  CGFloat v96 = v16;
  *(double *)(v4 + 56) = v16;
  *(double *)(v4 + 64) = v17;
  CGFloat v95 = v17;
  *(_DWORD *)(v4 + 72) = v18;
  *(void *)(v4 + 80) = a4;
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a3;
  uint64_t v87 = v4;
  if (a3 < a2)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  uint64_t v81 = v11;
  uint64_t v82 = v10;
  double v20 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v19 = *(double *)(MEMORY[0x263F001A0] + 24);
  CGFloat x = *MEMORY[0x263F001A0];
  double v21 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v88 = *MEMORY[0x263F001A0];
  outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, v15);
  id v23 = a4;
  double v24 = 0.0;
  double v83 = v21;
  double v25 = v21;
  double v84 = v20;
  double v26 = v20;
  double v85 = v19;
  double v27 = v19;
  double v28 = 0.0;
  CFIndex v29 = a2;
  double v30 = 0.0;
  double v31 = 0.0;
  do
  {
    if (v29 >= a3)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    CGFloat v89 = v27;
    CGFloat v90 = v26;
    CGFloat v91 = v25;
    double v94 = v24;
    double v93 = v28;
    CGFloat v92 = x;
    if (v15)
    {
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 1);
      uint64_t v42 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v13);
      if (!v42) {
        goto LABEL_34;
      }
      unint64_t v32 = v42;
      outlined consume of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 0);
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 0);

      swift_release();
      unint64_t v32 = (const __CTLine *)v13;
    }
    CFIndex v33 = v29 + 1;
    uint64_t v34 = (id)_CTLineGetRunAtIndex(v32, v29);
    buffer.CGFloat a = 0.0;
    buffer.b = 0.0;
    CGFloat descent = 0.0;
    CGFloat ascent = 0.0;
    originsBuffer.CGFloat y = 0.0;
    CGFloat leading = 0.0;
    originsBuffer.CGFloat x = 0.0;
    v103.location = 0;
    v103.length = 1;
    CTRunGetPositions((CTRunRef)v34, v103, (CGPoint *)&buffer);
    v104.location = 0;
    v104.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v34, v104, 0, &originsBuffer);
    CGFloat v35 = buffer.a - originsBuffer.x;
    CGFloat v36 = buffer.b - originsBuffer.y;
    v105.location = 0;
    v105.length = 0;
    double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v34, v105, &ascent, &descent, &leading);

    swift_release();
    double v38 = ascent;
    double v39 = fabs(descent);
    double v40 = leading;
    v116.origin.CGFloat x = v96 + v35;
    v116.origin.CGFloat y = v95 - v36 - ascent;
    v116.size.CGFloat height = v39 + ascent;
    v107.origin.CGFloat x = v92;
    v107.origin.CGFloat y = v91;
    v107.size.CGFloat width = v90;
    v107.size.CGFloat height = v89;
    v116.size.CGFloat width = TypographicBounds;
    *(CGRect *)(&v25 - 1) = CGRectUnion(v107, v116);
    CGFloat x = v108.origin.x;
    if (v31 <= v38) {
      double v31 = v38;
    }
    if (v30 <= v39) {
      double v30 = v39;
    }
    double v28 = v93;
    if (v93 <= v40) {
      double v28 = v40;
    }
    double v24 = v94 + TypographicBounds;
    CFIndex v29 = v33;
    CGFloat v41 = v88;
  }
  while (a3 != v33);
  unint64_t v43 = (double *)v87;
  *(CGFloat *)(v87 + 120) = v108.origin.x;
  v43[16] = v25;
  v43[17] = v26;
  v43[18] = v27;
  v43[23] = v31;
  v43[24] = v30;
  v43[25] = v28;
  v43[26] = v24;
  *(void *)&buffer.CGFloat a = v13;
  buffer.b = v14;
  LOBYTE(buffer.c) = v15;
  CGFloat v44 = v96;
  CGFloat v45 = v95;
  buffer.d = v96;
  buffer.tCGFloat x = v95;
  LODWORD(buffer.ty) = v18;
  Text.Layout.Line.characterRanges(runIndices:)(a2, a3);
  *(void *)&buffer.CGFloat a = v13;
  buffer.b = v14;
  LOBYTE(buffer.c) = v15;
  buffer.d = v44;
  buffer.tCGFloat x = v45;
  LODWORD(buffer.ty) = v18;
  BOOL v46 = Text.Layout.Line.clusters(for:)();
  int64_t v47 = *((void *)v46 + 2);
  CGFloat a = MEMORY[0x263F8EE78];
  LODWORD(v94) = v15;
  if (v47)
  {
    *(void *)&buffer.CGFloat a = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47, 0);
    CGFloat a = buffer.a;
    char v49 = (uint64_t *)(v46 + 48);
    CGFloat v50 = v85;
    CGFloat v51 = v84;
    CGFloat v52 = v83;
    do
    {
      uint64_t v53 = *v49;
      uint64_t v54 = swift_bridgeObjectRetain();
      double v56 = Text.Layout.Cluster.xrange.getter(v54, v55, v53);
      swift_bridgeObjectRelease();
      buffer.CGFloat a = a;
      unint64_t v58 = *(void *)(*(void *)&a + 16);
      unint64_t v57 = *(void *)(*(void *)&a + 24);
      if (v58 >= v57 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
        CGFloat a = buffer.a;
      }
      *(void *)(*(void *)&a + 16) = v58 + 1;
      *(double *)(*(void *)&a + 8 * v58 + 32) = v56;
      v49 += 3;
      --v47;
    }
    while (v47);
    LOBYTE(v15) = LOBYTE(v94);
  }
  else
  {
    CGFloat v50 = v85;
    CGFloat v51 = v84;
    CGFloat v52 = v83;
  }
  uint64_t v59 = v87;
  *(void *)(v87 + 96) = v46;
  *(void *)&buffer.CGFloat a = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((void *)v46 + 2));
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&buffer, *(uint64_t *)&a);
  swift_bridgeObjectRelease_n();
  long long v60 = specialized Text.Effect.VisualOrderCollection.init(_:)(*(uint64_t *)&buffer.a);
  uint64_t v62 = v61;
  swift_release();
  *(void *)(v59 + 104) = v60;
  *(void *)(v59 + 112) = v62;
  do
  {
    if (a2 >= a3) {
      goto LABEL_32;
    }
    if (v15)
    {
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 1);
      id v78 = (id)_NSTextLineFragmentGetCTLine(v13);
      if (!v78) {
        goto LABEL_35;
      }
      uint64_t v63 = v78;
      outlined consume of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 0);
      outlined copy of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, 0);

      swift_release();
      uint64_t v63 = v13;
    }
    swift_retain();
    id v64 = v63;
    uint64_t v65 = (id)_CTLineGetRunAtIndex(v64, a2);
    v106.location = 0;
    v106.length = 0;
    CGRect ImageBounds = CTRunGetImageBounds((CTRunRef)v65, 0, v106);
    CGFloat v66 = ImageBounds.origin.x;
    CGFloat y = ImageBounds.origin.y;
    CGFloat width = ImageBounds.size.width;
    CGFloat height = ImageBounds.size.height;

    buffer.b = 0.0;
    buffer.CC_SHA1_CTX c = 0.0;
    buffer.CGFloat a = 1.0;
    buffer.d = -1.0;
    buffer.tCGFloat x = v96;
    buffer.tCGFloat y = v95;
    v110.origin.CGFloat x = v66;
    v110.origin.CGFloat y = y;
    v110.size.CGFloat width = width;
    v110.size.CGFloat height = height;
    CGRect v111 = CGRectApplyAffineTransform(v110, &buffer);
    CGFloat v70 = v111.origin.x;
    CGFloat v71 = v111.origin.y;
    CGFloat v72 = v111.size.width;
    CGFloat v73 = v111.size.height;
    swift_release();

    v112.origin.CGFloat x = v70;
    v112.origin.CGFloat y = v71;
    v112.size.CGFloat width = v72;
    v112.size.CGFloat height = v73;
    CGRect v113 = CGRectInset(v112, -1.0, -1.0);
    CGFloat v74 = v113.origin.x;
    CGFloat v75 = v113.origin.y;
    CGFloat v76 = v113.size.width;
    CGFloat v77 = v113.size.height;
    swift_release();

    v114.origin.CGFloat x = v41;
    v114.origin.CGFloat y = v52;
    v114.size.CGFloat width = v51;
    v114.size.CGFloat height = v50;
    v117.origin.CGFloat x = v74;
    v117.origin.CGFloat y = v75;
    v117.size.CGFloat width = v76;
    v117.size.CGFloat height = v77;
    CGRect v115 = CGRectUnion(v114, v117);
    CGFloat v41 = v115.origin.x;
    CGFloat v52 = v115.origin.y;
    CGFloat v51 = v115.size.width;
    CGFloat v50 = v115.size.height;
    ++a2;
    LOBYTE(v15) = LOBYTE(v94);
  }
  while (a3 != a2);
  outlined consume of Text.Layout.Line.Line(v13, *(uint64_t *)&v14, SLOBYTE(v94));
  uint64_t v79 = (CGFloat *)v87;
  *(CGFloat *)(v87 + 152) = v41;
  v79[20] = v52;
  v79[21] = v51;
  v79[22] = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))((uint64_t)v79+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v86, v82);
  v79[11] = 0.0;
  return (uint64_t)v79;
}

uint64_t specialized static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(void *a1, uint64_t a2, uint64_t *a3, const __CFAttributedString *a4, uint64_t a5, uint64_t a6, CFIndex a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v172 = a8;
  CFIndex Length = a7;
  uint64_t v170 = a6;
  CFAttributedStringRef v181 = a4;
  uint64_t v159 = a2;
  v168 = a1;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v158 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v157 = (char *)&v153 - v12;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v171 = v13;
  uint64_t v155 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v156 = (char *)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  double v17 = (char *)&v153 - v16;
  uint64_t v18 = *a3;
  uint64_t v19 = swift_allocObject();
  uint64_t v180 = v19;
  *(void *)(v19 + 16) = MEMORY[0x263F8EE80];
  uint64_t v154 = v19 + 16;
  unint64_t v20 = *(void *)(v18 + 16);
  uint64_t v165 = v18;
  uint64_t v166 = a5;
  if (!v20)
  {
LABEL_65:
    CFIndex Length = CFAttributedStringGetLength(v181);
    if (Length < 0) {
      goto LABEL_139;
    }
    uint64_t v70 = v154;
    swift_beginAccess();
    uint64_t v71 = *(void *)v70;
    uint64_t v74 = *(void *)(*(void *)v70 + 64);
    uint64_t v73 = *(void *)v70 + 64;
    uint64_t v72 = v74;
    uint64_t v75 = 1 << *(unsigned char *)(v71 + 32);
    uint64_t v76 = -1;
    if (v75 < 64) {
      uint64_t v76 = ~(-1 << v75);
    }
    unint64_t v77 = v76 & v72;
    uint64_t v177 = (unint64_t)(v75 + 63) >> 6;
    v163 = (char **)(v155 + 16);
    uint64_t v164 = (void **)(v155 + 8);
    swift_bridgeObjectRetain();
    uint64_t v78 = 0;
    long long v167 = xmmword_2461B9DC0;
    uint64_t v79 = v159;
    uint64_t v172 = v71;
    uint64_t v173 = v73;
    while (1)
    {
      while (!v77)
      {
        uint64_t v82 = v78 + 1;
        if (__OFADD__(v78, 1)) {
          goto LABEL_125;
        }
        if (v82 >= v177)
        {
LABEL_123:
          swift_release();
          return swift_release();
        }
        unint64_t v83 = *(void *)(v73 + 8 * v82);
        ++v78;
        if (!v83)
        {
          uint64_t v78 = v82 + 1;
          if (v82 + 1 >= v177) {
            goto LABEL_123;
          }
          unint64_t v83 = *(void *)(v73 + 8 * v78);
          if (!v83)
          {
            uint64_t v78 = v82 + 2;
            if (v82 + 2 >= v177) {
              goto LABEL_123;
            }
            unint64_t v83 = *(void *)(v73 + 8 * v78);
            if (!v83)
            {
              uint64_t v84 = v82 + 3;
              if (v84 >= v177) {
                goto LABEL_123;
              }
              unint64_t v83 = *(void *)(v73 + 8 * v84);
              if (!v83)
              {
                while (1)
                {
                  uint64_t v78 = v84 + 1;
                  if (__OFADD__(v84, 1)) {
                    goto LABEL_130;
                  }
                  if (v78 >= v177) {
                    goto LABEL_123;
                  }
                  unint64_t v83 = *(void *)(v73 + 8 * v78);
                  ++v84;
                  if (v83) {
                    goto LABEL_87;
                  }
                }
              }
              uint64_t v78 = v84;
            }
          }
        }
LABEL_87:
        unint64_t v77 = (v83 - 1) & v83;
        unint64_t v81 = __clz(__rbit64(v83)) + (v78 << 6);
        if (*(void *)(a5 + 16)) {
          goto LABEL_88;
        }
      }
      unint64_t v80 = __clz(__rbit64(v77));
      v77 &= v77 - 1;
      unint64_t v81 = v80 | (v78 << 6);
      if (*(void *)(a5 + 16))
      {
LABEL_88:
        uint64_t v85 = 8 * v81;
        CFAttributedStringRef v86 = *(const __CFAttributedString **)(*(void *)(v71 + 48) + v85);
        uint64_t v178 = *(void *)(*(void *)(v71 + 56) + v85);
        CFAttributedStringRef v181 = v86;
        uint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v86);
        if (v88)
        {
          CGFloat v89 = *(void **)(*(void *)(a5 + 56) + 8 * v87);
          uint64_t v90 = *(void *)(v79 + 16);
          id v174 = v89;
          if (v90 && (uint64_t v91 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v181), (v92 & 1) != 0))
          {
            CFAttributedStringRef v93 = *(const __CFAttributedString **)(*(void *)(v79 + 56) + 8 * v91);
            uint64_t v94 = v178;
            swift_bridgeObjectRetain();
            CGFloat v95 = v89;
            CFAttributedStringRef v179 = v93;
            swift_retain();
          }
          else
          {
            CGFloat v96 = v17;
            uint64_t v97 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v89) + 0xA0);
            uint64_t v94 = v178;
            swift_bridgeObjectRetain();
            BOOL v98 = v89;
            CFAttributedStringRef v99 = (const __CFAttributedString *)v97();
            double v17 = v96;
            CFAttributedStringRef v179 = v99;
          }
          uint64_t v100 = v171;
          uint64_t v101 = *(void *)(v94 + 16);
          uint64_t v102 = *(void *)(v18 + 16);
          unint64_t v175 = v77;
          uint64_t v176 = v101;
          if (v101 == v102)
          {
            lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
            RangeSet.init()();
            uint64_t v103 = v94;
            uint64_t v104 = *(void *)(v94 + 16);
            CFRange v105 = v164;
            if (v104)
            {
              uint64_t v170 = v78;
              v182 = *v163;
              swift_bridgeObjectRetain();
              uint64_t v106 = 0;
              CGRect v107 = v17;
              CGRect v108 = v156;
              do
              {
                uint64_t v109 = *(void *)(v103 + 8 * v106++ + 32);
                ((void (*)(char *, uint64_t, uint64_t))v182)(v108, v109+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v100);
                specialized RangeSet.insert(contentsOf:)();
                uint64_t v100 = v171;
                ((void (*)(char *, uint64_t))*v105)(v108, v171);
              }
              while (v104 != v106);
              swift_bridgeObjectRelease();
              double v17 = v107;
              uint64_t v78 = v170;
            }
            uint64_t v110 = v100;
            RangeSet.ranges.getter();
            lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
            uint64_t v111 = dispatch thunk of Sequence._copyToContiguousArray()();
            type metadata accessor for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>();
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v167;
            CFIndex v113 = Length;
            *(void *)(inited + 32) = 0;
            *(void *)(inited + 40) = v113;
            char v114 = specialized static Array<A>.== infix(_:_:)(v111, (void *)inited);
            swift_setDeallocating();
            swift_release();
            if (v114) {
              int v115 = 0;
            }
            else {
              int v115 = 3;
            }
            LODWORD(v182) = v115;
            ((void (*)(char *, uint64_t))*v105)(v17, v110);
          }
          else
          {
            LODWORD(v182) = 3;
          }
          uint64_t v116 = (uint64_t)v179;
          swift_retain();
          CGRect v117 = v168;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v185 = (void *)*v117;
          char v119 = v185;
          *CGRect v117 = 0x8000000000000000;
          unint64_t v121 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt64)v181, v116);
          uint64_t v122 = v119[2];
          BOOL v123 = (v120 & 1) == 0;
          uint64_t v124 = v122 + v123;
          if (__OFADD__(v122, v123)) {
            goto LABEL_126;
          }
          char v125 = v120;
          if (v119[3] >= v124)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              uint64_t v128 = v185;
              if (v120) {
                goto LABEL_110;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              uint64_t v128 = v185;
              if (v125) {
                goto LABEL_110;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v124, isUniquelyReferenced_nonNull_native);
            unint64_t v126 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt64)v181, (uint64_t)v179);
            if ((v125 & 1) != (v127 & 1)) {
              goto LABEL_140;
            }
            unint64_t v121 = v126;
            uint64_t v128 = v185;
            if (v125)
            {
LABEL_110:
              uint64_t v129 = v78;
              uint64_t v130 = v128[7] + 16 * v121;
              swift_bridgeObjectRelease();
              *(void *)uint64_t v130 = v178;
              *(unsigned char *)(v130 + 8) = (_BYTE)v182;
              goto LABEL_114;
            }
          }
          v128[(v121 >> 6) + 8] |= 1 << v121;
          char v131 = (const __CFAttributedString **)(v128[6] + 16 * v121);
          CFAttributedStringRef v132 = v179;
          *char v131 = v181;
          v131[1] = v132;
          uint64_t v133 = v128[7] + 16 * v121;
          *(void *)uint64_t v133 = v178;
          *(unsigned char *)(v133 + 8) = (_BYTE)v182;
          uint64_t v134 = v128[2];
          BOOL v135 = __OFADD__(v134, 1);
          uint64_t v136 = v134 + 1;
          if (v135) {
            goto LABEL_128;
          }
          uint64_t v129 = v78;
          v128[2] = v136;
          swift_retain();
LABEL_114:
          uint64_t v137 = v168;
          void *v168 = v128;
          swift_release();
          swift_bridgeObjectRelease();
          char v138 = swift_isUniquelyReferenced_nonNull_native();
          v185 = (void *)v137[1];
          uint64_t v139 = v185;
          v137[1] = 0x8000000000000000;
          unint64_t v141 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v181);
          uint64_t v142 = v139[2];
          BOOL v143 = (v140 & 1) == 0;
          uint64_t v144 = v142 + v143;
          uint64_t v73 = v173;
          if (__OFADD__(v142, v143)) {
            goto LABEL_127;
          }
          char v145 = v140;
          if (v139[3] >= v144)
          {
            if ((v138 & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v144, v138);
            uint64_t v146 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v181);
            if ((v145 & 1) != (v147 & 1)) {
              goto LABEL_141;
            }
            unint64_t v141 = v146;
          }
          a5 = v166;
          int v148 = v185;
          if (v145)
          {
            *(void *)(v185[7] + 8 * v141) = v176;
          }
          else
          {
            v185[(v141 >> 6) + 8] |= 1 << v141;
            uint64_t v149 = 8 * v141;
            *(void *)(v148[6] + v149) = v181;
            *(void *)(v148[7] + v149) = v176;
            uint64_t v150 = v148[2];
            BOOL v135 = __OFADD__(v150, 1);
            uint64_t v151 = v150 + 1;
            if (v135) {
              goto LABEL_129;
            }
            v148[2] = v151;
          }
          v168[1] = v148;

          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v79 = v159;
          uint64_t v71 = v172;
          uint64_t v78 = v129;
          unint64_t v77 = v175;
          uint64_t v18 = v165;
        }
      }
    }
  }
  LODWORD(v174) = a9;
  unint64_t v161 = &v191;
  uint64_t v162 = v18 + 32;
  swift_bridgeObjectRetain();
  unint64_t v21 = 0;
  uint64_t v173 = MEMORY[0x263F8EE58] + 8;
  v160 = v17;
  while (v21 < v20)
  {
    *(void *)&long long v167 = v21;
    double v24 = (long long *)(v162 + 48 * v21);
    long long v25 = *v24;
    long long v26 = v24[1];
    *(_OWORD *)((char *)v193 + 12) = *(long long *)((char *)v24 + 28);
    long long v192 = v25;
    v193[0] = v26;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 24) = 0;
    *(void *)(v27 + 16) = 0;
    uint64_t v178 = v27;
    *(unsigned char *)(v27 + 32) = 1;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 24) = 0;
    *(void *)(v28 + 16) = 0;
    *(unsigned char *)(v28 + 32) = 1;
    uint64_t v29 = swift_allocObject();
    uint64_t v177 = v29;
    *(void *)(v29 + 16) = 0;
    double v30 = (void **)(v29 + 16);
    uint64_t v31 = swift_allocObject();
    uint64_t v176 = v31;
    *(void *)(v31 + 16) = 0;
    unint64_t v32 = (char **)(v31 + 16);
    long long v189 = v192;
    *(_OWORD *)v190 = v193[0];
    *(_OWORD *)&v190[12] = *(_OWORD *)((char *)v193 + 12);
    CFIndex v33 = v161;
    *unint64_t v161 = 0;
    v33[1] = 0;
    outlined retain of Text.Layout.Line((uint64_t)&v192);
    outlined retain of Text.Layout.Line((uint64_t)&v192);
    uint64_t v164 = v30;
    swift_beginAccess();
    swift_beginAccess();
    v163 = v32;
    swift_beginAccess();
    swift_beginAccess();
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v185);
    uint64_t v34 = v186;
    if (v186)
    {
      CGFloat v35 = (char *)v185;
      CFIndex v36 = v187;
      unint64_t v175 = v28;
      while (1)
      {
        v182 = v35;
        uint64_t v37 = one-time initialization token for _textAnimation;
        id v38 = v34;
        swift_retain();
        if (v37 != -1) {
          swift_once();
        }
        CFAttributedStringRef v39 = (const __CFAttributedString *)v38;
        swift_retain();
        CFAttributedStringRef v179 = v39;
        double v40 = (id)_CTLineGetRunAtIndex(v39, v36);
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = (void *)MEMORY[0x24C522820](v41);
        swift_bridgeObjectRelease();
        CFDictionaryRef v43 = _CTRunGetAttributeValueForKey((const __CTRun *)v40, v42);

        if (v43)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v183 = 0u;
          long long v184 = 0u;
        }
        _sypSgWObTm_6((uint64_t)&v183, (uint64_t)&v185, (uint64_t (*)(void))type metadata accessor for Any?);
        CGFloat v44 = (void (*)(void, void, void))v182;
        outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v182, v34);
        if (!v188) {
          break;
        }
        type metadata accessor for AnyTextEffect();
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_24;
        }
        CGFloat v45 = (char *)v183;
        outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v44, v34);
        uint64_t v46 = *(void *)&v45[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
        if (((v174 & 1) != 0 || v46 == v172)
          && *(void *)(v170 + 16)
          && (uint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46), v48 = v182, (v49 & 1) != 0)
          && *(char **)(*(void *)(v170 + 56) + 8 * v47) == v45)
        {
          uint64_t v62 = (char *)*v164;
          if (!*v164 || v45 != v62)
          {
            uint64_t v63 = v177;
            flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v177, v178, v180, &v192, v181);
            uint64_t v62 = *(char **)(v63 + 16);
            char v48 = v182;
          }
          *uint64_t v164 = v45;

          uint64_t v64 = v178;
          uint64_t v65 = v48 + 1;
          BOOL v66 = __OFADD__(v48, 1);
          if (*(unsigned char *)(v178 + 32))
          {
            if (v66) {
              goto LABEL_131;
            }
            if ((uint64_t)v65 < (uint64_t)v48) {
              goto LABEL_135;
            }
            *(void *)(v178 + 16) = v48;
          }
          else
          {
            if (v66) {
              goto LABEL_132;
            }
            if ((uint64_t)v65 < *(void *)(v178 + 16)) {
              goto LABEL_136;
            }
          }
          *(void *)(v64 + 24) = v65;
          *(unsigned char *)(v64 + 32) = 0;
        }
        else
        {
          flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v177, v178, v180, &v192, v181);
        }
LABEL_25:
        uint64_t v50 = one-time initialization token for _textFilterAnimation;
        CFAttributedStringRef v51 = v179;
        swift_retain();
        if (v50 != -1) {
          swift_once();
        }
        CGFloat v52 = v51;
        swift_retain();
        uint64_t v53 = (id)_CTLineGetRunAtIndex(v52, v36);
        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v55 = (void *)MEMORY[0x24C522820](v54);
        swift_bridgeObjectRelease();
        CFDictionaryRef v56 = _CTRunGetAttributeValueForKey((const __CTRun *)v53, v55);

        if (v56)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v183 = 0u;
          long long v184 = 0u;
        }
        uint64_t v28 = v175;
        _sypSgWObTm_6((uint64_t)&v183, (uint64_t)&v185, (uint64_t (*)(void))type metadata accessor for Any?);
        unint64_t v57 = v182;
        outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v182, v34);
        if (!v188)
        {
          _sypSgWOhTm_13((uint64_t)&v185, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_8:
          outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v57, v34);
          flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v176, v28, v180, &v192, v181);
          outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v57, v34);
          goto LABEL_9;
        }
        type metadata accessor for AnyTextFilterEffect();
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_8;
        }
        unint64_t v58 = (char *)v183;
        outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v57, v34);
        uint64_t v59 = *(void *)&v58[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
        if (((v174 & 1) != 0 || v59 == v172)
          && *(void *)(Length + 16)
          && (v60 = specialized __RawDictionaryStorage.find<A>(_:)(v59), unint64_t v57 = v182, (v61 & 1) != 0)
          && *(char **)(*(void *)(Length + 56) + 8 * v60) == v58)
        {
          if (!*v163 || v58 != *v163) {
            flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v176, v28, v180, &v192, v181);
          }
          outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v57, v34);
          uint64_t v67 = *v163;
          *v163 = v58;

          Swift::UInt64 v68 = v57 + 1;
          BOOL v69 = __OFADD__(v57, 1);
          if (*(unsigned char *)(v28 + 32))
          {
            if (v69) {
              goto LABEL_133;
            }
            if ((uint64_t)v68 < (uint64_t)v57) {
              goto LABEL_137;
            }
            *(void *)(v28 + 16) = v57;
          }
          else
          {
            if (v69) {
              goto LABEL_134;
            }
            if ((uint64_t)v68 < *(void *)(v28 + 16)) {
              goto LABEL_138;
            }
          }
          *(void *)(v28 + 24) = v68;
          *(unsigned char *)(v28 + 32) = 0;
        }
        else
        {
          flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v176, v28, v180, &v192, v181);
          outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v57, v34);
        }
LABEL_9:
        specialized EnumeratedSequence.Iterator.next()((uint64_t)&v185);
        CGFloat v35 = (char *)v185;
        uint64_t v34 = v186;
        CFIndex v36 = v187;
        if (!v186) {
          goto LABEL_3;
        }
      }
      _sypSgWOhTm_13((uint64_t)&v185, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_24:
      outlined consume of (offset: Int, element: Text.Layout.Run)?((uint64_t)v44, v34);
      flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v177, v178, v180, &v192, v181);
      goto LABEL_25;
    }
LABEL_3:
    unint64_t v21 = v167 + 1;
    outlined consume of Text.Layout.Line.Line((void *)v189, *((uint64_t *)&v189 + 1), v190[0]);
    uint64_t v22 = v180;
    CFAttributedStringRef v23 = v181;
    flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v177, v178, v180, &v192, v181);
    flushTransformEffectRuns #1 () in static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(v176, v28, v22, &v192, v23);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of Text.Layout.Line((uint64_t)&v192);
    uint64_t v18 = v165;
    a5 = v166;
    unint64_t v20 = *(void *)(v165 + 16);
    double v17 = v160;
    if (v21 == v20)
    {
      swift_bridgeObjectRelease();
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_141:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.filter(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x270FA5388](v24);
  char v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  uint64_t v18 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v19 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    return 0;
  }
  uint64_t v9 = a1;
  uint64_t v10 = 0;
  uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
  v16[1] = v2;
  v16[2] = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v11 = (void (**)(char *, uint64_t))(v5 + 8);
  do
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        uint64_t v20 = v9;
        uint64_t v21 = v17;
      }
      else if ((v9 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    uint64_t v13 = v12;
    Unicode.Scalar.properties.getter();
    char v14 = Unicode.Scalar.Properties.isDiacritic.getter();
    (*v11)(v7, v24);
    if (v14) {
      String.UnicodeScalarView.append(_:)();
    }
    v10 += v13;
  }
  while (v10 < v8);
  return v22;
}

uint64_t specialized Text.Effect.PartialMap.validate(id:keyframes:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 1;
  }
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v7 & 1) == 0) {
    return 1;
  }
  uint64_t v8 = *(void **)(*(void *)(a3 + 56) + 8 * v6);
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0xA0);
  uint64_t v11 = v8;
  uint64_t v12 = v10();

  if (!*(void *)(a2 + 16))
  {

    swift_release();
    return 2;
  }
  swift_retain();
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v12);
  if ((v14 & 1) == 0)
  {

    uint64_t v25 = 2;
    swift_release_n();
    return v25;
  }
  uint64_t v15 = *(void *)(*(void *)(a2 + 56) + 16 * v13);
  swift_bridgeObjectRetain();
  swift_release_n();
  uint64_t v16 = *(uint64_t (**)(void))((*v9 & *v11) + 0x98);
  uint64_t v17 = v11;
  unint64_t v18 = v16();

  if (!v18)
  {
LABEL_76:
    swift_bridgeObjectRelease();
    unint64_t v57 = *(uint64_t (**)(void))((*v9 & *v17) + 0xA8);
    unint64_t v58 = v17;
    uint64_t v59 = v57();

    if (*(void *)(a2 + 16) && (unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v59), (v61 & 1) != 0))
    {
      uint64_t v62 = *(void *)(*(void *)(a2 + 56) + 16 * v60);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v63 = *(void *)(v62 + 16);
      if (v63)
      {
        swift_bridgeObjectRetain();
        uint64_t v64 = 0;
        while (1)
        {
          uint64_t v65 = swift_retain();
          BOOL v66 = Text.Effect.KeyframeLayout.Fragment.isTooComplex.getter(v65);
          swift_release();
          if (v66) {
            break;
          }
          if (v63 == ++v64)
          {

            swift_bridgeObjectRelease_n();
            return 0;
          }
        }

        swift_bridgeObjectRelease_n();
        return 7;
      }
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_release();
    }
    return 0;
  }
  int64_t v19 = *(void *)(v15 + 16);
  if (v19)
  {
    unint64_t v77 = v8;
    uint64_t v79 = v17;
    unint64_t v81 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v20 = 0;
    uint64_t v21 = v81;
    unint64_t v22 = v81[2];
    do
    {
      uint64_t v23 = *(void *)(*(void *)(*(void *)(v15 + 8 * v20 + 32) + 96) + 16);
      unint64_t v24 = v81[3];
      if (v22 >= v24 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v22 + 1, 1);
      }
      ++v20;
      v81[2] = v22 + 1;
      v81[v22++ + 4] = v23;
    }
    while (v19 != v20);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v77;
    uint64_t v17 = v79;
    uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v27 = v18 & 0xFFFFFFFFFFFFFF8;
  if (!(v18 >> 62))
  {
    uint64_t v28 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v28) {
      goto LABEL_20;
    }
    goto LABEL_75;
  }
LABEL_74:
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_75:
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
LABEL_20:
  unint64_t v74 = v18 & 0xC000000000000001;
  if ((v18 & 0xC000000000000001) != 0)
  {
LABEL_88:
    uint64_t v29 = MEMORY[0x24C523D60](0, v18);
    if (*(void *)(a2 + 16)) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }
  if (*(void *)(v27 + 16))
  {
    uint64_t v29 = *(void *)(v18 + 32);
    swift_retain();
    if (*(void *)(a2 + 16))
    {
LABEL_23:
      uint64_t v73 = v28;
      swift_retain_n();
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v29);
      if (v31)
      {
        uint64_t v71 = v21[2];
        unint64_t v67 = v18 + 32;
        uint64_t v68 = v71 - 2;
        uint64_t v32 = 1;
        CFIndex v33 = (void *)MEMORY[0x263F8EE78];
        uint64_t v70 = v27;
        do
        {
          unint64_t v69 = v32;
          uint64_t v34 = *(void *)(*(void *)(a2 + 56) + 16 * v30);
          swift_bridgeObjectRetain();
          swift_release_n();
          int64_t v35 = *(void *)(v34 + 16);
          uint64_t v75 = v34;
          if (v35)
          {
            unint64_t v76 = v18;
            uint64_t v78 = v8;
            unint64_t v80 = v17;
            int64_t v72 = *(void *)(v34 + 16);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
            uint64_t v36 = v71;
            int64_t v35 = v72;
            uint64_t v37 = v34 + 32;
            unint64_t v38 = v33[2];
            int64_t v39 = v72;
            do
            {
              uint64_t v40 = *(void *)(*(void *)(*(void *)v37 + 96) + 16);
              unint64_t v41 = v33[3];
              unint64_t v42 = v38 + 1;
              if (v38 >= v41 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v38 + 1, 1);
                uint64_t v36 = v71;
                int64_t v35 = v72;
              }
              _OWORD v33[2] = v42;
              v33[v38 + 4] = v40;
              v37 += 8;
              ++v38;
              --v39;
            }
            while (v39);
            uint64_t v8 = v78;
            uint64_t v17 = v80;
            uint64_t v9 = (void *)MEMORY[0x263F8EED0];
            unint64_t v18 = v76;
          }
          else
          {
            unint64_t v42 = v33[2];
            uint64_t v36 = v71;
          }
          if (v42 != v36)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();

            swift_bridgeObjectRelease();
            return 4;
          }
          if (v36)
          {
            uint64_t result = (uint64_t)v21;
            uint64_t v27 = v70;
            if (v33 != v21)
            {
              unint64_t v43 = v21[2];
              if (!v43) {
                goto LABEL_95;
              }
              if (v33[4] != v21[4]) {
                goto LABEL_71;
              }
              if (v36 != 1)
              {
                BOOL v44 = v43 >= 2;
                unint64_t v45 = v43 - 2;
                if (!v44) {
                  goto LABEL_96;
                }
                if (v33[5] != v21[5])
                {
LABEL_71:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();

                  return 5;
                }
                if (v36 != 2)
                {
                  uint64_t v46 = 0;
                  while (v68 != v46)
                  {
                    if (v45 == v46) {
                      goto LABEL_93;
                    }
                    if (v33[v46 + 6] != v21[v46 + 6]) {
                      goto LABEL_71;
                    }
                    if (v68 == ++v46) {
                      goto LABEL_49;
                    }
                  }
                  goto LABEL_92;
                }
              }
            }
          }
          else
          {
            uint64_t v27 = v70;
          }
LABEL_49:
          int64_t v47 = v35;
          swift_bridgeObjectRelease();
          int64_t v48 = v47;
          uint64_t v28 = v73;
          if (v48)
          {
            uint64_t v49 = 0;
            while (1)
            {
              if (v49 == *(void *)(v75 + 16))
              {
                __break(1u);
                goto LABEL_88;
              }
              uint64_t v50 = *(void *)(*(void *)(v75 + 32 + 8 * v49) + 96);
              uint64_t v51 = *(void *)(v50 + 16);
              if (v51)
              {
                if (!*(void *)(*(void *)(v50 + 48) + 16))
                {
LABEL_70:
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  return 6;
                }
                if (v51 != 1) {
                  break;
                }
              }
LABEL_51:
              if (v48 == ++v49) {
                goto LABEL_61;
              }
            }
            uint64_t v52 = v50 + 72;
            uint64_t v53 = 1;
            while (1)
            {
              uint64_t v54 = v53 + 1;
              if (__OFADD__(v53, 1)) {
                break;
              }
              if (!*(void *)(*(void *)v52 + 16)) {
                goto LABEL_70;
              }
              v52 += 24;
              ++v53;
              if (v54 == v51) {
                goto LABEL_51;
              }
            }
            __break(1u);
            goto LABEL_74;
          }
LABEL_61:
          swift_bridgeObjectRelease();
          uint64_t result = swift_release();
          if (v69 == v73) {
            goto LABEL_75;
          }
          if (v74)
          {
            uint64_t result = MEMORY[0x24C523D60](v69, v18);
            uint64_t v55 = result;
          }
          else
          {
            if (v69 >= *(void *)(v27 + 16)) {
              goto LABEL_97;
            }
            uint64_t v55 = *(void *)(v67 + 8 * v69);
            uint64_t result = swift_retain();
          }
          if (__OFADD__(v69, 1)) {
            goto LABEL_94;
          }
          if (!*(void *)(a2 + 16)) {
            goto LABEL_89;
          }
          swift_retain_n();
          unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v55);
          uint64_t v32 = v69 + 1;
          CFIndex v33 = (void *)MEMORY[0x263F8EE78];
        }
        while ((v56 & 1) != 0);
      }

      swift_bridgeObjectRelease();
      swift_release_n();
      goto LABEL_90;
    }
LABEL_89:

    swift_bridgeObjectRelease();
LABEL_90:
    swift_bridgeObjectRelease();
    swift_release();
    return 3;
  }
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.PartialKeyframeMap.subscript.getter(Swift::UInt64 a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  swift_retain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if (v7)
  {
    uint64_t v8 = *(void *)(*(void *)(a3 + 56) + 16 * v6);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift_release();
  return v8;
}

void specialized Text.Effect.PartialMap.validate(keyframes:size:)(uint64_t a1)
{
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  uint64_t v68 = MEMORY[0x263F8EE88];
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  unsigned __int8 v64 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      return;
    }
    if (v9 >= v8) {
      goto LABEL_45;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v9);
    if (!v15) {
      break;
    }
LABEL_21:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_5:
    Swift::UInt64 v12 = *(void *)(*(void *)(v3 + 48) + 8 * v11);
    char v13 = specialized Text.Effect.PartialMap.validate(id:keyframes:)(v12, a1, v3);
    if (v13)
    {
      char v17 = v13;
      uint64_t v48 = v1;
      specialized Set._Variant.insert(_:)((Swift::UInt64 *)&v65, v12);
      v64 |= v17 != 7;
      v65._countAndFlagsBits = 0;
      v65._object = (void *)0xE000000000000000;
      v18._countAndFlagsBits = 4023401;
      v18._object = (void *)0xE300000000000000;
      String.append(_:)(v18);
      _print_unlocked<A, B>(_:_:)();
      v19._countAndFlagsBits = 32;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      _print_unlocked<A, B>(_:_:)();
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      uint64_t v20 = specialized Dictionary.subscript.getter(v12, v3);
      if (v20)
      {
        v65._countAndFlagsBits = 0x3D74636566666520;
        v65._object = (void *)0xE800000000000000;
        unint64_t v58 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v20) + 0x70);
        uint64_t v53 = v20;
        uint64_t v21 = v58();
        uint64_t v55 = v22;
        uint64_t v59 = v21;

        v23._countAndFlagsBits = v59;
        v23._object = v55;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        char v56 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v53) + 0xA0);
        unint64_t v24 = v53;
        uint64_t v25 = v56();

        v51._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v25 + 96))();
        v51._object = v26;
        swift_release();
        uint64_t v27 = v24;
        uint64_t v28 = v56();
        unint64_t v60 = v27;

        uint64_t v29 = specialized Text.Effect.PartialKeyframeMap.subscript.getter(v12, v28, a1);
        swift_release();
        if (v29)
        {
          uint64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO14KeyframeLayoutV_Sis5NeverOTg503_s7d3UI4f5VAAE6g44O10PartialMapV8validate9keyframes4sizeyAE0e8h23F0V_So6CGSizeVtFSiAE0J6I16V8FragmentVXEfU_Tf1cn_nTf4x_nTm(v29);
          swift_bridgeObjectRelease();
          v65._countAndFlagsBits = 0;
          v65._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(23);
          swift_bridgeObjectRelease();
          v65._countAndFlagsBits = 2108682;
          v65._object = (void *)0xE300000000000000;
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          v30._countAndFlagsBits = 0xD000000000000010;
          v30._object = (void *)0x8000000246223790;
          String.append(_:)(v30);
          v31._countAndFlagsBits = MEMORY[0x24C522DB0](v57, MEMORY[0x263F8D6C8]);
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v65._countAndFlagsBits = 0;
          v65._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(28);
          swift_bridgeObjectRelease();
          v65._countAndFlagsBits = 2108682;
          v65._object = (void *)0xE300000000000000;
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          v32._countAndFlagsBits = 0xD000000000000017;
          v32._object = (void *)0x8000000246223770;
          String.append(_:)(v32);
        }
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        uint64_t v62 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v60) + 0x98);
        CFIndex v33 = v60;
        unint64_t v34 = v62();
        int64_t v47 = v33;

        if (v34)
        {
          if (v34 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v35)
            {
LABEL_33:
              if (v35 < 1) {
                goto LABEL_50;
              }
              unint64_t v49 = v34 & 0xC000000000000001;
              uint64_t v50 = v35;
              uint64_t v36 = 0;
              unint64_t v52 = v34;
              do
              {
                uint64_t v61 = v36;
                if (v49)
                {
                  uint64_t v63 = MEMORY[0x24C523D60](v36, v34);
                }
                else
                {
                  uint64_t v63 = *(void *)(v34 + 8 * v36 + 32);
                  swift_retain();
                }
                uint64_t v41 = specialized Text.Effect.PartialKeyframeMap.subscript.getter(v12, v63, a1);
                if (v41)
                {
                  uint64_t v54 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO14KeyframeLayoutV_Sis5NeverOTg503_s7d3UI4f5VAAE6g44O10PartialMapV8validate9keyframes4sizeyAE0e8h23F0V_So6CGSizeVtFSiAE0J6I16V8FragmentVXEfU_Tf1cn_nTf4x_nTm(v41);
                  uint64_t v37 = swift_bridgeObjectRelease();
                  v65._countAndFlagsBits = 2108682;
                  v65._object = (void *)0xE300000000000000;
                  v38._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 96))(v37);
                  String.append(_:)(v38);
                  swift_bridgeObjectRelease();
                  v39._countAndFlagsBits = 32;
                  v39._object = (void *)0xE100000000000000;
                  String.append(_:)(v39);
                  v40._countAndFlagsBits = MEMORY[0x24C522DB0](v54, MEMORY[0x263F8D6C8]);
                  String.append(_:)(v40);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v65._countAndFlagsBits = 2108682;
                  v65._object = (void *)0xE300000000000000;
                  v42._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v63 + 96))(0);
                  String.append(_:)(v42);
                  swift_bridgeObjectRelease();
                  v43._countAndFlagsBits = 0x474E495353494D20;
                  v43._object = (void *)0xE800000000000000;
                  String.append(_:)(v43);
                }
                String.append(_:)(v65);
                ++v36;
                swift_release();
                swift_bridgeObjectRelease();
                unint64_t v34 = v52;
              }
              while (v50 != v61 + 1);
            }
          }
          else
          {
            uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v35) {
              goto LABEL_33;
            }
          }
          swift_bridgeObjectRelease();
        }
        v44._countAndFlagsBits = 10;
        v44._object = (void *)0xE100000000000000;
        String.append(_:)(v44);

        uint64_t v1 = v48;
      }
    }
  }
  int64_t v16 = v9 + 1;
  if (v9 + 1 >= v8) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15) {
    goto LABEL_20;
  }
  int64_t v16 = v9 + 2;
  if (v9 + 2 >= v8) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15) {
    goto LABEL_20;
  }
  int64_t v16 = v9 + 3;
  if (v9 + 3 >= v8) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15) {
    goto LABEL_20;
  }
  int64_t v16 = v9 + 4;
  if (v9 + 4 >= v8) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_20:
    int64_t v9 = v16;
    goto LABEL_21;
  }
  int64_t v16 = v9 + 5;
  if (v9 + 5 < v8)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v9 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_49;
        }
        if (v9 >= v8) {
          goto LABEL_45;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v9);
        ++v16;
        if (v15) {
          goto LABEL_21;
        }
      }
    }
    goto LABEL_20;
  }
LABEL_45:
  uint64_t v45 = swift_release();
  uint64_t v46 = v68;
  if (((*(void *)(v68 + 16) != 0) & v64) == 1)
  {
    MEMORY[0x270FA5388](v45);
    specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, partial apply for implicit closure #3 in Text.Effect.PartialMap.validate(keyframes:size:));
  }
  swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v46;
  swift_bridgeObjectRelease();
}

void *specialized Text.Effect.Keyframes.Storage.init(_:)(void *a1)
{
  v1[5] = MEMORY[0x263F8EE88];
  v1[6] = MEMORY[0x263F8EE80];
  swift_beginAccess();
  v1[2] = a1[2];
  swift_beginAccess();
  v1[3] = a1[3];
  swift_beginAccess();
  v1[4] = a1[4];
  swift_beginAccess();
  uint64_t v3 = a1[5];
  swift_beginAccess();
  v1[5] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v4 = a1[6];
  swift_beginAccess();
  v1[6] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[7] = a1[7];
  return v1;
}

uint64_t partial apply for implicit closure #3 in Text.Effect.PartialMap.validate(keyframes:size:)()
{
  return implicit closure #3 in Text.Effect.PartialMap.validate(keyframes:size:)(*(uint64_t **)(v0 + 32));
}

uint64_t sub_245F8B5EC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245F8B624()
{
  return swift_deallocObject();
}

uint64_t sub_245F8B634()
{
  return swift_deallocObject();
}

unsigned char *storeEnumTagSinglePayload for Text.Effect.PartialMap.ValidationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    void *result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245F8B7C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Text.Effect.PartialMap.ValidationResult()
{
  return &unk_26FA78A90;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Effect.VisualOrderCollection.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.VisualOrderCollection.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Text.Effect.VisualOrderCollection.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.VisualOrderCollection.Iterator()
{
  return &type metadata for Text.Effect.VisualOrderCollection.Iterator;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeLayout.Flags()
{
  return &type metadata for Text.Effect.KeyframeLayout.Flags;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeLayout.Fragment()
{
  return &type metadata for Text.Effect.KeyframeLayout.Fragment;
}

uint64_t destructiveInjectEnumTag for Text.Effect.VisualOrderCollection.Run(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.VisualOrderCollection.Run()
{
  return &type metadata for Text.Effect.VisualOrderCollection.Run;
}

void *initializeBufferWithCopyOfBuffer for Text.Effect.PartialKeyframeMap(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.PartialKeyframeMap(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Text.Effect.PartialKeyframeMap(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.PartialKeyframeMap()
{
  return &type metadata for Text.Effect.PartialKeyframeMap;
}

ValueMetadata *type metadata accessor for Text.Effect.PartialMap()
{
  return &type metadata for Text.Effect.PartialMap;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeLayout.Fragment> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout.Fragment> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout.Fragment> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.KeyframeLayout.Fragment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment, (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeLayout.Fragment> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeLayout.Fragment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment, (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, MEMORY[0x263F8E738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance Slice<A>);
  }
  return result;
}

void _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.KeyframeLayout.Fragment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.KeyframeLayout.Fragment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeLayout.Fragment> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeLayout.Fragment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Fragment and conformance Text.Effect.KeyframeLayout.Fragment, (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeLayout.Flags and conformance Text.Effect.KeyframeLayout.Flags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.PartialMap.ValidationResult and conformance Text.Effect.PartialMap.ValidationResult()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.PartialMap.ValidationResult and conformance Text.Effect.PartialMap.ValidationResult;
  if (!lazy protocol witness table cache variable for type Text.Effect.PartialMap.ValidationResult and conformance Text.Effect.PartialMap.ValidationResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.PartialMap.ValidationResult and conformance Text.Effect.PartialMap.ValidationResult);
  }
  return result;
}

uint64_t static DynamicView.traitKeysDependOnView.getter()
{
  return 1;
}

uint64_t static DynamicView<>.makeID()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AGMakeUniqueID();
  *a1 = result;
  return result;
}

uint64_t static DynamicView.makeDynamicView(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v54 = a6;
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v49 = a5;
  uint64_t v50 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  Swift::String v44 = (char *)&v33 - v8;
  uint64_t v52 = type metadata accessor for DynamicViewContainer();
  uint64_t v53 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v46 = (uint64_t)&v33 - v9;
  int v45 = *a2;
  uint64_t v10 = *(void *)a3;
  int v42 = *(_DWORD *)(a3 + 8);
  uint64_t v11 = *(void *)(a3 + 16);
  int v12 = *(_DWORD *)(a3 + 28);
  int v41 = *(_DWORD *)(a3 + 24);
  int v40 = v12;
  int v13 = *(_DWORD *)(a3 + 32);
  int v14 = *(_DWORD *)(a3 + 36);
  uint64_t v15 = *(void *)(a3 + 40);
  uint64_t v16 = *(void *)(a3 + 48);
  int v17 = *(_DWORD *)(a3 + 60);
  int v39 = *(_DWORD *)(a3 + 56);
  int v38 = v17;
  int v18 = *(_DWORD *)(a3 + 68);
  int v37 = *(_DWORD *)(a3 + 64);
  int v36 = v18;
  int v19 = *(_DWORD *)(a3 + 76);
  int v35 = *(_DWORD *)(a3 + 72);
  int v34 = v19;
  int v33 = *(_DWORD *)(a3 + 80);
  uint64_t v62 = v10;
  int v63 = v42;
  uint64_t v64 = v11;
  uint64_t v43 = v11;
  int v65 = v41;
  int v66 = v12;
  int v67 = v13;
  int v68 = v14;
  uint64_t v69 = v15;
  uint64_t v70 = v16;
  int v71 = v39;
  int v72 = v17;
  int v73 = v37;
  int v74 = v18;
  int v75 = v35;
  int v76 = v19;
  int v77 = v33;
  _ViewInputs.makeIndirectOutputs()((uint64_t)&v55);
  uint64_t v20 = v55;
  int v21 = v56;
  int v22 = v57;
  uint64_t v23 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v44, v51, AssociatedTypeWitness);
  uint64_t v62 = v10;
  int v63 = v42;
  uint64_t v64 = v11;
  int v65 = v41;
  int v66 = v40;
  int v67 = v13;
  int v68 = v14;
  uint64_t v69 = v15;
  uint64_t v70 = v16;
  int v71 = v39;
  int v72 = v38;
  int v73 = v37;
  int v74 = v36;
  int v75 = v35;
  int v76 = v34;
  int v77 = v33;
  uint64_t v55 = v20;
  int v56 = v21;
  int v57 = v22;
  uint64_t v24 = v46;
  DynamicViewContainer.init(metadata:view:inputs:outputs:)(v23, v45, &v62, &v55, v46);
  uint64_t v25 = type metadata accessor for DynamicViewContainer.Value();
  uint64_t v26 = v52;
  uint64_t v59 = v25;
  uint64_t v60 = v52;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v24, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v58, v26, MEMORY[0x263F8E628], v27, MEMORY[0x263F8E658], v28);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v24, v26);
  uint64_t result = AGGraphSetFlags();
  uint64_t v30 = *(void *)(v20 + 16);
  if (v30)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v31 += 24;
      --v30;
    }
    while (v30);
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (v22 != *MEMORY[0x263F288F8]) {
    uint64_t result = AGGraphSetIndirectDependency();
  }
  Swift::String v32 = v54;
  *uint64_t v54 = v20;
  *((_DWORD *)v32 + 2) = v21;
  *((_DWORD *)v32 + 3) = v22;
  return result;
}

id DynamicViewContainer.init(metadata:view:inputs:outputs:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *a3;
  int v11 = *((_DWORD *)a3 + 2);
  uint64_t v12 = a3[2];
  int v24 = *((_DWORD *)a3 + 20);
  uint64_t v25 = *a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[3];
  uint64_t v16 = a3[4];
  long long v22 = *(_OWORD *)(a3 + 7);
  long long v23 = *(_OWORD *)(a3 + 5);
  uint64_t v17 = a3[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  int v18 = (int *)type metadata accessor for DynamicViewContainer();
  *(_DWORD *)(a5 + v18[9]) = a2;
  uint64_t v19 = a5 + v18[10];
  *(void *)uint64_t v19 = v10;
  *(_DWORD *)(v19 + 8) = v11;
  *(void *)(v19 + 16) = v12;
  *(void *)(v19 + 24) = v15;
  *(void *)(v19 + 32) = v16;
  *(_OWORD *)(v19 + 40) = v23;
  *(_OWORD *)(v19 + 56) = v22;
  *(void *)(v19 + 72) = v17;
  *(_DWORD *)(v19 + 80) = v24;
  uint64_t v20 = (void *)(a5 + v18[11]);
  *uint64_t v20 = v25;
  v20[1] = v14;
  id result = (id)AGSubgraphGetCurrent();
  if (result) {
    *(void *)(a5 + v18[12]) = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t DynamicViewContainer.Value.matches(type:id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v10 = *(void *)(v9 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v22 - v15, v22, v12, v14);
  uint64_t v18 = (*(uint64_t (**)(char *, void *, uint64_t))(v6 + 16))(v8, v4, a3);
  if (v17 == v23)
  {
    MEMORY[0x270FA5388](v18);
    *(&v22 - 4) = v11;
    *(&v22 - 3) = v10;
    *(&v22 - 2) = (uint64_t)v8;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in implicit closure #1 in DynamicViewContainer.Value.matches(type:id:), (uint64_t)(&v22 - 6), MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v20, (uint64_t)&v24);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    char v19 = (v24 == 2) | v24;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    char v19 = 0;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a3);
  return v19 & 1;
}

uint64_t closure #1 in implicit closure #1 in DynamicViewContainer.Value.matches(type:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v56 = a4;
  uint64_t v57 = a2;
  uint64_t v54 = a1;
  uint64_t v55 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v46 = (char *)&v44 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v49 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v44 - v17;
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v44 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v44 - v21, v54, AssociatedTypeWitness, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, AssociatedTypeWitness);
  uint64_t v47 = a3;
  uint64_t v23 = v57 + *(int *)(type metadata accessor for DynamicViewContainer.Value() + 36);
  uint64_t v54 = v13;
  char v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v24(v18, v23, v9);
  uint64_t v50 = TupleTypeMetadata2;
  uint64_t v25 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v24(v12, (uint64_t)v22, v9);
  uint64_t v52 = v25;
  uint64_t v57 = v9;
  v24(v25, (uint64_t)v18, v9);
  uint64_t v51 = v7;
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v27 = v12;
  uint64_t v53 = AssociatedTypeWitness;
  if (v26(v12, 1, AssociatedTypeWitness) != 1)
  {
    int v45 = v22;
    Swift::String v32 = v48;
    v24(v48, (uint64_t)v27, v57);
    int v33 = v52;
    uint64_t v34 = v53;
    if (v26(v52, 1, v53) != 1)
    {
      uint64_t v38 = v51;
      int v39 = v46;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v46, v33, v34);
      swift_getAssociatedConformanceWitness();
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v40 = *(void (**)(char *, uint64_t))(v38 + 8);
      v40(v39, v34);
      int v41 = *(void (**)(char *, uint64_t))(v54 + 8);
      int v42 = v18;
      uint64_t v43 = v57;
      v41(v42, v57);
      v41(v45, v43);
      v40(v32, v34);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v41)(v27, v43);
      goto LABEL_8;
    }
    int v35 = *(void (**)(char *, uint64_t))(v54 + 8);
    int v36 = v18;
    uint64_t v37 = v57;
    v35(v36, v57);
    v35(v45, v37);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v34);
    goto LABEL_6;
  }
  uint64_t v28 = *(void (**)(char *, uint64_t))(v54 + 8);
  uint64_t v29 = v57;
  v28(v18, v57);
  v28(v22, v29);
  if (v26(v52, 1, v53) != 1)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v27, v50);
    char v31 = 0;
    goto LABEL_8;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v12, v57);
  char v31 = 1;
LABEL_8:
  *uint64_t v55 = v31 & 1;
  return result;
}

uint64_t DynamicViewContainer.Value.init(type:id:subgraph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t v7 = type metadata accessor for DynamicViewContainer.Value();
  uint64_t v8 = (char *)a4 + *(int *)(v7 + 36);
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a2, v9);
  *(void *)((char *)a4 + *(int *)(v7 + 40)) = a3;
  return result;
}

uint64_t DynamicViewContainer.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = type metadata accessor for DynamicViewContainer.Value();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v65 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v62 = (char *)&v58 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  MEMORY[0x270FA5388](v11);
  int v63 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v58 - v14;
  uint64_t v16 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v68 = *(void *)(v20 - 8);
  uint64_t v69 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v67 = a1;
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v70 = (uint64_t)&v58 - v21;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, Value, v4);
  char v24 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v66 = v2;
  uint64_t v25 = v24(v22, v2, v4, v5);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v4);
  Outputuint64_t Value = AGGraphGetOutputValue();
  if (OutputValue)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v15, OutputValue, v6);
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = 1;
  }
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v15, v27, 1, v6);
  uint64_t v29 = v7;
  MEMORY[0x270FA5388](v28);
  *(&v58 - 4) = v4;
  *(&v58 - 3) = v5;
  uint64_t v30 = v5;
  uint64_t v64 = v25;
  uint64_t v31 = v70;
  *(&v58 - 2) = v25;
  *(&v58 - 1) = v31;
  uint64_t v32 = v72;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in DynamicViewContainer.updateValue(), (uint64_t)(&v58 - 6), MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v33, (uint64_t)&v73);
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v15, v32);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v31, v69);
  }
  uint64_t v60 = 0;
  uint64_t v34 = v71;
  int v35 = v63;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v63, v15, v32);
  int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v35, 1, v6);
  uint64_t v61 = v15;
  if (v36 != 1)
  {
    uint64_t v59 = v29;
    int v39 = v62;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v62, v35, v6);
    int v40 = (_DWORD *)(v66 + *(int *)(v67 + 44));
    int v41 = v40[3];
    uint64_t v42 = *(void *)(*(void *)v40 + 16);
    uint64_t v37 = v30;
    if (v42)
    {
      int v43 = *MEMORY[0x263F288F8];
      uint64_t v44 = *(void *)v40 + 48;
      swift_bridgeObjectRetain();
      do
      {
        v44 += 24;
        AGGraphSetIndirectAttribute();
        --v42;
      }
      while (v42);
      if (v41 == v43) {
        goto LABEL_13;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      if (v41 == *MEMORY[0x263F288F8]) {
        goto LABEL_13;
      }
    }
    AGGraphSetIndirectAttribute();
LABEL_13:
    uint64_t v45 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v45);
    *((unsigned char *)&v58 - 16) = 1;
    id v47 = v46;
    AGSubgraphApply();

    AGSubgraphInvalidate();
    uint64_t v29 = v59;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v6);
    goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v32);
  uint64_t v37 = v30;
LABEL_14:
  uint64_t v49 = v66;
  uint64_t v48 = v67;
  id v50 = (id)AGSubgraphGetGraph();
  uint64_t v51 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  AGGraphClearUpdate();
  id v52 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t v53 = v65;
  uint64_t v54 = v49;
  uint64_t v55 = v70;
  closure #2 in DynamicViewContainer.updateValue()(v54, v64, v70, (uint64_t)v51, v4, v37, v65);
  AGSubgraphSetCurrent();

  uint64_t v56 = AGGraphSetUpdate();
  MEMORY[0x270FA5388](v56);
  *(&v58 - 2) = v48;
  *(&v58 - 1) = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v53, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v58 - 4), v6, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v57);

  (*(void (**)(void *, uint64_t))(v29 + 8))(v53, v6);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v61, v72);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v55, v69);
}

id closure #2 in DynamicViewContainer.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  char v73 = (void *)a4;
  uint64_t v67 = a3;
  uint64_t v69 = a2;
  uint64_t v53 = a1;
  uint64_t v68 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v66 = type metadata accessor for Optional();
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v64 = (char *)&v50 - v10;
  uint64_t v52 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v60 = (char *)&v50 - v11;
  uint64_t v55 = a5;
  uint64_t v63 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v59 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DynamicViewContainer();
  uint64_t v54 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v18 = (uint64_t *)(a1 + *(int *)(v17 + 40));
  uint64_t v72 = *v18;
  int v57 = *((_DWORD *)v18 + 2);
  uint64_t v19 = v18[2];
  uint64_t v71 = v18[5];
  uint64_t v70 = v18[6];
  int v58 = *((_DWORD *)v18 + 20);
  uint64_t v20 = v18[3];
  uint64_t v21 = v18[4];
  long long v56 = *(_OWORD *)(v18 + 7);
  uint64_t v22 = v18[9];
  swift_beginAccess();
  LODWORD(a6) = *(_DWORD *)(v19 + 16);
  uint64_t v23 = *(void *)(v19 + 24);
  long long v51 = *(_OWORD *)(v19 + 32);
  long long v50 = *(_OWORD *)(v19 + 48);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(v19 + 72);
  char v26 = *(unsigned char *)(v19 + 80);
  char v27 = *(unsigned char *)(v19 + 81);
  uint64_t v28 = *(void *)(v19 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v29 = swift_allocObject();
  *(_DWORD *)(v29 + 16) = a6;
  *(void *)(v29 + 24) = v23;
  long long v30 = v50;
  *(_OWORD *)(v29 + 32) = v51;
  *(_OWORD *)(v29 + 48) = v30;
  *(void *)(v29 + 64) = v24;
  *(void *)(v29 + 72) = v25;
  *(unsigned char *)(v29 + 80) = v26;
  *(unsigned char *)(v29 + 81) = v27;
  uint64_t v31 = v71;
  *(void *)(v29 + 88) = v28;
  uint64_t v32 = v72;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v33 = v32;
  swift_bridgeObjectRetain();
  uint64_t v34 = v54;
  uint64_t v35 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v16, v53, v14);
  uint64_t v36 = *(void *)(v14 + 16);
  uint64_t Value = AGGraphGetValue();
  uint64_t v38 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v59, Value, v36);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v14);
  uint64_t v39 = v61;
  int v40 = v60;
  uint64_t v41 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v35, AssociatedTypeWitness);
  uint64_t v42 = *(unsigned int *)(v35 + *(int *)(v14 + 36));
  uint64_t v74 = v33;
  int v75 = v57;
  uint64_t v76 = v29;
  uint64_t v77 = v20;
  uint64_t v78 = v21;
  uint64_t v79 = v31;
  uint64_t v80 = v70;
  long long v81 = v56;
  uint64_t v82 = v22;
  int v83 = v58;
  uint64_t v43 = v55;
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t *, uint64_t))(v52 + 64))(&v84, v40, v42, &v74, v55);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v38, v43);
  int v44 = v85;
  uint64_t v45 = (uint64_t *)(v35 + *(int *)(v14 + 44));
  int v46 = *((_DWORD *)v45 + 2);
  LODWORD(v14) = *((_DWORD *)v45 + 3);
  uint64_t v74 = *v45;
  int v75 = v46;
  swift_bridgeObjectRetain();
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v84);
  if (v14 != *MEMORY[0x263F288F8] && v44 != *MEMORY[0x263F288F8]) {
    AGGraphSetIndirectAttribute();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v47 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v67, v66);
  DynamicViewContainer.Value.init(type:id:subgraph:)(v69, v47, (uint64_t)v73, v68);
  uint64_t v48 = v73;

  return v48;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance DynamicViewContainer<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DynamicViewContainer.Value();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void DynamicViewList.Item.__allocating_init(subgraph:)()
{
}

uint64_t DynamicViewList.Item.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);

  return swift_release();
}

uint64_t DynamicViewList.WrappedList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = a5;
  uint64_t v8 = *(void *)(a3 + 24);
  v34[0] = *(void *)(a3 + 16);
  v34[1] = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v34 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v34 - v20;
  uint64_t v22 = *a2;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16);
  uint64_t v35 = a1;
  v24(v16, a1, a4, v19);
  char v25 = swift_dynamicCast();
  char v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v27 = v22;
  if (v25)
  {
    v26(v13, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v13, AssociatedTypeWitness);
    uint64_t v28 = v37;
    swift_getAssociatedConformanceWitness();
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
    long long v30 = v28;
    if (v29) {
      return 0;
    }
  }
  else
  {
    v26(v13, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    long long v30 = v37;
  }
  uint64_t v32 = v30[3];
  uint64_t v33 = v30[4];
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v38 = v27;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 64))(v35, &v38, a4, v36, v32, v33);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance DynamicViewList<A>.WrappedList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DynamicViewList.WrappedList.firstOffset<A>(forID:style:)(a1, a2, a5, a3, a4);
}

uint64_t static DynamicViewList.WrappedIDs.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a3) & 1;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t *a1, uint64_t *a2)
{
  return static DynamicViewList.WrappedIDs.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E060](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance DynamicViewList<A>.WrappedIDs(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance DynamicViewList<A>.WrappedIDs(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance DynamicViewList<A>.WrappedIDs()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.subscript.getter in conformance DynamicViewList<A>.WrappedIDs()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection.indices.getter in conformance DynamicViewList<A>.WrappedIDs()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance DynamicViewList<A>.WrappedIDs(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance DynamicViewList<A>.WrappedIDs(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance DynamicViewList<A>.WrappedIDs(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance DynamicViewList<A>.WrappedIDs@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance DynamicViewList<A>.WrappedIDs(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance DynamicViewList<A>.WrappedIDs()
{
  swift_getWitnessTable();

  return Collection._copyToContiguousArray()();
}

uint64_t DynamicViewList.Transform.bindID(_:)()
{
  return DynamicViewList.Item.bindID(_:)();
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.bindID(_:) in conformance DynamicViewList<A>.Transform()
{
  return DynamicViewList.Transform.bindID(_:)();
}

uint64_t protocol witness for static DynamicView.makeID() in conformance AnyView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AGMakeUniqueID();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static DynamicView.makeID() in conformance <A> A?@<X0>(uint64_t *a1@<X8>)
{
  return static DynamicView<>.makeID()(a1);
}

uint64_t dispatch thunk of static DynamicView.canTransition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static DynamicView.traitKeysDependOnView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static DynamicView.makeID()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of DynamicView.childInfo(metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of DynamicView.makeChildView(metadata:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of DynamicView.makeChildViewList(metadata:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

void *initializeBufferWithCopyOfBuffer for DynamicViewList(void *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 99) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = v9;
    a1 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(void *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v10 = (_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v11 = (_DWORD *)(((unint64_t)a1 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v11 = *v10;
    unint64_t v12 = ((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v13;
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
    *(void *)(v12 + 16) = *(void *)(v13 + 16);
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
    *(_DWORD *)(v12 + 36) = *(_DWORD *)(v13 + 36);
    *(void *)(v12 + 40) = *(void *)(v13 + 40);
    *(void *)(v12 + 48) = *(void *)(v13 + 48);
    *(void *)(v12 + 56) = *(void *)(v13 + 56);
    *(_DWORD *)(v12 + 64) = *(_DWORD *)(v13 + 64);
    *(void *)(v12 + 72) = *(void *)(v13 + 72);
    *(unsigned char *)(v12 + 80) = *(unsigned char *)(v13 + 80);
    uint64_t v14 = (void *)(((unint64_t)v11 + 99) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = (void **)(((unint64_t)v10 + 99) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = *v15;
    *uint64_t v14 = *v15;
    uint64_t v17 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v17 = *v18;
    *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v19 = v16;
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DynamicViewList(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v9 = v8 + 11;
  int v10 = *(_DWORD *)v8;
  v8 += 99;
  *int v7 = v10;
  unint64_t v11 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
  *(_DWORD *)(v11 + 28) = *(_DWORD *)(v12 + 28);
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(v12 + 32);
  *(_DWORD *)(v11 + 36) = *(_DWORD *)(v12 + 36);
  *(void *)(v11 + 40) = *(void *)(v12 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v11 + 48) = *(void *)(v12 + 48);
  *(void *)(v11 + 56) = *(void *)(v12 + 56);
  *(_DWORD *)(v11 + 64) = *(_DWORD *)(v12 + 64);
  *(void *)(v11 + 72) = *(void *)(v12 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v11 + 80) = *(unsigned char *)(v12 + 80);
  unint64_t v13 = ((unint64_t)v7 + 99) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  uint64_t v14 = *(void **)(v8 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = *(void **)v13;
  *(void *)unint64_t v13 = v14;
  v13 += 15;
  id v17 = v14;

  v15 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v13 & 0xFFFFFFFFFFFFFFF8) = *(void *)v15;
  swift_retain();
  swift_release();
  *(void *)(((v13 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DynamicViewList(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = v6 + a1;
  unint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  char v12 = *(unsigned char *)(v10 + 80);
  long long v14 = *(_OWORD *)(v10 + 48);
  long long v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v14;
  *(_OWORD *)(v9 + 64) = v13;
  *(unsigned char *)(v9 + 80) = v12;
  unint64_t v15 = (void *)((v7 + 99) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)v8 + 99) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v15 = *v16;
  id v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v17 = *v18;
  *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DynamicViewList(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_release();
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  swift_release();
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(void *)(v9 + 56) = *(void *)(v10 + 56);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(void *)(v9 + 72) = *(void *)(v10 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v9 + 80) = *(unsigned char *)(v10 + 80);
  long long v11 = (void **)(((unint64_t)v7 + 99) & 0xFFFFFFFFFFFFFFF8);
  char v12 = (void **)(((unint64_t)v8 + 99) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = *v11;
  _DWORD *v11 = *v12;

  long long v14 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v14 = *v15;
  swift_release();
  *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewList(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((((((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 99) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F8EF94);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)((((((unint64_t)a1 + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    id v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

double storeEnumTagSinglePayload for DynamicViewList(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v6 + 64);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  size_t v11 = ((((((((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 99) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v10;
    if (a2 <= v10)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          *((unsigned char *)a1 + v11) = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v11) = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)((char *)a1 + v11) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v8 < 0x7FFFFFFF)
            {
              unint64_t v19 = ((((unint64_t)a1 + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(void *)(v19 + 72) = 0;
                double result = 0.0;
                *(_OWORD *)(v19 + 56) = 0u;
                *(_OWORD *)(v19 + 40) = 0u;
                *(_OWORD *)(v19 + 24) = 0u;
                *(_OWORD *)(v19 + 8) = 0u;
                *(unsigned char *)(v19 + 80) = 0;
                *(void *)unint64_t v19 = a2 ^ 0x80000000;
              }
              else
              {
                *(void *)(v19 + 16) = (a2 - 1);
              }
            }
            else
            {
              unint64_t v18 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
              v18(a1, a2);
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    if (((((((((v9 + 3) & 0xFFFFFFFC) + 99) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = a3 - v10 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v10;
    if (a2 <= v10) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 3) & 0xFFFFFFFC) + 99) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 3) & 0xFFFFFFFC) + 99) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v10 + a2;
    bzero(a1, v11);
    *a1 = v17;
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v11) = v16;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v11) = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x245F8F1F4);
    case 4:
      *(_DWORD *)((char *)a1 + v11) = v16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicViewContainer.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  size_t v9 = v8 + 7;
  int v10 = v6 & 0x100000;
  uint64_t v11 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v10 != 0 || ((v8 + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = ~v7;
    int v15 = (char *)a1 + v7;
    int v16 = (char *)a2 + v7;
    int v17 = (void *)((unint64_t)(v15 + 8) & v14);
    unint64_t v18 = (const void *)((unint64_t)(v16 + 8) & v14);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v18, 1, AssociatedTypeWitness))
    {
      memcpy(v17, v18, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v17, v18, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, AssociatedTypeWitness);
    }
    unint64_t v19 = *(void **)(((unint64_t)v18 + v9) & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v17 + v9) & 0xFFFFFFFFFFFFFFF8) = v19;
    id v20 = v19;
  }
  return a1;
}

void destroy for DynamicViewContainer.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  }
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84)) {
    ++v5;
  }
  int v6 = *(void **)((v5 + 7) & 0xFFFFFFFFFFFFFFF8);
}

void *assignWithCopy for DynamicViewContainer.Value(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  size_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, AssociatedTypeWitness);
  int v11 = v9(v8, 1, AssociatedTypeWitness);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64) + 1;
  }
  int v16 = (void **)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v17 = *(void **)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = *v16;
  char *v16 = v17;
  id v19 = v17;

  return a1;
}

void *initializeWithTake for DynamicViewContainer.Value(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, AssociatedTypeWitness))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
    size_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  *(void *)(((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for DynamicViewContainer.Value(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, AssociatedTypeWitness);
  int v11 = v9(v8, 1, AssociatedTypeWitness);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64) + 1;
  }
  int v16 = (void **)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v17 = *v16;
  char *v16 = *(void **)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewContainer.Value(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = 7;
  if (!v7) {
    uint64_t v11 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v9 < a2)
  {
    unint64_t v12 = ((v11 + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + ((v10 + 8) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v13 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = a2 - v9 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F8FB90);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v9 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if ((v8 & 0x80000000) != 0)
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)a1 + v10 + 8) & ~v10);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v20 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v20) = -1;
    }
    return (v20 + 1);
  }
}

void storeEnumTagSinglePayload for DynamicViewContainer.Value(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  unint64_t v13 = ((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v11 < a3)
  {
    if (((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v14 = a3 - v11 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v11)
  {
    if (((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v16 = a2 - v11;
    }
    else {
      int v16 = 1;
    }
    if (((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v17 = ~v11 + a2;
      bzero(a1, ((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v17;
    }
    switch(v6)
    {
      case 1:
        *((unsigned char *)a1 + v13) = v16;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v13) = v16;
        return;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)((char *)a1 + v13) = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      *((unsigned char *)a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)((char *)a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x245F8FE50);
    case 4:
      *(_DWORD *)((char *)a1 + v13) = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (a2)
      {
LABEL_36:
        if ((v9 & 0x80000000) != 0)
        {
          int v19 = (unsigned char *)(((unint64_t)a1 + v10 + 8) & ~v10);
          if (v9 >= a2)
          {
            uint64_t v23 = *(void (**)(unsigned char *, void))(v7 + 56);
            v23(v19, a2 + 1);
          }
          else
          {
            if (v12 <= 3) {
              int v20 = ~(-1 << (8 * v12));
            }
            else {
              int v20 = -1;
            }
            if (v12)
            {
              int v21 = v20 & (~v9 + a2);
              if (v12 <= 3) {
                int v22 = v12;
              }
              else {
                int v22 = 4;
              }
              bzero(v19, v12);
              switch(v22)
              {
                case 2:
                  *(_WORD *)int v19 = v21;
                  break;
                case 3:
                  *(_WORD *)int v19 = v21;
                  id v19[2] = BYTE2(v21);
                  break;
                case 4:
                  *(_DWORD *)int v19 = v21;
                  break;
                default:
                  *int v19 = v21;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicViewContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v10 = (_DWORD *)(((unint64_t)a1 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v11 = (_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v10 = *v11;
    unint64_t v12 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v13;
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
    *(void *)(v12 + 16) = *(void *)(v13 + 16);
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
    *(_DWORD *)(v12 + 36) = *(_DWORD *)(v13 + 36);
    *(void *)(v12 + 40) = *(void *)(v13 + 40);
    *(void *)(v12 + 48) = *(void *)(v13 + 48);
    *(_DWORD *)(v12 + 56) = *(_DWORD *)(v13 + 56);
    *(_DWORD *)(v12 + 60) = *(_DWORD *)(v13 + 60);
    *(_DWORD *)(v12 + 64) = *(_DWORD *)(v13 + 64);
    *(_DWORD *)(v12 + 68) = *(_DWORD *)(v13 + 68);
    *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
    *(_DWORD *)(v12 + 76) = *(_DWORD *)(v13 + 76);
    *(_DWORD *)(v12 + 80) = *(_DWORD *)(v13 + 80);
    unint64_t v14 = (v12 + 91) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = (v13 + 91) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v14 = *(void *)v15;
    *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
    *(_DWORD *)(v14 + 12) = *(_DWORD *)(v15 + 12);
    int v16 = (void **)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v17 = *v16;
    *(void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8) = *v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v18 = v17;
  }
  return a1;
}

void destroy for DynamicViewContainer(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  unint64_t v4 = (((a1 + *(void *)(v3 + 56) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)((((v4 + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t assignWithCopy for DynamicViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  int v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_retain();
  swift_release();
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  unint64_t v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  unint64_t v13 = (void **)((v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *(void **)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = *v13;
  *unint64_t v13 = v14;
  id v16 = v14;

  return a1;
}

uint64_t initializeWithTake for DynamicViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = v6 + a1;
  int v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  int v12 = *(_DWORD *)(v10 + 80);
  long long v14 = *(_OWORD *)(v10 + 48);
  long long v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v14;
  *(_OWORD *)(v9 + 64) = v13;
  *(_DWORD *)(v9 + 80) = v12;
  unint64_t v15 = (_OWORD *)((v9 + 91) & 0xFFFFFFFFFFFFFFF8);
  id v16 = (_OWORD *)((v10 + 91) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v15 = *v16;
  *(void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DynamicViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  int v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_release();
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  swift_release();
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  unint64_t v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  long long v13 = (void **)((v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v14 = *v13;
  *long long v13 = *(void **)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewContainer(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((((((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F90788);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)((((((unint64_t)a1 + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    int v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

double storeEnumTagSinglePayload for DynamicViewContainer(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v6 + 64);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  size_t v11 = ((((((((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v10;
    if (a2 <= v10)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          *((unsigned char *)a1 + v11) = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v11) = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)((char *)a1 + v11) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v8 < 0x7FFFFFFF)
            {
              unint64_t v19 = ((((unint64_t)a1 + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(void *)(v19 + 72) = 0;
                double result = 0.0;
                *(_OWORD *)(v19 + 56) = 0u;
                *(_OWORD *)(v19 + 40) = 0u;
                *(_OWORD *)(v19 + 24) = 0u;
                *(_OWORD *)(v19 + 8) = 0u;
                *(_DWORD *)(v19 + 80) = 0;
                *(void *)unint64_t v19 = a2 ^ 0x80000000;
              }
              else
              {
                *(void *)(v19 + 16) = (a2 - 1);
              }
            }
            else
            {
              unint64_t v18 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
              v18(a1, a2);
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    if (((((((((v9 + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 91) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = a3 - v10 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v10;
    if (a2 <= v10) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 91) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 91) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v10 + a2;
    bzero(a1, v11);
    *a1 = v17;
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v11) = v16;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v11) = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x245F909E8);
    case 4:
      *(_DWORD *)((char *)a1 + v11) = v16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DynamicViewContainer<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in DynamicViewContainer.updateValue()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v5 = type metadata accessor for DynamicViewContainer.Value();
  uint64_t result = DynamicViewContainer.Value.matches(type:id:)(v4, v3, v5);
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #1 in implicit closure #1 in DynamicViewContainer.Value.matches(type:id:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in implicit closure #1 in DynamicViewContainer.Value.matches(type:id:)(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t initializeWithCopy for DynamicViewList.WrappedList(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = (void *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  size_t v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  unsigned int v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  if (v12(v11, 1, AssociatedTypeWitness))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    uint64_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = *(void *)(v8 + 64);
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    int v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v10, 0, 1, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v16 + 28);
    uint64_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = v14 + 1;
  }
  *(void *)(((unint64_t)v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *assignWithCopy for DynamicViewList.WrappedList(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  long long v4 = (void *)(((unint64_t)a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *long long v4 = *v5;
  swift_retain();
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  unsigned int v10 = (void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v5) = v11(v9, 1, AssociatedTypeWitness);
  int v12 = v11(v10, 1, AssociatedTypeWitness);
  if (v5)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v7 + 84);
    size_t v14 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v7 + 84);
    size_t v14 = *(void *)(v7 + 64);
  }
  if (v13) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = v14 + 1;
  }
  memcpy(v9, v10, v15);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v16 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v7 + 64) + 1;
  }
  *(void *)(((unint64_t)v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for DynamicViewList.WrappedList(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = (void *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *long long v4 = *v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  unsigned int v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, AssociatedTypeWitness))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, AssociatedTypeWitness);
    size_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, AssociatedTypeWitness);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  *(void *)(((unint64_t)v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DynamicViewList.WrappedList(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = (void *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  int v11 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  size_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v6) = v12(v10, 1, AssociatedTypeWitness);
  int v13 = v12(v11, 1, AssociatedTypeWitness);
  if (v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v8 + 84);
    size_t v15 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    int v14 = *(_DWORD *)(v8 + 84);
    size_t v15 = *(void *)(v8 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v10, v11, v16);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v17 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v8 + 64) + 1;
  }
  *(void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewList.WrappedList(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = 7;
  if (!v7) {
    uint64_t v11 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v9 < a2)
  {
    unint64_t v12 = ((v11 + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + ((v10 + 48) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v13 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = a2 - v9 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *(unsigned __int8 *)(a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)(a1 + v12);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F91398);
      case 4:
        int v17 = *(_DWORD *)(a1 + v12);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *(_DWORD *)a1;
        }
        return v9 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if ((v8 & 0x80000000) != 0)
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v6 + 48))((((a1 + 47) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & ~v10);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v20 = *(void *)(a1 + 24);
    if (v20 >= 0xFFFFFFFF) {
      LODWORD(v20) = -1;
    }
    return (v20 + 1);
  }
}

void storeEnumTagSinglePayload for DynamicViewList.WrappedList(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  unint64_t v13 = ((v12 + ((v10 + 48) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v11 < a3)
  {
    if (((v12 + ((v10 + 48) & ~v10) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v14 = a3 - v11 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v11)
  {
    if (((v12 + ((v10 + 48) & ~v10) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v16 = a2 - v11;
    }
    else {
      int v16 = 1;
    }
    if (((v12 + ((v10 + 48) & ~v10) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v17 = ~v11 + a2;
      bzero(a1, ((v12 + ((v10 + 48) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v17;
    }
    switch(v6)
    {
      case 1:
        *((unsigned char *)a1 + v13) = v16;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v13) = v16;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)((char *)a1 + v13) = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      *((unsigned char *)a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)((char *)a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x245F91670);
    case 4:
      *(_DWORD *)((char *)a1 + v13) = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (a2)
      {
LABEL_36:
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v18 = (unsigned char *)(((((unint64_t)a1 + 47) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & ~v10);
          if (v9 >= a2)
          {
            int v22 = *(void (**)(unsigned char *, void))(v7 + 56);
            v22(v18, a2 + 1);
          }
          else
          {
            if (v12 <= 3) {
              int v19 = ~(-1 << (8 * v12));
            }
            else {
              int v19 = -1;
            }
            if (v12)
            {
              int v20 = v19 & (~v9 + a2);
              if (v12 <= 3) {
                int v21 = v12;
              }
              else {
                int v21 = 4;
              }
              bzero(v18, v12);
              switch(v21)
              {
                case 2:
                  *(_WORD *)uint64_t v18 = v20;
                  break;
                case 3:
                  *(_WORD *)uint64_t v18 = v20;
                  void v18[2] = BYTE2(v20);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v18 = v20;
                  break;
                default:
                  *uint64_t v18 = v20;
                  break;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(a1 + 2) = 0u;
          *(_OWORD *)(a1 + 6) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 3) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in DynamicViewList<A>.WrappedIDs()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in DynamicViewList<A>.WrappedIDs()
{
  return swift_getWitnessTable();
}

uint64_t sub_245F91770()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return swift_deallocObject();
}

uint64_t EventBindingManager.send(_:)(uint64_t a1)
{
  swift_weakInit();
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v3 = EventBindingManager.sendDownstream(_:)(a1);
    swift_release();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE88];
  }
  static Update.end()();
  _MovableLockUnlock(v2);
  swift_weakDestroy();
  return v3;
}

Swift::Void __swiftcall EventBindingManager.reset(resetForwardedEventDispatchers:)(Swift::Bool resetForwardedEventDispatchers)
{
  uint64_t v2 = v1;
  LOBYTE(v1) = resetForwardedEventDispatchers;
  uint64_t v3 = swift_allocObject();
  uint64_t v40 = v2;
  swift_weakInit();
  swift_retain();
  specialized static Update.begin()();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in EventBindingManager.reset(resetForwardedEventDispatchers:);
  *(void *)(v4 + 24) = v3;
  uint64_t v5 = one-time initialization token for actions;
  swift_retain();
  if (v5 != -1) {
LABEL_53:
  }
    swift_once();
  int v6 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  id v6[2] = v8 + 1;
  unsigned int v9 = &v6[2 * v8];
  unsigned char v9[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v9[5] = v4;
  static Update.actions = v6;
  swift_bridgeObjectRelease();
  static Update.end()();
  swift_release_n();
  if ((v1 & 1) == 0)
  {
LABEL_46:
    unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_beginAccess();
    *(void *)(v40 + 56) = v37;
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void **)(v40 + 72);
    if (v38)
    {
      objc_msgSend(v38, sel_invalidate);
      uint64_t v39 = *(void **)(v40 + 72);
    }
    else
    {
      uint64_t v39 = 0;
    }
    *(void *)(v40 + 72) = 0;

    swift_beginAccess();
    *(unsigned char *)(v40 + 64) = 0;
    return;
  }
  uint64_t v10 = (void *)(v40 + 48);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v40 + 48);
  uint64_t v41 = v4 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v14 << 6);
LABEL_14:
      uint64_t v17 = *(void *)(v4 + 56);
      *(void *)&long long v45 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
      outlined init with copy of AnyTrackedValue(v17 + 40 * v16, (uint64_t)&v45 + 8);
      goto LABEL_33;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_52;
    }
    if (v18 < v42)
    {
      unint64_t v19 = *(void *)(v41 + 8 * v18);
      if (v19) {
        goto LABEL_18;
      }
      int64_t v20 = v14 + 2;
      ++v14;
      if (v18 + 1 < v42)
      {
        unint64_t v19 = *(void *)(v41 + 8 * v20);
        if (v19) {
          goto LABEL_21;
        }
        int64_t v14 = v18 + 1;
        if (v18 + 2 < v42)
        {
          unint64_t v19 = *(void *)(v41 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_18;
          }
          int64_t v20 = v18 + 3;
          int64_t v14 = v18 + 2;
          if (v18 + 3 < v42) {
            break;
          }
        }
      }
    }
LABEL_32:
    unint64_t v13 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v45 = 0u;
LABEL_33:
    outlined init with take of (key: ObjectIdentifier, value: ForwardedEventDispatcher)?((uint64_t)&v45, (uint64_t)&v48, (uint64_t (*)(void))type metadata accessor for (key: ObjectIdentifier, value: ForwardedEventDispatcher)?);
    if (!v50)
    {
      swift_release();
      goto LABEL_46;
    }
    uint64_t v21 = v48;
    outlined init with take of ScrollStateRequest(&v49, (uint64_t)&v45);
    uint64_t v22 = *((void *)&v46 + 1);
    uint64_t v23 = v47;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v45, *((uint64_t *)&v46 + 1));
    (*(void (**)(uint64_t, uint64_t))(v23 + 40))(v22, v23);
    swift_beginAccess();
    outlined init with copy of AnyTrackedValue((uint64_t)&v45, (uint64_t)v44);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = (void *)*v10;
    uint64_t v1 = (uint64_t)v43;
    void *v10 = 0x8000000000000000;
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
    uint64_t v27 = *(void *)(v1 + 16);
    BOOL v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    char v30 = v25;
    if (*(void *)(v1 + 24) >= v29)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v33 = v43;
        if (v25) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v1 = (uint64_t)&v43;
        specialized _NativeDictionary.copy()();
        uint64_t v33 = v43;
        if (v30) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
      LOBYTE(v1) = (_BYTE)v43;
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_55;
      }
      unint64_t v26 = v31;
      uint64_t v33 = v43;
      if (v30)
      {
LABEL_10:
        uint64_t v1 = v33[7] + 40 * v26;
        __swift_destroy_boxed_opaque_existential_1(v1);
        outlined init with take of ScrollStateRequest(v44, v1);
        goto LABEL_11;
      }
    }
    v33[(v26 >> 6) + 8] |= 1 << v26;
    *(void *)(v33[6] + 8 * v26) = v21;
    outlined init with take of ScrollStateRequest(v44, v33[7] + 40 * v26);
    uint64_t v34 = v33[2];
    BOOL v35 = __OFADD__(v34, 1);
    uint64_t v36 = v34 + 1;
    if (v35) {
      goto LABEL_51;
    }
    _OWORD v33[2] = v36;
LABEL_11:
    void *v10 = v33;
    swift_bridgeObjectRelease();
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
  }
  unint64_t v19 = *(void *)(v41 + 8 * v20);
  if (v19)
  {
LABEL_21:
    int64_t v18 = v20;
LABEL_18:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v18 << 6);
    int64_t v14 = v18;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v18 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v18 >= v42)
    {
      int64_t v14 = v42 - 1;
      goto LABEL_32;
    }
    unint64_t v19 = *(void *)(v41 + 8 * v18);
    ++v20;
    if (v19) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_55:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t EventBindingManager.willRemoveResponder(_:)(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  char v30 = (uint64_t *)(v1 + 56);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v28 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v31 = *(void *)(v1 + 56);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (v7) {
    goto LABEL_20;
  }
LABEL_6:
  int64_t v10 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v10 < v29)
    {
      unint64_t v11 = *(void *)(v28 + 8 * v10);
      ++v9;
      if (v11) {
        goto LABEL_19;
      }
      int64_t v9 = v10 + 1;
      if (v10 + 1 >= v29) {
        goto LABEL_41;
      }
      unint64_t v11 = *(void *)(v28 + 8 * v9);
      if (v11) {
        goto LABEL_19;
      }
      int64_t v9 = v10 + 2;
      if (v10 + 2 >= v29) {
        goto LABEL_41;
      }
      unint64_t v11 = *(void *)(v28 + 8 * v9);
      if (v11)
      {
LABEL_19:
        unint64_t v7 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v9 << 6); ; unint64_t i = v14 | (v9 << 6))
        {
          unint64_t v15 = (Swift::UInt *)(*(void *)(v31 + 48) + 16 * i);
          Swift::UInt v17 = *v15;
          Swift::UInt v16 = v15[1];
          uint64_t v18 = *(void *)(*(void *)(v31 + 56) + 8 * i);
          swift_retain_n();
          if (!v18) {
            goto LABEL_5;
          }
          if (v18 == a1) {
            break;
          }
          swift_release();
          if (!v2 || v18 != v2)
          {
            uint64_t v19 = v18;
            while (1)
            {
              int64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 88);
              uint64_t v21 = swift_retain();
              uint64_t v19 = v20(v21);
              swift_retain();
              swift_release_n();
              if (!v19) {
                break;
              }
              if (v19 == a1) {
                goto LABEL_31;
              }
              swift_release();
              if (v2 && v19 == v2) {
                goto LABEL_30;
              }
            }
LABEL_5:
            uint64_t result = swift_release();
            if (!v7) {
              goto LABEL_6;
            }
            goto LABEL_20;
          }
LABEL_30:
          swift_release();
LABEL_39:
          uint64_t result = swift_release();
          if (!v7) {
            goto LABEL_6;
          }
LABEL_20:
          unint64_t v14 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
LABEL_31:
        swift_beginAccess();
        if (v2)
        {
          swift_retain_n();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v33 = *v30;
          *char v30 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2, v17, v16, isUniquelyReferenced_nonNull_native);
          *char v30 = v33;
        }
        else
        {
          unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
          if ((v24 & 1) == 0)
          {
LABEL_38:
            swift_endAccess();
            swift_release();
            swift_release_n();
            goto LABEL_39;
          }
          unint64_t v25 = v23;
          int v26 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v27 = *v30;
          uint64_t v34 = *v30;
          *char v30 = 0x8000000000000000;
          if (!v26)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v27 = v34;
          }
          specialized _NativeDictionary._delete(at:)(v25, v27);
          *char v30 = v27;
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      int64_t v12 = v10 + 3;
      if (v12 < v29)
      {
        unint64_t v11 = *(void *)(v28 + 8 * v12);
        if (v11)
        {
          int64_t v9 = v12;
          goto LABEL_19;
        }
        while (1)
        {
          int64_t v9 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_43;
          }
          if (v9 >= v29) {
            break;
          }
          unint64_t v11 = *(void *)(v28 + 8 * v9);
          ++v12;
          if (v11) {
            goto LABEL_19;
          }
        }
      }
    }
LABEL_41:
    swift_release();
    return swift_release();
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

Swift::Void __swiftcall EventBindingManager.setInheritedPhase(_:)(SwiftUI::_GestureInputs::InheritedPhase a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1.rawValue;
  swift_beginAccess();
  if (MEMORY[0x24C527E00](v2 + 16))
  {
    uint64_t v4 = *(void *)(v2 + 24);
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    uint64_t v5 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    uint64_t ObjectType = swift_getObjectType();
    v8[0] = v3;
    (*(void (**)(void *, uint64_t, uint64_t))(v4 + 40))(v8, ObjectType, v4);
    unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_weakInit();
    _MovableLockLock(v5);
    specialized static Update.begin()();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      EventBindingManager.sendDownstream(_:)(v7);
      swift_release();
    }
    static Update.end()();
    _MovableLockUnlock(v5);
    swift_weakDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Update.end()();
    _MovableLockUnlock(v5);
    swift_unknownObjectRelease();
  }
}

uint64_t EventBinding.responder.getter()
{
  return swift_retain();
}

uint64_t EventBinding.responder.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*EventBinding.responder.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EventBinding.init(responder:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static EventBinding.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t EventBindingManager.host.getter()
{
  swift_beginAccess();
  return MEMORY[0x24C527E00](v0 + 16);
}

uint64_t EventBindingManager.host.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*EventBindingManager.host.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C527E00](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return EventBindingManager.host.modify;
}

void EventBindingManager.host.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t EventBindingManager.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x24C527E00](v0 + 32);
}

uint64_t EventBindingManager.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*EventBindingManager.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C527E00](v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  v3[3] = v4;
  v3[4] = v5;
  return EventBindingManager.delegate.modify;
}

void EventBindingManager.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 40) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t EventBindingManager.isActive.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t static EventBindingManager.current.getter()
{
  uint64_t v0 = specialized static ViewGraph.current.getter() + 200;
  swift_beginAccess();
  uint64_t v1 = MEMORY[0x24C527E00](v0);
  swift_release();
  if (v1)
  {
    swift_getObjectType();
    uint64_t v2 = swift_conformsToProtocol2();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v2) {
      uint64_t v4 = v1;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v6 = type metadata accessor for PreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + 16))(v10, v6, v6, ObjectType);
      swift_unknownObjectRelease();
      if (v10[0])
      {
        uint64_t v7 = v10[1];
        uint64_t v8 = swift_getObjectType();
        uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v7);
        swift_unknownObjectRelease();
        return v1;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
    return 0;
  }
  return v1;
}

uint64_t EventBindingManager.init()()
{
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 48) = MEMORY[0x263F8EE80];
  *(void *)(v0 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  return v0;
}

uint64_t EventBindingManager.deinit()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1) {
    objc_msgSend(v1, sel_invalidate);
  }
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  outlined destroy of weak GestureGraphDelegate?(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t EventBindingManager.rebindEvent(_:to:)@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  Swift::UInt v6 = *a1;
  Swift::UInt v7 = a1[1];
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 56);
  if (!*(void *)(v8 + 16) || (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7), (v10 & 1) == 0))
  {
    uint64_t result = swift_endAccess();
LABEL_7:
    a2 = 0;
    uint64_t v11 = 1;
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
  uint64_t result = swift_endAccess();
  if (a2 && v11 == a2) {
    goto LABEL_7;
  }
  swift_beginAccess();
  swift_retain_n();
  swift_retain();
  specialized Dictionary.subscript.setter(a2, v6, v7);
  uint64_t result = swift_endAccess();
LABEL_8:
  *a3 = v11;
  a3[1] = a2;
  return result;
}

uint64_t EventBindingManager.sendDownstream(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 16;
  swift_beginAccess();
  if (!MEMORY[0x24C527E00](v4)) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v82 = *(void *)(v2 + 24);
  uint64_t v84 = v4;
  if (MEMORY[0x24C527E00](v4))
  {
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (one-time initialization token for _eventDebugTriggers != -1) {
LABEL_95:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v9 = v84;
  if ((_eventDebugTriggers.rawValue & 2) != 0)
  {
    specialized static Log.eventDebug(_:)(0x45444E4F50534552, 0xEA00000000005352);
    if (v7)
    {
      type metadata accessor for ViewResponder();
      if (swift_dynamicCastClass())
      {
        Swift::Int v10 = default argument 0 of ViewResponder.printTree(depth:)();
        swift_retain();
        ViewResponder.printTree(depth:)(v10);
        swift_release();
      }
    }
    specialized static Log.eventDebug(_:)(0, 0xE000000000000000);
  }
  printEvents(_:)((Swift::OpaquePointer)a1);
  uint64_t v8 = EventBindingManager.dispatchNonGestureEvents(_:)(a1);
  uint64_t v107 = v8;
  swift_retain();
  uint64_t v11 = specialized Dictionary.optimisticFilter(_:)(a1, v2);
  swift_release();
  uint64_t v106 = v11;
  CFAttributedStringRef v86 = (unsigned char *)(v2 + 64);
  swift_beginAccess();
  if ((*(unsigned char *)(v2 + 64) & 1) == 0 && !*(void *)(v11 + 16))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    return v8;
  }
  uint64_t v83 = v11 + 64;
  a1 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v12 = -1;
  if (a1 < 64) {
    uint64_t v12 = ~(-1 << a1);
  }
  unint64_t v13 = v12 & *(void *)(v11 + 64);
  unint64_t v14 = (uint64_t *)(v2 + 56);
  uint64_t v91 = v11;
  swift_bridgeObjectRetain();
  uint64_t v85 = v2 + 32;
  uint64_t result = swift_beginAccess();
  int64_t v92 = 0;
  int64_t v87 = (unint64_t)(a1 + 63) >> 6;
  Swift::UInt v16 = (void *)MEMORY[0x263F8EE78];
  uint64_t v88 = v7;
  uint64_t v90 = v2;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      uint64_t v19 = (v13 - 1) & v13;
      unint64_t v20 = v18 | (v92 << 6);
LABEL_21:
      uint64_t v21 = *(void *)(v91 + 56);
      uint64_t v22 = (uint64_t *)(*(void *)(v91 + 48) + 16 * v20);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      *(void *)&long long v99 = v24;
      *((void *)&v99 + 1) = v23;
      outlined init with copy of AnyTrackedValue(v21 + 40 * v20, (uint64_t)&v100);
      goto LABEL_40;
    }
    int64_t v25 = v92 + 1;
    if (__OFADD__(v92, 1))
    {
      __break(1u);
      goto LABEL_95;
    }
    if (v25 < v87)
    {
      unint64_t v26 = *(void *)(v83 + 8 * v25);
      if (v26) {
        goto LABEL_25;
      }
      int64_t v27 = v92 + 2;
      ++v92;
      if (v25 + 1 < v87)
      {
        unint64_t v26 = *(void *)(v83 + 8 * v27);
        if (v26) {
          goto LABEL_28;
        }
        int64_t v92 = v25 + 1;
        if (v25 + 2 < v87)
        {
          unint64_t v26 = *(void *)(v83 + 8 * (v25 + 2));
          if (v26)
          {
            v25 += 2;
            goto LABEL_25;
          }
          int64_t v27 = v25 + 3;
          int64_t v92 = v25 + 2;
          if (v25 + 3 < v87) {
            break;
          }
        }
      }
    }
LABEL_39:
    uint64_t v19 = 0;
    uint64_t v102 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v99 = 0u;
LABEL_40:
    outlined init with take of (key: ObjectIdentifier, value: ForwardedEventDispatcher)?((uint64_t)&v99, (uint64_t)&v103, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType)?);
    Swift::UInt v28 = *(void *)&v103;
    if (v103 == 0.0)
    {
      int v58 = v16;
      swift_release();
      swift_beginAccess();
      uint64_t v59 = swift_bridgeObjectRetain();
      printEventBindings(_:)((Swift::OpaquePointer)v59);
      swift_bridgeObjectRelease();
      if (one-time initialization token for infinity != -1) {
        swift_once();
      }
      double v60 = 0.0;
      LOBYTE(v61) = 0;
      double v62 = *(double *)&static Time.infinity;
      LOBYTE(v63) = 3;
      if (*v86 == 1 && v7)
      {
        uint64_t v64 = swift_getObjectType();
        uint64_t v65 = v106;
        swift_retain();
        swift_bridgeObjectRetain();
        CFTimeInterval v103 = CACurrentMediaTime();
        uint64_t v66 = v82;
        (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t, CFTimeInterval *, uint64_t, uint64_t))(v82 + 48))(v96, v65, v7, &v103, v64, v82);
        swift_bridgeObjectRelease();
        int v61 = v96[0];
        int v63 = v96[1];
        (*(void (**)(CFTimeInterval *__return_ptr, uint64_t, uint64_t))(v66 + 32))(&v103, v64, v66);
        double v62 = v103;
        (*(void (**)(CFTimeInterval *__return_ptr, uint64_t, uint64_t))(v66 + 64))(&v103, v64, v66);
        swift_release();
        if ((_BYTE)v104) {
          double v60 = 0.0;
        }
        else {
          double v60 = v103;
        }
        if (v63 != 3 || v61)
        {
          uint64_t v67 = swift_bridgeObjectRetain();
          specialized Set.formUnion<A>(_:)(v67);
        }
        else
        {
          LOBYTE(v63) = 3;
        }
      }
      if ((_eventDebugTriggers.rawValue & 0x10) != 0 && v7)
      {
        _s7SwiftUI12GesturePhaseOyytGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
        *((void *)&v105 + 1) = v68;
        LOBYTE(v103) = v61;
        BYTE1(v103) = v63;
        swift_retain();
        ResponderNode.log(action:data:)(0x6168702D746F6F72, 0xEA00000000006573, (uint64_t)&v103);
        swift_release();
        outlined destroy of Any?((uint64_t)&v103);
      }
      if (MEMORY[0x24C527E00](v85))
      {
        uint64_t v69 = *(void *)(v90 + 40);
        uint64_t v70 = swift_getObjectType();
        LOBYTE(v103) = v61;
        BYTE1(v103) = v63;
        (*(void (**)(CFTimeInterval *, uint64_t, uint64_t, uint64_t))(v69 + 16))(&v103, v90, v70, v69);
        swift_unknownObjectRelease();
      }
      if (MEMORY[0x24C527E00](v85))
      {
        uint64_t v71 = *(void *)(v90 + 40);
        uint64_t v72 = swift_getObjectType();
        CFTimeInterval v103 = v60;
        (*(void (**)(CFTimeInterval *, uint64_t, uint64_t, uint64_t))(v71 + 24))(&v103, v90, v72, v71);
        swift_unknownObjectRelease();
      }
      if (*v86 == 1 && v62 < *(double *)&static Time.infinity)
      {
        CFTimeInterval v103 = v62;
        EventBindingManager.scheduleNextEventUpdate(time:)(&v103);
      }
      uint64_t v73 = v58[2];
      if (v73)
      {
        uint64_t v74 = v58 + 5;
        do
        {
          Swift::UInt v75 = *(v74 - 1);
          Swift::UInt v76 = *v74;
          swift_beginAccess();
          unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v76);
          if (v78)
          {
            unint64_t v79 = v77;
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v81 = *v14;
            *(void *)CGFloat v96 = *v14;
            *unint64_t v14 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v81 = *(void *)v96;
            }
            specialized _NativeDictionary._delete(at:)(v79, v81);
            *unint64_t v14 = v81;
            swift_release();
            swift_bridgeObjectRelease();
          }
          v74 += 2;
          swift_endAccess();
          --v73;
        }
        while (v73);
      }
      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v107;
    }
    unint64_t v93 = v19;
    Swift::UInt v29 = v104;
    outlined init with take of ScrollStateRequest(&v105, (uint64_t)&v99);
    swift_beginAccess();
    uint64_t v30 = *v14;
    if (*(void *)(*v14 + 16))
    {
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
      if (v32)
      {
        uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 8 * v31);
        swift_endAccess();
        outlined init with copy of AnyTrackedValue((uint64_t)&v99, (uint64_t)v96);
        uint64_t v34 = v16;
        uint64_t v35 = v97;
        uint64_t v36 = v98;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v96, v97);
        *(void *)&v94[0] = v33;
        unint64_t v37 = *(void (**)(long long *, uint64_t, uint64_t))(v36 + 32);
        swift_retain_n();
        uint64_t v38 = v36;
        Swift::UInt v16 = v34;
        uint64_t v9 = v84;
        v37(v94, v35, v38);
        uint64_t v2 = v90;
        uint64_t v7 = v88;
        swift_beginAccess();
        swift_retain();
        char v39 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v95 = *v14;
        *unint64_t v14 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v28, v29, v39);
        *unint64_t v14 = v95;
        swift_bridgeObjectRelease();
        swift_endAccess();
        outlined init with copy of AnyTrackedValue((uint64_t)v96, (uint64_t)v94);
        uint64_t v40 = v106;
        char v41 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v95 = v40;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v94, v28, v29, v41);
        uint64_t v106 = v95;
        swift_release();
        swift_bridgeObjectRelease();
LABEL_57:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
        goto LABEL_58;
      }
    }
    swift_endAccess();
    if (MEMORY[0x24C527E00](v9))
    {
      uint64_t v42 = *(void *)(v2 + 24);
      uint64_t v43 = swift_getObjectType();
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 24))(v43, v42);
      swift_unknownObjectRelease();
      if (v44)
      {
        uint64_t v45 = *((void *)&v100 + 1);
        uint64_t v46 = v101;
        __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
        if (EventType.isFocusEvent.getter(v45, v46))
        {
          uint64_t v47 = (*(uint64_t (**)(long long *))(*(void *)v44 + 96))(&v99);
          CGFloat v89 = v16;
          if (v47)
          {
            uint64_t v48 = v47;
            swift_release();
            uint64_t v44 = v48;
          }
          goto LABEL_53;
        }
        swift_release();
      }
    }
    if (v7)
    {
      long long v49 = *(uint64_t (**)(long long *))(*(void *)v7 + 96);
      swift_retain();
      uint64_t v44 = v49(&v99);
      swift_release();
      if (v44)
      {
        CGFloat v89 = v16;
LABEL_53:
        swift_retain();
        outlined init with copy of AnyTrackedValue((uint64_t)&v99, (uint64_t)v96);
        uint64_t v50 = v97;
        uint64_t v51 = v98;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v96, v97);
        *(void *)&v94[0] = v44;
        uint64_t v52 = *(void (**)(long long *, uint64_t, uint64_t))(v51 + 32);
        swift_retain_n();
        v52(v94, v50, v51);
        swift_beginAccess();
        swift_retain();
        char v53 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v95 = *v14;
        *unint64_t v14 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v44, v28, v29, v53);
        *unint64_t v14 = v95;
        swift_bridgeObjectRelease();
        swift_endAccess();
        outlined init with copy of AnyTrackedValue((uint64_t)v96, (uint64_t)v94);
        specialized Dictionary.subscript.setter((uint64_t)v94, v28, v29);
        *CFAttributedStringRef v86 = 1;
        if (MEMORY[0x24C527E00](v85))
        {
          uint64_t v2 = v90;
          uint64_t v54 = *(void *)(v90 + 40);
          uint64_t v55 = swift_getObjectType();
          uint64_t v95 = v44;
          *(void *)&v94[0] = v28;
          *((void *)&v94[0] + 1) = v29;
          (*(void (**)(uint64_t *, long long *, uint64_t, uint64_t))(v54 + 8))(&v95, v94, v55, v54);
          swift_unknownObjectRelease();
          swift_release_n();
          swift_release();
          uint64_t v7 = v88;
        }
        else
        {
          swift_release_n();
          swift_release();
          uint64_t v7 = v88;
          uint64_t v2 = v90;
        }
        Swift::UInt v16 = v89;
        goto LABEL_57;
      }
    }
LABEL_58:
    a1 = *((void *)&v100 + 1);
    uint64_t v56 = v101;
    __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
    (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(v56 + 8))(v96, a1, v56);
    if (v96[0] - 2 < 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::UInt v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      }
      a1 = v16[2];
      unint64_t v57 = v16[3];
      if (a1 >= v57 >> 1) {
        Swift::UInt v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), a1 + 1, 1, v16);
      }
      v16[2] = a1 + 1;
      Swift::UInt v17 = &v16[2 * a1];
      v17[4] = v28;
      v17[5] = v29;
    }
    unint64_t v13 = v93;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  }
  unint64_t v26 = *(void *)(v83 + 8 * v27);
  if (v26)
  {
LABEL_28:
    int64_t v25 = v27;
LABEL_25:
    uint64_t v19 = (v26 - 1) & v26;
    unint64_t v20 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v92 = v25;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v87)
    {
      int64_t v92 = v87 - 1;
      goto LABEL_39;
    }
    unint64_t v26 = *(void *)(v83 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t EventBindingManager.send<A>(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = a3;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 72) = a3;
  *(void *)(inited + 80) = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for (EventID, EventType)();
  swift_arrayDestroy();
  swift_weakInit();
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v11 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    EventBindingManager.sendDownstream(_:)(v10);
    swift_release();
  }
  static Update.end()();
  _MovableLockUnlock(v11);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t EventBindingManager.rootResponder.getter()
{
  swift_beginAccess();
  if (!MEMORY[0x24C527E00](v0 + 16)) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t EventBindingManager.focusedResponder.getter()
{
  swift_beginAccess();
  if (!MEMORY[0x24C527E00](v0 + 16)) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t EventBindingManager.dispatchNonGestureEvents(_:)(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v33 = MEMORY[0x263F8EE88];
  uint64_t v4 = (uint64_t *)(v1 + 48);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v24 = v5 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v5 + 64);
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v26 = v1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(v5 + 48) + 8 * i);
    swift_beginAccess();
    uint64_t v17 = *v4;
    if (*(void *)(*v4 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) != 0))
    {
      outlined init with copy of AnyTrackedValue(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v27);
    }
    else
    {
      uint64_t v29 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
    }
    uint64_t result = swift_endAccess();
    if (!*((void *)&v28 + 1)) {
      goto LABEL_39;
    }
    outlined init with take of ScrollStateRequest(&v27, (uint64_t)v30);
    unint64_t v20 = specialized Dictionary.optimisticFilter(_:)(a1, (uint64_t)v30);
    if (*(void *)(v20 + 16))
    {
      uint64_t v21 = v31;
      uint64_t v22 = v32;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
      uint64_t v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v22 + 32))(v20, v26, v21, v22);
      swift_bridgeObjectRelease();
      outlined init with copy of AnyTrackedValue((uint64_t)v30, (uint64_t)&v27);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)&v27, v16);
      swift_endAccess();
      specialized Set.formUnion<A>(_:)(v23);
      uint64_t v3 = v33;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v3 + 16) == *(void *)(a1 + 16))
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      return v3;
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v13 >= v25) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v10;
    if (v14) {
      goto LABEL_22;
    }
    int64_t v10 = v13 + 1;
    if (v13 + 1 >= v25) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v10);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v10 = v13 + 2;
    if (v13 + 2 >= v25) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v10);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v10 = v13 + 3;
    if (v13 + 3 >= v25) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v10);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v10 = v13 + 4;
    if (v13 + 4 >= v25) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v10);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v15 = v13 + 5;
    if (v15 >= v25)
    {
LABEL_35:
      swift_release();
      return v3;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v10 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_38;
        }
        if (v10 >= v25) {
          goto LABEL_35;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v10);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v10 = v15;
LABEL_22:
    unint64_t v8 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

void EventBindingManager.scheduleNextEventUpdate(time:)(double *a1)
{
  double v2 = *a1;
  uint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    objc_msgSend(v3, sel_invalidate);
    uint64_t v4 = *(void **)(v1 + 72);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(v1 + 72) = 0;

  double v5 = v2 - CACurrentMediaTime();
  if (v5 > 0.0 && (*(void *)&v5 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
    uint64_t v7 = swift_allocObject();
    swift_weakInit();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = partial apply for closure #1 in EventBindingManager.scheduleNextEventUpdate(time:);
    *(void *)(v8 + 24) = v7;
    void v14[4] = partial apply for closure #1 in withDelay(_:do:);
    _OWORD v14[5] = v8;
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 1107296256;
    void v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ();
    v14[3] = &block_descriptor_27;
    uint64_t v9 = _Block_copy(v14);
    int64_t v10 = self;
    swift_retain_n();
    id v11 = objc_msgSend(v10, sel_timerWithTimeInterval_repeats_block_, 0, v9, v5);
    _Block_release(v9);
    swift_release();
    id v12 = objc_msgSend(self, sel_mainRunLoop);
    objc_msgSend(v12, sel_addTimer_forMode_, v11, *MEMORY[0x263EFF588]);
    swift_release_n();

    int64_t v13 = *(void **)(v1 + 72);
    *(void *)(v1 + 72) = v11;
  }
}

uint64_t closure #1 in EventBindingManager.scheduleNextEventUpdate(time:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void **)(result + 72);
    *(void *)(result + 72) = 0;

    unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_weakInit();
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    uint64_t v3 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      EventBindingManager.sendDownstream(_:)(v2);
      swift_release();
    }
    static Update.end()();
    _MovableLockUnlock(v3);
    swift_weakDestroy();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in EventBindingManager.reset(resetForwardedEventDispatchers:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 16;
    swift_beginAccess();
    uint64_t v3 = MEMORY[0x24C527E00](v2);
    uint64_t v4 = *(void *)(v1 + 24);
    uint64_t result = swift_release();
    if (v3)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t EventBindingManager.isActive<A>(for:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v3 + 56) + 40 * i, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v19);
    __swift_project_boxed_opaque_existential_1(v19, v20);
    swift_getDynamicType();
    if ((*(uint64_t (**)(void))(v21 + 8))() == a1)
    {
      uint64_t v16 = v20;
      uint64_t v17 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return v18 & 1;
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (v14) {
      goto LABEL_20;
    }
    int64_t v10 = v13 + 1;
    if (v13 + 1 >= v8) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    if (v14) {
      goto LABEL_20;
    }
    int64_t v10 = v13 + 2;
    if (v13 + 2 >= v8) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    if (v14) {
      goto LABEL_20;
    }
    int64_t v10 = v13 + 3;
    if (v13 + 3 >= v8) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    if (v14) {
      goto LABEL_20;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v8)
    {
LABEL_25:
      swift_release();
      swift_beginAccess();
      char v18 = *(unsigned char *)(v1 + 64);
      return v18 & 1;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v10 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_28;
        }
        if (v10 >= v8) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        ++v15;
        if (v14) {
          goto LABEL_20;
        }
      }
    }
    int64_t v10 = v15;
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t EventBindingManager.binds<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 48);
  uint64_t v7 = v6 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v6 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v6 + 56) + 40 * i, (uint64_t)v29);
    outlined init with take of ScrollStateRequest(v29, (uint64_t)v26);
    uint64_t DynamicType = swift_getDynamicType();
    __swift_project_boxed_opaque_existential_1(v26, v27);
    swift_getDynamicType();
    if (DynamicType == (*(uint64_t (**)(void))(v28 + 8))())
    {
      uint64_t v20 = v27;
      uint64_t v21 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      v25[3] = a2;
      v25[4] = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
      char v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v21 + 24))(v25, v3, v20, v21);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      return v23 & 1;
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v16 >= v11) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v16);
    ++v13;
    if (v17) {
      goto LABEL_20;
    }
    int64_t v13 = v16 + 1;
    if (v16 + 1 >= v11) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (v17) {
      goto LABEL_20;
    }
    int64_t v13 = v16 + 2;
    if (v16 + 2 >= v11) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (v17) {
      goto LABEL_20;
    }
    int64_t v13 = v16 + 3;
    if (v16 + 3 >= v11) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (v17) {
      goto LABEL_20;
    }
    int64_t v18 = v16 + 4;
    if (v18 >= v11)
    {
LABEL_25:
      swift_release();
      char v23 = 0;
      return v23 & 1;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        int64_t v13 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_28;
        }
        if (v13 >= v11) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v7 + 8 * v13);
        ++v18;
        if (v17) {
          goto LABEL_20;
        }
      }
    }
    int64_t v13 = v18;
LABEL_20:
    unint64_t v10 = (v17 - 1) & v17;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t ForwardedEventDispatcher.isActive.getter()
{
  return 0;
}

uint64_t ForwardedEventDispatcher.wantsEvent(_:manager:)()
{
  return 1;
}

uint64_t specialized closure #1 in sequence<A>(first:next:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3 = *a1;
  if (*((unsigned char *)a1 + 8) == 1)
  {
    *((unsigned char *)a1 + 8) = 0;
    swift_retain();
  }
  else if (v3)
  {
    uint64_t v7 = *a1;
    swift_retain();
    a2(&v8, &v7);
    swift_release();
    uint64_t v5 = v8;
    swift_retain();
    swift_release();
    *a1 = v5;
    return v5;
  }
  return v3;
}

uint64_t specialized closure #1 in sequence<A>(first:next:)@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #1 in sequence<A>(first:next:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_245F945F0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EventBindingManager.reset(resetForwardedEventDispatchers:)()
{
  return closure #1 in EventBindingManager.reset(resetForwardedEventDispatchers:)();
}

void type metadata accessor for (key: ObjectIdentifier, value: ForwardedEventDispatcher)?()
{
  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: ForwardedEventDispatcher)?)
  {
    type metadata accessor for (key: ObjectIdentifier, value: ForwardedEventDispatcher)(255, &lazy cache variable for type metadata for (key: ObjectIdentifier, value: ForwardedEventDispatcher), &lazy cache variable for type metadata for ForwardedEventDispatcher);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: ForwardedEventDispatcher)?);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>)
  {
    type metadata accessor for (EventID, EventType)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>);
    }
  }
}

uint64_t sub_245F94700@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C527E00](v4);
  uint64_t v6 = *(void *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_245F9475C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_245F947B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 32;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C527E00](v4);
  uint64_t v6 = *(void *)(v3 + 40);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_245F94814(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 40) = v2;
  return swift_unknownObjectWeakAssign();
}

ValueMetadata *type metadata accessor for EventBinding()
{
  return &type metadata for EventBinding;
}

uint64_t method lookup function for EventBindingManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EventBindingManager);
}

uint64_t dispatch thunk of EventBindingManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static ForwardedEventDispatcher.eventType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ForwardedEventDispatcher.isActive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ForwardedEventDispatcher.wantsEvent(_:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ForwardedEventDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ForwardedEventDispatcher.reset()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EventBindingManagerDelegate.didBind(to:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of EventBindingManagerDelegate.didUpdate(phase:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of EventBindingManagerDelegate.didUpdate(gestureCategory:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t outlined init with take of (key: ObjectIdentifier, value: ForwardedEventDispatcher)?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (key: ObjectIdentifier, value: ForwardedEventDispatcher)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for PreferenceKey(255, a3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t partial apply for closure #1 in EventBindingManager.scheduleNextEventUpdate(time:)()
{
  return closure #1 in EventBindingManager.scheduleNextEventUpdate(time:)();
}

uint64_t sub_245F94A34()
{
  swift_release();

  return swift_deallocObject();
}

SwiftUI::UniqueSeedGenerator __swiftcall UniqueSeedGenerator.init()()
{
  *uint64_t v0 = 0;
  return result;
}

Swift::Int __swiftcall UniqueSeedGenerator.generate()()
{
  return (*v0)++;
}

ValueMetadata *type metadata accessor for UniqueSeedGenerator()
{
  return &type metadata for UniqueSeedGenerator;
}

uint64_t key path getter for _ViewInputs.size : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 72);
  return result;
}

uint64_t SizeGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t key path getter for SizeGesture.content : <A>SizeGesture<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(double *a1)@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize) -> (@out A);
  a4[1] = (uint64_t (*)(double *))v8;

  return swift_retain();
}

uint64_t key path setter for SizeGesture.content : <A>SizeGesture<A>(uint64_t *a1, uint64_t (**a2)(double a1, double a2), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize) -> (@out A);
  a2[1] = (uint64_t (*)(double, double))v8;
  return result;
}

uint64_t SizeGesture.content.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t SizeGesture.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SizeGesture.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static SizeGesture._makeGesture(gesture:inputs:)(unsigned int *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = *a1;
  long long v7 = a2[5];
  long long v22 = a2[4];
  long long v23 = v7;
  v24[0] = a2[6];
  *(_OWORD *)((char *)v24 + 12) = *(long long *)((char *)a2 + 108);
  long long v8 = a2[1];
  long long v18 = *a2;
  long long v19 = v8;
  long long v9 = a2[3];
  long long v20 = a2[2];
  long long v21 = v9;
  outlined retain of _GestureInputs((uint64_t)&v18);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  unsigned int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs((uint64_t)&v18);
  *(void *)&v15[0] = __PAIR64__(IndirectAttribute2, v6);
  uint64_t v12 = type metadata accessor for SizeGestureChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)v15, a3, v12, WitnessTable, &v17);
  v15[4] = v22;
  v15[5] = v23;
  *(_OWORD *)int64_t v16 = v24[0];
  *(_OWORD *)&v16[12] = *(_OWORD *)((char *)v24 + 12);
  v15[0] = v18;
  v15[1] = v19;
  _OWORD v15[2] = v20;
  void v15[3] = v21;
  return (*(uint64_t (**)(int *, _OWORD *, uint64_t, uint64_t))(a4 + 32))(&v17, v15, a3, a4);
}

uint64_t SizeGestureChild.gesture.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for SizeGesture();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;

  return swift_retain();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SizeGesture<A>(unsigned int *a1, long long *a2, uint64_t a3)
{
  return static SizeGesture._makeGesture(gesture:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t SizeGestureChild.value.getter()
{
  SizeGestureChild.gesture.getter(&v3);
  uint64_t v0 = v3;
  uint64_t Value = (double *)AGGraphGetValue();
  v0(*Value, Value[1]);

  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance SizeGestureChild<A>()
{
  return SizeGestureChild.value.getter();
}

uint64_t type metadata accessor for SizeGestureChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for SizeGesture<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245F94F10()
{
  return 16;
}

__n128 sub_245F94F1C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for SizeGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in SizeGestureChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245F94F5C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize) -> (@out A)(double a1, double a2)
{
  uint64_t v3 = *(uint64_t (**)(void *))(v2 + 32);
  *(double *)uint64_t v5 = a1;
  *(double *)&v5[1] = a2;
  return v3(v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize) -> (@out A)(double *a1)
{
  return (*(uint64_t (**)(double, double))(v1 + 32))(*a1, a1[1]);
}

uint64_t combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, double *a3, uint64_t a4, double *a5, uint64_t a6, double a7)
{
  uint64_t v52 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  int64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CombinedAnimationState.Entry();
  MEMORY[0x270FA5388](v16);
  long long v18 = (char *)&v45 - v17;
  if (a6 == MEMORY[0x263F8D538])
  {
    double v31 = *a3;
    double v32 = *a5;
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v31, a7, v32);
  }
  else
  {
    uint64_t v51 = a2;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v19 == a6)
    {
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, v51, a4, *a3, a3[1], a3[2], a3[3], a7, *a5, a5[1], a5[2], a5[3]);
    }
    else
    {
      long long v49 = a1;
      uint64_t v50 = a4;
      uint64_t v20 = *a1;
      type metadata accessor for AnimationBox<DefaultCombiningAnimation>();
      uint64_t v22 = v21;
      uint64_t v23 = swift_dynamicCastClass();
      uint64_t v48 = v22;
      if (v23)
      {
        uint64_t v24 = *(void **)(v23 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
        AnimationState.init()((unint64_t *)&v54);
        uint64_t v25 = v54;
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v18, v15, a6);
        *(void *)&v18[*(int *)(v16 + 36)] = v25;
        uint64_t v54 = *v51;
        uint64_t v26 = type metadata accessor for AnimationState();
        uint64_t v54 = AnimationState.combinedState.getter(v26);
        type metadata accessor for Array();
        Array.append(_:)();
        specialized AnimationState.combinedState.setter(v54, v26);
        swift_bridgeObjectRelease();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        }
        unint64_t v28 = v24[2];
        unint64_t v27 = v24[3];
        if (v28 >= v27 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v24);
        }
        _OWORD v24[2] = v28 + 1;
        uint64_t v29 = (double *)&v24[2 * v28];
        *((void *)v29 + 4) = v50;
        v29[5] = a7;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v24;
        uint64_t *v49 = result;
      }
      else
      {
        AnimationState.init()((unint64_t *)&v54);
        uint64_t v33 = v52;
        (*(void (**)(char *, double *, uint64_t))(v52 + 16))(v15, a3, a6);
        uint64_t v46 = v20;
        unint64_t v34 = *v51;
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
        uint64_t v52 = v33 + 32;
        uint64_t v47 = v35;
        v35(v18, v15, a6);
        *(void *)&v18[*(int *)(v16 + 36)] = v34;
        uint64_t v53 = v54;
        uint64_t v36 = type metadata accessor for AnimationState();
        swift_bridgeObjectRetain();
        uint64_t v53 = AnimationState.combinedState.getter(v36);
        uint64_t v45 = type metadata accessor for Array();
        Array.append(_:)();
        specialized AnimationState.combinedState.setter(v53, v36);
        swift_bridgeObjectRelease();
        uint64_t v37 = v46;
        dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
        AnimationState.init()((unint64_t *)&v53);
        uint64_t v38 = v53;
        v47(v18, v15, a6);
        *(void *)&v18[*(int *)(v16 + 36)] = v38;
        uint64_t v53 = v54;
        uint64_t v53 = AnimationState.combinedState.getter(v36);
        Array.append(_:)();
        specialized AnimationState.combinedState.setter(v53, v36);
        swift_bridgeObjectRelease();
        unint64_t *v51 = v54;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v39 = swift_dynamicCastClass();
        if (v39)
        {
          uint64_t v40 = *(void *)(v39 + 16);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v40 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1, (void *)v40);
          }
          unint64_t v42 = *(void *)(v40 + 16);
          unint64_t v41 = *(void *)(v40 + 24);
          if (v42 >= v41 >> 1) {
            uint64_t v40 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, (void *)v40);
          }
          *(void *)(v40 + 16) = v42 + 1;
          uint64_t v43 = v40 + 16 * v42;
          *(void *)(v43 + 32) = v50;
          *(double *)(v43 + 40) = a7;
          swift_release();
        }
        else
        {
          type metadata accessor for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>();
          uint64_t v40 = swift_allocObject();
          *(_OWORD *)(v40 + 16) = xmmword_2461BDD50;
          *(void *)(v40 + 32) = v37;
          *(void *)(v40 + 40) = 0;
          *(void *)(v40 + 48) = v50;
          *(double *)(v40 + 56) = a7;
          swift_retain();
        }
        uint64_t v44 = swift_allocObject();
        *(void *)(v44 + 16) = v40;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t *v49 = v44;
      }
    }
  }
  return result;
}

uint64_t DefaultCombiningAnimation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v99 = type metadata accessor for Optional();
  uint64_t v12 = *(double **)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  uint64_t v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v100 = (uint64_t)&v76 - v16;
  uint64_t v17 = type metadata accessor for CombinedAnimationState.Entry();
  uint64_t v96 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v97 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v98 = (char *)&v76 - v20;
  MEMORY[0x270FA5388](*(void *)(a3 - 8));
  uint64_t v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  int64_t v92 = (char *)&v76 - v24;
  MEMORY[0x270FA5388](v25);
  unint64_t v28 = (char *)&v76 - v27;
  if (a3 == MEMORY[0x263F8D538])
  {
    uint64_t result = specialized DefaultCombiningAnimation.animate<A>(value:time:context:)((uint64_t *)a1, a2, a6);
    *(void *)a5 = result;
    *(unsigned char *)(a5 + 8) = v69 & 1;
    return result;
  }
  uint64_t v81 = v26;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v29 == a3)
  {
    specialized DefaultCombiningAnimation.animate<A>(value:time:context:)((void *)a1, a2, (uint64_t)v103, a6);
    return outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)v103, a5);
  }
  uint64_t v102 = v12;
  uint64_t v77 = a5;
  CGFloat v89 = v14;
  v103[0] = *(void *)a1;
  uint64_t v30 = type metadata accessor for AnimationState();
  AnimationState.combinedState.getter(v30);
  uint64_t v31 = a2;
  uint64_t v32 = MEMORY[0x24C522E60]();
  swift_bridgeObjectRelease();
  if (v32 == *(void *)(v31 + 16))
  {
    uint64_t v85 = v31;
    uint64_t v91 = *(void *)(a4 + 8);
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    if (v32)
    {
      char v78 = v22;
      long long v101 = v28;
      uint64_t v87 = a4;
      Swift::Int v33 = 0;
      unint64_t v34 = (void (**)(char *, uint64_t))(v96 + 8);
      uint64_t v94 = (void (**)(char *, char *, uint64_t))(v81 + 16);
      CFAttributedStringRef v86 = (void (**)(char *, uint64_t, uint64_t))(v102 + 2);
      uint64_t v88 = (uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
      unint64_t v79 = (void (**)(char *, char *, uint64_t))(v81 + 32);
      uint64_t v95 = (void (**)(char *, uint64_t))(v81 + 8);
      uint64_t v90 = (void (**)(uint64_t, uint64_t))(v102 + 1);
      uint64_t v102 = (double *)(v85 + 40);
      uint64_t v85 = v32 - 1;
      uint64_t v35 = v99;
      uint64_t v80 = a1;
      uint64_t v93 = v32;
      uint64_t v83 = (void (**)(char *, uint64_t))(v96 + 8);
      uint64_t v84 = v30;
      while (1)
      {
        v103[0] = *(void *)a1;
        AnimationState.combinedState.getter(v30);
        unint64_t v42 = v98;
        Array.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v43 = *(void *)&v42[*(int *)(v17 + 36)];
        uint64_t v44 = *v34;
        swift_bridgeObjectRetain();
        v44(v42, v17);
        if (v43)
        {
          char v45 = *(unsigned char *)(a1 + 17);
          char v104 = *(unsigned char *)(a1 + 16);
          char v105 = v45;
          uint64_t v47 = *(void *)a1;
          uint64_t v46 = *(void *)(a1 + 8);
          v103[0] = v43;
          v103[1] = v46;
          uint64_t v106 = v47;
          AnimationState.combinedState.getter(v30);
          uint64_t v48 = v97;
          Array.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v49 = (uint64_t)v92;
          (*v94)(v92, v48, a3);
          v44(v48, v17);
          dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
          uint64_t v50 = *((void *)v102 - 1);
          double v51 = a6 - *v102;
          swift_retain();
          uint64_t v52 = v100;
          v53.n128_f64[0] = v51;
          Animation.animate<A>(value:time:context:)(v49, (uint64_t)v103, v50, a3, v87, v100, v53);
          swift_release();
          uint64_t v54 = v89;
          (*v86)(v89, v52, v35);
          uint64_t v55 = *v88;
          int v56 = (*v88)(v54, 1, a3);
          uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v55;
          if (v56 == 1)
          {
            (*v90)((uint64_t)v54, v35);
            uint64_t v106 = *(void *)a1;
            uint64_t v57 = v84;
            uint64_t v106 = AnimationState.combinedState.getter(v84);
            uint64_t v58 = type metadata accessor for Array();
            Array._makeMutableAndUnique()();
            uint64_t v59 = v106;
            Array._checkSubscript_mutating(_:)(v33);
            *(void *)(v59
                      + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))
                      + *(void *)(v96 + 72) * v33
                      + *(int *)(v17 + 36)) = 0;
            swift_bridgeObjectRelease();
            _ViewInputs.base.modify(v58, v60);
            specialized AnimationState.combinedState.setter(v106, v57);
            swift_bridgeObjectRelease();
            dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
            uint64_t v37 = *v95;
          }
          else
          {
            int v61 = v78;
            (*v79)(v78, v54, a3);
            uint64_t v62 = v103[0];
            uint64_t v63 = *(void *)a1;
            swift_bridgeObjectRetain();
            uint64_t v106 = v63;
            uint64_t v57 = v84;
            uint64_t v106 = AnimationState.combinedState.getter(v84);
            uint64_t v64 = type metadata accessor for Array();
            Array._makeMutableAndUnique()();
            uint64_t v65 = v106;
            Array._checkSubscript_mutating(_:)(v33);
            *(void *)(v65
                      + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))
                      + *(void *)(v96 + 72) * v33
                      + *(int *)(v17 + 36)) = v62;
            swift_bridgeObjectRelease();
            _ViewInputs.base.modify(v64, v66);
            specialized AnimationState.combinedState.setter(v106, v57);
            swift_bridgeObjectRelease();
            dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
            uint64_t v37 = *v95;
            (*v95)(v61, a3);
          }
          uint64_t v67 = v49;
          uint64_t v30 = v57;
          uint64_t v41 = v93;
          v37((char *)v67, a3);
          if (v85 == v33)
          {
            *(unsigned char *)(a1 + 17) = v105;
            uint64_t v73 = v100;
            int v74 = v82(v100, 1, a3);
            (*v90)(v73, v99);
            if (v74 == 1)
            {
              v37(v101, a3);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v77, 1, 1, a3);
            }
            else
            {
              uint64_t v75 = v77;
              (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v77, v101, a3);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v75, 0, 1, a3);
            }
            return swift_bridgeObjectRelease();
          }
          uint64_t v35 = v99;
          (*v90)(v100, v99);
          swift_bridgeObjectRelease();
          unint64_t v34 = v83;
        }
        else
        {
          v103[0] = *(void *)a1;
          AnimationState.combinedState.getter(v30);
          uint64_t v36 = v97;
          Array.subscript.getter();
          uint64_t v35 = v99;
          swift_bridgeObjectRelease();
          uint64_t v37 = *v95;
          uint64_t v38 = v30;
          uint64_t v39 = v101;
          (*v95)(v101, a3);
          uint64_t v40 = v39;
          uint64_t v30 = v38;
          (*v94)(v40, v36, a3);
          a1 = v80;
          v44(v36, v17);
          uint64_t v41 = v93;
        }
        ++v33;
        v102 += 2;
        if (v41 == v33)
        {
          uint64_t v72 = v77;
          unint64_t v28 = v101;
          goto LABEL_21;
        }
      }
    }
    uint64_t v37 = *(void (**)(char *, uint64_t))(v81 + 8);
    uint64_t v72 = v77;
LABEL_21:
    v37(v28, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v72, 1, 1, a3);
  }
  else
  {
    uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
    uint64_t v71 = v77;
    return v70(v71, 1, 1, a3);
  }
}

uint64_t AnimationState.combinedState.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CombinedAnimationState();
  uint64_t WitnessTable = swift_getWitnessTable();
  AnimationState.subscript.getter(v2, a1, v2, WitnessTable);
  return v5;
}

uint64_t protocol witness for CustomAnimation.animate<A>(value:time:context:) in conformance DefaultCombiningAnimation@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  return DefaultCombiningAnimation.animate<A>(value:time:context:)(a1, *v5, a2, a3, a4, a5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DefaultCombiningAnimation()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DefaultCombiningAnimation(uint64_t a1)
{
  uint64_t v3 = *v1;
  Swift::UInt v4 = *(void *)(*v1 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt64 *)(v3 + 40);
    do
    {
      Swift::UInt64 v6 = *v5;
      long long v7 = *(void (**)(uint64_t))(*(void *)*(v5 - 1) + 112);
      swift_retain();
      v7(a1);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v8 = v6;
      }
      else {
        Swift::UInt64 v8 = 0;
      }
      Hasher._combine(_:)(v8);
      swift_release();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DefaultCombiningAnimation()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DefaultCombiningAnimation(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DefaultCombiningAnimation.Entry()
{
  uint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DefaultCombiningAnimation.Entry()
{
  Swift::UInt64 v1 = v0[1];
  (*(void (**)(void))(*(void *)*v0 + 112))();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DefaultCombiningAnimation.Entry()
{
  uint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DefaultCombiningAnimation.Entry(double *a1, uint64_t a2)
{
  double v2 = a1[1];
  double v3 = *(double *)(a2 + 8);
  return (*(unsigned int (**)(void))(**(void **)a1 + 104))(*(void *)a2) & (v2 == v3);
}

uint64_t static CombinedAnimationState.defaultValue.getter()
{
  type metadata accessor for CombinedAnimationState.Entry();

  return static Array._allocateUninitialized(_:)();
}

uint64_t protocol witness for static AnimationStateKey.defaultValue.getter in conformance CombinedAnimationState<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CombinedAnimationState.defaultValue.getter();
  *a1 = result;
  return result;
}

uint64_t specialized AnimationState.combinedState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  uint64_t v3 = type metadata accessor for CombinedAnimationState();
  swift_getWitnessTable();
  return specialized AnimationState.subscript.setter((uint64_t)&v5, v3, a2, v3);
}

uint64_t specialized DefaultCombiningAnimation.animate<A>(value:time:context:)(uint64_t *a1, uint64_t a2, double a3)
{
  void (*v34)(long long *__return_ptr, _OWORD *, void *, void, _UNKNOWN **, double);
  unint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  void *v45;
  char isUniquelyReferenced_nonNull_native;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void v51[2];
  char v52;
  char v53;
  _OWORD v54[2];
  long long v55;
  uint64_t v56;

  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = specialized AnimationState.subscript.getter(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  uint64_t v49 = a2;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v8 != v9 || v9 == 0)
  {
LABEL_6:
    double v11 = 0.0;
    return *(void *)&v11;
  }
  else
  {
    type metadata accessor for CombinedAnimationState<Double>();
    uint64_t v14 = v13;
    unint64_t v15 = 0;
    uint64_t v48 = v8 - 1;
    double v16 = 0.0;
    uint64_t v17 = 5;
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v19 = *a1;
      if (*(void *)(*a1 + 16) && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v21 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v19 + 56) + 32 * v20, (uint64_t)v54);
        outlined init with take of Any(v54, &v55);
        outlined init with take of Any(&v55, v54);
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        uint64_t v22 = (void *)v51[0];
      }
      else
      {
        v51[0] = v18;
        swift_bridgeObjectRetain();
        uint64_t v22 = v18;
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (v15 >= v22[2]) {
        break;
      }
      uint64_t v23 = v22[v17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v23)
      {
        uint64_t v25 = *a1;
        uint64_t v24 = a1[1];
        char v26 = *((unsigned char *)a1 + 17);
        uint64_t v52 = *((unsigned char *)a1 + 16);
        __n128 v53 = v26;
        v51[0] = v23;
        v51[1] = v24;
        if (*(void *)(v25 + 16) && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v28 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v27, (uint64_t)v54);
          outlined init with take of Any(v54, &v55);
          outlined init with take of Any(&v55, v54);
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          uint64_t v29 = v50;
        }
        else
        {
          uint64_t v50 = v18;
          swift_bridgeObjectRetain();
          uint64_t v29 = v18;
        }
        uint64_t result = swift_bridgeObjectRelease();
        if (v15 >= v29[2]) {
          goto LABEL_47;
        }
        double v30 = *(double *)&v29[v17 - 1];
        swift_bridgeObjectRelease();
        double v31 = v30 - v16;
        uint64_t v32 = *(void *)(v49 + v17 * 8 - 8);
        double v33 = a3 - *(double *)(v49 + v17 * 8);
        *(double *)uint64_t v54 = v31;
        unint64_t v34 = *(void (**)(long long *__return_ptr, _OWORD *, void *, void, _UNKNOWN **, double))(*(void *)v32 + 120);
        swift_retain();
        v34(&v55, v54, v51, MEMORY[0x263F8D538], &protocol witness table for Double, v33);
        swift_release();
        double v11 = *(double *)&v55;
        if (BYTE8(v55))
        {
          if (*(void *)(v25 + 16) && (uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v36 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v35, (uint64_t)v54);
            outlined init with take of Any(v54, &v55);
            outlined init with take of Any(&v55, v54);
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            uint64_t v37 = v50;
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v37 = v18;
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
            uint64_t v37 = (void *)result;
          }
          if (v15 >= v37[2]) {
            goto LABEL_49;
          }
          v37[v17] = 0;
          swift_bridgeObjectRelease();
          int v56 = v14;
          *(void *)&uint64_t v55 = v37;
          outlined init with take of Any(&v55, v54);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v50 = (void *)*a1;
          *a1 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, v14, isUniquelyReferenced_nonNull_native);
          *a1 = (uint64_t)v50;
          swift_bridgeObjectRelease();
          if (v48 == v15)
          {
            *((unsigned char *)a1 + 17) = v53;
            swift_bridgeObjectRelease();
            return *(void *)&v11;
          }
          double v16 = v16 + v31;
        }
        else
        {
          unint64_t v42 = v51[0];
          if (*(void *)(v25 + 16) && (uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v44 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v43, (uint64_t)v54);
            outlined init with take of Any(v54, &v55);
            outlined init with take of Any(&v55, v54);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            char v45 = v50;
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v45 = v18;
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v45);
            char v45 = (void *)result;
          }
          if (v15 >= v45[2]) {
            goto LABEL_50;
          }
          v45[v17] = v42;
          swift_bridgeObjectRelease();
          int v56 = v14;
          *(void *)&uint64_t v55 = v45;
          outlined init with take of Any(&v55, v54);
          uint64_t v47 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v50 = (void *)*a1;
          *a1 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, v14, v47);
          *a1 = (uint64_t)v50;
          swift_bridgeObjectRelease();
          double v16 = v16 + v11;
          if (v48 == v15)
          {
            *((unsigned char *)a1 + 17) = v53;
            double v11 = v16;
            swift_bridgeObjectRelease();
            return *(void *)&v11;
          }
        }
      }
      else
      {
        uint64_t v38 = *a1;
        if (*(void *)(*a1 + 16) && (uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v40 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v38 + 56) + 32 * v39, (uint64_t)v54);
          outlined init with take of Any(v54, &v55);
          outlined init with take of Any(&v55, v54);
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          uint64_t v41 = (void *)v51[0];
        }
        else
        {
          v51[0] = v18;
          swift_bridgeObjectRetain();
          uint64_t v41 = v18;
        }
        uint64_t result = swift_bridgeObjectRelease();
        if (v15 >= v41[2]) {
          goto LABEL_48;
        }
        double v16 = *(double *)&v41[v17 - 1];
      }
      swift_bridgeObjectRelease();
      ++v15;
      v17 += 2;
      if (v8 == v15) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  return result;
}

uint64_t specialized DefaultCombiningAnimation.animate<A>(value:time:context:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  void (*v37)(float64x2_t *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  void *v52;
  char isUniquelyReferenced_nonNull_native;
  float64x2_t v54;
  float64x2_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  char v71;
  void *v72;
  void v73[2];
  char v74;
  char v75;
  _OWORD v76[3];

  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = specialized AnimationState.subscript.getter(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 16);
  if (v10 != v12 || v12 == 0)
  {
    float64x2_t v14 = 0uLL;
    char v15 = 1;
    float64x2_t v16 = 0uLL;
LABEL_49:
    *(float64x2_t *)a3 = v14;
    *(float64x2_t *)(a3 + 16) = v16;
    *(unsigned char *)(a3 + 32) = v15;
  }
  else
  {
    uint64_t v57 = a3;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(0);
    uint64_t v18 = v17;
    unint64_t v19 = 0;
    unint64_t v20 = (double *)(a2 + 40);
    uint64_t v59 = v10 - 1;
    uint64_t v68 = 0u;
    char v21 = (void *)MEMORY[0x263F8EE78];
    uint64_t v22 = 8;
    uint64_t v58 = v10;
    uint64_t v67 = 0u;
    uint64_t v60 = a1;
    while (1)
    {
      uint64_t v23 = *a1;
      if (*(void *)(*a1 + 16) && (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v25 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v23 + 56) + 32 * v24, (uint64_t)v76);
        outlined init with take of Any(v76, &v69);
        outlined init with take of Any(&v69, v76);
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        char v26 = (void *)v73[0];
      }
      else
      {
        v73[0] = v21;
        swift_bridgeObjectRetain();
        char v26 = v21;
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (v19 >= v26[2]) {
        break;
      }
      uint64_t v27 = v26[v22];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v27)
      {
        uint64_t v29 = *a1;
        uint64_t v28 = a1[1];
        char v30 = *((unsigned char *)a1 + 17);
        int v74 = *((unsigned char *)a1 + 16);
        uint64_t v75 = v30;
        v73[0] = v27;
        v73[1] = v28;
        if (*(void *)(v29 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v32 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v29 + 56) + 32 * v31, (uint64_t)v76);
          outlined init with take of Any(v76, &v69);
          outlined init with take of Any(&v69, v76);
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          double v33 = v72;
        }
        else
        {
          uint64_t v72 = v21;
          swift_bridgeObjectRetain();
          double v33 = v21;
        }
        uint64_t result = swift_bridgeObjectRelease();
        if (v19 >= v33[2]) {
          goto LABEL_51;
        }
        uint64_t v34 = v18;
        uint64_t v63 = *(float64x2_t *)&v33[v22 - 2];
        uint64_t v65 = *(float64x2_t *)&v33[v22 - 4];
        swift_bridgeObjectRelease();
        uint64_t v35 = *((void *)v20 - 1);
        double v36 = a4 - *v20;
        int v61 = vsubq_f64(v65, v68);
        uint64_t v62 = vsubq_f64(v63, v67);
        v76[0] = v61;
        v76[1] = v62;
        uint64_t v37 = *(void (**)(float64x2_t *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double))(*(void *)v35 + 120);
        type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
        uint64_t v39 = v38;
        uint64_t v40 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
        swift_retain();
        v37(&v69, v76, v73, v39, v40, v36);
        swift_release();
        uint64_t v64 = v70;
        uint64_t v66 = v69;
        uint64_t v41 = v71;
        if (v71)
        {
          uint64_t v18 = v34;
          if (*(void *)(v29 + 16) && (unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v34), (v43 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v29 + 56) + 32 * v42, (uint64_t)v76);
            outlined init with take of Any(v76, &v69);
            outlined init with take of Any(&v69, v76);
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            uint64_t v44 = v72;
            a1 = v60;
            char v21 = (void *)MEMORY[0x263F8EE78];
          }
          else
          {
            char v21 = (void *)MEMORY[0x263F8EE78];
            uint64_t v72 = (void *)MEMORY[0x263F8EE78];
            swift_bridgeObjectRetain();
            uint64_t v44 = v21;
            a1 = v60;
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v44);
            uint64_t v44 = (void *)result;
          }
          if (v19 >= v44[2]) {
            goto LABEL_53;
          }
          v44[v22] = 0;
          swift_bridgeObjectRelease();
          *(void *)&v70.f64[1] = v18;
          *(void *)&v69.f64[0] = v44;
          outlined init with take of Any(&v69, v76);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v72 = (void *)*a1;
          *a1 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v76, v18, isUniquelyReferenced_nonNull_native);
          *a1 = v72;
          swift_bridgeObjectRelease();
          uint64_t v55 = v61;
          uint64_t v54 = v62;
        }
        else
        {
          uint64_t v49 = v73[0];
          uint64_t v18 = v34;
          if (*(void *)(v29 + 16) && (uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v34), (v51 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v29 + 56) + 32 * v50, (uint64_t)v76);
            outlined init with take of Any(v76, &v69);
            outlined init with take of Any(&v69, v76);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            uint64_t v52 = v72;
          }
          else
          {
            uint64_t v52 = (void *)MEMORY[0x263F8EE78];
            uint64_t v72 = (void *)MEMORY[0x263F8EE78];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v52);
            uint64_t v52 = (void *)result;
          }
          if (v19 >= v52[2]) {
            goto LABEL_54;
          }
          v52[v22] = v49;
          swift_bridgeObjectRelease();
          *(void *)&v70.f64[1] = v34;
          *(void *)&v69.f64[0] = v52;
          outlined init with take of Any(&v69, v76);
          a1 = v60;
          int v56 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v72 = (void *)*v60;
          char *v60 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v76, v18, v56);
          char *v60 = v72;
          swift_bridgeObjectRelease();
          uint64_t v54 = v64;
          uint64_t v55 = v66;
          char v21 = (void *)MEMORY[0x263F8EE78];
        }
        uint64_t v67 = vaddq_f64(v67, v54);
        uint64_t v68 = vaddq_f64(v68, v55);
        if (v59 == v19)
        {
          *((unsigned char *)a1 + 17) = v75;
          if (v41)
          {
            uint64_t result = swift_bridgeObjectRelease();
            char v15 = 1;
            a3 = v57;
            float64x2_t v16 = v64;
            float64x2_t v14 = v66;
            goto LABEL_49;
          }
          uint64_t result = swift_bridgeObjectRelease();
          char v15 = 0;
          float64x2_t v16 = v67;
          float64x2_t v14 = v68;
          goto LABEL_48;
        }
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = v58;
      }
      else
      {
        char v45 = *a1;
        if (*(void *)(*a1 + 16) && (uint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v47 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v45 + 56) + 32 * v46, (uint64_t)v76);
          outlined init with take of Any(v76, &v69);
          outlined init with take of Any(&v69, v76);
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          uint64_t v48 = (void *)v73[0];
        }
        else
        {
          v73[0] = v21;
          swift_bridgeObjectRetain();
          uint64_t v48 = v21;
        }
        uint64_t result = swift_bridgeObjectRelease();
        if (v19 >= v48[2]) {
          goto LABEL_52;
        }
        uint64_t v67 = *(float64x2_t *)&v48[v22 - 2];
        uint64_t v68 = *(float64x2_t *)&v48[v22 - 4];
        uint64_t result = swift_bridgeObjectRelease();
      }
      ++v19;
      v22 += 5;
      v20 += 2;
      if (v10 == v19)
      {
        float64x2_t v14 = 0uLL;
        char v15 = 1;
        float64x2_t v16 = 0uLL;
LABEL_48:
        a3 = v57;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
  }
  return result;
}

uint64_t specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(uint64_t a1, uint64_t a2, double a3)
{
  type metadata accessor for AnimationBox<DefaultCombiningAnimation>();
  uint64_t v6 = swift_dynamicCastClass();
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (void *)v7);
    }
    unint64_t v9 = *(void *)(v7 + 16);
    unint64_t v8 = *(void *)(v7 + 24);
    if (v9 >= v8 >> 1) {
      uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, (void *)v7);
    }
    *(void *)(v7 + 16) = v9 + 1;
    uint64_t v10 = v7 + 16 * v9;
    *(void *)(v10 + 32) = a2;
    *(double *)(v10 + 40) = a3;
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>();
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2461BDD50;
    *(void *)(v7 + 32) = a1;
    *(void *)(v7 + 40) = 0;
    *(void *)(v7 + 48) = a2;
    *(double *)(v7 + 56) = a3;
  }
  return v7;
}

void type metadata accessor for AnimationBox<DefaultCombiningAnimation>()
{
  if (!lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>)
  {
    lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation();
    unint64_t v0 = type metadata accessor for AnimationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>);
    }
  }
}

uint64_t type metadata accessor for CombinedAnimationState.Entry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CombinedAnimationState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for CombinedAnimationState.Entry()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CombinedAnimationState.Entry(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F97590);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for CombinedAnimationState.Entry(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245F97790);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v18 = 0;
            *(_DWORD *)uint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for DefaultCombiningAnimation.Entry()
{
  return &type metadata for DefaultCombiningAnimation.Entry;
}

ValueMetadata *type metadata accessor for DefaultCombiningAnimation()
{
  return &type metadata for DefaultCombiningAnimation;
}

unint64_t lazy protocol witness table accessor for type DefaultCombiningAnimation.Entry and conformance DefaultCombiningAnimation.Entry()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultCombiningAnimation.Entry and conformance DefaultCombiningAnimation.Entry;
  if (!lazy protocol witness table cache variable for type DefaultCombiningAnimation.Entry and conformance DefaultCombiningAnimation.Entry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultCombiningAnimation.Entry and conformance DefaultCombiningAnimation.Entry);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DefaultCombiningAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for CombinedAnimationState<Double>()
{
  if (!lazy cache variable for type metadata for CombinedAnimationState<Double>)
  {
    unint64_t v0 = type metadata accessor for CombinedAnimationState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<Double>);
    }
  }
}

BOOL specialized static Comparable.<= infix(_:_:)(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a2[1] - *a2;
  double v4 = -*a2;
  if (v3 != INFINITY) {
    double v4 = 0.0;
  }
  double v5 = a1[1] - v2;
  double v6 = -v2;
  if (v5 != INFINITY) {
    double v6 = 0.0;
  }
  if (v3 == v5) {
    return v4 >= v6;
  }
  else {
    return v3 >= v5;
  }
}

BOOL specialized static Comparable.>= infix(_:_:)(double *a1, double *a2)
{
  double v2 = *a2;
  double v3 = a1[1] - *a1;
  double v4 = -*a1;
  if (v3 != INFINITY) {
    double v4 = 0.0;
  }
  double v5 = a2[1] - v2;
  double v6 = -v2;
  if (v5 != INFINITY) {
    double v6 = 0.0;
  }
  if (v3 == v5) {
    return v4 >= v6;
  }
  else {
    return v3 >= v5;
  }
}

BOOL specialized static Comparable.> infix(_:_:)(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a2[1] - *a2;
  double v4 = -*a2;
  if (v3 != INFINITY) {
    double v4 = 0.0;
  }
  double v5 = a1[1] - v2;
  double v6 = -v2;
  if (v5 != INFINITY) {
    double v6 = 0.0;
  }
  if (v3 == v5) {
    return v4 < v6;
  }
  else {
    return v3 < v5;
  }
}

void _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

BOOL static _LayoutTraits.FlexibilityEstimate.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

double _LayoutTraits.Dimension.min.getter()
{
  return *(double *)v0;
}

void _LayoutTraits.Dimension.min.setter(double a1)
{
  double *v1 = a1;
  _LayoutTraits.Dimension._checkInvariant()();
}

uint64_t (*_LayoutTraits.Dimension.min.modify(void *a1))()
{
  *a1 = v1;
  return _LayoutTraits.Dimension.min.modify;
}

double _LayoutTraits.Dimension.ideal.getter()
{
  return *(double *)(v0 + 8);
}

void _LayoutTraits.Dimension.ideal.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
  _LayoutTraits.Dimension._checkInvariant()();
}

uint64_t (*_LayoutTraits.Dimension.ideal.modify(void *a1))()
{
  *a1 = v1;
  return _LayoutTraits.Dimension.min.modify;
}

void _LayoutTraits.Dimension.min.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    _LayoutTraits.Dimension._checkInvariant()();
  }
}

double _LayoutTraits.Dimension.max.getter()
{
  return *(double *)(v0 + 16);
}

void _LayoutTraits.Dimension.max.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
  _LayoutTraits.Dimension._checkInvariant()();
}

void (*_LayoutTraits.Dimension.max.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return _LayoutTraits.Dimension.min.modify;
}

void static _LayoutTraits.Dimension.fixed(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
  a1[1] = a2;
  a1[2] = a2;
}

BOOL static _LayoutTraits.Dimension.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

double _LayoutTraits.width.getter@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

double _LayoutTraits.width.setter(uint64_t a1)
{
  double result = *(double *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(double *)(v1 + 16) = result;
  return result;
}

uint64_t (*_LayoutTraits.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _LayoutTraits.height.getter@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(double *)(a1 + 16) = result;
  return result;
}

double _LayoutTraits.height.setter(uint64_t a1)
{
  double result = *(double *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(double *)(v1 + 40) = result;
  return result;
}

uint64_t (*_LayoutTraits.height.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _LayoutTraits.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0x7FF0000000000000;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0x7FF0000000000000;
}

double _LayoutTraits.subscript.getter@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  double v3 = (double *)(v2 + 16);
  if (a1) {
    double v3 = (double *)(v2 + 40);
  }
  double result = *v3;
  int32x2_t v5 = vdup_n_s32((a1 & 1) == 0);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v6, 0x3FuLL)), *(int8x16_t *)v2, *(int8x16_t *)(v2 + 24));
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t *_LayoutTraits.subscript.setter(uint64_t *result, char a2)
{
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  uint64_t v5 = result[2];
  if (a2)
  {
    v2[3] = v4;
    v2[4] = v3;
    v2[5] = v5;
  }
  else
  {
    void *v2 = v4;
    v2[1] = v3;
    v2[2] = v5;
  }
  return result;
}

void (*_LayoutTraits.subscript.modify(int8x16_t **a1, __int8 a2))(void **a1)
{
  uint64_t v5 = (int8x16_t *)malloc(0x28uLL);
  *a1 = v5;
  v5[1].i64[1] = v2;
  v5[2].i8[0] = a2;
  int64x2_t v6 = (uint64_t *)(v2 + 16);
  if (a2) {
    int64x2_t v6 = (uint64_t *)(v2 + 40);
  }
  uint64_t v7 = *v6;
  int32x2_t v8 = vdup_n_s32((a2 & 1) == 0);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  *uint64_t v5 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL)), *(int8x16_t *)v2, *(int8x16_t *)(v2 + 24));
  v5[1].i64[0] = v7;
  return _LayoutTraits.subscript.modify;
}

void _LayoutTraits.subscript.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  BOOL v5 = (v1[4] & 1) == 0;
  uint64_t v6 = 24;
  if ((v1[4] & 1) == 0) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 32;
  if ((v1[4] & 1) == 0) {
    uint64_t v7 = 8;
  }
  *(void *)(v2 + v6) = *v1;
  if (v5) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = 40;
  }
  *(void *)(v2 + v7) = v3;
  *(void *)(v2 + v8) = v4;
  free(v1);
}

void _LayoutTraits.init(width:height:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a2;
  a1[2] = a2;
  a1[3] = a3;
  a1[4] = a3;
  a1[5] = a3;
}

uint64_t _LayoutTraits.description.getter()
{
  double v1 = v0[3];
  double v2 = v0[5];
  if (*v0 == v0[2])
  {
    uint64_t v3 = Double.description.getter();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v24 = Double.description.getter();
    uint64_t v26 = v6;
    v7._countAndFlagsBits = 3026478;
    v7._object = (void *)0xE300000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 3026478;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    uint64_t v3 = v24;
    uint64_t v5 = v26;
  }
  uint64_t v11 = v5;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  if (v1 == v2)
  {
    uint64_t v13 = Double.description.getter();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v25 = Double.description.getter();
    uint64_t v27 = v16;
    v17._countAndFlagsBits = 3026478;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 3026478;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v13 = v25;
    uint64_t v15 = v27;
  }
  uint64_t v21 = v15;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 40;
}

uint64_t _LayoutTraits.Dimension.description.getter()
{
  if (*v0 == v0[2]) {
    return Double.description.getter();
  }
  uint64_t v6 = Double.description.getter();
  v2._countAndFlagsBits = 3026478;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 3026478;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v6;
}

void key path setter for _LayoutTraits.idealSize : _LayoutTraits(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[2];
  _LayoutTraits.Dimension._checkInvariant()();
  *a2 = v5;
  a2[1] = v3;
  a2[2] = v6;
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[5];
  _LayoutTraits.Dimension._checkInvariant()();
  a2[3] = v7;
  a2[4] = v4;
  a2[5] = v8;
}

void _LayoutTraits.idealSize.setter(double a1, double a2)
{
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = *((void *)v2 + 2);
  _LayoutTraits.Dimension._checkInvariant()();
  *(void *)Swift::String v2 = v5;
  v2[1] = a1;
  *((void *)v2 + 2) = v6;
  uint64_t v7 = *((void *)v2 + 3);
  uint64_t v8 = *((void *)v2 + 5);
  _LayoutTraits.Dimension._checkInvariant()();
  *((void *)v2 + 3) = v7;
  v2[4] = a2;
  *((void *)v2 + 5) = v8;
}

double _LayoutTraits.minSize.getter()
{
  return *(double *)v0;
}

void key path setter for _LayoutTraits.minSize : _LayoutTraits(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  _LayoutTraits.Dimension._checkInvariant()();
  *a2 = v3;
  a2[1] = v5;
  a2[2] = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  _LayoutTraits.Dimension._checkInvariant()();
  a2[3] = v4;
  a2[4] = v7;
  a2[5] = v8;
}

void _LayoutTraits.minSize.setter(double a1, double a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  _LayoutTraits.Dimension._checkInvariant()();
  *(double *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = v5;
  *(void *)(v2 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 40);
  _LayoutTraits.Dimension._checkInvariant()();
  *(double *)(v2 + 24) = a2;
  *(void *)(v2 + 32) = v7;
  *(void *)(v2 + 40) = v8;
}

void (*_LayoutTraits.minSize.modify(void *a1))(uint64_t *a1)
{
  a1[2] = v1;
  uint64_t v2 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  return _LayoutTraits.minSize.modify;
}

void _LayoutTraits.minSize.modify(uint64_t *a1)
{
  double v1 = (void *)a1[2];
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v5 = v1[1];
  uint64_t v4 = v1[2];
  _LayoutTraits.Dimension._checkInvariant()();
  void *v1 = v3;
  v1[1] = v5;
  v1[2] = v4;
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  _LayoutTraits.Dimension._checkInvariant()();
  v1[3] = v2;
  v1[4] = v6;
  v1[5] = v7;
}

double _LayoutTraits.maxSize.getter()
{
  return *(double *)(v0 + 16);
}

void key path setter for _LayoutTraits.maxSize : _LayoutTraits(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  _LayoutTraits.Dimension._checkInvariant()();
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v3;
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  _LayoutTraits.Dimension._checkInvariant()();
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v4;
}

void _LayoutTraits.maxSize.setter(double a1, double a2)
{
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = *((void *)v2 + 1);
  _LayoutTraits.Dimension._checkInvariant()();
  *(void *)uint64_t v2 = v5;
  *((void *)v2 + 1) = v6;
  v2[2] = a1;
  uint64_t v7 = *((void *)v2 + 3);
  uint64_t v8 = *((void *)v2 + 4);
  _LayoutTraits.Dimension._checkInvariant()();
  *((void *)v2 + 3) = v7;
  *((void *)v2 + 4) = v8;
  v2[5] = a2;
}

void (*_LayoutTraits.maxSize.modify(void *a1))(uint64_t *a1)
{
  a1[2] = v1;
  uint64_t v2 = *(void *)(v1 + 40);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return _LayoutTraits.maxSize.modify;
}

void _LayoutTraits.maxSize.modify(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  _LayoutTraits.Dimension._checkInvariant()();
  uint64_t *v1 = v5;
  v1[1] = v4;
  v1[2] = v3;
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  _LayoutTraits.Dimension._checkInvariant()();
  v1[3] = v6;
  v1[4] = v7;
  v1[5] = v2;
}

BOOL specialized static _LayoutTraits.== infix(_:_:)(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  BOOL v5 = a1[3] == a2[3];
  if (a1[4] != a2[4]) {
    BOOL v5 = 0;
  }
  return a1[5] == a2[5] && v5;
}

BOOL specialized static _LayoutTraits.FlexibilityEstimate.< infix(_:_:)(double *a1, double *a2)
{
  double v2 = *a2;
  double v3 = a1[1] - *a1;
  double v4 = -*a1;
  if (v3 != INFINITY) {
    double v4 = 0.0;
  }
  double v5 = a2[1] - v2;
  double v6 = -v2;
  if (v5 != INFINITY) {
    double v6 = 0.0;
  }
  if (v3 == v5) {
    return v4 < v6;
  }
  else {
    return v3 < v5;
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTraits.FlexibilityEstimate and conformance _LayoutTraits.FlexibilityEstimate()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutTraits.FlexibilityEstimate and conformance _LayoutTraits.FlexibilityEstimate;
  if (!lazy protocol witness table cache variable for type _LayoutTraits.FlexibilityEstimate and conformance _LayoutTraits.FlexibilityEstimate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTraits.FlexibilityEstimate and conformance _LayoutTraits.FlexibilityEstimate);
  }
  return result;
}

double sub_245F986FC@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245F98708(void *a1, void *a2)
{
  *a2 = *a1;
  _LayoutTraits.Dimension._checkInvariant()();
  return result;
}

double sub_245F98748@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_245F98754(void *a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *a1;
  _LayoutTraits.Dimension._checkInvariant()();
  return result;
}

double sub_245F98798@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 16);
  *a2 = result;
  return result;
}

double sub_245F987A4(void *a1, uint64_t a2)
{
  *(void *)(a2 + 16) = *a1;
  _LayoutTraits.Dimension._checkInvariant()();
  return result;
}

double sub_245F987E4@<D0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  double v3 = (double *)(a1 + 16);
  if (*a2) {
    double v3 = (double *)(a1 + 40);
  }
  double result = *v3;
  int32x2_t v5 = vdup_n_s32(*a2);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  *(int8x16_t *)a3 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v6, 0x3FuLL)), *(int8x16_t *)(a1 + 24), *(int8x16_t *)a1);
  *(double *)(a3 + 16) = result;
  return result;
}

uint64_t *sub_245F98824(uint64_t *result, void *a2, unsigned char *a3)
{
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  uint64_t v5 = result[2];
  if (*a3)
  {
    a2[3] = v4;
    a2[4] = v3;
    a2[5] = v5;
  }
  else
  {
    *a2 = v4;
    a2[1] = v3;
    a2[2] = v5;
  }
  return result;
}

uint64_t sub_245F98854()
{
  return 0;
}

double sub_245F98864@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *(double *)a2 = result;
  *(void *)(a2 + 8) = v3;
  return result;
}

double sub_245F98878@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 24);
  *a2 = *(void *)a1;
  a2[1] = v3;
  return result;
}

double sub_245F9888C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  *(double *)a2 = result;
  *(void *)(a2 + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _LayoutTraits()
{
  return &type metadata for _LayoutTraits;
}

ValueMetadata *type metadata accessor for _LayoutTraits.FlexibilityEstimate()
{
  return &type metadata for _LayoutTraits.FlexibilityEstimate;
}

ValueMetadata *type metadata accessor for _LayoutTraits.Dimension()
{
  return &type metadata for _LayoutTraits.Dimension;
}

uint64_t static GestureUtilities.requestUpdate(by:useGestureGraph:)(double *a1, char a2)
{
  double v2 = *a1;
  if (a2)
  {
    uint64_t v3 = specialized static GestureGraph.current.getter();
    double v4 = *(double *)(v3 + 264);
    if (v2 < v4) {
      double v4 = v2;
    }
    *(double *)(v3 + 264) = v4;
    return swift_release();
  }
  else
  {
    uint64_t v6 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    double v7 = *(double *)(v6 + 400);
    if (v2 < v7) {
      double v7 = v2;
    }
    *(double *)(v6 + 400) = v7;
    return swift_release();
  }
}

ValueMetadata *type metadata accessor for GestureUtilities()
{
  return &type metadata for GestureUtilities;
}

uint64_t static ViewModifier<>._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v12 = *(_DWORD *)(a2 + 32);
  int v13 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v21 = *(void *)(a2 + 48);
  int v19 = *(_DWORD *)(a2 + 64);
  uint64_t v18 = *(void *)(a2 + 72);
  char v17 = *(unsigned char *)(a2 + 80);
  v37[0] = *a1;
  uint64_t v24 = v7;
  int v25 = v8;
  uint64_t v26 = v9;
  int v27 = v11;
  int v28 = v10;
  int v29 = v12;
  int v30 = v13;
  uint64_t v31 = v14;
  uint64_t v15 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)v37, &v24, a5, a6);
  _GraphValue.init(_:)(v15, v37);
  uint64_t v24 = v7;
  int v25 = v8;
  uint64_t v26 = v9;
  int v27 = v11;
  int v28 = v10;
  int v29 = v12;
  int v30 = v13;
  uint64_t v31 = v14;
  uint64_t v32 = v21;
  uint64_t v33 = v20;
  int v34 = v19;
  uint64_t v35 = v18;
  char v36 = v17;
  return static ViewModifier.makeViewList(modifier:inputs:body:)(v37, &v24, a3, a4, a5);
}

void static EmptyView._makeView(view:inputs:)(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  int v1 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v1;
}

uint64_t static EmptyView._viewListCount(inputs:)(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 4) & 1;
}

__n128 _ViewList_Backing.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  return result;
}

uint64_t static _VariadicView_Children._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v3 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  v7[4] = *(_OWORD *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
  int v5 = Attribute.init<A>(body:value:flags:update:)();
  return specialized static ForEach<>._makeViewList(view:inputs:)(v5, (uint64_t)v7, a2);
}

uint64_t static _VariadicView_Children._viewListCount(inputs:)()
{
  return 0;
}

double protocol witness for static Rule.initialValue.getter in conformance _VariadicView_Children.Child@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _VariadicView_Children.Child@<X0>(_OWORD *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of _VariadicView_Children(Value, (uint64_t)v4);
  return specialized ForEach<>.init(_:content:)((uint64_t)v4, (uint64_t)closure #1 in _VariadicView_Children.Child.value.getter, 0, a1);
}

uint64_t _VariadicView_Children.Element.view.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _ViewList_View(v1, a1);
}

uint64_t _VariadicView_Children.Element.view.setter(uint64_t a1)
{
  return outlined assign with take of _ViewList_View(a1, v1);
}

uint64_t (*_VariadicView_Children.Element.view.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView_Children.Element.traits.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 88);
  return swift_bridgeObjectRetain();
}

uint64_t _VariadicView_Children.Element.traits.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = v2;
  return result;
}

uint64_t (*_VariadicView_Children.Element.traits.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView_Children.Element.id<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (*(void *)(*(void *)(v3 + 56) + 16)) {
    uint64_t v7 = swift_retain();
  }
  else {
    uint64_t v7 = 0;
  }
  v10[5] = v7;
  MEMORY[0x270FA5388](v7);
  void v10[2] = a1;
  v10[3] = a2;
  type metadata accessor for AnyHashable2?(0, &lazy cache variable for type metadata for AnyHashable2?, (uint64_t)&type metadata for AnyHashable2, MEMORY[0x263F8D8F0]);
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _VariadicView_Children.Element.id<A>(as:), (uint64_t)v10, MEMORY[0x263F8E628], a1, v8, a3);
  return swift_release();
}

uint64_t _VariadicView_Children.Element.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return ViewTraitCollection.subscript.getter(a1, a2, a3);
}

uint64_t _VariadicView_Children.Element.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized _VariadicView_Children.Element.subscript.setter(a1, a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v5(a1, AssociatedTypeWitness);
}

void (*_VariadicView_Children.Element.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  _OWORD v9[2] = a4;
  void v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned char v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  _OWORD v9[6] = malloc(v12);
  int v13 = malloc(v12);
  v9[7] = v13;
  ViewTraitCollection.subscript.getter(a3, a4, (uint64_t)v13);
  return _VariadicView_Children.Element.subscript.modify;
}

void _VariadicView_Children.Element.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = **a1;
  uint64_t v7 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    specialized _VariadicView_Children.Element.subscript.setter((uint64_t)v3, v8, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    specialized _VariadicView_Children.Element.subscript.setter((*a1)[7], v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t static _VariadicView_Children.Element._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 80);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v10 = v4;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a1 + 40);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 72);
  int v17 = v7;
  return static _ViewList_View._makeView(view:inputs:)(&OffsetAttribute2, &v10, a2);
}

uint64_t _VariadicView_Children.startIndex.getter()
{
  return 0;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _VariadicView_Children@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
LABEL_7:
  }
    swift_once();
  uint64_t v5 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  uint64_t v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v5);
  if (v4 < 0 || v4 >= v8) {
    __break(1u);
  }
  else {
    *a2 = v4;
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance _VariadicView_Children(uint64_t *a1)
{
  uint64_t v3 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = a1;
  if (one-time initialization token for _lock != -1) {
LABEL_7:
  }
    swift_once();
  uint64_t v4 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  uint64_t v7 = ViewList.count.getter(v5, v6);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v4);
  if (v3 < 0 || v3 >= v7) {
    __break(1u);
  }
  else {
    uint64_t *v1 = v3;
  }
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance _VariadicView_Children@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v7 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v8 = v2[3];
  uint64_t v9 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v10 = ViewList.count.getter(v8, v9);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v7);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v10 >= v6)
  {
    uint64_t result = outlined init with copy of _VariadicView_Children((uint64_t)v3, (uint64_t)(a2 + 2));
    *a2 = v5;
    a2[1] = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _VariadicView_Children@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v3 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  uint64_t v6 = ViewList.count.getter(v4, v5);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v3);
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v6;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _VariadicView_Children()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  uint64_t v4 = ViewList.count.getter(v2, v3);
  static Update.end()();
  _MovableLockUnlock(v1);
  return v4 == 0;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _VariadicView_Children@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1 + a2;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
LABEL_7:
  }
    swift_once();
  uint64_t v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  uint64_t v9 = ViewList.count.getter(v7, v8);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v6);
  if (v5 < 0 || v9 < v5) {
    __break(1u);
  }
  else {
    *a3 = v5;
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _VariadicView_Children@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _VariadicView_Children(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v7 = v2[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = ViewList.count.getter(v7, v8);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v6);
  if (v4 < 0 || v9 < v4)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v6);
    specialized static Update.begin()();
    uint64_t v11 = v3[3];
    uint64_t v12 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v11);
    uint64_t v13 = ViewList.count.getter(v11, v12);
    static Update.end()();
    uint64_t result = _MovableLockUnlock(v6);
    if ((v5 & 0x8000000000000000) == 0 && v13 >= v5) {
      return v5 - v4;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance _VariadicView_Children@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v5 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  uint64_t v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v5);
  if (v4 < 0 || v4 >= v8) {
    __break(1u);
  }
  else {
    *a2 = v4 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _VariadicView_Children()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of _VariadicView_Children((uint64_t)v0);
  return v1;
}

uint64_t _ViewList_Backing.children.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _VariadicView_Children(v1, a1);
}

uint64_t _ViewList_Backing.children.setter(uint64_t a1)
{
  return outlined assign with take of _VariadicView_Children(a1, v1);
}

uint64_t (*_ViewList_Backing.children.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Backing.viewCount.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return ViewList.count.getter(v2, v3);
}

uint64_t specialized closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t *a1, uint64_t a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 < v4)
  {
    uint64_t v21 = (uint64_t)(a1 + 4);
    do
    {
      outlined init with copy of AnyTrackedValue(v21, (uint64_t)v32);
      uint64_t v6 = a1[3];
      uint64_t v7 = *(void **)(a2 + 40);
      uint64_t v26 = 0;
      id v31 = 0;
      uint64_t v8 = a1[2];
      outlined init with copy of AnyTrackedValue((uint64_t)v32, (uint64_t)v24);
      uint64_t v10 = v33;
      uint64_t v9 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 32);
      swift_bridgeObjectRetain();
      id v12 = v7;
      uint64_t v26 = v11(v10, v9);
      uint64_t v27 = v8;
      uint64_t v28 = v6;
      uint64_t v29 = v3;
      uint64_t v30 = v4;
      id v31 = v12;
      outlined init with copy of _ViewList_View((uint64_t)v24, (uint64_t)v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      outlined destroy of _ViewList_View((uint64_t)v24);
      _ViewList_View.viewID.getter();
      uint64_t v13 = *a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        *a3 = v13;
      }
      unint64_t v16 = v13[2];
      unint64_t v15 = v13[3];
      if (v16 >= v15 >> 1)
      {
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
        *a3 = v13;
      }
      ++v3;
      void v13[2] = v16 + 1;
      int v17 = &v13[5 * v16];
      long long v18 = v24[0];
      long long v19 = v24[1];
      v17[8] = v25;
      *((_OWORD *)v17 + 2) = v18;
      *((_OWORD *)v17 + 3) = v19;
      outlined destroy of _ViewList_View((uint64_t)v35);
    }
    while (v4 != v3);
  }
  return 1;
}

uint64_t _ViewList_Backing.visitAll<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  return _ViewList_Backing.visitViews<A>(applying:from:)(a1, (uint64_t)&v4, a2, a3);
}

uint64_t _ViewList_Backing.ids.getter()
{
  uint64_t v11 = 0;
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  outlined init with copy of AnyTrackedValue(v0, (uint64_t)v8);
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
  MEMORY[0x270FA5388](v4);
  id v6[2] = v0;
  v6[3] = &v12;
  char v7 = 1;
  ViewList.applySublists(from:list:to:)((uint64_t)&v11, 0x100000000uLL, (uint64_t)partial apply for specialized closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:), (uint64_t)v6, v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  static Update.end()();
  _MovableLockUnlock(v1);
  return v12;
}

uint64_t _ViewList_View.id.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *a1 = *(void *)(v1 + 48);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double _ViewList_View.id.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  swift_bridgeObjectRelease();
  double result = *(double *)a1;
  *(void *)(v1 + 48) = *(void *)a1;
  *(void *)(v1 + 56) = v3;
  return result;
}

uint64_t (*_ViewList_View.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_View.elementID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    int v3 = *(_DWORD *)(v1 + 52);
    uint64_t v4 = *(void *)(v1 + 56);
    *(_DWORD *)a1 = v2;
    *(_DWORD *)(a1 + 4) = v3;
    *(void *)(a1 + 8) = v4;
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t PlaceholderInfo.reuseItem(info:placeholder:)(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!*(void *)(v2 + 168)) {
    goto LABEL_6;
  }
  uint64_t v3 = v2;
  outlined init with copy of AnyTrackedValue(v2 + 144, (uint64_t)v22);
  uint64_t v6 = v23;
  uint64_t v7 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  uint64_t v20 = a1;
  uint64_t v8 = a1[3];
  uint64_t result = outlined init with copy of AnyTrackedValue((uint64_t)a2, (uint64_t)v21);
  uint64_t v10 = *(void *)(v2 + 184);
  if (!v10)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v11 = a2[8];
  uint64_t v12 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v7 + 24);
  swift_retain();
  char v13 = v12(v8, v21, v11, v10, 0, v6, v7);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  if ((v13 & 1) == 0)
  {
LABEL_6:
    swift_beginAccess();
    if (static ReuseTrace.recorder)
    {
      v21[0] = &type metadata for _ViewList_View;
      AGGraphAddTraceEvent();
    }
    return 0;
  }
  if ((*(unsigned char *)(v3 + 212) & 1) == 0)
  {
    uint64_t v14 = 1;
    AGGraphMutateAttribute();
    uint64_t v15 = a2[3];
    uint64_t v16 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v15);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    swift_release();
    *(void *)(v3 + 136) = v17;
    uint64_t v18 = a2[7];
    swift_bridgeObjectRetain();
    uint64_t v19 = a2[6];
    swift_bridgeObjectRelease();
    *uint64_t v20 = v19;
    v20[1] = v18;
    v20[3] = a2[8];
    return v14;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t PlaceholderInfo.eraseItem()()
{
  uint64_t v1 = *(void *)(v0 + 96);
  int v2 = *(_DWORD *)(v0 + 108);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    int v4 = *MEMORY[0x263F288F8];
    uint64_t v5 = v1 + 48;
    swift_bridgeObjectRetain();
    do
    {
      v5 += 24;
      AGGraphSetIndirectAttribute();
      --v3;
    }
    while (v3);
    if (v2 != v4) {
      goto LABEL_5;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v2 != *MEMORY[0x263F288F8]) {
LABEL_5:
    }
      AGGraphSetIndirectAttribute();
  }
  uint64_t v6 = swift_bridgeObjectRelease();
  if (*(void *)(v0 + 120))
  {
    MEMORY[0x270FA5388](v6);
    id v8 = v7;
    AGSubgraphApply();
    AGSubgraphInvalidate();

    *(void *)(v0 + 120) = 0;
  }
  uint64_t v9 = *(void **)(v0 + 192);
  if (v9)
  {
    AGSubgraphRemoveObserver();

    *(void *)(v0 + 192) = 0;
    *(void *)(v0 + 200) = 0;
  }
  swift_release();
  *(void *)(v0 + 128) = 0;
  swift_release();
  *(void *)(v0 + 136) = 0;
  outlined destroy of _ViewList_Elements?(v0 + 144);
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(void *)(v0 + 176) = 0;
  uint64_t result = swift_release();
  *(void *)(v0 + 184) = 0;
  *(_DWORD *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 212) = 1;
  return result;
}

uint64_t closure #2 in PlaceholderInfo.makeItem(placeholder:seed:)()
{
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    AGGraphGetAttributeInfo();
    int v2 = *(void **)(v1 + 192);
    *(void *)(v1 + 192) = 0;
    *(void *)(v1 + 200) = 0;

    return PlaceholderInfo.eraseItem()();
  }
  return result;
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance PlaceholderInfo()
{
  uint64_t v1 = (void *)v0[24];
  if (v1)
  {
    AGSubgraphRemoveObserver();

    v0[24] = 0;
    v0[25] = 0;
  }
  swift_release();
  v0[16] = 0;
  uint64_t result = swift_release();
  v0[17] = 0;
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance PlaceholderInfo(void *a1)
{
  uint64_t v3 = a1 + 24;
  int v2 = (void *)a1[24];
  if (v2)
  {
    AGSubgraphRemoveObserver();

    void *v3 = 0;
    v3[1] = 0;
  }
  swift_release();
  a1[16] = 0;
  uint64_t result = swift_release();
  a1[17] = 0;
  return result;
}

_DWORD *PlaceholderViewPhase.value.getter@<X0>(int a1@<W1>, unsigned int *a2@<X8>)
{
  int v4 = *(_DWORD *)AGGraphGetValue();
  uint64_t result = (_DWORD *)AGGraphGetValue();
  *a2 = ((v4 & 0xFFFFFFFE) + 2 * a1 + *result) & 0xFFFFFFFE | (*result | v4) & 1;
  return result;
}

_DWORD *protocol witness for Rule.value.getter in conformance PlaceholderViewPhase@<X0>(unsigned int *a1@<X8>)
{
  return PlaceholderViewPhase.value.getter(*(_DWORD *)(v1 + 8), a1);
}

uint64_t static ViewListShouldParentToPlaceholderSubgraph.defaultValue.getter()
{
  return 1;
}

uint64_t outlined assign with take of _ViewList_View(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in _VariadicView_Children.Element.id<A>(as:)()
{
  return AnyHashable2.as<A>(type:)();
}

uint64_t specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t result)
{
  return result;
}

uint64_t specialized _VariadicView_Children.Element.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v12 - v8, a1, v7);
  return ViewTraitCollection.subscript.setter((uint64_t)v9, a2, a3);
}

uint64_t partial apply for specialized closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t *a1)
{
  return specialized closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(a1, *(void *)(v1 + 16), *(void ***)(v1 + 24));
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in _VariadicView_Children.Element()
{
  return MEMORY[0x263F8DB70];
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _VariadicView_Children()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _VariadicView_Children()
{
  return lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _VariadicView_Children()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_5(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _VariadicView_Children()
{
  return lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children);
}

uint64_t lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_VariadicView_Children>(255, &lazy cache variable for type metadata for Slice<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, (uint64_t)&type metadata for _VariadicView_Children, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _VariadicView_Children()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_5(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _VariadicView_Children()
{
  return lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<_VariadicView_Children>, MEMORY[0x263F8E738]);
}

uint64_t assignWithTake for _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t dispatch thunk of ViewListVisitor.visit(view:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for _ViewList_Backing()
{
  return &type metadata for _ViewList_Backing;
}

ValueMetadata *type metadata accessor for ViewListShouldParentToPlaceholderSubgraph()
{
  return &type metadata for ViewListShouldParentToPlaceholderSubgraph;
}

uint64_t assignWithCopy for PlaceholderInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 6++*(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 8++*(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 10++*(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 108);
  long long v4 = *(void **)(a2 + 112);
  uint64_t v5 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v4;
  id v6 = v4;

  double v7 = *(void **)(a1 + 120);
  uint64_t v8 = *(void **)(a2 + 120);
  *(void *)(a1 + 120) = v8;
  id v9 = v8;

  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a2 + 168);
  if (!*(void *)(a1 + 168))
  {
    if (v10)
    {
      *(void *)(a1 + 16++*(_DWORD *)(result + 8) = v10;
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 144, a2 + 144);
      goto LABEL_8;
    }
LABEL_7:
    long long v11 = *(_OWORD *)(a2 + 144);
    long long v12 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 144) = v11;
    *(_OWORD *)(a1 + 160) = v12;
    goto LABEL_8;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 144);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 144), (uint64_t *)(a2 + 144));
LABEL_8:
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_retain();
  swift_release();
  char v13 = *(void **)(a2 + 192);
  uint64_t v14 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v13;
  id v15 = v13;

  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  int v16 = *(_DWORD *)(a2 + 208);
  *(unsigned char *)(a1 + 212) = *(unsigned char *)(a2 + 212);
  *(_DWORD *)(a1 + 20++*(_DWORD *)(result + 8) = v16;
  return a1;
}

__n128 __swift_memcpy213_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 205) = *(void *)(a2 + 205);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for PlaceholderInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 8++*(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v4 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);

  long long v5 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);

  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  if (*(void *)(a1 + 168)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 144);
  }
  long long v6 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  uint64_t v7 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v7;
  swift_release();
  long long v8 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);

  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_DWORD *)(a1 + 20++*(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 208);
  *(unsigned char *)(a1 + 212) = *(unsigned char *)(a2 + 212);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceholderInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 213)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceholderInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16++*(_DWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8++*(_DWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 212) = 0;
    *(_DWORD *)(result + 20++*(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 213) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 213) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for PlaceholderInfo()
{
  return &unk_26FA50AE0;
}

uint64_t assignWithCopy for PlaceholderInfo.Value(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for PlaceholderInfo.Value(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

void *type metadata accessor for PlaceholderInfo.Value()
{
  return &unk_26FA50A48;
}

ValueMetadata *type metadata accessor for _VariadicView_Children.Child()
{
  return &type metadata for _VariadicView_Children.Child;
}

unint64_t instantiation function for generic protocol witness table for _VariadicView_Children.Child(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PlaceholderInfo(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PlaceholderInfo and conformance PlaceholderInfo();
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = result;
  return result;
}

uint64_t sub_245F9B1E4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PlaceholderInfo.makeItem(placeholder:seed:)()
{
  return closure #2 in PlaceholderInfo.makeItem(placeholder:seed:)();
}

uint64_t sub_245F9B228()
{
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    uint64_t v6 = MEMORY[0x263F8D6C8];
    _sSnySiGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    uint64_t v8 = v7;
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>();
    uint64_t v10 = v9;
    uint64_t v11 = _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
    uint64_t v12 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>);
    v15[0] = v8;
    v15[1] = v6;
    _OWORD v15[2] = v10;
    void v15[3] = v11;
    v15[4] = MEMORY[0x263F8D6D8];
    v15[5] = v12;
    unint64_t v13 = a3(a1, v15);
    if (!v14) {
      atomic_store(v13, a2);
    }
  }
}

void *type metadata accessor for PlaceholderViewPhase()
{
  return &unk_26FA61E98;
}

unint64_t instantiation function for generic protocol witness table for PlaceholderViewPhase(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PlaceholderViewPhase and conformance PlaceholderViewPhase();
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = result;
  return result;
}

unint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(uint64_t *a1, uint64_t a2)
{
  return specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

{
  return specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

unint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(void *a1, uint64_t a2)
{
  long long v3 = (void *)*a1;
  unint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    unint64_t v7 = 0;
    for (uint64_t i = -104; ; i -= 40)
    {
      char v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2) {
        return v7;
      }
      if (v9) {
        break;
      }
      if (v4 == ++v7) {
        return v3[2];
      }
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2]) {
        return v7;
      }
      unint64_t v4 = v7 + 1;
      uint64_t v20 = a1;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
    }
    long long v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    uint64_t v10 = (void *)((char *)v3 - i);
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
          unint64_t v11 = v3[2];
          if (v7 >= v11) {
            goto LABEL_27;
          }
          if (v4 >= v11) {
            goto LABEL_28;
          }
          uint64_t v12 = (uint64_t)&v3[5 * v7 + 4];
          long long v13 = *(_OWORD *)v12;
          uint64_t v14 = *(v10 - 3);
          uint64_t i = *v10;
          *(void *)uint64_t v12 = *(v10 - 4);
          long long v21 = *(_OWORD *)(v12 + 16);
          long long v22 = v13;
          uint64_t v15 = *(void *)(v12 + 32);
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v14;
          *(_OWORD *)(v12 + 16) = *((_OWORD *)v10 - 1);
          *(void *)(v12 + 32) = i;
          unint64_t v16 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v16) {
            goto LABEL_29;
          }
          uint64_t i = *(v10 - 4);
          *((_OWORD *)v10 - 2) = v22;
          *((_OWORD *)v10 - 1) = v21;
          uint64_t *v10 = v15;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1)) {
          goto LABEL_25;
        }
      }
      unint64_t v18 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 5;
    }
    while (v18 != v3[2]);
    *uint64_t v20 = v3;
    return v7;
  }
  return 0;
}

{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t i;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  void *v21;
  long long v22;

  long long v3 = (void *)*a1;
  unint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    unint64_t v7 = 0;
    for (uint64_t i = -88; ; i -= 32)
    {
      char v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2) {
        return v7;
      }
      if (v9) {
        break;
      }
      if (v4 == ++v7) {
        return v3[2];
      }
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2]) {
        return v7;
      }
      unint64_t v4 = v7 + 1;
      long long v21 = a1;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
    }
    long long v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    uint64_t v10 = (void *)((char *)v3 - i);
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
          unint64_t v11 = v3[2];
          if (v7 >= v11) {
            goto LABEL_27;
          }
          if (v4 >= v11) {
            goto LABEL_28;
          }
          uint64_t v12 = (uint64_t)&v3[4 * v7 + 4];
          long long v22 = *(_OWORD *)v12;
          long long v13 = *(void *)(v12 + 16);
          uint64_t v14 = *(v10 - 2);
          uint64_t v15 = *(v10 - 1);
          uint64_t i = *v10;
          *(void *)uint64_t v12 = *(v10 - 3);
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v14;
          unint64_t v16 = *(void *)(v12 + 24);
          *(void *)(v12 + 16) = v15;
          *(void *)(v12 + 24) = i;
          uint64_t v17 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v17) {
            goto LABEL_29;
          }
          uint64_t i = *(v10 - 3);
          *(_OWORD *)(v10 - 3) = v22;
          *(v10 - 1) = v13;
          uint64_t *v10 = v16;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1)) {
          goto LABEL_25;
        }
      }
      uint64_t v19 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 4;
    }
    while (v19 != v3[2]);
    *long long v21 = v3;
    return v7;
  }
  return 0;
}

{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t i;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  void *v21;
  long long v22;

  long long v3 = (void *)*a1;
  unint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    unint64_t v7 = 0;
    for (uint64_t i = -88; ; i -= 32)
    {
      char v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2) {
        return v7;
      }
      if (v9) {
        break;
      }
      if (v4 == ++v7) {
        return v3[2];
      }
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2]) {
        return v7;
      }
      unint64_t v4 = v7 + 1;
      long long v21 = a1;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
    }
    long long v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    uint64_t v10 = (void *)((char *)v3 - i);
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
          unint64_t v11 = v3[2];
          if (v7 >= v11) {
            goto LABEL_27;
          }
          if (v4 >= v11) {
            goto LABEL_28;
          }
          uint64_t v12 = (uint64_t)&v3[4 * v7 + 4];
          long long v22 = *(_OWORD *)v12;
          long long v13 = *(void *)(v12 + 16);
          uint64_t v14 = *(v10 - 2);
          uint64_t v15 = *(v10 - 1);
          uint64_t i = *v10;
          *(void *)uint64_t v12 = *(v10 - 3);
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v14;
          unint64_t v16 = *(void *)(v12 + 24);
          *(void *)(v12 + 16) = v15;
          *(void *)(v12 + 24) = i;
          uint64_t v17 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v17) {
            goto LABEL_29;
          }
          uint64_t i = *(v10 - 3);
          *(_OWORD *)(v10 - 3) = v22;
          *(v10 - 1) = v13;
          uint64_t *v10 = v16;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1)) {
          goto LABEL_25;
        }
      }
      uint64_t v19 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 4;
    }
    while (v19 != v3[2]);
    *long long v21 = v3;
    return v7;
  }
  return 0;
}

{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t i;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  void *v21;
  long long v22;
  long long v23;

  long long v3 = (void *)*a1;
  unint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    unint64_t v7 = 0;
    for (uint64_t i = -120; ; i -= 48)
    {
      char v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2) {
        return v7;
      }
      if (v9) {
        break;
      }
      if (v4 == ++v7) {
        return v3[2];
      }
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2]) {
        return v7;
      }
      unint64_t v4 = v7 + 1;
      long long v21 = a1;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
    }
    long long v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    uint64_t v10 = (void *)((char *)v3 - i);
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
          unint64_t v11 = v3[2];
          if (v7 >= v11) {
            goto LABEL_27;
          }
          if (v4 >= v11) {
            goto LABEL_28;
          }
          uint64_t v12 = (uint64_t)&v3[6 * v7 + 4];
          long long v22 = *(_OWORD *)(v12 + 16);
          uint64_t v23 = *(_OWORD *)v12;
          long long v13 = *(v10 - 4);
          uint64_t v14 = *(v10 - 1);
          uint64_t i = *v10;
          *(void *)uint64_t v12 = *(v10 - 5);
          uint64_t v15 = *(void *)(v12 + 32);
          unint64_t v16 = *(void *)(v12 + 40);
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13;
          *(_OWORD *)(v12 + 16) = *(_OWORD *)(v10 - 3);
          *(void *)(v12 + 32) = v14;
          *(void *)(v12 + 40) = i;
          uint64_t v17 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v17) {
            goto LABEL_29;
          }
          uint64_t i = *(v10 - 5);
          *(_OWORD *)(v10 - 5) = v23;
          *(_OWORD *)(v10 - 3) = v22;
          *(v10 - 1) = v15;
          uint64_t *v10 = v16;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1)) {
          goto LABEL_25;
        }
      }
      uint64_t v19 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 6;
    }
    while (v19 != v3[2]);
    *long long v21 = v3;
    return v7;
  }
  return 0;
}

{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t i;
  char v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  void *v20;
  long long v21;
  long long v22;
  long long v23;

  long long v3 = (void *)*a1;
  unint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    unint64_t v7 = 0;
    for (uint64_t i = -88; ; i -= 56)
    {
      char v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
      if (v2) {
        return v7;
      }
      if (v9) {
        break;
      }
      if (v4 == ++v7) {
        return v3[2];
      }
    }
    if (__OFADD__(v7, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v7 + 1 == v3[2]) {
        return v7;
      }
      unint64_t v4 = v7 + 1;
      uint64_t v20 = a1;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
    }
    long long v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_11:
    uint64_t v10 = (char *)v3 - i;
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v4, a2) & 1) == 0)
      {
        if (v4 != v7)
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
          unint64_t v11 = v3[2];
          if (v7 >= v11) {
            goto LABEL_27;
          }
          if (v4 >= v11) {
            goto LABEL_28;
          }
          uint64_t v12 = (uint64_t)&v3[7 * v7 + 4];
          long long v13 = *(_OWORD *)v12;
          uint64_t v14 = *((void *)v10 + 1);
          uint64_t i = *((void *)v10 + 6);
          *(void *)uint64_t v12 = *(void *)v10;
          long long v21 = *(_OWORD *)(v12 + 16);
          long long v22 = *(_OWORD *)(v12 + 32);
          uint64_t v23 = v13;
          uint64_t v15 = *(void *)(v12 + 48);
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v14;
          *(_OWORD *)(v12 + 16) = *((_OWORD *)v10 + 1);
          *(_OWORD *)(v12 + 32) = *((_OWORD *)v10 + 2);
          *(void *)(v12 + 4++*(_DWORD *)(result + 8) = i;
          unint64_t v16 = v3[2];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v4 >= v16) {
            goto LABEL_29;
          }
          uint64_t i = *(void *)v10;
          *(_OWORD *)uint64_t v10 = v23;
          *((_OWORD *)v10 + 1) = v21;
          *((_OWORD *)v10 + 2) = v22;
          *((void *)v10 + 6) = v15;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v7++, 1)) {
          goto LABEL_25;
        }
      }
      unint64_t v18 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v4;
      v10 += 56;
    }
    while (v18 != v3[2]);
    *uint64_t v20 = v3;
    return v7;
  }
  return 0;
}

unint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  unint64_t v5 = *(void *)(*a1 + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    for (uint64_t i = -64; ; i -= 32)
    {
      char v10 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
      if (v3) {
        return v8;
      }
      if (v10) {
        break;
      }
      if (v5 == ++v8) {
        return *(void *)(v4 + 16);
      }
    }
    if (__OFADD__(v8, 1))
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      if (v8 + 1 == *(void *)(v4 + 16)) {
        return v8;
      }
      unint64_t v5 = v8 + 1;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
    }
    uint64_t v4 = a3(v4);
LABEL_11:
    uint64_t i = v4 - i;
    do
    {
      if ((closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v5, a2) & 1) == 0)
      {
        if (v5 != v8)
        {
          if ((v8 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
          unint64_t v11 = *(void *)(v4 + 16);
          if (v8 >= v11) {
            goto LABEL_27;
          }
          if (v5 >= v11) {
            goto LABEL_28;
          }
          uint64_t v12 = v4 + 32 + 32 * v8;
          long long v19 = *(_OWORD *)(v12 + 16);
          long long v20 = *(_OWORD *)v12;
          uint64_t v13 = *(void *)(i + 8);
          a3 = *(uint64_t (**)(uint64_t))(i + 16);
          uint64_t v14 = *(void *)(i + 24);
          *(void *)uint64_t v12 = *(void *)i;
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13;
          *(void *)(v12 + 16) = a3;
          *(void *)(v12 + 24) = v14;
          unint64_t v15 = *(void *)(v4 + 16);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v5 >= v15) {
            goto LABEL_29;
          }
          a3 = *(uint64_t (**)(uint64_t))i;
          *(_OWORD *)uint64_t i = v20;
          *(_OWORD *)(i + 16) = v19;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (__OFADD__(v8++, 1)) {
          goto LABEL_25;
        }
      }
      unint64_t v17 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      ++v5;
      i += 32;
    }
    while (v17 != *(void *)(v4 + 16));
    *a1 = v4;
    return v8;
  }
  return 0;
}

unint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return 0;
  }
  unint64_t v6 = a1;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    char v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
    if (v2) {
      return v8;
    }
    if (v9) {
      break;
    }
    ++v8;
    v7 += 11;
    if (v4 == v8) {
      return v3[2];
    }
  }
  if (__OFADD__(v8, 1)) {
    goto LABEL_29;
  }
  if (v8 + 1 != v3[2])
  {
    long long v20 = (void *)v6;
    unint64_t v6 = v8 + 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_30;
    }
    while (1)
    {
      while (1)
      {
        if (closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2)) {
          goto LABEL_19;
        }
        if (v6 != v8) {
          break;
        }
LABEL_18:
        if (__OFADD__(v8++, 1)) {
          goto LABEL_24;
        }
LABEL_19:
        unint64_t v18 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        ++v6;
        v7 += 11;
        if (v18 == v3[2])
        {
          *long long v20 = v3;
          return v8;
        }
      }
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      unint64_t v10 = v3[2];
      if (v8 >= v10) {
        goto LABEL_26;
      }
      if (v6 >= v10) {
        goto LABEL_27;
      }
      uint64_t v11 = (uint64_t)&v3[11 * v8 + 4];
      long long v12 = *(_OWORD *)v11;
      uint64_t v13 = &v3[v7];
      uint64_t v14 = v3[v7 + 16];
      uint64_t v15 = v3[v7 + 25];
      *(void *)uint64_t v11 = v3[v7 + 15];
      long long v21 = *(_OWORD *)(v11 + 16);
      long long v22 = *(_OWORD *)(v11 + 32);
      long long v23 = *(_OWORD *)(v11 + 48);
      long long v24 = *(_OWORD *)(v11 + 64);
      long long v25 = v12;
      uint64_t v16 = *(void *)(v11 + 80);
      *(void *)(v11 + ++*(_DWORD *)(result + 8) = v14;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)&v3[v7 + 17];
      *(_OWORD *)(v11 + 32) = *(_OWORD *)&v3[v7 + 19];
      *(_OWORD *)(v11 + 4++*(_DWORD *)(result + 8) = *(_OWORD *)&v3[v7 + 21];
      *(_OWORD *)(v11 + 64) = *(_OWORD *)&v3[v7 + 23];
      *(void *)(v11 + 80) = v15;
      unint64_t v26 = v3[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v6 < v26)
      {
        *(_OWORD *)(v13 + 15) = v25;
        *(_OWORD *)(v13 + 17) = v21;
        *(_OWORD *)(v13 + 19) = v22;
        *(_OWORD *)(v13 + 21) = v23;
        *(_OWORD *)(v13 + 23) = v24;
        v13[25] = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_18;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    }
  }
  return v8;
}

uint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(uint64_t a1, uint64_t a2)
{
  unint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(*(void *)a1 + 16);
  if (!v9) {
    return v8[2];
  }
  unint64_t v11 = 0;
  while (1)
  {
    char v12 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v11, a2);
    if (v2) {
      return v11;
    }
    if (v12)
    {
      unint64_t v13 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v13 != v8[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v13, a2);
        if ((result & 1) == 0)
        {
          if (v11 != v13)
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_27;
            }
            unint64_t v17 = v8[2];
            if (v11 >= v17) {
              goto LABEL_28;
            }
            if (v13 >= v17) {
              goto LABEL_29;
            }
            unint64_t v18 = &v8[7 * v11 + 4];
            uint64_t v19 = v18[1];
            uint64_t v4 = v18[2];
            uint64_t v5 = v18[3];
            uint64_t v6 = v18[4];
            uint64_t v7 = v18[5];
            uint64_t v20 = v18[6];
            long long v21 = &v8[7 * v13 + 4];
            uint64_t v22 = *v21;
            uint64_t v23 = v21[1];
            uint64_t v24 = v21[2];
            uint64_t v25 = v21[3];
            uint64_t v26 = v21[4];
            uint64_t v27 = v21[5];
            uint64_t v28 = v21[6];
            uint64_t v32 = *v18;
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v31 = v20;
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v34 = v23;
            swift_bridgeObjectRetain();
            uint64_t v33 = v28;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
              unint64_t v8 = (void *)result;
            }
            if (v11 >= v8[2]) {
              goto LABEL_30;
            }
            uint64_t v30 = v19;
            uint64_t v3 = v8 + 4;
            uint64_t v29 = &v8[7 * v11 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v29 = v22;
            v29[1] = v34;
            long long v29[2] = v24;
            v29[3] = v25;
            v29[4] = v26;
            v29[5] = v27;
            v29[6] = v33;
            if (v13 >= v8[2]) {
              goto LABEL_31;
            }
LABEL_10:
            uint64_t v14 = &v3[7 * v13];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v14 = v32;
            v14[1] = v30;
            void v14[2] = v4;
            v14[3] = v5;
            void v14[4] = v6;
            _OWORD v14[5] = v7;
            void v14[6] = v31;
            *(void *)a1 = v8;
          }
          BOOL v16 = __OFADD__(v11++, 1);
          if (v16) {
            goto LABEL_26;
          }
        }
        BOOL v16 = __OFADD__(v13++, 1);
        if (v16)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v11;
    }
    if (v9 == ++v11) {
      return v8[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  unint64_t v12;
  void *v13;
  uint64_t result;
  BOOL v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v7 = *(void **)a1;
  unint64_t v8 = *(void *)(*(void *)a1 + 16);
  if (!v8) {
    return v7[2];
  }
  unint64_t v10 = 0;
  while (1)
  {
    unint64_t v11 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
    if (v2) {
      return v10;
    }
    if (v11)
    {
      char v12 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v12 != v7[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v12, a2);
        if ((result & 1) == 0)
        {
          if (v10 != v12)
          {
            if ((v10 & 0x8000000000000000) != 0) {
              goto LABEL_27;
            }
            BOOL v16 = v7[2];
            if (v10 >= v16) {
              goto LABEL_28;
            }
            if (v12 >= v16) {
              goto LABEL_29;
            }
            unint64_t v17 = &v7[5 * v10 + 4];
            unint64_t v18 = v17[1];
            uint64_t v5 = v17[2];
            uint64_t v6 = v17[3];
            uint64_t v19 = v17[4];
            uint64_t v20 = &v7[5 * v12 + 4];
            long long v21 = *v20;
            uint64_t v22 = v20[1];
            uint64_t v23 = v20[2];
            uint64_t v24 = v20[3];
            uint64_t v25 = v20[4];
            uint64_t v29 = *v17;
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v28 = v19;
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v31 = v22;
            swift_bridgeObjectRetain();
            uint64_t v30 = v25;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
              uint64_t v7 = (void *)result;
            }
            if (v10 >= v7[2]) {
              goto LABEL_30;
            }
            uint64_t v27 = v18;
            uint64_t v4 = v29;
            uint64_t v3 = v7 + 4;
            uint64_t v26 = &v7[5 * v10 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v26 = v21;
            v26[1] = v31;
            _OWORD v26[2] = v23;
            void v26[3] = v24;
            v26[4] = v30;
            if (v12 >= v7[2]) {
              goto LABEL_31;
            }
LABEL_10:
            unint64_t v13 = &v3[5 * v12];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *unint64_t v13 = v4;
            v13[1] = v27;
            void v13[2] = v5;
            v13[3] = v6;
            void v13[4] = v28;
            *(void *)a1 = v7;
          }
          uint64_t v15 = __OFADD__(v10++, 1);
          if (v15) {
            goto LABEL_26;
          }
        }
        uint64_t v15 = __OFADD__(v12++, 1);
        if (v15)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v10;
    }
    if (v8 == ++v10) {
      return v7[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  unint64_t v12;
  void *v13;
  uint64_t result;
  BOOL v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v7 = *(void **)a1;
  unint64_t v8 = *(void *)(*(void *)a1 + 16);
  if (!v8) {
    return v7[2];
  }
  unint64_t v10 = 0;
  while (1)
  {
    unint64_t v11 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
    if (v2) {
      return v10;
    }
    if (v11)
    {
      char v12 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v12 != v7[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v12, a2);
        if ((result & 1) == 0)
        {
          if (v10 != v12)
          {
            if ((v10 & 0x8000000000000000) != 0) {
              goto LABEL_27;
            }
            BOOL v16 = v7[2];
            if (v10 >= v16) {
              goto LABEL_28;
            }
            if (v12 >= v16) {
              goto LABEL_29;
            }
            unint64_t v17 = &v7[6 * v10 + 4];
            unint64_t v18 = v17[1];
            uint64_t v4 = v17[2];
            uint64_t v5 = v17[3];
            uint64_t v6 = v17[4];
            uint64_t v19 = v17[5];
            uint64_t v20 = &v7[6 * v12 + 4];
            long long v21 = *v20;
            uint64_t v22 = v20[1];
            uint64_t v23 = v20[2];
            uint64_t v24 = v20[3];
            uint64_t v25 = v20[4];
            uint64_t v26 = v20[5];
            uint64_t v30 = *v17;
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v29 = v19;
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v32 = v22;
            swift_bridgeObjectRetain();
            uint64_t v31 = v26;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
              uint64_t v7 = (void *)result;
            }
            if (v10 >= v7[2]) {
              goto LABEL_30;
            }
            uint64_t v28 = v18;
            uint64_t v3 = v7 + 4;
            uint64_t v27 = &v7[6 * v10 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v27 = v21;
            v27[1] = v32;
            void v27[2] = v23;
            v27[3] = v24;
            v27[4] = v25;
            v27[5] = v31;
            if (v12 >= v7[2]) {
              goto LABEL_31;
            }
LABEL_10:
            unint64_t v13 = &v3[6 * v12];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *unint64_t v13 = v30;
            v13[1] = v28;
            void v13[2] = v4;
            v13[3] = v5;
            void v13[4] = v6;
            v13[5] = v29;
            *(void *)a1 = v7;
          }
          uint64_t v15 = __OFADD__(v10++, 1);
          if (v15) {
            goto LABEL_26;
          }
        }
        uint64_t v15 = __OFADD__(v12++, 1);
        if (v15)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v10;
    }
    if (v8 == ++v10) {
      return v7[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v23 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v10 = v3[2];
            if (v6 >= v10) {
              goto LABEL_27;
            }
            if (v8 >= v10) {
              goto LABEL_28;
            }
            unint64_t v11 = (uint64_t)&v3[7 * v6 + 4];
            char v12 = *(void *)(v11 + 8);
            unint64_t v13 = *(void *)(v11 + 16);
            uint64_t v14 = *(void *)(v11 + 24);
            uint64_t v25 = *(_OWORD *)(v11 + 32);
            uint64_t v15 = *(void *)(v11 + 48);
            BOOL v16 = &v3[7 * v8 + 4];
            unint64_t v17 = *v16;
            uint64_t v31 = v16[1];
            uint64_t v27 = v3;
            unint64_t v18 = v16[2];
            uint64_t v19 = v16[4];
            uint64_t v20 = v16[5];
            uint64_t v29 = v16[6];
            uint64_t v30 = v16[3];
            uint64_t v24 = *(void *)v11;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v26 = v18;
            uint64_t v3 = v27;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            long long v21 = &v3[7 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *long long v21 = v17;
            v21[1] = v31;
            v21[2] = v26;
            v21[3] = v30;
            v21[4] = v19;
            void v21[5] = v20;
            v21[6] = v29;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v22 = (uint64_t)&v3[7 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v22 = v24;
            *(void *)(v22 + ++*(_DWORD *)(result + 8) = v12;
            *(void *)(v22 + 16) = v13;
            *(void *)(v22 + 24) = v14;
            *(_OWORD *)(v22 + 32) = v25;
            *(void *)(v22 + 4++*(_DWORD *)(result + 8) = v15;
            *(void *)a1 = v3;
            a2 = v23;
          }
          uint64_t v9 = __OFADD__(v6++, 1);
          if (v9) {
            goto LABEL_25;
          }
        }
        uint64_t v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  void *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v28 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v11 = v3[2];
            if (v6 >= v11) {
              goto LABEL_27;
            }
            if (v8 >= v11) {
              goto LABEL_28;
            }
            char v12 = &v3[8 * v6 + 4];
            unint64_t v13 = v12[1];
            uint64_t v14 = v12[4];
            uint64_t v30 = v12[3];
            uint64_t v31 = v12[2];
            uint64_t v15 = v12[5];
            BOOL v16 = v12[6];
            unint64_t v17 = v12[7];
            unint64_t v18 = &v3[8 * v8 + 4];
            uint64_t v19 = *v18;
            uint64_t v20 = v18[1];
            long long v21 = v18[2];
            uint64_t v22 = v18[3];
            uint64_t v24 = v18[4];
            uint64_t v23 = v18[5];
            uint64_t v25 = v18[6];
            uint64_t v26 = v18[7];
            uint64_t v32 = *v12;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            uint64_t v29 = v13;
            uint64_t v27 = &v3[8 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v27 = v19;
            v27[1] = v20;
            void v27[2] = v21;
            v27[3] = v22;
            v27[4] = v24;
            v27[5] = v23;
            v27[6] = v25;
            v27[7] = v26;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v9 = &v3[8 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v9 = v32;
            v9[1] = v29;
            _OWORD v9[2] = v31;
            void v9[3] = v30;
            unsigned char v9[4] = v14;
            v9[5] = v15;
            _OWORD v9[6] = v16;
            a2 = v28;
            v9[7] = v17;
            *(void *)a1 = v3;
          }
          unint64_t v10 = __OFADD__(v6++, 1);
          if (v10) {
            goto LABEL_25;
          }
        }
        unint64_t v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v31 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v10 = v3[2];
            if (v6 >= v10) {
              goto LABEL_27;
            }
            if (v8 >= v10) {
              goto LABEL_28;
            }
            unint64_t v11 = v3 + 4;
            char v12 = (uint64_t)&v3[9 * v6 + 4];
            uint64_t v37 = v3;
            unint64_t v13 = *(void *)(v12 + 8);
            uint64_t v14 = *(void *)(v12 + 16);
            uint64_t v15 = *(void *)(v12 + 24);
            BOOL v16 = *(void *)(v12 + 32);
            unint64_t v17 = *(void *)(v12 + 40);
            unint64_t v18 = *(void *)(v12 + 48);
            uint64_t v32 = *(unsigned char *)(v12 + 56);
            uint64_t v19 = *(void *)(v12 + 64);
            uint64_t v20 = &v11[9 * v8];
            long long v21 = *v20;
            uint64_t v22 = v20[1];
            uint64_t v23 = v20[2];
            uint64_t v24 = v20[3];
            uint64_t v25 = v20[4];
            uint64_t v26 = v20[5];
            uint64_t v27 = v20[6];
            char v36 = *((unsigned char *)v20 + 56);
            uint64_t v28 = v20[8];
            uint64_t v34 = *(void *)v12;
            swift_retain();
            uint64_t v33 = v13;
            uint64_t v3 = v37;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v35 = v28;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            uint64_t v29 = (uint64_t)&v3[9 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v29 = v21;
            *(void *)(v29 + ++*(_DWORD *)(result + 8) = v22;
            *(void *)(v29 + 16) = v23;
            *(void *)(v29 + 24) = v24;
            *(void *)(v29 + 32) = v25;
            *(void *)(v29 + 40) = v26;
            *(void *)(v29 + 4++*(_DWORD *)(result + 8) = v27;
            *(unsigned char *)(v29 + 56) = v36;
            *(void *)(v29 + 64) = v35;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v30 = (uint64_t)&v3[9 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v30 = v34;
            *(void *)(v30 + ++*(_DWORD *)(result + 8) = v33;
            *(void *)(v30 + 16) = v14;
            *(void *)(v30 + 24) = v15;
            *(void *)(v30 + 32) = v16;
            *(void *)(v30 + 40) = v17;
            *(void *)(v30 + 4++*(_DWORD *)(result + 8) = v18;
            *(unsigned char *)(v30 + 56) = v32;
            *(void *)(v30 + 64) = v19;
            *(void *)a1 = v3;
            a2 = v31;
          }
          uint64_t v9 = __OFADD__(v6++, 1);
          if (v9) {
            goto LABEL_25;
          }
        }
        uint64_t v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v31 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v10 = v3[2];
            if (v6 >= v10) {
              goto LABEL_27;
            }
            if (v8 >= v10) {
              goto LABEL_28;
            }
            unint64_t v11 = v3 + 4;
            char v12 = (uint64_t)&v3[9 * v6 + 4];
            uint64_t v37 = v3;
            unint64_t v13 = *(void *)(v12 + 8);
            uint64_t v14 = *(void *)(v12 + 16);
            uint64_t v15 = *(void *)(v12 + 24);
            BOOL v16 = *(void *)(v12 + 32);
            uint64_t v32 = *(unsigned char *)(v12 + 40);
            unint64_t v17 = *(void *)(v12 + 48);
            unint64_t v18 = *(void *)(v12 + 56);
            uint64_t v19 = *(void *)(v12 + 64);
            uint64_t v20 = &v11[9 * v8];
            long long v21 = *v20;
            uint64_t v22 = v20[1];
            uint64_t v23 = v20[2];
            uint64_t v24 = v20[3];
            uint64_t v25 = v20[4];
            char v36 = *((unsigned char *)v20 + 40);
            uint64_t v26 = v20[6];
            uint64_t v27 = v20[7];
            uint64_t v28 = v20[8];
            uint64_t v34 = *(void *)v12;
            swift_retain();
            uint64_t v33 = v13;
            uint64_t v3 = v37;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v35 = v28;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            uint64_t v29 = (uint64_t)&v3[9 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v29 = v21;
            *(void *)(v29 + ++*(_DWORD *)(result + 8) = v22;
            *(void *)(v29 + 16) = v23;
            *(void *)(v29 + 24) = v24;
            *(void *)(v29 + 32) = v25;
            *(unsigned char *)(v29 + 40) = v36;
            *(void *)(v29 + 4++*(_DWORD *)(result + 8) = v26;
            *(void *)(v29 + 56) = v27;
            *(void *)(v29 + 64) = v35;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v30 = (uint64_t)&v3[9 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v30 = v34;
            *(void *)(v30 + ++*(_DWORD *)(result + 8) = v33;
            *(void *)(v30 + 16) = v14;
            *(void *)(v30 + 24) = v15;
            *(void *)(v30 + 32) = v16;
            *(unsigned char *)(v30 + 40) = v32;
            *(void *)(v30 + 4++*(_DWORD *)(result + 8) = v17;
            *(void *)(v30 + 56) = v18;
            *(void *)(v30 + 64) = v19;
            *(void *)a1 = v3;
            a2 = v31;
          }
          uint64_t v9 = __OFADD__(v6++, 1);
          if (v9) {
            goto LABEL_25;
          }
        }
        uint64_t v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v31 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v10 = v3[2];
            if (v6 >= v10) {
              goto LABEL_27;
            }
            if (v8 >= v10) {
              goto LABEL_28;
            }
            unint64_t v11 = v3 + 4;
            char v12 = (uint64_t)&v3[9 * v6 + 4];
            uint64_t v37 = v3;
            unint64_t v13 = *(void *)(v12 + 8);
            uint64_t v14 = *(void *)(v12 + 16);
            uint64_t v15 = *(void *)(v12 + 24);
            BOOL v16 = *(void *)(v12 + 32);
            uint64_t v32 = *(unsigned char *)(v12 + 40);
            unint64_t v17 = *(void *)(v12 + 48);
            unint64_t v18 = *(void *)(v12 + 56);
            uint64_t v19 = *(void *)(v12 + 64);
            uint64_t v20 = &v11[9 * v8];
            long long v21 = *v20;
            uint64_t v22 = v20[1];
            uint64_t v23 = v20[2];
            uint64_t v24 = v20[3];
            uint64_t v25 = v20[4];
            char v36 = *((unsigned char *)v20 + 40);
            uint64_t v26 = v20[6];
            uint64_t v27 = v20[7];
            uint64_t v28 = v20[8];
            uint64_t v34 = *(void *)v12;
            swift_retain();
            uint64_t v33 = v13;
            uint64_t v3 = v37;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v35 = v28;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            uint64_t v29 = (uint64_t)&v3[9 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v29 = v21;
            *(void *)(v29 + ++*(_DWORD *)(result + 8) = v22;
            *(void *)(v29 + 16) = v23;
            *(void *)(v29 + 24) = v24;
            *(void *)(v29 + 32) = v25;
            *(unsigned char *)(v29 + 40) = v36;
            *(void *)(v29 + 4++*(_DWORD *)(result + 8) = v26;
            *(void *)(v29 + 56) = v27;
            *(void *)(v29 + 64) = v35;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v30 = (uint64_t)&v3[9 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v30 = v34;
            *(void *)(v30 + ++*(_DWORD *)(result + 8) = v33;
            *(void *)(v30 + 16) = v14;
            *(void *)(v30 + 24) = v15;
            *(void *)(v30 + 32) = v16;
            *(unsigned char *)(v30 + 40) = v32;
            *(void *)(v30 + 4++*(_DWORD *)(result + 8) = v17;
            *(void *)(v30 + 56) = v18;
            *(void *)(v30 + 64) = v19;
            *(void *)a1 = v3;
            a2 = v31;
          }
          uint64_t v9 = __OFADD__(v6++, 1);
          if (v9) {
            goto LABEL_25;
          }
        }
        uint64_t v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v23 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v10 = v3[2];
            if (v6 >= v10) {
              goto LABEL_27;
            }
            if (v8 >= v10) {
              goto LABEL_28;
            }
            unint64_t v11 = v3 + 4;
            char v12 = (uint64_t)&v3[5 * v6 + 4];
            uint64_t v29 = v3;
            unint64_t v13 = *(void *)(v12 + 8);
            uint64_t v14 = *(void *)(v12 + 16);
            uint64_t v24 = *(unsigned char *)(v12 + 24);
            uint64_t v15 = *(void *)(v12 + 32);
            BOOL v16 = &v11[5 * v8];
            unint64_t v18 = *v16;
            unint64_t v17 = v16[1];
            uint64_t v19 = v16[2];
            uint64_t v27 = *((unsigned char *)v16 + 24);
            uint64_t v20 = v16[4];
            uint64_t v26 = *(void *)v12;
            swift_retain();
            uint64_t v25 = v13;
            uint64_t v3 = v29;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v28 = v19;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            long long v21 = (uint64_t)&v3[5 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)long long v21 = v18;
            *(void *)(v21 + ++*(_DWORD *)(result + 8) = v17;
            *(void *)(v21 + 16) = v28;
            *(unsigned char *)(v21 + 24) = v27;
            *(void *)(v21 + 32) = v20;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v22 = (uint64_t)&v3[5 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v22 = v26;
            *(void *)(v22 + ++*(_DWORD *)(result + 8) = v25;
            *(void *)(v22 + 16) = v14;
            *(unsigned char *)(v22 + 24) = v24;
            *(void *)(v22 + 32) = v15;
            *(void *)a1 = v3;
            a2 = v23;
          }
          uint64_t v9 = __OFADD__(v6++, 1);
          if (v9) {
            goto LABEL_25;
          }
        }
        uint64_t v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  unint64_t v12;
  void *v13;
  uint64_t result;
  BOOL v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v7 = *(void **)a1;
  unint64_t v8 = *(void *)(*(void *)a1 + 16);
  if (!v8) {
    return v7[2];
  }
  unint64_t v10 = 0;
  while (1)
  {
    unint64_t v11 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
    if (v2) {
      return v10;
    }
    if (v11)
    {
      char v12 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v12 != v7[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v12, a2);
        if ((result & 1) == 0)
        {
          if (v10 != v12)
          {
            if ((v10 & 0x8000000000000000) != 0) {
              goto LABEL_27;
            }
            BOOL v16 = v7[2];
            if (v10 >= v16) {
              goto LABEL_28;
            }
            if (v12 >= v16) {
              goto LABEL_29;
            }
            unint64_t v17 = &v7[6 * v10 + 4];
            unint64_t v18 = v17[1];
            uint64_t v4 = v17[2];
            uint64_t v5 = v17[3];
            uint64_t v6 = v17[4];
            uint64_t v19 = v17[5];
            uint64_t v20 = &v7[6 * v12 + 4];
            long long v21 = *v20;
            uint64_t v22 = v20[1];
            uint64_t v23 = v20[2];
            uint64_t v24 = v20[3];
            uint64_t v25 = v20[4];
            uint64_t v26 = v20[5];
            uint64_t v30 = *v17;
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v29 = v19;
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v32 = v22;
            swift_bridgeObjectRetain();
            uint64_t v31 = v26;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
              uint64_t v7 = (void *)result;
            }
            if (v10 >= v7[2]) {
              goto LABEL_30;
            }
            uint64_t v28 = v18;
            uint64_t v3 = v7 + 4;
            uint64_t v27 = &v7[6 * v10 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v27 = v21;
            v27[1] = v32;
            void v27[2] = v23;
            v27[3] = v24;
            v27[4] = v25;
            v27[5] = v31;
            if (v12 >= v7[2]) {
              goto LABEL_31;
            }
LABEL_10:
            unint64_t v13 = &v3[6 * v12];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *unint64_t v13 = v30;
            v13[1] = v28;
            void v13[2] = v4;
            v13[3] = v5;
            void v13[4] = v6;
            v13[5] = v29;
            *(void *)a1 = v7;
          }
          uint64_t v15 = __OFADD__(v10++, 1);
          if (v15) {
            goto LABEL_26;
          }
        }
        uint64_t v15 = __OFADD__(v12++, 1);
        if (v15)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v10;
    }
    if (v8 == ++v10) {
      return v7[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v8;
  char v9;
  unint64_t v10;
  long long *v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t result;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  BOOL v25;
  unint64_t v26;
  long long *v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long *v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long *v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  _OWORD v54[8];
  _OWORD v55[8];
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;

  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  if (!v5) {
    return v4[2];
  }
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
    if (v2) {
      return v8;
    }
    if (v9)
    {
      unint64_t v10 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v10 != v4[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
        if ((result & 1) == 0)
        {
          if (v8 != v10)
          {
            if ((v8 & 0x8000000000000000) != 0) {
              goto LABEL_27;
            }
            uint64_t v26 = v4[2];
            if (v8 >= v26) {
              goto LABEL_28;
            }
            uint64_t v27 = (long long *)&v4[16 * v8 + 4];
            uint64_t v28 = *v27;
            uint64_t v29 = v27[1];
            uint64_t v30 = v27[3];
            uint64_t v58 = v27[2];
            uint64_t v59 = v30;
            int v56 = v28;
            uint64_t v57 = v29;
            uint64_t v31 = v27[4];
            uint64_t v32 = v27[5];
            uint64_t v33 = v27[7];
            uint64_t v62 = v27[6];
            uint64_t v63 = v33;
            uint64_t v60 = v31;
            int v61 = v32;
            if (v10 >= v26) {
              goto LABEL_29;
            }
            uint64_t v34 = (long long *)&v4[16 * v10 + 4];
            uint64_t v35 = *v34;
            char v36 = v34[1];
            uint64_t v37 = v34[3];
            uint64_t v66 = v34[2];
            uint64_t v67 = v37;
            uint64_t v64 = v35;
            uint64_t v65 = v36;
            uint64_t v38 = v34[4];
            uint64_t v39 = v34[5];
            uint64_t v40 = v34[7];
            uint64_t v70 = v34[6];
            uint64_t v71 = v40;
            uint64_t v68 = v38;
            char v69 = v39;
            outlined retain of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)&v56);
            outlined retain of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)&v64);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
              uint64_t v4 = (void *)result;
            }
            if (v8 >= v4[2]) {
              goto LABEL_30;
            }
            uint64_t v3 = v4 + 4;
            uint64_t v41 = (long long *)&v4[16 * v8 + 4];
            unint64_t v42 = *v41;
            uint64_t v43 = v41[1];
            uint64_t v44 = v41[3];
            void v54[2] = v41[2];
            v54[3] = v44;
            v54[0] = v42;
            v54[1] = v43;
            char v45 = v41[4];
            uint64_t v46 = v41[5];
            uint64_t v47 = v41[7];
            v54[6] = v41[6];
            v54[7] = v47;
            v54[4] = v45;
            v54[5] = v46;
            uint64_t result = outlined release of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)v54);
            uint64_t v49 = v68;
            uint64_t v48 = v69;
            uint64_t v50 = v70;
            v41[7] = v71;
            double v51 = v67;
            __n128 v53 = v64;
            uint64_t v52 = v65;
            v41[2] = v66;
            v41[3] = v51;
            *uint64_t v41 = v53;
            v41[1] = v52;
            v41[5] = v48;
            v41[6] = v50;
            v41[4] = v49;
            if (v10 >= v4[2]) {
              goto LABEL_31;
            }
LABEL_10:
            unint64_t v11 = (long long *)&v3[16 * v10];
            char v12 = *v11;
            unint64_t v13 = v11[1];
            uint64_t v14 = v11[3];
            v55[2] = v11[2];
            v55[3] = v14;
            v55[0] = v12;
            v55[1] = v13;
            uint64_t v15 = v11[4];
            BOOL v16 = v11[5];
            unint64_t v17 = v11[7];
            v55[6] = v11[6];
            v55[7] = v17;
            v55[4] = v15;
            v55[5] = v16;
            uint64_t result = outlined release of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)v55);
            uint64_t v19 = v59;
            long long v21 = v56;
            uint64_t v20 = v57;
            _OWORD v11[2] = v58;
            v11[3] = v19;
            void *v11 = v21;
            v11[1] = v20;
            uint64_t v22 = v63;
            uint64_t v24 = v60;
            uint64_t v23 = v61;
            v11[6] = v62;
            v11[7] = v22;
            v11[4] = v24;
            v11[5] = v23;
            *(void *)a1 = v4;
          }
          uint64_t v25 = __OFADD__(v8++, 1);
          if (v25) {
            goto LABEL_26;
          }
        }
        uint64_t v25 = __OFADD__(v10++, 1);
        if (v25)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v8;
    }
    if (v5 == ++v8) {
      return v4[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v28 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v10 = v3[2];
            if (v6 >= v10) {
              goto LABEL_27;
            }
            if (v8 >= v10) {
              goto LABEL_28;
            }
            unint64_t v11 = (uint64_t)&v3[14 * v6 + 4];
            char v12 = *(void *)(v11 + 8);
            double v51 = *(void *)(v11 + 24);
            uint64_t v52 = *(void *)(v11 + 16);
            uint64_t v50 = *(void *)(v11 + 32);
            uint64_t v48 = *(void *)(v11 + 48);
            uint64_t v49 = *(void *)(v11 + 40);
            uint64_t v46 = *(void *)(v11 + 64);
            uint64_t v47 = *(void *)(v11 + 56);
            unint64_t v13 = *(void *)(v11 + 80);
            uint64_t v14 = *(void *)(v11 + 88);
            uint64_t v15 = *(unsigned char *)(v11 + 96);
            uint64_t v44 = *(void *)(v11 + 104);
            char v45 = *(void *)(v11 + 72);
            BOOL v16 = (uint64_t)&v3[14 * v8 + 4];
            uint64_t v71 = *(void *)v16;
            uint64_t v67 = *(void *)(v16 + 16);
            char v69 = *(void *)(v16 + 8);
            uint64_t v63 = *(void *)(v16 + 32);
            uint64_t v65 = *(void *)(v16 + 24);
            uint64_t v59 = *(void *)(v16 + 48);
            int v61 = *(void *)(v16 + 40);
            uint64_t v57 = *(void *)(v16 + 64);
            uint64_t v58 = *(void *)(v16 + 56);
            uint64_t v55 = *(void *)(v16 + 80);
            int v56 = *(void *)(v16 + 72);
            unint64_t v17 = *(unsigned char *)(v16 + 96);
            __n128 v53 = *(void *)(v16 + 104);
            uint64_t v54 = *(void *)(v16 + 88);
            uint64_t v40 = *(void *)v11;
            swift_retain();
            uint64_t v39 = v12;
            swift_bridgeObjectRetain();
            uint64_t v37 = v15;
            uint64_t v38 = v14;
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v52, v51, v50, v49, v48, v47, v46, v45, v13, v14, v15);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v41 = v17;
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v67, v65, v63, v61, v59, v58, v57, v56, v55, v54, v17);
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            unint64_t v18 = v3 + 4;
            uint64_t v43 = v3;
            uint64_t v19 = (uint64_t)&v3[14 * v6 + 4];
            uint64_t v35 = *(void *)(v19 + 24);
            char v36 = *(void *)(v19 + 16);
            uint64_t v33 = *(void *)(v19 + 40);
            uint64_t v34 = *(void *)(v19 + 32);
            uint64_t v31 = *(void *)(v19 + 56);
            uint64_t v32 = *(void *)(v19 + 48);
            uint64_t v20 = *(void *)(v19 + 80);
            uint64_t v29 = *(void *)(v19 + 72);
            uint64_t v30 = *(void *)(v19 + 64);
            long long v21 = *(void *)(v19 + 88);
            uint64_t v22 = *(unsigned char *)(v19 + 96);
            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v36, v35, v34, v33, v32, v31, v30, v29, v20, v21, v22);
            uint64_t result = swift_bridgeObjectRelease();
            *(void *)uint64_t v19 = v71;
            *(void *)(v19 + ++*(_DWORD *)(result + 8) = v69;
            *(void *)(v19 + 16) = v67;
            *(void *)(v19 + 24) = v65;
            *(void *)(v19 + 32) = v63;
            *(void *)(v19 + 40) = v61;
            *(void *)(v19 + 4++*(_DWORD *)(result + 8) = v59;
            *(void *)(v19 + 56) = v58;
            *(void *)(v19 + 64) = v57;
            *(void *)(v19 + 72) = v56;
            *(void *)(v19 + 80) = v55;
            *(void *)(v19 + 8++*(_DWORD *)(result + 8) = v54;
            *(unsigned char *)(v19 + 96) = v41;
            *(void *)(v19 + 104) = v53;
            if (v8 >= v43[2]) {
              goto LABEL_30;
            }
            uint64_t v23 = &v18[14 * v8];
            uint64_t v72 = v23[2];
            uint64_t v68 = v23[4];
            uint64_t v70 = v23[3];
            uint64_t v24 = v23[6];
            uint64_t v64 = v23[7];
            uint64_t v66 = v23[5];
            uint64_t v25 = v23[10];
            uint64_t v60 = v23[9];
            uint64_t v62 = v23[8];
            uint64_t v26 = v23[11];
            uint64_t v27 = *((unsigned char *)v23 + 96);
            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v72, v70, v68, v66, v24, v64, v62, v60, v25, v26, v27);
            uint64_t result = swift_bridgeObjectRelease();
            *uint64_t v23 = v40;
            v23[1] = v39;
            v23[2] = v52;
            v23[3] = v51;
            v23[4] = v50;
            v23[5] = v49;
            v23[6] = v48;
            v23[7] = v47;
            v23[8] = v46;
            v23[9] = v45;
            void v23[10] = v13;
            v23[11] = v38;
            *((unsigned char *)v23 + 96) = v37;
            v23[13] = v44;
            uint64_t v3 = v43;
            *(void *)a1 = v43;
            a2 = v28;
          }
          uint64_t v9 = __OFADD__(v6++, 1);
          if (v9) {
            goto LABEL_25;
          }
        }
        uint64_t v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v20 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v11 = v3[2];
            if (v6 >= v11) {
              goto LABEL_27;
            }
            if (v8 >= v11) {
              goto LABEL_28;
            }
            char v12 = (uint64_t)&v3[9 * v6 + 4];
            unint64_t v13 = *(void *)(v12 + 8);
            uint64_t v26 = *(void *)(v12 + 16);
            uint64_t v25 = *(void *)(v12 + 24);
            uint64_t v24 = *(void *)(v12 + 32);
            uint64_t v23 = *(void *)(v12 + 40);
            uint64_t v22 = *(void *)(v12 + 48);
            long long v21 = *(unsigned char *)(v12 + 56);
            uint64_t v14 = *(void *)(v12 + 64);
            uint64_t v15 = (uint64_t)&v3[9 * v8 + 4];
            BOOL v16 = *(void *)v15;
            unint64_t v17 = *(void *)(v15 + 8);
            uint64_t v33 = *(void *)(v15 + 24);
            uint64_t v34 = *(void *)(v15 + 16);
            uint64_t v31 = *(void *)(v15 + 40);
            uint64_t v32 = *(void *)(v15 + 32);
            uint64_t v30 = *(void *)(v15 + 48);
            uint64_t v29 = *(unsigned char *)(v15 + 56);
            unint64_t v18 = *(void *)(v15 + 64);
            uint64_t v27 = *(void *)v12;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v28 = v18;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            uint64_t v19 = (uint64_t)&v3[9 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v19 = v16;
            *(void *)(v19 + ++*(_DWORD *)(result + 8) = v17;
            *(void *)(v19 + 16) = v34;
            *(void *)(v19 + 24) = v33;
            *(void *)(v19 + 32) = v32;
            *(void *)(v19 + 40) = v31;
            *(void *)(v19 + 4++*(_DWORD *)(result + 8) = v30;
            *(unsigned char *)(v19 + 56) = v29;
            *(void *)(v19 + 64) = v28;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v9 = (uint64_t)&v3[9 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v9 = v27;
            *(void *)(v9 + ++*(_DWORD *)(result + 8) = v13;
            *(void *)(v9 + 16) = v26;
            *(void *)(v9 + 24) = v25;
            *(void *)(v9 + 32) = v24;
            *(void *)(v9 + 40) = v23;
            *(void *)(v9 + 4++*(_DWORD *)(result + 8) = v22;
            *(unsigned char *)(v9 + 56) = v21;
            *(void *)(v9 + 64) = v14;
            *(void *)a1 = v3;
            a2 = v20;
          }
          unint64_t v10 = __OFADD__(v6++, 1);
          if (v10) {
            goto LABEL_25;
          }
        }
        unint64_t v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v22 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v11 = v3[2];
            if (v6 >= v11) {
              goto LABEL_27;
            }
            if (v8 >= v11) {
              goto LABEL_28;
            }
            char v12 = (uint64_t)&v3[10 * v6 + 4];
            unint64_t v13 = *(void *)(v12 + 8);
            uint64_t v14 = *(_DWORD *)(v12 + 16);
            uint64_t v28 = *(void *)(v12 + 24);
            uint64_t v27 = *(void *)(v12 + 32);
            uint64_t v26 = *(void *)(v12 + 40);
            uint64_t v25 = *(void *)(v12 + 48);
            uint64_t v24 = *(void *)(v12 + 56);
            uint64_t v23 = *(unsigned char *)(v12 + 64);
            uint64_t v15 = *(void *)(v12 + 72);
            BOOL v16 = (uint64_t)&v3[10 * v8 + 4];
            unint64_t v17 = *(void *)v16;
            unint64_t v18 = *(void *)(v16 + 8);
            uint64_t v19 = *(_DWORD *)(v16 + 16);
            uint64_t v35 = *(void *)(v16 + 32);
            char v36 = *(void *)(v16 + 24);
            uint64_t v33 = *(void *)(v16 + 48);
            uint64_t v34 = *(void *)(v16 + 40);
            uint64_t v32 = *(void *)(v16 + 56);
            uint64_t v31 = *(unsigned char *)(v16 + 64);
            uint64_t v20 = *(void *)(v16 + 72);
            uint64_t v29 = *(void *)v12;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v30 = v20;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            long long v21 = (uint64_t)&v3[10 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)long long v21 = v17;
            *(void *)(v21 + ++*(_DWORD *)(result + 8) = v18;
            *(_DWORD *)(v21 + 16) = v19;
            *(void *)(v21 + 24) = v36;
            *(void *)(v21 + 32) = v35;
            *(void *)(v21 + 40) = v34;
            *(void *)(v21 + 4++*(_DWORD *)(result + 8) = v33;
            *(void *)(v21 + 56) = v32;
            *(unsigned char *)(v21 + 64) = v31;
            *(void *)(v21 + 72) = v30;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v9 = (uint64_t)&v3[10 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *(void *)uint64_t v9 = v29;
            *(void *)(v9 + ++*(_DWORD *)(result + 8) = v13;
            *(_DWORD *)(v9 + 16) = v14;
            *(void *)(v9 + 24) = v28;
            *(void *)(v9 + 32) = v27;
            *(void *)(v9 + 40) = v26;
            *(void *)(v9 + 4++*(_DWORD *)(result + 8) = v25;
            *(void *)(v9 + 56) = v24;
            *(unsigned char *)(v9 + 64) = v23;
            *(void *)(v9 + 72) = v15;
            *(void *)a1 = v3;
            a2 = v22;
          }
          unint64_t v10 = __OFADD__(v6++, 1);
          if (v10) {
            goto LABEL_25;
          }
        }
        unint64_t v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  void *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return v3[2];
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v6, a2);
    if (v2) {
      return v6;
    }
    if (result)
    {
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        return result;
      }
      uint64_t v28 = a2;
      while (v8 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
        if ((result & 1) == 0)
        {
          if (v6 != v8)
          {
            if ((v6 & 0x8000000000000000) != 0) {
              goto LABEL_26;
            }
            unint64_t v11 = v3[2];
            if (v6 >= v11) {
              goto LABEL_27;
            }
            if (v8 >= v11) {
              goto LABEL_28;
            }
            char v12 = &v3[8 * v6 + 4];
            unint64_t v13 = v12[1];
            uint64_t v14 = v12[4];
            uint64_t v30 = v12[3];
            uint64_t v31 = v12[2];
            uint64_t v15 = v12[5];
            BOOL v16 = v12[6];
            unint64_t v17 = v12[7];
            unint64_t v18 = &v3[8 * v8 + 4];
            uint64_t v19 = *v18;
            uint64_t v20 = v18[1];
            long long v21 = v18[2];
            uint64_t v22 = v18[3];
            uint64_t v24 = v18[4];
            uint64_t v23 = v18[5];
            uint64_t v25 = v18[6];
            uint64_t v26 = v18[7];
            uint64_t v32 = *v12;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              uint64_t v3 = (void *)result;
            }
            if (v6 >= v3[2]) {
              goto LABEL_29;
            }
            uint64_t v29 = v13;
            uint64_t v27 = &v3[8 * v6 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v27 = v19;
            v27[1] = v20;
            void v27[2] = v21;
            v27[3] = v22;
            v27[4] = v24;
            v27[5] = v23;
            v27[6] = v25;
            v27[7] = v26;
            if (v8 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t v9 = &v3[8 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v9 = v32;
            v9[1] = v29;
            _OWORD v9[2] = v31;
            void v9[3] = v30;
            unsigned char v9[4] = v14;
            v9[5] = v15;
            _OWORD v9[6] = v16;
            a2 = v28;
            v9[7] = v17;
            *(void *)a1 = v3;
          }
          unint64_t v10 = __OFADD__(v6++, 1);
          if (v10) {
            goto LABEL_25;
          }
        }
        unint64_t v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      return v6;
    }
    if (v4 == ++v6) {
      return v3[2];
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v8;
  char v9;
  unint64_t v10;
  void *v11;
  uint64_t result;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (!v6) {
    return v5[2];
  }
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v8, a2);
    if (v2) {
      return v8;
    }
    if (v9)
    {
      unint64_t v10 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v10 != v5[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
        if ((result & 1) == 0)
        {
          if (v8 != v10)
          {
            if ((v8 & 0x8000000000000000) != 0) {
              goto LABEL_27;
            }
            uint64_t v14 = v5[2];
            if (v8 >= v14) {
              goto LABEL_28;
            }
            if (v10 >= v14) {
              goto LABEL_29;
            }
            uint64_t v15 = (uint64_t)&v5[6 * v8 + 4];
            BOOL v16 = *(void *)(v15 + 8);
            uint64_t v29 = *(_OWORD *)(v15 + 16);
            uint64_t v4 = *(void *)(v15 + 32);
            unint64_t v17 = *(void *)(v15 + 40);
            unint64_t v18 = &v5[6 * v10 + 4];
            uint64_t v19 = *v18;
            uint64_t v20 = v18[1];
            long long v21 = v18[2];
            uint64_t v22 = v18[3];
            uint64_t v23 = v18[4];
            uint64_t v24 = v18[5];
            uint64_t v28 = *(void *)v15;
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v27 = v17;
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v31 = v20;
            swift_bridgeObjectRetain();
            uint64_t v30 = v24;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
              uint64_t v5 = (void *)result;
            }
            if (v8 >= v5[2]) {
              goto LABEL_30;
            }
            uint64_t v26 = v16;
            uint64_t v3 = v5 + 4;
            uint64_t v25 = &v5[6 * v8 + 4];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            *uint64_t v25 = v19;
            v25[1] = v31;
            v25[2] = v21;
            v25[3] = v22;
            v25[4] = v23;
            uint64_t v25[5] = v30;
            if (v10 >= v5[2]) {
              goto LABEL_31;
            }
LABEL_10:
            unint64_t v11 = &v3[6 * v10];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            void *v11 = v28;
            v11[1] = v26;
            *((_OWORD *)v11 + 1) = v29;
            v11[4] = v4;
            v11[5] = v27;
            *(void *)a1 = v5;
          }
          unint64_t v13 = __OFADD__(v8++, 1);
          if (v13) {
            goto LABEL_26;
          }
        }
        unint64_t v13 = __OFADD__(v10++, 1);
        if (v13)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v8;
    }
    if (v6 == ++v8) {
      return v5[2];
    }
  }
}

uint64_t specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (!v4) {
    return v3[2];
  }
  unint64_t v7 = 0;
  while (1)
  {
    char v8 = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v7, a2);
    if (v2) {
      return v7;
    }
    if (v8)
    {
      unint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
      while (v10 != v3[2])
      {
        uint64_t result = closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(v10, a2);
        if ((result & 1) == 0)
        {
          if (v7 != v10)
          {
            if ((v7 & 0x8000000000000000) != 0) {
              goto LABEL_27;
            }
            unint64_t v13 = v3[2];
            if (v7 >= v13) {
              goto LABEL_28;
            }
            uint64_t result = outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)&v3[8 * v7 + 4], (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork);
            if (v10 >= v13) {
              goto LABEL_29;
            }
            outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)&v3[8 * v10 + 4], (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            *a1 = (uint64_t)v3;
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
              uint64_t v3 = (void *)result;
              *a1 = result;
            }
            if (v7 >= v3[2]) {
              goto LABEL_30;
            }
            uint64_t result = outlined assign with take of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)v14, (uint64_t)&v3[8 * v7 + 4], (uint64_t (*)(void))type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork);
            uint64_t v9 = *a1;
            if (v10 >= *(void *)(*a1 + 16)) {
              goto LABEL_31;
            }
LABEL_10:
            uint64_t result = outlined assign with take of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)v15, v9 + (v10 << 6) + 32, (uint64_t (*)(void))type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork);
            uint64_t v3 = (void *)*a1;
          }
          BOOL v12 = __OFADD__(v7++, 1);
          if (v12) {
            goto LABEL_26;
          }
        }
        BOOL v12 = __OFADD__(v10++, 1);
        if (v12)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
      }
      return v7;
    }
    if (v4 == ++v7) {
      return v3[2];
    }
  }
}

uint64_t RangeReplaceableCollection._remove(atOffsets:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v107 = a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v102 = (char *)v81 - v6;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v100 = (char *)v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v99 = (char *)v81 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v98 = type metadata accessor for Range();
  CGRect v112 = *(char **)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v97 = (char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v96 = (char *)v81 - v13;
  int64_t v92 = *(void (***)(char *, uint64_t))(v7 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v118 = (char *)v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  char v105 = (char *)v81 - v17;
  uint64_t v106 = type metadata accessor for IndexSet.RangeView();
  char v114 = *(char ***)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  CGRect v108 = (char *)v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexSet.RangeView>();
  CFIndex v113 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v110 = (char *)v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = a2;
  uint64_t v83 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v109 = (char *)v81 - v25;
  uint64_t v26 = type metadata accessor for IndexSet();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)v81 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)v81 - v34;
  MEMORY[0x270FA5388](v36);
  uint64_t v84 = (char *)v81 - v37;
  uint64_t v115 = a1;
  uint64_t result = IndexSet.isEmpty.getter();
  if (result) {
    return result;
  }
  uint64_t v95 = v5;
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (__OFSUB__(result, 1)) {
    goto LABEL_13;
  }
  if (result - 1 < 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v116 = v23;
  v119[0] = 0;
  v119[1] = result - 1;
  type metadata accessor for ClosedRange<Int>();
  _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type ClosedRange<Int> and conformance ClosedRange<A>, (void (*)(uint64_t))type metadata accessor for ClosedRange<Int>);
  uint64_t v39 = v84;
  IndexSet.init<A>(integersIn:)();
  uint64_t v40 = v27;
  uint64_t v41 = *(void (**)(void, void, void))(v27 + 16);
  v41(v32, v39, v26);
  v41(v29, v115, v26);
  _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
  dispatch thunk of SetAlgebra.symmetricDifference(_:)();
  dispatch thunk of SetAlgebra.formIntersection(_:)();
  unint64_t v42 = *(void (**)(void, void))(v40 + 8);
  uint64_t v82 = v26;
  v81[1] = v40 + 8;
  v81[0] = v42;
  v42(v35, v26);
  dispatch thunk of RangeReplaceableCollection.init()();
  IndexSet.count.getter();
  dispatch thunk of RangeReplaceableCollection.reserveCapacity(_:)();
  uint64_t v43 = v108;
  IndexSet.rangeView.getter();
  uint64_t v44 = v110;
  IndexSet.RangeView.makeIterator()();
  char v45 = v114;
  uint64_t v46 = v114[1];
  uint64_t v47 = v106;
  uint64_t v94 = (void (**)(void, void))(v114 + 1);
  uint64_t v93 = v46;
  ((void (*)(char *, uint64_t))v46)(v43, v106);
  uint64_t v48 = &v44[*((int *)v113 + 9)];
  uint64_t v49 = _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView, MEMORY[0x263F07960]);
  uint64_t v50 = *(void *)v48;
  uint64_t v51 = v49;
  dispatch thunk of Collection.endIndex.getter();
  if (v50 != v119[0])
  {
    uint64_t v91 = (void (**)(char *, uint64_t, uint64_t))(v45 + 2);
    uint64_t v90 = (void (**)(char *, uint64_t, uint64_t))(v83 + 16);
    CGFloat v89 = (void (**)(char *, char *, uint64_t))(v92 + 2);
    uint64_t v88 = (void (**)(char *, char *, uint64_t))(v92 + 4);
    char v114 = (char **)(v92 + 1);
    uint64_t v87 = (void (**)(char *, char *, uint64_t))(v112 + 32);
    CFAttributedStringRef v86 = (void (**)(char *, uint64_t))(v112 + 8);
    int64_t v92 = (void (**)(char *, uint64_t))(v83 + 8);
    int v56 = v105;
    uint64_t v55 = (uint64_t)v110;
    uint64_t v115 = v51;
    uint64_t v85 = v48;
    while (1)
    {
      uint64_t v57 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
      v57(v119, 0);
      uint64_t v58 = v108;
      (*v91)(v108, v55, v47);
      dispatch thunk of Collection.formIndex(after:)();
      ((void (*)(char *, uint64_t))v93)(v58, v47);
      uint64_t v59 = v117;
      uint64_t v60 = v111;
      Collection.index(atOffset:)();
      Collection.index(atOffset:)();
      (*v90)(v116, (uint64_t)v60, v59);
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v61 = TupleTypeMetadata2;
      uint64_t v62 = v99;
      uint64_t v63 = &v99[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v64 = *v89;
      (*v89)(v99, v56, v7);
      CFIndex v113 = v63;
      v64(v63, v118, v7);
      uint64_t v65 = v100;
      uint64_t v66 = &v100[*(int *)(v61 + 48)];
      v64(v100, v62, v7);
      v64(v66, v63, v7);
      uint64_t v67 = *v88;
      uint64_t v68 = v97;
      (*v88)(v97, v65, v7);
      CGRect v112 = *v114;
      ((void (*)(char *, uint64_t))v112)(v66, v7);
      uint64_t v69 = *(int *)(v61 + 48);
      uint64_t v70 = v117;
      uint64_t v71 = &v65[v69];
      uint64_t v72 = v62;
      uint64_t v55 = (uint64_t)v110;
      v67(v65, v72, v7);
      v67(v71, v113, v7);
      uint64_t v73 = v98;
      v67(&v68[*(int *)(v98 + 36)], v71, v7);
      int v74 = v65;
      int v56 = v105;
      uint64_t v75 = (void (*)(void, void))v112;
      ((void (*)(char *, uint64_t))v112)(v74, v7);
      uint64_t v76 = v96;
      (*v87)(v96, v68, v73);
      uint64_t v77 = v116;
      dispatch thunk of Collection.subscript.getter();
      uint64_t v78 = v73;
      uint64_t v47 = v106;
      (*v86)(v76, v78);
      __n128 v53 = *v92;
      (*v92)(v77, v70);
      swift_getAssociatedConformanceWitness();
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      v75(v118, v7);
      v75(v56, v7);
      uint64_t v79 = *(void *)v85;
      dispatch thunk of Collection.endIndex.getter();
      if (v79 == v119[0])
      {
        uint64_t v54 = v111;
        uint64_t v52 = v83;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v52 = v83;
  __n128 v53 = *(void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v55 = (uint64_t)v110;
  uint64_t v54 = v111;
LABEL_10:
  uint64_t v80 = v117;
  v53(v54, v117);
  outlined destroy of Slice<IndexSet>(v55, (uint64_t (*)(void))type metadata accessor for IndexingIterator<IndexSet.RangeView>);
  ((void (*)(char *, uint64_t))v81[0])(v84, v82);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v52 + 32))(v54, v109, v80);
}

void type metadata accessor for IndexingIterator<IndexSet.RangeView>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<IndexSet.RangeView>)
  {
    type metadata accessor for IndexSet.RangeView();
    _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView, MEMORY[0x263F07960]);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<IndexSet.RangeView>);
    }
  }
}

void type metadata accessor for ClosedRange<Int>()
{
  if (!lazy cache variable for type metadata for ClosedRange<Int>)
  {
    unint64_t v0 = type metadata accessor for ClosedRange();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Int>);
    }
  }
}

uint64_t MutableCollection.move(fromOffsets:toOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v83 = a4;
  uint64_t v7 = *(char **)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v78 = (char *)&v66 - v12;
  uint64_t AssociatedConformanceWitness = (void (*)(char *, uint64_t))swift_getAssociatedConformanceWitness();
  uint64_t v81 = type metadata accessor for Range();
  uint64_t v86 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v76 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v80 = (char *)&v66 - v15;
  uint64_t v91 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v66 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v66 - v23;
  type metadata accessor for Slice<IndexSet>();
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v75 = (uint64_t)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Collection.subscript.getter(v75);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(_:offsetBy:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v91 + 8);
  uint64_t v77 = v21;
  uint64_t v89 = v91 + 8;
  uint64_t v87 = v27;
  v27(v21, AssociatedTypeWitness);
  uint64_t v84 = v4;
  uint64_t v82 = a3;
  int v74 = v7;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v88 = v18;
  uint64_t v90 = v24;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v72 = a2;
    uint64_t v29 = v78;
    uint64_t v30 = TupleTypeMetadata2;
    uint64_t v31 = &v78[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v32 = v91;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
    v33(v78, v88, AssociatedTypeWitness);
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    uint64_t v73 = v31;
    v34(v31, v90, AssociatedTypeWitness);
    uint64_t v35 = &v10[*(int *)(v30 + 48)];
    v34(v10, v29, AssociatedTypeWitness);
    uint64_t v91 = v32 + 16;
    uint64_t v69 = v34;
    v34(v35, v31, AssociatedTypeWitness);
    uint64_t v36 = v76;
    v33(v76, v10, AssociatedTypeWitness);
    uint64_t v37 = v87;
    v87(v35, AssociatedTypeWitness);
    uint64_t v38 = &v10[*(int *)(v30 + 48)];
    v33(v10, v29, AssociatedTypeWitness);
    v33(v38, v73, AssociatedTypeWitness);
    uint64_t v39 = v86;
    uint64_t v40 = v81;
    uint64_t v41 = &v36[*(int *)(v81 + 36)];
    uint64_t v70 = v33;
    v33(v41, v38, AssociatedTypeWitness);
    uint64_t v71 = v10;
    v37(v10, AssociatedTypeWitness);
    unint64_t v42 = *(uint64_t (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v43 = v80;
    uint64_t v68 = v39 + 32;
    uint64_t v67 = v42;
    uint64_t v44 = v42(v80, v36, v40);
    uint64_t v73 = (char *)&v66;
    MEMORY[0x270FA5388](v44);
    *(&v66 - 2) = v75;
    uint64_t v45 = (uint64_t)v77;
    MutableCollection.stablePartitionByOffset(in:startOffset:isSuffixElementAtOffset:)(v43, 0, (uint64_t (*)(uint64_t, double))partial apply for closure #1 in MutableCollection.move(fromOffsets:toOffset:), (uint64_t)(&v66 - 4), v82, v83, (uint64_t)v77);
    uint64_t v66 = 0;
    uint64_t v48 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v47 = v39 + 8;
    uint64_t v46 = v48;
    v48(v43, v40);
    v37((char *)v45, AssociatedTypeWitness);
    dispatch thunk of Collection.endIndex.getter();
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v50 = v78;
      uint64_t v49 = TupleTypeMetadata2;
      uint64_t v51 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t AssociatedConformanceWitness = v46;
      uint64_t v86 = v47;
      uint64_t v52 = &v78[v51];
      __n128 v53 = v69;
      v69(v78, v90, AssociatedTypeWitness);
      int v74 = v52;
      uint64_t v54 = v70;
      v70(v52, v88, AssociatedTypeWitness);
      uint64_t v55 = v71;
      int v56 = &v71[*(int *)(v49 + 48)];
      v53(v71, v50, AssociatedTypeWitness);
      v53(v56, v52, AssociatedTypeWitness);
      uint64_t v57 = v76;
      v54(v76, v55, AssociatedTypeWitness);
      uint64_t v58 = v87;
      v87(v56, AssociatedTypeWitness);
      uint64_t v59 = &v55[*(int *)(v49 + 48)];
      v54(v55, v50, AssociatedTypeWitness);
      v54(v59, v74, AssociatedTypeWitness);
      uint64_t v60 = v81;
      v54(&v57[*(int *)(v81 + 36)], v59, AssociatedTypeWitness);
      v58(v55, AssociatedTypeWitness);
      uint64_t v61 = v80;
      uint64_t v62 = v67(v80, v57, v60);
      MEMORY[0x270FA5388](v62);
      uint64_t v63 = v75;
      *(&v66 - 2) = v75;
      uint64_t v64 = (uint64_t)v77;
      MutableCollection.stablePartitionByOffset(in:startOffset:isSuffixElementAtOffset:)(v61, v72, (uint64_t (*)(uint64_t, double))partial apply for closure #2 in MutableCollection.move(fromOffsets:toOffset:), (uint64_t)(&v66 - 4), v82, v83, (uint64_t)v77);
      AssociatedConformanceWitness(v61, v60);
      uint64_t v65 = v87;
      v87((char *)v64, AssociatedTypeWitness);
      v65(v90, AssociatedTypeWitness);
      return outlined destroy of Slice<IndexSet>(v63, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = a1;
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  uint64_t v114 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v111 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v107 = (char *)&v89 - v6;
  type metadata accessor for Range<IndexSet.Index>();
  uint64_t v108 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v109 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v110 = (uint64_t)&v89 - v10;
  uint64_t v11 = type metadata accessor for IndexSet.Index();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v91 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v94 = (char *)&v89 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v93 = (char *)&v89 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v95 = (char *)&v89 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v96 = (char *)&v89 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v89 - v23;
  type metadata accessor for Slice<IndexSet>();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v90 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v89 - v29;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v89 - v32;
  MEMORY[0x270FA5388](v34);
  uint64_t v89 = (char *)&v89 - v35;
  uint64_t v92 = a2;
  outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(a2, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
  uint64_t v97 = v12;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v36(v24, v33, v11);
  uint64_t v116 = v26;
  uint64_t v37 = &v33[*(int *)(v26 + 36)];
  uint64_t v38 = _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
  char v104 = v24;
  char v105 = v37;
  uint64_t v102 = v38;
  LOBYTE(v37) = dispatch thunk of static Equatable.== infix(_:_:)();
  CFTimeInterval v103 = v33;
  uint64_t v39 = (uint64_t)v33;
  uint64_t v40 = (uint64_t)v30;
  outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(v39, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
  uint64_t v106 = v12 + 16;
  CGRect v112 = v36;
  if (v37)
  {
LABEL_5:
    outlined destroy of Slice<IndexSet>(v40, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    __n128 v53 = v104;
  }
  else
  {
    uint64_t v99 = (void (**)(char *, uint64_t))(v97 + 8);
    uint64_t v100 = (void (**)(char *, char *, uint64_t))(v97 + 32);
    uint64_t v98 = v30;
    while (1)
    {
      uint64_t v41 = v40 + *(int *)(v116 + 36);
      uint64_t v42 = v114;
      uint64_t v43 = v107;
      uint64_t v44 = &v107[*(int *)(v114 + 48)];
      v36(v107, (char *)v40, v11);
      CFIndex v113 = v44;
      v36(v44, (char *)v41, v11);
      uint64_t v45 = v111;
      uint64_t v46 = &v111[*(int *)(v42 + 48)];
      v36(v111, v43, v11);
      v36(v46, v44, v11);
      uint64_t v47 = *v100;
      uint64_t v48 = v109;
      (*v100)(v109, v45, v11);
      uint64_t v49 = *v99;
      (*v99)(v46, v11);
      uint64_t v50 = &v45[*(int *)(v114 + 48)];
      v47(v45, v43, v11);
      v47(v50, v113, v11);
      v47(&v48[*(int *)(v108 + 36)], v50, v11);
      v49(v45, v11);
      uint64_t v51 = (uint64_t)v48;
      uint64_t v36 = v112;
      uint64_t v52 = v110;
      outlined init with take of Range<IndexSet.Index>(v51, v110);
      uint64_t v40 = (uint64_t)v98;
      type metadata accessor for IndexSet();
      _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
      __n128 v53 = v104;
      dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
      outlined destroy of Slice<IndexSet>(v52, (uint64_t (*)(void))type metadata accessor for Range<IndexSet.Index>);
      uint64_t v54 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v56 = *v55;
      v54(v115, 0);
      outlined destroy of Slice<IndexSet>(v40, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
      if (v56 >= v101) {
        break;
      }
      uint64_t v57 = (uint64_t)v103;
      dispatch thunk of Collection.formIndex(after:)();
      char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(v57, v40, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
      if (v58) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v59 = v96;
  v36(v96, v53, v11);
  uint64_t v60 = v95;
  v36(v95, v105, v11);
  uint64_t v61 = v53;
  uint64_t v62 = v93;
  v36(v93, v59, v11);
  uint64_t v63 = v94;
  v36(v94, v60, v11);
  uint64_t v65 = (char *)(v97 + 8);
  uint64_t v64 = *(void (**)(char *, uint64_t))(v97 + 8);
  v64(v61, v11);
  _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
  LOBYTE(v61) = dispatch thunk of static Comparable.<= infix(_:_:)();
  v64(v63, v11);
  char v105 = (char *)v64;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v64)(v62, v11);
  if (v61)
  {
    uint64_t v67 = v114;
    uint64_t v68 = v107;
    uint64_t v69 = &v107[*(int *)(v114 + 48)];
    CFIndex v113 = v65;
    uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
    v70(v107, v96, v11);
    v70(v69, v60, v11);
    uint64_t v72 = v111;
    uint64_t v71 = v112;
    uint64_t v73 = &v111[*(int *)(v67 + 48)];
    v112(v111, v68, v11);
    v71(v73, v69, v11);
    uint64_t v74 = v11;
    uint64_t v75 = (uint64_t)v109;
    v70(v109, v72, v74);
    uint64_t v76 = (void (*)(char *, uint64_t))v105;
    ((void (*)(char *, uint64_t))v105)(v73, v74);
    uint64_t v77 = &v72[*(int *)(v114 + 48)];
    v70(v72, v68, v74);
    v70(v77, v69, v74);
    v70((char *)(v75 + *(int *)(v108 + 36)), v77, v74);
    v76(v72, v74);
    uint64_t v78 = (void (*)(uint64_t, uint64_t))v76;
    uint64_t v79 = v110;
    outlined init with take of Range<IndexSet.Index>(v75, v110);
    uint64_t v80 = v89;
    uint64_t v81 = (uint64_t)v103;
    specialized Slice.subscript.getter(v79, v89);
    outlined destroy of Slice<IndexSet>(v81, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    outlined destroy of Slice<IndexSet>(v79, (uint64_t (*)(void))type metadata accessor for Range<IndexSet.Index>);
    uint64_t v82 = v92;
    outlined assign with take of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)v80, v92, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    uint64_t v83 = v82;
    uint64_t v84 = v90;
    outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(v83, v90, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    uint64_t v85 = (uint64_t)v91;
    v112(v91, (char *)v84, v74);
    uint64_t v86 = v84;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      BOOL v87 = 0;
    }
    else
    {
      uint64_t v88 = specialized Slice.subscript.getter(v85);
      BOOL v87 = v88 == v101;
    }
    v78(v85, v74);
    outlined destroy of Slice<IndexSet>(v86, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    return v87;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in MutableCollection.move(fromOffsets:toOffset:)(uint64_t a1)
{
  return closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t MutableCollection.stablePartitionByOffset(in:startOffset:isSuffixElementAtOffset:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, double)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return MutableCollection.stablePartitionByOffset(in:startOffset:count:isSuffixElementAtOffset:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t closure #2 in MutableCollection.move(fromOffsets:toOffset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v99 = a1;
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  uint64_t v112 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v110 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v106 = (char *)&v87 - v6;
  type metadata accessor for Range<IndexSet.Index>();
  uint64_t v107 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v108 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v109 = (uint64_t)&v87 - v10;
  uint64_t v11 = type metadata accessor for IndexSet.Index();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v89 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v92 = (char *)&v87 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v91 = (char *)&v87 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v93 = (char *)&v87 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v94 = (char *)&v87 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v87 - v23;
  type metadata accessor for Slice<IndexSet>();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v88 = (uint64_t)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v87 - v29;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v87 - v32;
  MEMORY[0x270FA5388](v34);
  BOOL v87 = (char *)&v87 - v35;
  uint64_t v90 = a2;
  outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(a2, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
  uint64_t v95 = v12;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v36(v24, v33, v11);
  uint64_t v114 = v26;
  uint64_t v37 = &v33[*(int *)(v26 + 36)];
  uint64_t v38 = _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
  uint64_t v102 = v24;
  CFTimeInterval v103 = v37;
  uint64_t v100 = v38;
  LOBYTE(v37) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v101 = v33;
  uint64_t v39 = (uint64_t)v33;
  uint64_t v40 = (uint64_t)v30;
  outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(v39, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
  char v104 = v36;
  uint64_t v105 = v12 + 16;
  if (v37)
  {
LABEL_5:
    outlined destroy of Slice<IndexSet>(v40, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    __n128 v53 = v102;
  }
  else
  {
    uint64_t v97 = (void (**)(char *, uint64_t))(v95 + 8);
    uint64_t v98 = (void (**)(char *, char *, uint64_t))(v95 + 32);
    uint64_t v96 = v30;
    while (1)
    {
      uint64_t v41 = v40 + *(int *)(v114 + 36);
      uint64_t v42 = v112;
      uint64_t v43 = v106;
      uint64_t v44 = &v106[*(int *)(v112 + 48)];
      v36(v106, (char *)v40, v11);
      uint64_t v111 = v44;
      v36(v44, (char *)v41, v11);
      uint64_t v45 = v110;
      uint64_t v46 = &v110[*(int *)(v42 + 48)];
      v36(v110, v43, v11);
      v36(v46, v44, v11);
      uint64_t v47 = *v98;
      uint64_t v48 = v108;
      (*v98)(v108, v45, v11);
      uint64_t v49 = *v97;
      (*v97)(v46, v11);
      uint64_t v50 = &v45[*(int *)(v112 + 48)];
      v47(v45, v43, v11);
      v47(v50, v111, v11);
      v47(&v48[*(int *)(v107 + 36)], v50, v11);
      v49(v45, v11);
      uint64_t v51 = (uint64_t)v48;
      uint64_t v36 = v104;
      uint64_t v52 = v109;
      outlined init with take of Range<IndexSet.Index>(v51, v109);
      uint64_t v40 = (uint64_t)v96;
      type metadata accessor for IndexSet();
      _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
      __n128 v53 = v102;
      dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
      outlined destroy of Slice<IndexSet>(v52, (uint64_t (*)(void))type metadata accessor for Range<IndexSet.Index>);
      uint64_t v54 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v56 = *v55;
      v54(v113, 0);
      outlined destroy of Slice<IndexSet>(v40, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
      if (v56 >= v99) {
        break;
      }
      uint64_t v57 = (uint64_t)v101;
      dispatch thunk of Collection.formIndex(after:)();
      char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(v57, v40, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
      if (v58) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v59 = v94;
  v36(v94, v53, v11);
  uint64_t v60 = v93;
  v36(v93, v103, v11);
  uint64_t v61 = v53;
  uint64_t v62 = v91;
  v36(v91, v59, v11);
  uint64_t v63 = v92;
  v36(v92, v60, v11);
  uint64_t v65 = (char *)(v95 + 8);
  uint64_t v64 = *(void (**)(char *, uint64_t))(v95 + 8);
  v64(v61, v11);
  _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
  LOBYTE(v61) = dispatch thunk of static Comparable.<= infix(_:_:)();
  v64(v63, v11);
  uint64_t v111 = v65;
  CFTimeInterval v103 = (char *)v64;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v64)(v62, v11);
  if (v61)
  {
    uint64_t v67 = v112;
    uint64_t v68 = v36;
    uint64_t v69 = v106;
    uint64_t v70 = &v106[*(int *)(v112 + 48)];
    uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
    v71(v106, v94, v11);
    uint64_t v102 = v70;
    v71(v70, v60, v11);
    uint64_t v72 = v110;
    uint64_t v73 = &v110[*(int *)(v67 + 48)];
    v68(v110, v69, v11);
    v68(v73, v70, v11);
    uint64_t v74 = v11;
    uint64_t v75 = (uint64_t)v108;
    v71(v108, v72, v74);
    uint64_t v76 = (void (*)(char *, uint64_t))v103;
    ((void (*)(char *, uint64_t))v103)(v73, v74);
    uint64_t v77 = &v72[*(int *)(v112 + 48)];
    v71(v72, v69, v74);
    v71(v77, v102, v74);
    v71((char *)(v75 + *(int *)(v107 + 36)), v77, v74);
    v76(v72, v74);
    uint64_t v78 = v109;
    outlined init with take of Range<IndexSet.Index>(v75, v109);
    uint64_t v79 = v87;
    uint64_t v80 = (uint64_t)v101;
    specialized Slice.subscript.getter(v78, v87);
    outlined destroy of Slice<IndexSet>(v80, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    outlined destroy of Slice<IndexSet>(v78, (uint64_t (*)(void))type metadata accessor for Range<IndexSet.Index>);
    uint64_t v81 = v90;
    outlined assign with take of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)v79, v90, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    uint64_t v82 = v81;
    uint64_t v83 = v88;
    outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(v82, v88, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
    uint64_t v84 = (uint64_t)v89;
    v104(v89, (char *)v83, v74);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      ((void (*)(uint64_t, uint64_t))v103)(v84, v74);
      outlined destroy of Slice<IndexSet>(v83, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
      return 1;
    }
    else
    {
      uint64_t v85 = v83;
      uint64_t v86 = specialized Slice.subscript.getter(v84);
      ((void (*)(uint64_t, uint64_t))v103)(v84, v74);
      outlined destroy of Slice<IndexSet>(v85, (uint64_t (*)(void))type metadata accessor for Slice<IndexSet>);
      return v86 != v99;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #2 in MutableCollection.move(fromOffsets:toOffset:)(uint64_t a1)
{
  return closure #2 in MutableCollection.move(fromOffsets:toOffset:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t MutableCollection.stablePartitionByOffset(in:startOffset:count:isSuffixElementAtOffset:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, double)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  char v131 = a1;
  uint64_t v127 = a4;
  uint64_t v128 = a3;
  uint64_t v129 = a2;
  uint64_t v123 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v124 = (char *)&v101 - v15;
  uint64_t v130 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for Range();
  MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  MEMORY[0x270FA5388](v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v101 - v25;
  MEMORY[0x270FA5388](v27);
  v37.n128_f64[0] = MEMORY[0x270FA5388]((char *)&v101 - v28);
  if (v30 != 1)
  {
    if (!v30)
    {
      uint64_t v38 = *(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v20 + 16);
      uint64_t v39 = a7;
      return v38(v39, v131, AssociatedTypeWitness, v37);
    }
    uint64_t v114 = v31;
    uint64_t v115 = v32;
    uint64_t v118 = v29;
    uint64_t v111 = v23;
    uint64_t v119 = v36;
    uint64_t v105 = v35;
    uint64_t v121 = v34;
    uint64_t v106 = a7;
    uint64_t v126 = v8;
    uint64_t v108 = v30;
    if (v30 >= 0) {
      uint64_t v41 = v30;
    }
    else {
      uint64_t v41 = v30 + 1;
    }
    uint64_t v42 = v131;
    uint64_t v43 = (char *)&v101 - v33;
    uint64_t v116 = v41 >> 1;
    dispatch thunk of Collection.index(_:offsetBy:)();
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v45 = v42;
    uint64_t v46 = v20 + 16;
    v44(v26, v45, AssociatedTypeWitness);
    uint64_t v122 = v43;
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v47 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v48 = v16;
      uint64_t v49 = TupleTypeMetadata2;
      uint64_t v133 = v20;
      uint64_t v50 = v124;
      uint64_t v51 = v13;
      uint64_t v52 = &v124[v47];
      uint64_t v117 = v48;
      __n128 v53 = *(void (**)(char *))(v133 + 32);
      uint64_t v107 = v26;
      v53(v124);
      char v120 = v52;
      v44(v52, v122, AssociatedTypeWitness);
      uint64_t v54 = *(int *)(v49 + 48);
      uint64_t v55 = v44;
      uint64_t v56 = &v51[v54];
      v55(v51, v50, AssociatedTypeWitness);
      uint64_t v112 = v55;
      v55(v56, v52, AssociatedTypeWitness);
      uint64_t v57 = v51;
      uint64_t v58 = v119;
      ((void (*)(uint64_t, char *, uint64_t))v53)(v119, v51, AssociatedTypeWitness);
      uint64_t v113 = v46;
      uint64_t v59 = *(char **)(v133 + 8);
      v133 += 8;
      ((void (*)(char *, uint64_t))v59)(v56, AssociatedTypeWitness);
      uint64_t v60 = v53;
      uint64_t v61 = &v57[*(int *)(TupleTypeMetadata2 + 48)];
      ((void (*)(char *, char *, uint64_t))v53)(v57, v50, AssociatedTypeWitness);
      ((void (*)(char *, char *, uint64_t))v53)(v61, v120, AssociatedTypeWitness);
      uint64_t v62 = v117;
      uint64_t v63 = v58 + *(int *)(v117 + 36);
      uint64_t v110 = (void (*)(uint64_t, char *, uint64_t))v60;
      ((void (*)(uint64_t, char *, uint64_t))v60)(v63, v61, AssociatedTypeWitness);
      uint64_t v109 = v57;
      char v120 = v59;
      ((void (*)(char *, uint64_t))v59)(v57, AssociatedTypeWitness);
      uint64_t v64 = v121;
      uint64_t v65 = v121 + 32;
      uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 32);
      uint64_t v67 = v115;
      v66(v115, v58, v62);
      uint64_t v68 = v126;
      MutableCollection.stablePartitionByOffset(in:startOffset:count:isSuffixElementAtOffset:)(v67, v129, v116, v128, v127, v130, v123);
      uint64_t v126 = v68;
      if (v68)
      {
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v67, v62);
        return ((uint64_t (*)(char *, uint64_t))v120)(v122, AssociatedTypeWitness);
      }
      CFTimeInterval v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
      uint64_t v104 = v65;
      uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      uint64_t v121 = v64 + 8;
      uint64_t v102 = v69;
      v69(v67, v62);
      uint64_t v70 = v107;
      uint64_t v71 = v112;
      v112(v107, &v131[*(int *)(v62 + 36)], AssociatedTypeWitness);
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if (result)
      {
        uint64_t v72 = TupleTypeMetadata2;
        uint64_t v73 = v124;
        uint64_t v74 = &v124[*(int *)(TupleTypeMetadata2 + 48)];
        v71(v124, v122, AssociatedTypeWitness);
        char v131 = v74;
        uint64_t v75 = v110;
        v110((uint64_t)v74, v70, AssociatedTypeWitness);
        uint64_t v76 = *(int *)(v72 + 48);
        uint64_t v77 = v109;
        uint64_t v78 = &v109[v76];
        v71(v109, v73, AssociatedTypeWitness);
        v71(v78, v74, AssociatedTypeWitness);
        uint64_t v79 = v119;
        v75(v119, v77, AssociatedTypeWitness);
        uint64_t v80 = v120;
        ((void (*)(char *, uint64_t))v120)(v78, AssociatedTypeWitness);
        uint64_t v81 = &v77[*(int *)(TupleTypeMetadata2 + 48)];
        v75((uint64_t)v77, v73, AssociatedTypeWitness);
        v75((uint64_t)v81, v131, AssociatedTypeWitness);
        uint64_t v82 = v117;
        v75(v79 + *(int *)(v117 + 36), v81, AssociatedTypeWitness);
        ((void (*)(char *, uint64_t))v80)(v77, AssociatedTypeWitness);
        uint64_t result = v103(v114, v79, v82);
        if (!__OFADD__(v129, v116))
        {
          if (!__OFSUB__(v108, v116))
          {
            uint64_t v83 = v111;
            uint64_t v84 = v114;
            uint64_t v85 = v126;
            MutableCollection.stablePartitionByOffset(in:startOffset:count:isSuffixElementAtOffset:)(v114, v129 + v116, v108 - v116, v128, v127, v130, v123);
            uint64_t v126 = v85;
            if (v85)
            {
              v102(v84, v82);
              ((void (*)(char *, uint64_t))v120)(v118, AssociatedTypeWitness);
              return ((uint64_t (*)(char *, uint64_t))v120)(v122, AssociatedTypeWitness);
            }
            v102(v84, v82);
            uint64_t v86 = v118;
            BOOL v87 = v83;
            uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
            if (result)
            {
              uint64_t v88 = TupleTypeMetadata2;
              uint64_t v89 = v124;
              uint64_t v90 = &v124[*(int *)(TupleTypeMetadata2 + 48)];
              uint64_t v91 = v112;
              v112(v124, v86, AssociatedTypeWitness);
              char v131 = v90;
              v91(v90, v87, AssociatedTypeWitness);
              uint64_t v92 = v109;
              uint64_t v93 = &v109[*(int *)(v88 + 48)];
              v91(v109, v89, AssociatedTypeWitness);
              v91(v93, v90, AssociatedTypeWitness);
              uint64_t v94 = v105;
              uint64_t v95 = (void (*)(char *, char *, uint64_t))v110;
              v110(v105, v92, AssociatedTypeWitness);
              uint64_t v96 = v120;
              ((void (*)(char *, uint64_t))v120)(v93, AssociatedTypeWitness);
              uint64_t v97 = &v92[*(int *)(TupleTypeMetadata2 + 48)];
              v95(v92, v89, AssociatedTypeWitness);
              v95(v97, v131, AssociatedTypeWitness);
              uint64_t v98 = v117;
              v95((char *)(v94 + *(int *)(v117 + 36)), v97, AssociatedTypeWitness);
              ((void (*)(char *, uint64_t))v96)(v92, AssociatedTypeWitness);
              uint64_t v99 = v119;
              v103(v119, v94, v98);
              uint64_t v100 = v122;
              MutableCollection.rotate(in:shiftingToStart:)(v99, v122, v130, v123, v106);
              v102(v99, v98);
              ((void (*)(char *, uint64_t))v96)(v111, AssociatedTypeWitness);
              ((void (*)(char *, uint64_t))v96)(v118, AssociatedTypeWitness);
              return ((uint64_t (*)(char *, uint64_t))v96)(v100, AssociatedTypeWitness);
            }
LABEL_28:
            __break(1u);
            return result;
          }
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = v128(v129, v37.n128_f64[0]);
  if (!v8)
  {
    if (result)
    {
      uint64_t v38 = *(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v20 + 16);
      uint64_t v39 = a7;
      return v38(v39, v131, AssociatedTypeWitness, v37);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v20 + 16))(a7, &v131[*(int *)(v16 + 36)], AssociatedTypeWitness, v37);
  }
  return result;
}

uint64_t MutableCollection.rotate(in:shiftingToStart:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v108 = (void (*)(char *, uint64_t))a2;
  uint64_t v83 = a5;
  uint64_t v91 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v92 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v101 = (char *)&v82 - v10;
  uint64_t v90 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Range();
  uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v89 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v109 = (char *)&v82 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v100 = (char *)&v82 - v17;
  uint64_t v18 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v99 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v88 = (uint64_t)&v82 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v84 = (char *)&v82 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v82 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v82 - v29;
  double v32 = MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v82 - v33;
  uint64_t v35 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t, double))*((void *)v18 + 2);
  v35((char *)&v82 - v33, v108, AssociatedTypeWitness, v32);
  ((void (*)(char *, uint64_t, uint64_t))v35)(v30, a1, AssociatedTypeWitness);
  uint64_t v36 = a1 + *(int *)(v12 + 36);
  uint64_t v102 = v27;
  uint64_t v104 = v18 + 16;
  ((void (*)(char *, uint64_t, uint64_t))v35)(v27, v36, AssociatedTypeWitness);
  uint64_t v37 = *(void *)(AssociatedConformanceWitness + 8);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    uint64_t v38 = (void (*)(char *, uint64_t))*((void *)v18 + 1);
    v38(v30, AssociatedTypeWitness);
    v38(v34, AssociatedTypeWitness);
    return (*((uint64_t (**)(uint64_t, char *, uint64_t))v18 + 4))(v83, v102, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v108 = (void (*)(char *, uint64_t))v18;
    uint64_t v40 = v83;
    uint64_t v98 = v30;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t v41 = (uint64_t (**)(uint64_t, char *, uint64_t))v108;
      uint64_t v42 = (void (*)(char *, uint64_t))*((void *)v108 + 1);
      v42(v102, AssociatedTypeWitness);
      v42(v34, AssociatedTypeWitness);
      return v41[4](v40, v98, AssociatedTypeWitness);
    }
    else
    {
      uint64_t v97 = v12;
      ((void (*)(char *, char *, uint64_t))v35)(v84, v102, AssociatedTypeWitness);
      uint64_t v43 = v98;
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if (result)
      {
        uint64_t v44 = (void (**)(char *, char *, uint64_t))((char *)v108 + 32);
        uint64_t v107 = (void (**)(char *, uint64_t))((char *)v108 + 8);
        uint64_t v95 = (void (**)(char *, char *, uint64_t))((char *)v105 + 32);
        uint64_t v85 = (void (**)(uint64_t, uint64_t))((char *)v105 + 8);
        uint64_t v94 = AssociatedConformanceWitness;
        uint64_t v96 = v34;
        CFTimeInterval v103 = (void (*)(char *, uint64_t, uint64_t))v35;
        uint64_t v87 = v37;
        uint64_t v86 = (void (**)(char *, char *, uint64_t))((char *)v108 + 32);
        while (1)
        {
          uint64_t v45 = TupleTypeMetadata2;
          uint64_t v46 = v101;
          uint64_t v47 = &v101[*(int *)(TupleTypeMetadata2 + 48)];
          ((void (*)(char *, char *, uint64_t))v35)(v101, v43, AssociatedTypeWitness);
          uint64_t v48 = v47;
          ((void (*)(char *, char *, uint64_t))v35)(v47, v34, AssociatedTypeWitness);
          uint64_t v49 = v92;
          uint64_t v50 = &v92[*(int *)(v45 + 48)];
          ((void (*)(char *, char *, uint64_t))v35)(v92, v46, AssociatedTypeWitness);
          ((void (*)(char *, char *, uint64_t))v35)(v50, v48, AssociatedTypeWitness);
          uint64_t v51 = *v44;
          (*v44)(v109, v49, AssociatedTypeWitness);
          uint64_t v52 = *v107;
          (*v107)(v50, AssociatedTypeWitness);
          __n128 v53 = &v49[*(int *)(TupleTypeMetadata2 + 48)];
          v51(v49, v46, AssociatedTypeWitness);
          v51(v53, v48, AssociatedTypeWitness);
          uint64_t v54 = v97;
          uint64_t v55 = &v109[*(int *)(v97 + 36)];
          uint64_t v105 = v51;
          v51(v55, v53, AssociatedTypeWitness);
          uint64_t v108 = v52;
          v52(v49, AssociatedTypeWitness);
          uint64_t v56 = TupleTypeMetadata2;
          uint64_t v57 = v101;
          uint64_t v58 = v54;
          uint64_t v59 = v96;
          uint64_t v93 = *v95;
          v93(v100, v109, v58);
          uint64_t v60 = v102;
          uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
          if ((result & 1) == 0) {
            break;
          }
          uint64_t v61 = &v57[*(int *)(v56 + 48)];
          ((void (*)(char *, char *, uint64_t))v35)(v57, v59, AssociatedTypeWitness);
          ((void (*)(char *, char *, uint64_t))v35)(v61, v60, AssociatedTypeWitness);
          uint64_t v62 = &v49[*(int *)(v56 + 48)];
          ((void (*)(char *, char *, uint64_t))v35)(v49, v57, AssociatedTypeWitness);
          ((void (*)(char *, char *, uint64_t))v35)(v62, v61, AssociatedTypeWitness);
          uint64_t v63 = v89;
          uint64_t v64 = v105;
          v105(v89, v49, AssociatedTypeWitness);
          uint64_t v65 = v108;
          v108(v62, AssociatedTypeWitness);
          uint64_t v66 = &v49[*(int *)(v56 + 48)];
          v64(v49, v57, AssociatedTypeWitness);
          v64(v66, v61, AssociatedTypeWitness);
          uint64_t v67 = v97;
          v64(&v63[*(int *)(v97 + 36)], v66, AssociatedTypeWitness);
          v65(v49, AssociatedTypeWitness);
          uint64_t v68 = (uint64_t)v109;
          uint64_t v69 = (uint64_t)v100;
          v93(v109, v63, v67);
          uint64_t v70 = v88;
          MutableCollection._swapNonemptySubrangePrefixes(_:_:)(v88, (uint64_t)v99, v69, v68, v90, v91);
          uint64_t v71 = *v85;
          (*v85)(v68, v67);
          uint64_t v72 = v69;
          uint64_t v73 = v102;
          v71(v72, v67);
          if (dispatch thunk of static Equatable.== infix(_:_:)())
          {
            uint64_t v74 = v108;
            if (dispatch thunk of static Equatable.== infix(_:_:)())
            {
              uint64_t v75 = v84;
              v74(v84, AssociatedTypeWitness);
              v103(v75, v70, AssociatedTypeWitness);
            }
            uint64_t v76 = v96;
            char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v78 = v98;
            v74(v98, AssociatedTypeWitness);
            if (v77)
            {
              uint64_t v81 = v108;
              v108(v99, AssociatedTypeWitness);
              v81((char *)v70, AssociatedTypeWitness);
              v81(v73, AssociatedTypeWitness);
              v81(v76, AssociatedTypeWitness);
              return ((uint64_t (*)(uint64_t, char *, uint64_t))v105)(v83, v84, AssociatedTypeWitness);
            }
          }
          else
          {
            uint64_t v78 = v98;
            v108(v98, AssociatedTypeWitness);
            uint64_t v76 = v96;
          }
          v103(v78, v70, AssociatedTypeWitness);
          char v79 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v80 = v108;
          v108((char *)v70, AssociatedTypeWitness);
          if (v79)
          {
            v80(v76, AssociatedTypeWitness);
            uint64_t v44 = v86;
            v105(v76, v99, AssociatedTypeWitness);
          }
          else
          {
            v80(v99, AssociatedTypeWitness);
            uint64_t v44 = v86;
          }
          uint64_t v43 = v98;
          uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
          uint64_t v34 = v76;
          uint64_t v35 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t, double))v103;
          if ((result & 1) == 0) {
            goto LABEL_18;
          }
        }
      }
      else
      {
LABEL_18:
        __break(1u);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t MutableCollection._swapNonemptySubrangePrefixes(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a4;
  uint64_t v39 = a2;
  uint64_t v28 = a1;
  uint64_t v37 = a6;
  uint64_t v8 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = v8;
  uint64_t v36 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Range();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v27 - v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16);
  v22((char *)&v27 - v20, a3, AssociatedTypeWitness, v19);
  double v32 = (void (*)(char *, uint64_t, uint64_t))v22;
  uint64_t v33 = v14 + 16;
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v39, v38, AssociatedTypeWitness);
  uint64_t v31 = a3 + *(int *)(v10 + 36);
  uint64_t v27 = v14;
  uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v29 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v30 = (void (**)(char *, uint64_t))(v11 + 8);
  while (1)
  {
    dispatch thunk of MutableCollection.swapAt(_:_:)();
    dispatch thunk of Collection.formIndex(after:)();
    dispatch thunk of Collection.formIndex(after:)();
    v32(v17, v31, AssociatedTypeWitness);
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*v29)(v17, AssociatedTypeWitness);
    (*v23)(v13, v38, v10);
    if (v24) {
      break;
    }
    char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*v30)(v13, v10);
    if (v25) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v28, v21, AssociatedTypeWitness);
    }
  }
  (*v30)(v13, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v28, v21, AssociatedTypeWitness);
}

uint64_t specialized Slice.subscript.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v37 = a1;
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  uint64_t v4 = v3 - 8;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v30 - v8;
  type metadata accessor for Range<IndexSet.Index>();
  uint64_t v36 = v10 - 8;
  MEMORY[0x270FA5388](v10 - 8);
  double v32 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v35 = (uint64_t)&v30 - v13;
  type metadata accessor for Slice<IndexSet>();
  uint64_t v33 = v1;
  uint64_t v34 = v14;
  uint64_t v15 = v1 + *(int *)(v14 + 36);
  uint64_t v16 = &v9[*(int *)(v4 + 56)];
  uint64_t v17 = type metadata accessor for IndexSet.Index();
  uint64_t v18 = *(void **)(v17 - 8);
  double v19 = (void (*)(char *, uint64_t, uint64_t))v18[2];
  v19(v9, v2, v17);
  uint64_t v31 = v16;
  v19(v16, v15, v17);
  uint64_t v20 = &v6[*(int *)(v4 + 56)];
  v19(v6, (uint64_t)v9, v17);
  v19(v20, (uint64_t)v16, v17);
  uint64_t v21 = (void (*)(char *, char *, uint64_t))v18[4];
  uint64_t v22 = (uint64_t)v32;
  v21(v32, v6, v17);
  uint64_t v23 = (void (*)(char *, uint64_t))v18[1];
  v23(v20, v17);
  char v24 = &v6[*(int *)(v4 + 56)];
  v21(v6, v9, v17);
  v21(v24, v31, v17);
  v21((char *)(v22 + *(int *)(v36 + 44)), v24, v17);
  v23(v6, v17);
  uint64_t v25 = v35;
  outlined init with take of Range<IndexSet.Index>(v22, v35);
  type metadata accessor for IndexSet();
  _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
  dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
  outlined destroy of Slice<IndexSet>(v25, (uint64_t (*)(void))type metadata accessor for Range<IndexSet.Index>);
  uint64_t v26 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v28 = *v27;
  v26(v38, 0);
  return v28;
}

void type metadata accessor for AnimatorState<_AnyAnimatableData>.Fork()
{
  if (!lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork)
  {
    lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
    unint64_t v0 = type metadata accessor for AnimatorState.Fork();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork);
    }
  }
}

uint64_t specialized Slice.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  type metadata accessor for (lower: IndexSet.Index, upper: IndexSet.Index)();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v34 - v9;
  type metadata accessor for Range<IndexSet.Index>();
  uint64_t v39 = v11 - 8;
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v35 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v38 = (uint64_t)&v34 - v14;
  type metadata accessor for Slice<IndexSet>();
  uint64_t v36 = v2;
  uint64_t v37 = v15;
  uint64_t v16 = v2 + *(int *)(v15 + 36);
  uint64_t v17 = &v10[*(int *)(v5 + 56)];
  uint64_t v18 = type metadata accessor for IndexSet.Index();
  double v19 = *(void **)(v18 - 8);
  uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v19[2];
  v20(v10, v3, v18);
  uint64_t v34 = v17;
  v20(v17, v16, v18);
  uint64_t v21 = &v7[*(int *)(v5 + 56)];
  v20(v7, (uint64_t)v10, v18);
  v20(v21, (uint64_t)v17, v18);
  uint64_t v22 = (void (*)(char *, char *, uint64_t))v19[4];
  uint64_t v23 = (uint64_t)v35;
  v22(v35, v7, v18);
  char v24 = (void (*)(char *, uint64_t))v19[1];
  v24(v21, v18);
  uint64_t v25 = &v7[*(int *)(v5 + 56)];
  v22(v7, v10, v18);
  v22(v25, v34, v18);
  uint64_t v26 = v39;
  v22((char *)(v23 + *(int *)(v39 + 44)), v25, v18);
  v24(v7, v18);
  uint64_t v27 = v38;
  outlined init with take of Range<IndexSet.Index>(v23, v38);
  uint64_t v28 = v37;
  uint64_t v29 = v36 + *(int *)(v37 + 40);
  uint64_t v30 = type metadata accessor for IndexSet();
  _s10Foundation8IndexSetVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
  uint64_t v31 = v40;
  dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
  outlined destroy of Slice<IndexSet>(v27, (uint64_t (*)(void))type metadata accessor for Range<IndexSet.Index>);
  double v32 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(&v41[*(int *)(v28 + 40)], v29, v30);
  outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(v31, v27, (uint64_t (*)(void))type metadata accessor for Range<IndexSet.Index>);
  v22(v32, (char *)v27, v18);
  return ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(&v32[*(int *)(v28 + 36)], v27 + *(int *)(v26 + 44), v18);
}

uint64_t outlined assign with take of AnimatorState<_AnyAnimatableData>.Fork(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in RangeReplaceableCollection<>.remove(atOffsets:)(uint64_t a1)
{
  return partial apply for closure #1 in MutableCollection.move(fromOffsets:toOffset:)(a1) & 1;
}

uint64_t _ViewInputs.needsAccessibility.getter()
{
  return (*(unsigned __int8 *)(v0 + 37) >> 4) & 1;
}

uint64_t _GraphInputs.needsAccessibility.getter()
{
  return (*(unsigned __int8 *)(v0 + 37) >> 4) & 1;
}

uint64_t _GraphInputs.needsAccessibility.setter(uint64_t result)
{
  if (result) {
    int v2 = 4096;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFEFFF | v2;
  return result;
}

unsigned char *(*_GraphInputs.needsAccessibility.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 8) = (*(_DWORD *)(v1 + 36) & 0x1000) != 0;
  return _GraphInputs.needsAccessibility.modify;
}

unsigned char *_GraphInputs.needsAccessibility.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 4096;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFEFFF | v1;
  return result;
}

uint64_t _ViewInputs.needsAccessibility.setter(uint64_t result)
{
  if (result) {
    int v2 = 4096;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFEFFF | v2;
  return result;
}

unsigned char *(*_ViewInputs.needsAccessibility.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 8) = (*(_DWORD *)(v1 + 36) & 0x1000) != 0;
  return _GraphInputs.needsAccessibility.modify;
}

id NSObject.rotorOwnerElement.getter()
{
  return v0;
}

BOOL static AccessibilityLayoutRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AccessibilityLayoutRole.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AccessibilityLayoutRole.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Locale.bcp47LanguageCode.getter()
{
  uint64_t v0 = type metadata accessor for Locale.Language();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v19 - v5;
  type metadata accessor for Locale.LanguageCode?(0, &lazy cache variable for type metadata for Locale.LanguageCode?, MEMORY[0x263F07548]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v19 - v8;
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v6, v0);
  uint64_t v11 = type metadata accessor for Locale.LanguageCode();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
  {
    outlined destroy of Locale.LanguageCode?((uint64_t)v9, &lazy cache variable for type metadata for Locale.LanguageCode?, MEMORY[0x263F07548]);
    return 0;
  }
  uint64_t v13 = MEMORY[0x24C521810]();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
  swift_bridgeObjectRelease();
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16) {
    return 0;
  }
  Locale.language.getter();
  uint64_t v17 = Locale.Language.maximalIdentifier.getter();
  v10(v3, v0);
  return v17;
}

uint64_t specialized static AccessibilityCore.description(for:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  type metadata accessor for Locale.LanguageCode?(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v30 - v7;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v16 = (void *)MEMORY[0x24C522820](a1, a2, v11);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v14, (uint64_t)v13);
  }
  else
  {
    uint64_t v17 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v17, (uint64_t)v13);
  }
  swift_release_n();
  swift_release_n();
  uint64_t v18 = Locale.identifier.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v21 = (void *)MEMORY[0x24C522820](v18, v20);
  swift_bridgeObjectRelease();
  id v22 = soft_AXSSAccessibilityDescriptionForSymbolName(v16, v21);

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    v30[2] = v23;
    v30[3] = v25;
    if (v15)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v14, (uint64_t)v8);
    }
    else
    {
      uint64_t v28 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v28, (uint64_t)v8);
    }
    swift_release_n();
    swift_release_n();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v27 = StringProtocol.capitalized(with:)();
    outlined destroy of Locale.LanguageCode?((uint64_t)v8, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v27;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in WithinAccessibilityRotor()
{
  return &protocol witness table for WithinAccessibilityRotor;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLayoutRole and conformance AccessibilityLayoutRole()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLayoutRole and conformance AccessibilityLayoutRole;
  if (!lazy protocol witness table cache variable for type AccessibilityLayoutRole and conformance AccessibilityLayoutRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLayoutRole and conformance AccessibilityLayoutRole);
  }
  return result;
}

uint64_t sub_245FA458C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x1000) != 0;
  return result;
}

unsigned char *sub_245FA459C(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 4096;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFEFFF | v2;
  return result;
}

uint64_t sub_245FA45C0@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x1000) != 0;
  return result;
}

unsigned char *sub_245FA45D0(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 4096;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFEFFF | v2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCore()
{
  return &type metadata for AccessibilityCore;
}

ValueMetadata *type metadata accessor for WithinAccessibilityRotor()
{
  return &type metadata for WithinAccessibilityRotor;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityLayoutRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    _DWORD *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245FA46E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          _DWORD *result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for Locale.LanguageCode?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of Locale.LanguageCode?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for Locale.LanguageCode?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v15 = *a1;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_5;
    }
    return static MainActor.assumeIsolated<A>(_:file:line:)(a4, a5, a6, a7, a8, a9, a10);
  }
  if (static Semantics.forced >= v15) {
    return static MainActor.assumeIsolated<A>(_:file:line:)(a4, a5, a6, a7, a8, a9, a10);
  }
LABEL_5:
  if (a3)
  {
    v30[0] = a2;
    v30[1] = a3;
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    uint64_t v18 = a2;
    unint64_t v17 = a3;
    if (pthread_main_np()) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v17 = 0xE000000000000000;
    if (pthread_main_np()) {
      goto LABEL_15;
    }
  }
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  uint64_t v21 = static Log.runtimeIssuesLog;
  os_log_type_t v22 = v20;
  if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v20))
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v30[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain();
    v30[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245728000, v21, v22, "%s This warning will become a runtime crash in a future version of SwiftUI.", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v24, -1, -1);
    MEMORY[0x24C527CC0](v23, -1, -1);
    goto LABEL_16;
  }
LABEL_15:
  swift_bridgeObjectRelease();
LABEL_16:
  unint64_t v25 = (void *)swift_allocObject();
  v25[2] = a10;
  v25[3] = a4;
  v25[4] = a5;
  partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
  if (v29) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t static MainActor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    goto LABEL_6;
  }
  double v11 = (void *)swift_allocObject();
  _OWORD v11[2] = a7;
  v11[3] = a1;
  v11[4] = a2;
  thunk for @callee_guaranteed () -> (@out A, @error @owned Error)partial apply();
  if (v7) {
    return swift_release();
  }
  int isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v14._object = (void *)0x80000002462239F0;
    v14._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_245FA4C58()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_245FA4C90()
{
  return swift_deallocObject();
}

uint64_t thunk for @callee_guaranteed () -> (@out A, @error @owned Error)partial apply()
{
  return partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
}

uint64_t one-time initialization function for colorCache()
{
  type metadata accessor for AtomicBuffer<[ColorCacheKey : NamedColorInfo]>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  colorCache = (_UNKNOWN *)result;
  return result;
}

void ColorCacheKey.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  int v3 = (void *)*((void *)v0 + 3);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    id v4 = v3;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int ColorCacheKey.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  id v4 = (void *)*((void *)v0 + 3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
    Hasher._combine(_:)(1u);
    id v5 = v4;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ColorCacheKey()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  id v4 = (void *)*((void *)v0 + 3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
    Hasher._combine(_:)(1u);
    id v5 = v4;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void *Color.init(_:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ColorBox<Color.NamedColor>();
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void type metadata accessor for ColorBox<Color.NamedColor>()
{
  if (!lazy cache variable for type metadata for ColorBox<Color.NamedColor>)
  {
    lazy protocol witness table accessor for type Color.NamedColor and conformance Color.NamedColor();
    unint64_t v0 = type metadata accessor for ColorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.NamedColor>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Color.NamedColor and conformance Color.NamedColor()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor;
  if (!lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor;
  if (!lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor;
  if (!lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.NamedColor and conformance Color.NamedColor);
  }
  return result;
}

id Color.NamedColor.resolveCGColor(in:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v54 = *a1;
  uint64_t v55 = v7;
  swift_retain();
  swift_retain();
  CatalogKey.init(_:)(&v54, v56);
  int v8 = v56[0];
  int v9 = v56[1];
  if (v7)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, (char *)&v54);
    swift_release_n();
    swift_release_n();
    int v10 = v54;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DisplayGamutKey>();
    BloomFilter.init(hashValue:)(v11);
    uint64_t v12 = v54;
    swift_retain_n();
    swift_retain();
    uint64_t v13 = specialized find1<A>(_:key:filter:)(v6, v12);
    if (v13) {
      int v10 = *(unsigned __int8 *)(v13 + 72);
    }
    else {
      int v10 = 0;
    }
    swift_release();
    swift_release_n();
  }
  uint64_t v14 = one-time initialization token for colorCache;
  swift_bridgeObjectRetain();
  uint64_t v52 = a4;
  id v15 = a4;
  if (v14 != -1) {
    swift_once();
  }
  Swift::String v16 = colorCache;
  unint64_t v17 = (os_unfair_lock_s *)((char *)colorCache + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  id v18 = v15;
  os_unfair_lock_lock(v17);
  uint64_t v19 = v16[3];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v17);
  swift_release();
  if (!*(void *)(v19 + 16)
    || (!v9 ? (int v20 = 0) : (int v20 = 256),
        (int v21 = v20 | v8, !v10) ? (v22 = 0) : (v22 = 0x10000),
        unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21 | v22, a2, a3, v52),
        (v24 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v29 = objc_msgSend(self, sel_defaultUICatalogForBundle_, v18);
    if (v29)
    {
      uint64_t v30 = v29;
      swift_retain();
      swift_retain_n();
      if (v7)
      {
        uint64_t v31 = swift_retain();
        uint64_t v49 = specialized PropertyList.Tracker.value<A>(_:for:)(v31);
        swift_release();
        swift_release();
        swift_retain_n();
        swift_retain_n();
        uint64_t v32 = specialized PropertyList.Tracker.value<A>(_:for:)(v6);
      }
      else
      {
        uint64_t v33 = swift_retain_n();
        uint64_t v49 = specialized closure #1 in PropertyList.subscript.getter(v33, (uint64_t)v53);
        swift_release();
        swift_release_n();
        swift_retain_n();
        swift_retain();
        uint64_t v32 = specialized closure #1 in PropertyList.subscript.getter(v6);
        swift_bridgeObjectRetain();
      }
      swift_release_n();
      swift_release_n();
      if (v9) {
        int v34 = 256;
      }
      else {
        int v34 = 0;
      }
      int v35 = v34 | v8;
      if (v10) {
        int v36 = 0x10000;
      }
      else {
        int v36 = 0;
      }
      unsigned int v37 = v35 | v36;
      int v48 = v35 | v36;
      swift_bridgeObjectRetain_n();
      id v38 = v18;
      id v39 = v30;
      id v40 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v35, v32, (uint64_t)v39, v39, a2, a3, v52, v37, a2, a3, v52, v49);
      swift_bridgeObjectRelease();
      uint64_t v50 = v39;

      swift_bridgeObjectRelease_n();
      uint64_t v41 = colorCache;
      uint64_t v42 = (os_unfair_lock_s *)((char *)colorCache + 16);
      id v47 = v40;
      swift_bridgeObjectRetain();
      id v43 = v38;
      swift_retain();
      os_unfair_lock_lock(v42);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v54 = v41[3];
      v41[3] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v40, v48, a2, a3, v52, isUniquelyReferenced_nonNull_native);
      v41[3] = v54;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v42);
      swift_release();
      if (v40)
      {
        uint64_t v54 = v6;
        uint64_t v55 = v7;
        id v45 = v47;
        id v28 = CUINamedColor.effectiveCGColor(in:)(&v54);

        swift_bridgeObjectRelease();
        return v28;
      }

      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_22:

    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v25 = *(void **)(*(void *)(v19 + 56) + 8 * v23);
  id v26 = v25;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v25) {
    goto LABEL_22;
  }
  uint64_t v54 = v6;
  uint64_t v55 = v7;
  id v27 = v26;
  id v28 = CUINamedColor.effectiveCGColor(in:)(&v54);

  swift_bridgeObjectRelease();
  return v28;
}

id CUINamedColor.effectiveCGColor(in:)(uint64_t *a1)
{
  Swift::UInt v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (objc_msgSend(v2, sel_substituteWithSystemColor))
  {
    if (v3)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
      uint64_t v7 = v6;
      swift_release_n();
      swift_release_n();
      if (v5)
      {
LABEL_4:
        v11[0] = v4;
        v11[1] = v3;
        return (id)(*(uint64_t (**)(void *, void *, uint64_t, uint64_t))(v7 + 8))(v2, v11, v5, v7);
      }
    }
    else
    {
      uint64_t v9 = swift_retain_n();
      uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v12);
      uint64_t v7 = v10;
      swift_release_n();
      if (v5) {
        goto LABEL_4;
      }
    }
  }
  return objc_msgSend(v2, sel_cgColor);
}

double Color.NamedColor.resolve(in:)(long long *a1, uint64_t a2, void *a3, void *a4)
{
  long long v24 = *a1;
  id v7 = Color.NamedColor.resolveCGColor(in:)((uint64_t *)&v24, a2, (uint64_t)a3, a4);
  if (v7)
  {
    LODWORD(result) = specialized Color.Resolved.init(failableCGColor:)(v7);
    if (v9) {
      *(float *)&double result = 0.0;
    }
  }
  else
  {
    if (a4)
    {
      id v10 = objc_msgSend(a4, sel_bundlePath);
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
    }
    else
    {
      *(void *)&long long v24 = 0;
      *((void *)&v24 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v24, "main bundle (");
      HIWORD(v24) = -4864;
      id v14 = objc_msgSend(self, sel_mainBundle);
      id v15 = objc_msgSend(v14, sel_bundlePath);

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v18 = v17;

      v19._countAndFlagsBits = v16;
      v19._object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 41;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      uint64_t v13 = (void *)*((void *)&v24 + 1);
      uint64_t v11 = v24;
    }
    *(void *)&long long v24 = 0;
    *((void *)&v24 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(void *)&long long v24 = 0xD000000000000010;
    *((void *)&v24 + 1) = 0x8000000246223A70;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = a2;
    v21._object = a3;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0xD00000000000001DLL;
    v22._object = (void *)0x8000000246221200;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v11;
    v23._object = v13;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    specialized static Log.externalWarning(_:)(v24, *((unint64_t *)&v24 + 1));
    swift_bridgeObjectRelease();
    return 0.0;
  }
  return result;
}

double protocol witness for ColorProvider.resolve(in:) in conformance Color.NamedColor(long long *a1)
{
  return Color.NamedColor.resolve(in:)(a1, *(void *)v1, *(void **)(v1 + 8), *(void **)(v1 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.NamedColor()
{
  uint64_t v1 = *(void **)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.NamedColor()
{
  uint64_t v1 = *(void **)(v0 + 16);
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.NamedColor()
{
  uint64_t v1 = *(void **)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color.NamedColor(uint64_t a1, uint64_t a2)
{
  return specialized static Color.NamedColor.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void **)(a2 + 16));
}

uint64_t static Color._mainNamedBundle.getter()
{
  return 0;
}

void *Color.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NamedResource();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ResourceReference();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  id v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24C521D50](v8);
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v10, v6) == *MEMORY[0x263F04948])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v2);
    uint64_t v11 = NamedResource.name.getter();
    uint64_t v13 = v12;
    uint64_t v14 = NamedResource.bundle.getter();
    uint64_t v15 = type metadata accessor for ColorResource();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    type metadata accessor for ColorBox<Color.NamedColor>();
    double result = (void *)swift_allocObject();
    result[2] = v11;
    result[3] = v13;
    result[4] = v14;
  }
  else
  {
    double result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Color.NamedColor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for Color.NamedColor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[2];
  id v5 = (void *)a2[2];
  a1[2] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for Color.NamedColor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

void *type metadata accessor for Color.NamedColor()
{
  return &unk_26FA7C360;
}

unint64_t instantiation function for generic protocol witness table for Color.NamedColor(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.NamedColor and conformance Color.NamedColor();
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = result;
  return result;
}

uint64_t specialized static ColorCacheKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0 && ((a1[2] ^ a2[2]) & 1) == 0)
  {
    if ((v4 = (void *)*((void *)a1 + 3), id v5 = (void *)*((void *)a2 + 3), *((void *)a1 + 1) == *((void *)a2 + 1))
      && *((void *)a1 + 2) == *((void *)a2 + 2)
      || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
    {
      if (v4)
      {
        if (v5)
        {
          type metadata accessor for NSBundle();
          id v7 = v5;
          id v8 = v4;
          char v9 = static NSObject.== infix(_:_:)();

          if (v9) {
            return 1;
          }
        }
      }
      else if (!v5)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t specialized static Color.NamedColor.== infix(_:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1 == a4 && a2 == a5 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
  {
    if (a3)
    {
      if (a6)
      {
        type metadata accessor for NSBundle();
        id v10 = a6;
        id v11 = a3;
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          return 1;
        }
      }
    }
    else if (!a6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DisplayGamutKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>);
    }
  }
}

unint64_t specialized static Color.Resolved.named(_:bundle:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (one-time initialization token for namedTypes != -1) {
    swift_once();
  }
  uint64_t v9 = static SystemColorType.namedTypes;
  if (*(void *)(static SystemColorType.namedTypes + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v11)
    {
      char v12 = *(unsigned char *)(*(void *)(v9 + 56) + v10);
      swift_bridgeObjectRelease();
      EnvironmentValues.systemColorDefinition.getter();
      char v23 = v12;
      uint64_t v24 = v8;
      uint64_t v25 = v7;
      *(float *)&unsigned int v14 = (*(float (**)(char *, uint64_t *))(v13 + 8))(&v23, &v24);
      return v14 | ((unint64_t)v15 << 32);
    }
    swift_bridgeObjectRelease();
  }
  if (!a3) {
    return 0;
  }
  uint64_t v24 = v8;
  uint64_t v25 = v7;
  id v17 = a3;
  swift_bridgeObjectRetain();
  id v18 = Color.NamedColor.resolveCGColor(in:)(&v24, a1, a2, a3);
  swift_bridgeObjectRelease();
  if (!v18)
  {

    return 0;
  }
  id v19 = v18;
  unint64_t v20 = specialized Color.Resolved.init(failableCGColor:)(v19);
  char v22 = v21;

  if (v22) {
    return 0;
  }
  else {
    return v20;
  }
}

ValueMetadata *type metadata accessor for NamedColorInfo()
{
  return &type metadata for NamedColorInfo;
}

void destroy for ColorCacheKey(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for ColorCacheKey(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for ColorCacheKey(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for ColorCacheKey(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for ColorCacheKey()
{
  return &type metadata for ColorCacheKey;
}

ValueMetadata *type metadata accessor for ShakeVerticalTextEffect()
{
  return &type metadata for ShakeVerticalTextEffect;
}

unint64_t lazy protocol witness table accessor for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState()
{
  unint64_t result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeVerticalTextEffect.LayoutState and conformance ShakeVerticalTextEffect.LayoutState);
  }
  return result;
}

id closure #1 in ShakeVerticalTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeVerticalTextEffect>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<WeightDeltaModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier, (uint64_t)&type metadata for WeightDeltaModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2461FDAD0;
  *(void *)(v4 + 32) = 0x408F400000000000;
  id v5 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_retain();
  MEMORY[0x24C522D60](v6);
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  return v5;
}

uint64_t closure #2 in ShakeVerticalTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a2, a3, 1, a2, v28, 0.0);
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(void *)(v10 + 32) = v6;
  *(void *)(v10 + 40) = v7;
  *(void *)(v10 + 4++*(_DWORD *)(result + 8) = v8;
  *(void *)(v10 + 56) = v9;
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 80) = v11;
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(a2 + 32);
  *(void *)(v10 + 112) = *(void *)(a2 + 48);
  uint64_t v12 = swift_allocObject();
  __n128 v13 = v28[3];
  *(__n128 *)(v12 + 4++*(_DWORD *)(result + 8) = v28[2];
  *(__n128 *)(v12 + 64) = v13;
  *(__n128 *)(v12 + 80) = v28[4];
  uint64_t v14 = v29;
  __n128 v15 = v28[1];
  *(__n128 *)(v12 + 16) = v28[0];
  *(__n128 *)(v12 + 32) = v15;
  *(void *)(v12 + 96) = v14;
  *(void *)(v12 + 104) = partial apply for closure #2 in closure #2 in ShakeVerticalTextEffect.configuration(_:);
  *(void *)(v12 + 112) = v10;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2461B9DC0;
  *(void *)(v16 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v17 = v16 + 32;
  *(void *)(v16 + 40) = v12;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v16;
  int64_t v19 = *(void *)(v16 + 16);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  outlined retain of LinearGradient((uint64_t)&v30);
  outlined retain of LinearGradient((uint64_t)&v31);
  outlined retain of LinearGradient((uint64_t)&v32);
  outlined retain of LinearGradient((uint64_t)&v33);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 1, MEMORY[0x263F8EE78]);
  char v21 = v20;
  if (!*(void *)(v16 + 16))
  {
    if (!v19) {
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v22 = v20[2];
  if ((v20[3] >> 1) - v22 < v19)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v23 = (unint64_t)&v20[2 * v22 + 4];
  if (v17 < v23 + 16 * v19 && v23 < v17 + 16 * v19) {
    goto LABEL_13;
  }
  swift_arrayInitWithCopy();
  if (!v19)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v28);
    return (uint64_t)v21;
  }
  uint64_t v24 = v21[2];
  BOOL v25 = __OFADD__(v24, v19);
  uint64_t v26 = v24 + v19;
  if (!v25)
  {
    v21[2] = v26;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #2 in ShakeVerticalTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  Swift::UInt64 v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 32);
  type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeVerticalTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  uint64_t v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v13);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, isUniquelyReferenced_nonNull_native, 0.0);
  *a1 = v14[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v13);
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 1;
  uint64_t v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v14);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v14);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v10, 1.0);
  *a1 = v12;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v14);
}

void closure #2 in closure #2 in ShakeVerticalTextEffect.configuration(_:)(unint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v5 = a2[8];
  double v6 = a2[5] - a2[4];
  if (v6 >= 0.0)
  {
    double v8 = v6 / v5;
    double v7 = 0.0;
    if (v8 < 0.0) {
      goto LABEL_8;
    }
  }
  else
  {
    double v7 = 0.0;
    double v8 = 0.0 / v5;
    if (v8 < 0.0) {
      goto LABEL_8;
    }
  }
  if (v8 <= 1.0) {
    double v7 = v8;
  }
  else {
    double v7 = 1.0;
  }
LABEL_8:
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (*(void *)(*(void *)(a3 + 16) + 16) > a1)
  {
    uint64_t v9 = *(void *)(a3 + 32);
    if (*(void *)(v9 + 16) <= a1) {
      goto LABEL_27;
    }
    char v10 = (double *)(v9 + 40 * a1);
    double v11 = v10[6];
    double v12 = v10[7];
    double v13 = v10[8];
    uint64_t v14 = *(void *)(a4 + 24);
    uint64_t v38 = v14;
    CFIndex v16 = *(void *)(v14 + 16);
    uint64_t v15 = *(void *)(v14 + 24);
    swift_retain_n();
    double v17 = 0.0;
    double v18 = 0.0;
    if (v16 == v15)
    {
LABEL_21:
      outlined release of ViewTransform((uint64_t)&v38);
      outlined release of ViewTransform((uint64_t)&v38);
      if (v7 < 1.0)
      {
        double v28 = sin(v7 * -6.0 * 3.0);
        double v17 = pow(2.71828183, -v7) * v28;
      }
      long double v29 = pow(v7, 0.8);
      long double v30 = 1.0 - (v29 + -1.0) * (v29 + -1.0) + 1.0 - (v29 + -1.0) * (v29 + -1.0) + -1.0;
      v39[0] = pow(1.0 - v30 * v30, 0.4);
      v39[1] = 0;
      *(double *)&v39[2] = v18 / 3.0 * v17;
      memset(&v39[3], 0, 24);
      __asm { FMOV            V0.2D, #1.0 }
      long long v40 = _Q0;
      uint64_t v41 = 0x3FF0000000000000;
      char v42 = 0;
      v36[0] = v11;
      v36[1] = v12;
      v36[2] = v13;
      Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v39, *(double *)&a1, v36, (uint64_t)v37);
      Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v37, 0, 0, 0, 1);
      return;
    }
    while (1)
    {
      unint64_t v20 = *(void **)(v14 + 32);
      uint64_t v19 = *(void *)(v14 + 40);
      if (*(unsigned char *)(v14 + 48))
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v14 + 32), *(void *)(v14 + 40), 1);
        id v21 = (id)_NSTextLineFragmentGetCTLine(v20);
        if (!v21) {
          goto LABEL_28;
        }
        id v22 = v21;
        outlined consume of Text.Layout.Line.Line(v20, v19, 1);
        unint64_t v20 = v22;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v14 + 32), *(void *)(v14 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v20, v19, 0);

        swift_release();
      }
      if (v16 < *(void *)(v14 + 16) || v16 >= *(void *)(v14 + 24)) {
        break;
      }
      CFIndex v23 = v16 + 1;
      swift_retain();
      uint64_t v24 = v20;
      BOOL v25 = (id)_CTLineGetRunAtIndex(v24, v16);
      uint64_t v26 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      double Size = CTFontGetSize(v26);
      swift_release();

      if (v18 <= Size) {
        double v18 = Size;
      }
      CFIndex v16 = v23;
      if (v23 == *(void *)(v14 + 24)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t protocol witness for static TextEffect.staticUnitProgress.getter in conformance ShakeVerticalTextEffect()
{
  return 0x3FE3333333333333;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance ShakeVerticalTextEffect()
{
  return 0x726556656B616873;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance ShakeVerticalTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance ShakeVerticalTextEffect;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance ShakeVerticalTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeVerticalTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)v15 - v9;
  char v35 = 1;
  char v34 = 1;
  char v33 = 0;
  long long v17 = xmmword_2461D73D0;
  char v18 = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 2;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 1;
  uint64_t v29 = MEMORY[0x263F8EE78];
  char v30 = 0;
  long long v31 = xmmword_2461BD450;
  char v32 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v11 = static ShakeVerticalTextEffect.spring;
  double v12 = *(double *)&qword_268F73690;
  outlined init with copy of Text.Effect.DrawableContent<ShakeVerticalTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ShakeVerticalTextEffect(uint64_t a1)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect();
  unint64_t result = lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

void *specialized ShakeVerticalTextEffect.configuration(_:)()
{
  unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  Swift::UInt64 v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in ShakeVerticalTextEffect.configuration(_:);
  v3[6] = 0;
  *((unsigned char *)v3 + 56) = 1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #2 in ShakeVerticalTextEffect.configuration(_:);
  *(void *)(v4 + 24) = 0;
  double v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    double v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  void v5[2] = v7 + 1;
  uint64_t v8 = &v5[2 * v7];
  v8[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  _OWORD v8[5] = v4;
  return v0;
}

uint64_t sub_245FA7268()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245FA72A0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in closure #2 in ShakeVerticalTextEffect.configuration(_:)(unint64_t a1, double *a2)
{
  closure #2 in closure #2 in ShakeVerticalTextEffect.configuration(_:)(a1, a2, v2 + 16, v2 + 64);
}

uint64_t sub_245FA7314()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeVerticalTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<ShakeVerticalTextEffect>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeVerticalTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for ShakeVerticalTextEffect.LayoutState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245FA754CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShakeVerticalTextEffect.LayoutState()
{
  return &type metadata for ShakeVerticalTextEffect.LayoutState;
}

uint64_t ResolvableStringResolutionContext.init(environment:maximumWidth:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = &v19[-v9];
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a4, 1, 1, v13);
  uint64_t v14 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v15 = a4 + *(int *)(v14 + 24);
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + ++*(_DWORD *)(result + 8) = 1;
  if (v11)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v10);
  }
  else
  {
    uint64_t v16 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v10);
  }
  swift_release_n();
  swift_release_n();
  uint64_t result = outlined assign with take of Date?((uint64_t)v10, a4);
  char v18 = (uint64_t *)(a4 + *(int *)(v14 + 20));
  *char v18 = v12;
  v18[1] = v11;
  *(void *)uint64_t v15 = a2;
  *(unsigned char *)(v15 + ++*(_DWORD *)(result + 8) = a3 & 1;
  return result;
}

uint64_t static ResolvableStringAttributeRepresentation.attribute.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t ResolvableStringResolutionContext.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - v11;
  outlined init with copy of Date?(v2, (uint64_t)&v20 - v11);
  outlined init with copy of ResolvableAbsoluteDate(v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13) == 1)
  {
    uint64_t v21 = a1;
    uint64_t v16 = (uint64_t *)&v6[*(int *)(v4 + 20)];
    uint64_t v17 = *v16;
    if (v16[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v17, (uint64_t)v9);
    }
    else
    {
      uint64_t v19 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v9);
    }
    swift_release_n();
    swift_release_n();
    if (v15(v9, 1, v13) == 1)
    {
      static Date.now.getter();
      outlined destroy of ResolvableStringResolutionContext((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v9, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    }
    else
    {
      outlined destroy of ResolvableStringResolutionContext((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v21, v9, v13);
    }
    return outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v12, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  }
  else
  {
    outlined destroy of ResolvableStringResolutionContext((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v12, v13);
  }
}

uint64_t ResolvableStringResolutionContext.init(referenceDate:environment:maximumWidth:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a5, 1, 1, v11);
  uint64_t v12 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v13 = a5 + *(int *)(v12 + 24);
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + ++*(_DWORD *)(result + 8) = 1;
  uint64_t result = outlined assign with take of Date?(a1, a5);
  uint64_t v15 = (void *)(a5 + *(int *)(v12 + 20));
  *uint64_t v15 = v9;
  v15[1] = v10;
  *(void *)uint64_t v13 = a3;
  *(unsigned char *)(v13 + ++*(_DWORD *)(result + 8) = a4 & 1;
  return result;
}

uint64_t EnvironmentValues.resolvableStringReferenceDate.setter(uint64_t a1)
{
  return EnvironmentValues.resolvableStringReferenceDate.setter(a1, (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.stringResolutionDate.getter()
{
  return EnvironmentValues.stringResolutionDate.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.stringResolutionDate.setter(uint64_t a1)
{
  return EnvironmentValues.resolvableStringReferenceDate.setter(a1, (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.resolvableStringReferenceDate.setter(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of Date?(a1, (uint64_t)&v9 - v6);
  a2(v7);
  outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v7, &lazy cache variable for type metadata for Date?, v4);
  return outlined destroy of ResolvableAttributeConfiguration.Schedule?(a1, &lazy cache variable for type metadata for Date?, v4);
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableAbsoluteDate(uint64_t a1, void *a2)
{
  return ResolvableAbsoluteDate.encode(to:)(a2);
}

uint64_t static ResolvableStringAttributeRepresentation<>.encode(_:to:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(void))type metadata accessor for ResolvableAbsoluteDate, a3);
}

uint64_t ResolvableStringAttributeRepresentation.representation(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(boxed_opaque_existential_1, v3, a1);
}

uint64_t specialized ConfigurationBasedResolvableStringAttributeRepresentation.schedule.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v22 - v10;
  id v12 = ResolvableCurrentDate.provider.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    BaseDateProvider.updateConfiguration.getter((uint64_t)v8);

    _s7SwiftUI32ResolvableAttributeConfigurationO8ScheduleVWObTm_0((uint64_t)v8, (uint64_t)v11, type metadata accessor for ResolvableAttributeConfiguration);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v15 = 1;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v5, v11, v16);
      goto LABEL_10;
    case 2:
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      uint64_t v18 = *(int *)(v17 + 48);
      char v19 = v11[v18];
      uint64_t v20 = type metadata accessor for DateInterval();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v5, v11, v20);
      *((unsigned char *)v5 + v1++*(_DWORD *)(result + 8) = v19;
      goto LABEL_10;
    case 3:
      *uint64_t v5 = *(void *)v11;
      goto LABEL_10;
    case 4:
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v15, 1, v2);
    default:
      if (v11[8]) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v15, 1, v2);
      }
      *uint64_t v5 = *(void *)v11;
LABEL_10:
      type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
      swift_storeEnumTagMultiPayload();
      _s7SwiftUI32ResolvableAttributeConfigurationO8ScheduleVWObTm_0((uint64_t)v5, a1, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
      uint64_t v15 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v15, 1, v2);
  }
}

uint64_t ResolvableStringResolutionContext.referenceDate.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Date?(v1, a1);
}

uint64_t ResolvableStringResolutionContext.referenceDate.setter(uint64_t a1)
{
  return outlined assign with take of Date?(a1, v1);
}

uint64_t (*ResolvableStringResolutionContext.referenceDate.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableStringResolutionContext.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  uint64_t v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  swift_retain();

  return swift_retain();
}

uint64_t ResolvableStringResolutionContext.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)(v1 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t (*ResolvableStringResolutionContext.environment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableStringResolutionContext.maximumWidth.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 24));
}

uint64_t ResolvableStringResolutionContext.maximumWidth.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + ++*(_DWORD *)(result + 8) = a2 & 1;
  return result;
}

uint64_t (*ResolvableStringResolutionContext.maximumWidth.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EnvironmentValues.resolvableStringReferenceDate.getter()
{
  return EnvironmentValues.stringResolutionDate.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.stringResolutionDate.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

uint64_t type metadata accessor for ResolvableStringResolutionContext()
{
  uint64_t result = type metadata singleton initialization cache for ResolvableStringResolutionContext;
  if (!type metadata singleton initialization cache for ResolvableStringResolutionContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void ResolvableStringAttribute.requiredFeatures.getter(_WORD *a1@<X8>)
{
}

{
  *a1 = 0;
}

BOOL ResolvableStringAttribute.sizeVariant(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a1, v3);
  return v4 == 0;
}

uint64_t static ResolvableStringAttribute<>.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v9);
  a4[3] = a2;
  a4[4] = a3;
  __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t result = dispatch thunk of Decodable.init(from:)();
  if (v4) {
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a4);
  }
  return result;
}

BOOL ResolvableStringAttribute.isDynamic.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 48))(a1, a2, v7);
  BOOL v10 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v10;
}

uint64_t specialized ResolvableStringAttribute.entries(from:mode:)(uint64_t a1, char a2)
{
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for ResolvableAttributeConfiguration.Schedule?, type metadata accessor for ResolvableAttributeConfiguration.Schedule, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v14[-v5];
  uint64_t v7 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  BOOL v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  specialized ConfigurationBasedResolvableStringAttributeRepresentation.schedule.getter((uint64_t)v6);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v6, &lazy cache variable for type metadata for ResolvableAttributeConfiguration.Schedule?, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
    type metadata accessor for _SequenceBox<[Date]>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = MEMORY[0x263F8EE78];
  }
  else
  {
    _s7SwiftUI32ResolvableAttributeConfigurationO8ScheduleVWObTm_0((uint64_t)v6, (uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
    char v15 = a2 & 1;
    uint64_t v12 = ResolvableAttributeConfiguration.Schedule.entries(from:mode:)(a1, &v15);
    type metadata accessor for _SequenceBox<AnySequence<Date>>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v12;
    outlined destroy of ResolvableStringResolutionContext((uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
  }
  return v11;
}

{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t, double);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v27;
  char v28;

  uint64_t v27 = a1;
  uint64_t v3 = a2 & 1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  BOOL v10 = (char *)&v27 - v9;
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v19(v10, v2, v4, v16);
  type metadata accessor for ClosedRange<Date>();
  ((void (*)(char *, uint64_t, uint64_t))v19)(v7, v2 + *(int *)(v20 + 36), v4);
  DateInterval.init(start:end:)();
  uint64_t v21 = *(unsigned char *)(v2 + *(int *)(type metadata accessor for ResolvableProgress() + 20));
  uint64_t v22 = *(int *)(v12 + 56);
  uint64_t v23 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v18, v14, v23);
  v18[v22] = v21;
  type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  swift_storeEnumTagMultiPayload();
  char v28 = v3;
  uint64_t v24 = ResolvableAttributeConfiguration.Schedule.entries(from:mode:)(v27, &v28);
  type metadata accessor for _SequenceBox<AnySequence<Date>>();
  char v25 = swift_allocObject();
  *(void *)(v25 + 16) = v24;
  outlined destroy of ResolvableStringResolutionContext((uint64_t)v18, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
  return v25;
}

uint64_t ResolvableStringAttribute.entries(from:mode:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v22);
  uint64_t v21 = (char *)&v21 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v21 - v16;
  char v18 = *a2;
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 48))(a3, a4, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    type metadata accessor for _SequenceBox<[Date]>();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = MEMORY[0x263F8EE78];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, AssociatedTypeWitness);
    char v25 = v18;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v24, &v25, AssociatedTypeWitness, AssociatedConformanceWitness);
    type metadata accessor for Date();
    swift_getAssociatedConformanceWitness();
    uint64_t v19 = AnySequence.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, AssociatedTypeWitness);
  }
  return v19;
}

void (*EnvironmentValues.resolvableStringReferenceDate.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  _OWORD v3[2] = malloc(v5);
  v3[3] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[4] = v6;
  uint64_t v7 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v7, (uint64_t)v6);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)v6);
  }
  swift_release_n();
  return EnvironmentValues.resolvableStringReferenceDate.modify;
}

void EnvironmentValues.resolvableStringReferenceDate.modify(uint64_t **a1, char a2)
{
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ResolvableStringReferenceDateKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ResolvableStringReferenceDateKey(&one-time initialization token for defaultValue, (uint64_t)static EnvironmentValues.ResolvableStringReferenceDateKey.defaultValue, a1);
}

uint64_t key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t, uint64_t *))
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a4(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    a5(v8, &v10);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v7 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v15 - v12;
  outlined init with copy of Date?(a1, (uint64_t)&v15 - v12);
  outlined init with copy of Date?((uint64_t)v13, (uint64_t)v10);
  a5(v10);
  outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v10, &lazy cache variable for type metadata for Date?, v7);
  return outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v13, &lazy cache variable for type metadata for Date?, v7);
}

void (*EnvironmentValues.stringResolutionDate.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  _OWORD v3[2] = malloc(v5);
  v3[3] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[4] = v6;
  uint64_t v7 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v7, (uint64_t)v6);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)v6);
  }
  swift_release_n();
  return EnvironmentValues.stringResolutionDate.modify;
}

void EnvironmentValues.stringResolutionDate.modify(uint64_t **a1, char a2)
{
}

void EnvironmentValues.resolvableStringReferenceDate.modify(uint64_t **a1, char a2, void (*a3)(void *))
{
  size_t v5 = *a1;
  outlined init with copy of Date?((*a1)[4], (*a1)[3]);
  uint64_t v6 = (void *)v5[3];
  uint64_t v7 = (void *)v5[4];
  uint64_t v8 = (void *)v5[2];
  if (a2)
  {
    outlined init with copy of Date?((uint64_t)v6, v5[2]);
    a3(v8);
    outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v8, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  }
  else
  {
    a3(v6);
  }
  uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v6, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  outlined destroy of ResolvableAttributeConfiguration.Schedule?((uint64_t)v7, &lazy cache variable for type metadata for Date?, v9);
  free(v7);
  free(v6);
  free(v8);

  free(v5);
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableTimer(uint64_t a1, void *a2)
{
  return ResolvableTimer.encode(to:)(a2);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableTimer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(void))type metadata accessor for ResolvableTimer, a3);
}

BOOL protocol witness for ResolvableStringAttribute.sizeVariant(_:) in conformance ResolvableProgress(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined init with copy of ResolvableAbsoluteDate(v2, a1, (uint64_t (*)(void))type metadata accessor for ResolvableProgress);
  return v3 == 0;
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableProgress(uint64_t a1, void *a2)
{
  return ResolvableProgress.encode(to:)(a2);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableProgress@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(void))type metadata accessor for ResolvableProgress, a3);
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress(a1, a2, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (void (*)(uint64_t))type metadata accessor for ResolvableProgress, (uint64_t (*)(unsigned char *))ResolvableProgress.init(from:), a3);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized ResolvableStringAttribute.entries(from:mode:)(a1, *a2);
  *a3 = result;
  return result;
}

BOOL protocol witness for ResolvableStringAttribute.sizeVariant(_:) in conformance ResolvableDateInterval(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined init with copy of ResolvableAbsoluteDate(v2, a1, (uint64_t (*)(void))type metadata accessor for ResolvableDateInterval);
  return v3 == 0;
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableDateInterval@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress(a1, a2, &lazy protocol witness table cache variable for type ResolvableDateInterval and conformance ResolvableDateInterval, (void (*)(uint64_t))type metadata accessor for ResolvableDateInterval, (uint64_t (*)(unsigned char *))ResolvableDateInterval.init(from:), a3);
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableDateInterval(uint64_t a1, void *a2)
{
  return ResolvableDateInterval.encode(to:)(a2);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableDateInterval@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(void))type metadata accessor for ResolvableDateInterval, a3);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance ResolvableDateInterval@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for _SequenceBox<[Date]>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *a1 = result;
  return result;
}

BOOL protocol witness for ResolvableStringAttribute.sizeVariant(_:) in conformance ResolvableCurrentDate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined init with copy of ResolvableAbsoluteDate(v2, a1, (uint64_t (*)(void))type metadata accessor for ResolvableCurrentDate);
  return v3 == 0;
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance ResolvableCurrentDate(uint64_t a1, void *a2)
{
  return ResolvableCurrentDate.encode(to:)(a2);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableCurrentDate@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate(a1, a2, (uint64_t (*)(void))type metadata accessor for ResolvableCurrentDate, a3);
}

uint64_t protocol witness for ResolvableStringAttributeRepresentation.representation(for:) in conformance ResolvableAbsoluteDate@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a1;
  a4[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return outlined init with copy of ResolvableAbsoluteDate(v4, (uint64_t)boxed_opaque_existential_1, a3);
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableCurrentDate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress(a1, a2, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t (*)(unsigned char *))ResolvableCurrentDate.init(from:), a3);
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t (*a5)(unsigned char *)@<X6>, uint64_t *a6@<X8>)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v13);
  a6[3] = a2;
  a6[4] = lazy protocol witness table accessor for type ResolvableProgress and conformance ResolvableProgress(a3, a4);
  __swift_allocate_boxed_opaque_existential_1(a6);
  uint64_t result = a5(v13);
  if (v6) {
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a6);
  }
  return result;
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance ResolvableCurrentDate@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized ResolvableStringAttribute.entries(from:mode:)(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t outlined init with copy of ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ResolvableAttributeConfiguration.Schedule?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s10Foundation4DateVSgMaTm_4(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for _SequenceBox<[Date]>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<[Date]>)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D488];
    _s10Foundation4DateVSgMaTm_4(255, &lazy cache variable for type metadata for [Date], MEMORY[0x263F07490], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [Date] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [Date] and conformance [A], &lazy cache variable for type metadata for [Date], v0);
    unint64_t v1 = type metadata accessor for _SequenceBox();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<[Date]>);
    }
  }
}

uint64_t sub_245FA9990(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_245FA99D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, a4, (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t sub_245FA99FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_245FA9A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.resolvableStringReferenceDate : EnvironmentValues(a1, a2, a3, a4, (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

char *initializeBufferWithCopyOfBuffer for ResolvableStringResolutionContext(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v4, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = &v4[v11];
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *(void *)uint64_t v13 = *v14;
    *((void *)v13 + 1) = v15;
    uint64_t v16 = &v4[v12];
    uint64_t v17 = (char *)a2 + v12;
    v16[8] = v17[8];
    *(void *)uint64_t v16 = *(void *)v17;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ResolvableStringResolutionContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  swift_release();

  return swift_release();
}

char *initializeWithCopy for ResolvableStringResolutionContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = &a1[v10];
  uint64_t v15 = &a2[v10];
  v14[8] = v15[8];
  *(void *)uint64_t v14 = *(void *)v15;
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for ResolvableStringResolutionContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  swift_retain();
  swift_release();
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_retain();
  swift_release();
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  return a1;
}

char *initializeWithTake for ResolvableStringResolutionContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)int v10 = *(void *)v11;
  v10[8] = v11[8];
  return a1;
}

char *assignWithTake for ResolvableStringResolutionContext(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  swift_release();
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_release();
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableStringResolutionContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245FAA404);
}

uint64_t sub_245FAA404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvableStringResolutionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245FAA514);
}

void sub_245FAA514(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
}

void type metadata completion function for ResolvableStringResolutionContext()
{
  _s10Foundation4DateVSgMaTm_4(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t dispatch thunk of static ResolvableStringAttributeFamily.attribute.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static ResolvableStringAttributeFamily.decode(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static ResolvableStringAttributeRepresentation.encode(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ResolvableStringAttributeRepresentation.representation(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.schedule.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.requiredFeatures.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.makePlatformAttributes(resolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ResolvableStringAttribute.sizeVariant(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t lazy protocol witness table accessor for type [Date] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s10Foundation4DateVSgMaTm_4(255, a2, MEMORY[0x263F07490], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ResolvableStringResolutionContext(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI32ResolvableAttributeConfigurationO8ScheduleVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ResolvableProgress and conformance ResolvableProgress(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.StringResolutionDate()
{
  return &type metadata for EnvironmentValues.StringResolutionDate;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ResolvableStringReferenceDateKey()
{
  return &type metadata for EnvironmentValues.ResolvableStringReferenceDateKey;
}

uint64_t BaseDateProvider.updateConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  switch((unint64_t)objc_msgSend(v1, sel_updateType))
  {
    case 0uLL:
      id v3 = objc_msgSend(v1, sel_updateInterval);
      if (v3)
      {
        Double.init(truncating:)();
        uint64_t v5 = v4;
      }
      else
      {
        uint64_t v5 = 0;
      }
      *(void *)a1 = v5;
      *(unsigned char *)(a1 + ++*(_DWORD *)(result + 8) = v3 == 0;
      type metadata accessor for ResolvableAttributeConfiguration(0);
      goto LABEL_18;
    case 1uLL:
      id v6 = objc_msgSend(v1, sel_updateWallClockAlignment);
      if (!v6)
      {
        specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
        goto LABEL_17;
      }
      *(void *)a1 = v6;
      type metadata accessor for ResolvableAttributeConfiguration(0);
      goto LABEL_18;
    case 2uLL:
      id v7 = objc_msgSend(v1, sel_timerEndDate);
      if (!v7)
      {
        specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
        goto LABEL_17;
      }
      uint64_t v8 = v7;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for ResolvableAttributeConfiguration(0);
      goto LABEL_18;
    case 3uLL:
      id v9 = objc_msgSend(v1, sel_timerInterval);
      if (!v9) {
        goto LABEL_16;
      }
      unint64_t v10 = v9;
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      uint64_t v12 = *(int *)(v11 + 48);
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

      *(unsigned char *)(a1 + v12) = 1;
      goto LABEL_17;
    case 4uLL:
      id v13 = objc_msgSend(v1, sel_timerInterval);
      if (v13)
      {
        uint64_t v14 = v13;
        type metadata accessor for (interval: DateInterval, countdown: Bool)();
        uint64_t v16 = *(int *)(v15 + 48);
        static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

        *(unsigned char *)(a1 + v16) = 0;
      }
      else
      {
LABEL_16:
        specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
      }
      goto LABEL_17;
    default:
LABEL_17:
      type metadata accessor for ResolvableAttributeConfiguration(0);
LABEL_18:
      return swift_storeEnumTagMultiPayload();
  }
}

id DateFormattingContext.init(_:)(uint64_t a1)
{
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Date?(a1, (uint64_t)v4);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  uint64_t v9 = *v8;
  if (v8[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v10 = specialized PropertyList.Tracker.value<A>(_:for:)(v9);
  }
  else
  {
    uint64_t v11 = swift_retain_n();
    char v10 = specialized closure #1 in PropertyList.subscript.getter(v11);
  }
  swift_release_n();
  swift_release_n();
  id v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithReferenceDate_isLuminanceReduced_, isa, v10 & 1);

  outlined destroy of ResolvableStringResolutionContext(a1);
  return v12;
}

uint64_t protocol witness for ConfigurationBasedResolvableStringAttributeRepresentation.invalidationConfiguration.getter in conformance ResolvableCurrentDate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = ResolvableCurrentDate.provider.getter();
  if (v5)
  {
    uint64_t v6 = v5;
    BaseDateProvider.updateConfiguration.getter((uint64_t)v4);

    return outlined init with take of ResolvableAttributeConfiguration((uint64_t)v4, a1);
  }
  else
  {
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t outlined init with take of ResolvableAttributeConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvableStringResolutionContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ResolvableStringResolutionContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double Text.ResolvedProperties.init()@<D0>(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 32) = 0;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
  double result = -0.0;
  *(_OWORD *)(a1 + 96) = xmmword_24619B530;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 112) = v1;
  return result;
}

double Text.Resolved.init()@<D0>(uint64_t a1@<X8>)
{
  Text.Style.init()(a1);
  uint64_t v2 = (int *)type metadata accessor for Text.Resolved(0);
  *(void *)(a1 + v2[5]) = 0;
  *(unsigned char *)(a1 + v2[6]) = 1;
  uint64_t v3 = (void *)(a1 + v2[7]);
  void *v3 = 0;
  v3[1] = 0;
  uint64_t v4 = a1 + v2[8];
  *(_WORD *)(v4 + 32) = 0;
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 4++*(_DWORD *)(result + 8) = v5;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(void *)(v4 + 8++*(_DWORD *)(result + 8) = 0;
  double result = -0.0;
  *(_OWORD *)(v4 + 96) = xmmword_24619B530;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 12++*(_DWORD *)(result + 8) = 0;
  *(void *)(v4 + 112) = v5;
  return result;
}

Swift::Void __swiftcall Text.ResolvedProperties.registerCustomAttachment(at:)(Swift::Int at)
{
  uint64_t v3 = *(void **)(v1 + 112);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  _OWORD v3[2] = v5 + 1;
  v3[v5 + 4] = at;
  *(void *)(v1 + 112) = v3;
}

void Text.ResolvedProperties.addColor(_:)(float a1, float a2)
{
  __int16 v3 = *(_WORD *)(v2 + 32);
  if ((v3 & 1) == 0 && a1 == -1.0 && a2 == -1.0) {
    *(_WORD *)(v2 + 32) = v3 | 1;
  }
}

long long *Text.Style.LineStyle.resolve(in:fallbackStyle:)@<X0>(long long *result@<X0>, void *(*a2)(long long *__return_ptr)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3[1];
  if (v5 == 2) {
    goto LABEL_4;
  }
  long long v6 = *result;
  uint64_t v7 = *v3;
  uint64_t v8 = *v3;
  uint64_t v9 = v3[1];
  if (v5 == 1)
  {
    long long v19 = *result;
    double result = (long long *)a2(&v21);
    uint64_t v9 = *((void *)&v21 + 1);
    if (*((void *)&v21 + 1) == 1)
    {
LABEL_4:
      *(void *)a3 = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_WORD *)(a3 + 24) = 256;
      return result;
    }
    uint64_t v8 = v21;
    swift_retain();
    long long v6 = v19;
  }
  if (v9)
  {
    long long v21 = v6;
    char v10 = *(double (**)(long long *))(*(void *)v9 + 104);
    outlined copy of Text.Style.LineStyle(v7, v5);
    outlined copy of Text.Style.LineStyle(v7, v5);
    swift_retain();
    unsigned int v17 = COERCE_UNSIGNED_INT64(v10(&v21));
    unsigned int v20 = v11;
    unsigned int v16 = v12;
    unsigned int v18 = v13;
    outlined consume of Text.LineStyle?(v8, v9);
    double result = (long long *)swift_release_n();
    v14.i64[0] = v17;
    v14.i64[1] = v16;
    int8x16_t v15 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v18, v20), 0x20uLL), v14);
  }
  else
  {
    outlined copy of Text.Style.LineStyle(v7, v5);
    outlined copy of Text.Style.LineStyle(v7, v5);
    double result = (long long *)outlined consume of Text.LineStyle?(v8, 0);
    int8x16_t v15 = 0uLL;
  }
  *(void *)a3 = v8;
  *(int8x16_t *)(a3 + ++*(_DWORD *)(result + 8) = v15;
  *(unsigned char *)(a3 + 24) = v9 == 0;
  *(unsigned char *)(a3 + 25) = 0;
  return result;
}

uint64_t Text.ResolvedProperties.CustomAttachments.init(characterIndices:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Text.ResolvedProperties.Transition.init(transition:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 8);
  __int16 v3 = *(_WORD *)(result + 12);
  char v4 = *(unsigned char *)(result + 14);
  *(void *)a2 = *(void *)result;
  *(_WORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + ++*(_DWORD *)(result + 8) = v2;
  *(unsigned char *)(a2 + 14) = v4;
  return result;
}

uint64_t Text.ResolvedProperties.Features.init(rawValue:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL Text.ResolvedProperties.CustomAttachments.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t Text.Style.addFontModifier<A>(type:)(uint64_t a1)
{
  type metadata accessor for AnyFontModifier();
  static AnyFontModifier.static<A>(_:)(a1);
  MEMORY[0x24C522D60]();
  if (*(void *)((*(void *)(v1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

Swift::Void __swiftcall Text.ResolvedProperties.addSensitive()()
{
  __int16 v1 = *(_WORD *)(v0 + 32);
  if ((v1 & 4) == 0) {
    *(_WORD *)(v0 + 32) = v1 | 4;
  }
}

void SwiftUITextAttachment.draw(in:at:)(uint64_t *a1, double a2, double a3)
{
  uint64_t v4 = v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage;
  double v5 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 16);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 24);
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 32);
  char v8 = *(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 40);
  double v9 = 0.0;
  double v10 = 0.0;
  if (v5 != 0.0)
  {
    double v11 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 32);
    double v12 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 24);
    switch(*(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v11 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 24);
        double v12 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage + 32);
        break;
      default:
        break;
    }
    double v9 = 1.0 / v5 * v12;
    double v10 = 1.0 / v5 * v11;
  }
  CGFloat v13 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_alignmentOrigin) + a2;
  CGFloat v14 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_alignmentOrigin + 8) + a3;
  uint64_t v15 = *a1;
  char v17 = *(unsigned char *)(v4 + 60);
  char v18 = *(unsigned char *)(v4 + 96);
  char v19 = *(unsigned char *)(v4 + 97);
  __int16 v20 = *(_WORD *)(v4 + 98);
  char v21 = *(unsigned char *)(v4 + 8);
  id v26 = *(id *)v4;
  id v16 = v26;
  char v27 = v21;
  double v28 = v5;
  uint64_t v29 = v6;
  uint64_t v30 = v7;
  char v31 = v8;
  long long v32 = *(_OWORD *)(v4 + 44);
  char v33 = v17;
  long long v22 = *(_OWORD *)(v4 + 80);
  long long v34 = *(_OWORD *)(v4 + 64);
  long long v35 = v22;
  char v36 = v18;
  char v37 = v19;
  __int16 v38 = v20;
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  char v25 = -1;
  outlined copy of GraphicsImage.Contents?(v26, v21);
  GraphicsContext.draw(_:in:style:shading:)((uint64_t)&v26, 256, (uint64_t)v23, v15, v13, v14, v9, v10);

  outlined consume of GraphicsImage.Contents?(v16, v21);
}

uint64_t Text.Resolved.style.getter@<X0>(uint64_t a1@<X8>)
{
  return _s7SwiftUI4TextV5StyleVWOcTm_0(v1, a1, type metadata accessor for Text.Style);
}

uint64_t Text.Resolved.style.setter(uint64_t a1)
{
  return outlined assign with take of Text.Style(a1, v1, type metadata accessor for Text.Style);
}

uint64_t (*Text.Resolved.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *Text.Resolved.attributedString.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Text.Resolved(0) + 20));
  id v2 = v1;
  return v1;
}

void Text.Resolved.attributedString.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Text.Resolved(0) + 20);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*Text.Resolved.attributedString.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Resolved.includeDefaultAttributes.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Text.Resolved(0) + 24));
}

uint64_t Text.Resolved.includeDefaultAttributes.setter(char a1)
{
  uint64_t result = type metadata accessor for Text.Resolved(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Text.Resolved.includeDefaultAttributes.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 Text.Resolved.idiom.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + *(int *)(type metadata accessor for Text.Resolved(0) + 28));
  *a1 = result;
  return result;
}

uint64_t Text.Resolved.idiom.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = type metadata accessor for Text.Resolved(0);
  double v5 = (void *)(v1 + *(int *)(result + 28));
  *double v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*Text.Resolved.idiom.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *Text.Resolved.properties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Text.Resolved(0) + 32);
  long long v4 = *(_OWORD *)(v3 + 80);
  long long v5 = *(_OWORD *)(v3 + 112);
  long long v21 = *(_OWORD *)(v3 + 96);
  long long v22 = v5;
  long long v6 = *(_OWORD *)(v3 + 16);
  long long v7 = *(_OWORD *)(v3 + 48);
  long long v17 = *(_OWORD *)(v3 + 32);
  long long v8 = v17;
  long long v18 = v7;
  long long v9 = *(_OWORD *)(v3 + 48);
  long long v10 = *(_OWORD *)(v3 + 80);
  long long v19 = *(_OWORD *)(v3 + 64);
  long long v11 = v19;
  long long v20 = v10;
  long long v12 = *(_OWORD *)(v3 + 16);
  v16[0] = *(_OWORD *)v3;
  long long v13 = v16[0];
  v16[1] = v12;
  long long v14 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 8) = v9;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v4;
  uint64_t v23 = *(void *)(v3 + 128);
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(v3 + 128);
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v6;
  return outlined retain of Text.ResolvedProperties(v16);
}

__n128 Text.Resolved.properties.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Text.Resolved(0) + 32);
  long long v4 = *(_OWORD *)(v3 + 112);
  v12[6] = *(_OWORD *)(v3 + 96);
  v12[7] = v4;
  uint64_t v13 = *(void *)(v3 + 128);
  long long v5 = *(_OWORD *)(v3 + 48);
  unsigned char v12[2] = *(_OWORD *)(v3 + 32);
  v12[3] = v5;
  long long v6 = *(_OWORD *)(v3 + 80);
  void v12[4] = *(_OWORD *)(v3 + 64);
  v12[5] = v6;
  long long v7 = *(_OWORD *)(v3 + 16);
  v12[0] = *(_OWORD *)v3;
  v12[1] = v7;
  outlined release of Text.ResolvedProperties(v12);
  long long v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v3 + 112) = v8;
  *(void *)(v3 + 12++*(_DWORD *)(result + 8) = *(void *)(a1 + 128);
  long long v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 4++*(_DWORD *)(result + 8) = v9;
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 80) = v10;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(__n128 *)(v3 + 16) = result;
  return result;
}

uint64_t (*Text.Resolved.properties.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t closure #1 in Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:)(uint64_t a1)
{
  return a1;
}

uint64_t Text.Resolved.nsAttributes(content:in:with:properties:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = *a4;
  long long v13 = *a3;
  int v10 = *(unsigned __int8 *)(v5 + *(int *)(type metadata accessor for Text.Resolved(0) + 24));
  uint64_t v12 = v9;
  return Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(a1, a2, (uint64_t *)&v13, v10, &v12, a5);
}

Swift::Void __swiftcall Text.ResolvedProperties.Paragraph.markParagraphBoundary(_:)(Swift::Bool a1)
{
  if (a1)
  {

    *(void *)(v1 + ++*(_DWORD *)(result + 8) = 0;
  }
}

uint64_t EnvironmentValues.resolvedTextProvider.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

Swift::Void __swiftcall Text.ResolvedProperties.addAttachment()()
{
  __int16 v1 = *(_WORD *)(v0 + 32);
  if ((v1 & 2) == 0) {
    *(_WORD *)(v0 + 32) = v1 | 2;
  }
}

uint64_t Text.Resolved.append(_:in:with:)(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *a3;
  if ((*a3 & 4) != 0)
  {
    uint64_t v6 = *(void *)result;
    uint64_t v7 = *(void *)(result + 8);
    uint64_t v36 = *(void *)(result + 16);
    char v34 = *(unsigned char *)(result + 28);
    int v35 = *(_DWORD *)(result + 24);
    char v32 = *(unsigned char *)(result + 30);
    char v33 = *(unsigned char *)(result + 29);
    long long v37 = *(_OWORD *)(result + 32);
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    *(void *)&long long v38 = 12369903;
    uint64_t v10 = MEMORY[0x24C522990](&v38, 3);
    uint64_t v12 = v11;
    *(void *)&long long v38 = v8;
    *((void *)&v38 + 1) = v9;
    uint64_t v13 = type metadata accessor for Text.Resolved(0);
    int v14 = *(unsigned __int8 *)(v4 + *(int *)(v13 + 24));
    *(void *)&v43[0] = v5;
    uint64_t v15 = v4 + *(int *)(v13 + 32);
    uint64_t v16 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(0, 0, (uint64_t *)&v38, v14, (uint64_t *)v43, v15);
    if (v9)
    {
      swift_retain_n();
      swift_retain_n();
      char v17 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v8);
      swift_release_n();
      swift_release_n();
      if (v17)
      {
LABEL_14:
        *(void *)&long long v38 = v8;
        *((void *)&v38 + 1) = v9;
        Text.Resolved.append(_:with:in:)(v10, v12, v16, (uint64_t *)&v38);
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        __int16 v29 = *(_WORD *)(v15 + 32);
        if ((v29 & 2) == 0) {
          *(_WORD *)(v15 + 32) = v29 | 2;
        }
        return result;
      }
    }
    else
    {
      long long v38 = (unint64_t)v8;
      swift_retain();
      char v18 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v38);
      swift_release();
      if (v18) {
        goto LABEL_14;
      }
    }
    uint64_t v30 = v7;
    uint64_t v31 = v10;
    uint64_t v19 = v6;
    id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81678]), sel_init);
    if (v9)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v22 = specialized PropertyList.Tracker.value<A>(_:for:)(v8);
    }
    else
    {
      uint64_t v24 = swift_retain_n();
      uint64_t v22 = specialized closure #1 in PropertyList.subscript.getter(v24, (uint64_t)v44);
    }
    uint64_t v23 = v21;
    swift_release_n();
    swift_release_n();
    if (v22)
    {
      *(void *)&long long v38 = v19;
      *((void *)&v38 + 1) = v30;
      uint64_t v39 = v36;
      LODWORD(v40) = v35;
      BYTE4(v40) = v34;
      BYTE5(v40) = v33;
      BYTE6(v40) = v32;
      long long v41 = v37;
      (*(void (**)(id, long long *, uint64_t, uint64_t))(v23 + 24))(v20, &v38, v22, v23);
    }
    if (one-time initialization token for kitAttachment != -1) {
      swift_once();
    }
    char v25 = (void *)static NSAttributedStringKey.kitAttachment;
    uint64_t v40 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
    *(void *)&long long v38 = v20;
    outlined init with take of Any(&v38, v43);
    id v26 = v25;
    id v27 = v20;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v42 = v16;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v43, v26, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = v42;

    swift_bridgeObjectRelease();
    uint64_t v10 = v31;
    goto LABEL_14;
  }
  return result;
}

uint64_t Text.Resolved.append<A>(resolvable:in:with:transition:)(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a2;
  uint64_t v17 = a2[1];
  uint64_t v19 = *a3;
  uint64_t v20 = *(void *)a4;
  unint64_t v21 = *(unsigned int *)(a4 + 8) | ((unint64_t)(*(unsigned __int16 *)(a4 + 12) | (*(unsigned __int8 *)(a4 + 14) << 16)) << 32);
  _s7SwiftUI4TextV5StyleVWOcTm_0(v7, (uint64_t)v16, type metadata accessor for Text.Style);
  if (*((void *)v16 + 39)) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = (v21 & 0xFF000000000000) == 0x2000000000000;
  }
  if (!v22)
  {
    uint64_t v40 = v7;
    type metadata accessor for TextTransitionModifier();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v20;
    *(unsigned char *)(v23 + 2++*(_DWORD *)(result + 8) = BYTE4(v21);
    *(_DWORD *)(v23 + 24) = v21;
    *(unsigned char *)(v23 + 29) = BYTE5(v21);
    *(unsigned char *)(v23 + 30) = 1;
    *((void *)v16 + 39) = v23;
    uint64_t v7 = v40;
    outlined copy of ContentTransition.Storage(v20, v21, SBYTE5(v21));
  }
  if (v17)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v18, &v42);
    swift_release_n();
    swift_release_n();
    if ((v42 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>);
    BloomFilter.init(hashValue:)(v32);
    uint64_t v33 = v42;
    uint64_t v34 = swift_retain_n();
    uint64_t v35 = specialized find1<A>(_:key:filter:)(v34, v33);
    if (v35) {
      uint64_t v36 = *(void *)(v35 + 72);
    }
    else {
      LOBYTE(v36) = 0;
    }
    swift_release_n();
    if ((v36 & 1) == 0)
    {
LABEL_8:
      uint64_t v42 = v18;
      uint64_t v43 = v17;
      uint64_t v24 = (int *)type metadata accessor for Text.Resolved(0);
      char v25 = *(unsigned char *)(v7 + v24[6]);
      uint64_t v41 = v19;
      uint64_t v26 = (uint64_t)static ResolvableTextSegmentAttribute.buildDynamicTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)((uint64_t)a1, (SEL *)v16, &v42, v25, &v41, (char *)(v7 + v24[8]), a5, a6);
      if (v26) {
        goto LABEL_9;
      }
LABEL_17:
      MEMORY[0x270FA5388](v26);
      *(&v40 - 4) = a5;
      *(&v40 - 3) = a6;
      *(&v40 - 2) = (uint64_t)a1;
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #1 in Text.Resolved.append<A>(resolvable:in:with:transition:));
      return outlined destroy of Text.Resolved((uint64_t)v16, type metadata accessor for Text.Style);
    }
  }
  uint64_t v42 = v18;
  uint64_t v43 = v17;
  uint64_t v24 = (int *)type metadata accessor for Text.Resolved(0);
  int v38 = *(unsigned __int8 *)(v7 + v24[6]);
  uint64_t v41 = v19;
  uint64_t v26 = static ResolvableTextSegmentAttribute.buildStaticTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(a1, (uint64_t)v16, &v42, v38, &v41, v7 + v24[8], a5, a6);
  if (!v26) {
    goto LABEL_17;
  }
LABEL_9:
  id v27 = (void *)v26;
  type metadata accessor for Text.Resolved(0);
  uint64_t v28 = v24[5];
  __int16 v29 = *(void **)(v7 + v28);
  if (v29)
  {
    id v30 = v27;
    id v31 = v29;
    objc_msgSend(v31, sel_appendAttributedString_, v30);
  }
  else
  {
    id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, v27);

    *(void *)(v7 + v2++*(_DWORD *)(result + 8) = v37;
  }
  return outlined destroy of Text.Resolved((uint64_t)v16, type metadata accessor for Text.Style);
}

uint64_t Text.ResolvedString.append<A>(resolvable:in:with:transition:)(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v70 = a5;
  uint64_t v71 = a6;
  uint64_t v69 = a1;
  uint64_t v66 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x270FA5388](v66);
  uint64_t v65 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString?, MEMORY[0x263F06828]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v68 = (char *)&v63 - v9;
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v72 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v64 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v63 = (char *)&v63 - v13;
  _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v63 - v15;
  uint64_t v17 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v18 = v17 - 8;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v63 - v22;
  uint64_t v24 = *a2;
  uint64_t v25 = a2[1];
  uint64_t v26 = type metadata accessor for Date();
  id v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  v27(v16, 1, 1, v26);
  v27(v20, 1, 1, v26);
  uint64_t v28 = v10;
  uint64_t v29 = v72;
  id v30 = &v20[*(int *)(v18 + 32)];
  *(void *)id v30 = 0;
  v30[8] = 1;
  swift_retain();
  swift_retain();
  uint64_t v31 = (uint64_t)v16;
  uint64_t v32 = (uint64_t)v68;
  outlined assign with take of Date?(v31, (uint64_t)v20);
  uint64_t v33 = (uint64_t *)&v20[*(int *)(v18 + 28)];
  *uint64_t v33 = v24;
  v33[1] = v25;
  uint64_t v34 = v25;
  *(void *)id v30 = 0;
  v30[8] = 1;
  uint64_t v35 = (uint64_t)v23;
  uint64_t v36 = v69;
  id v37 = (char *)v70;
  uint64_t v38 = (uint64_t)v20;
  uint64_t v39 = v71;
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_2(v38, v35, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 40))(v35, v37, v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v32, 1, v28) == 1)
  {
    uint64_t v40 = outlined destroy of AttributedString?(v32);
    MEMORY[0x270FA5388](v40);
    *(&v63 - 4) = v37;
    *(&v63 - 3) = (char *)v39;
    *(&v63 - 2) = v36;
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #1 in Text.ResolvedString.append<A>(resolvable:in:with:transition:));
  }
  else
  {
    uint64_t v71 = v35;
    uint64_t v41 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v63, v32, v28);
    uint64_t v70 = type metadata accessor for Text.ResolvedString(0);
    *(unsigned char *)(v67 + *(int *)(v70 + 28)) = 1;
    uint64_t v42 = v64;
    uint64_t v43 = v41;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v64, v41, v28);
    AttributedString.characters.getter();
    _s10Foundation16AttributedStringV13CharacterViewVAESTAAWlTm_1(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
    uint64_t v44 = String.init<A>(_:)();
    uint64_t v46 = v45;
    id v47 = *(void (**)(char *, uint64_t))(v29 + 8);
    v47(v42, v28);
    uint64_t v72 = v29 + 8;
    if (v34)
    {
      uint64_t v48 = v24;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v24, &v73);
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>);
      BloomFilter.init(hashValue:)(v49);
      uint64_t v50 = v73;
      uint64_t v48 = v24;
      swift_retain_n();
      swift_retain();
      specialized find1<A>(_:key:filter:)(v24, v50);
      swift_release();
    }
    swift_release_n();
    uint64_t v73 = v44;
    uint64_t v74 = v46;
    swift_bridgeObjectRetain();
    uint64_t v51 = String.init<A>(_:)();
    uint64_t v73 = v48;
    uint64_t v74 = v34;
    uint64_t v53 = String.caseConvertedIfNeeded(_:)(&v73, v51, v52);
    uint64_t v55 = v54;
    swift_bridgeObjectRelease();
    if (v34)
    {
      swift_retain_n();
      swift_retain_n();
      char v56 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v48);
      swift_release_n();
      swift_release_n();
    }
    else
    {
      uint64_t v73 = v48;
      uint64_t v74 = 0;
      swift_retain();
      char v56 = specialized static ShouldRedactContentKey.value(in:)(&v73);
      swift_release();
      swift_release();
    }
    uint64_t v57 = v43;
    uint64_t v35 = v71;
    if (v56)
    {
      uint64_t v58 = String.count.getter();
      uint64_t v53 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v58);
      uint64_t v60 = v59;
      swift_bridgeObjectRelease();
      uint64_t v55 = v60;
    }
    v61._countAndFlagsBits = v53;
    v61._object = v55;
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47(v57, v28);
  }
  return outlined destroy of Text.Resolved(v35, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
}

uint64_t implicit closure #1 in Text.Resolved.append<A>(resolvable:in:with:transition:)()
{
  _StringGuts.grow(_:)(37);
  v0._object = (void *)0x8000000246223AE0;
  v0._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

__n128 protocol witness for ResolvedTextContainer.idiom.getter in conformance Text.ResolvedString@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(v2 + *(int *)(a1 + 20));
  *a2 = result;
  return result;
}

uint64_t protocol witness for ResolvedTextContainer.append<A>(_:in:with:isUniqueSizeVariant:) in conformance Text.ResolvedString(uint64_t a1)
{
  return specialized Text.ResolvedString.append<A>(_:in:with:isUniqueSizeVariant:)(a1);
}

uint64_t protocol witness for ResolvedTextContainer.append(_:in:with:) in conformance Text.ResolvedString()
{
  uint64_t v2 = 12369903;
  v0._countAndFlagsBits = MEMORY[0x24C522990](&v2, 3);
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t Text.Style.accessibility.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[32];
  uint64_t v3 = v1[33];
  uint64_t v4 = v1[34];
  uint64_t v5 = v1[35];
  uint64_t v6 = v1[36];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return outlined copy of AccessibilityTextAttributes?(v2, v3, v4, v5, v6);
}

__n128 Text.Style.accessibility.setter(long long *a1)
{
  __n128 v4 = (__n128)a1[1];
  long long v5 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  outlined consume of AccessibilityTextAttributes?(v1[32], v1[33], v1[34], v1[35], v1[36]);
  __n128 result = v4;
  *((_OWORD *)v1 + 16) = v5;
  *((__n128 *)v1 + 17) = v4;
  v1[36] = v2;
  return result;
}

uint64_t (*Text.Style.accessibility.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Style.clearedFontModifiers.getter()
{
  type metadata accessor for Text.Style(0);

  return swift_bridgeObjectRetain();
}

uint64_t Text.Style.clearedFontModifiers.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Text.Style(0) + 96);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Text.Style.clearedFontModifiers.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Style.addFontModifier<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for AnyFontModifier();
  static AnyFontModifier.dynamic<A>(_:)(a1, a2);
  MEMORY[0x24C522D60]();
  if (*(void *)((*(void *)(v3 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v3 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t Text.Style.removeFontModifier<A>(ofType:)(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void *)(v2 + 8);
  __n128 v4 = (uint64_t *)(v2 + 8);
  unint64_t v5 = v6;
  if (v6 >> 62) {
    goto LABEL_58;
  }
  uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    uint64_t v8 = 0;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        MEMORY[0x24C523D60](v8, v5);
      }
      else {
        swift_retain();
      }
      type metadata accessor for AnyDynamicFontModifier();
      uint64_t v9 = swift_dynamicCastClass();
      swift_release();
      if (v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
        }
        else if (!((unint64_t)*v4 >> 62))
        {
          if (v13 == *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_12;
          }
          goto LABEL_18;
        }
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v13 == v25) {
          goto LABEL_12;
        }
LABEL_18:
        uint64_t v14 = v8 + 5;
        while (2)
        {
          unint64_t v5 = v14 - 4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            MEMORY[0x24C523D60](v14 - 4);
          }
          else
          {
            if ((v5 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            if (v5 >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_55;
            }
            swift_retain();
          }
          uint64_t v15 = swift_dynamicCastClass();
          swift_release();
          if (v15) {
            goto LABEL_44;
          }
          if (v5 == v8) {
            goto LABEL_43;
          }
          uint64_t v16 = *v4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x24C523D60](v8, *v4);
            uint64_t v16 = *v4;
            if ((*v4 & 0xC000000000000001) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            if (v8 < 0) {
              goto LABEL_62;
            }
            if ((unint64_t)v8 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_63;
            }
            uint64_t v17 = *(void *)(v16 + 8 * v8 + 32);
            swift_retain();
            if ((v16 & 0xC000000000000001) == 0)
            {
LABEL_29:
              if ((v5 & 0x8000000000000000) != 0) {
                goto LABEL_64;
              }
              if (v5 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_65;
              }
              uint64_t v18 = *(void *)(v16 + 8 * v14);
              swift_retain();
LABEL_32:
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *__n128 v4 = v16;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v16 < 0 || (v16 & 0x4000000000000000) != 0)
              {
                uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
                *__n128 v4 = v16;
              }
              *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v18;
              swift_release();
              specialized Array._endMutation()();
              uint64_t v20 = *v4;
              int v21 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *__n128 v4 = v20;
              if (!v21 || v20 < 0 || (v20 & 0x4000000000000000) != 0)
              {
                uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
                *__n128 v4 = v20;
              }
              if ((v5 & 0x8000000000000000) != 0) {
                goto LABEL_66;
              }
              if (v5 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_67;
              }
              *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v14) = v17;
              swift_release();
              specialized Array._endMutation()();
LABEL_43:
              if (__OFADD__(v8++, 1)) {
                goto LABEL_57;
              }
LABEL_44:
              uint64_t v23 = v14 - 3;
              if (__OFADD__(v5, 1)) {
                goto LABEL_56;
              }
              if ((unint64_t)*v4 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v24 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              ++v14;
              if (v23 == v24) {
                goto LABEL_12;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v18 = MEMORY[0x24C523D60](v14 - 4, v16);
        uint64_t v16 = *v4;
        goto LABEL_32;
      }
      uint64_t v10 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        break;
      }
      ++v8;
      if (v10 == v7) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_68;
  }
  uint64_t v8 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  while (!((unint64_t)*v4 >> 62))
  {
    uint64_t v11 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11 >= v8) {
      goto LABEL_14;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v11 < v8) {
    goto LABEL_61;
  }
LABEL_14:
  specialized Array.replaceSubrange<A>(_:with:)(v8, v11);
  type metadata accessor for Text.Style(0);
  return specialized Set._Variant.insert(_:)(&v26, a2);
}

uint64_t Text.Style.removeFontModifier<A>(ofType:)(uint64_t a1, ValueMetadata *a2)
{
  unint64_t v6 = *(void *)(v2 + 8);
  __n128 v4 = (uint64_t *)(v2 + 8);
  unint64_t v5 = v6;
  if (v6 >> 62) {
    goto LABEL_64;
  }
  uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    uint64_t v8 = 0;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        uint64_t v9 = MEMORY[0x24C523D60](v8, v5);
      }
      else
      {
        uint64_t v9 = *(void *)(v5 + 8 * v8 + 32);
        swift_retain();
      }
      uint64_t v29 = v9;
      char v10 = closure #1 in Text.Style.removeFontModifier<A>(ofType:)((uint64_t)&v29, a2);
      swift_release();
      if (v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
        }
        else if (!((unint64_t)*v4 >> 62))
        {
          if (v14 == *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_12;
          }
          goto LABEL_18;
        }
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14 == v28) {
          goto LABEL_12;
        }
LABEL_18:
        uint64_t v15 = v8 + 5;
        while (2)
        {
          unint64_t v5 = v15 - 4;
          uint64_t v16 = *v4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x24C523D60](v15 - 4);
          }
          else
          {
            if ((v5 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            if (v5 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_55;
            }
            uint64_t v17 = *(void *)(v16 + 8 * v15);
            swift_retain();
          }
          uint64_t v29 = v17;
          char v18 = closure #1 in Text.Style.removeFontModifier<A>(ofType:)((uint64_t)&v29, a2);
          swift_release();
          if (v18) {
            goto LABEL_44;
          }
          if (v5 == v8) {
            goto LABEL_43;
          }
          uint64_t v19 = *v4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            uint64_t v20 = MEMORY[0x24C523D60](v8, *v4);
            uint64_t v19 = *v4;
            if ((*v4 & 0xC000000000000001) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            if (v8 < 0) {
              goto LABEL_58;
            }
            if ((unint64_t)v8 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_59;
            }
            uint64_t v20 = *(void *)(v19 + 8 * v8 + 32);
            swift_retain();
            if ((v19 & 0xC000000000000001) == 0)
            {
LABEL_29:
              if ((v5 & 0x8000000000000000) != 0) {
                goto LABEL_60;
              }
              if (v5 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_62;
              }
              uint64_t v21 = *(void *)(v19 + 8 * v15);
              swift_retain();
LABEL_32:
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *__n128 v4 = v19;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v19 < 0 || (v19 & 0x4000000000000000) != 0)
              {
                uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
                *__n128 v4 = v19;
              }
              *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v21;
              swift_release();
              specialized Array._endMutation()();
              uint64_t v23 = *v4;
              int v24 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *__n128 v4 = v23;
              if (!v24 || v23 < 0 || (v23 & 0x4000000000000000) != 0)
              {
                uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
                *__n128 v4 = v23;
              }
              if ((v5 & 0x8000000000000000) != 0) {
                goto LABEL_61;
              }
              if (v5 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_63;
              }
              *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v15) = v20;
              swift_release();
              specialized Array._endMutation()();
LABEL_43:
              if (__OFADD__(v8++, 1)) {
                goto LABEL_57;
              }
LABEL_44:
              uint64_t v26 = v15 - 3;
              if (__OFADD__(v5, 1)) {
                goto LABEL_56;
              }
              if ((unint64_t)*v4 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v27 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              ++v15;
              if (v26 == v27) {
                goto LABEL_12;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v21 = MEMORY[0x24C523D60](v15 - 4, v19);
        uint64_t v19 = *v4;
        goto LABEL_32;
      }
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        break;
      }
      ++v8;
      if (v11 == v7) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_68;
  }
  uint64_t v8 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  while (!((unint64_t)*v4 >> 62))
  {
    uint64_t v12 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12 >= v8) {
      goto LABEL_14;
    }
LABEL_67:
    __break(1u);
LABEL_68:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v12 < v8) {
    goto LABEL_67;
  }
LABEL_14:
  specialized Array.replaceSubrange<A>(_:with:)(v8, v12);
  type metadata accessor for Text.Style(0);
  return specialized Set._Variant.insert(_:)(&v29, (uint64_t)a2);
}

uint64_t closure #1 in Text.Style.removeFontModifier<A>(ofType:)(uint64_t a1, ValueMetadata *a2)
{
  type metadata accessor for AnyStaticFontModifier();
  if (swift_dynamicCastClass()) {
    return 1;
  }
  if (a2 != &type metadata for Font.BoldModifier) {
    return 0;
  }
  _s7SwiftUI22AnyDynamicFontModifierCyAA0E0V06WeightF0VGMaTm_0(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  uint64_t result = swift_dynamicCastClass();
  if (result) {
    return *(double *)(result + 16) >= 0.3;
  }
  return result;
}

double Text.ResolvedProperties.insets.getter()
{
  return *(double *)v0;
}

void Text.ResolvedProperties.insets.setter(double a1, double a2, double a3, double a4)
{
  *__n128 v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  void v4[3] = a4;
}

uint64_t (*Text.ResolvedProperties.insets.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Text.ResolvedProperties.features.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 32);
}

_WORD *Text.ResolvedProperties.features.setter(_WORD *result)
{
  *(_WORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*Text.ResolvedProperties.features.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.styles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Text.ResolvedProperties.styles.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Text.ResolvedProperties.styles.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.transitions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Text.ResolvedProperties.transitions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 4++*(_DWORD *)(result + 8) = a1;
  return result;
}

uint64_t (*Text.ResolvedProperties.transitions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *Text.ResolvedProperties.suffix.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)v1[7];
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  uint64_t v5 = v1[10];
  uint64_t v6 = v1[11];
  uint64_t v7 = v1[12];
  uint64_t v8 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return outlined copy of ResolvedTextSuffix(v2, v3, v4, v5, v6, v7);
}

__n128 Text.ResolvedProperties.suffix.setter(long long *a1)
{
  long long v5 = a1[1];
  long long v6 = *a1;
  __n128 v4 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  outlined consume of ResolvedTextSuffix(*(void **)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96));
  *(_OWORD *)(v1 + 56) = v6;
  *(_OWORD *)(v1 + 72) = v5;
  __n128 result = v4;
  *(__n128 *)(v1 + 8++*(_DWORD *)(result + 8) = v4;
  *(void *)(v1 + 104) = v2;
  return result;
}

uint64_t (*Text.ResolvedProperties.suffix.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.CustomAttachments.characterIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Text.ResolvedProperties.CustomAttachments.characterIndices.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*Text.ResolvedProperties.CustomAttachments.characterIndices.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.customAttachments.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t Text.ResolvedProperties.customAttachments.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = v2;
  return result;
}

uint64_t (*Text.ResolvedProperties.customAttachments.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.ResolvedProperties.Features.rawValue.getter()
{
  return *v0;
}

void static Text.ResolvedProperties.Features.keyColor.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

void static Text.ResolvedProperties.Features.attachments.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void static Text.ResolvedProperties.Features.sensitive.getter(_WORD *a1@<X8>)
{
  *a1 = 4;
}

void static Text.ResolvedProperties.Features.customRenderer.getter(_WORD *a1@<X8>)
{
  *a1 = 8;
}

void static Text.ResolvedProperties.Features.useTextLayoutManager.getter(_WORD *a1@<X8>)
{
  *a1 = 16;
}

void static Text.ResolvedProperties.Features.useTextSuffix.getter(_WORD *a1@<X8>)
{
  *a1 = 32;
}

void static Text.ResolvedProperties.Features.produceTextLayout.getter(_WORD *a1@<X8>)
{
  *a1 = 64;
}

void static Text.ResolvedProperties.Features.checkInterpolationStrategy.getter(_WORD *a1@<X8>)
{
  *a1 = 128;
}

void static Text.ResolvedProperties.Features.isUniqueSizeVariant.getter(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t Text.ResolvedProperties.Transition.transition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v4 = *(unsigned int *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 14);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v4;
  char v6 = *(unsigned char *)(v1 + 13);
  *(unsigned char *)(a1 + 13) = v6;
  *(unsigned char *)(a1 + 14) = v5;
  return outlined copy of ContentTransition.Storage(v2, v4 | (v3 << 32), v6);
}

uint64_t Text.ResolvedProperties.Transition.transition.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 6);
  int v4 = *((_DWORD *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 14);
  uint64_t result = outlined consume of ContentTransition.Storage(*(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(unsigned char *)(v1 + 13));
  *(void *)uint64_t v1 = v2;
  *(_DWORD *)(v1 + ++*(_DWORD *)(result + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  *(unsigned char *)(v1 + 14) = v5;
  return result;
}

uint64_t (*Text.ResolvedProperties.Transition.transition.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static Text.ResolvedProperties.Transition.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 6);
  int v3 = *((_DWORD *)a1 + 2);
  int v4 = *((unsigned __int8 *)a1 + 14);
  uint64_t v5 = *a2;
  __int16 v6 = *((_WORD *)a2 + 6);
  int v7 = *((_DWORD *)a2 + 2);
  int v8 = *((unsigned __int8 *)a2 + 14);
  uint64_t v13 = *a1;
  int v14 = v3;
  __int16 v15 = v2;
  uint64_t v10 = v5;
  int v11 = v7;
  __int16 v12 = v6;
  return specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v10) & ~(v4 ^ v8) & 1;
}

uint64_t Text.ResolvedProperties.Paragraph.compositionLanguage.getter()
{
  return *(void *)v0;
}

uint64_t Text.ResolvedProperties.Paragraph.compositionLanguage.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*Text.ResolvedProperties.Paragraph.compositionLanguage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id Text.ResolvedProperties.paragraph.getter@<X0>(void *a1@<X8>)
{
  __int16 v2 = *(void **)(v1 + 128);
  *a1 = *(void *)(v1 + 120);
  a1[1] = v2;
  return v2;
}

__n128 Text.ResolvedProperties.paragraph.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 120) = *a1;
  return result;
}

uint64_t (*Text.ResolvedProperties.paragraph.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EnvironmentValues.disableLinkColor.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.disableLinkColor : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.disableLinkColor.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.disableLinkColor.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.disableLinkColor.modify;
}

void EnvironmentValues.disableLinkColor.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  char v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t key path getter for EnvironmentValues.resolvedTextProvider : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    uint64_t v6 = v5;
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    uint64_t v6 = v8;
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

void (*EnvironmentValues.resolvedTextProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    uint64_t v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  void *v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.resolvedTextProvider.modify;
}

void EnvironmentValues.resolvedTextProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  char v2 = (uint64_t *)(*a1)[5];
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *(void *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t outlined copy of Text.Style.LineStyle(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_245FADFD8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245FAE010()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245FAE058()
{
  return swift_deallocObject();
}

uint64_t outlined copy of AccessibilityTextAttributes?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a5 != 1) {
    return outlined copy of Text?(a2, a3, a4, a5);
  }
  return result;
}

uint64_t outlined consume of AccessibilityTextAttributes?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a5 != 1) {
    return outlined consume of Text?(a2, a3, a4, a5);
  }
  return result;
}

uint64_t specialized Text.ResolvedString.append<A>(_:in:with:isUniqueSizeVariant:)(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v7, v1);
  uint64_t v9 = String.init<A>(_:)();
  uint64_t v21 = v5;
  uint64_t v22 = v4;
  uint64_t v11 = String.caseConvertedIfNeeded(_:)(&v21, v9, v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v21 = v5;
    uint64_t v22 = 0;
    swift_retain();
    uint64_t v20 = specialized static ShouldRedactContentKey.value(in:)(&v21);
    swift_release();
    if ((v20 & 1) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_retain_n();
  swift_retain_n();
  char v14 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v5);
  swift_release_n();
  swift_release_n();
  if (v14)
  {
LABEL_3:
    uint64_t v15 = String.count.getter();
    uint64_t v11 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v15);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v13 = v17;
  }
LABEL_4:
  type metadata accessor for Text.ResolvedString(0);
  v18._countAndFlagsBits = v11;
  v18._object = v13;
  String.append(_:)(v18);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features;
  if (!lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features;
  if (!lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features;
  if (!lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features;
  if (!lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolvedProperties.Features and conformance Text.ResolvedProperties.Features);
  }
  return result;
}

uint64_t sub_245FAE3E8(char *a1)
{
  return EnvironmentValues.disableLinkColor.setter(*a1);
}

uint64_t sub_245FAE414(uint64_t *a1)
{
  return EnvironmentValues.resolvedTextProvider.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of ResolvedTextContainer.style.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ResolvedTextContainer.style.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ResolvedTextContainer.style.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ResolvedTextContainer.idiom.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ResolvedTextContainer.append<A>(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 40))();
}

uint64_t dispatch thunk of ResolvedTextContainer.append(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of ResolvedTextContainer.append(_:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ResolvedTextContainer.append<A>(resolvable:in:with:transition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

unint64_t initializeBufferWithCopyOfBuffer for Text.Resolved(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2 >= 2uLL) {
      uint64_t v6 = swift_retain();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    unint64_t v8 = *(void *)(a2 + 16);
    *(void *)a1 = v6;
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v7;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v8);
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v9;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    uint64_t v10 = (void *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 88);
    *(void *)(a1 + 16) = v8;
    swift_retain();
    if ((unint64_t)(v11 - 1) >= 2)
    {
      *(void *)(a1 + 80) = *v10;
      *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v10;
    }
    uint64_t v13 = (void *)(a2 + 96);
    uint64_t v14 = *(void *)(a2 + 104);
    if ((unint64_t)(v14 - 1) >= 2)
    {
      *(void *)(a1 + 96) = *v13;
      *(void *)(a1 + 104) = v14;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v13;
    }
    uint64_t v15 = (_OWORD *)(a1 + 112);
    uint64_t v16 = (_OWORD *)(a2 + 112);
    uint64_t v17 = *(void *)(a2 + 176);
    if (v17 == 1)
    {
      long long v18 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v18;
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      long long v19 = *(_OWORD *)(a2 + 128);
      *uint64_t v15 = *v16;
      *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v19;
      long long v20 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v20;
    }
    else
    {
      *(void *)uint64_t v15 = *(void *)v16;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      uint64_t v21 = *(void *)(a2 + 184);
      *(void *)(a1 + 176) = v17;
      *(void *)(a1 + 184) = v21;
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      swift_retain();
    }
    uint64_t v22 = *(void *)(a2 + 248);
    if (v22 == 1)
    {
      long long v23 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v23;
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
    }
    else
    {
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v22;
      swift_bridgeObjectRetain();
    }
    uint64_t v24 = *(void *)(a2 + 288);
    if (v24 == 1)
    {
      long long v25 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v25;
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    }
    else
    {
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
      if (v24)
      {
        uint64_t v26 = *(void *)(a2 + 264);
        uint64_t v27 = *(void *)(a2 + 272);
        char v28 = *(unsigned char *)(a2 + 280);
        outlined copy of Text.Storage(v26, v27, v28);
        *(void *)(a1 + 264) = v26;
        *(void *)(a1 + 272) = v27;
        *(unsigned char *)(a1 + 280) = v28;
        *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v29 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v29;
      }
    }
    id v30 = *(void **)(a2 + 296);
    uint64_t v31 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = v30;
    *(void *)(a1 + 304) = v31;
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
    uint64_t v32 = type metadata accessor for Text.Style(0);
    uint64_t v33 = *(int *)(v32 + 84);
    __dst = (char *)(a1 + v33);
    uint64_t v73 = (int *)v32;
    uint64_t v34 = (char *)(a2 + v33);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    uint64_t v36 = v35;
    uint64_t v37 = *(void *)(v35 - 8);
    uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    id v39 = v30;
    swift_retain();
    swift_retain();
    if (v38(v34, 2, v36))
    {
      uint64_t v40 = type metadata accessor for TypesettingLanguage.Storage(0);
      uint64_t v41 = __dst;
      memcpy(__dst, v34, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v42 = type metadata accessor for Locale.Language();
      uint64_t v41 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(__dst, v34, v42);
      __dst[*(int *)(v36 + 48)] = v34[*(int *)(v36 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 2, v36);
    }
    uint64_t v43 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    uint64_t v44 = &v41[v43];
    uint64_t v45 = &v34[v43];
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    *(void *)(a1 + v73[22]) = *(void *)(a2 + v73[22]);
    uint64_t v46 = v73[23];
    id v47 = (void *)(a1 + v46);
    uint64_t v48 = (const void *)(a2 + v46);
    uint64_t v49 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain();
    if (v51(v48, 1, v49))
    {
      _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
      memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    *(void *)(a1 + v73[24]) = *(void *)(a2 + v73[24]);
    uint64_t v53 = a3[5];
    uint64_t v54 = a3[6];
    uint64_t v55 = *(void **)(a2 + v53);
    *(void *)(a1 + v53) = v55;
    *(unsigned char *)(a1 + v54) = *(unsigned char *)(a2 + v54);
    uint64_t v56 = a3[8];
    *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
    uint64_t v57 = a1 + v56;
    uint64_t v58 = (void *)(a2 + v56);
    long long v59 = *(_OWORD *)(a2 + v56 + 16);
    *(_OWORD *)uint64_t v57 = *(_OWORD *)(a2 + v56);
    *(_OWORD *)(v57 + 16) = v59;
    *(_WORD *)(v57 + 32) = *(_WORD *)(a2 + v56 + 32);
    uint64_t v60 = *(void *)(a2 + v56 + 48);
    *(void *)(v57 + 40) = *(void *)(a2 + v56 + 40);
    *(void *)(v57 + 4++*(_DWORD *)(result + 8) = v60;
    uint64_t v61 = *(void *)(a2 + v56 + 64);
    uint64_t v62 = *(void *)(a2 + v56 + 80);
    uint64_t v76 = *(void *)(a2 + v56 + 72);
    uint64_t v63 = *(void *)(a2 + v56 + 88);
    uint64_t v64 = *(void *)(a2 + v56 + 96);
    __dstCGFloat a = *(void **)(a2 + v56 + 56);
    uint64_t v74 = *(void *)(a2 + v56 + 104);
    swift_bridgeObjectRetain();
    id v65 = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ResolvedTextSuffix(__dsta, v61, v76, v62, v63, v64);
    *(void *)(v57 + 56) = __dsta;
    *(void *)(v57 + 64) = v61;
    *(void *)(v57 + 72) = v76;
    *(void *)(v57 + 80) = v62;
    *(void *)(v57 + 8++*(_DWORD *)(result + 8) = v63;
    *(void *)(v57 + 96) = v64;
    uint64_t v66 = v58[14];
    uint64_t v67 = v58[15];
    *(void *)(v57 + 104) = v74;
    *(void *)(v57 + 112) = v66;
    uint64_t v68 = (void *)v58[16];
    *(void *)(v57 + 120) = v67;
    *(void *)(v57 + 12++*(_DWORD *)(result + 8) = v68;
    swift_bridgeObjectRetain();
    id v69 = v68;
  }
  return a1;
}

uint64_t assignWithCopy for Text.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)a2;
  if (v5 >= 2)
  {
    if (v6 >= 2)
    {
      *(void *)a1 = v6;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Font(a1);
      *(void *)a1 = *(void *)a2;
    }
  }
  else
  {
    *(void *)a1 = v6;
    if (v6 >= 2) {
      swift_retain();
    }
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Text.Style.TextStyleColor(v7);
  unint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  outlined consume of Text.Style.TextStyleColor(v8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v9 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v10;
  uint64_t v11 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v11;
  unint64_t v12 = *(void *)(a2 + 88) - 1;
  if ((unint64_t)(*(void *)(a1 + 88) - 1) < 2)
  {
    if (v12 >= 2)
    {
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8++*(_DWORD *)(result + 8) = *(void *)(a2 + 88);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
LABEL_13:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_15;
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
LABEL_15:
  unint64_t v13 = *(void *)(a2 + 104) - 1;
  if ((unint64_t)(*(void *)(a1 + 104) - 1) < 2)
  {
    if (v13 >= 2)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_retain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v13 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
LABEL_22:
  uint64_t v14 = (long long *)(a1 + 112);
  uint64_t v15 = (long long *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176) == 1)
  {
    if (v16 == 1)
    {
      long long v17 = *v15;
      long long v18 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v18;
      *uint64_t v14 = v17;
      long long v19 = *(_OWORD *)(a2 + 160);
      long long v20 = *(_OWORD *)(a2 + 176);
      long long v21 = *(_OWORD *)(a2 + 192);
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(_OWORD *)(a1 + 176) = v20;
      *(_OWORD *)(a1 + 192) = v21;
      *(_OWORD *)(a1 + 160) = v19;
    }
    else
    {
      uint64_t v27 = *(void *)v15;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)uint64_t v14 = v27;
      uint64_t v28 = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v28;
      uint64_t v29 = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 144) = v29;
      uint64_t v30 = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = v30;
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      uint64_t v31 = *(void *)(a2 + 184);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      *(void *)(a1 + 184) = v31;
      uint64_t v32 = *(void *)(a2 + 200);
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(void *)(a1 + 200) = v32;
      swift_retain();
    }
  }
  else if (v16 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    long long v23 = *(_OWORD *)(a2 + 128);
    long long v22 = *(_OWORD *)(a2 + 144);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v23;
    *(_OWORD *)(a1 + 144) = v22;
    long long v25 = *(_OWORD *)(a2 + 176);
    long long v24 = *(_OWORD *)(a2 + 192);
    long long v26 = *(_OWORD *)(a2 + 160);
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    *(_OWORD *)(a1 + 176) = v25;
    *(_OWORD *)(a1 + 192) = v24;
    *(_OWORD *)(a1 + 160) = v26;
  }
  else
  {
    uint64_t v33 = *(void *)v15;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)uint64_t v14 = v33;
    uint64_t v34 = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v34;
    uint64_t v35 = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(void *)(a1 + 144) = v35;
    uint64_t v36 = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
    *(void *)(a1 + 160) = v36;
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    swift_retain();
    swift_release();
    uint64_t v37 = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(a1 + 184) = v37;
    uint64_t v38 = *(void *)(a2 + 200);
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    *(void *)(a1 + 200) = v38;
  }
  id v39 = (long long *)(a1 + 216);
  uint64_t v40 = (long long *)(a2 + 216);
  uint64_t v41 = *(void *)(a2 + 248);
  if (*(void *)(a1 + 248) == 1)
  {
    if (v41 == 1)
    {
      long long v42 = *v40;
      long long v43 = *(_OWORD *)(a2 + 232);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
      *id v39 = v42;
      *(_OWORD *)(a1 + 232) = v43;
    }
    else
    {
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      uint64_t v46 = *(void *)(a2 + 224);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      *(void *)(a1 + 224) = v46;
      *(unsigned char *)(a1 + 233) = *(unsigned char *)(a2 + 233);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
    }
  }
  else if (v41 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    uint64_t v44 = *(void *)(a2 + 248);
    long long v45 = *(_OWORD *)(a2 + 232);
    *id v39 = *v40;
    *(_OWORD *)(a1 + 232) = v45;
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v44;
  }
  else
  {
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
    uint64_t v47 = *(void *)(a2 + 224);
    *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
    *(void *)(a1 + 224) = v47;
    *(unsigned char *)(a1 + 233) = *(unsigned char *)(a2 + 233);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v48 = (long long *)(a1 + 256);
  uint64_t v49 = (long long *)(a2 + 256);
  uint64_t v50 = *(void *)(a1 + 288);
  uint64_t v51 = *(void *)(a2 + 288);
  if (v50 == 1)
  {
    if (v51 == 1)
    {
      long long v52 = *v49;
      long long v53 = *(_OWORD *)(a2 + 272);
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
LABEL_39:
      *uint64_t v48 = v52;
      v48[1] = v53;
      goto LABEL_50;
    }
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
    *(unsigned char *)(a1 + 25++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 258);
    if (!*(void *)(a2 + 288))
    {
      long long v56 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v56;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v51 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    uint64_t v54 = *(void *)(a2 + 288);
    long long v55 = *(_OWORD *)(a2 + 272);
    *uint64_t v48 = *v49;
    *(_OWORD *)(a1 + 272) = v55;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = v54;
    goto LABEL_50;
  }
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
  *(unsigned char *)(a1 + 25++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 258);
  uint64_t v48 = (long long *)(a1 + 264);
  uint64_t v57 = (long long *)(a2 + 264);
  uint64_t v58 = *(void *)(a2 + 288);
  if (!v50)
  {
    if (!v58)
    {
      long long v52 = *v57;
      long long v53 = *(_OWORD *)(a2 + 280);
      goto LABEL_39;
    }
LABEL_48:
    uint64_t v65 = *(void *)(a2 + 264);
    uint64_t v66 = *(void *)(a2 + 272);
    char v67 = *(unsigned char *)(a2 + 280);
    outlined copy of Text.Storage(v65, v66, v67);
    *(void *)(a1 + 264) = v65;
    *(void *)(a1 + 272) = v66;
    *(unsigned char *)(a1 + 280) = v67;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    goto LABEL_50;
  }
  if (v58)
  {
    uint64_t v59 = *(void *)(a2 + 264);
    uint64_t v60 = *(void *)(a2 + 272);
    char v61 = *(unsigned char *)(a2 + 280);
    outlined copy of Text.Storage(v59, v60, v61);
    uint64_t v62 = *(void *)(a1 + 264);
    uint64_t v63 = *(void *)(a1 + 272);
    char v64 = *(unsigned char *)(a1 + 280);
    *(void *)(a1 + 264) = v59;
    *(void *)(a1 + 272) = v60;
    *(unsigned char *)(a1 + 280) = v61;
    outlined consume of Text.Storage(v62, v63, v64);
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(a1 + 264);
    long long v68 = *(_OWORD *)(a2 + 280);
    *uint64_t v48 = *v57;
    *(_OWORD *)(a1 + 280) = v68;
  }
LABEL_50:
  id v69 = *(void **)(a1 + 296);
  uint64_t v70 = *(void **)(a2 + 296);
  *(void *)(a1 + 296) = v70;
  id v71 = v70;

  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_retain();
  swift_release();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(unsigned char *)(a1 + 321) = *(unsigned char *)(a2 + 321);
  uint64_t v72 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v73 = v72[21];
  uint64_t v74 = (unsigned char *)(a1 + v73);
  uint64_t v75 = (unsigned char *)(a2 + v73);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v77 = v76;
  uint64_t v78 = *(void *)(v76 - 8);
  char v79 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v78 + 48);
  int v80 = v79(v74, 2, v76);
  int v81 = v79(v75, 2, v77);
  if (v80)
  {
    if (!v81)
    {
      uint64_t v82 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v82 - 8) + 16))(v74, v75, v82);
      v74[*(int *)(v77 + 48)] = v75[*(int *)(v77 + 48)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v78 + 56))(v74, 0, 2, v77);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v81)
  {
    outlined destroy of Text.Resolved((uint64_t)v74, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_55:
    uint64_t v83 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v74, v75, *(void *)(*(void *)(v83 - 8) + 64));
    goto LABEL_56;
  }
  uint64_t v121 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v121 - 8) + 24))(v74, v75, v121);
  v74[*(int *)(v77 + 48)] = v75[*(int *)(v77 + 48)];
LABEL_56:
  uint64_t v84 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v85 = &v74[v84];
  uint64_t v86 = &v75[v84];
  char v87 = v86[8];
  *(void *)uint64_t v85 = *(void *)v86;
  v85[8] = v87;
  *(void *)(a1 + v72[22]) = *(void *)(a2 + v72[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v88 = v72[23];
  uint64_t v89 = (void *)(a1 + v88);
  uint64_t v90 = (void *)(a2 + v88);
  uint64_t v91 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v92 = *(void *)(v91 - 8);
  uint64_t v93 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v92 + 48);
  int v94 = v93(v89, 1, v91);
  int v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, void *, uint64_t))(v92 + 24))(v89, v90, v91);
      goto LABEL_62;
    }
    (*(void (**)(void *, uint64_t))(v92 + 8))(v89, v91);
    goto LABEL_61;
  }
  if (v95)
  {
LABEL_61:
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v89, v90, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(void *, void *, uint64_t))(v92 + 16))(v89, v90, v91);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_62:
  *(void *)(a1 + v72[24]) = *(void *)(a2 + v72[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = a3[5];
  uint64_t v98 = *(void **)(a1 + v97);
  uint64_t v99 = *(void **)(a2 + v97);
  *(void *)(a1 + v97) = v99;
  id v100 = v99;

  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v101 = a3[8];
  uint64_t v102 = a1 + v101;
  CFTimeInterval v103 = (void *)(a2 + v101);
  *(void *)uint64_t v102 = *(void *)(a2 + v101);
  *(void *)(v102 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + v101 + 8);
  *(void *)(v102 + 16) = *(void *)(a2 + v101 + 16);
  *(void *)(v102 + 24) = *(void *)(a2 + v101 + 24);
  *(_WORD *)(v102 + 32) = *(_WORD *)(a2 + v101 + 32);
  *(void *)(v102 + 40) = *(void *)(a2 + v101 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v102 + 4++*(_DWORD *)(result + 8) = v103[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v104 = (void *)v103[7];
  uint64_t v105 = v103[8];
  uint64_t v106 = v103[9];
  uint64_t v107 = v103[10];
  uint64_t v108 = v103[11];
  uint64_t v109 = v103[12];
  uint64_t v110 = v103[13];
  outlined copy of ResolvedTextSuffix(v104, v105, v106, v107, v108, v109);
  uint64_t v111 = *(void **)(v102 + 56);
  uint64_t v112 = *(void *)(v102 + 64);
  uint64_t v113 = *(void *)(v102 + 72);
  uint64_t v114 = *(void *)(v102 + 80);
  uint64_t v115 = *(void *)(v102 + 88);
  uint64_t v116 = *(void *)(v102 + 96);
  *(void *)(v102 + 56) = v104;
  *(void *)(v102 + 64) = v105;
  *(void *)(v102 + 72) = v106;
  *(void *)(v102 + 80) = v107;
  *(void *)(v102 + 8++*(_DWORD *)(result + 8) = v108;
  *(void *)(v102 + 96) = v109;
  *(void *)(v102 + 104) = v110;
  outlined consume of ResolvedTextSuffix(v111, v112, v113, v114, v115, v116);
  *(void *)(v102 + 112) = v103[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v102 + 120) = v103[15];
  uint64_t v117 = *(void **)(v102 + 128);
  uint64_t v118 = (void *)v103[16];
  *(void *)(v102 + 12++*(_DWORD *)(result + 8) = v118;
  id v119 = v118;

  return a1;
}

uint64_t initializeWithTake for Text.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v9;
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 216);
  long long v12 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  long long v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  uint64_t v14 = *(void *)(a2 + 296);
  *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v14;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v15 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v16 = v15[21];
  long long v17 = (char *)(a1 + v16);
  long long v18 = (char *)(a2 + v16);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 2, v19))
  {
    uint64_t v22 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v23 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v17, v18, v23);
    v17[*(int *)(v20 + 48)] = v18[*(int *)(v20 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 2, v20);
  }
  uint64_t v24 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  long long v25 = &v17[v24];
  long long v26 = &v18[v24];
  *(void *)long long v25 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)(a1 + v15[22]) = *(void *)(a2 + v15[22]);
  uint64_t v27 = v15[23];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  *(void *)(a1 + v15[24]) = *(void *)(a2 + v15[24]);
  uint64_t v33 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v33) = *(unsigned char *)(a2 + v33);
  uint64_t v34 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  long long v37 = *(_OWORD *)(v36 + 112);
  *(_OWORD *)(v35 + 96) = *(_OWORD *)(v36 + 96);
  *(_OWORD *)(v35 + 112) = v37;
  *(void *)(v35 + 12++*(_DWORD *)(result + 8) = *(void *)(v36 + 128);
  long long v38 = *(_OWORD *)(v36 + 48);
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_OWORD *)(v35 + 4++*(_DWORD *)(result + 8) = v38;
  long long v39 = *(_OWORD *)(v36 + 80);
  *(_OWORD *)(v35 + 64) = *(_OWORD *)(v36 + 64);
  *(_OWORD *)(v35 + 80) = v39;
  long long v40 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v40;
  return a1;
}

uint64_t assignWithTake for Text.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)a2;
  if (*(void *)a1 < 2uLL) {
    goto LABEL_4;
  }
  if (v6 < 2)
  {
    outlined destroy of Font(a1);
    unint64_t v6 = *(void *)a2;
LABEL_4:
    *(void *)a1 = v6;
    goto LABEL_6;
  }
  *(void *)a1 = v6;
  swift_release();
LABEL_6:
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  outlined consume of Text.Style.TextStyleColor(v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  long long v8 = (_OWORD *)(a2 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - 1) < 2)
  {
LABEL_9:
    *(_OWORD *)(a1 + 80) = *v8;
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  if ((unint64_t)(v9 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
    goto LABEL_9;
  }
  *(void *)(a1 + 80) = *(void *)v8;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v9;
  swift_release();
LABEL_11:
  long long v10 = (_OWORD *)(a2 + 96);
  if ((unint64_t)(*(void *)(a1 + 104) - 1) < 2)
  {
LABEL_14:
    *(_OWORD *)(a1 + 96) = *v10;
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)(a2 + 104);
  if ((unint64_t)(v11 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
    goto LABEL_14;
  }
  *(void *)(a1 + 96) = *(void *)v10;
  *(void *)(a1 + 104) = v11;
  swift_release();
LABEL_16:
  long long v12 = (_OWORD *)(a1 + 112);
  long long v13 = (_OWORD *)(a2 + 112);
  if (*(void *)(a1 + 176) == 1)
  {
LABEL_19:
    long long v15 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v15;
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    long long v16 = *(_OWORD *)(a2 + 128);
    *long long v12 = *v13;
    *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v16;
    long long v17 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v17;
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)(a2 + 176);
  if (v14 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    goto LABEL_19;
  }
  *(void *)long long v12 = *(void *)v13;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 176) = v14;
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
LABEL_21:
  if (*(void *)(a1 + 248) == 1)
  {
LABEL_24:
    long long v19 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v19;
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(a2 + 248);
  if (v18 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    goto LABEL_24;
  }
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v18;
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v20 = *(void *)(a1 + 288);
  uint64_t v73 = a3;
  if (v20 == 1)
  {
LABEL_29:
    long long v22 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v22;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    goto LABEL_30;
  }
  uint64_t v21 = *(void *)(a2 + 288);
  if (v21 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    goto LABEL_29;
  }
  uint64_t v65 = (_OWORD *)(a1 + 264);
  uint64_t v66 = (_OWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
  if (v20)
  {
    if (v21)
    {
      char v67 = *(unsigned char *)(a2 + 280);
      uint64_t v68 = *(void *)(a1 + 264);
      uint64_t v69 = *(void *)(a1 + 272);
      char v70 = *(unsigned char *)(a1 + 280);
      *uint64_t v65 = *v66;
      *(unsigned char *)(a1 + 280) = v67;
      outlined consume of Text.Storage(v68, v69, v70);
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    outlined destroy of Text(a1 + 264);
  }
  long long v72 = *(_OWORD *)(a2 + 280);
  *uint64_t v65 = *v66;
  *(_OWORD *)(a1 + 280) = v72;
LABEL_30:
  uint64_t v23 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);

  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_release();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_release();
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v24 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v25 = v24[21];
  long long v26 = (unsigned char *)(a1 + v25);
  uint64_t v27 = (unsigned char *)(a2 + v25);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v26, 2, v28);
  int v33 = v31(v27, 2, v29);
  if (v32)
  {
    if (!v33)
    {
      uint64_t v34 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 32))(v26, v27, v34);
      v26[*(int *)(v29 + 48)] = v27[*(int *)(v29 + 48)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 2, v29);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v33)
  {
    outlined destroy of Text.Resolved((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_35:
    uint64_t v35 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v26, v27, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_36;
  }
  uint64_t v71 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v71 - 8) + 40))(v26, v27, v71);
  v26[*(int *)(v29 + 48)] = v27[*(int *)(v29 + 48)];
LABEL_36:
  uint64_t v36 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  long long v37 = &v26[v36];
  long long v38 = &v27[v36];
  *(void *)long long v37 = *(void *)v38;
  v37[8] = v38[8];
  *(void *)(a1 + v24[22]) = *(void *)(a2 + v24[22]);
  swift_bridgeObjectRelease();
  uint64_t v39 = v24[23];
  long long v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  uint64_t v42 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 40))(v40, v41, v42);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
    goto LABEL_41;
  }
  if (v46)
  {
LABEL_41:
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, void *, uint64_t))(v43 + 32))(v40, v41, v42);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_42:
  *(void *)(a1 + v24[24]) = *(void *)(a2 + v24[24]);
  swift_bridgeObjectRelease();
  uint64_t v48 = v73[5];
  uint64_t v49 = *(void **)(a1 + v48);
  *(void *)(a1 + v4++*(_DWORD *)(result + 8) = *(void *)(a2 + v48);

  uint64_t v50 = v73[7];
  *(unsigned char *)(a1 + v73[6]) = *(unsigned char *)(a2 + v73[6]);
  *(_OWORD *)(a1 + v50) = *(_OWORD *)(a2 + v50);
  uint64_t v51 = v73[8];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = a2 + v51;
  long long v54 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
  *(_OWORD *)(v52 + 16) = v54;
  *(_WORD *)(v52 + 32) = *(_WORD *)(v53 + 32);
  *(void *)(v52 + 40) = *(void *)(v53 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v52 + 4++*(_DWORD *)(result + 8) = *(void *)(v53 + 48);
  swift_bridgeObjectRelease();
  uint64_t v55 = *(void *)(v53 + 104);
  long long v56 = *(void **)(v52 + 56);
  uint64_t v57 = *(void *)(v52 + 64);
  uint64_t v58 = *(void *)(v52 + 72);
  uint64_t v59 = *(void *)(v52 + 80);
  uint64_t v60 = *(void *)(v52 + 88);
  uint64_t v61 = *(void *)(v52 + 96);
  *(_OWORD *)(v52 + 56) = *(_OWORD *)(v53 + 56);
  *(_OWORD *)(v52 + 72) = *(_OWORD *)(v53 + 72);
  *(_OWORD *)(v52 + 8++*(_DWORD *)(result + 8) = *(_OWORD *)(v53 + 88);
  *(void *)(v52 + 104) = v55;
  outlined consume of ResolvedTextSuffix(v56, v57, v58, v59, v60, v61);
  *(void *)(v52 + 112) = *(void *)(v53 + 112);
  swift_bridgeObjectRelease();
  uint64_t v62 = *(void **)(v52 + 128);
  uint64_t v63 = *(void *)(v53 + 128);
  *(void *)(v52 + 120) = *(void *)(v53 + 120);
  *(void *)(v52 + 12++*(_DWORD *)(result + 8) = v63;

  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Resolved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245FB0014);
}

uint64_t sub_245FB0014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Text.Style(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32) + 40);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Resolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245FB00EC);
}

uint64_t sub_245FB00EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Text.Style(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 40) = (a2 - 1);
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for Text.Style(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    if (*(void *)a2 >= 2uLL) {
      uint64_t v7 = swift_retain();
    }
    uint64_t v8 = *(void *)(a2 + 8);
    unint64_t v9 = *(void *)(a2 + 16);
    *(void *)a1 = v7;
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v8;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v9);
    uint64_t v10 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    uint64_t v11 = (void *)(a2 + 80);
    uint64_t v12 = *(void *)(a2 + 88);
    *(void *)(a1 + 16) = v9;
    swift_retain();
    if ((unint64_t)(v12 - 1) >= 2)
    {
      *(void *)(a1 + 80) = *v11;
      *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v12;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v11;
    }
    uint64_t v14 = (void *)(a2 + 96);
    uint64_t v15 = *(void *)(a2 + 104);
    if ((unint64_t)(v15 - 1) >= 2)
    {
      *(void *)(a1 + 96) = *v14;
      *(void *)(a1 + 104) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v14;
    }
    long long v16 = (_OWORD *)(a1 + 112);
    long long v17 = (_OWORD *)(a2 + 112);
    uint64_t v18 = *(void *)(a2 + 176);
    if (v18 == 1)
    {
      long long v19 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v19;
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      long long v20 = *(_OWORD *)(a2 + 128);
      _OWORD *v16 = *v17;
      *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v20;
      long long v21 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v21;
    }
    else
    {
      *(void *)long long v16 = *(void *)v17;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      uint64_t v22 = *(void *)(a2 + 184);
      *(void *)(a1 + 176) = v18;
      *(void *)(a1 + 184) = v22;
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      swift_retain();
    }
    uint64_t v23 = *(void *)(a2 + 248);
    if (v23 == 1)
    {
      long long v24 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v24;
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
    }
    else
    {
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v23;
      swift_bridgeObjectRetain();
    }
    uint64_t v25 = *(void *)(a2 + 288);
    if (v25 == 1)
    {
      long long v26 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v26;
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    }
    else
    {
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
      if (v25)
      {
        uint64_t v27 = *(void *)(a2 + 264);
        uint64_t v28 = *(void *)(a2 + 272);
        char v29 = *(unsigned char *)(a2 + 280);
        outlined copy of Text.Storage(v27, v28, v29);
        *(void *)(a1 + 264) = v27;
        *(void *)(a1 + 272) = v28;
        *(unsigned char *)(a1 + 280) = v29;
        *(void *)(a1 + 28++*(_DWORD *)(result + 8) = v25;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v30 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v30;
      }
    }
    int v32 = *(void **)(a2 + 296);
    uint64_t v31 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = v32;
    *(void *)(a1 + 304) = v31;
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
    uint64_t v33 = a3[21];
    __dst = (char *)(a1 + v33);
    uint64_t v55 = a3;
    uint64_t v34 = (char *)(a2 + v33);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    uint64_t v36 = v35;
    uint64_t v37 = *(void *)(v35 - 8);
    long long v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    id v39 = v32;
    swift_retain();
    swift_retain();
    if (v38(v34, 2, v36))
    {
      uint64_t v40 = type metadata accessor for TypesettingLanguage.Storage(0);
      uint64_t v41 = __dst;
      memcpy(__dst, v34, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v42 = type metadata accessor for Locale.Language();
      uint64_t v41 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(__dst, v34, v42);
      __dst[*(int *)(v36 + 48)] = v34[*(int *)(v36 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 2, v36);
    }
    uint64_t v43 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    uint64_t v44 = &v41[v43];
    int v45 = &v34[v43];
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    uint64_t v46 = v55[23];
    *(void *)(a1 + v55[22]) = *(void *)(a2 + v55[22]);
    uint64_t v47 = (void *)(a1 + v46);
    uint64_t v48 = (const void *)(a2 + v46);
    uint64_t v49 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain();
    if (v51(v48, 1, v49))
    {
      _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
      memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    *(void *)(a1 + v55[24]) = *(void *)(a2 + v55[24]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for Text.Style(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)a2;
  if (v6 >= 2)
  {
    if (v7 >= 2)
    {
      *(void *)a1 = v7;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Font(a1);
      *(void *)a1 = *(void *)a2;
    }
  }
  else
  {
    *(void *)a1 = v7;
    if (v7 >= 2) {
      swift_retain();
    }
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void *)(a2 + 16);
  outlined copy of Text.Style.TextStyleColor(v8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8;
  outlined consume of Text.Style.TextStyleColor(v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v10;
  uint64_t v11 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v11;
  uint64_t v12 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v12;
  unint64_t v13 = *(void *)(a2 + 88) - 1;
  if ((unint64_t)(*(void *)(a1 + 88) - 1) < 2)
  {
    if (v13 >= 2)
    {
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8++*(_DWORD *)(result + 8) = *(void *)(a2 + 88);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v13 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
LABEL_13:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_15;
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
LABEL_15:
  unint64_t v14 = *(void *)(a2 + 104) - 1;
  if ((unint64_t)(*(void *)(a1 + 104) - 1) < 2)
  {
    if (v14 >= 2)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_retain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v14 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
LABEL_22:
  uint64_t v15 = (long long *)(a1 + 112);
  long long v16 = (long long *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176) == 1)
  {
    if (v17 == 1)
    {
      long long v18 = *v16;
      long long v19 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v19;
      *uint64_t v15 = v18;
      long long v20 = *(_OWORD *)(a2 + 160);
      long long v21 = *(_OWORD *)(a2 + 176);
      long long v22 = *(_OWORD *)(a2 + 192);
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(_OWORD *)(a1 + 176) = v21;
      *(_OWORD *)(a1 + 192) = v22;
      *(_OWORD *)(a1 + 160) = v20;
    }
    else
    {
      uint64_t v28 = *(void *)v16;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)uint64_t v15 = v28;
      uint64_t v29 = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v29;
      uint64_t v30 = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 144) = v30;
      uint64_t v31 = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = v31;
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      uint64_t v32 = *(void *)(a2 + 184);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      *(void *)(a1 + 184) = v32;
      uint64_t v33 = *(void *)(a2 + 200);
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(void *)(a1 + 200) = v33;
      swift_retain();
    }
  }
  else if (v17 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    long long v24 = *(_OWORD *)(a2 + 128);
    long long v23 = *(_OWORD *)(a2 + 144);
    *uint64_t v15 = *v16;
    *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    long long v26 = *(_OWORD *)(a2 + 176);
    long long v25 = *(_OWORD *)(a2 + 192);
    long long v27 = *(_OWORD *)(a2 + 160);
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    *(_OWORD *)(a1 + 176) = v26;
    *(_OWORD *)(a1 + 192) = v25;
    *(_OWORD *)(a1 + 160) = v27;
  }
  else
  {
    uint64_t v34 = *(void *)v16;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)uint64_t v15 = v34;
    uint64_t v35 = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v35;
    uint64_t v36 = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(void *)(a1 + 144) = v36;
    uint64_t v37 = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
    *(void *)(a1 + 160) = v37;
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    swift_retain();
    swift_release();
    uint64_t v38 = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(a1 + 184) = v38;
    uint64_t v39 = *(void *)(a2 + 200);
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    *(void *)(a1 + 200) = v39;
  }
  uint64_t v40 = (long long *)(a1 + 216);
  uint64_t v41 = (long long *)(a2 + 216);
  uint64_t v42 = *(void *)(a2 + 248);
  if (*(void *)(a1 + 248) == 1)
  {
    if (v42 == 1)
    {
      long long v43 = *v41;
      long long v44 = *(_OWORD *)(a2 + 232);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
      *uint64_t v40 = v43;
      *(_OWORD *)(a1 + 232) = v44;
    }
    else
    {
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      uint64_t v47 = *(void *)(a2 + 224);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      *(void *)(a1 + 224) = v47;
      *(unsigned char *)(a1 + 233) = *(unsigned char *)(a2 + 233);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
    }
  }
  else if (v42 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    uint64_t v45 = *(void *)(a2 + 248);
    long long v46 = *(_OWORD *)(a2 + 232);
    *uint64_t v40 = *v41;
    *(_OWORD *)(a1 + 232) = v46;
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v45;
  }
  else
  {
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
    uint64_t v48 = *(void *)(a2 + 224);
    *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
    *(void *)(a1 + 224) = v48;
    *(unsigned char *)(a1 + 233) = *(unsigned char *)(a2 + 233);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v49 = (long long *)(a1 + 256);
  uint64_t v50 = (long long *)(a2 + 256);
  uint64_t v51 = *(void *)(a1 + 288);
  uint64_t v52 = *(void *)(a2 + 288);
  if (v51 == 1)
  {
    if (v52 == 1)
    {
      long long v53 = *v50;
      long long v54 = *(_OWORD *)(a2 + 272);
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
LABEL_39:
      long long *v49 = v53;
      v49[1] = v54;
      goto LABEL_50;
    }
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
    *(unsigned char *)(a1 + 25++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 258);
    if (!*(void *)(a2 + 288))
    {
      long long v57 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v57;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v52 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    uint64_t v55 = *(void *)(a2 + 288);
    long long v56 = *(_OWORD *)(a2 + 272);
    long long *v49 = *v50;
    *(_OWORD *)(a1 + 272) = v56;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = v55;
    goto LABEL_50;
  }
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
  *(unsigned char *)(a1 + 25++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 258);
  uint64_t v49 = (long long *)(a1 + 264);
  uint64_t v58 = (long long *)(a2 + 264);
  uint64_t v59 = *(void *)(a2 + 288);
  if (!v51)
  {
    if (!v59)
    {
      long long v53 = *v58;
      long long v54 = *(_OWORD *)(a2 + 280);
      goto LABEL_39;
    }
LABEL_48:
    uint64_t v66 = *(void *)(a2 + 264);
    uint64_t v67 = *(void *)(a2 + 272);
    char v68 = *(unsigned char *)(a2 + 280);
    outlined copy of Text.Storage(v66, v67, v68);
    *(void *)(a1 + 264) = v66;
    *(void *)(a1 + 272) = v67;
    *(unsigned char *)(a1 + 280) = v68;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    goto LABEL_50;
  }
  if (v59)
  {
    uint64_t v60 = *(void *)(a2 + 264);
    uint64_t v61 = *(void *)(a2 + 272);
    char v62 = *(unsigned char *)(a2 + 280);
    outlined copy of Text.Storage(v60, v61, v62);
    uint64_t v63 = *(void *)(a1 + 264);
    uint64_t v64 = *(void *)(a1 + 272);
    char v65 = *(unsigned char *)(a1 + 280);
    *(void *)(a1 + 264) = v60;
    *(void *)(a1 + 272) = v61;
    *(unsigned char *)(a1 + 280) = v62;
    outlined consume of Text.Storage(v63, v64, v65);
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(a1 + 264);
    long long v69 = *(_OWORD *)(a2 + 280);
    long long *v49 = *v58;
    *(_OWORD *)(a1 + 280) = v69;
  }
LABEL_50:
  char v70 = *(void **)(a1 + 296);
  uint64_t v71 = *(void **)(a2 + 296);
  *(void *)(a1 + 296) = v71;
  id v72 = v71;

  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_retain();
  swift_release();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(unsigned char *)(a1 + 321) = *(unsigned char *)(a2 + 321);
  uint64_t v73 = a3[21];
  uint64_t v74 = (unsigned char *)(a1 + v73);
  uint64_t v75 = (unsigned char *)(a2 + v73);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v77 = v76;
  uint64_t v78 = *(void *)(v76 - 8);
  char v79 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v78 + 48);
  int v80 = v79(v74, 2, v76);
  int v81 = v79(v75, 2, v77);
  if (v80)
  {
    if (!v81)
    {
      uint64_t v82 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v82 - 8) + 16))(v74, v75, v82);
      v74[*(int *)(v77 + 48)] = v75[*(int *)(v77 + 48)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v78 + 56))(v74, 0, 2, v77);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v81)
  {
    outlined destroy of Text.Resolved((uint64_t)v74, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_55:
    uint64_t v83 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v74, v75, *(void *)(*(void *)(v83 - 8) + 64));
    goto LABEL_56;
  }
  uint64_t v98 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v98 - 8) + 24))(v74, v75, v98);
  v74[*(int *)(v77 + 48)] = v75[*(int *)(v77 + 48)];
LABEL_56:
  uint64_t v84 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v85 = &v74[v84];
  uint64_t v86 = &v75[v84];
  char v87 = v86[8];
  *(void *)uint64_t v85 = *(void *)v86;
  v85[8] = v87;
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v88 = a3[23];
  uint64_t v89 = (void *)(a1 + v88);
  uint64_t v90 = (void *)(a2 + v88);
  uint64_t v91 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v92 = *(void *)(v91 - 8);
  uint64_t v93 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v92 + 48);
  int v94 = v93(v89, 1, v91);
  int v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, void *, uint64_t))(v92 + 24))(v89, v90, v91);
      goto LABEL_62;
    }
    (*(void (**)(void *, uint64_t))(v92 + 8))(v89, v91);
    goto LABEL_61;
  }
  if (v95)
  {
LABEL_61:
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v89, v90, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(void *, void *, uint64_t))(v92 + 16))(v89, v90, v91);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_62:
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Text.Style(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v9;
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 216);
  long long v12 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  long long v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  uint64_t v14 = *(void *)(a2 + 296);
  *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v14;
  long long v15 = *(_OWORD *)(a2 + 304);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v16 = a3[21];
  uint64_t v17 = (char *)(a1 + v16);
  long long v18 = (char *)(a2 + v16);
  *(_OWORD *)(a1 + 304) = v15;
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 2, v19))
  {
    uint64_t v22 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v23 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v17, v18, v23);
    v17[*(int *)(v20 + 48)] = v18[*(int *)(v20 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 2, v20);
  }
  uint64_t v24 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  long long v25 = &v17[v24];
  long long v26 = &v18[v24];
  *(void *)long long v25 = *(void *)v26;
  v25[8] = v26[8];
  uint64_t v27 = a3[23];
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  return a1;
}

uint64_t sub_245FB130C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for TypesettingConfiguration();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 84);
      long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 92);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_245FB1454(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + ++*(_DWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for TypesettingConfiguration();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 84);
      long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 92);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

unint64_t destroy for Text.Style.LineStyle(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_release();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Text.Style.LineStyle(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = a2[1];
  }
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void *assignWithCopy for Text.Style.LineStyle(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  int v6 = v5 - 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_retain();
      swift_release();
      return a1;
    }
    swift_release();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  return a1;
}

void *assignWithTake for Text.Style.LineStyle(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = a2[1];
    }
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_release();
      return a1;
    }
    swift_release();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Style.LineStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 1;
  if (v5 >= 3) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Text.Style.LineStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + ++*(_DWORD *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + ++*(_DWORD *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for Text.Style.LineStyle(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *destructiveInjectEnumTag for Text.Style.LineStyle(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    void *result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Style.LineStyle()
{
  return &type metadata for Text.Style.LineStyle;
}

unint64_t *initializeBufferWithCopyOfBuffer for Text.Style.TextStyleColor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of Text.Style.TextStyleColor(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for Text.Style.TextStyleColor(unint64_t *a1)
{
  return outlined consume of Text.Style.TextStyleColor(*a1);
}

unint64_t *assignWithCopy for Text.Style.TextStyleColor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of Text.Style.TextStyleColor(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of Text.Style.TextStyleColor(v4);
  return a1;
}

unint64_t *assignWithTake for Text.Style.TextStyleColor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of Text.Style.TextStyleColor(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Style.TextStyleColor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Text.Style.TextStyleColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + ++*(_DWORD *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + ++*(_DWORD *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for Text.Style.TextStyleColor(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

unint64_t *destructiveInjectEnumTag for Text.Style.TextStyleColor(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  void *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Style.TextStyleColor()
{
  return &type metadata for Text.Style.TextStyleColor;
}

unint64_t *assignWithTake for Text.Style.TextStyleFont(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Style.TextStyleFont()
{
  return &type metadata for Text.Style.TextStyleFont;
}

void destroy for Text.ResolvedProperties(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 128);
}

uint64_t initializeWithCopy for Text.ResolvedProperties(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v5;
  unsigned int v6 = *(void **)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResolvedTextSuffix(v6, v7, v8, v9, v10, v11);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v10;
  *(void *)(a1 + 96) = v11;
  uint64_t v13 = *(void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 120);
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = v13;
  uint64_t v15 = *(void **)(a2 + 128);
  *(void *)(a1 + 120) = v14;
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v15;
  swift_bridgeObjectRetain();
  id v16 = v15;
  return a1;
}

uint64_t assignWithCopy for Text.ResolvedProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 104);
  outlined copy of ResolvedTextSuffix(v4, v5, v6, v7, v8, v9);
  uint64_t v11 = *(void **)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 96);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v8;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v10;
  outlined consume of ResolvedTextSuffix(v11, v12, v13, v14, v15, v16);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v17 = *(void **)(a1 + 128);
  long long v18 = *(void **)(a2 + 128);
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v18;
  id v19 = v18;

  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for Text.ResolvedProperties(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 104);
  long long v6 = *(void **)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 8) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v5;
  outlined consume of ResolvedTextSuffix(v6, v7, v8, v9, v10, v11);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void **)(a1 + 128);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v13;

  return a1;
}

uint64_t getEnumTagSinglePayload for Text.ResolvedProperties(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.ResolvedProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8++*(_DWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties()
{
  return &type metadata for Text.ResolvedProperties;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties.CustomAttachments()
{
  return &type metadata for Text.ResolvedProperties.CustomAttachments;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties.Features()
{
  return &type metadata for Text.ResolvedProperties.Features;
}

uint64_t getEnumTagSinglePayload for Text.ResolvedProperties.Transition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 15)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 14);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.ResolvedProperties.Transition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 14) = 0;
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 15) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 15) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 14) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties.Transition()
{
  return &type metadata for Text.ResolvedProperties.Transition;
}

void *initializeBufferWithCopyOfBuffer for Text.ResolvedProperties.Paragraph(void *a1, void *a2)
{
  unsigned int v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

void *assignWithCopy for Text.ResolvedProperties.Paragraph(void *a1, void *a2)
{
  *a1 = *a2;
  unsigned int v3 = (void *)a1[1];
  id v4 = (void *)a2[1];
  a1[1] = v4;
  id v5 = v4;

  return a1;
}

void *assignWithTake for Text.ResolvedProperties.Paragraph(void *a1, void *a2)
{
  unsigned int v3 = (void *)a1[1];
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;

  return a1;
}

ValueMetadata *type metadata accessor for Text.ResolvedProperties.Paragraph()
{
  return &type metadata for Text.ResolvedProperties.Paragraph;
}

uint64_t dispatch thunk of static ResolvedTextProvider.defaultLinkColor(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static ResolvedTextProvider.updateImageTextAttachment(in:image:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static ResolvedTextProvider.updateWidgetTextAttachment(_:namedImage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t initializeBufferWithCopyOfBuffer for Text.ResolvedString(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2 >= 2uLL) {
      uint64_t v6 = swift_retain();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    unint64_t v8 = *(void *)(a2 + 16);
    *(void *)a1 = v6;
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v7;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v8);
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v9;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    uint64_t v10 = (void *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 88);
    *(void *)(a1 + 16) = v8;
    swift_retain();
    if ((unint64_t)(v11 - 1) >= 2)
    {
      *(void *)(a1 + 80) = *v10;
      *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v10;
    }
    uint64_t v13 = (void *)(a2 + 96);
    uint64_t v14 = *(void *)(a2 + 104);
    if ((unint64_t)(v14 - 1) >= 2)
    {
      *(void *)(a1 + 96) = *v13;
      *(void *)(a1 + 104) = v14;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v13;
    }
    uint64_t v15 = (_OWORD *)(a1 + 112);
    uint64_t v16 = (_OWORD *)(a2 + 112);
    uint64_t v17 = *(void *)(a2 + 176);
    if (v17 == 1)
    {
      long long v18 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v18;
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      long long v19 = *(_OWORD *)(a2 + 128);
      *uint64_t v15 = *v16;
      *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v19;
      long long v20 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v20;
    }
    else
    {
      *(void *)uint64_t v15 = *(void *)v16;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      uint64_t v21 = *(void *)(a2 + 184);
      *(void *)(a1 + 176) = v17;
      *(void *)(a1 + 184) = v21;
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      swift_retain();
    }
    uint64_t v22 = *(void *)(a2 + 248);
    if (v22 == 1)
    {
      long long v23 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v23;
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
    }
    else
    {
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v22;
      swift_bridgeObjectRetain();
    }
    uint64_t v24 = *(void *)(a2 + 288);
    if (v24 == 1)
    {
      long long v25 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v25;
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    }
    else
    {
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
      if (v24)
      {
        uint64_t v26 = *(void *)(a2 + 264);
        uint64_t v27 = *(void *)(a2 + 272);
        char v28 = *(unsigned char *)(a2 + 280);
        outlined copy of Text.Storage(v26, v27, v28);
        *(void *)(a1 + 264) = v26;
        *(void *)(a1 + 272) = v27;
        *(unsigned char *)(a1 + 280) = v28;
        *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v29 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v29;
      }
    }
    uint64_t v30 = *(void **)(a2 + 296);
    uint64_t v31 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = v30;
    *(void *)(a1 + 304) = v31;
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
    uint64_t v32 = type metadata accessor for Text.Style(0);
    uint64_t v33 = *(int *)(v32 + 84);
    __dst = (char *)(a1 + v33);
    uint64_t v59 = (int *)v32;
    uint64_t v34 = (char *)(a2 + v33);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    uint64_t v36 = v35;
    uint64_t v37 = *(void *)(v35 - 8);
    uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    id v39 = v30;
    swift_retain();
    swift_retain();
    if (v38(v34, 2, v36))
    {
      uint64_t v40 = type metadata accessor for TypesettingLanguage.Storage(0);
      uint64_t v41 = __dst;
      memcpy(__dst, v34, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v42 = type metadata accessor for Locale.Language();
      uint64_t v41 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(__dst, v34, v42);
      __dst[*(int *)(v36 + 48)] = v34[*(int *)(v36 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 2, v36);
    }
    uint64_t v43 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    long long v44 = &v41[v43];
    uint64_t v45 = &v34[v43];
    *(void *)long long v44 = *(void *)v45;
    v44[8] = v45[8];
    *(void *)(a1 + v59[22]) = *(void *)(a2 + v59[22]);
    uint64_t v46 = v59[23];
    uint64_t v47 = (void *)(a1 + v46);
    uint64_t v48 = (const void *)(a2 + v46);
    uint64_t v49 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain();
    if (v51(v48, 1, v49))
    {
      _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
      memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    *(void *)(a1 + v59[24]) = *(void *)(a2 + v59[24]);
    uint64_t v53 = a3[6];
    *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
    long long v54 = (void *)(a1 + v53);
    uint64_t v55 = (void *)(a2 + v53);
    uint64_t v56 = v55[1];
    *long long v54 = *v55;
    v54[1] = v56;
    *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for Text.ResolvedString(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)a2;
  if (*(void *)a2 >= 2uLL) {
    uint64_t v5 = swift_retain();
  }
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  *(void *)a1 = v5;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = v6;
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v7);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v9 = (void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 16) = v7;
  swift_retain();
  if ((unint64_t)(v10 - 1) >= 2)
  {
    *(void *)(a1 + 80) = *v9;
    *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v9;
  }
  uint64_t v11 = (void *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  if ((unint64_t)(v12 - 1) >= 2)
  {
    *(void *)(a1 + 96) = *v11;
    *(void *)(a1 + 104) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v11;
  }
  uint64_t v13 = (_OWORD *)(a1 + 112);
  uint64_t v14 = (_OWORD *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 176);
  if (v15 == 1)
  {
    long long v16 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v16;
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    long long v17 = *(_OWORD *)(a2 + 128);
    *uint64_t v13 = *v14;
    *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v17;
    long long v18 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v18;
  }
  else
  {
    *(void *)uint64_t v13 = *(void *)v14;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    uint64_t v19 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = v15;
    *(void *)(a1 + 184) = v19;
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_retain();
  }
  uint64_t v20 = *(void *)(a2 + 248);
  if (v20 == 1)
  {
    long long v21 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v21;
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
  }
  else
  {
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v20;
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = *(void *)(a2 + 288);
  if (v22 == 1)
  {
    long long v23 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v23;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
  }
  else
  {
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
    if (v22)
    {
      uint64_t v24 = *(void *)(a2 + 264);
      uint64_t v25 = *(void *)(a2 + 272);
      char v26 = *(unsigned char *)(a2 + 280);
      outlined copy of Text.Storage(v24, v25, v26);
      *(void *)(a1 + 264) = v24;
      *(void *)(a1 + 272) = v25;
      *(unsigned char *)(a1 + 280) = v26;
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v27 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v27;
    }
  }
  char v28 = *(void **)(a2 + 296);
  uint64_t v29 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = v28;
  *(void *)(a1 + 304) = v29;
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v30 = type metadata accessor for Text.Style(0);
  uint64_t v31 = *(int *)(v30 + 84);
  __dst = (char *)(a1 + v31);
  long long v57 = (int *)v30;
  uint64_t v32 = (char *)(a2 + v31);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v34 = v33;
  uint64_t v35 = *(void *)(v33 - 8);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  id v37 = v28;
  swift_retain();
  swift_retain();
  if (v36(v32, 2, v34))
  {
    uint64_t v38 = type metadata accessor for TypesettingLanguage.Storage(0);
    id v39 = __dst;
    memcpy(__dst, v32, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    uint64_t v40 = type metadata accessor for Locale.Language();
    id v39 = __dst;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(__dst, v32, v40);
    __dst[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 2, v34);
  }
  uint64_t v41 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v42 = &v39[v41];
  uint64_t v43 = &v32[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  *(void *)(a1 + v57[22]) = *(void *)(a2 + v57[22]);
  uint64_t v44 = v57[23];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (const void *)(a2 + v44);
  uint64_t v47 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  if (v49(v46, 1, v47))
  {
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  *(void *)(a1 + v57[24]) = *(void *)(a2 + v57[24]);
  uint64_t v51 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.ResolvedString(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)a2;
  if (v5 >= 2)
  {
    if (v6 >= 2)
    {
      *(void *)a1 = v6;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Font(a1);
      *(void *)a1 = *(void *)a2;
    }
  }
  else
  {
    *(void *)a1 = v6;
    if (v6 >= 2) {
      swift_retain();
    }
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Text.Style.TextStyleColor(v7);
  unint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  outlined consume of Text.Style.TextStyleColor(v8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v9 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v10;
  uint64_t v11 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v11;
  unint64_t v12 = *(void *)(a2 + 88) - 1;
  if ((unint64_t)(*(void *)(a1 + 88) - 1) < 2)
  {
    if (v12 >= 2)
    {
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8++*(_DWORD *)(result + 8) = *(void *)(a2 + 88);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
LABEL_13:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_15;
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
LABEL_15:
  unint64_t v13 = *(void *)(a2 + 104) - 1;
  if ((unint64_t)(*(void *)(a1 + 104) - 1) < 2)
  {
    if (v13 >= 2)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_retain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v13 < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
LABEL_20:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
LABEL_22:
  uint64_t v14 = (long long *)(a1 + 112);
  uint64_t v15 = (long long *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176) == 1)
  {
    if (v16 == 1)
    {
      long long v17 = *v15;
      long long v18 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v18;
      *uint64_t v14 = v17;
      long long v19 = *(_OWORD *)(a2 + 160);
      long long v20 = *(_OWORD *)(a2 + 176);
      long long v21 = *(_OWORD *)(a2 + 192);
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(_OWORD *)(a1 + 176) = v20;
      *(_OWORD *)(a1 + 192) = v21;
      *(_OWORD *)(a1 + 160) = v19;
    }
    else
    {
      uint64_t v27 = *(void *)v15;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)uint64_t v14 = v27;
      uint64_t v28 = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v28;
      uint64_t v29 = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 144) = v29;
      uint64_t v30 = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = v30;
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      uint64_t v31 = *(void *)(a2 + 184);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      *(void *)(a1 + 184) = v31;
      uint64_t v32 = *(void *)(a2 + 200);
      *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
      *(void *)(a1 + 200) = v32;
      swift_retain();
    }
  }
  else if (v16 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    long long v23 = *(_OWORD *)(a2 + 128);
    long long v22 = *(_OWORD *)(a2 + 144);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v23;
    *(_OWORD *)(a1 + 144) = v22;
    long long v25 = *(_OWORD *)(a2 + 176);
    long long v24 = *(_OWORD *)(a2 + 192);
    long long v26 = *(_OWORD *)(a2 + 160);
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    *(_OWORD *)(a1 + 176) = v25;
    *(_OWORD *)(a1 + 192) = v24;
    *(_OWORD *)(a1 + 160) = v26;
  }
  else
  {
    uint64_t v33 = *(void *)v15;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)uint64_t v14 = v33;
    uint64_t v34 = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 12++*(_DWORD *)(result + 8) = v34;
    uint64_t v35 = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(void *)(a1 + 144) = v35;
    uint64_t v36 = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
    *(void *)(a1 + 160) = v36;
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    swift_retain();
    swift_release();
    uint64_t v37 = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(a1 + 184) = v37;
    uint64_t v38 = *(void *)(a2 + 200);
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    *(void *)(a1 + 200) = v38;
  }
  id v39 = (long long *)(a1 + 216);
  uint64_t v40 = (long long *)(a2 + 216);
  uint64_t v41 = *(void *)(a2 + 248);
  if (*(void *)(a1 + 248) == 1)
  {
    if (v41 == 1)
    {
      long long v42 = *v40;
      long long v43 = *(_OWORD *)(a2 + 232);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
      *id v39 = v42;
      *(_OWORD *)(a1 + 232) = v43;
    }
    else
    {
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      uint64_t v46 = *(void *)(a2 + 224);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      *(void *)(a1 + 224) = v46;
      *(unsigned char *)(a1 + 233) = *(unsigned char *)(a2 + 233);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
    }
  }
  else if (v41 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    uint64_t v44 = *(void *)(a2 + 248);
    long long v45 = *(_OWORD *)(a2 + 232);
    *id v39 = *v40;
    *(_OWORD *)(a1 + 232) = v45;
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v44;
  }
  else
  {
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
    uint64_t v47 = *(void *)(a2 + 224);
    *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
    *(void *)(a1 + 224) = v47;
    *(unsigned char *)(a1 + 233) = *(unsigned char *)(a2 + 233);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v48 = (long long *)(a1 + 256);
  uint64_t v49 = (long long *)(a2 + 256);
  uint64_t v50 = *(void *)(a1 + 288);
  uint64_t v51 = *(void *)(a2 + 288);
  if (v50 == 1)
  {
    if (v51 == 1)
    {
      long long v52 = *v49;
      long long v53 = *(_OWORD *)(a2 + 272);
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
LABEL_39:
      *uint64_t v48 = v52;
      v48[1] = v53;
      goto LABEL_50;
    }
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
    *(unsigned char *)(a1 + 25++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 258);
    if (!*(void *)(a2 + 288))
    {
      long long v56 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v56;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v51 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    uint64_t v54 = *(void *)(a2 + 288);
    long long v55 = *(_OWORD *)(a2 + 272);
    *uint64_t v48 = *v49;
    *(_OWORD *)(a1 + 272) = v55;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = v54;
    goto LABEL_50;
  }
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
  *(unsigned char *)(a1 + 25++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 258);
  uint64_t v48 = (long long *)(a1 + 264);
  long long v57 = (long long *)(a2 + 264);
  uint64_t v58 = *(void *)(a2 + 288);
  if (!v50)
  {
    if (!v58)
    {
      long long v52 = *v57;
      long long v53 = *(_OWORD *)(a2 + 280);
      goto LABEL_39;
    }
LABEL_48:
    uint64_t v65 = *(void *)(a2 + 264);
    uint64_t v66 = *(void *)(a2 + 272);
    char v67 = *(unsigned char *)(a2 + 280);
    outlined copy of Text.Storage(v65, v66, v67);
    *(void *)(a1 + 264) = v65;
    *(void *)(a1 + 272) = v66;
    *(unsigned char *)(a1 + 280) = v67;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    goto LABEL_50;
  }
  if (v58)
  {
    uint64_t v59 = *(void *)(a2 + 264);
    uint64_t v60 = *(void *)(a2 + 272);
    char v61 = *(unsigned char *)(a2 + 280);
    outlined copy of Text.Storage(v59, v60, v61);
    uint64_t v62 = *(void *)(a1 + 264);
    uint64_t v63 = *(void *)(a1 + 272);
    char v64 = *(unsigned char *)(a1 + 280);
    *(void *)(a1 + 264) = v59;
    *(void *)(a1 + 272) = v60;
    *(unsigned char *)(a1 + 280) = v61;
    outlined consume of Text.Storage(v62, v63, v64);
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(a1 + 264);
    long long v68 = *(_OWORD *)(a2 + 280);
    *uint64_t v48 = *v57;
    *(_OWORD *)(a1 + 280) = v68;
  }
LABEL_50:
  long long v69 = *(void **)(a1 + 296);
  char v70 = *(void **)(a2 + 296);
  *(void *)(a1 + 296) = v70;
  id v71 = v70;

  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_retain();
  swift_release();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(unsigned char *)(a1 + 321) = *(unsigned char *)(a2 + 321);
  id v72 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v73 = v72[21];
  uint64_t v74 = (unsigned char *)(a1 + v73);
  uint64_t v75 = (unsigned char *)(a2 + v73);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v77 = v76;
  uint64_t v78 = *(void *)(v76 - 8);
  char v79 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v78 + 48);
  int v80 = v79(v74, 2, v76);
  int v81 = v79(v75, 2, v77);
  if (v80)
  {
    if (!v81)
    {
      uint64_t v82 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v82 - 8) + 16))(v74, v75, v82);
      v74[*(int *)(v77 + 48)] = v75[*(int *)(v77 + 48)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v78 + 56))(v74, 0, 2, v77);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v81)
  {
    outlined destroy of Text.Resolved((uint64_t)v74, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_55:
    uint64_t v83 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v74, v75, *(void *)(*(void *)(v83 - 8) + 64));
    goto LABEL_56;
  }
  uint64_t v101 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v101 - 8) + 24))(v74, v75, v101);
  v74[*(int *)(v77 + 48)] = v75[*(int *)(v77 + 48)];
LABEL_56:
  uint64_t v84 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v85 = &v74[v84];
  uint64_t v86 = &v75[v84];
  char v87 = v86[8];
  *(void *)uint64_t v85 = *(void *)v86;
  v85[8] = v87;
  *(void *)(a1 + v72[22]) = *(void *)(a2 + v72[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v88 = v72[23];
  uint64_t v89 = (void *)(a1 + v88);
  uint64_t v90 = (void *)(a2 + v88);
  uint64_t v91 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v92 = *(void *)(v91 - 8);
  uint64_t v93 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v92 + 48);
  int v94 = v93(v89, 1, v91);
  int v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, void *, uint64_t))(v92 + 24))(v89, v90, v91);
      goto LABEL_62;
    }
    (*(void (**)(void *, uint64_t))(v92 + 8))(v89, v91);
    goto LABEL_61;
  }
  if (v95)
  {
LABEL_61:
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v89, v90, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(void *, void *, uint64_t))(v92 + 16))(v89, v90, v91);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_62:
  *(void *)(a1 + v72[24]) = *(void *)(a2 + v72[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v97 = a3[6];
  uint64_t v98 = (void *)(a1 + v97);
  uint64_t v99 = (void *)(a2 + v97);
  *uint64_t v98 = *v99;
  v98[1] = v99[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Text.ResolvedString(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v9;
  long long v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = *(_OWORD *)(a2 + 216);
  long long v12 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  long long v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  uint64_t v14 = *(void *)(a2 + 296);
  *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v14;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v15 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v16 = v15[21];
  long long v17 = (char *)(a1 + v16);
  long long v18 = (char *)(a2 + v16);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 2, v19))
  {
    uint64_t v22 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v23 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v17, v18, v23);
    v17[*(int *)(v20 + 48)] = v18[*(int *)(v20 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 2, v20);
  }
  uint64_t v24 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  long long v25 = &v17[v24];
  long long v26 = &v18[v24];
  *(void *)long long v25 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)(a1 + v15[22]) = *(void *)(a2 + v15[22]);
  uint64_t v27 = v15[23];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  *(void *)(a1 + v15[24]) = *(void *)(a2 + v15[24]);
  uint64_t v33 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Text.ResolvedString(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)a2;
  if (*(void *)a1 < 2uLL) {
    goto LABEL_4;
  }
  if (v6 < 2)
  {
    outlined destroy of Font(a1);
    unint64_t v6 = *(void *)a2;
LABEL_4:
    *(void *)a1 = v6;
    goto LABEL_6;
  }
  *(void *)a1 = v6;
  swift_release();
LABEL_6:
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  outlined consume of Text.Style.TextStyleColor(v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  long long v8 = (_OWORD *)(a2 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - 1) < 2)
  {
LABEL_9:
    *(_OWORD *)(a1 + 80) = *v8;
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  if ((unint64_t)(v9 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 80);
    goto LABEL_9;
  }
  *(void *)(a1 + 80) = *(void *)v8;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v9;
  swift_release();
LABEL_11:
  long long v10 = (_OWORD *)(a2 + 96);
  if ((unint64_t)(*(void *)(a1 + 104) - 1) < 2)
  {
LABEL_14:
    *(_OWORD *)(a1 + 96) = *v10;
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)(a2 + 104);
  if ((unint64_t)(v11 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(a1 + 96);
    goto LABEL_14;
  }
  *(void *)(a1 + 96) = *(void *)v10;
  *(void *)(a1 + 104) = v11;
  swift_release();
LABEL_16:
  long long v12 = (_OWORD *)(a1 + 112);
  long long v13 = (_OWORD *)(a2 + 112);
  if (*(void *)(a1 + 176) == 1)
  {
LABEL_19:
    long long v15 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v15;
    *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
    long long v16 = *(_OWORD *)(a2 + 128);
    *long long v12 = *v13;
    *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v16;
    long long v17 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v17;
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)(a2 + 176);
  if (v14 == 1)
  {
    outlined destroy of Text.Encapsulation(a1 + 112);
    goto LABEL_19;
  }
  *(void *)long long v12 = *(void *)v13;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 16++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 176) = v14;
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 20++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + 208);
LABEL_21:
  if (*(void *)(a1 + 248) == 1)
  {
LABEL_24:
    long long v19 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v19;
    *(void *)(a1 + 24++*(_DWORD *)(result + 8) = *(void *)(a2 + 248);
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(a2 + 248);
  if (v18 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(a1 + 216);
    goto LABEL_24;
  }
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 24++*(_DWORD *)(result + 8) = v18;
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v20 = *(void *)(a1 + 288);
  uint64_t v62 = a3;
  if (v20 == 1)
  {
LABEL_29:
    long long v22 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v22;
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
    goto LABEL_30;
  }
  uint64_t v21 = *(void *)(a2 + 288);
  if (v21 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(a1 + 256);
    goto LABEL_29;
  }
  uint64_t v54 = (_OWORD *)(a1 + 264);
  long long v55 = (_OWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
  if (v20)
  {
    if (v21)
    {
      char v56 = *(unsigned char *)(a2 + 280);
      uint64_t v57 = *(void *)(a1 + 264);
      uint64_t v58 = *(void *)(a1 + 272);
      char v59 = *(unsigned char *)(a1 + 280);
      *uint64_t v54 = *v55;
      *(unsigned char *)(a1 + 280) = v56;
      outlined consume of Text.Storage(v57, v58, v59);
      *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *(void *)(a2 + 288);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    outlined destroy of Text(a1 + 264);
  }
  long long v61 = *(_OWORD *)(a2 + 280);
  *uint64_t v54 = *v55;
  *(_OWORD *)(a1 + 280) = v61;
LABEL_30:
  uint64_t v23 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);

  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_release();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_release();
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v24 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v25 = v24[21];
  long long v26 = (unsigned char *)(a1 + v25);
  uint64_t v27 = (unsigned char *)(a2 + v25);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v26, 2, v28);
  int v33 = v31(v27, 2, v29);
  if (v32)
  {
    if (!v33)
    {
      uint64_t v34 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 32))(v26, v27, v34);
      v26[*(int *)(v29 + 48)] = v27[*(int *)(v29 + 48)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 2, v29);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v33)
  {
    outlined destroy of Text.Resolved((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_35:
    uint64_t v35 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v26, v27, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_36;
  }
  uint64_t v60 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v60 - 8) + 40))(v26, v27, v60);
  v26[*(int *)(v29 + 48)] = v27[*(int *)(v29 + 48)];
LABEL_36:
  uint64_t v36 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v37 = &v26[v36];
  uint64_t v38 = &v27[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  *(void *)(a1 + v24[22]) = *(void *)(a2 + v24[22]);
  swift_bridgeObjectRelease();
  uint64_t v39 = v24[23];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  uint64_t v42 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 40))(v40, v41, v42);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
    goto LABEL_41;
  }
  if (v46)
  {
LABEL_41:
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, void *, uint64_t))(v43 + 32))(v40, v41, v42);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_42:
  *(void *)(a1 + v24[24]) = *(void *)(a2 + v24[24]);
  swift_bridgeObjectRelease();
  uint64_t v48 = v62[6];
  *(_OWORD *)(a1 + v62[5]) = *(_OWORD *)(a2 + v62[5]);
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  void *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v62[7]) = *(unsigned char *)(a2 + v62[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.ResolvedString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245FB3E28);
}

uint64_t sub_245FB3E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Text.Style(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Text.ResolvedString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245FB3F00);
}

uint64_t sub_245FB3F00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Text.Style(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + ++*(_DWORD *)(result + 8) = (a2 - 1);
  }
  return result;
}

uint64_t outlined destroy of AttributedString?(uint64_t a1)
{
  _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString?, MEMORY[0x263F06828]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #1 in Text.ResolvedString.append<A>(resolvable:in:with:transition:)()
{
  return implicit closure #1 in Text.Resolved.append<A>(resolvable:in:with:transition:)();
}

ValueMetadata *type metadata accessor for EnvironmentValues.DisableLinkColorKey()
{
  return &type metadata for EnvironmentValues.DisableLinkColorKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ResolvedTextProviderKey()
{
  return &type metadata for EnvironmentValues.ResolvedTextProviderKey;
}

uint64_t ResolvableTimer.init(interval:pause:countdown:units:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  int v37 = a4;
  int v38 = a6;
  uint64_t v39 = a5;
  uint64_t v40 = 0;
  int v36 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for TimeZone();
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  MEMORY[0x270FA5388](v11);
  int v45 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v42 = *(void *)(v13 - 8);
  uint64_t v43 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v41 = (uint64_t)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Calendar();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *a7;
  uint64_t v19 = a7[1];
  uint64_t v21 = (int *)type metadata accessor for ResolvableTimer();
  uint64_t v22 = a8 + v21[5];
  uint64_t v23 = type metadata accessor for DateInterval();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 16);
  uint64_t v46 = a1;
  uint64_t v44 = v23;
  v25(a8, a1);
  *(void *)uint64_t v22 = v35;
  char v26 = v37;
  *(unsigned char *)(v22 + ++*(_DWORD *)(result + 8) = v36 & 1;
  *(unsigned char *)(a8 + v21[6]) = v26;
  uint64_t v27 = 224;
  if ((v38 & 1) == 0) {
    uint64_t v27 = v39;
  }
  *(void *)(a8 + v21[7]) = v27;
  if (v19)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v20, (uint64_t)v18);
  }
  else
  {
    uint64_t v28 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v28, (uint64_t)v18);
  }
  swift_release_n();
  swift_release_n();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a8 + v21[8], v18, v15);
  uint64_t v29 = (uint64_t)v45;
  if (v19)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v30 = v41;
    specialized PropertyList.Tracker.value<A>(_:for:)(v20, v41);
  }
  else
  {
    uint64_t v31 = swift_retain_n();
    uint64_t v30 = v41;
    specialized closure #1 in PropertyList.subscript.getter(v31, v41);
  }
  swift_release_n();
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(a8 + v21[9], v30, v43);
  if (v19)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v20, v29);
    swift_release_n();
  }
  else
  {
    uint64_t v32 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v32, v29);
    swift_release();
  }
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v46, v44);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(a8 + v21[10], v29, v48);
}

uint64_t type metadata accessor for ResolvableTimer()
{
  uint64_t result = type metadata singleton initialization cache for ResolvableTimer;
  if (!type metadata singleton initialization cache for ResolvableTimer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ResolvableTimer.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ResolvableTimer();
  if (*(unsigned char *)(v1 + *(int *)(v7 + 20) + 8))
  {
    type metadata accessor for (pauseDate: Date)(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(a1, 1, 1, v8);
  }
  else
  {
    uint64_t v11 = (void (**)(char *, uint64_t))(v4 + 8);
    if (*(unsigned char *)(v1 + *(int *)(v7 + 24)) == 1)
    {
      DateInterval.end.getter();
      static Date.- infix(_:_:)();
    }
    else
    {
      DateInterval.start.getter();
      static Date.+ infix(_:_:)();
    }
    (*v11)(v6, v3);
    type metadata accessor for (pauseDate: Date)(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 0, 1, v12);
  }
}

uint64_t ResolvableTimer.format.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v98 = a1;
  uint64_t v2 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v2);
  uint64_t v97 = (uint64_t)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v85 - v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v96 = (char *)&v85 - v8;
  type metadata accessor for (lower: Date, upper: Date)();
  unint64_t v10 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v85 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void **)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v85 - v21;
  type metadata accessor for Range<Date>();
  uint64_t v100 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v88 = (uint64_t)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v89 = (uint64_t)&v85 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v86 = (uint64_t)&v85 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v87 = (uint64_t)&v85 - v30;
  MEMORY[0x270FA5388](v31);
  int v95 = (char *)&v85 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v102 = (uint64_t)&v85 - v34;
  DateInterval.start.getter();
  uint64_t v101 = v1;
  DateInterval.end.getter();
  _s10Foundation4DateVACSLAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t v99 = v16;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    unint64_t v90 = v10;
    uint64_t v91 = (int *)v2;
    int v94 = v6;
    int v36 = v22;
    int v37 = v19;
    unint64_t v38 = v10;
    uint64_t v39 = &v15[*(int *)(v10 + 48)];
    uint64_t v40 = (void (*)(char *, char *, uint64_t))v17[4];
    uint64_t v41 = v99;
    v40(v15, v36, v99);
    v40(v39, v37, v41);
    uint64_t v42 = &v12[*(int *)(v38 + 48)];
    uint64_t v43 = (void (*)(char *, char *, uint64_t))v17[2];
    v43(v12, v15, v41);
    uint64_t v92 = v43;
    uint64_t v93 = v17 + 2;
    v43(v42, v39, v41);
    uint64_t v44 = (uint64_t)v95;
    v40(v95, v12, v41);
    int v45 = (void (*)(char *, uint64_t))v17[1];
    v45(v42, v41);
    uint64_t v46 = &v12[*(int *)(v90 + 48)];
    v40(v12, v15, v41);
    v40(v46, v39, v41);
    v40((char *)(v44 + *(int *)(v100 + 36)), v46, v41);
    v45(v12, v41);
    _sSny10Foundation4DateVGWObTm_0(v44, v102, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    uint64_t v47 = type metadata accessor for ResolvableTimer();
    uint64_t v49 = *(int *)(v47 + 24);
    uint64_t v48 = *(int *)(v47 + 28);
    int v95 = (char *)v47;
    uint64_t v50 = *(void *)(v101 + v48);
    unint64_t v90 = v50 & 0x20;
    uint64_t v51 = 1000000000000000000;
    if ((v50 & 0x80) == 0) {
      uint64_t v51 = 0x40AAD21B3B700000;
    }
    if ((v50 & 0x8000) != 0) {
      uint64_t v52 = 10000000000000000;
    }
    else {
      uint64_t v52 = v51;
    }
    if ((v50 & 0x8080) != 0) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = 3;
    }
    if (*(unsigned char *)(v101 + v49) == 1)
    {
      uint64_t v54 = v87;
      outlined init with copy of Range<Date>(v102, v87, (uint64_t (*)(void))type metadata accessor for Range<Date>);
      uint64_t v55 = v86;
      outlined init with copy of Range<Date>(v54, v86, (uint64_t (*)(void))type metadata accessor for Range<Date>);
      char v56 = v91;
      uint64_t v57 = v96;
      *(void *)&v96[v91[11]] = 0;
      uint64_t v58 = static Locale.autoupdatingCurrent.getter();
      v57[v56[13]] = 1;
      v57[v56[14]] = 0;
      MEMORY[0x24C520B20](v58);
      v57[v56[16]] = 3;
      *(void *)&v57[v56[17]] = 0;
      *(void *)&v57[v56[18]] = 0;
      *(void *)&v57[v56[19]] = 0;
      char v59 = static Duration.< infix(_:_:)();
      if (v59) {
        uint64_t v60 = 0x28093E61EE400000;
      }
      else {
        uint64_t v60 = v52;
      }
      if (v59) {
        uint64_t v53 = 195;
      }
      *uint64_t v57 = 1;
      v92(&v57[v56[5]], (char *)v55, v99);
      Date.timeIntervalSince(_:)();
      uint64_t v61 = static Duration.seconds(_:)();
      uint64_t v63 = v62;
      _sSny10Foundation4DateVGWOhTm_1(v55, (uint64_t (*)(void))type metadata accessor for Range<Date>);
      char v64 = (uint64_t *)&v57[v56[6]];
      *char v64 = v61;
      v64[1] = v63;
      v57[v56[7]] = v90 >> 5;
      *(void *)&v57[v56[8]] = 3;
      uint64_t v65 = (uint64_t *)&v57[v56[9]];
      *uint64_t v65 = v60;
      v65[1] = v53;
      uint64_t v66 = (uint64_t *)&v57[v56[10]];
      *uint64_t v66 = v60;
      v66[1] = v53;
      _sSny10Foundation4DateVGWOhTm_1(v54, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    }
    else
    {
      uint64_t v67 = v89;
      outlined init with copy of Range<Date>(v102, v89, (uint64_t (*)(void))type metadata accessor for Range<Date>);
      uint64_t v68 = v88;
      outlined init with copy of Range<Date>(v67, v88, (uint64_t (*)(void))type metadata accessor for Range<Date>);
      char v56 = v91;
      uint64_t v57 = v96;
      *(void *)&v96[v91[11]] = 0;
      uint64_t v69 = static Locale.autoupdatingCurrent.getter();
      v57[v56[13]] = 1;
      uint64_t v70 = v56[14];
      v57[v70] = 0;
      MEMORY[0x24C520B20](v69);
      v57[v56[16]] = 3;
      *(void *)&v57[v56[17]] = 0;
      *(void *)&v57[v56[18]] = 0;
      *(void *)&v57[v56[19]] = 0;
      char v71 = static Duration.< infix(_:_:)();
      if (v71) {
        uint64_t v72 = 0x28093E61EE400000;
      }
      else {
        uint64_t v72 = v52;
      }
      if (v71) {
        uint64_t v53 = 195;
      }
      *uint64_t v57 = 0;
      v92(&v57[v56[5]], (char *)v68, v99);
      Date.timeIntervalSince(_:)();
      uint64_t v73 = static Duration.seconds(_:)();
      uint64_t v75 = v74;
      _sSny10Foundation4DateVGWOhTm_1(v68, (uint64_t (*)(void))type metadata accessor for Range<Date>);
      uint64_t v76 = (uint64_t *)&v57[v56[6]];
      uint64_t *v76 = v73;
      v76[1] = v75;
      v57[v56[7]] = v90 >> 5;
      *(void *)&v57[v56[8]] = 3;
      uint64_t v77 = (uint64_t *)&v57[v56[9]];
      uint64_t *v77 = v72;
      v77[1] = v53;
      uint64_t v78 = (uint64_t *)&v57[v56[10]];
      *uint64_t v78 = v72;
      v78[1] = v53;
      _sSny10Foundation4DateVGWOhTm_1(v67, (uint64_t (*)(void))type metadata accessor for Range<Date>);
      *uint64_t v57 = 2;
      v57[v70] = 1;
    }
    uint64_t v79 = v101 + *((int *)v95 + 9);
    uint64_t v80 = v97;
    outlined init with copy of Range<Date>((uint64_t)v57, v97, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v81 = v80 + v56[12];
    uint64_t v82 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 24))(v81, v79, v82);
    uint64_t v83 = (uint64_t)v94;
    _sSny10Foundation4DateVGWObTm_0(v80, (uint64_t)v94, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    _sSny10Foundation4DateVGWOhTm_1((uint64_t)v57, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    _sSny10Foundation4DateVGWOhTm_1(v102, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    uint64_t v84 = v98;
    outlined init with copy of Range<Date>(v83, v98, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    *(unsigned char *)(v84 + v56[13]) = 1;
    return _sSny10Foundation4DateVGWOhTm_1(v83, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ResolvableTimer.defaultUnits.getter()
{
  return 224;
}

uint64_t ResolvableTimer.interval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ResolvableTimer.interval.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ResolvableTimer.interval.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableTimer.pause.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ResolvableTimer() + 20));
}

uint64_t ResolvableTimer.pause.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ResolvableTimer();
  uint64_t v6 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + ++*(_DWORD *)(result + 8) = a2 & 1;
  return result;
}

uint64_t (*ResolvableTimer.pause.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableTimer.countdown.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ResolvableTimer() + 24));
}

uint64_t ResolvableTimer.countdown.setter(char a1)
{
  uint64_t result = type metadata accessor for ResolvableTimer();
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*ResolvableTimer.countdown.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of ResolvableTimer.units@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ResolvableTimer.units.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ResolvableTimer() + 28));
}

uint64_t ResolvableTimer.units.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for ResolvableTimer();
  *(void *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*ResolvableTimer.units.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableTimer.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableTimer() + 32);
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResolvableTimer.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableTimer() + 36);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResolvableTimer.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableTimer() + 40);
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableTimer.CodingKeys()
{
  uint64_t result = 0x6C61767265746E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6573756170;
      break;
    case 2:
      uint64_t result = 0x776F64746E756F63;
      break;
    case 3:
      uint64_t result = 0x7374696E75;
      break;
    case 4:
      uint64_t result = 0x7261646E656C6163;
      break;
    case 5:
      uint64_t result = 0x656C61636F6CLL;
      break;
    case 6:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableTimer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableTimer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableTimer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableTimer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

id static ResolvableTimer.attribute.getter()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ResolvableTimer.attribute;

  return v0;
}

uint64_t static ResolvableTimer.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v4 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (pauseDate: Date)(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for ResolvableTimer();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v32);
  uint64_t result = ResolvableTimer.init(from:)(v32, (uint64_t)v18);
  if (!v2)
  {
    uint64_t v29 = v6;
    uint64_t v20 = v31;
    if (v18[*(int *)(v16 + 20) + 8])
    {
      type metadata accessor for (pauseDate: Date)(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v12, 1, 1, v21);
      uint64_t v22 = (uint64_t)v29;
    }
    else
    {
      char v23 = v18[*(int *)(v16 + 24)];
      uint64_t v24 = (void (**)(char *, uint64_t))(v30 + 8);
      if (v23)
      {
        DateInterval.end.getter();
        static Date.- infix(_:_:)();
      }
      else
      {
        DateInterval.start.getter();
        static Date.+ infix(_:_:)();
      }
      uint64_t v22 = (uint64_t)v29;
      (*v24)(v9, v7);
      type metadata accessor for (pauseDate: Date)(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 0, 1, v25);
    }
    outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v12, (uint64_t)v15);
    ResolvableTimer.format.getter(v22);
    type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>();
    uint64_t v27 = v26;
    v20[3] = (uint64_t)v26;
    v20[4] = _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance TimeDataFormatting.Resolvable<A, B>, (void (*)(uint64_t))type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
    specialized static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)((uint64_t)boxed_opaque_existential_1 + v27[17], (uint64_t)v15, 60.0, v22, 0);
    outlined init with copy of TimeDataSource<Date><A>.DateStorage((uint64_t)v15, (uint64_t)boxed_opaque_existential_1);
    outlined init with copy of Range<Date>(v22, (uint64_t)boxed_opaque_existential_1 + v27[15], (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    *(uint64_t *)((char *)boxed_opaque_existential_1 + v27[16]) = 0x404E000000000000;
    *(uint64_t *)((char *)boxed_opaque_existential_1 + v27[18]) = 0;
    _sSny10Foundation4DateVGWOhTm_1(v22, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    outlined destroy of TimeDataSource<Date><A>.DateStorage((uint64_t)v15);
    return _sSny10Foundation4DateVGWOhTm_1((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResolvableTimer);
  }
  return result;
}

uint64_t ResolvableTimer.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v42 = type metadata accessor for TimeZone();
  uint64_t v39 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Locale();
  uint64_t v49 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v43 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Calendar();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  uint64_t v46 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateInterval();
  uint64_t v47 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v52 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<ResolvableTimer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableTimer.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v13 = type metadata accessor for ResolvableTimer();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v15[*(int *)(v16 + 20)];
  *(void *)uint64_t v17 = 0;
  v17[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();
  uint64_t v53 = v12;
  uint64_t v18 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v38 = (int *)v13;
  uint64_t v19 = v15;
  uint64_t v20 = (uint64_t)a1;
  uint64_t v21 = v48;
  uint64_t v22 = v49;
  char v62 = 0;
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x263F062D0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v15, v52, v8);
  char v61 = 1;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v37 = v8;
  *(void *)uint64_t v17 = v23;
  v17[8] = v24 & 1;
  char v60 = 2;
  char v25 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v22;
  uint64_t v27 = v46;
  uint64_t v28 = v38;
  uint64_t v29 = (uint64_t)v19;
  v19[v38[6]] = v25 & 1;
  type metadata accessor for CodableRawRepresentable<NSCalendarUnit>();
  char v59 = 3;
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSCalendarUnit> and conformance CodableRawRepresentable<A>, (void (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSCalendarUnit>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v19[v28[7]] = v55;
  char v58 = 4;
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  uint64_t v30 = v45;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29 + v38[8], v21, v30);
  char v57 = 5;
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  uint64_t v32 = v43;
  uint64_t v31 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v33 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v29 + v38[9], v32, v31);
  char v56 = 6;
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  uint64_t v35 = v41;
  uint64_t v34 = v42;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v51);
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v29 + v33[10], v35, v34);
  outlined init with copy of Range<Date>(v29, v40, (uint64_t (*)(void))type metadata accessor for ResolvableTimer);
  __swift_destroy_boxed_opaque_existential_1(v20);
  return _sSny10Foundation4DateVGWOhTm_1(v29, (uint64_t (*)(void))type metadata accessor for ResolvableTimer);
}

uint64_t ResolvableTimer.invalidationConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  uint64_t v4 = *(int *)(v3 + 48);
  uint64_t v5 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, v1, v5);
  *(unsigned char *)(a1 + v4) = *(unsigned char *)(v1 + *(int *)(type metadata accessor for ResolvableTimer() + 24));
  type metadata accessor for ResolvableAttributeConfiguration(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t ResolvableTimer.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedDecodingContainer<ResolvableTimer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableTimer.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v12[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  type metadata accessor for DateInterval();
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x263F062D0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for ResolvableTimer();
    char v15 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(v10 + 28));
    v12[15] = 3;
    type metadata accessor for CodableRawRepresentable<NSCalendarUnit>();
    _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSCalendarUnit> and conformance CodableRawRepresentable<A>, (void (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSCalendarUnit>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[14] = 4;
    type metadata accessor for Calendar();
    _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[13] = 5;
    type metadata accessor for Locale();
    _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[12] = 6;
    type metadata accessor for TimeZone();
    _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for ConfigurationBasedResolvableStringAttributeRepresentation.invalidationConfiguration.getter in conformance ResolvableTimer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  uint64_t v6 = *(int *)(v5 + 48);
  uint64_t v7 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, v2, v7);
  *(unsigned char *)(a2 + v6) = *(unsigned char *)(v2 + *(int *)(a1 + 24));
  type metadata accessor for ResolvableAttributeConfiguration(0);

  return swift_storeEnumTagMultiPayload();
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableTimer()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ResolvableTimer.attribute;

  return v0;
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableTimer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static ResolvableTimer.decode(from:)(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableTimer@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableTimer.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableTimer(void *a1)
{
  return ResolvableTimer.encode(to:)(a1);
}

uint64_t ResolvableTimer.hash(into:)()
{
  type metadata accessor for DateInterval();
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x263F062D0]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = (int *)type metadata accessor for ResolvableTimer();
  uint64_t v2 = v0 + v1[5];
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v3 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v3;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + v1[6]));
  Hasher._combine(_:)(*(void *)(v0 + v1[7]));
  type metadata accessor for Calendar();
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Locale();
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int ResolvableTimer.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvableTimer()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvableTimer()
{
  return Hasher._finalize()();
}

uint64_t ResolvableTimer.debugDescription.getter()
{
  _StringGuts.grow(_:)(82);
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  v1._object = (void *)0x8000000246223B80;
  String.append(_:)(v1);
  type metadata accessor for DateInterval();
  _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x263F062D0]);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x756170202020202CLL;
  v3._object = (void *)0xEC000000203A6573;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for ResolvableTimer();
  if (*(unsigned char *)(v0 + *(int *)(v4 + 20) + 8))
  {
    unint64_t v5 = 0xA300000000000000;
    uint64_t v6 = 9666786;
  }
  else
  {
    uint64_t v6 = Double.debugDescription.getter();
    unint64_t v5 = v7;
  }
  unint64_t v8 = v5;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000246223BA0;
  v9._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v9);
  if (*(unsigned char *)(v0 + *(int *)(v4 + 24))) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + *(int *)(v4 + 24))) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6E7520202020202CLL;
  v13._object = (void *)0xED0000203A737469;
  String.append(_:)(v13);
  type metadata accessor for NSCalendarUnit(0);
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 8745;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  return 0;
}

uint64_t outlined init with copy of Range<Date>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _sSny10Foundation4DateVGWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (pauseDate: Date)(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>()
{
  if (!lazy cache variable for type metadata for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>)
  {
    type metadata accessor for (pauseDate: Date)(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    type metadata accessor for SystemFormatStyle.Timer();
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
    unint64_t v0 = type metadata accessor for TimeDataFormatting.Resolvable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>);
    }
  }
}

uint64_t outlined destroy of TimeDataSource<Date><A>.DateStorage(uint64_t a1)
{
  type metadata accessor for (pauseDate: Date)(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedDecodingContainer<ResolvableTimer.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type ResolvableTimer.CodingKeys and conformance ResolvableTimer.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA51018, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t specialized static ResolvableTimer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static DateInterval.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  unint64_t v4 = (int *)type metadata accessor for ResolvableTimer();
  uint64_t v5 = v4;
  uint64_t v6 = v4[5];
  unint64_t v7 = (double *)(a1 + v6);
  char v8 = *(unsigned char *)(a1 + v6 + 8);
  Swift::String v9 = (double *)(a2 + v6);
  int v10 = *(unsigned __int8 *)(a2 + v6 + 8);
  if (v8)
  {
    if (!v10) {
      return 0;
    }
    goto LABEL_8;
  }
  if (*v7 != *v9) {
    LOBYTE(v10) = 1;
  }
  if ((v10 & 1) == 0)
  {
LABEL_8:
    if (*(unsigned __int8 *)(a1 + v4[6]) == *(unsigned __int8 *)(a2 + v4[6])
      && *(void *)(a1 + v4[7]) == *(void *)(a2 + v4[7])
      && (MEMORY[0x24C521A00](a1 + v4[8], a2 + v4[8]) & 1) != 0
      && (MEMORY[0x24C5218A0](a1 + v5[9], a2 + v5[9]) & 1) != 0)
    {
      JUMPOUT(0x24C521B70);
    }
  }
  return 0;
}

uint64_t instantiation function for generic protocol witness table for ResolvableTimer(uint64_t a1)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type ResolvableTimer and conformance ResolvableTimer, (void (*)(uint64_t))type metadata accessor for ResolvableTimer);
  uint64_t result = _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type ResolvableTimer and conformance ResolvableTimer, (void (*)(uint64_t))type metadata accessor for ResolvableTimer);
  *(void *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableTimer()
{
  return &protocol witness table for ResolvableTimer;
}

uint64_t base witness table accessor for Equatable in ResolvableTimer()
{
  return _s10Foundation4DateVACSLAAWlTm_2(&lazy protocol witness table cache variable for type ResolvableTimer and conformance ResolvableTimer, (void (*)(uint64_t))type metadata accessor for ResolvableTimer);
}

uint64_t sub_245FB72BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = type metadata accessor for ResolvableTimer();
  *a2 = *(void *)(a1 + *(int *)(result + 28));
  return result;
}

uint64_t sub_245FB72F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = type metadata accessor for ResolvableTimer();
  *(void *)(a2 + *(int *)(result + 28)) = v3;
  return result;
}

void *initializeBufferWithCopyOfBuffer for ResolvableTimer(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    unint64_t v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v12 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    Swift::String v13 = (char *)a1 + v12;
    Swift::String v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[9];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = a3[10];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for ResolvableTimer(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[8];
  uint64_t v6 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[9];
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[10];
  uint64_t v10 = type metadata accessor for TimeZone();
  unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

uint64_t initializeWithCopy for ResolvableTimer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + ++*(_DWORD *)(result + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t assignWithCopy for ResolvableTimer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + ++*(_DWORD *)(result + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for ResolvableTimer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + ++*(_DWORD *)(result + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for ResolvableTimer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + ++*(_DWORD *)(result + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v++*(_DWORD *)(result + 8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableTimer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245FB7C30);
}

uint64_t sub_245FB7C30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 254)
  {
    unsigned int v11 = *(unsigned __int8 *)(a1 + a3[6]);
    if (v11 >= 2) {
      return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  uint64_t v13 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[8];
LABEL_11:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_12;
  }
  uint64_t v16 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[9];
    goto LABEL_11;
  }
  uint64_t v17 = type metadata accessor for TimeZone();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[10];

  return v18(v20, a2, v19);
}

uint64_t storeEnumTagSinglePayload for ResolvableTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245FB7E1C);
}

uint64_t sub_245FB7E1C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 254)
  {
    *(unsigned char *)(a1 + a4[6]) = a2 + 1;
    return result;
  }
  uint64_t v13 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[8];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[9];
    goto LABEL_9;
  }
  uint64_t v17 = type metadata accessor for TimeZone();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[10];

  return v18(v20, a2, a2, v19);
}

uint64_t type metadata completion function for ResolvableTimer()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Calendar();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ResolvableTimer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    void *result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245FB8210);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResolvableTimer.CodingKeys()
{
  return &unk_26FA51018;
}

uint64_t specialized ResolvableTimer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6573756170 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7374696E75 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t *Text.init<A, B>(source:format:reducedLuminanceBudget:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  type metadata accessor for TimeDataFormattingStorage();
  swift_allocObject();
  return TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)(a1, a2, a3, v7);
}

uint64_t TimeDataSourceStorage.withValue(for:call:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v34 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v29 - v21;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(a5 + 40);
  uint64_t v32 = v6;
  v23(a1, a4, a5, v20);
  a2(v18);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v18, AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v31);
    uint64_t v25 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v34, 1, 1, v25);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v14, AssociatedTypeWitness);
    uint64_t v27 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(a5 + 48))(v22, a4, a5);
    v24(v22, AssociatedTypeWitness);
    uint64_t v28 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
  }
}

void TimeDataSource.BoxBase.textStorage<A>(for:)()
{
}

uint64_t TimeDataSourceStorage.end.getter@<X0>(uint64_t a1@<X8>)
{
  return TimeDataSourceStorage.end.getter(a1);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t *TimeDataSource<A>.DateBox.textStorage<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = a1;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v17 - v13;
  uint64_t v15 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage((unint64_t *)&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  v17[1] = v12;
  v17[2] = a2;
  v17[3] = v15;
  v17[4] = a3;
  v17[5] = a4;
  type metadata accessor for TimeDataFormattingStorage();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v4 + direct field offset for TimeDataSource<A>.DateBox.storage, (uint64_t)v14, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  (*(void (**)(char *, void, uint64_t))(v8 + 16))(v10, v17[0], a2);
  swift_allocObject();
  return TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)((uint64_t)v14, (uint64_t)v10, 0, 1);
}

uint64_t *TimeDataFormattingStorage.__allocating_init(source:format:reducedLuminanceBudget:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  swift_allocObject();
  return TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)(a1, a2, a3, v7);
}

uint64_t TimeDataSource<A>.DateBox.__ivar_destroyer()
{
  return outlined destroy of (pauseDate: Date)(v0 + direct field offset for TimeDataSource<A>.DateBox.storage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
}

uint64_t TimeDataSource<A>.DateBox.__deallocating_deinit()
{
  return TimeDataSource<A>.DateBox.__deallocating_deinit(&direct field offset for TimeDataSource<A>.DateBox.storage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
}

uint64_t TimeDataSource<A>.DateStorage.value(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v17 - v11;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v3, (uint64_t)&v17 - v11, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13) == 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 16))(a2, a1, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
  _s10Foundation4DateVACSLAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    uint64_t v15 = a2;
    uint64_t v16 = a1;
  }
  else
  {
    uint64_t v15 = a2;
    uint64_t v16 = v9;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v15, v16, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t type metadata accessor for TimeDataSource<A>.DateStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TimeDataSource<A>.DateStorage.date(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v17 - v11;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v3, (uint64_t)&v17 - v11, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13) == 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 16))(a2, a1, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
  _s10Foundation4DateVACSLAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    uint64_t v15 = a2;
    uint64_t v16 = a1;
  }
  else
  {
    uint64_t v15 = a2;
    uint64_t v16 = v9;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v15, v16, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t TimeDataSource<A>.DateStorage.round(_:_:toMultipleOf:)(double a1, uint64_t a2, uint64_t a3)
{
  Date.timeIntervalSinceReferenceDate.getter();
  specialized FloatingPoint.round(_:toMultipleOf:)(a3, a1);

  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t TimeDataSource<A>.DateStorage.convergesToZero(_:)()
{
  return 0;
}

uint64_t TimeDataSource<A>.DateStorage.end.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - v5;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v2, (uint64_t)&v13 - v5, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v8 = 1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if (v9 != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, v6, v10);
    uint64_t v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, v8, 1, v10);
}

void TimeDataSource<A>.DateStorage.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v9 - v6, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0x797469746E656469;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DateStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TimeDataSource<A>.DateStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateStorage.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateStorage.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return 0x7461446573756170;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7461446573756170 && a2 == 0xE900000000000065)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TimeDataSource<A>.DateStorage.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>();
  uint64_t v30 = *(void *)(v2 - 8);
  uint64_t v31 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v27 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v34 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>();
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v23 - v9;
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>();
  uint64_t v35 = v11;
  uint64_t v33 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v32, (uint64_t)v10, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v10, 1, v14) == 1)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    char v36 = 0;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    uint64_t v15 = v24;
    uint64_t v16 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v13, v16);
  }
  else
  {
    uint64_t v19 = v28;
    uint64_t v18 = v29;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v34, v10, v29);
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    char v37 = 1;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    double v20 = v27;
    uint64_t v21 = v35;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v22 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v22);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v34, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v13, v21);
  }
}

Swift::Int TimeDataSource<A>.DateStorage.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - v7;
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v8, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

uint64_t TimeDataSource<A>.DateStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  uint64_t v41 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v43 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>();
  uint64_t v38 = v6;
  uint64_t v48 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v46 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>();
  uint64_t v47 = v8;
  uint64_t v44 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  uint64_t v45 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v39 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v36 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
  uint64_t v16 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    goto LABEL_7;
  }
  uint64_t v18 = v45;
  uint64_t v17 = v46;
  char v37 = v15;
  uint64_t v49 = a1;
  uint64_t v20 = v47;
  uint64_t v19 = v48;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v26 = v18;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x263F8DCB0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v20);
    a1 = v49;
LABEL_7:
    uint64_t v27 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  char v22 = *(unsigned char *)(v21 + 32);
  uint64_t v36 = v21;
  if (v22)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    char v51 = 1;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    uint64_t v23 = v10;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for Date();
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v30 = (uint64_t)v39;
    uint64_t v29 = v40;
    uint64_t v31 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v32 = v44;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v20);
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v30, 0, 1, v34);
    uint64_t v35 = (uint64_t)v37;
    outlined init with take of TimeDataSource<Date><A>.DateStorage(v30, (uint64_t)v37, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  }
  else
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    char v50 = 0;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v20);
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    uint64_t v35 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v37, 1, 1, v33);
  }
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v35, v42, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  uint64_t v27 = (uint64_t)v49;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t protocol witness for TimeDataSourceStorage.round(_:_:toMultipleOf:) in conformance TimeDataSource<A><A>.DateStorage(double a1, uint64_t a2, uint64_t a3)
{
  Date.timeIntervalSinceReferenceDate.getter();
  specialized FloatingPoint.round(_:toMultipleOf:)(a3, a1);

  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t protocol witness for TimeDataSourceStorage.end.getter in conformance TimeDataSource<A><A>.DateStorage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v5, (uint64_t)v4, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v7 = 1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if (v8 != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a2, v4, v9);
    uint64_t v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, v7, 1, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataSource<A><A>.DateStorage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataSource<A>.DateStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataSource<A><A>.DateStorage(void *a1)
{
  return TimeDataSource<A>.DateStorage.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance TimeDataSource<A><A>.DateStorage()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)v7, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataSource<A><A>.DateStorage()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v8, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

uint64_t *TimeDataSource<A>.DurationBox.textStorage<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = a1;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v17 - v13;
  uint64_t v15 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  v17[1] = v12;
  v17[2] = a2;
  v17[3] = v15;
  v17[4] = a3;
  v17[5] = a4;
  type metadata accessor for TimeDataFormattingStorage();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v4 + direct field offset for TimeDataSource<A>.DurationBox.storage, (uint64_t)v14, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, void, uint64_t))(v8 + 16))(v10, v17[0], a2);
  swift_allocObject();
  return TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)((uint64_t)v14, (uint64_t)v10, 0, 1);
}

uint64_t TimeDataSource<A>.DurationBox.__ivar_destroyer()
{
  return outlined destroy of (pauseDate: Date)(v0 + direct field offset for TimeDataSource<A>.DurationBox.storage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
}

uint64_t TimeDataSource<A>.DurationBox.__deallocating_deinit()
{
  return TimeDataSource<A>.DateBox.__deallocating_deinit(&direct field offset for TimeDataSource<A>.DurationBox.storage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
}

uint64_t TimeDataSource<A>.DurationStorage.value(for:)()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10 - v6;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v10 - v6, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  Date.timeIntervalSince(_:)();
  uint64_t v8 = static Duration.seconds(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t TimeDataSource<A>.DurationStorage.date(for:)()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v9 - v6, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  Duration.components.getter();
  Date.addingTimeInterval(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t TimeDataSource<A>.DurationStorage.round(_:_:toMultipleOf:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Duration.components.getter();
  specialized FloatingPoint.round(_:toMultipleOf:)(a4, a1);

  return static Duration.seconds(_:)();
}

uint64_t TimeDataSource<A>.DurationStorage.convergesToZero(_:)()
{
  static Duration.zero.getter();

  return static Duration.< infix(_:_:)();
}

uint64_t TimeDataSource<A>.DurationStorage.hash(into:)()
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v6 - v2;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v6 - v2, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  uint64_t v4 = type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
}

uint64_t static TimeDataSource<A>.DurationStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(0, &lazy cache variable for type metadata for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage), &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v12 = (char *)&v15 + *(int *)(v11 + 56) - v9;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)&v15 - v9, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v12, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  LOBYTE(a2) = static Date.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v12, v4);
  v13(v7, v4);
  return a2 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  return 0x6E6F697461727564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DurationStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F697461727564 && a2 == 0xEE0074657366664FLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DurationStorage.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DurationStorage.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  return 1702125924;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TimeDataSource<A>.DurationStorage.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>();
  uint64_t v27 = v2;
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v25 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v21 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v22 = type metadata accessor for TimeDataSource<A>.DurationStorage;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - v7;
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>();
  uint64_t v10 = v9;
  uint64_t v28 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
  uint64_t v13 = v23;
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
  uint64_t v14 = v21;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v26, (uint64_t)v8, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))v22);
  uint64_t v15 = v8;
  uint64_t v17 = v24;
  uint64_t v16 = v25;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v14, v15, v24);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
  uint64_t v18 = v27;
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v14, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v12, v10);
}

Swift::Int TimeDataSource<A>.DurationStorage.hashValue.getter()
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v6 - v2;
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)v3, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  uint64_t v4 = type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return Hasher._finalize()();
}

uint64_t TimeDataSource<A>.DurationStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v25 = a2;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  uint64_t v31 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v27 = (char *)&v24 - v5;
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>();
  uint64_t v28 = v6;
  uint64_t v26 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v30 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>();
  uint64_t v9 = v8;
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v12 = v30;
    uint64_t v13 = v31;
    uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v15 = v9;
    if (*(void *)(v14 + 16) == 1)
    {
      uint64_t v31 = v14;
      _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
      lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
      uint64_t v16 = v12;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for Date();
      _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
      uint64_t v18 = (uint64_t)v27;
      uint64_t v17 = v28;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v17);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v15);
      outlined init with take of TimeDataSource<Date><A>.DateStorage(v18, v25, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
    }
    else
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v20;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *uint64_t v21 = v13;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      uint64_t v22 = v29;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v15);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

uint64_t protocol witness for TimeDataSourceStorage.value(for:) in conformance TimeDataSource<A><A>.DurationStorage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v9, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  Date.timeIntervalSince(_:)();
  uint64_t v10 = static Duration.seconds(_:)();
  uint64_t v12 = v11;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *a1 = v10;
  a1[1] = v12;
  return result;
}

uint64_t protocol witness for TimeDataSourceStorage.date(for:) in conformance TimeDataSource<A><A>.DurationStorage()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)v7, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  Duration.components.getter();
  Date.addingTimeInterval(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t protocol witness for TimeDataSourceStorage.round(_:_:toMultipleOf:) in conformance TimeDataSource<A><A>.DurationStorage@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>, double a3@<D0>)
{
  Duration.components.getter();
  specialized FloatingPoint.round(_:toMultipleOf:)(a1, a3);
  uint64_t result = static Duration.seconds(_:)();
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t protocol witness for TimeDataSourceStorage.convergesToZero(_:) in conformance TimeDataSource<A><A>.DurationStorage()
{
  static Duration.zero.getter();

  return static Duration.< infix(_:_:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataSource<A><A>.DurationStorage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataSource<A>.DurationStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataSource<A><A>.DurationStorage(void *a1)
{
  return TimeDataSource<A>.DurationStorage.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeDataSource<A><A>.DurationStorage(uint64_t a1)
{
  MEMORY[0x270FA5388](a1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v3, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  uint64_t v4 = type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TimeDataSource<A><A>.DurationStorage(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v3, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  uint64_t v4 = type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataSource<A><A>.DurationStorage(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v1, (uint64_t)v3, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  Hasher._combine(_:)(0);
  uint64_t v4 = type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataSource<A><A>.DurationStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(0, &lazy cache variable for type metadata for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage), &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v12 = (char *)&v15 + *(int *)(v11 + 56) - v9;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)&v15 - v9, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v12, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  LOBYTE(a2) = static Date.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v12, v4);
  v13(v7, v4);
  return a2 & 1;
}

uint64_t *TimeDataSource<A>.DateRangeBox.textStorage<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = a1;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v17 - v13;
  uint64_t v15 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  v17[1] = v12;
  v17[2] = a2;
  v17[3] = v15;
  v17[4] = a3;
  v17[5] = a4;
  type metadata accessor for TimeDataFormattingStorage();
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v4 + direct field offset for TimeDataSource<A>.DateRangeBox.storage, (uint64_t)v14, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  (*(void (**)(char *, void, uint64_t))(v8 + 16))(v10, v17[0], a2);
  swift_allocObject();
  return TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)((uint64_t)v14, (uint64_t)v10, 0, 1);
}

uint64_t TimeDataSource<A>.DateRangeBox.__ivar_destroyer()
{
  return outlined destroy of (pauseDate: Date)(v0 + direct field offset for TimeDataSource<A>.DateRangeBox.storage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
}

uint64_t TimeDataSource<A>.DateRangeBox.__deallocating_deinit()
{
  return TimeDataSource<A>.DateBox.__deallocating_deinit(&direct field offset for TimeDataSource<A>.DateRangeBox.storage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
}

uint64_t TimeDataSource<A>.DateBox.__deallocating_deinit(void *a1, unint64_t *a2, uint64_t (*a3)(void))
{
  outlined destroy of (pauseDate: Date)(v3 + *a1, a2, a3);

  return swift_deallocClassInstance();
}

uint64_t TimeDataSource<A>.DateRangeStorage.value(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v64 = a1;
  uint64_t v62 = a2;
  type metadata accessor for (lower: Date, upper: Date)();
  uint64_t v60 = v2;
  MEMORY[0x270FA5388](v2);
  char v58 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v57 = (char *)&v55 - v5;
  type metadata accessor for Range<Date>();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v6);
  char v61 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v56 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v55 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v55 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v55 - v19;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v55 - v22;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v63, (uint64_t)&v55 - v22, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v25 = (void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v63 = v10;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v59 = v7;
  if (EnumCaseMultiPayload == 1)
  {
    v26(v14, v23, v9);
    _s10Foundation4DateVACSLAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v28 = *v25;
    uint64_t v29 = v56;
    if (v27)
    {
      uint64_t v30 = v56;
      uint64_t v31 = v14;
    }
    else
    {
      uint64_t v30 = v56;
      uint64_t v31 = v64;
    }
    v28(v30, v31, v9);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      char v37 = v28;
      uint64_t v38 = v60;
      uint64_t v40 = v57;
      uint64_t v39 = v58;
      uint64_t v41 = &v57[*(int *)(v60 + 48)];
      v26(v57, v29, v9);
      char v64 = v41;
      v26(v41, v14, v9);
      uint64_t v42 = &v39[*(int *)(v38 + 48)];
      v37(v39, v40, v9);
      v37(v42, v41, v9);
      uint64_t v43 = (uint64_t)v61;
      v26(v61, v39, v9);
      uint64_t v44 = *(void (**)(char *, uint64_t))(v63 + 8);
      v44(v42, v9);
      uint64_t v45 = v44;
      uint64_t v46 = &v39[*(int *)(v38 + 48)];
      v26(v39, v40, v9);
      v26(v46, v64, v9);
      v26((char *)(v43 + *(int *)(v59 + 36)), v46, v9);
      v45(v39, v9);
      return outlined init with take of Range<Date>(v43, v62);
    }
    __break(1u);
  }
  else
  {
    v26(v20, v23, v9);
    _s10Foundation4DateVACSLAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    char v32 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v33 = *v25;
    if (v32)
    {
      uint64_t v34 = v17;
      uint64_t v35 = v64;
    }
    else
    {
      uint64_t v34 = v17;
      uint64_t v35 = v20;
    }
    v33(v34, v35, v9);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v47 = v17;
      uint64_t v48 = v60;
      uint64_t v49 = v57;
      char v50 = &v57[*(int *)(v60 + 48)];
      v26(v57, v20, v9);
      char v64 = v50;
      v26(v50, v47, v9);
      char v51 = v58;
      uint64_t v52 = &v58[*(int *)(v48 + 48)];
      v33(v58, v49, v9);
      v33(v52, v50, v9);
      uint64_t v43 = (uint64_t)v61;
      v26(v61, v51, v9);
      uint64_t v53 = *(void (**)(char *, uint64_t))(v63 + 8);
      v53(v52, v9);
      uint64_t v54 = &v51[*(int *)(v48 + 48)];
      v26(v51, v49, v9);
      v26(v54, v64, v9);
      v26((char *)(v43 + *(int *)(v59 + 36)), v54, v9);
      v53(v51, v9);
      return outlined init with take of Range<Date>(v43, v62);
    }
  }
  __break(1u);
  return result;
}

uint64_t TimeDataSource<A>.DateRangeStorage.date(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v14 - v7;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v3, (uint64_t)&v14 - v7, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  if (EnumCaseMultiPayload != 1)
  {
    type metadata accessor for Range<Date>();
    a1 += *(int *)(v12 + 36);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a2, a1, v10);
}

uint64_t TimeDataSource<A>.DateRangeStorage.round(_:_:toMultipleOf:)@<X0>(void (*a1)(char *, uint64_t)@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v72 = a1;
  uint64_t v73 = a2;
  uint64_t v69 = a3;
  type metadata accessor for (lower: Date, upper: Date)();
  uint64_t v74 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v68 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v66 = (char *)v65 - v8;
  type metadata accessor for Range<Date>();
  uint64_t v76 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v67 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  char v71 = (char *)v65 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v65 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v65 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v70 = (char *)v65 - v24;
  MEMORY[0x270FA5388](v25);
  char v27 = (char *)v65 - v26;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)v65 - v29;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage((uint64_t)v75, (uint64_t)v65 - v29, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v32 = v12 + 32;
  uint64_t v75 = v33;
  uint64_t v34 = (void (**)(char *, uint64_t))(v32 - 24);
  v65[1] = v32 - 24;
  if (EnumCaseMultiPayload == 1)
  {
    v75(v19, v30, v11);
    Date.timeIntervalSince(_:)();
    uint64_t v77 = v35;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v73, a4);
    static Date.+ infix(_:_:)();
    _s10Foundation4DateVACSLAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    char v36 = dispatch thunk of static Comparable.< infix(_:_:)();
    char v37 = *(void (**)(char *, char *, uint64_t))(v32 - 16);
    if (v36) {
      uint64_t v38 = v14;
    }
    else {
      uint64_t v38 = v19;
    }
    uint64_t v73 = (void (*)(char *, char *, uint64_t))(v32 - 16);
    v37(v71, v38, v11);
    uint64_t v39 = *v34;
    (*v34)(v14, v11);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v41 = v75;
      uint64_t v42 = v74;
      uint64_t v43 = v66;
      uint64_t v44 = &v66[*(int *)(v74 + 48)];
      v75(v66, v71, v11);
      v41(v44, v19, v11);
      uint64_t v45 = *(int *)(v42 + 48);
      uint64_t v46 = v68;
      uint64_t v47 = &v68[v45];
      v37(v68, v43, v11);
      v37(v47, v44, v11);
      uint64_t v48 = (uint64_t)v67;
      v41(v67, v46, v11);
      v39(v47, v11);
      uint64_t v49 = &v46[*(int *)(v74 + 48)];
      v41(v46, v43, v11);
      v41(v49, v44, v11);
      v41((char *)(v48 + *(int *)(v76 + 36)), v49, v11);
      v39(v46, v11);
      return outlined init with take of Range<Date>(v48, v69);
    }
    __break(1u);
  }
  else
  {
    v75(v27, v30, v11);
    Date.timeIntervalSince(_:)();
    uint64_t v77 = v50;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v73, a4);
    static Date.+ infix(_:_:)();
    _s10Foundation4DateVACSLAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    char v51 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v32 - 16);
    if (v51) {
      uint64_t v53 = v22;
    }
    else {
      uint64_t v53 = v27;
    }
    uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v32 - 16);
    v52(v70, v53, v11);
    uint64_t v54 = *v34;
    (*v34)(v22, v11);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v72 = v54;
      uint64_t v55 = v74;
      char v56 = v75;
      char v57 = v66;
      char v58 = &v66[*(int *)(v74 + 48)];
      v75(v66, v27, v11);
      uint64_t v59 = v58;
      char v71 = v58;
      v56(v58, v70, v11);
      uint64_t v60 = v68;
      char v61 = &v68[*(int *)(v55 + 48)];
      uint64_t v62 = v73;
      v73(v68, v57, v11);
      v62(v61, v59, v11);
      uint64_t v48 = (uint64_t)v67;
      v56(v67, v60, v11);
      uint64_t v63 = v72;
      v72(v61, v11);
      char v64 = &v60[*(int *)(v55 + 48)];
      v56(v60, v57, v11);
      v56(v64, v71, v11);
      v56((char *)(v48 + *(int *)(v76 + 36)), v64, v11);
      v63(v60, v11);
      return outlined init with take of Range<Date>(v48, v69);
    }
  }
  __break(1u);
  return result;
}

BOOL TimeDataSource<A>.DateRangeStorage.convergesToZero(_:)()
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v7 - v2;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v7 - v2, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  BOOL v4 = swift_getEnumCaseMultiPayload() == 1;
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  return v4;
}

uint64_t TimeDataSource<A>.DateRangeStorage.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  BOOL v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v10 - v6;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v0, (uint64_t)&v10 - v6, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  Swift::UInt v8 = swift_getEnumCaseMultiPayload() == 1;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  Hasher._combine(_:)(v8);
  _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TimeDataSource<A>.DateRangeStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TimeDataSource<A>.DateRangeStorage.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v32 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Date();
  uint64_t v37 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v39 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v28 = (char *)&v28 - v8;
  char v36 = type metadata accessor for TimeDataSource<A>.DateRangeStorage;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - v10;
  type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>();
  uint64_t v40 = v12;
  uint64_t v35 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
  uint64_t v42 = v14;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = v37;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v38, (uint64_t)v11, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))v36);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v18 = v41;
    v17(v39, v11, v41);
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    char v44 = 1;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    uint64_t v19 = v32;
    uint64_t v20 = v40;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v21 = v34;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v22 = v18;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v21);
    uint64_t v23 = v39;
  }
  else
  {
    uint64_t v23 = v28;
    uint64_t v24 = v41;
    v17(v28, v11, v41);
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    char v43 = 0;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    uint64_t v25 = v29;
    uint64_t v20 = v40;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v26 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v22 = v24;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v26);
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v42, v20);
}

Swift::Int TimeDataSource<A>.DateRangeStorage.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t TimeDataSource<A>.DateRangeStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>();
  uint64_t v38 = v3;
  uint64_t v40 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v47 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>();
  uint64_t v37 = v5;
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v46 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>();
  uint64_t v48 = v7;
  uint64_t v43 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  uint64_t v42 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v45 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  char v44 = (char *)&v36 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v36 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
  lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
  uint64_t v17 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    goto LABEL_7;
  }
  uint64_t v18 = v44;
  uint64_t v19 = v45;
  uint64_t v21 = v46;
  uint64_t v20 = v47;
  char v36 = v16;
  uint64_t v49 = a1;
  uint64_t v22 = v48;
  uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v24 = v22;
  if (*(void *)(v23 + 16) != 1)
  {
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v28 = v42;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x263F8DCB0], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v24);
    a1 = v49;
LABEL_7:
    uint64_t v29 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v29);
  }
  if (*(unsigned char *)(v23 + 32))
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    char v51 = 1;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v25 = v41;
    type metadata accessor for Date();
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v31 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v48);
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = (uint64_t)v19;
  }
  else
  {
    uint64_t v47 = (char *)v23;
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    char v50 = 0;
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for Date();
    _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v32 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v33 = v43;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v48);
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = v41;
    uint64_t v34 = (uint64_t)v18;
  }
  uint64_t v35 = (uint64_t)v36;
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v34, (uint64_t)v36, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v35, v25, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  uint64_t v29 = (uint64_t)v49;
  return __swift_destroy_boxed_opaque_existential_1(v29);
}

uint64_t protocol witness for TimeDataSourceStorage.date(for:) in conformance TimeDataSource<A><A>.DateRangeStorage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v6, (uint64_t)v5, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  if (EnumCaseMultiPayload != 1)
  {
    type metadata accessor for Range<Date>();
    v2 += *(int *)(v10 + 36);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v2, v8);
}

BOOL protocol witness for TimeDataSourceStorage.convergesToZero(_:) in conformance TimeDataSource<A><A>.DateRangeStorage()
{
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v3, (uint64_t)v2, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  BOOL v4 = swift_getEnumCaseMultiPayload() == 1;
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
  return v4;
}

uint64_t protocol witness for TimeDataSourceStorage.end.getter in conformance TimeDataSource<A><A>.DateRangeStorage@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Range<Date>();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataSource<A><A>.DateRangeStorage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataSource<A>.DateRangeStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataSource<A><A>.DateRangeStorage(void *a1)
{
  return TimeDataSource<A>.DateRangeStorage.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeDataSource<A><A>.DateRangeStorage()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataSource<A><A>.DateRangeStorage()
{
  return Hasher._finalize()();
}

uint64_t static TimeDataSource.currentDate.getter@<X0>(uint64_t *a1@<X8>)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v2 - 8);
  BOOL v4 = (char *)&v8 - v3;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateBox, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateBox);
  uint64_t v6 = swift_allocObject();
  uint64_t result = outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v4, v6 + direct field offset for TimeDataSource<A>.DateBox.storage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  *a1 = v6;
  return result;
}

uint64_t static TimeDataSource.durationOffset(to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationBox, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationBox);
  uint64_t v8 = swift_allocObject();
  uint64_t result = outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v6, v8 + direct field offset for TimeDataSource<A>.DurationBox.storage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  *a2 = v8;
  return result;
}

uint64_t static TimeDataSource.dateRange(startingAt:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static TimeDataSource.dateRange(startingAt:)(a1, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeBox, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeBox);
  uint64_t v8 = swift_allocObject();
  uint64_t result = outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v6, v8 + direct field offset for TimeDataSource<A>.DateRangeBox.storage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  *a2 = v8;
  return result;
}

uint64_t static TimeDataSource.dateRange(endingAt:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static TimeDataSource.dateRange(startingAt:)(a1, a2);
}

uint64_t Text.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Text.init<A, B>(_:format:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for AttributedString);
}

{
  return Text.init<A, B>(_:format:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for String);
}

uint64_t Text.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = specialized Text.init<A, B>(_:format:)(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  return v8;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A, B>(_:format:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for AttributedString);
}

{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A, B>(_:format:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for String);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)a1 + 88);
  swift_retain();
  uint64_t v11 = v10(a2, a4, a5, a6);
  swift_release();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v11, 0, 1, MEMORY[0x263F8EE78]);
  outlined consume of Text.Storage(v11, 0, 1);

  return swift_bridgeObjectRelease();
}

uint64_t *TimeDataFormattingStorage.init(source:format:reducedLuminanceBudget:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = (uint64_t)v4 + *(void *)(*v4 + 192);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + ++*(_DWORD *)(result + 8) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v8 + 136) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 176), a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v8 + 144) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 184), a2);
  *(void *)uint64_t v9 = a3;
  *(unsigned char *)(v9 + ++*(_DWORD *)(result + 8) = a4 & 1;
  return v4;
}

uint64_t TimeDataFormattingStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v166 = a5;
  uint64_t v165 = a4;
  unint64_t v175 = a3;
  uint64_t v164 = a1;
  uint64_t v170 = 0;
  uint64_t v7 = *v5;
  uint64_t v8 = *(_UNKNOWN ***)(*v5 + 144);
  uint64_t v9 = *(void *)(*v5 + 152);
  uint64_t v10 = *(void *)(*v5 + 160);
  uint64_t v11 = *(void *)(*v5 + 168);
  uint64_t v182 = *(void *)(*v5 + 136);
  long long v183 = v8;
  uint64_t v163 = v9;
  uint64_t v184 = v9;
  uint64_t v185 = v10;
  uint64_t v162 = v10;
  uint64_t v151 = v11;
  uint64_t v186 = v11;
  uint64_t v155 = type metadata accessor for TimeDataFormatting.Resolvable();
  uint64_t v154 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155);
  uint64_t v153 = (uint64_t)&v131 - v12;
  uint64_t v152 = v182;
  uint64_t v150 = *(void *)(v182 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v161 = (uint64_t)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v139 = (char *)&v131 - v16;
  uint64_t v133 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  MEMORY[0x270FA5388](v133);
  uint64_t v134 = (void (**)(void))((char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  uint64_t v157 = (uint64_t)&v131 - v19;
  uint64_t v138 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v137 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  BOOL v135 = (char *)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v136 = (char *)&v131 - v22;
  uint64_t v147 = type metadata accessor for TimeZone();
  uint64_t v144 = *(_UNKNOWN ***)(v147 - 8);
  MEMORY[0x270FA5388](v147);
  uint64_t v143 = (uint64_t)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for Calendar();
  uint64_t v141 = *(void *)(v142 - 8);
  MEMORY[0x270FA5388](v142);
  uint64_t v140 = (uint64_t)&v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = type metadata accessor for Locale();
  uint64_t v25 = *(void *)(v174 - 8);
  MEMORY[0x270FA5388](v174);
  char v27 = (char *)&v131 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  v160 = (char *)&v131 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  int v148 = (char *)&v131 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v146 = (char *)&v131 - v33;
  MEMORY[0x270FA5388](v34);
  char v145 = (char *)&v131 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v156 = (char *)&v131 - v37;
  MEMORY[0x270FA5388](v38);
  CFAttributedStringRef v132 = (char *)&v131 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v131 - v41;
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)&v131 - v44;
  MEMORY[0x270FA5388](v46);
  uint64_t v159 = (uint64_t)&v131 - v47;
  double v49 = MEMORY[0x270FA5388](v48);
  uint64_t v172 = (char *)&v131 - v50;
  uint64_t v52 = *a2;
  uint64_t v51 = a2[1];
  uint64_t v149 = *(void *)v175;
  uint64_t v53 = *(void *)(v7 + 184);
  v168 = v5;
  uint64_t v167 = v54;
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  uint64_t v158 = (uint64_t)v8;
  uint64_t v171 = v54 + 16;
  unint64_t v175 = v55;
  ((void (*)(char *, char *, _UNKNOWN **, double))v55)(v42, (char *)v5 + v53, v8, v49);
  uint64_t v169 = v51;
  if (v51)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v52, (uint64_t)v27);
  }
  else
  {
    uint64_t v56 = swift_retain_n();
    uint64_t v57 = v170;
    specialized closure #1 in PropertyList.subscript.getter(v56, (uint64_t)v27);
    uint64_t v170 = v57;
    uint64_t v51 = v169;
  }
  swift_release_n();
  swift_release_n();
  uint64_t v58 = v158;
  dispatch thunk of FormatStyle.locale(_:)();
  uint64_t v59 = v27;
  uint64_t v60 = v58;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v59, v174);
  char v61 = *(void (**)(char *, uint64_t))(v167 + 8);
  uint64_t v174 = v167 + 8;
  uint64_t v173 = v61;
  v61(v42, v58);
  if (v51)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v62 = v140;
    specialized PropertyList.Tracker.value<A>(_:for:)(v52, v140);
    uint64_t v63 = v168;
    uint64_t v64 = v170;
  }
  else
  {
    uint64_t v65 = swift_retain_n();
    uint64_t v62 = v140;
    uint64_t v64 = v170;
    specialized closure #1 in PropertyList.subscript.getter(v65, v140);
    uint64_t v51 = v169;
    uint64_t v63 = v168;
  }
  swift_release_n();
  swift_release_n();
  FormatStyle.calendar(_:)(v62, v58, v159);
  (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v62, v142);
  v173(v45, v58);
  if (v51)
  {
    uint64_t v170 = v64;
    swift_retain_n();
    swift_retain_n();
    uint64_t v66 = v143;
    specialized PropertyList.Tracker.value<A>(_:for:)(v52, v143);
  }
  else
  {
    uint64_t v67 = swift_retain_n();
    uint64_t v66 = v143;
    specialized closure #1 in PropertyList.subscript.getter(v67, v143);
    uint64_t v170 = v64;
    uint64_t v51 = v169;
  }
  uint64_t v68 = v166;
  uint64_t v69 = v165;
  swift_release_n();
  swift_release_n();
  uint64_t v70 = v159;
  FormatStyle.timeZone(_:)(v66, v60, (uint64_t)v172);
  ((void (*)(uint64_t, uint64_t))v144[1])(v66, v147);
  v173((char *)v70, v60);
  char v71 = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v68 + 32))(&v182, v69, v68);
  uint64_t v72 = v182;
  if (v182)
  {
    uint64_t v73 = v183;
  }
  else
  {
    MEMORY[0x270FA5388](v71);
    *(&v131 - 2) = 0xD000000000000035;
    *(&v131 - 1) = 0x8000000246223C60;
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:));
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>);
    uint64_t v72 = v74;
    uint64_t v73 = &protocol witness table for InterfaceIdiomBox<A>;
  }
  BOOL v75 = *((unsigned char *)v63 + *(void *)(*v63 + 192) + 8) == 1;
  uint64_t v76 = (uint64_t)v172;
  uint64_t v159 = v52;
  uint64_t v77 = v157;
  uint64_t v144 = v73;
  if (v75)
  {
    v175(v132, (uint64_t)v172, v60);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(&v179, (uint64_t)&v182);
      uint64_t v78 = v185;
      uint64_t v79 = v186;
      __swift_project_boxed_opaque_existential_1(&v182, v185);
      uint64_t AssociatedTypeWitness = v72;
      uint64_t v177 = v73;
      uint64_t v80 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v79 + 16);
      *((void *)&v180 + 1) = v78;
      uint64_t v181 = v79;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v179);
      v80(&AssociatedTypeWitness, v78, v79);
      uint64_t v63 = v168;
      v173((char *)v76, v60);
      uint64_t v81 = v156;
      swift_dynamicCast();
      (*(void (**)(uint64_t, char *, uint64_t))(v167 + 32))(v76, v81, v60);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
    }
    else
    {
      uint64_t v181 = 0;
      long long v179 = 0u;
      long long v180 = 0u;
      outlined destroy of (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage)((uint64_t)&v179, (uint64_t)&lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle?, (uint64_t)&lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle, (uint64_t)&protocol descriptor for InterfaceIdiomDependentFormatStyle, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    }
    uint64_t v51 = v169;
  }
  uint64_t v147 = v72;
  v175(v145, v76, v60);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for TextAlignmentDependentFormatStyle);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v179, (uint64_t)&v182);
    uint64_t v82 = v185;
    uint64_t v83 = v186;
    __swift_project_boxed_opaque_existential_1(&v182, v185);
    if (v51)
    {
      uint64_t v84 = v159;
      swift_retain_n();
      swift_retain_n();
      LODWORD(v85) = specialized PropertyList.Tracker.value<A>(_:for:)(v84);
    }
    else
    {
      uint64_t v86 = swift_retain_n();
      uint64_t v87 = v170;
      LODWORD(v85) = specialized closure #1 in PropertyList.subscript.getter(v86);
      uint64_t v170 = v87;
    }
    swift_release_n();
    swift_release_n();
    uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16);
    if (v85 == 3) {
      uint64_t v85 = 0;
    }
    else {
      uint64_t v85 = v85;
    }
    *((void *)&v180 + 1) = v82;
    uint64_t v181 = v83;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v179);
    v88(v85, v82, v83);
    uint64_t v76 = (uint64_t)v172;
    uint64_t v60 = v158;
    v173(v172, v158);
    uint64_t v89 = v156;
    swift_dynamicCast();
    (*(void (**)(uint64_t, char *, uint64_t))(v167 + 32))(v76, v89, v60);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
    uint64_t v63 = v168;
    uint64_t v51 = v169;
  }
  else
  {
    uint64_t v181 = 0;
    long long v179 = 0u;
    long long v180 = 0u;
    outlined destroy of (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage)((uint64_t)&v179, (uint64_t)&lazy cache variable for type metadata for TextAlignmentDependentFormatStyle?, (uint64_t)&lazy cache variable for type metadata for TextAlignmentDependentFormatStyle, (uint64_t)&protocol descriptor for TextAlignmentDependentFormatStyle, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  }
  v175(v146, v76, v60);
  uint64_t v90 = type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle);
  if (swift_dynamicCast())
  {
    uint64_t v146 = (char *)v90;
    outlined init with take of ScrollStateRequest(&v179, (uint64_t)&v182);
    uint64_t v91 = v185;
    uint64_t v92 = v186;
    char v145 = (char *)__swift_project_boxed_opaque_existential_1(&v182, v185);
    if (v51)
    {
      uint64_t v93 = v159;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v93, v77);
    }
    else
    {
      uint64_t v94 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v94, v77);
    }
    int v95 = v135;
    swift_release_n();
    swift_release_n();
    uint64_t v96 = v134;
    outlined init with copy of EnvironmentValues.CapitalizationContext(v77, (uint64_t)v134);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v98 = v137;
    if (EnumCaseMultiPayload == 1)
    {
      (*v96)();
      swift_release();
      uint64_t v99 = *(void (**)(char *, void (**)(void), uint64_t))(v98 + 32);
      uint64_t v60 = v158;
      uint64_t v100 = v138;
    }
    else
    {
      uint64_t v99 = *(void (**)(char *, void (**)(void), uint64_t))(v137 + 32);
      uint64_t v100 = v138;
      v99(v95, v96, v138);
      uint64_t v60 = v158;
    }
    uint64_t v101 = v136;
    v99(v136, (void (**)(void))v95, v100);
    outlined destroy of EnvironmentValues.CapitalizationContext(v157);
    uint64_t v102 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
    *((void *)&v180 + 1) = v91;
    uint64_t v181 = v92;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v179);
    v102(v101, v91, v92);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v100);
    uint64_t v76 = (uint64_t)v172;
    v173(v172, v60);
    CFTimeInterval v103 = v156;
    swift_dynamicCast();
    (*(void (**)(uint64_t, char *, uint64_t))(v167 + 32))(v76, v103, v60);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
    uint64_t v63 = v168;
  }
  else
  {
    uint64_t v181 = 0;
    long long v179 = 0u;
    long long v180 = 0u;
    outlined destroy of (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage)((uint64_t)&v179, (uint64_t)&lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle?, (uint64_t)&lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle, (uint64_t)&protocol descriptor for CapitalizationContextDependentFormatStyle, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  }
  v175(v148, v76, v60);
  uint64_t v104 = v163;
  uint64_t v105 = v152;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getExtendedExistentialTypeMetadata();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v179, (uint64_t)&v182);
    uint64_t v106 = v185;
    uint64_t v107 = v186;
    __swift_project_boxed_opaque_existential_1(&v182, v185);
    uint64_t v108 = v150;
    uint64_t v109 = v139;
    (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v139, (uint64_t)v63 + *(void *)(*v63 + 176), v105);
    (*(void (**)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 16))(&v179, v109, v105, v104, v106, v107);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v105);
    uint64_t v170 = v179;
    unint64_t v110 = DWORD2(v179) | ((unint64_t)BYTE12(v179) << 32);
    uint64_t v111 = BYTE13(v179);
    int v112 = BYTE14(v179);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
    uint64_t v113 = v108;
    if (v112) {
      uint64_t v114 = 0x1000000000000;
    }
    else {
      uint64_t v114 = 0;
    }
  }
  else
  {
    if (one-time initialization token for v6 != -1) {
      swift_once();
    }
    unsigned int v115 = static Semantics.v6;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F4504) {
      unsigned int v116 = dyld_program_minos_at_least();
    }
    else {
      unsigned int v116 = dword_26B0F4500 >= v115;
    }
    uint64_t v113 = v150;
    uint64_t v111 = 0;
    uint64_t v114 = 0;
    uint64_t v170 = v116 | 0x1202024000000000;
    unint64_t v110 = 0x302132033;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 16))(v161, (uint64_t)v63 + *(void *)(*v63 + 176), v105);
  v175(v160, v76, v60);
  uint64_t v117 = (uint64_t)v63 + *(void *)(*v63 + 192);
  if (*(unsigned char *)(v117 + 8))
  {
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>);
    uint64_t v118 = (void (*)(void))v144[1];
    double v119 = 0.0;
    if ((((uint64_t (*)(void))v118)() & 1) == 0)
    {
      type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WidgetInterfaceIdiom>);
      if ((((uint64_t (*)(void))v118)() & 1) == 0)
      {
        type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WatchInterfaceIdiom>);
        v118();
      }
      double v119 = 60.0;
    }
  }
  else
  {
    double v119 = *(double *)v117;
  }
  uint64_t v120 = v163;
  uint64_t v121 = v162;
  uint64_t v122 = v151;
  default argument 3 of TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(&v179);
  uint64_t v123 = v105;
  uint64_t v124 = v153;
  TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(v161, (uint64_t)v160, (uint64_t *)&v179, v123, v60, v120, v121, v122, v153, v119);
  *(void *)&long long v179 = v159;
  *((void *)&v179 + 1) = v169;
  uint64_t v178 = v149;
  uint64_t v125 = v170;
  uint64_t AssociatedTypeWitness = v170;
  BYTE6(v177) = BYTE6(v114);
  WORD2(v177) = (v110 & 0xFFFFFFFFFFLL | (v111 << 40) | v114) >> 32;
  LODWORD(v177) = v110 | v114;
  uint64_t v126 = v166;
  uint64_t v127 = *(void (**)(uint64_t, long long *, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v166 + 72);
  uint64_t v128 = v155;
  uint64_t WitnessTable = swift_getWitnessTable();
  v127(v124, &v179, &v178, &AssociatedTypeWitness, v128, WitnessTable, v165, v126);
  outlined consume of ContentTransition.Storage(v125, v110, v111);
  (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v124, v128);
  return ((uint64_t (*)(char *, uint64_t))v173)(v172, v60);
}

BOOL TimeDataFormattingStorage.isStyled(options:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return AssociatedTypeWitness == type metadata accessor for AttributedString();
}

uint64_t TimeDataFormattingStorage.isEqual(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 136);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v35 = (char *)&v33 - v9;
  uint64_t v11 = *(void *)(v10 + 144);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v36 = v19;
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20) {
    goto LABEL_5;
  }
  uint64_t v21 = v20;
  uint64_t v33 = v7;
  uint64_t v34 = v5;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v22(v18, &v2[*(void *)(v3 + 184)], v11);
  v22(v15, (char *)(v21 + *(void *)(*(void *)v21 + 184)), v11);
  swift_retain();
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v15, v11);
  v24(v18, v11);
  if ((v23 & 1) == 0)
  {
    swift_release();
LABEL_5:
    char v30 = 0;
    return v30 & 1;
  }
  uint64_t v25 = &v2[*(void *)(*(void *)v2 + 176)];
  uint64_t v26 = v34;
  char v27 = v35;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v28(v35, (uint64_t)v25, v4);
  uint64_t v29 = v33;
  v28(v33, v21 + *(void *)(*(void *)v21 + 176), v4);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
  v31(v29, v4);
  v31(v27, v4);
  return v30 & 1;
}

uint64_t TimeDataFormattingStorage.__ivar_destroyer()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 176));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 184);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 144) - 8) + 8);

  return v3(v2);
}

uint64_t *TimeDataFormattingStorage.deinit()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 136) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 176));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 144) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 184));
  return v0;
}

uint64_t TimeDataFormattingStorage.__deallocating_deinit()
{
  TimeDataFormattingStorage.deinit();

  return swift_deallocClassInstance();
}

uint64_t AttributedString.attributedString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t protocol witness for AttributedStringConvertible.attributedString.getter in conformance AttributedString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t String.attributedString.getter()
{
  uint64_t v0 = type metadata accessor for AttributeContainer();
  MEMORY[0x270FA5388](v0 - 8);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

uint64_t protocol witness for AttributedStringConvertible.attributedString.getter in conformance String()
{
  uint64_t v0 = type metadata accessor for AttributeContainer();
  MEMORY[0x270FA5388](v0 - 8);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

id one-time initialization function for systemFormatStyle()
{
  type metadata accessor for SwiftUICoreClass();
  ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static NSBundle.systemFormatStyle = (uint64_t)result;
  return result;
}

id static NSBundle.systemFormatStyle.getter()
{
  if (one-time initialization token for systemFormatStyle != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSBundle.systemFormatStyle;

  return v0;
}

uint64_t specialized static TimeDataSource<A>.DateStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v22 - v9;
  type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(0, &lazy cache variable for type metadata for (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage), &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v15 = (char *)&v22 + *(int *)(v14 + 56) - v12;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)&v22 - v12, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v15, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  if (v18(v13, 1, v16) != 1)
  {
    outlined init with copy of TimeDataSource<Date><A>.DateStorage((uint64_t)v13, (uint64_t)v10, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    if (v18(v15, 1, v17) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v4);
      char v19 = static Date.== infix(_:_:)();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
      v20(v7, v4);
      v20(v10, v4);
      outlined destroy of (pauseDate: Date)((uint64_t)v13, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
      return v19 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v18(v15, 1, v17) != 1)
  {
LABEL_6:
    outlined destroy of (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage)((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage), (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t (*)(void))type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage));
    char v19 = 0;
    return v19 & 1;
  }
  outlined destroy of (pauseDate: Date)((uint64_t)v13, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  char v19 = 1;
  return v19 & 1;
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys>);
    }
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys>);
    }
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
    unint64_t v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Date><A>.DateStorage.CodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DurationStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of TimeDataSource<Date><A>.DateStorage(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void))
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys>);
    }
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
    unint64_t v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Duration><A>.DurationStorage.CodingKeys>);
    }
  }
}

uint64_t outlined init with take of TimeDataSource<Date><A>.DateStorage(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void))
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of Range<Date>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Range<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static TimeDataSource<A>.DateRangeStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v25 - v6;
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v25 - v12;
  type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(0, &lazy cache variable for type metadata for (TimeDataSource<Range<Date>><A>.DateRangeStorage, TimeDataSource<Range<Date>><A>.DateRangeStorage), &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v18 = (char *)&v25 + *(int *)(v17 + 56) - v15;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v26, (uint64_t)&v25 - v15, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(v27, (uint64_t)v18, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of TimeDataSource<Date><A>.DateStorage((uint64_t)v16, (uint64_t)v13, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v22 = v28;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v18, v28);
      char v20 = static Date.== infix(_:_:)();
      char v23 = *(void (**)(char *, uint64_t))(v2 + 8);
      v23(v7, v22);
      v23(v13, v22);
      goto LABEL_6;
    }
LABEL_8:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v13, v28);
    outlined destroy of (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage)((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for (TimeDataSource<Range<Date>><A>.DateRangeStorage, TimeDataSource<Range<Date>><A>.DateRangeStorage), (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage));
    char v20 = 0;
    return v20 & 1;
  }
  outlined init with copy of TimeDataSource<Date><A>.DateStorage((uint64_t)v16, (uint64_t)v10, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v13 = v10;
    goto LABEL_8;
  }
  uint64_t v19 = v28;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v18, v28);
  char v20 = static Date.== infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v2 + 8);
  v21(v4, v19);
  v21(v10, v19);
LABEL_6:
  outlined destroy of (pauseDate: Date)((uint64_t)v16, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  return v20 & 1;
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys>);
    }
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
    unint64_t v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys>);
    }
  }
}

void type metadata accessor for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
    unint64_t v0 = type metadata accessor for KeyedDecodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys>);
    }
  }
}

uint64_t type metadata accessor for TimeDataSource<A>.DateBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TimeDataSource<A>.DurationBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TimeDataSource<A>.DateRangeBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized TimeDataSource<A>.DateStorage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x797469746E656469 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000246223C00)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized TimeDataSource<A>.DateRangeStorage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x8000000246223C20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000246223C40)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Text.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)a1 + 88))(a2, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t instantiation function for generic protocol witness table for TimeDataSource<A><A>.DateStorage(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  a1[2] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  uint64_t result = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateStorage()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
}

uint64_t instantiation function for generic protocol witness table for TimeDataSource<A><A>.DurationStorage(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  a1[2] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  uint64_t result = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DurationStorage()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage and conformance TimeDataSource<A><A>.DurationStorage, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage);
}

uint64_t instantiation function for generic protocol witness table for TimeDataSource<A><A>.DateRangeStorage(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  a1[2] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  uint64_t result = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateRangeStorage()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage and conformance TimeDataSource<A><A>.DateRangeStorage, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
}

uint64_t type metadata accessor for TimeDataSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TimeDataSource.BoxBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of TimeDataSourceStorage.value(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of TimeDataSourceStorage.date(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of TimeDataSourceStorage.round(_:_:toMultipleOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of TimeDataSourceStorage.convergesToZero(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of TimeDataSourceStorage.end.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

void type metadata completion function for TimeDataSource<A>.DateBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata instantiation function for TimeDataSource<A>.DateStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 0);
}

uint64_t type metadata completion function for TimeDataSource<A>.DateStorage()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataSource<A>.DateStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  return a1;
}

uint64_t destroy for TimeDataSource<A>.DateStorage(uint64_t a1)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for Date();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *initializeWithCopy for TimeDataSource<A>.DateStorage(void *a1, const void *a2, uint64_t a3)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for TimeDataSource<A>.DateStorage(void *a1, void *a2, uint64_t a3)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 1, v6);
  int v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 24))(a1, a2, v14);
      return a1;
    }
    outlined destroy of (pauseDate: Date)((uint64_t)a1, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  return a1;
}

void *initializeWithTake for TimeDataSource<A>.DateStorage(void *a1, const void *a2, uint64_t a3)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for TimeDataSource<A>.DateStorage(void *a1, void *a2, uint64_t a3)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 1, v6);
  int v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 40))(a1, a2, v14);
      return a1;
    }
    outlined destroy of (pauseDate: Date)((uint64_t)a1, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataSource<A>.DateStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245FC4164);
}

uint64_t sub_245FC4164(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimeDataSource<A>.DateStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245FC4200);
}

uint64_t sub_245FC4200(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for TimeDataSource<A>.DateStorage(uint64_t a1)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for TimeDataSource<A>.DateStorage(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t type metadata completion function for TimeDataSource<A>.DurationBox()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for TimeDataSource<A>.DurationStorage(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataSource<A>.DurationStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataSource<A>.DurationStorage(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (date: Date), MEMORY[0x263F07490]);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

void _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t storeEnumTagSinglePayload for TimeDataSource<A>.DurationStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, &lazy cache variable for type metadata for (date: Date), MEMORY[0x263F07490]);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, a2, a3, v6);
}

void type metadata completion function for TimeDataSource<A>.DateRangeBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for TimeDataSource<A>.DateBox(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void))
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(319, a4, a5);
  if (v5 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t type metadata completion function for TimeDataSource<A>.DateRangeStorage()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataSource<A>.DateRangeStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithCopy for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}