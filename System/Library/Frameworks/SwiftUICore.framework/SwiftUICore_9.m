uint64_t TextEffectsAnimationController.updateKeyframes(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v2 = v1;
  swift_beginAccess();
  *(void *)(v2 + 112) = a1;
  swift_retain();
  swift_release();
  result = swift_beginAccess();
  v5 = 0;
  v6 = *(void *)(v2 + 80);
  v7 = v6 + 64;
  v8 = 1 << *(unsigned char *)(v6 + 32);
  v9 = -1;
  if (v8 < 64) {
    v9 = ~(-1 << v8);
  }
  v10 = v9 & *(void *)(v6 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v5 << 6);
      goto LABEL_5;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v14 >= v11) {
      return TextEffectsAnimationController.validateInfosIfNeeded()();
    }
    v15 = *(void *)(v7 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v11) {
        return TextEffectsAnimationController.validateInfosIfNeeded()();
      }
      v15 = *(void *)(v7 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v11) {
          return TextEffectsAnimationController.validateInfosIfNeeded()();
        }
        v15 = *(void *)(v7 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_5:
    result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v6 + 56) + 8 * v13) + 80))();
  }
  v16 = v14 + 3;
  if (v16 >= v11) {
    return TextEffectsAnimationController.validateInfosIfNeeded()();
  }
  v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v11) {
      return TextEffectsAnimationController.validateInfosIfNeeded()();
    }
    v15 = *(void *)(v7 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t TextEffectsAnimationController.updateKeyframes(version:)(uint64_t a1)
{
  uint64_t v3 = v1 + 112;
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 112) + 56) != a1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Text.Effect.Keyframes.Storage();
      swift_allocObject();
      v4 = (void *)swift_retain();
      v5 = specialized Text.Effect.Keyframes.Storage.init(_:)(v4);
      swift_release();
      *(void *)uint64_t v3 = v5;
      swift_release();
    }
    *(void *)(*(void *)v3 + 56) = a1;
  }
  return swift_endAccess();
}

Swift::Void __swiftcall TextEffectsRenderer.setNeedsDisplay()()
{
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v6 = (char *)&v32 - v5;
  v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(*v7 + 64);
  uint64_t v34 = *v7 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  int64_t v33 = v13 - 1;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v19 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  unint64_t v20 = v19 | (v14 << 6);
  while (2)
  {
    uint64_t v21 = *(void *)(v8 + 48);
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v3, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v22);
    uint64_t v23 = *(void *)(v8 + 56);
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    uint64_t v25 = v24;
    v26 = *(void **)(v23 + 8 * v20);
    *(void *)&v3[*(int *)(v24 + 48)] = v26;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v3, 0, 1, v24);
    id v27 = v26;
    while (1)
    {
      outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v3, (uint64_t)v6, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v6, 1, v25) == 1)
      {
        swift_release();
        return;
      }
      v15 = *(char **)&v6[*(int *)(v25 + 48)];
      v16 = *(unsigned char **)&v15[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      v16[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] |= 0x90u;
      v17 = v16;
      objc_msgSend(v17, sel_setNeedsLayout);

      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v6, v18);
      if (v12) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v28 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v28 < v13)
      {
        unint64_t v29 = *(void *)(v34 + 8 * v28);
        if (v29) {
          goto LABEL_11;
        }
        int64_t v30 = v14 + 2;
        ++v14;
        if (v28 + 1 < v13)
        {
          unint64_t v29 = *(void *)(v34 + 8 * v30);
          if (v29) {
            goto LABEL_14;
          }
          int64_t v14 = v28 + 1;
          if (v28 + 2 < v13)
          {
            unint64_t v29 = *(void *)(v34 + 8 * (v28 + 2));
            if (v29)
            {
              v28 += 2;
              goto LABEL_11;
            }
            int64_t v30 = v28 + 3;
            int64_t v14 = v28 + 2;
            if (v28 + 3 < v13) {
              break;
            }
          }
        }
      }
LABEL_25:
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      uint64_t v25 = v31;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v3, 1, 1, v31);
      unint64_t v12 = 0;
    }
    unint64_t v29 = *(void *)(v34 + 8 * v30);
    if (v29)
    {
LABEL_14:
      int64_t v28 = v30;
LABEL_11:
      unint64_t v12 = (v29 - 1) & v29;
      unint64_t v20 = __clz(__rbit64(v29)) + (v28 << 6);
      int64_t v14 = v28;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v13)
    {
      int64_t v14 = v33;
      goto LABEL_25;
    }
    unint64_t v29 = *(void *)(v34 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
}

double TextEffectsRenderer.customTextBounds.getter()
{
  double v1 = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
  if (v1 == 0.0) {
    double v2 = 1.0;
  }
  else {
    double v2 = 1.0 / v1;
  }
  long long v4 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds);
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v2);
  return *(double *)&v4;
}

BOOL TextEffectsRenderer.fragmentsValid.getter()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  if (v1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24C523D60](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = objc_msgSend(v4, sel_textElement);

      BOOL v8 = v7 != 0;
      ++v3;
      if (v7) {
        BOOL v9 = v6 == v2;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain_n();
  }
  BOOL v8 = 1;
LABEL_17:
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = *(void *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments];
  if (v7 >> 62) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v10 = 4;
    while (1)
    {
      id v11 = (v7 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24C523D60](v10 - 4, v7) : *(id *)(v7 + 8 * v10);
      unint64_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      id v14 = objc_msgSend(v11, sel_textElement);

      if (!v14) {
        goto LABEL_12;
      }
      ++v10;
      if (v13 == v9) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  v15 = (void *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a5;
  v15[4] = a6;
  v15[5] = v6;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = partial apply for closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:);
  *(void *)(v16 + 24) = v15;
  uint64_t v32 = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer, @unowned NSTextLayoutManagerSegmentCategory) -> (@unowned Bool);
  uint64_t v33 = v16;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v29 = 1107296256;
  int64_t v30 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer, @unowned NSTextLayoutManagerSegmentCategory) -> (@unowned Bool);
  uint64_t v31 = &block_descriptor_93;
  v17 = _Block_copy(&aBlock);
  a5 = v33;
  id v18 = a1;
  unint64_t v19 = v6;
  swift_retain();
  swift_release();
  objc_msgSend(a4, sel_enumerateTextSegmentAndCategoryInRange_type_options_usingBlock_, v18, a2, a3, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v17)
  {
    __break(1u);
LABEL_12:
    swift_bridgeObjectRelease_n();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a5;
    *(void *)(v21 + 24) = a6;
    uint64_t v32 = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool);
    uint64_t v33 = v21;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v29 = 1107296256;
    int64_t v30 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool);
    uint64_t v31 = &block_descriptor_84;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a4, sel_enumerateTextSegmentsInRange_type_options_usingBlock_, a1, a2, a3, v22);
    _Block_release(v22);
    LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v22) {
      __break(1u);
    }
    else {
      return specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
    }
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool)(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  v15 = *(uint64_t (**)(void *, id, double, double, double, double, double))(a1 + 32);
  id v16 = a2;
  id v17 = a3;
  char v18 = v15(a2, v17, a4, a5, a6, a7, a8);

  return v18 & 1;
}

void closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, double, double, double, double, double), uint64_t a6, uint64_t a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  uint64_t v105 = a4;
  uint64_t v103 = a3;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v96 - v23;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  v123 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  v122 = (char *)&v96 - v29;
  type metadata accessor for (UUID, NSTextLayoutFragment)();
  uint64_t v118 = v30;
  MEMORY[0x270FA5388](v30);
  v117 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || (uint64_t v32 = NSTextRange.textRange.getter(), v106 = v33, (v34 & 1) != 0))
  {
    uint64_t v32 = NSTextRange.textRange.getter();
    uint64_t v106 = v35;
    if (v36)
    {
      a5(a1, a2, a8, a9, a10, a11, a12);
      return;
    }
  }
  uint64_t v37 = a7;
  uint64_t v38 = a2;
  uint64_t v39 = v37;
  v100 = (void (*)(uint64_t, uint64_t, double, double, double, double, double))a5;
  uint64_t v101 = a6;
  v107 = v32;
  uint64_t v40 = *(void *)(v37 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  uint64_t v41 = *(void *)(*(void *)(v37 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs) + 16);
  uint64_t v42 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  uint64_t v120 = *(void *)(v37 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v119 = v40;
  uint64_t v112 = v41;
  if (!v41)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, 1, 1, v25);
LABEL_43:
    _sypSgWOhTm_1((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v72 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v72);
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #2 in closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:));
    return;
  }
  uint64_t v97 = a1;
  uint64_t v98 = v38;
  unint64_t v43 = 0;
  v104 = (uint64_t *)(v39 + v42);
  uint64_t v113 = v26 + 48;
  v121 = (void (**)(char *, char *, uint64_t))(v26 + 32);
  uint64_t v44 = v40 & 0xFFFFFFFFFFFFFF8;
  if (v40 < 0) {
    uint64_t v45 = v40;
  }
  else {
    uint64_t v45 = v40 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v96 = v45;
  unint64_t v109 = v40 & 0xC000000000000001;
  v110 = (void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v114 = v26 + 56;
  uint64_t v115 = v26 + 16;
  unint64_t v99 = (v26 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  unint64_t v111 = (unint64_t)v40 >> 62;
  uint64_t v46 = v120;
  uint64_t v108 = v40 & 0xFFFFFFFFFFFFFF8;
  v116 = v24;
  while (1)
  {
    if (v43 >= *(void *)(v46 + 16))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v24, v46+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v43, v25);
    v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v47(v24, 0, 1, v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1) {
      goto LABEL_43;
    }
    v48 = *v121;
    (*v121)(v122, v24, v25);
    if (v111)
    {
      swift_bridgeObjectRetain();
      uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43 == v71)
      {
LABEL_41:
        (*v110)(v122, v25);
        goto LABEL_44;
      }
    }
    else if (v43 == *(void *)(v44 + 16))
    {
      goto LABEL_41;
    }
    if (v109)
    {
      id v49 = (id)MEMORY[0x24C523D60](v43, v119);
    }
    else
    {
      if (v43 >= *(void *)(v44 + 16)) {
        goto LABEL_54;
      }
      id v49 = *(id *)(v119 + 8 * v43 + 32);
    }
    v50 = v49;
    v51 = v117;
    uint64_t v52 = *(int *)(v118 + 48);
    v48(v117, v122, v25);
    *(void *)&v51[v52] = v50;
    v48(v123, v51, v25);
    id v53 = objc_msgSend(v50, sel_rangeInElement, v96);
    self;
    v54 = (void *)swift_dynamicCastObjCClass();
    if (v54)
    {
      v55 = (char *)objc_msgSend(v54, sel_range);
      uint64_t v57 = v56;

      v58 = &v55[v57];
      if (__OFADD__(v55, v57)) {
        goto LABEL_55;
      }
      if ((uint64_t)v58 < (uint64_t)v55) {
        goto LABEL_56;
      }
    }
    else
    {
      id v65 = objc_msgSend(objc_msgSend(v53, sel_location), sel_compare_, objc_msgSend(v53, sel_endLocation));
      swift_unknownObjectRelease();
      uint64_t v66 = swift_unknownObjectRelease();
      uint64_t v24 = v116;
      if (v65) {
        goto LABEL_29;
      }
      id v67 = objc_msgSend(v53, sel_location);
      self;
      v68 = (void *)swift_dynamicCastObjCClass();
      if (!v68)
      {
        uint64_t v66 = swift_unknownObjectRelease();
LABEL_29:
        MEMORY[0x270FA5388](v66);
        specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, implicit closure #1 in NSTextRange.textRange.getterpartial apply);

        (*v110)(v123, v25);
        goto LABEL_11;
      }
      v55 = (char *)objc_msgSend(v68, sel_range);
      uint64_t v70 = v69;

      swift_unknownObjectRelease();
      v58 = &v55[v70];
      if (__OFADD__(v55, v70)) {
        goto LABEL_57;
      }
      if ((uint64_t)v58 < (uint64_t)v55) {
        goto LABEL_58;
      }
    }
    if ((uint64_t)v107 >= (uint64_t)v55 && (uint64_t)v58 >= v106) {
      break;
    }
    (*v110)(v123, v25);

LABEL_10:
    uint64_t v24 = v116;
LABEL_11:
    uint64_t v46 = v120;
    ++v43;
    uint64_t v44 = v108;
    if (v112 == v43)
    {
      v47(v24, 1, 1, v25);
      goto LABEL_43;
    }
  }
  v59 = v104;
  swift_beginAccess();
  uint64_t v60 = *v59;
  if (!*(void *)(v60 + 16) || (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v123), (v62 & 1) == 0))
  {
    swift_endAccess();

    (*v110)(v123, v25);
    goto LABEL_10;
  }
  id v102 = v50;
  v63 = *(char **)(*(void *)(v60 + 56) + 8 * v61);
  swift_endAccess();
  uint64_t v64 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer;
  _sypSgWObTm_1(*(void *)&v63[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer]+ OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v125, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v125, (uint64_t)v126, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  if (_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v126) == 1)
  {
    (*v110)(v123, v25);

    goto LABEL_10;
  }
  v121 = v63;
  outlined release of TextRenderLayer.Layout?(v125, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v73 = *(void *)&v63[v64];
  uint64_t v74 = *(void *)(v73 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap);
  v117 = *(char **)(v73 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8);
  uint64_t v75 = *(void *)(v73 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
  swift_beginAccess();
  uint64_t v76 = *(void *)(v75 + 112);
  v77 = (uint64_t *)(v73 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements);
  swift_beginAccess();
  uint64_t v78 = *v77;
  v122 = *(char **)(*v77 + 16);
  v116 = v127;
  unint64_t v79 = *((void *)v127 + 2);
  uint64_t v120 = v74;
  swift_bridgeObjectRetain();
  uint64_t v118 = v76;
  swift_retain();
  uint64_t v119 = v75;
  swift_retain();
  if (v122 == (char *)v79)
  {
    swift_bridgeObjectRetain();
    uint64_t v80 = v101;
    uint64_t v81 = v78;
  }
  else
  {
    uint64_t v81 = specialized Array.init(repeating:count:)(v79, 0.0, 0.0);
    uint64_t v80 = v101;
  }
  BOOL v82 = __OFSUB__(v107, v55);
  uint64_t v83 = v107 - v55;
  if (v82) {
    goto LABEL_59;
  }
  uint64_t v84 = v106 - (void)v107;
  if (__OFSUB__(v106, v107))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v85 = v84 + v83;
  if (__OFADD__(v84, v83))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v101 = v80;
  v86 = v121;
  if (v85 >= v83)
  {
    v87 = *(char **)&v63[v64];
    v124[0] = *(void *)&v87[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time];
    v88 = v116;
    swift_bridgeObjectRetain();
    v89 = v87;
    double v90 = Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:layer:)(v103, v83, v85, v124, v120, v117, v118, v119, (uint64_t)v89, v88, v81);
    double v92 = v91;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v128.origin.x = a8;
    v128.origin.y = a9;
    v128.size.width = a10;
    v128.size.height = a11;
    double v93 = v90 + CGRectGetMinX(v128);
    v129.origin.x = a8;
    v129.origin.y = a9;
    v129.size.width = a10;
    v129.size.height = a11;
    double v94 = v92 + CGRectGetMaxX(v129);
    v95 = (double *)((char *)v86
                   + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement);
    swift_beginAccess();
    v100(v97, v98, v93, *v95 + a9, v94 - v93, a11, a12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    outlined release of TextRenderLayer.Layout?(v125, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    (*v110)(v123, v25);
    return;
  }
LABEL_62:
  __break(1u);
}

uint64_t implicit closure #2 in closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(void *a1)
{
  _StringGuts.grow(_:)(33);
  v2._object = (void *)0x800000024621D930;
  v2._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v2);
  id v3 = objc_msgSend(a1, sel_description);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer, @unowned NSTextLayoutManagerSegmentCategory) -> (@unowned Bool)(uint64_t a1, void *a2, void *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9)
{
  id v17 = *(uint64_t (**)(void *, id, uint64_t, double, double, double, double, double))(a1 + 32);
  id v18 = a2;
  id v19 = a3;
  LOBYTE(a4) = v17(a2, v19, a4, a5, a6, a7, a8, a9);

  return a4 & 1;
}

Swift::Void __swiftcall TextEffectsRenderer.invalidateTemporaryAttributes(in:)(NSTextRange in)
{
  Class isa = in.super.isa;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  Swift::String v7 = (char *)&v37 - v6;
  Swift::String v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = *(void *)(*v8 + 64);
  uint64_t v41 = *v8 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v38 = v14 - 1;
  swift_bridgeObjectRetain();
  unint64_t v15 = 0;
  int64_t v42 = v14;
  uint64_t v39 = v9 + 104;
  unint64_t v40 = v14 - 5;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v15 << 6);
      goto LABEL_8;
    }
    int64_t v27 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v27 >= v42)
    {
      unint64_t v29 = v15;
    }
    else
    {
      unint64_t v28 = *(void *)(v41 + 8 * v27);
      if (v28) {
        goto LABEL_12;
      }
      unint64_t v29 = v15 + 1;
      if ((uint64_t)(v15 + 2) < v42)
      {
        unint64_t v28 = *(void *)(v41 + 8 * (v15 + 2));
        if (v28)
        {
          int64_t v27 = v15 + 2;
          goto LABEL_12;
        }
        unint64_t v29 = v15 + 2;
        if ((uint64_t)(v15 + 3) < v42)
        {
          unint64_t v28 = *(void *)(v41 + 8 * (v15 + 3));
          if (v28)
          {
            int64_t v27 = v15 + 3;
LABEL_12:
            unint64_t v13 = (v28 - 1) & v28;
            unint64_t v19 = __clz(__rbit64(v28)) + (v27 << 6);
            unint64_t v15 = v27;
LABEL_8:
            uint64_t v20 = *(void *)(v9 + 48);
            uint64_t v21 = type metadata accessor for UUID();
            (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v4, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v19, v21);
            uint64_t v22 = *(void *)(v9 + 56);
            type metadata accessor for (key: UUID, value: TextRenderSurface)();
            uint64_t v24 = v23;
            uint64_t v25 = *(void **)(v22 + 8 * v19);
            *(void *)&v4[*(int *)(v23 + 48)] = v25;
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v4, 0, 1, v23);
            id v26 = v25;
            goto LABEL_15;
          }
          int64_t v27 = v15 + 4;
          unint64_t v29 = v15 + 3;
          if ((uint64_t)(v15 + 4) < v42)
          {
            unint64_t v28 = *(void *)(v41 + 8 * v27);
            if (v28) {
              goto LABEL_12;
            }
            while (v40 != v15)
            {
              unint64_t v28 = *(void *)(v39 + 8 * v15++);
              if (v28)
              {
                int64_t v27 = v15 + 4;
                goto LABEL_12;
              }
            }
            unint64_t v29 = v38;
          }
        }
      }
    }
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    uint64_t v24 = v30;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v4, 1, 1, v30);
    unint64_t v13 = 0;
    unint64_t v15 = v29;
LABEL_15:
    outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v4, (uint64_t)v7, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v7, 1, v24) == 1)
    {
      swift_release();
      return;
    }
    id v16 = *(char **)&v7[*(int *)(v24 + 48)];
    uint64_t v31 = *(char **)&v16[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
    uint64_t v32 = *(void **)&v31[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment];
    if (v32)
    {
      uint64_t v33 = v31;
      char v34 = v32;
      id v35 = objc_msgSend(v34, sel_rangeInElement);
      unsigned int v36 = objc_msgSend(v35, sel_intersectsWithTextRange_, isa);

      if (v36)
      {
        v33[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] |= 0x90u;
        objc_msgSend(v33, sel_setNeedsLayout);
      }

      id v16 = v34;
    }

    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v7, v17);
  }
  __break(1u);
}

CGPoint __swiftcall TextEffectsRenderer.convertFromRenderSpace(_:)(CGPoint a1)
{
  double y = a1.y;
  double x = a1.x;
  v568[18] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x270FA5388](v3 - 8);
  v409 = (void **)((char *)v402 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v454 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  v455 = (char *)v402 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  v421 = (char *)v402 - v9;
  uint64_t v416 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v416);
  uint64_t v415 = (uint64_t)v402 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v423 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v428 = *(void *)(v423 - 8);
  MEMORY[0x270FA5388](v423);
  uint64_t v434 = (uint64_t)v402 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v464 = (uint64_t)v402 - v13;
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  uint64_t v448 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  v427 = (char *)v402 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v18 - 8);
  v462 = (void *)((char *)v402 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v20);
  v461 = (void *)((char *)v402 - v21);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], v17);
  MEMORY[0x270FA5388](v22 - 8);
  v442 = (char *)v402 - v23;
  uint64_t v463 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v463 - 8);
  MEMORY[0x270FA5388](v463);
  id v26 = (char *)v402 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  v456 = (char *)v402 - v28;
  type metadata accessor for (UUID, NSTextLayoutFragment)();
  uint64_t v440 = v29;
  MEMORY[0x270FA5388](v29);
  v439 = (char *)v402 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  uint64_t v32 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs) + 16);
  uint64_t v33 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  uint64_t v444 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v443 = v31;
  uint64_t v435 = v32;
  if (!v32)
  {
    uint64_t v38 = (uint64_t)v442;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v442, 1, 1, v463);
LABEL_179:
    _sypSgWOhTm_1(v38, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
    goto LABEL_180;
  }
  unint64_t v34 = 0;
  v422 = (uint64_t *)(v1 + v33);
  uint64_t v441 = v24 + 56;
  uint64_t v436 = v24 + 48;
  uint64_t v437 = v24 + 16;
  uint64_t v35 = v31 & 0xFFFFFFFFFFFFFF8;
  uint64_t v452 = v31 & 0xFFFFFFFFFFFFFF8;
  v453 = (void (**)(char *, uint64_t, uint64_t))(v24 + 32);
  if (v31 < 0) {
    uint64_t v35 = v31;
  }
  v402[1] = v35;
  uint64_t v431 = v31 + 32;
  unint64_t v432 = v31 & 0xC000000000000001;
  uint64_t v438 = v24;
  v433 = (void (**)(char *, uint64_t))(v24 + 8);
  v446 = (uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v447 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  double v499 = *MEMORY[0x263F001A0];
  double v498 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v497 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v496 = *(double *)(MEMORY[0x263F001A0] + 24);
  v412 = (void (**)(char *, uint64_t))(v6 + 8);
  v413 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v36 = v463;
  uint64_t v37 = v444;
  uint64_t v38 = (uint64_t)v442;
  while (1)
  {
    if (v34 >= *(void *)(v37 + 16)) {
      goto LABEL_188;
    }
    uint64_t v39 = v438;
    uint64_t v40 = v37 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    uint64_t v41 = *(void *)(v438 + 72);
    unint64_t v460 = v34;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v438 + 16))(v38, v40 + v41 * v34, v36);
    int64_t v42 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56);
    v42(v38, 0, 1, v36);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v38, 1, v36) == 1) {
      goto LABEL_179;
    }
    unint64_t v43 = *v453;
    (*v453)(v456, v38, v36);
    if (v443 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = *(void *)(v452 + 16);
    }
    if (v460 == v44)
    {
      (*v433)(v456, v463);
LABEL_180:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_181;
    }
    if (v432)
    {
      id v45 = (id)MEMORY[0x24C523D60]();
    }
    else
    {
      if (v460 >= *(void *)(v452 + 16)) {
        goto LABEL_189;
      }
      id v45 = *(id *)(v431 + 8 * v460);
    }
    uint64_t v46 = v45;
    v47 = v439;
    uint64_t v48 = *(int *)(v440 + 48);
    uint64_t v49 = v463;
    v43(v439, (uint64_t)v456, v463);
    *(void *)&v47[v48] = v46;
    uint64_t v36 = v49;
    v43(v26, (uint64_t)v47, v49);
    objc_msgSend(v46, sel_layoutFragmentFrame);
    v590.double x = x;
    v590.double y = y;
    if (CGRectContainsPoint(v594, v590)) {
      break;
    }
    (*v433)(v26, v49);
LABEL_6:

LABEL_7:
    unint64_t v34 = v460 + 1;
    uint64_t v37 = v444;
    uint64_t v38 = (uint64_t)v442;
    if (v460 + 1 == v435)
    {
      v42((uint64_t)v442, 1, 1, v36);
      goto LABEL_179;
    }
  }
  v50 = v422;
  swift_beginAccess();
  uint64_t v51 = *v50;
  if (!*(void *)(v51 + 16) || (unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26), (v53 & 1) == 0))
  {
    swift_endAccess();

    uint64_t v36 = v463;
    (*v433)(v26, v463);
    goto LABEL_7;
  }
  v54 = *(char **)(*(void *)(v51 + 56) + 8 * v52);
  swift_endAccess();
  uint64_t v417 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer;
  uint64_t v55 = *(void *)&v54[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
  _sypSgWObTm_1(v55 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v567, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v567, (uint64_t)v568, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  if (_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v568) == 1)
  {
    uint64_t v36 = v463;
    (*v433)(v26, v463);
    goto LABEL_6;
  }
  uint64_t v56 = v568[4];
  uint64_t v57 = (uint64_t *)(v55 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements);
  swift_beginAccess();
  uint64_t v58 = *v57;
  double v59 = *(double *)(v55 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds);
  double v418 = *(double *)(v55 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 8);
  double v419 = v59;
  unint64_t v445 = *(void *)(v56 + 16);
  v414 = v54;
  v403 = v54;
  outlined release of TextRenderLayer.Layout?(v567, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
  uint64_t v420 = v58 + 32;
  uint64_t v426 = v56;
  swift_bridgeObjectRetain();
  uint64_t v430 = v58;
  swift_bridgeObjectRetain();
  unint64_t v60 = 0;
  v410 = v42;
  v411 = v46;
  CGFloat v424 = y;
  v480 = v26;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v60 == v445)
        {
          uint64_t v61 = 1;
          unint64_t v459 = v445;
          uint64_t v62 = v448;
          v63 = v462;
        }
        else
        {
          uint64_t v62 = v448;
          if ((v60 & 0x8000000000000000) != 0) {
            goto LABEL_190;
          }
          if (v60 >= *(void *)(v426 + 16))
          {
LABEL_191:
            __break(1u);
            goto LABEL_192;
          }
          unint64_t v64 = v60 + 1;
          unint64_t v65 = v60;
          uint64_t v66 = (uint64_t)&v427[*(int *)(v448 + 48)];
          outlined init with copy of Text.Effect.RenderSegmentation.Segment(v426+ ((*(unsigned __int8 *)(v428 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v428 + 80))+ *(void *)(v428 + 72) * v60, v66, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          uint64_t v67 = (uint64_t)v462 + *(int *)(v62 + 48);
          unint64_t *v462 = v65;
          uint64_t v68 = v66;
          v63 = v462;
          outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v68, v67, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          uint64_t v61 = 0;
          unint64_t v459 = v64;
        }
        (*v447)(v63, v61, 1, v62);
        uint64_t v69 = (uint64_t)v63;
        uint64_t v70 = v461;
        outlined init with take of (key: UUID, value: TextRenderSurface)?(v69, (uint64_t)v461, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
        int v71 = (*v446)(v70, 1, v62);
        uint64_t v36 = v463;
        if (v71 == 1)
        {

          outlined release of TextRenderLayer.Layout?(v567, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          (*v433)(v26, v36);
          goto LABEL_7;
        }
        unint64_t v72 = *v461;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v461 + *(int *)(v62 + 48), v464, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        if ((v72 & 0x8000000000000000) == 0 && v72 < *(void *)(v430 + 16)) {
          break;
        }
        outlined destroy of Text.Effect.RenderSegmentation.Segment(v464, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        unint64_t v60 = v459;
      }
      uint64_t v73 = (double *)(v420 + 16 * v72);
      double v75 = *v73;
      double v74 = v73[1];
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v464, v434, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (!EnumCaseMultiPayload)
      {
        CGRect v596 = CGRectOffset(*(CGRect *)(v434 + 24), v419 + v75, v418 + v74);
        CGFloat v79 = v596.origin.x;
        CGFloat v80 = v596.origin.y;
        CGFloat width = v596.size.width;
        CGFloat height = v596.size.height;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v597.origin.double x = v79;
        v597.origin.double y = v80;
        v597.size.CGFloat width = width;
        v597.size.CGFloat height = height;
        v592.double x = x;
        double y = v424;
        v592.double y = v424;
        BOOL v78 = CGRectContainsPoint(v597, v592);
        goto LABEL_37;
      }
      if (EnumCaseMultiPayload != 1) {
        break;
      }
      uint64_t v77 = v415;
      outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v434, v415, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      CGRect v595 = CGRectOffset(*(CGRect *)(v77 + *(int *)(v416 + 32)), v419 + v75, v418 + v74);
      v591.double x = x;
      double y = v424;
      v591.double y = v424;
      BOOL v78 = CGRectContainsPoint(v595, v591);
      outlined destroy of Text.Effect.RenderSegmentation.Segment(v77, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
LABEL_37:
      outlined destroy of Text.Effect.RenderSegmentation.Segment(v464, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      unint64_t v60 = v459;
      if (v78)
      {

        outlined release of TextRenderLayer.Layout?(v567, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        (*v433)(v26, v463);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        double x = x - v75;
        double y = y - v74;
        goto LABEL_181;
      }
    }
    unint64_t v407 = v72;
    uint64_t v83 = *(void **)(v434 + 24);
    uint64_t v84 = *(uint64_t *)(v434 + 32);
    int v85 = *(unsigned __int8 *)(v434 + 40);
    double v86 = *(double *)(v434 + 48);
    double v87 = *(double *)(v434 + 56);
    int v88 = *(_DWORD *)(v434 + 64);
    uint64_t v89 = *(void *)(v434 + 72);
    unint64_t v404 = *(void *)(v434 + 80);
    uint64_t v405 = v89;
    double v90 = *(double *)&v414[v417];
    uint64_t v91 = *(void *)(v434 + 88);
    CGFloat v92 = *(double *)(*(void *)&v90 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time);
    uint64_t v94 = *(void *)(*(void *)&v90 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap);
    double v93 = *(char **)(*(void *)&v90 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8);
    uint64_t v95 = *(uint64_t *)(*(void *)&v90 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
    swift_beginAccess();
    uint64_t v96 = *(uint64_t *)(v95 + 112);
    v554.double x = v92;
    *(void *)&v554.double y = v83;
    v555 = (void *)v84;
    LOBYTE(v556) = v85;
    double v450 = v87;
    double v451 = v86;
    double v557 = v86;
    uint64_t v558 = *(void *)&v87;
    int v406 = v88;
    LODWORD(v559) = v88;
    unint64_t v560 = v94;
    v509 = v93;
    uint64_t v561 = (uint64_t)v93;
    uint64_t v562 = v96;
    uint64_t v563 = v95;
    uint64_t v564 = 0;
    uint64_t v97 = MEMORY[0x263F8EE80];
    uint64_t v565 = MEMORY[0x263F8EE80];
    uint64_t v566 = MEMORY[0x263F8EE80];
    uint64_t v98 = *(void *)(v91 + 16);
    v482 = v83;
    unint64_t v99 = (void *)v84;
    CGFloat v484 = *(double *)&v84;
    int v485 = v85;
    uint64_t v100 = v96;
    uint64_t v517 = v94;
    uint64_t v510 = v95;
    uint64_t v511 = v96;
    if (v98)
    {
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      double v538 = v90;
      uint64_t v101 = (char *)*(id *)&v90;
      id v102 = v482;
      char v103 = v485;
      outlined copy of Text.Layout.Line.Line(v482, v84, v485);
      swift_bridgeObjectRetain();
      outlined copy of Text.Layout.Line.Line(v102, v84, v103);
      swift_bridgeObjectRetain();
      uint64_t v104 = v91 + 64;
      do
      {
        uint64_t v105 = *(void *)(v104 + 48);
        CGPoint v548 = *(CGPoint *)(v104 - 32);
        long long v549 = *(_OWORD *)(v104 - 16);
        long long v550 = *(_OWORD *)v104;
        long long v551 = *(_OWORD *)(v104 + 16);
        long long v552 = *(_OWORD *)(v104 + 32);
        uint64_t v553 = v105;
        Text.Effect.Composition.Operation.appendDisplacement(to:)((uint64_t)&v554);
        v104 += 88;
        --v98;
      }
      while (v98);
      swift_bridgeObjectRelease();
      uint64_t v106 = v566;
      CGFloat v107 = v554.y;
      v540 = v555;
      LODWORD(v539) = LOBYTE(v556);
      uint64_t v543 = v560;
      CGFloat v542 = *(double *)&v562;
      uint64_t v97 = v565;
      CGFloat v541 = *(double *)&v563;
      uint64_t v108 = v482;
      uint64_t v94 = v517;
      uint64_t v95 = v510;
      double v90 = v538;
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      unint64_t v109 = (char *)*(id *)&v90;
      v110 = v482;
      int v111 = v485;
      outlined copy of Text.Layout.Line.Line(v482, (uint64_t)v99, v485);
      swift_bridgeObjectRetain();
      outlined copy of Text.Layout.Line.Line(v110, (uint64_t)v99, v111);
      CGFloat v541 = *(double *)&v95;
      CGFloat v542 = *(double *)&v100;
      uint64_t v543 = v94;
      LODWORD(v539) = v111;
      uint64_t v108 = v110;
      v540 = v99;
      CGFloat v107 = *(double *)&v110;
      uint64_t v106 = v97;
    }
    id v26 = v480;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of Text.Layout.Line.Line(*(void **)&v107, (uint64_t)v540, v539);

    swift_release();
    uint64_t v112 = v511;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    char v113 = v485;
    outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
    swift_bridgeObjectRelease();
    v547[0] = v94;
    v547[1] = (uint64_t)v509;
    v547[2] = v112;
    v547[3] = v95;
    double v114 = v499;
    uint64_t v505 = v97;
    v547[4] = v97;
    uint64_t v506 = v106;
    v547[5] = v106;
    double v115 = v498;
    CGFloat v116 = v497;
    CGFloat v117 = v496;
    uint64_t v46 = v411;
    uint64_t v458 = *(void *)(v91 + 16);
    if (v458) {
      break;
    }
LABEL_171:
    double v390 = v114;
    CGRect v606 = CGRectOffset(*(CGRect *)(&v115 - 1), v419 + v75, v418 + v74);
    double TypographicBounds = v606.origin.x;
    double v345 = v606.origin.y;
    v593.double x = x;
    v593.double y = v424;
    if (CGRectContainsPoint(v606, v593)) {
      goto LABEL_183;
    }
    outlined destroy of Text.Effect.RenderSegmentation.Segment(v464, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
    swift_bridgeObjectRelease();
    double y = v424;
    int64_t v42 = v410;
    unint64_t v60 = v459;
  }
  CGFloat v530 = *(double *)(*(void *)&v414[v417] + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time);
  v425 = (uint64_t *)(v112 + 24);
  uint64_t v457 = v91 + 32;
  swift_bridgeObjectRetain();
  outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v113);
  uint64_t v408 = v91;
  swift_bridgeObjectRetain_n();
  uint64_t v429 = v112 + 40;
  swift_beginAccess();
  uint64_t v118 = 0;
  CGFloat v469 = v499;
  CGFloat v468 = v498;
  CGFloat v467 = v497;
  CGFloat v466 = v496;
  double v514 = v74;
  double v513 = v75;
  uint64_t v91 = v517;
  while (1)
  {
    uint64_t v130 = v457 + 88 * v118;
    uint64_t v131 = *(void *)(v130 + 8);
    v475 = *(void **)v130;
    CGPoint v493 = *(CGPoint *)(v130 + 16);
    uint64_t v132 = *(uint64_t *)(v130 + 40);
    uint64_t v492 = *(void *)(v130 + 32);
    double v134 = *(double *)(v130 + 48);
    unint64_t v133 = *(void *)(v130 + 56);
    uint64_t v135 = *(void *)(v130 + 64);
    uint64_t v136 = *(void *)(v130 + 72);
    uint64_t v137 = *(void *)(v130 + 80);
    v483 = (void *)v131;
    unint64_t v476 = v133;
    uint64_t v478 = v132;
    uint64_t v477 = *(void *)&v134;
    uint64_t v465 = v118;
    uint64_t v471 = v135;
    uint64_t v470 = v136;
    uint64_t v472 = v137;
    if (!(v133 >> 62))
    {
      uint64_t v481 = *(void *)(v137 + 16);
      if (v481)
      {
        uint64_t v474 = v132;
        double v473 = v134;
        uint64_t v479 = v137 + 32;
        outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
        v141 = v26;
        outlined copy of Text.Effect.Composition.Operation((uint64_t)v475, v131, *(void **)&v493.x, *(uint64_t *)&v493.y, v492, v478, v477, v133);
        swift_bridgeObjectRetain();
        uint64_t v142 = 0;
        double v494 = v499;
        double v495 = v498;
        CGFloat v491 = v497;
        CGFloat v490 = v496;
        while (1)
        {
          v149 = (Swift::UInt64 *)(v479 + 88 * v142);
          Swift::UInt64 v503 = *v149;
          v150 = (void *)v149[2];
          Swift::UInt v502 = v149[1];
          uint64_t v146 = *((uint64_t *)v149 + 3);
          CGFloat v147 = *((double *)v149 + 4);
          uint64_t v151 = *((uint64_t *)v149 + 6);
          double v519 = *((double *)v149 + 5);
          unint64_t v153 = v149[7];
          Swift::UInt64 v152 = v149[8];
          Swift::UInt64 v154 = v149[9];
          Swift::UInt64 v155 = v149[10];
          CGFloat v526 = v147;
          unint64_t v518 = v153;
          uint64_t v512 = v151;
          uint64_t v489 = v142;
          v504 = v150;
          if (v153 >> 62)
          {
            Swift::UInt64 v488 = v152;
            Swift::UInt64 v487 = v154;
            Swift::UInt64 v486 = v155;
            if (v153 >> 62 == 1)
            {
              if (v492)
              {
                CGFloat v156 = v493.x;
                outlined copy of Text.Layout.Line.Line(*(void **)&v493.x, *(uint64_t *)&v493.y, 1);
                id v157 = (id)_NSTextLineFragmentGetCTLine(*(void **)&v156);
                if (*(double *)&v157 == 0.0) {
                  goto LABEL_198;
                }
                CGFloat v158 = *(double *)&v157;
                double v159 = *(double *)&v146;
              }
              else
              {
                double v159 = *(double *)&v146;
                CGFloat v158 = v493.x;
                uint64_t v263 = *(void *)&v493.y;
                outlined copy of Text.Layout.Line.Line(*(void **)&v493.x, *(uint64_t *)&v493.y, 0);
                outlined copy of Text.Layout.Line.Line(*(void **)&v158, v263, 0);
                outlined copy of Text.Layout.Line.Line(*(void **)&v158, v263, 0);

                swift_release();
              }
              CFIndex v262 = (CFIndex)v150;
              v264 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)&v158, v503);
              v554.double y = 0.0;
              v554.double x = 0.0;
              double v546 = 0.0;
              CGFloat v545 = 0.0;
              CGFloat v544 = 0.0;
              v548.double y = 0.0;
              v548.double x = 0.0;
              v575.location = 0;
              v575.length = 1;
              CTRunGetPositions((CTRunRef)v264, v575, &v554);
              v576.location = 0;
              v576.length = 1;
              CTRunGetBaseAdvancesAndOrigins((CTRunRef)v264, v576, 0, &v548);
              double v265 = v548.x;
              double v266 = v548.y;
              double v267 = v554.x;
              double v268 = v554.y;
              v577.location = 0;
              v577.length = 0;
              CTRunGetTypographicBounds((CTRunRef)v264, v577, &v546, &v545, &v544);

              swift_release();
              double v269 = v546;
              double v270 = 0.0;
              if (*(void *)(v505 + 16))
              {
                double v271 = v519;
                unint64_t v272 = specialized __RawDictionaryStorage.find<A>(_:)(0);
                uint64_t v273 = v510;
                uint64_t v274 = v511;
                double v275 = v530;
                int v276 = v476;
                uint64_t v277 = v478;
                uint64_t v278 = v477;
                double v279 = v526;
                unint64_t v280 = v518;
                uint64_t v281 = v512;
                uint64_t v282 = v488;
                uint64_t v283 = v487;
                uint64_t v284 = v486;
                if (v285) {
                  double v270 = *(double *)(*(void *)(v505 + 56) + 8 * v272);
                }
              }
              else
              {
                double v271 = v519;
                uint64_t v273 = v510;
                uint64_t v274 = v511;
                double v275 = v530;
                int v276 = v476;
                uint64_t v277 = v478;
                uint64_t v278 = v477;
                double v279 = v526;
                unint64_t v280 = v518;
                uint64_t v281 = v512;
                uint64_t v282 = v488;
                uint64_t v283 = v487;
                uint64_t v284 = v486;
              }
              double v298 = v267 - v265 + *(double *)&v474;
              double v166 = v473 - (v268 - v266) - v269;
              double v165 = v298 + v270;
              char v299 = v492;
              CGFloat v294 = *(double *)&v503;
              CGFloat v295 = *(double *)&v502;
            }
            else
            {
              if (v492)
              {
                double v159 = *(double *)&v146;
                CGFloat v259 = v493.x;
                outlined copy of Text.Layout.Line.Line(*(void **)&v493.x, *(uint64_t *)&v493.y, 1);
                id v260 = (id)_NSTextLineFragmentGetCTLine(*(void **)&v259);
                if (*(double *)&v260 == 0.0) {
                  goto LABEL_199;
                }
                CGFloat v261 = *(double *)&v260;
                CFIndex v262 = (CFIndex)v150;
              }
              else
              {
                double v159 = *(double *)&v146;
                CFIndex v262 = (CFIndex)v150;
                CGFloat v261 = v493.x;
                uint64_t v286 = *(void *)&v493.y;
                outlined copy of Text.Layout.Line.Line(*(void **)&v493.x, *(uint64_t *)&v493.y, 0);
                outlined copy of Text.Layout.Line.Line(*(void **)&v261, v286, 0);
                outlined copy of Text.Layout.Line.Line(*(void **)&v261, v286, 0);

                swift_release();
              }
              v287 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)&v261, v262);
              v554.double y = 0.0;
              v554.double x = 0.0;
              double v546 = 0.0;
              CGFloat v545 = 0.0;
              CGFloat v544 = 0.0;
              v548.double y = 0.0;
              v548.double x = 0.0;
              v578.location = 0;
              v578.length = 1;
              CTRunGetPositions((CTRunRef)v287, v578, &v554);
              v579.location = 0;
              v579.length = 1;
              CTRunGetBaseAdvancesAndOrigins((CTRunRef)v287, v579, 0, &v548);
              double v288 = v548.x;
              double v289 = v548.y;
              double v290 = v554.x;
              double v291 = v554.y;
              v580.location = 0;
              v580.length = 0;
              CTRunGetTypographicBounds((CTRunRef)v287, v580, &v546, &v545, &v544);

              swift_release();
              double v292 = v546;
              double v293 = 0.0;
              if (*(void *)(v506 + 16))
              {
                double v271 = v519;
                CGFloat v294 = *(double *)&v503;
                CGFloat v295 = *(double *)&v502;
                unint64_t v296 = specialized __RawDictionaryStorage.find<A>(_:)(v503, v502);
                uint64_t v273 = v510;
                uint64_t v274 = v511;
                double v275 = v530;
                int v276 = v476;
                uint64_t v277 = v478;
                uint64_t v278 = v477;
                double v279 = v526;
                unint64_t v280 = v518;
                uint64_t v281 = v512;
                uint64_t v282 = v488;
                uint64_t v283 = v487;
                uint64_t v284 = v486;
                if (v297) {
                  double v293 = *(double *)(*(void *)(v506 + 56) + 8 * v296);
                }
              }
              else
              {
                double v271 = v519;
                uint64_t v273 = v510;
                uint64_t v274 = v511;
                double v275 = v530;
                int v276 = v476;
                uint64_t v277 = v478;
                uint64_t v278 = v477;
                CGFloat v294 = *(double *)&v503;
                CGFloat v295 = *(double *)&v502;
                double v279 = v526;
                unint64_t v280 = v518;
                uint64_t v281 = v512;
                uint64_t v282 = v488;
                uint64_t v283 = v487;
                uint64_t v284 = v486;
              }
              double v300 = v290 - v288 + *(double *)&v474;
              double v166 = v473 - (v291 - v289) - v292;
              double v165 = v300 + v293;
              char v299 = v492;
            }
            char v301 = v299 & 1;
            v554.double x = v294;
            v554.double y = v295;
            v555 = (void *)v262;
            double v556 = v159;
            double v557 = v279;
            uint64_t v558 = *(void *)&v271;
            uint64_t v559 = v281;
            unint64_t v560 = v280;
            uint64_t v561 = v282;
            uint64_t v562 = v283;
            uint64_t v563 = v284;
            double v546 = v275;
            CGFloat v147 = v493.x;
            CGPoint v548 = v493;
            CGFloat v302 = v493.y;
            LOBYTE(v549) = v299 & 1;
            *((void *)&v549 + 1) = v277;
            *(void *)&long long v550 = v278;
            DWORD2(v550) = v276;
            uint64_t v145 = v281;
            double v303 = Text.Effect.Composition.Operation.metrics(at:line:context:)(&v546, (uint64_t)&v548, v517, (uint64_t)v509, v274, v273);
            double v305 = v304;
            CGFloat v167 = v306;
            CGFloat v307 = v147;
            LOBYTE(v147) = LOBYTE(v526);
            uint64_t v308 = *(void *)&v302;
            *(double *)&uint64_t v146 = v159;
            outlined consume of Text.Layout.Line.Line(*(void **)&v307, v308, v301);
            double v168 = v303 + v305;
            double v74 = v514;
            double v75 = v513;
            v143 = v480;
          }
          else
          {
            uint64_t v516 = *(void *)(v155 + 16);
            if (v516)
            {
              uint64_t v160 = *(void *)&v519;
              double v508 = v519;
              uint64_t v507 = v151;
              Swift::UInt64 v515 = v155 + 32;
              Swift::UInt64 v161 = v152;
              Swift::UInt64 v162 = v154;
              Swift::UInt64 v163 = v155;
              outlined copy of Text.Layout.Line.Line(*(void **)&v493.x, *(uint64_t *)&v493.y, v492 & 1);
              Swift::UInt64 v487 = v162;
              Swift::UInt64 v488 = v161;
              CGFloat v523 = *(double *)&v146;
              outlined copy of Text.Effect.Composition.Operation(v503, v502, v150, v146, SLOBYTE(v147), v160, v512, v153);
              Swift::UInt64 v486 = v163;
              swift_bridgeObjectRetain();
              uint64_t v164 = 0;
              double v165 = v499;
              double v166 = v498;
              CGFloat v167 = v497;
              double v168 = v496;
              do
              {
                v195 = (uint64_t *)(v515 + 88 * v164);
                uint64_t v187 = *v195;
                CGFloat v196 = *((double *)v195 + 1);
                CGFloat v197 = *((double *)v195 + 3);
                v533 = (void *)v195[2];
                uint64_t v183 = v195[4];
                uint64_t v198 = v195[5];
                uint64_t v200 = v195[6];
                unint64_t v199 = v195[7];
                uint64_t v202 = v195[8];
                uint64_t v201 = v195[9];
                uint64_t v203 = v195[10];
                Swift::UInt64 v529 = v187;
                uint64_t v527 = v201;
                CGFloat v525 = v167;
                CGFloat v524 = v168;
                unint64_t v536 = v199;
                uint64_t v535 = v198;
                uint64_t v534 = v200;
                uint64_t v528 = v203;
                CGFloat v532 = v197;
                if (v199 >> 62)
                {
                  double v522 = v166;
                  double v521 = v165;
                  double v531 = *(double *)&v183;
                  uint64_t v520 = v202;
                  if (v199 >> 62 == 1)
                  {
                    if (LOBYTE(v526))
                    {
                      outlined copy of Text.Layout.Line.Line(v150, *(uint64_t *)&v523, 1);
                      v204 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v150);
                      if (!v204) {
                        goto LABEL_195;
                      }
                      v205 = v204;
                    }
                    else
                    {
                      uint64_t v238 = *(void *)&v523;
                      outlined copy of Text.Layout.Line.Line(v150, *(uint64_t *)&v523, 0);
                      outlined copy of Text.Layout.Line.Line(v150, v238, 0);
                      outlined copy of Text.Layout.Line.Line(v150, v238, 0);

                      swift_release();
                      v205 = (const __CTLine *)v150;
                    }
                    *(double *)&uint64_t v183 = v197;
                    v239 = (id)_CTLineGetRunAtIndex(v205, v529);
                    v554.double y = 0.0;
                    v554.double x = 0.0;
                    double v546 = 0.0;
                    CGFloat v545 = 0.0;
                    CGFloat v544 = 0.0;
                    v548.double y = 0.0;
                    v548.double x = 0.0;
                    v569.location = 0;
                    v569.length = 1;
                    CTRunGetPositions((CTRunRef)v239, v569, &v554);
                    v570.location = 0;
                    v570.length = 1;
                    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v239, v570, 0, &v548);
                    double v240 = v548.x;
                    double v241 = v548.y;
                    double v242 = v554.x;
                    double v243 = v554.y;
                    v571.location = 0;
                    v571.length = 0;
                    CTRunGetTypographicBounds((CTRunRef)v239, v571, &v546, &v545, &v544);

                    swift_release();
                    double v244 = v546;
                    double v245 = 0.0;
                    if (*(void *)(v505 + 16))
                    {
                      unint64_t v246 = specialized __RawDictionaryStorage.find<A>(_:)(0);
                      uint64_t v169 = v510;
                      uint64_t v170 = v511;
                      double v171 = v530;
                      char v172 = LOBYTE(v526);
                      int v173 = v518;
                      uint64_t v174 = v512;
                      v175 = v533;
                      unint64_t v176 = v536;
                      uint64_t v177 = v534;
                      uint64_t v178 = v527;
                      if (v247) {
                        double v245 = *(double *)(*(void *)(v505 + 56) + 8 * v246);
                      }
                    }
                    else
                    {
                      uint64_t v169 = v510;
                      uint64_t v170 = v511;
                      double v171 = v530;
                      char v172 = LOBYTE(v526);
                      int v173 = v518;
                      uint64_t v174 = v512;
                      v175 = v533;
                      unint64_t v176 = v536;
                      uint64_t v177 = v534;
                      uint64_t v178 = v527;
                    }
                    double v179 = *(double *)&v507 - (v243 - v241) - v244;
                    double v180 = v242 - v240 + v508 + v245;
                    CGFloat v181 = *(double *)&v529;
                  }
                  else
                  {
                    if (LOBYTE(v526))
                    {
                      outlined copy of Text.Layout.Line.Line(v150, *(uint64_t *)&v523, 1);
                      v236 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v150);
                      if (!v236) {
                        goto LABEL_196;
                      }
                      v237 = v236;
                    }
                    else
                    {
                      uint64_t v248 = *(void *)&v523;
                      outlined copy of Text.Layout.Line.Line(v150, *(uint64_t *)&v523, 0);
                      outlined copy of Text.Layout.Line.Line(v150, v248, 0);
                      outlined copy of Text.Layout.Line.Line(v150, v248, 0);

                      swift_release();
                      v237 = (const __CTLine *)v150;
                    }
                    v249 = (id)_CTLineGetRunAtIndex(v237, (CFIndex)v533);
                    v554.double y = 0.0;
                    v554.double x = 0.0;
                    double v546 = 0.0;
                    CGFloat v545 = 0.0;
                    CGFloat v544 = 0.0;
                    v548.double y = 0.0;
                    v548.double x = 0.0;
                    v572.location = 0;
                    v572.length = 1;
                    CTRunGetPositions((CTRunRef)v249, v572, &v554);
                    v573.location = 0;
                    v573.length = 1;
                    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v249, v573, 0, &v548);
                    double v250 = v548.x;
                    double v251 = v548.y;
                    double v252 = v554.x;
                    double v253 = v554.y;
                    v574.location = 0;
                    v574.length = 0;
                    CTRunGetTypographicBounds((CTRunRef)v249, v574, &v546, &v545, &v544);

                    swift_release();
                    double v254 = v546;
                    double v255 = 0.0;
                    *(double *)&uint64_t v183 = v197;
                    if (*(void *)(v506 + 16))
                    {
                      unint64_t v256 = specialized __RawDictionaryStorage.find<A>(_:)(v529, *(Swift::UInt *)&v196);
                      uint64_t v169 = v510;
                      uint64_t v170 = v511;
                      double v171 = v530;
                      char v172 = LOBYTE(v526);
                      int v173 = v518;
                      uint64_t v174 = v512;
                      unint64_t v176 = v536;
                      uint64_t v177 = v534;
                      uint64_t v178 = v527;
                      if (v257) {
                        double v255 = *(double *)(*(void *)(v506 + 56) + 8 * v256);
                      }
                    }
                    else
                    {
                      uint64_t v169 = v510;
                      uint64_t v170 = v511;
                      double v171 = v530;
                      char v172 = LOBYTE(v526);
                      int v173 = v518;
                      uint64_t v174 = v512;
                      unint64_t v176 = v536;
                      uint64_t v177 = v534;
                      uint64_t v178 = v527;
                    }
                    double v179 = *(double *)&v507 - (v253 - v251) - v254;
                    double v180 = v252 - v250 + v508 + v255;
                    CGFloat v181 = *(double *)&v529;
                    v175 = v533;
                  }
                  char v182 = v172 & 1;
                  v554.double x = v181;
                  v554.double y = v196;
                  v555 = v175;
                  double v556 = *(double *)&v183;
                  LOBYTE(v183) = LOBYTE(v531);
                  double v557 = v531;
                  uint64_t v558 = v535;
                  uint64_t v559 = v177;
                  unint64_t v560 = v176;
                  uint64_t v561 = v520;
                  uint64_t v562 = v178;
                  uint64_t v563 = v528;
                  double v546 = v171;
                  *(void *)&v548.double x = v150;
                  v184 = v150;
                  CGFloat v185 = v523;
                  v548.double y = v523;
                  LOBYTE(v549) = v172 & 1;
                  *((double *)&v549 + 1) = v519;
                  *(void *)&long long v550 = v174;
                  DWORD2(v550) = v173;
                  double v186 = Text.Effect.Composition.Operation.metrics(at:line:context:)(&v546, (uint64_t)&v548, v517, (uint64_t)v509, v170, v169);
                  uint64_t v187 = v529;
                  double v188 = v186;
                  double v190 = v189;
                  CGFloat v192 = v191;
                  uint64_t v193 = *(void *)&v185;
                  v150 = v184;
                  outlined consume of Text.Layout.Line.Line(v184, v193, v182);
                  double v194 = v188 + v190;
                  double v74 = v514;
                  double v75 = v513;
                  double v166 = v522;
                  double v165 = v521;
                }
                else
                {
                  uint64_t v206 = *(void *)(v203 + 16);
                  if (v206)
                  {
                    uint64_t v501 = v164;
                    double v521 = v165;
                    double v522 = v166;
                    uint64_t v543 = v206;
                    uint64_t v207 = v203;
                    v208 = v150;
                    *(double *)&uint64_t v209 = v196;
                    unint64_t v210 = v199;
                    uint64_t v211 = v198;
                    uint64_t v212 = v200;
                    outlined copy of Text.Layout.Line.Line(v208, *(uint64_t *)&v523, LOBYTE(v526) & 1);
                    uint64_t v520 = v202;
                    uint64_t v213 = v187;
                    double v500 = *(double *)&v209;
                    v214 = v533;
                    outlined copy of Text.Effect.Composition.Operation(v213, v209, v533, *(uint64_t *)&v532, v183, v211, v212, v210);
                    swift_bridgeObjectRetain();
                    v215 = (uint64_t *)(v207 + 56);
                    double v180 = v499;
                    double v179 = v498;
                    CGFloat v192 = v497;
                    double v194 = v496;
                    double v531 = *(double *)&v183;
                    do
                    {
                      char v216 = v183 & 1;
                      CGFloat v217 = *((double *)v215 - 2);
                      v218 = (void *)*(v215 - 1);
                      uint64_t v219 = *v215;
                      double v220 = *((double *)v215 + 1);
                      uint64_t v221 = v215[2];
                      uint64_t v223 = v215[3];
                      unint64_t v222 = v215[4];
                      uint64_t v224 = v215[5];
                      uint64_t v225 = v215[6];
                      uint64_t v226 = v215[7];
                      *(void *)&v554.double x = *(v215 - 3);
                      CGFloat v542 = v554.x;
                      v554.double y = v217;
                      CGFloat v541 = v217;
                      v555 = v218;
                      v540 = v218;
                      double v556 = *(double *)&v219;
                      uint64_t v539 = v219;
                      double v557 = v220;
                      double v538 = v220;
                      uint64_t v558 = v221;
                      uint64_t v559 = v223;
                      unint64_t v560 = v222;
                      unint64_t v537 = v222;
                      uint64_t v561 = v224;
                      uint64_t v562 = v225;
                      uint64_t v563 = v226;
                      double v546 = v530;
                      *(void *)&v548.double x = v214;
                      *(double *)&uint64_t v183 = v532;
                      v548.double y = v532;
                      LOBYTE(v549) = v216;
                      *((void *)&v549 + 1) = v535;
                      *(void *)&long long v550 = v534;
                      DWORD2(v550) = v536;
                      outlined copy of Text.Effect.Composition.Operation(*(uint64_t *)&v554.x, *(uint64_t *)&v217, v218, v219, SLOBYTE(v220), v221, v223, v222);
                      outlined copy of Text.Layout.Line.Line(v214, v183, v216);
                      Text.Effect.Composition.Operation.bounds(at:line:context:)((uint64_t *)&v546, (uint64_t)&v548, v547);
                      v214 = v533;
                      CGFloat v228 = v227;
                      CGFloat v230 = v229;
                      CGFloat v232 = v231;
                      CGFloat v234 = v233;
                      outlined consume of Text.Layout.Line.Line(v533, v183, v216);
                      v604.origin.double x = v180;
                      v604.origin.double y = v179;
                      v604.size.CGFloat width = v192;
                      v604.size.CGFloat height = v194;
                      v609.origin.double x = v228;
                      v609.origin.double y = v230;
                      v609.size.CGFloat width = v232;
                      v609.size.CGFloat height = v234;
                      CGRect v605 = CGRectUnion(v604, v609);
                      double v180 = v605.origin.x;
                      double v179 = v605.origin.y;
                      CGFloat v192 = v605.size.width;
                      double v194 = v605.size.height;
                      LOBYTE(v183) = LOBYTE(v531);
                      outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v542, *(uint64_t *)&v541, v540, v539, SLOBYTE(v538), v221, v223, v537);
                      v215 += 11;
                      --v543;
                    }
                    while (v543);
                    v175 = v214;
                    char v235 = LOBYTE(v526) & 1;
                    swift_bridgeObjectRelease();
                    v150 = v504;
                    outlined consume of Text.Layout.Line.Line(v504, *(uint64_t *)&v523, v235);
                    double v74 = v514;
                    double v75 = v513;
                    double v166 = v522;
                    double v165 = v521;
                    uint64_t v164 = v501;
                    uint64_t v187 = v529;
                    CGFloat v196 = v500;
                  }
                  else
                  {
                    uint64_t v258 = *(void *)&v197;
                    v175 = v533;
                    outlined copy of Text.Effect.Composition.Operation(v187, *(uint64_t *)&v196, v533, v258, v183, v198, v200, v199);
                    double v180 = v499;
                    double v179 = v498;
                    CGFloat v192 = v497;
                    double v194 = v496;
                  }
                }
                ++v164;
                v602.origin.double x = v165;
                v602.origin.double y = v166;
                v602.size.CGFloat width = v525;
                v602.size.CGFloat height = v524;
                v608.origin.double x = v180;
                v608.origin.double y = v179;
                v608.size.CGFloat width = v192;
                v608.size.CGFloat height = v194;
                CGRect v603 = CGRectUnion(v602, v608);
                double v165 = v603.origin.x;
                double v166 = v603.origin.y;
                CGFloat v167 = v603.size.width;
                double v168 = v603.size.height;
                outlined consume of Text.Effect.Composition.Operation(v187, *(uint64_t *)&v196, v175, *(uint64_t *)&v532, v183, v535, v534, v536);
              }
              while (v164 != v516);
              v143 = v480;
              char v144 = v492 & 1;
              swift_bridgeObjectRelease();
              outlined consume of Text.Layout.Line.Line(*(void **)&v493.x, *(uint64_t *)&v493.y, v144);
              uint64_t v145 = v512;
              *(double *)&uint64_t v146 = v523;
              LOBYTE(v147) = LOBYTE(v526);
            }
            else
            {
              v143 = v141;
              uint64_t v145 = v151;
              outlined copy of Text.Effect.Composition.Operation(v503, v502, v150, v146, SLOBYTE(v147), *(uint64_t *)&v519, v151, v153);
              double v165 = v499;
              double v166 = v498;
              CGFloat v167 = v497;
              double v168 = v496;
            }
          }
          uint64_t v148 = v489 + 1;
          v600.origin.double x = v494;
          v600.origin.double y = v495;
          v600.size.CGFloat width = v491;
          v600.size.CGFloat height = v490;
          v607.origin.double x = v165;
          v607.origin.double y = v166;
          v607.size.CGFloat width = v167;
          v607.size.CGFloat height = v168;
          CGRect v601 = CGRectUnion(v600, v607);
          double v494 = v601.origin.x;
          double v495 = v601.origin.y;
          CGFloat v491 = v601.size.width;
          CGFloat v490 = v601.size.height;
          outlined consume of Text.Effect.Composition.Operation(v503, v502, v504, v146, SLOBYTE(v147), *(uint64_t *)&v519, v145, v518);
          uint64_t v142 = v148;
          uint64_t v108 = v482;
          uint64_t v91 = v517;
          v141 = v143;
          if (v148 == v481)
          {
            swift_bridgeObjectRelease();
            outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
            CGFloat v119 = v493.x;
            uint64_t v120 = *(void *)&v493.y;
            char v121 = v492;
            unint64_t v122 = v476;
            uint64_t v123 = v478;
            uint64_t v124 = v477;
            CGFloat v125 = v491;
            double v126 = v490;
            goto LABEL_47;
          }
        }
      }
      uint64_t v356 = v131;
      CGFloat v119 = v493.x;
      uint64_t v120 = *(void *)&v493.y;
      char v121 = v492;
      uint64_t v124 = *(void *)&v134;
      uint64_t v357 = *(void *)&v134;
      unint64_t v122 = v133;
      uint64_t v123 = v132;
      outlined copy of Text.Effect.Composition.Operation((uint64_t)v475, v356, *(void **)&v493.x, *(uint64_t *)&v493.y, v492, v132, v357, v133);
      double v494 = v499;
      double v495 = v498;
      CGFloat v125 = v497;
      double v126 = v496;
      goto LABEL_47;
    }
    if (v133 >> 62 == 1) {
      break;
    }
    CFIndex v309 = *(CFIndex *)&v493.x;
    if (v485)
    {
      uint64_t v310 = *(void *)&v484;
      outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, 1);
      outlined copy of Text.Layout.Line.Line(v108, v310, 1);
      v311 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v108);
      if (!v311) {
        goto LABEL_202;
      }
      v312 = v311;
      outlined consume of Text.Layout.Line.Line(v108, v310, 1);
    }
    else
    {
      uint64_t v326 = *(void *)&v484;
      outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, 0);
      outlined copy of Text.Layout.Line.Line(v108, v326, 0);
      outlined copy of Text.Layout.Line.Line(v108, v326, 0);

      swift_release();
      v312 = (const __CTLine *)v108;
    }
    v327 = (id)_CTLineGetRunAtIndex(v312, v309);
    v554.double y = 0.0;
    v554.double x = 0.0;
    double v546 = 0.0;
    CGFloat v545 = 0.0;
    CGFloat v544 = 0.0;
    v548.double y = 0.0;
    v548.double x = 0.0;
    v584.location = 0;
    v584.length = 1;
    CTRunGetPositions((CTRunRef)v327, v584, &v554);
    v585.location = 0;
    v585.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v327, v585, 0, &v548);
    double v328 = v548.x;
    double v329 = v548.y;
    double v330 = v554.x;
    double v331 = v554.y;
    v586.location = 0;
    v586.length = 0;
    CTRunGetTypographicBounds((CTRunRef)v327, v586, &v546, &v545, &v544);

    swift_release();
    double v332 = v546;
    double v333 = 0.0;
    if (*(void *)(v506 + 16))
    {
      unint64_t v334 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt64)v475, (Swift::UInt)v483);
      if (v335) {
        double v333 = *(double *)(*(void *)(v506 + 56) + 8 * v334);
      }
    }
    double v495 = v450 - (v331 - v329) - v332;
    double v494 = v451 + v330 - v328 + v333;
    uint64_t v336 = *(void *)v429;
    double v74 = v514;
    double v75 = v513;
    if (!*(void *)(*(void *)v429 + 16)) {
      goto LABEL_144;
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)((Swift::UInt64)v475);
    Swift::Int v337 = Hasher._finalize()();
    uint64_t v338 = -1 << *(unsigned char *)(v336 + 32);
    unint64_t v339 = v337 & ~v338;
    if (((*(void *)(v336 + 56 + ((v339 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v339) & 1) == 0) {
      goto LABEL_144;
    }
    uint64_t v340 = *(void *)(v336 + 48);
    uint64_t v341 = (uint64_t)v475;
    if (*(void **)(v340 + 8 * v339) != v475)
    {
      uint64_t v358 = ~v338;
      while (1)
      {
        unint64_t v339 = (v339 + 1) & v358;
        if (((*(void *)(v336 + 56 + ((v339 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v339) & 1) == 0) {
          break;
        }
        if (*(void **)(v340 + 8 * v339) == v475) {
          goto LABEL_151;
        }
      }
LABEL_144:
      v359 = v425;
      swift_beginAccess();
      uint64_t v360 = *v359;
      if (*(void *)(v360 + 16))
      {
        uint64_t v361 = (uint64_t)v475;
        uint64_t v362 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v475);
        if (v363)
        {
          v364 = *(void **)(*(void *)(v360 + 56) + 8 * v362);
          swift_endAccess();
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          v365 = v364;
          RangeSet.init()();
          CGFloat v366 = v493.y;
          if (v309 != *(void *)&v493.y)
          {
            CFIndex v371 = v309;
            if (*(uint64_t *)&v493.y < v309) {
              goto LABEL_194;
            }
            while (v371 < *(uint64_t *)&v366)
            {
              if (v485)
              {
                uint64_t v372 = *(void *)&v484;
                outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, 1);
                v373 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v108);
                if (!v373) {
                  goto LABEL_200;
                }
                v374 = v373;
                outlined consume of Text.Layout.Line.Line(v108, v372, 1);
              }
              else
              {
                uint64_t v375 = *(void *)&v484;
                outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, 0);
                outlined copy of Text.Layout.Line.Line(v108, v375, 0);

                swift_release();
                v374 = (const __CTLine *)v108;
              }
              v376 = (id)_CTLineGetRunAtIndex(v374, v371);
              CFRange StringRange = CTRunGetStringRange((CTRunRef)v376);

              swift_release();
              CFIndex v378 = StringRange.location + StringRange.length;
              if (__OFADD__(StringRange.location, StringRange.length)) {
                goto LABEL_185;
              }
              if (v378 < StringRange.location) {
                goto LABEL_186;
              }
              *(void *)&v548.double x = StringRange.location;
              *(void *)&v548.double y = StringRange.location + StringRange.length;
              if (__OFSUB__(v378, StringRange.location)) {
                goto LABEL_187;
              }
              if (v378 != StringRange.location)
              {
                v379 = (void (*)(CGPoint *, void))RangeSet._ranges.modify();
                type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
                RangeSet.Ranges._insert(contentsOf:)();
                v379(&v554, 0);
              }
              ++v371;
              CGFloat v366 = v493.y;
              uint64_t v108 = v482;
              uint64_t v91 = v517;
              if (*(void *)&v493.y == v371) {
                goto LABEL_147;
              }
            }
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
            goto LABEL_191;
          }
LABEL_147:
          (*v413)(v421, v455, v454);
          uint64_t v367 = *(void *)(v91 + 16);
          if (v367)
          {
            uint64_t v368 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v475);
            if (v369) {
              uint64_t v367 = *(void *)(*(void *)(v91 + 56) + 8 * v368);
            }
            else {
              uint64_t v367 = 0;
            }
          }
          uint64_t v380 = (uint64_t)v483;
          if (__OFADD__(v367, v483)) {
            goto LABEL_193;
          }
          v554.double x = v530;
          uint64_t v381 = (uint64_t)v475;
          v382 = v421;
          double v383 = (*(double (**)(void *, uint64_t, char *, CGPoint *, uint64_t, char *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v365) + 0xF0))(v475, (uint64_t)v483 + v367, v421, &v554, v91, v509, v511, v510);
          double v385 = v384;
          double v387 = v386;

          (*v412)(v382, v454);
          outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
          uint64_t v388 = v381;
          uint64_t v389 = v380;
          CGFloat v119 = v493.x;
          uint64_t v120 = *(void *)&v493.y;
          char v121 = v492;
          uint64_t v123 = v478;
          uint64_t v124 = v477;
          unint64_t v122 = v476;
          outlined consume of Text.Effect.Composition.Operation(v388, v389, *(void **)&v493.x, *(uint64_t *)&v493.y, v492, v478, v477, v476);
          CGFloat v125 = v387;
          double v126 = v383 + v385;
          goto LABEL_47;
        }
        swift_endAccess();
        outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
        uint64_t v342 = v361;
      }
      else
      {
        swift_endAccess();
LABEL_151:
        outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
        uint64_t v342 = (uint64_t)v475;
      }
      goto LABEL_153;
    }
    outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
    uint64_t v342 = v341;
LABEL_153:
    CGFloat v119 = *(double *)&v309;
    v370 = (void *)v309;
    uint64_t v120 = *(void *)&v493.y;
    char v121 = v492;
    uint64_t v123 = v478;
    uint64_t v124 = v477;
    unint64_t v122 = v476;
    outlined consume of Text.Effect.Composition.Operation(v342, (uint64_t)v483, v370, *(uint64_t *)&v493.y, v492, v478, v477, v476);
    CGFloat v125 = 0.0;
    double v126 = 0.0 + 0.0;
LABEL_47:
    uint64_t v127 = v465 + 1;
    v598.origin.double x = v469;
    v598.origin.double y = v468;
    v598.size.CGFloat width = v467;
    v598.size.CGFloat height = v466;
    double v128 = v494;
    double v129 = v495;
    CGRect v599 = CGRectUnion(v598, *(CGRect *)(&v125 - 2));
    CGFloat v469 = v599.origin.x;
    CGFloat v468 = v599.origin.y;
    CGFloat v467 = v599.size.width;
    CGFloat v466 = v599.size.height;
    outlined consume of Text.Effect.Composition.Operation((uint64_t)v475, (uint64_t)v483, *(void **)&v119, v120, v121, v123, v124, v122);
    uint64_t v118 = v127;
    id v26 = v480;
    if (v127 == v458)
    {
      uint64_t v91 = v408;
      swift_bridgeObjectRelease_n();
      outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
      swift_bridgeObjectRelease();
      double v114 = v469;
      double v115 = v468;
      CGFloat v116 = v467;
      CGFloat v117 = v466;
      uint64_t v46 = v411;
      goto LABEL_171;
    }
  }
  if ((v485 & 1) == 0)
  {
    uint64_t v313 = *(void *)&v484;
    outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, 0);
    outlined copy of Text.Layout.Line.Line(v108, v313, 0);
    outlined copy of Text.Layout.Line.Line(v108, v313, 0);

    swift_release();
    v140 = (const __CTLine *)v108;
    goto LABEL_113;
  }
  uint64_t v138 = *(void *)&v484;
  outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, 1);
  outlined copy of Text.Layout.Line.Line(v108, v138, 1);
  v139 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v108);
  if (!v139)
  {
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
  }
  v140 = v139;
  outlined consume of Text.Layout.Line.Line(v108, v138, 1);
LABEL_113:
  v314 = (id)_CTLineGetRunAtIndex(v140, (CFIndex)v475);
  v554.double y = 0.0;
  v554.double x = 0.0;
  double v546 = 0.0;
  CGFloat v545 = 0.0;
  CGFloat v544 = 0.0;
  v548.double y = 0.0;
  v548.double x = 0.0;
  v581.location = 0;
  v581.length = 1;
  CTRunGetPositions((CTRunRef)v314, v581, &v554);
  v582.location = 0;
  v582.length = 1;
  CTRunGetBaseAdvancesAndOrigins((CTRunRef)v314, v582, 0, &v548);
  double TypographicBounds = v548.x;
  double v316 = v548.y;
  double v317 = v554.x;
  double v318 = v554.y;
  v583.location = 0;
  v583.length = 0;
  CTRunGetTypographicBounds((CTRunRef)v314, v583, &v546, &v545, &v544);

  swift_release();
  double v319 = v546;
  double v320 = 0.0;
  if (*(void *)(v505 + 16))
  {
    unint64_t v321 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if (v322) {
      double v320 = *(double *)(*(void *)(v505 + 56) + 8 * v321);
    }
  }
  uint64_t v323 = (uint64_t)v475;
  uint64_t v46 = v483;
  double v495 = v450 - (v318 - v316) - v319;
  double v494 = v451 + v317 - TypographicBounds + v320;
  if (v475 == v483)
  {
    outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
    uint64_t v324 = v323;
    uint64_t v325 = v323;
    CGFloat v119 = v493.x;
    uint64_t v120 = *(void *)&v493.y;
    char v121 = v492;
    uint64_t v123 = v478;
    uint64_t v124 = v477;
    unint64_t v122 = v476;
    outlined consume of Text.Effect.Composition.Operation(v324, v325, *(void **)&v493.x, *(uint64_t *)&v493.y, v492, v478, v477, v476);
    CGFloat v125 = 0.0;
    double v126 = 0.0 + 0.0;
    double v74 = v514;
    double v75 = v513;
    goto LABEL_47;
  }
  if ((uint64_t)v483 < (uint64_t)v475)
  {
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
    goto LABEL_201;
  }
  double v343 = 0.0;
  CFIndex v344 = (CFIndex)v475;
  double v345 = 0.0;
  double v346 = 0.0;
  double v74 = v514;
  double v75 = v513;
  while (v344 < (uint64_t)v46)
  {
    if (v485)
    {
      uint64_t v353 = *(void *)&v484;
      outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, 1);
      v354 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v108);
      if (!v354) {
        goto LABEL_197;
      }
      v348 = v354;
      outlined consume of Text.Layout.Line.Line(v108, v353, 1);
    }
    else
    {
      uint64_t v347 = *(void *)&v484;
      outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, 0);
      outlined copy of Text.Layout.Line.Line(v108, v347, 0);

      swift_release();
      v348 = (const __CTLine *)v108;
    }
    CFIndex v349 = v344 + 1;
    v350 = (id)_CTLineGetRunAtIndex(v348, v344);
    v554.double y = 0.0;
    v554.double x = 0.0;
    double v546 = 0.0;
    CGFloat v545 = 0.0;
    CGFloat v544 = 0.0;
    v548.double y = 0.0;
    v548.double x = 0.0;
    v587.location = 0;
    v587.length = 1;
    CTRunGetPositions((CTRunRef)v350, v587, &v554);
    v588.location = 0;
    v588.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v350, v588, 0, &v548);
    v589.location = 0;
    v589.length = 0;
    double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v350, v589, &v546, &v545, &v544);

    swift_release();
    double v351 = fabs(v545);
    if (v346 <= v546) {
      double v346 = v546;
    }
    if (v345 <= v351) {
      double v345 = v351;
    }
    double v343 = v343 + TypographicBounds;
    CFIndex v344 = v349;
    uint64_t v46 = v483;
    BOOL v352 = v483 == (void *)v349;
    uint64_t v91 = v517;
    if (v352)
    {
      outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
      uint64_t v355 = (uint64_t)v46;
      CGFloat v119 = v493.x;
      uint64_t v120 = *(void *)&v493.y;
      char v121 = v492;
      uint64_t v123 = v478;
      uint64_t v124 = v477;
      unint64_t v122 = v476;
      outlined consume of Text.Effect.Composition.Operation((uint64_t)v475, v355, *(void **)&v493.x, *(uint64_t *)&v493.y, v492, v478, v477, v476);
      CGFloat v125 = v343;
      double v126 = v346 + v345;
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_183:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)&unint64_t v393 = x - v75;
  *(double *)&unint64_t v394 = v424 - v74;
  v395 = *(char **)&v414[v417];
  *(void *)&v554.double x = v108;
  v554.double y = v484;
  LOBYTE(v555) = v485;
  double v556 = v451;
  double v557 = v450;
  LODWORD(v558) = v406;
  uint64_t v559 = v405;
  unint64_t v560 = v404;
  uint64_t v561 = v91;
  v548.double x = *(CGFloat *)&v395[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time];
  CGFloat v396 = v484;
  outlined copy of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, v485);
  swift_bridgeObjectRetain();
  v397 = v395;
  v398 = v409;
  TextRenderLayer.interactionMetrics(for:at:context:segmentIndex:)((uint64_t)&v554, (uint64_t *)&v548, v517, v509, v511, v510, v407, v409);

  uint64_t v399 = *(void *)&v396;
  LOBYTE(v396) = v485;
  outlined consume of Text.Layout.Line.Line(v108, v399, v485);
  swift_bridgeObjectRelease();
  CGPoint v400 = Text.Effect.InteractionMetrics.displacedPoint(from:activeOrigin:)((CGPoint)__PAIR128__(v394, v393), (CGPoint)__PAIR128__(*(unint64_t *)&v345, *(unint64_t *)&TypographicBounds));
  double x = v400.x;
  double y = v400.y;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  outlined release of TextRenderLayer.Layout?(v567, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
  outlined consume of Text.Layout.Line.Line(v108, *(uint64_t *)&v484, SLOBYTE(v396));
  swift_bridgeObjectRelease();
  outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v398, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
  outlined destroy of Text.Effect.RenderSegmentation.Segment(v464, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  (*v433)(v26, v463);
LABEL_181:
  double v391 = x;
  double v392 = y;
  result.double y = v392;
  result.double x = v391;
  return result;
}

void TextEffectsRenderer._convertToRenderSpace(_:textRange:)(void *a1, double a2, double a3)
{
  uint64_t v267 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x270FA5388](v267);
  double v268 = (uint64_t *)((char *)&v231 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v277 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v276 = (char *)&v231 - v10;
  uint64_t v274 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v274);
  uint64_t v273 = (uint64_t)&v231 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v278 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v270 = (uint64_t)&v231 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v280 = (uint64_t)&v231 - v16;
  MEMORY[0x270FA5388](v17);
  double v275 = (char *)&v231 - v18;
  uint64_t v282 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v285 = *(void *)(v282 - 8);
  MEMORY[0x270FA5388](v282);
  uint64_t v269 = (uint64_t)&v231 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v283 = (uint64_t)&v231 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v279 = (uint64_t)&v231 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v293 = (uint64_t)&v231 - v25;
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  uint64_t v290 = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v284 = (char *)&v231 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v30 - 8);
  CGFloat v294 = (unint64_t *)((char *)&v231 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v32);
  double v289 = (unint64_t *)((char *)&v231 - v33);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], v29);
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v308 = (char *)&v231 - v35;
  uint64_t v314 = type metadata accessor for UUID();
  uint64_t v309 = *(void *)(v314 - 8);
  MEMORY[0x270FA5388](v314);
  double v305 = (char *)&v231 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  double v292 = (char *)&v231 - v38;
  type metadata accessor for (UUID, NSTextLayoutFragment)();
  uint64_t v304 = v39;
  MEMORY[0x270FA5388](v39);
  double v303 = (char *)&v231 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  uint64_t v42 = *(void *)(*(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs) + 16);
  uint64_t v43 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  uint64_t v288 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v42)
  {
    uint64_t v56 = (uint64_t)v308;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v309 + 56))(v308, 1, 1, v314);
    goto LABEL_105;
  }
  unint64_t v272 = a1;
  unint64_t v44 = 0;
  uint64_t v266 = 0;
  char v299 = (uint64_t *)(v3 + v43);
  uint64_t v307 = v309 + 16;
  uint64_t v313 = v309 + 56;
  uint64_t v306 = v309 + 48;
  v312 = (void (**)(char *, uint64_t, uint64_t))(v309 + 32);
  uint64_t v45 = v41 & 0xFFFFFFFFFFFFFF8;
  if (v41 < 0) {
    uint64_t v46 = v41;
  }
  else {
    uint64_t v46 = v41 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v252 = v46;
  unint64_t v300 = v41 & 0xC000000000000001;
  uint64_t v297 = v41 + 32;
  CGFloat v302 = (void (**)(char *, uint64_t))(v309 + 8);
  uint64_t v286 = (unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v27 + 48);
  v287 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v264 = (void (**)(char *, uint64_t))(v9 + 8);
  CFIndex v262 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  uint64_t v263 = (void (**)(uint64_t, uint64_t))(v13 + 8);
  double v47 = *MEMORY[0x263F001A0];
  double v48 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v49 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v50 = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v255 = v42 - 1;
  double v51 = a2;
  double v52 = a3;
  unint64_t v254 = (unint64_t)"Animator";
  char v257 = (void *)0x800000024621D820;
  uint64_t v258 = MEMORY[0x263F8EE58] + 8;
  unint64_t v256 = (void *)0x800000024621D860;
  uint64_t v53 = v288;
  unint64_t v54 = v41;
  uint64_t v311 = v41;
  uint64_t v55 = v292;
  uint64_t v56 = (uint64_t)v308;
  uint64_t v298 = v41 & 0xFFFFFFFFFFFFFF8;
  uint64_t v296 = v42;
  do
  {
    unint64_t v57 = v44;
    uint64_t v58 = v53;
    while (1)
    {
      if (v57 >= *(void *)(v53 + 16))
      {
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
        return;
      }
      uint64_t v59 = v309;
      uint64_t v60 = v314;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v309 + 16))(v56, v53+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v57, v314);
      char v301 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
      v301(v56, 0, 1, v60);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v56, 1, v60) == 1) {
        goto LABEL_105;
      }
      uint64_t v61 = *v312;
      (*v312)(v55, v56, v314);
      if (v54 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v57 == v79)
        {
LABEL_102:
          (*v302)(v55, v314);
          goto LABEL_106;
        }
      }
      else if (v57 == *(void *)(v45 + 16))
      {
        goto LABEL_102;
      }
      if (v300)
      {
        id v62 = (id)MEMORY[0x24C523D60](v57, v311);
      }
      else
      {
        if (v57 >= *(void *)(v45 + 16)) {
          goto LABEL_108;
        }
        id v62 = *(id *)(v297 + 8 * v57);
      }
      v63 = v62;
      unint64_t v295 = v313 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v64 = *(int *)(v304 + 48);
      unint64_t v65 = v303;
      uint64_t v66 = v314;
      v61(v303, (uint64_t)v55, v314);
      id v310 = v63;
      *(void *)&v65[v64] = v63;
      uint64_t v67 = v305;
      v61(v305, (uint64_t)v65, v66);
      uint64_t v68 = (uint64_t)v67;
      uint64_t v69 = v299;
      swift_beginAccess();
      uint64_t v70 = *v69;
      if (*(void *)(v70 + 16))
      {
        unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v68);
        if (v72) {
          break;
        }
      }
      swift_endAccess();

      (*v302)((char *)v68, v314);
      uint64_t v56 = (uint64_t)v308;
LABEL_8:
      uint64_t v45 = v298;
      ++v57;
      unint64_t v54 = v311;
      uint64_t v53 = v58;
      if (v296 == v57)
      {
        v195 = v301;
        goto LABEL_104;
      }
    }
    uint64_t v73 = *(void **)(*(void *)(v70 + 56) + 8 * v71);
    swift_endAccess();
    double v74 = *v302;
    double v75 = v73;
    v74((char *)v68, v314);
    uint64_t v76 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer;
    uint64_t v77 = *(void *)&v75[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
    _sypSgWObTm_1(v77 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v326, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    _sypSgWObTm_1((uint64_t)v326, (uint64_t)v327, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    int v78 = _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v327);
    uint64_t v56 = (uint64_t)v308;
    if (v78 == 1)
    {

      uint64_t v55 = v292;
      goto LABEL_8;
    }
    uint64_t v249 = v76;
    double v250 = v75;
    uint64_t v80 = *(void *)(v77 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap);
    CGFloat v232 = *(char **)(v77 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8);
    uint64_t v81 = *(void *)(v77 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
    swift_beginAccess();
    uint64_t v82 = *(void *)(v81 + 112);
    uint64_t v83 = v327[4];
    uint64_t v84 = (uint64_t *)(v77 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements);
    swift_beginAccess();
    uint64_t v85 = *v84;
    double v86 = *(void **)(v83 + 16);
    outlined release of TextRenderLayer.Layout?(v326, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
    uint64_t v248 = v85 + 32;
    uint64_t v239 = v80;
    swift_bridgeObjectRetain();
    uint64_t v238 = v82;
    swift_retain();
    uint64_t v237 = v81;
    swift_retain();
    uint64_t v265 = v83;
    swift_bridgeObjectRetain();
    uint64_t v271 = v85;
    swift_bridgeObjectRetain();
    unint64_t v87 = 0;
    unint64_t v236 = v57 + 1;
    uint64_t v45 = v298;
    double v245 = v52;
    double v246 = v51;
    uint64_t v281 = v86;
    double v242 = v47;
    double v243 = v48;
    double v247 = v49;
    double v251 = v50;
    while (1)
    {
      uint64_t v89 = v294;
      if ((void *)v87 == v86)
      {
        uint64_t v90 = 1;
        double v291 = (double *)v86;
        uint64_t v91 = v290;
      }
      else
      {
        uint64_t v91 = v290;
        if (v87 >= *(void *)(v265 + 16)) {
          goto LABEL_109;
        }
        uint64_t v92 = (uint64_t)&v284[*(int *)(v290 + 48)];
        outlined init with copy of Text.Effect.RenderSegmentation.Segment(v265+ ((*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80))+ *(void *)(v285 + 72) * v87, v92, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        uint64_t v93 = (uint64_t)v294 + *(int *)(v91 + 48);
        *CGFloat v294 = v87;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v92, v93, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        uint64_t v89 = v294;
        uint64_t v90 = 0;
        double v291 = (double *)(v87 + 1);
        double v86 = v281;
      }
      (*v287)(v89, v90, 1, v91);
      uint64_t v94 = (uint64_t)v89;
      uint64_t v95 = v289;
      outlined init with take of (key: UUID, value: TextRenderSurface)?(v94, (uint64_t)v289, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
      if ((*v286)(v95, 1, v91) == 1)
      {
        swift_bridgeObjectRelease();

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of TextRenderLayer.Layout?(v326, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);

        uint64_t v53 = v288;
        uint64_t v55 = v292;
        goto LABEL_74;
      }
      unint64_t v96 = *v95;
      outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v95 + *(int *)(v91 + 48), v293, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if ((v96 & 0x8000000000000000) != 0 || v96 >= *(void *)(v271 + 16))
      {
        uint64_t v88 = v293;
        goto LABEL_25;
      }
      double v97 = v47;
      uint64_t v98 = (double *)(v248 + 16 * v96);
      double v99 = *v98;
      double v260 = v98[1];
      double v261 = v99;
      uint64_t v100 = (double *)(*(void *)&v250[v249] + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds);
      double v101 = *v100;
      double v259 = v100[1];
      id v102 = v272;
      uint64_t v53 = v288;
      if (!v272) {
        goto LABEL_50;
      }
      self;
      char v103 = (void *)swift_dynamicCastObjCClass();
      if (v103)
      {
        double v104 = COERCE_DOUBLE(objc_msgSend(v103, sel_range));
        if (__OFADD__(*(void *)&v104, v105)) {
          goto LABEL_110;
        }
        id v106 = v310;
        if (*(void *)&v104 + v105 < *(uint64_t *)&v104) {
          goto LABEL_111;
        }
        double v47 = v97;
        double v244 = (double *)(*(void *)&v104 + v105);
        double v259 = v104;
        goto LABEL_38;
      }
      id v125 = objc_msgSend(objc_msgSend(v102, sel_location), sel_compare_, objc_msgSend(v102, sel_endLocation));
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!v125) {
        break;
      }
LABEL_49:
      double v244 = &v231;
      type metadata accessor for TextRenderLayer.Layout?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v258, MEMORY[0x263F8E0F8]);
      uint64_t v126 = swift_allocObject();
      *(_OWORD *)(v126 + 16) = xmmword_2461B9DC0;
      *(void *)&long long v320 = 0;
      *((void *)&v320 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      double v241 = *((double *)&v320 + 1);
      *(void *)&long long v320 = 0;
      *((void *)&v320 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v127._countAndFlagsBits = 0xD000000000000035;
      v127._object = v257;
      String.append(_:)(v127);
      id v128 = objc_msgSend(v102, sel_description);
      uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v131 = v130;

      v132._countAndFlagsBits = v129;
      v132._object = v131;
      String.append(_:)(v132);
      swift_bridgeObjectRelease();
      v133._countAndFlagsBits = 0;
      v133._object = (void *)0xE000000000000000;
      String.append(_:)(v133);
      swift_bridgeObjectRelease();
      v134._countAndFlagsBits = 2108704;
      v134._object = (void *)0xE300000000000000;
      String.append(_:)(v134);
      v135._countAndFlagsBits = StaticString.description.getter();
      String.append(_:)(v135);
      swift_bridgeObjectRelease();
      v136._countAndFlagsBits = 58;
      v136._object = (void *)0xE100000000000000;
      String.append(_:)(v136);
      v315[0] = 84;
      v137._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v137);
      swift_bridgeObjectRelease();
      v138._countAndFlagsBits = 0xD00000000000001CLL;
      v138._object = v256;
      String.append(_:)(v138);
      long long v139 = v320;
      *(void *)(v126 + 56) = MEMORY[0x263F8D310];
      *(_OWORD *)(v126 + 32) = v139;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
LABEL_50:
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v293, v283, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      double v141 = a3;
      if (EnumCaseMultiPayload)
      {
        double v86 = v281;
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v142 = v273;
          outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v283, v273, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          v143 = (CGFloat *)(v142 + *(int *)(v274 + 32));
          CGFloat v144 = *v143;
          CGFloat v145 = v143[1];
          CGFloat v146 = v143[2];
          CGFloat v147 = v143[3];
          outlined destroy of Text.Effect.RenderSegmentation.Segment(v142, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          outlined consume of Text.Layout.Line.Line(*(void **)(v283 + 24), *(void *)(v283 + 32), *(unsigned char *)(v283 + 40));
          swift_bridgeObjectRelease();
          specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
          CGFloat v144 = v97;
          CGFloat v145 = v48;
          CGFloat v146 = v49;
          CGFloat v147 = v251;
        }
      }
      else
      {
        CGFloat v144 = *(double *)(v283 + 24);
        CGFloat v145 = *(double *)(v283 + 32);
        CGFloat v146 = *(double *)(v283 + 40);
        CGFloat v147 = *(double *)(v283 + 48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        double v86 = v281;
      }
      CGFloat v148 = v261 + v101;
      double v149 = a2;
      CGFloat v150 = v261 + v101 + a2;
      CGFloat v151 = v260 + v141;
      v331.origin.double x = v144;
      v331.origin.double y = v145;
      v331.size.CGFloat width = v146;
      v331.size.CGFloat height = v147;
      CGRect v332 = CGRectOffset(v331, v148, v260 + v259);
      v330.double x = v150;
      v330.double y = v151;
      if (CGRectContainsPoint(v332, v330))
      {
        double v259 = 0.0;
        double v244 = 0;
        char v196 = 1;
        a2 = v149;
        a3 = v141;
        double v47 = v242;
        double v48 = v243;
        double v51 = v246;
        double v49 = v247;
        double v50 = v251;
        double v52 = v245;
        goto LABEL_78;
      }
      a2 = v149;
      a3 = v141;
      uint64_t v88 = v293;
      double v47 = v242;
      double v48 = v243;
      double v51 = v246;
      double v49 = v247;
      double v50 = v251;
      double v52 = v245;
LABEL_25:
      outlined destroy of Text.Effect.RenderSegmentation.Segment(v88, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      unint64_t v87 = (unint64_t)v291;
    }
    id v186 = objc_msgSend(v102, sel_location);
    self;
    uint64_t v187 = (void *)swift_dynamicCastObjCClass();
    if (!v187)
    {
      swift_unknownObjectRelease();
      id v102 = v272;
      goto LABEL_49;
    }
    double v188 = COERCE_DOUBLE(objc_msgSend(v187, sel_range));
    uint64_t v190 = v189;
    swift_unknownObjectRelease();
    if (__OFADD__(*(void *)&v188, v190)) {
      goto LABEL_118;
    }
    id v106 = v310;
    if (*(void *)&v188 + v190 < *(uint64_t *)&v188) {
      goto LABEL_119;
    }
    double v47 = v97;
    double v244 = (double *)(*(void *)&v188 + v190);
    double v259 = v188;
LABEL_38:
    double v107 = COERCE_DOUBLE(objc_msgSend(v106, sel_rangeInElement, *(void *)&v231));
    self;
    uint64_t v108 = (void *)swift_dynamicCastObjCClass();
    if (v108)
    {
      unint64_t v109 = (char *)objc_msgSend(v108, sel_range);
      double v110 = v107;
      uint64_t v112 = v111;

      if (__OFADD__(v109, v112)) {
        goto LABEL_116;
      }
      double v113 = v259;
      if ((uint64_t)&v109[v112] < (uint64_t)v109) {
        goto LABEL_117;
      }
    }
    else
    {
      id v152 = objc_msgSend(objc_msgSend(*(id *)&v107, sel_location), sel_compare_, objc_msgSend(*(id *)&v107, sel_endLocation));
      double v241 = v107;
      id v153 = v152;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v153) {
        goto LABEL_58;
      }
      id v191 = objc_msgSend(*(id *)&v241, sel_location);
      self;
      CGFloat v192 = (void *)swift_dynamicCastObjCClass();
      if (!v192)
      {
        swift_unknownObjectRelease();
LABEL_58:
        type metadata accessor for TextRenderLayer.Layout?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
        uint64_t v154 = swift_allocObject();
        *(_OWORD *)(v154 + 16) = xmmword_2461B9DC0;
        *(void *)&long long v320 = 0;
        *((void *)&v320 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(38);
        double v261 = *((double *)&v320 + 1);
        *(void *)&long long v320 = 0;
        *((void *)&v320 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v155._countAndFlagsBits = 0xD000000000000035;
        v155._object = (void *)(v254 | 0x8000000000000000);
        String.append(_:)(v155);
        double v156 = v241;
        id v157 = objc_msgSend(*(id *)&v241, sel_description);
        uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v160 = v159;

        v161._countAndFlagsBits = v158;
        v161._object = v160;
        String.append(_:)(v161);
        swift_bridgeObjectRelease();
        v162._countAndFlagsBits = 0;
        v162._object = (void *)0xE000000000000000;
        String.append(_:)(v162);
        swift_bridgeObjectRelease();
        v163._countAndFlagsBits = 2108704;
        v163._object = (void *)0xE300000000000000;
        String.append(_:)(v163);
        v164._countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v164);
        swift_bridgeObjectRelease();
        v165._countAndFlagsBits = 58;
        v165._object = (void *)0xE100000000000000;
        String.append(_:)(v165);
        v315[0] = 84;
        v166._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v166);
        swift_bridgeObjectRelease();
        v167._object = (void *)(v253 | 0x8000000000000000);
        v167._countAndFlagsBits = 0xD00000000000001CLL;
        String.append(_:)(v167);
        long long v168 = v320;
        *(void *)(v154 + 56) = MEMORY[0x263F8D310];
        *(_OWORD *)(v154 + 32) = v168;
        print(_:separator:terminator:)();

        swift_bridgeObjectRelease();
        uint64_t v88 = v293;
        double v50 = v251;
        double v86 = v281;
        goto LABEL_25;
      }
      unint64_t v109 = (char *)objc_msgSend(v192, sel_range);
      uint64_t v194 = v193;

      swift_unknownObjectRelease();
      if (__OFADD__(v109, v194)) {
        goto LABEL_120;
      }
      double v113 = v259;
      if ((uint64_t)&v109[v194] < (uint64_t)v109) {
        goto LABEL_121;
      }
    }
    *(void *)&double v114 = *(void *)&v113 - (void)v109;
    if (__OFSUB__(*(void *)&v113, v109)) {
      goto LABEL_112;
    }
    BOOL v115 = __OFSUB__(v244, *(void *)&v113);
    CGFloat v116 = (char *)v244 - *(void *)&v113;
    uint64_t v117 = v280;
    if (v115) {
      goto LABEL_113;
    }
    BOOL v115 = __OFADD__(v116, *(void *)&v114);
    uint64_t v118 = (double *)&v116[*(void *)&v114];
    if (v115) {
      goto LABEL_114;
    }
    double v259 = v114;
    double v244 = v118;
    if ((uint64_t)v118 < *(uint64_t *)&v114) {
      goto LABEL_115;
    }
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v293, v279, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int v119 = swift_getEnumCaseMultiPayload();
    unint64_t v240 = v96;
    if (v119)
    {
      if (v119 == 1)
      {
        uint64_t v120 = v273;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v279, v273, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        char v121 = *(unsigned char *)(v120 + 16);
        int v122 = *(_DWORD *)(v120 + 40);
        long long v320 = *(_OWORD *)v120;
        char v321 = v121;
        long long v322 = *(_OWORD *)(v120 + 24);
        int v323 = v122;
        uint64_t v123 = v280;
        Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v120 + *(int *)(v274 + 24)), v280);
        uint64_t v124 = v120;
        uint64_t v117 = v123;
        outlined destroy of Text.Effect.RenderSegmentation.Segment(v124, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        double v50 = v251;
      }
      else
      {
        uint64_t v170 = *(void **)(v279 + 24);
        uint64_t v171 = *(void *)(v279 + 32);
        unsigned __int8 v172 = *(unsigned char *)(v279 + 40);
        int v233 = v172;
        uint64_t v173 = *(void *)(v279 + 48);
        uint64_t v174 = *(void *)(v279 + 56);
        double v241 = a3;
        int v235 = *(_DWORD *)(v279 + 64);
        uint64_t v175 = *(void *)(v279 + 72);
        uint64_t v176 = *(void *)(v279 + 80);
        uint64_t v177 = *(void *)(v279 + 88);
        outlined copy of Text.Layout.Line.Line(v170, v171, v172);
        lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
        uint64_t v234 = v177;
        swift_bridgeObjectRetain();
        RangeSet.init()();
        *(void *)&long long v320 = v170;
        uint64_t v178 = v171;
        *((void *)&v320 + 1) = v171;
        LOBYTE(v171) = v233;
        char v321 = v233;
        *(void *)&long long v322 = v173;
        *((void *)&v322 + 1) = v174;
        int v323 = v235;
        *(void *)&long long v324 = v175;
        *((void *)&v324 + 1) = v176;
        double v52 = v245;
        double v51 = v246;
        uint64_t v325 = v177;
        v315[0] = (uint64_t)v170;
        double v179 = v170;
        v315[1] = v178;
        char v316 = v233;
        uint64_t v317 = v173;
        double v47 = v97;
        uint64_t v318 = v174;
        double v50 = v251;
        double v49 = v247;
        a3 = v241;
        int v319 = v235;
        uint64_t v117 = v280;
        Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)v315, v280);
        outlined consume of Text.Layout.Line.Line(v179, v178, v171);
        swift_bridgeObjectRelease();
        outlined consume of Text.Layout.Line.Line(v179, v178, v171);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      long long v169 = *(_OWORD *)(v279 + 16);
      v328[0] = *(_OWORD *)v279;
      v328[1] = v169;
      v328[2] = *(_OWORD *)(v279 + 32);
      uint64_t v329 = *(void *)(v279 + 48);
      Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
      outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v328);
      double v50 = v251;
    }
    double v180 = v275;
    uint64_t v181 = v278;
    (*v262)(v275, v117, v278);
    *(double *)&long long v320 = v259;
    *((void *)&v320 + 1) = v244;
    char v182 = v276;
    uint64_t v183 = RangeSet.ranges.getter();
    double v241 = COERCE_DOUBLE(&v231);
    MEMORY[0x270FA5388](v183);
    *((void *)&v231 - 2) = &v320;
    uint64_t v184 = v266;
    char v185 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in RangeSet.contains(_:)specialized partial apply, (uint64_t)(&v231 - 4));
    uint64_t v266 = v184;
    (*v264)(v182, v277);
    (*v263)((uint64_t)v180, v181);
    if ((v185 & 1) == 0)
    {
      uint64_t v88 = v293;
      double v86 = v281;
      goto LABEL_25;
    }
    char v196 = 0;
    unint64_t v96 = v240;
LABEL_78:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CGFloat v197 = (double *)&v250[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement];
    swift_beginAccess();
    double v51 = v51 + v261 + 0.0;
    double v52 = v52 + v260 + *v197;
    if (v196)
    {
      uint64_t v198 = v293;
      goto LABEL_96;
    }
    uint64_t v199 = v270;
    Text.Effect.RenderSegmentation.Segment.characterRanges.getter(v270);
    *(double *)&long long v320 = v259;
    *((void *)&v320 + 1) = v244;
    uint64_t v200 = v276;
    uint64_t v201 = RangeSet.ranges.getter();
    double v291 = &v231;
    MEMORY[0x270FA5388](v201);
    *((void *)&v231 - 2) = &v320;
    uint64_t v202 = v266;
    char v203 = specialized Sequence.contains(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in RangeSet.contains(_:), (uint64_t)(&v231 - 4));
    uint64_t v266 = v202;
    (*v264)(v200, v277);
    (*v263)(v199, v278);
    uint64_t v198 = v293;
    uint64_t v204 = v269;
    if (v203)
    {
      double v205 = v47;
      uint64_t v206 = *(char **)&v250[v249];
      uint64_t v207 = *(void *)&v206[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time];
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v293, v269, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int v208 = swift_getEnumCaseMultiPayload();
      double v231 = a2;
      if (v208 == 2)
      {
        uint64_t v209 = *(void *)(v204 + 32);
        uint64_t v281 = *(void **)(v204 + 24);
        double v291 = (double *)v209;
        int v210 = *(unsigned __int8 *)(v204 + 40);
        int v211 = *(_DWORD *)(v204 + 64);
        uint64_t v212 = *(void *)(v204 + 88);
        *(void *)&long long v320 = v281;
        *((void *)&v320 + 1) = v209;
        char v321 = v210;
        long long v322 = *(_OWORD *)(v204 + 48);
        int v323 = v211;
        long long v324 = *(_OWORD *)(v204 + 72);
        uint64_t v213 = v212;
        uint64_t v325 = v212;
        v315[0] = v207;
        v214 = v206;
        outlined copy of Text.Layout.Line.Line(v281, (uint64_t)v291, v210);
        uint64_t v215 = v213;
        swift_bridgeObjectRetain();
        char v216 = v268;
        TextRenderLayer.interactionMetrics(for:at:context:segmentIndex:)((uint64_t)&v320, v315, v239, v232, v238, v237, v96, (void **)v268);
        LODWORD(v265) = v210;
        outlined consume of Text.Layout.Line.Line(v281, (uint64_t)v291, v210);
        uint64_t v271 = v215;
        swift_bridgeObjectRelease();
        uint64_t v217 = *v216;
        uint64_t v218 = *(void *)(*v216 + 16);
        if (v218)
        {
          uint64_t v219 = (double *)(v217 + 88);
          uint64_t v220 = *(void *)(*v216 + 16);
          while (1)
          {
            uint64_t v221 = *((void *)v219 - 6);
            if (*(uint64_t *)&v259 >= *((void *)v219 - 7) && *(void *)&v259 < v221) {
              break;
            }
            if (__OFSUB__(*(void *)&v259, v221)) {
              goto LABEL_122;
            }
            if (*(void *)&v259 == v221) {
              break;
            }
            v219 += 12;
            if (!--v220) {
              goto LABEL_91;
            }
          }
          double v227 = *(v219 - 5);
          double v224 = *(v219 - 4);
          double v228 = *v219;
          double v246 = v51;
          double v229 = v52;
          double v230 = v219[4];
          outlined consume of Text.Layout.Line.Line(v281, (uint64_t)v291, v265);
          swift_bridgeObjectRelease();
          double v225 = v227 - v228 + v230;
          double v52 = v229;
          double v51 = v246;
          uint64_t v55 = v292;
        }
        else
        {
LABEL_91:
          uint64_t v223 = (double *)((char *)v268 + *(int *)(v267 + 28));
          double v225 = *v223;
          double v224 = v223[1];
          uint64_t v55 = v292;
          if (*v223 == 0.0 && v224 == 0.0)
          {
            if (v218)
            {
              uint64_t v226 = v217 + 96 * v218;
              double v225 = *(double *)(v226 - 48);
              double v224 = *(double *)(v226 - 40);
            }
          }
          outlined consume of Text.Layout.Line.Line(v281, (uint64_t)v291, v265);
          swift_bridgeObjectRelease();
        }
        outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v268, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
      }
      else
      {
        v214 = v206;
        outlined destroy of Text.Effect.RenderSegmentation.Segment(v204, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        double v225 = 0.0;
        double v224 = 0.0;
        uint64_t v55 = v292;
      }

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      outlined release of TextRenderLayer.Layout?(v326, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
      outlined destroy of Text.Effect.RenderSegmentation.Segment(v293, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      double v51 = v51 + v225;
      double v52 = v52 + v224;
      a2 = v231;
      double v50 = v251;
      double v47 = v205;
      double v48 = v243;
      double v49 = v247;
    }
    else
    {
LABEL_96:
      uint64_t v55 = v292;
      outlined destroy of Text.Effect.RenderSegmentation.Segment(v198, type metadata accessor for Text.Effect.RenderSegmentation.Segment);

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of TextRenderLayer.Layout?(v326, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    }
LABEL_74:
    unint64_t v54 = v311;
    v195 = v301;
    unint64_t v44 = v236;
  }
  while (v255 != v57);
LABEL_104:
  v195(v56, 1, 1, v314);
LABEL_105:
  _sypSgWOhTm_1(v56, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_106:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

double @objc TextEffectsRenderer.convertToTextAnimationsCoordinateSpace(_:textRange:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  TextEffectsRenderer._convertToRenderSpace(_:textRange:)(a5, a2, a3);
  double v12 = v11;

  return v12;
}

void *TextEffectsAnimationController.animator(for:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 96);
  if (*(void *)(v3 + 16) && (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void **)(*(void *)(v3 + 56) + 8 * v4);
    id v7 = v6;
  }
  else
  {
    uint64_t v6 = 0;
  }
  swift_endAccess();
  return v6;
}

id TextEffectsAnimationController.animator(for:with:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 96);
  id v10 = &unk_268EF7000;
  if (*(void *)(v9 + 16) && (uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v12 & 1) != 0))
  {
    uint64_t v13 = *(char **)(*(void *)(v9 + 56) + 8 * v11);
    swift_endAccess();
    if (*(void *)&v13[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state])
    {
      *(void *)&v13[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 0;
      uint64_t v14 = *(void (**)(char *))&v13[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
      uint64_t v15 = v13;
      swift_retain();
      v14(v15);
      id v10 = (void *)&unk_268EF7000;

      swift_release();
    }
  }
  else
  {
    swift_endAccess();
  }
  uint64_t v16 = (objc_class *)type metadata accessor for TextAnimator();
  uint64_t v17 = objc_allocWithZone(v16);
  swift_weakInit();
  uint64_t v18 = &v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase];
  *uint64_t v18 = 0;
  v18[1] = 0;
  *(void *)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration] = 0;
  *(void *)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation] = a1;
  v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant] = 0;
  swift_weakAssign();
  uint64_t v19 = &v17[v10[336]];
  *uint64_t v19 = a2;
  v19[1] = a3;
  *(void *)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 1;
  v26.receiver = v17;
  v26.super_class = v16;
  uint64_t v20 = a1;
  swift_retain();
  id v21 = objc_msgSendSuper2(&v26, sel_init);
  swift_beginAccess();
  id v22 = v21;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *(void *)(v4 + 96);
  *(void *)(v4 + 96) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v22, v8, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 96) = v25;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v22;
}

id TextEffectsAnimationController.staticAnimator(for:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
  swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 96);
  if (*(void *)(v5 + 16) && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    uint64_t v8 = *(char **)(*(void *)(v5 + 56) + 8 * v6);
    swift_endAccess();
    if (*(void *)&v8[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state])
    {
      *(void *)&v8[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 0;
      uint64_t v9 = *(void (**)(char *))&v8[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
      id v10 = v8;
      swift_retain();
      v9(v10);

      swift_release();
    }
  }
  else
  {
    swift_endAccess();
  }
  uint64_t v11 = (objc_class *)type metadata accessor for TextAnimator();
  char v12 = objc_allocWithZone(v11);
  swift_weakInit();
  uint64_t v13 = &v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase];
  *uint64_t v13 = 0;
  v13[1] = 0;
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration] = 0;
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation] = a1;
  v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant] = 1;
  swift_weakAssign();
  uint64_t v14 = &v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
  *uint64_t v14 = _ViewInputs.base.modify;
  v14[1] = 0;
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 1;
  v21.receiver = v12;
  v21.super_class = v11;
  uint64_t v15 = a1;
  id v16 = objc_msgSendSuper2(&v21, sel_init);
  swift_beginAccess();
  id v17 = v16;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *(void *)(v2 + 96);
  *(void *)(v2 + 96) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, v4, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 96) = v20;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v17;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextEffectsAnimationController.Duration(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(double *)a1 == *(double *)a2;
  }
  return result;
}

void TextEffectsAnimationController.clearDisplayLink()()
{
  *(unsigned char *)(v0 + 40) = 0;
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1) {
    objc_msgSend(v1, sel_invalidate);
  }
  *(void *)(v0 + 32) = 0;
  swift_unknownObjectRelease();
  uint64_t v2 = *(void **)(v0 + 48);
  if (v2)
  {
    objc_msgSend(v2, sel_invalidate);
    uint64_t v2 = *(void **)(v0 + 48);
  }
  *(void *)(v0 + 48) = 0;
}

uint64_t TextEffectsAnimationController.init()()
{
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 0;
  *(CFTimeInterval *)(v0 + 56) = CACurrentMediaTime();
  uint64_t v1 = MEMORY[0x263F8EE80];
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(void *)(v0 + 64) = MEMORY[0x263F8EE80];
  *(void *)(v0 + 72) = v2;
  *(void *)(v0 + 80) = v1;
  *(void *)(v0 + 88) = v1;
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = v1;
  type metadata accessor for Text.Effect.Keyframes.Storage();
  int v3 = (void *)swift_allocObject();
  v3[5] = v2;
  v3[6] = v1;
  v3[2] = v1;
  v3[3] = v1;
  v3[4] = v1;
  swift_beginAccess();
  v3[5] = v2;
  swift_bridgeObjectRelease();
  v3[7] = 0;
  *(void *)(v0 + 112) = v3;
  *(void *)(v0 + 120) = v2;
  return v0;
}

uint64_t TextEffectsAnimationController.deinit()
{
  TextEffectsAnimationController.clearDisplayLink()();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TextEffectsAnimationController.__deallocating_deinit()
{
  TextEffectsAnimationController.deinit();

  return swift_deallocClassInstance();
}

BOOL TextEffectsAnimationController.startExternalDisplayLink()()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 32);
    swift_unknownObjectRetain();
    if (v2) {
      objc_msgSend(v2, sel_invalidate);
    }
    int v3 = *MEMORY[0x263F15738];
    int v4 = *(_DWORD *)(MEMORY[0x263F15738] + 4);
    int v5 = *(_DWORD *)(MEMORY[0x263F15738] + 8);
    uint64_t v6 = swift_allocObject();
    swift_weakInit();
    v13[4] = partial apply for closure #1 in TextEffectsAnimationController.startExternalDisplayLink();
    v13[5] = v6;
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ();
    v13[3] = &block_descriptor_5;
    char v7 = _Block_copy(v13);
    swift_release();
    LODWORD(v8) = v3;
    LODWORD(v9) = v4;
    LODWORD(v10) = v5;
    id v11 = objc_msgSend(v1, sel_frameRateRequest_block_, v7, v8, v9, v10);
    swift_unknownObjectRelease();
    _Block_release(v7);
    *(void *)(v0 + 32) = v11;
    swift_unknownObjectRelease();
  }
  return v1 != 0;
}

uint64_t closure #1 in TextEffectsAnimationController.startExternalDisplayLink()(void *a1)
{
  objc_msgSend(a1, sel_targetTimestamp);
  uint64_t v2 = v1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = v2;
    TextEffectsAnimationController.displayLinkUpdate(at:removeFinished:)(&v4, 1);
    return swift_release();
  }
  return result;
}

void TextEffectsAnimationController.displayLinkUpdate(at:removeFinished:)(uint64_t *a1, char a2)
{
  uint64_t v3 = v2;
  double v4 = *(double *)a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 72);
  uint64_t v6 = v5 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v5 + 56);
  uint64_t v10 = v2 + 80;
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (v9) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v15 < v11)
  {
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (v16) {
      goto LABEL_20;
    }
    int64_t v12 = v15 + 1;
    if (v15 + 1 < v11)
    {
      unint64_t v16 = *(void *)(v6 + 8 * v12);
      if (v16) {
        goto LABEL_20;
      }
      int64_t v12 = v15 + 2;
      if (v15 + 2 < v11)
      {
        unint64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 < v11)
          {
            unint64_t v16 = *(void *)(v6 + 8 * v17);
            if (v16)
            {
              int64_t v12 = v17;
              goto LABEL_20;
            }
            while (1)
            {
              int64_t v12 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                break;
              }
              if (v12 >= v11) {
                goto LABEL_25;
              }
              unint64_t v16 = *(void *)(v6 + 8 * v12);
              ++v17;
              if (v16) {
                goto LABEL_20;
              }
            }
            __break(1u);
            goto LABEL_50;
          }
          goto LABEL_25;
        }
LABEL_20:
        unint64_t v9 = (v16 - 1) & v16;
        for (unint64_t i = __clz(__rbit64(v16)) + (v12 << 6); ; unint64_t i = v13 | (v12 << 6))
        {
          uint64_t v18 = *(void *)(*(void *)(v5 + 48) + 8 * i);
          swift_beginAccess();
          uint64_t v19 = *(void *)v10;
          if (*(void *)(*(void *)v10 + 16)
            && (uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v21 & 1) != 0))
          {
            uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
            swift_endAccess();
            uint64_t v23 = *(void (**)(uint64_t))(*(void *)v22 + 88);
            uint64_t v24 = swift_retain();
            v23(v24);
            swift_release();
            if (!v9) {
              goto LABEL_7;
            }
          }
          else
          {
            swift_endAccess();
            if (!v9) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v13 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }
      }
    }
  }
LABEL_25:
  swift_release();
  *(double *)(v3 + 56) = v4;
  uint64_t v25 = MEMORY[0x24C527E00](v3 + 16);
  if (v25)
  {
    uint64_t v27 = (void *)v25;
    v48[0] = v4;
    TextEffectsRenderer.notifyDisplayLinkObservers(with:)(v26);
  }
  uint64_t v28 = *(void *)(v3 + 64);
  uint64_t v29 = *(void *)(*(void *)(v3 + 72) + 16);
  v48[0] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = specialized TextEffectsAnimationController.TimingMap.update(at:)(v48, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(*(void *)(v3 + 72) + 16);
  if (v29)
  {
    if (!v31) {
      TextEffectsAnimationController.clearDisplayLink()();
    }
  }
  else if (v31)
  {
    if ((*(unsigned char *)(v3 + 40) & 1) == 0)
    {
      *(unsigned char *)(v3 + 40) = 1;
      *(CFTimeInterval *)(v3 + 56) = CACurrentMediaTime();
      if ((TextEffectsAnimationController.startExternalDisplayLink()() & 1) == 0 && !*(void *)(v3 + 48))
      {
        id v32 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v3, sel_displayLink_);
        uint64_t v33 = *(void **)(v3 + 48);
        *(void *)(v3 + 48) = v32;

        uint64_t v34 = *(void **)(v3 + 48);
        if (!v34)
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        uint64_t v35 = self;
        id v36 = v34;
        id v37 = objc_msgSend(v35, sel_mainRunLoop);
        objc_msgSend(v36, sel_addToRunLoop_forMode_, v37, *MEMORY[0x263EFF588]);
      }
    }
  }
  swift_retain();
  uint64_t v38 = specialized _NativeSet.filter(_:)(v30, v3);
  swift_release();
  if ((a2 & 1) == 0 || !*(void *)(v38 + 16)) {
    goto LABEL_45;
  }
  uint64_t v39 = *(void *)(*(void *)(v3 + 72) + 16);
  closure #1 in TextEffectsAnimationController.removeAnimations(_:)(v38, (uint64_t *)v3);
  uint64_t v40 = *(void *)(*(void *)(v3 + 72) + 16);
  if (v39)
  {
    if (!v40) {
      TextEffectsAnimationController.clearDisplayLink()();
    }
    goto LABEL_45;
  }
  if (!v40
    || (*(unsigned char *)(v3 + 40) & 1) != 0
    || (*(unsigned char *)(v3 + 40) = 1,
        *(CFTimeInterval *)(v3 + 56) = CACurrentMediaTime(),
        (TextEffectsAnimationController.startExternalDisplayLink()() & 1) != 0)
    || *(void *)(v3 + 48))
  {
LABEL_45:
    swift_release();
    return;
  }
LABEL_47:
  id v41 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v3, sel_displayLink_);
  uint64_t v42 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = v41;

  uint64_t v43 = *(void **)(v3 + 48);
  if (v43)
  {
    unint64_t v44 = self;
    id v45 = v43;
    id v46 = objc_msgSend(v44, sel_mainRunLoop);
    objc_msgSend(v45, sel_addToRunLoop_forMode_, v46, *MEMORY[0x263EFF588]);
    swift_release();

    return;
  }
LABEL_51:
  __break(1u);
}

void thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t type metadata accessor for TextEffectsAnimationController()
{
  return self;
}

uint64_t TextEffectsAnimationController.validateInfosIfNeeded()()
{
  uint64_t v33 = v0 + 15;
  swift_beginAccess();
  uint64_t v1 = v0[15];
  uint64_t v2 = v1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 56);
  uint64_t v6 = v0 + 10;
  uint64_t v35 = v0;
  uint64_t v7 = v0 + 14;
  swift_bridgeObjectRetain();
  uint64_t result = swift_beginAccess();
  int64_t v9 = 0;
  int64_t v10 = (unint64_t)(v3 + 63) >> 6;
  int64_t v34 = v10;
  id v36 = v0 + 14;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_21;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v13 >= v10) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v2 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v2 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v2 + 8 * v9);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_21:
    Swift::UInt64 v16 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    swift_beginAccess();
    uint64_t v17 = *v6;
    if (*(void *)(*v6 + 16) && (uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) != 0))
    {
      uint64_t v20 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
      swift_endAccess();
      uint64_t v21 = *v7;
      swift_beginAccess();
      uint64_t result = specialized Set.contains(_:)(v16, *(void *)(v21 + 40));
      if ((result & 1) == 0)
      {
        swift_beginAccess();
        uint64_t v22 = *(void *)(v21 + 16);
        if (!*(void *)(v22 + 16)) {
          goto LABEL_4;
        }
        uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
        if ((v24 & 1) == 0) {
          goto LABEL_4;
        }
        uint64_t v25 = *(void **)(*(void *)(v22 + 56) + 8 * v23);
        swift_endAccess();
        uint64_t v26 = v35[14];
        id v37 = *(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t *))((*MEMORY[0x263F8EED0] & *v25)
                                                                                    + 0xB0);
        swift_retain();
        uint64_t v27 = v25;
        swift_retain();
        swift_retain();
        LOBYTE(v25) = v37(v20, MEMORY[0x263F8EE80], 0, v26, v35);
        swift_release();
        swift_release();
        if (v25)
        {

          uint64_t result = swift_release();
          int64_t v10 = v34;
          uint64_t v2 = v1 + 56;
          uint64_t v7 = v36;
        }
        else
        {
          uint64_t v38 = v27;
          swift_beginAccess();
          uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
          int64_t v10 = v34;
          uint64_t v2 = v1 + 56;
          uint64_t v7 = v36;
          if (v29)
          {
            uint64_t v30 = v28;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v32 = *v6;
            uint64_t v39 = *v6;
            uint64_t *v6 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v32 = v39;
            }
            specialized _NativeDictionary._delete(at:)(v30, v32);
            uint64_t *v6 = v32;
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v7 = v36;
          }
          swift_endAccess();

          uint64_t result = swift_release();
        }
      }
    }
    else
    {
LABEL_4:
      uint64_t result = swift_endAccess();
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10)
  {
LABEL_33:
    swift_release();
    *uint64_t v33 = MEMORY[0x263F8EE88];
    return swift_bridgeObjectRelease();
  }
  unint64_t v14 = *(void *)(v2 + 8 * v15);
  if (v14)
  {
    int64_t v9 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v10) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v2 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t closure #1 in TextEffectsAnimationController.invalidateAnimations(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  TextEffectsAnimationController.TimingMap.remove(_:)(a2);
  swift_endAccess();
  uint64_t v4 = a2 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  uint64_t v43 = a1;
  uint64_t v8 = (uint64_t *)(a1 + 80);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_22;
    }
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v14 >= v9) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_22:
    uint64_t v17 = *(void *)(*(void *)(a2 + 48) + 8 * v13);
    swift_beginAccess();
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
    if (v19)
    {
      uint64_t v20 = v18;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v22 = *v8;
      uint64_t v44 = *v8;
      *uint64_t v8 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v22 = v44;
      }
      specialized _NativeDictionary._delete(at:)(v20, v22);
      *uint64_t v8 = v22;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    uint64_t result = swift_release();
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v9)
  {
LABEL_25:
    swift_release();
    uint64_t v23 = MEMORY[0x24C527E00](v43 + 16);
    if (v23)
    {
      char v24 = (void *)v23;
      TextEffectsRenderer.notifyStateObservers(with:time:)(a2);
    }
    uint64_t v25 = 1 << *(unsigned char *)(a2 + 32);
    uint64_t v26 = -1;
    if (v25 < 64) {
      uint64_t v26 = ~(-1 << v25);
    }
    unint64_t v27 = v26 & *(void *)(a2 + 56);
    uint64_t v28 = (uint64_t *)(v43 + 96);
    int64_t v29 = (unint64_t)(v25 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v30 = 0;
    while (1)
    {
      if (v27)
      {
        unint64_t v31 = __clz(__rbit64(v27));
        v27 &= v27 - 1;
        unint64_t v32 = v31 | (v30 << 6);
      }
      else
      {
        int64_t v33 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_53;
        }
        if (v33 >= v29) {
          return swift_release();
        }
        unint64_t v34 = *(void *)(v4 + 8 * v33);
        ++v30;
        if (!v34)
        {
          int64_t v30 = v33 + 1;
          if (v33 + 1 >= v29) {
            return swift_release();
          }
          unint64_t v34 = *(void *)(v4 + 8 * v30);
          if (!v34)
          {
            int64_t v30 = v33 + 2;
            if (v33 + 2 >= v29) {
              return swift_release();
            }
            unint64_t v34 = *(void *)(v4 + 8 * v30);
            if (!v34)
            {
              int64_t v35 = v33 + 3;
              if (v35 >= v29) {
                return swift_release();
              }
              unint64_t v34 = *(void *)(v4 + 8 * v35);
              if (!v34)
              {
                while (1)
                {
                  int64_t v30 = v35 + 1;
                  if (__OFADD__(v35, 1)) {
                    goto LABEL_55;
                  }
                  if (v30 >= v29) {
                    return swift_release();
                  }
                  unint64_t v34 = *(void *)(v4 + 8 * v30);
                  ++v35;
                  if (v34) {
                    goto LABEL_46;
                  }
                }
              }
              int64_t v30 = v35;
            }
          }
        }
LABEL_46:
        unint64_t v27 = (v34 - 1) & v34;
        unint64_t v32 = __clz(__rbit64(v34)) + (v30 << 6);
      }
      uint64_t v36 = *(void *)(*(void *)(a2 + 48) + 8 * v32);
      swift_beginAccess();
      uint64_t v37 = *v28;
      if (*(void *)(*v28 + 16) && (uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v36), (v39 & 1) != 0))
      {
        uint64_t v40 = *(char **)(*(void *)(v37 + 56) + 8 * v38);
        uint64_t result = swift_endAccess();
        if (*(void *)&v40[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state])
        {
          *(void *)&v40[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 0;
          id v41 = *(void (**)(char *))&v40[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
          uint64_t v42 = v40;
          swift_retain();
          v41(v42);

          uint64_t result = swift_release();
        }
      }
      else
      {
        uint64_t result = swift_endAccess();
      }
    }
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t TextEffectsAnimationController.TimingMap.remove(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v58 = type metadata accessor for OSSignpostError();
  uint64_t v4 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  unint64_t v57 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for OSSignpostID();
  MEMORY[0x270FA5388](v60);
  uint64_t v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v61 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v62 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v59 = (void (**)(char *, uint64_t))(v8 + 8);
  unint64_t v54 = (uint64_t (**)(char *, uint64_t))(v4 + 88);
  int v53 = *MEMORY[0x263F90238];
  double v51 = (void (**)(char *, uint64_t))(v4 + 8);
  double v52 = (void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v67 = v2 + 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  v63 = v10;
  uint64_t v64 = a1;
  uint64_t v56 = v2;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_20;
    }
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v19 >= v62) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v61 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v62) {
        return swift_release();
      }
      unint64_t v20 = *(void *)(v61 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v62) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v61 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_20:
    Swift::UInt64 v22 = *(void *)(*(void *)(a1 + 48) + 8 * v18);
    char v24 = specialized Dictionary.subscript.modify(v70, v22);
    if (*(void *)(v23 + 48) >= 2uLL)
    {
      uint64_t v25 = v23;
      unint64_t v68 = v14;
      int64_t v69 = v16;
      uint64_t v26 = one-time initialization token for textEffects;
      swift_retain();
      if (v26 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v27, (uint64_t)static Signpost.textEffects);
      uint64_t v28 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v29 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        int64_t v30 = v57;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        int v31 = (*v54)(v30, v58);
        unint64_t v32 = "[Error] Interval already ended";
        if (v31 != v53)
        {
          (*v51)(v57, v58);
          unint64_t v32 = "";
        }
        int64_t v33 = v55;
        unint64_t v34 = v10;
        uint64_t v35 = v60;
        (*v52)(v55, v34, v60);
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        os_signpost_id_t v37 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v28, v29, v37, "Animation", v32, v36, 2u);
        MEMORY[0x24C527CC0](v36, -1, -1);

        uint64_t v38 = *v59;
        (*v59)(v63, v35);
        swift_release();
        uint64_t v39 = v35;
        int64_t v10 = v63;
        v38(v33, v39);
        uint64_t v2 = v56;
      }
      else
      {

        (*v59)(v10, v60);
        swift_release();
      }
      a1 = v64;
      unint64_t v14 = v68;
      int64_t v16 = v69;
      swift_release();
      *(void *)(v25 + 48) = 0;
    }
    ((void (*)(void *, void))v24)(v70, 0);
    specialized Set._Variant.remove(_:)(v22);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    if (v40)
    {
      unint64_t v41 = result;
      unint64_t v68 = v14;
      int64_t v69 = v16;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = *v2;
      v70[0] = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v43 = v70[0];
      }
      uint64_t v44 = *(void *)(v43 + 56) + 120 * v41;
      uint64_t v45 = *(void *)(v44 + 56);
      uint64_t v46 = *(void *)(v44 + 64);
      uint64_t v47 = *(void *)(v44 + 72);
      char v48 = *(unsigned char *)(v44 + 80);
      uint64_t v49 = *(void *)(v44 + 96);
      uint64_t v66 = *(void *)(v44 + 88);
      uint64_t v50 = *(void *)(v44 + 104);
      int v65 = *(unsigned __int8 *)(v44 + 112);
      specialized _NativeDictionary._delete(at:)(v41, v43);
      *uint64_t v2 = v43;
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v45, v46, v47, v48);
      uint64_t result = outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v66, v49, v50, v65);
      int64_t v10 = v63;
      a1 = v64;
      unint64_t v14 = v68;
      int64_t v16 = v69;
    }
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v62) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v61 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v62) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v61 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_19;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t closure #1 in TextEffectsAnimationController.removeAnimations(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v99 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  uint64_t v6 = a2 + 8;
  uint64_t v92 = a2 + 11;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v7 = 0;
  int64_t v96 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v94 = v2;
  uint64_t v91 = v6;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_22;
    }
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    if (v11 >= v96) {
      goto LABEL_51;
    }
    unint64_t v12 = *(void *)(v99 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v96) {
        goto LABEL_51;
      }
      unint64_t v12 = *(void *)(v99 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v96) {
          goto LABEL_51;
        }
        unint64_t v12 = *(void *)(v99 + 8 * v7);
        if (!v12) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_22:
    uint64_t v14 = *v6;
    if (*(void *)(*v6 + 16))
    {
      uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v10);
      uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if (v17)
      {
        uint64_t v18 = *(void *)(v14 + 56) + 120 * v16;
        uint64_t v19 = *(void *)(v18 + 56);
        uint64_t v102 = *(void *)(v18 + 72);
        uint64_t v103 = *(void *)(v18 + 64);
        uint64_t v20 = *(void *)(v18 + 88);
        uint64_t v21 = *(void *)(v18 + 104);
        char v22 = *(unsigned char *)(v18 + 112);
        uint64_t v101 = v21;
        char v95 = v22;
        char v100 = *(unsigned char *)(v18 + 80);
        if (*(unsigned char *)(v18 + 40) == 1)
        {
          uint64_t v23 = *(void *)(v18 + 56);
          uint64_t v24 = *(void *)(v18 + 64);
          if ((*(unsigned char *)(v18 + 80) & 1) == 0)
          {
            uint64_t v97 = *(void *)(v18 + 56);
            uint64_t v25 = *(void *)(v18 + 96);
            char v26 = 0;
LABEL_33:
            swift_retain();
            outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v97, v103, v102, v26);
            uint64_t v28 = v20;
            outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v25, v101, v22);
            goto LABEL_34;
          }
        }
        else
        {
          uint64_t v23 = *(void *)(v18 + 88);
          uint64_t v24 = *(void *)(v18 + 96);
          if (!*(unsigned char *)(v18 + 112))
          {
            uint64_t v97 = *(void *)(v18 + 56);
            uint64_t v25 = *(void *)(v18 + 96);
            char v26 = *(unsigned char *)(v18 + 80);
            goto LABEL_33;
          }
        }
        uint64_t v93 = *(void *)(v18 + 96);
        if (v23)
        {
          uint64_t v89 = *(uint64_t (**)(uint64_t))(*(void *)v23 + 104);
          swift_retain();
          uint64_t v97 = v19;
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v19, v103, v102, v100);
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v93, v21, v22);
          swift_retain();
          uint64_t v27 = swift_retain();
          if ((v89(v27) & 1) != 0 && !v24)
          {
            uint64_t v25 = v93;
            uint64_t v28 = v20;
            goto LABEL_34;
          }
LABEL_39:
          uint64_t v98 = v20;
          unint64_t v34 = v6;
          swift_beginAccess();
          uint64_t v90 = v24;
          swift_retain();
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v36 = (void *)*v92;
          *uint64_t v92 = 0x8000000000000000;
          unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
          uint64_t v39 = v36[2];
          BOOL v40 = (v37 & 1) == 0;
          uint64_t v41 = v39 + v40;
          if (__OFADD__(v39, v40)) {
            goto LABEL_108;
          }
          char v42 = v37;
          if (v36[3] >= v41)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, isUniquelyReferenced_nonNull_native);
            uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
            if ((v42 & 1) != (v44 & 1)) {
              goto LABEL_110;
            }
            unint64_t v38 = v43;
          }
          uint64_t v6 = v34;
          if (v42)
          {
            uint64_t v45 = (void *)(v36[7] + 16 * v38);
            swift_release();
            swift_release();
            *uint64_t v45 = v23;
            v45[1] = v90;
          }
          else
          {
            v36[(v38 >> 6) + 8] |= 1 << v38;
            *(void *)(v36[6] + 8 * v38) = v15;
            uint64_t v46 = (void *)(v36[7] + 16 * v38);
            *uint64_t v46 = v23;
            v46[1] = v90;
            uint64_t v47 = v36[2];
            BOOL v48 = __OFADD__(v47, 1);
            uint64_t v49 = v47 + 1;
            if (v48) {
              goto LABEL_109;
            }
            v36[2] = v49;
          }
          *uint64_t v92 = (uint64_t)v36;
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_release();
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v19, v103, v102, v100);
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v98, v93, v101, v95);
          swift_release();
          swift_release();
          uint64_t v2 = v94;
        }
        else
        {
          swift_retain();
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v19, v103, v102, v100);
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v93, v21, v22);
          swift_retain();
          if (v24) {
            goto LABEL_39;
          }
          uint64_t v97 = v19;
          uint64_t v25 = v93;
          uint64_t v28 = v20;
LABEL_34:
          swift_beginAccess();
          uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
          if (v30)
          {
            unint64_t v31 = v29;
            int v32 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v33 = *v92;
            uint64_t v104 = *v92;
            *uint64_t v92 = 0x8000000000000000;
            if (!v32)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v33 = v104;
            }
            uint64_t v8 = *(void *)(*(void *)(v33 + 56) + 16 * v31);
            specialized _NativeDictionary._delete(at:)(v31, v33);
            *uint64_t v92 = v33;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v8 = 1;
          }
          swift_endAccess();
          swift_release();
          swift_release();
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v97, v103, v102, v100);
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v28, v25, v101, v22);
          outlined consume of EnvironmentValues?(v8);
          uint64_t v2 = v94;
          uint64_t v6 = v91;
        }
      }
    }
  }
  int64_t v13 = v11 + 3;
  if (v13 < v96)
  {
    unint64_t v12 = *(void *)(v99 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v7 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v7 >= v96) {
          goto LABEL_51;
        }
        unint64_t v12 = *(void *)(v99 + 8 * v7);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    int64_t v7 = v13;
    goto LABEL_21;
  }
LABEL_51:
  swift_release();
  swift_beginAccess();
  TextEffectsAnimationController.TimingMap.remove(_:)(v2);
  swift_endAccess();
  uint64_t v50 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & *(void *)(v2 + 56);
  int v53 = a2 + 10;
  int64_t v54 = (unint64_t)(v50 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v55 = 0;
  while (2)
  {
    if (v52)
    {
      unint64_t v56 = __clz(__rbit64(v52));
      v52 &= v52 - 1;
      unint64_t v57 = v56 | (v55 << 6);
LABEL_72:
      uint64_t v61 = *(void *)(*(void *)(v2 + 48) + 8 * v57);
      swift_beginAccess();
      uint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61);
      if (v63)
      {
        uint64_t v64 = v62;
        int v65 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v66 = *v53;
        uint64_t v105 = *v53;
        *int v53 = 0x8000000000000000;
        if (!v65)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v66 = v105;
        }
        specialized _NativeDictionary._delete(at:)(v64, v66);
        *int v53 = v66;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_release();
      continue;
    }
    break;
  }
  int64_t v58 = v55 + 1;
  if (__OFADD__(v55, 1)) {
    goto LABEL_103;
  }
  if (v58 < v54)
  {
    unint64_t v59 = *(void *)(v99 + 8 * v58);
    ++v55;
    if (!v59)
    {
      int64_t v55 = v58 + 1;
      if (v58 + 1 >= v54) {
        goto LABEL_75;
      }
      unint64_t v59 = *(void *)(v99 + 8 * v55);
      if (!v59)
      {
        int64_t v55 = v58 + 2;
        if (v58 + 2 >= v54) {
          goto LABEL_75;
        }
        unint64_t v59 = *(void *)(v99 + 8 * v55);
        if (!v59)
        {
          int64_t v60 = v58 + 3;
          if (v60 >= v54) {
            goto LABEL_75;
          }
          unint64_t v59 = *(void *)(v99 + 8 * v60);
          if (!v59)
          {
            while (1)
            {
              int64_t v55 = v60 + 1;
              if (__OFADD__(v60, 1)) {
                break;
              }
              if (v55 >= v54) {
                goto LABEL_75;
              }
              unint64_t v59 = *(void *)(v99 + 8 * v55);
              ++v60;
              if (v59) {
                goto LABEL_71;
              }
            }
LABEL_106:
            __break(1u);
            goto LABEL_107;
          }
          int64_t v55 = v60;
        }
      }
    }
LABEL_71:
    unint64_t v52 = (v59 - 1) & v59;
    unint64_t v57 = __clz(__rbit64(v59)) + (v55 << 6);
    goto LABEL_72;
  }
LABEL_75:
  swift_release();
  uint64_t v67 = MEMORY[0x24C527E00](a2 + 2);
  if (v67)
  {
    unint64_t v68 = (void *)v67;
    TextEffectsRenderer.notifyStateObservers(with:time:)(v2);
  }
  uint64_t v69 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v70 = -1;
  if (v69 < 64) {
    uint64_t v70 = ~(-1 << v69);
  }
  unint64_t v71 = v70 & *(void *)(v2 + 56);
  char v72 = a2 + 12;
  int64_t v73 = (unint64_t)(v69 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v74 = 0;
  while (2)
  {
    if (v71)
    {
      unint64_t v75 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      unint64_t v76 = v75 | (v74 << 6);
LABEL_97:
      uint64_t v80 = *(void *)(*(void *)(v2 + 48) + 8 * v76);
      swift_beginAccess();
      uint64_t v81 = *v72;
      if (*(void *)(*v72 + 16) && (uint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v80), (v83 & 1) != 0))
      {
        uint64_t v84 = *(char **)(*(void *)(v81 + 56) + 8 * v82);
        swift_endAccess();
        if (*(void *)&v84[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] != 1)
        {
          *(void *)&v84[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state] = 1;
          uint64_t v85 = *(void (**)(char *))&v84[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify];
          double v86 = v84;
          swift_retain();
          v85(v86);
          uint64_t v2 = v94;

          swift_release();
        }
      }
      else
      {
        swift_endAccess();
      }
      continue;
    }
    break;
  }
  int64_t v77 = v74 + 1;
  if (__OFADD__(v74, 1)) {
    goto LABEL_104;
  }
  if (v77 >= v73) {
    return swift_release();
  }
  unint64_t v78 = *(void *)(v99 + 8 * v77);
  ++v74;
  if (v78) {
    goto LABEL_96;
  }
  int64_t v74 = v77 + 1;
  if (v77 + 1 >= v73) {
    return swift_release();
  }
  unint64_t v78 = *(void *)(v99 + 8 * v74);
  if (v78) {
    goto LABEL_96;
  }
  int64_t v74 = v77 + 2;
  if (v77 + 2 >= v73) {
    return swift_release();
  }
  unint64_t v78 = *(void *)(v99 + 8 * v74);
  if (v78)
  {
LABEL_96:
    unint64_t v71 = (v78 - 1) & v78;
    unint64_t v76 = __clz(__rbit64(v78)) + (v74 << 6);
    goto LABEL_97;
  }
  int64_t v79 = v77 + 3;
  if (v79 >= v73) {
    return swift_release();
  }
  unint64_t v78 = *(void *)(v99 + 8 * v79);
  if (v78)
  {
    int64_t v74 = v79;
    goto LABEL_96;
  }
  while (1)
  {
    int64_t v74 = v79 + 1;
    if (__OFADD__(v79, 1)) {
      break;
    }
    if (v74 >= v73) {
      return swift_release();
    }
    unint64_t v78 = *(void *)(v99 + 8 * v74);
    ++v79;
    if (v78) {
      goto LABEL_96;
    }
  }
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(Swift::UInt64 a1, char a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v14 = *(void *)v8;
  char v15 = a2 & 1;
  char v16 = a8 & 1;
  double v17 = *a3;
  swift_beginAccess();
  uint64_t v18 = *(void *)(*(void *)(v8 + 72) + 16);
  closure #1 in TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(v8, a1, a4, a5, a6, a7, v16, v15, v17);
  uint64_t v19 = *(void *)(*(void *)(v8 + 72) + 16);
  if (v18)
  {
    if (!v19) {
      TextEffectsAnimationController.clearDisplayLink()();
    }
  }
  else if (v19)
  {
    if ((*(unsigned char *)(v8 + 40) & 1) == 0)
    {
      *(unsigned char *)(v8 + 40) = 1;
      *(CFTimeInterval *)(v8 + 56) = CACurrentMediaTime();
      if (!TextEffectsAnimationController.startExternalDisplayLink()() && !*(void *)(v8 + 48))
      {
        id v20 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v8, sel_displayLink_, v14);
        uint64_t v21 = *(void **)(v8 + 48);
        *(void *)(v8 + 48) = v20;

        char v22 = *(void **)(v8 + 48);
        if (v22)
        {
          uint64_t v23 = self;
          id v24 = v22;
          id v25 = objc_msgSend(v23, sel_mainRunLoop);
          objc_msgSend(v24, sel_addToRunLoop_forMode_, v25, *MEMORY[0x263EFF588]);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t closure #1 in TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, double a9)
{
  unsigned int v58 = a8 & 1;
  uint64_t v57 = TextEffectsAnimationController.currentPhaseConfiguration(with:)(a2);
  uint64_t v60 = v18;
  uint64_t v61 = v17;
  int v59 = v19 & 1;
  uint64_t v20 = TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(a2, a3, a4, a5);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  int v26 = v25 & 1;
  if (a7)
  {
    swift_beginAccess();
    uint64_t v29 = Text.Effect.Keyframes.validAnimation(_:)(a2, *(void *)(a1 + 112));
    if (v29)
    {
      char v30 = v29;
      if (v59)
      {
        swift_retain();
        uint64_t v31 = swift_retain();
        uint64_t v56 = v61;
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v56 = 0;
      }
      char v52 = v26;
      uint64_t v54 = v20;
      uint64_t v53 = v24;
      if (v26)
      {
        swift_retain();
        swift_retain();
        uint64_t v32 = v20;
        uint64_t v33 = v22;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
      }
      unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v35 = *(void *)(a1 + 112);
      uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, unint64_t, void, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v30) + 0x78);
      swift_retain();
      swift_retain();
      uint64_t v51 = v50(v31, v56, v32, v33, v58, v34, 0, v35, a1);
      char v37 = v36;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      char v27 = 0;
      uint64_t v38 = 0x3FF0000000000000;
      if ((v37 & 1) == 0) {
        uint64_t v38 = v51;
      }
      uint64_t v55 = v38;
      char v28 = v59;
      uint64_t v20 = v54;
      uint64_t v24 = v53;
      LOBYTE(v26) = v52;
    }
    else
    {
      uint64_t v55 = 0;
      char v27 = 1;
      char v28 = v59;
    }
  }
  else
  {
    uint64_t v55 = a6;
    char v27 = 0;
    char v28 = v59;
  }
  swift_beginAccess();
  uint64_t v39 = *(void *)(a1 + 80);
  if (*(void *)(v39 + 16) && (uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v41 & 1) != 0))
  {
    uint64_t v42 = *(void *)(*(void *)(v39 + 56) + 8 * v40);
    swift_endAccess();
    uint64_t v43 = *(void (**)(uint64_t))(*(void *)v42 + 104);
    uint64_t v44 = swift_retain();
    v43(v44);
    char v28 = v59;
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
  double v62 = a9;
  swift_beginAccess();
  TextEffectsAnimationController.TimingMap.start(_:time:duration:variant:from:to:)(a2, (uint64_t *)&v62, v55, v27, v58, v57, v61, v60, v28, v20, v22, v24, v26);
  swift_endAccess();
  type metadata accessor for TextRenderLayer.Layout?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Identifier>, (uint64_t)&type metadata for Text.Effect.Identifier, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = a2;
  uint64_t v46 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  uint64_t v47 = MEMORY[0x24C527E00](a1 + 16);
  if (v47)
  {
    BOOL v48 = (void *)v47;
    TextEffectsRenderer.notifyStateObservers(with:time:)(v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v22, v24, v26);
  return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v57, v61, v60, v28);
}

uint64_t TextEffectsAnimationController.currentPhaseConfiguration(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 64);
  if (*(void *)(v4 + 16) && (uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(v4 + 56) + 120 * v5;
    uint64_t v8 = *(void *)(v7 + 56);
    outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, *(void *)(v7 + 64), *(void *)(v7 + 72), *(unsigned char *)(v7 + 80));
  }
  else
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(v2 + 88);
    if (*(void *)(v9 + 16) && (uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v11 & 1) != 0))
    {
      uint64_t v8 = *(void *)(*(void *)(v9 + 56) + 16 * v10);
      swift_endAccess();
      swift_retain();
      swift_retain();
    }
    else
    {
      swift_endAccess();
      return 0;
    }
  }
  return v8;
}

uint64_t TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v9 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(void *)(v4 + 112));
  if (!v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a2;
  }
  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 88);
  if (*(void *)(v10 + 16) && (uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 16 * v11);
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v13 = 1;
  }
  uint64_t v14 = swift_endAccess();
  char v15 = (void *)MEMORY[0x263F8EED0];
  if (a3)
  {
    a2 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v9) + 0x80))(a2, a3);
    if (a4)
    {
LABEL_8:
      (*(void (**)(uint64_t))((*v15 & *v9) + 0x90))(a4);
      outlined consume of EnvironmentValues?(v13);

      return a2;
    }
  }
  else
  {
    if (v13 == 1 || (uint64_t v14 = swift_retain(), (v16 = v13) == 0))
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t))((*v15 & *v9) + 0x88))(v14);
      uint64_t v16 = v14;
    }
    a2 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 112))(v14);
    swift_release();
    if (a4) {
      goto LABEL_8;
    }
  }

  if (v13 != 1) {
    swift_release();
  }
  return a2;
}

uint64_t TextEffectsAnimationController.TimingMap.start(_:time:duration:variant:from:to:)(Swift::UInt64 a1, uint64_t *a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v14 = v13;
  uint64_t v17 = *a2;
  uint64_t v18 = *v13;
  uint64_t v19 = *a2;
  if (*(void *)(v18 + 16))
  {
    uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    uint64_t v19 = v17;
    if (v21)
    {
      uint64_t v22 = *(void *)(v18 + 56) + 120 * v20;
      uint64_t v60 = *(void *)(v22 + 16);
      uint64_t v61 = *(void *)(v22 + 8);
      int v52 = *(unsigned __int8 *)(v22 + 25);
      uint64_t v59 = *(void *)(v22 + 32);
      uint64_t v55 = *(void *)v22;
      uint64_t v57 = *(unsigned __int8 *)(v22 + 40);
      char v63 = a5;
      uint64_t v24 = *(void *)(v22 + 48);
      uint64_t v23 = *(void *)(v22 + 56);
      uint64_t v26 = *(void *)(v22 + 64);
      uint64_t v25 = *(void *)(v22 + 72);
      char v27 = *(unsigned char *)(v22 + 80);
      uint64_t v28 = *(void *)(v22 + 96);
      uint64_t v62 = *(void *)(v22 + 88);
      uint64_t v29 = *(void *)(v22 + 104);
      char v30 = *(unsigned char *)(v22 + 112);
      LOBYTE(v71[0]) = *(unsigned char *)(v22 + 24);
      LOBYTE(v69[0]) = v27;
      char v70 = v30;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v23, v26, v25, v27);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v62, v28, v29, v30);
      uint64_t v31 = v24;
      a5 = v63;
      uint64_t v19 = v17;
      if (v31 != 1)
      {
        uint64_t v32 = 256;
        if (!v52) {
          uint64_t v32 = 0;
        }
        uint64_t v19 = v55;
        outlined consume of TextEffectsAnimationController.Timing?(v55, v61, v60, v32 | LOBYTE(v71[0]), v59, v57, v31, v23, v26, v25, v69[0], v62, v28, v29, v70);
      }
    }
  }
  char v33 = a5 & 1;
  unint64_t v34 = specialized Dictionary.subscript.modify(v71, a1);
  if (*(void *)(v35 + 48) != 1) {
    TextEffectsAnimationController.Timing.endAnimationInterval()();
  }
  ((void (*)(void *, void))v34)(v71, 0);
  char v36 = a13;
  uint64_t v37 = a12;
  specialized Set._Variant.remove(_:)(a1);
  uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v39)
  {
    unint64_t v40 = v38;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v42 = *v14;
    v71[0] = *v14;
    *uint64_t v14 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v42 = v71[0];
    }
    uint64_t v43 = *(void *)(v42 + 56) + 120 * v40;
    uint64_t v44 = *(void *)(v43 + 56);
    uint64_t v45 = *(void *)(v43 + 64);
    uint64_t v46 = *(void *)(v43 + 72);
    uint64_t v56 = *(void *)(v43 + 96);
    uint64_t v58 = *(void *)(v43 + 88);
    uint64_t v54 = *(void *)(v43 + 104);
    char v51 = *(unsigned char *)(v43 + 80);
    char v53 = *(unsigned char *)(v43 + 112);
    specialized _NativeDictionary._delete(at:)(v40, v42);
    *uint64_t v14 = v42;
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v44, v45, v46, v51);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v58, v56, v54, v53);
    char v33 = a5 & 1;
    uint64_t v37 = a12;
    char v36 = a13;
  }
  v71[0] = v19;
  v71[1] = v17;
  v71[2] = a3;
  char v72 = a4 & 1;
  char v73 = v33;
  uint64_t v74 = 0;
  char v75 = 2;
  uint64_t v76 = 0;
  uint64_t v77 = a6;
  uint64_t v78 = a7;
  uint64_t v79 = a8;
  char v80 = a9 & 1;
  uint64_t v81 = a10;
  uint64_t v82 = a11;
  uint64_t v83 = v37;
  char v84 = v36 & 1;
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(a6, a7, a8, a9 & 1);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(a10, a11, v37, v36 & 1);
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  v69[0] = *v14;
  *uint64_t v14 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v71, a1, v47);
  *uint64_t v14 = v69[0];
  swift_bridgeObjectRelease();
  BOOL v48 = specialized Dictionary.subscript.modify(v69, a1);
  if (*(void *)(v49 + 48) != 1) {
    TextEffectsAnimationController.Timing.beginAnimationInterval()();
  }
  ((void (*)(Swift::UInt64 *, void))v48)(v69, 0);
  return specialized Set._Variant.insert(_:)(v69, a1);
}

void TextEffectsAnimationController.pauseAnimation(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t *)(v1 + 64);
  swift_beginAccess();
  uint64_t v5 = v1 + 72;
  uint64_t v6 = *(void *)(*(void *)(v1 + 72) + 16);
  double v7 = CACurrentMediaTime();
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 64);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v10)
    {
      uint64_t v34 = v2;
      Swift::UInt64 v40 = a1;
      uint64_t v41 = v6;
      uint64_t v11 = *(void *)(v8 + 56) + 120 * v9;
      uint64_t v12 = *(void *)v11;
      double v13 = *(double *)(v11 + 8);
      uint64_t v39 = *(void *)(v11 + 16);
      char v35 = *(unsigned char *)(v11 + 25);
      char v36 = *(unsigned char *)(v11 + 24);
      double v37 = *(double *)(v11 + 32);
      int v42 = *(unsigned __int8 *)(v11 + 40);
      uint64_t v14 = *(void *)(v11 + 56);
      uint64_t v15 = *(void *)(v11 + 64);
      uint64_t v16 = *(void *)(v11 + 72);
      char v17 = *(unsigned char *)(v11 + 80);
      uint64_t v18 = *(void *)(v11 + 88);
      uint64_t v19 = *(void *)(v11 + 96);
      uint64_t v20 = *(void *)(v11 + 104);
      char v21 = *(unsigned char *)(v11 + 112);
      char v44 = *(unsigned char *)(v11 + 40);
      uint64_t v45 = *(void *)(v11 + 48);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v20, v21);
      TextEffectsAnimationController.Timing.endAnimationInterval()();
      if (v13 >= v7) {
        double v22 = v13;
      }
      else {
        double v22 = v7;
      }
      double v23 = v22;
      if (v42 == 1)
      {
        double v23 = v37;
        char v24 = 1;
      }
      else
      {
        char v24 = 0;
      }
      char v38 = v24;
      v46[0] = v12;
      *(double *)&v46[1] = v13;
      v46[2] = v39;
      char v47 = v36;
      char v48 = v35;
      double v49 = v23;
      char v50 = v24;
      uint64_t v51 = v45;
      uint64_t v52 = v14;
      uint64_t v53 = v15;
      uint64_t v54 = v16;
      char v55 = v17;
      uint64_t v56 = v18;
      uint64_t v57 = v19;
      uint64_t v58 = v20;
      char v59 = v21;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v20, v21);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = *v4;
      uint64_t *v4 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v46, v40, isUniquelyReferenced_nonNull_native);
      uint64_t *v4 = v43;
      swift_bridgeObjectRelease();
      char v26 = v38;
      if (!v44) {
        char v26 = 0;
      }
      if (v42 && (v26 & 1) == 0) {
        specialized Set._Variant.remove(_:)(v40);
      }
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v19, v20, v21);
      uint64_t v6 = v41;
      uint64_t v2 = v34;
    }
  }
  swift_endAccess();
  uint64_t v27 = *(void *)(*(void *)v5 + 16);
  if (v6)
  {
    if (!v27) {
      TextEffectsAnimationController.clearDisplayLink()();
    }
  }
  else if (v27)
  {
    if ((*(unsigned char *)(v2 + 40) & 1) == 0)
    {
      *(unsigned char *)(v2 + 40) = 1;
      *(CFTimeInterval *)(v2 + 56) = CACurrentMediaTime();
      if (!TextEffectsAnimationController.startExternalDisplayLink()() && !*(void *)(v2 + 48))
      {
        id v28 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v2, sel_displayLink_);
        uint64_t v29 = *(void **)(v2 + 48);
        *(void *)(v2 + 48) = v28;

        char v30 = *(void **)(v2 + 48);
        if (v30)
        {
          uint64_t v31 = self;
          id v32 = v30;
          id v33 = objc_msgSend(v31, sel_mainRunLoop);
          objc_msgSend(v32, sel_addToRunLoop_forMode_, v33, *MEMORY[0x263EFF588]);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t TextEffectsAnimationController.TimingMap.pause(_:at:)(uint64_t result, double *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    Swift::UInt64 v5 = result;
    double v6 = *a2;
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if (v7)
    {
      uint64_t v8 = *(void *)(v4 + 56) + 120 * result;
      uint64_t v9 = *(void *)v8;
      double v10 = *(double *)(v8 + 8);
      uint64_t v28 = *(void *)(v8 + 16);
      Swift::UInt64 v29 = v5;
      char v24 = *(unsigned char *)(v8 + 25);
      char v25 = *(unsigned char *)(v8 + 24);
      double v26 = *(double *)(v8 + 32);
      int v30 = *(unsigned __int8 *)(v8 + 40);
      uint64_t v11 = *(void *)(v8 + 56);
      uint64_t v13 = *(void *)(v8 + 64);
      uint64_t v12 = *(void *)(v8 + 72);
      char v14 = *(unsigned char *)(v8 + 80);
      uint64_t v15 = *(void *)(v8 + 88);
      uint64_t v16 = *(void *)(v8 + 96);
      uint64_t v17 = *(void *)(v8 + 104);
      char v18 = *(unsigned char *)(v8 + 112);
      char v32 = *(unsigned char *)(v8 + 40);
      uint64_t v33 = *(void *)(v8 + 48);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v13, v12, v14);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v16, v17, v18);
      TextEffectsAnimationController.Timing.endAnimationInterval()();
      if (v10 >= v6) {
        double v19 = v10;
      }
      else {
        double v19 = v6;
      }
      double v20 = v19;
      if (v30 == 1)
      {
        double v20 = v26;
        char v21 = 1;
      }
      else
      {
        char v21 = 0;
      }
      char v27 = v21;
      v34[0] = v9;
      *(double *)&v34[1] = v10;
      v34[2] = v28;
      char v35 = v25;
      char v36 = v24;
      double v37 = v20;
      char v38 = v21;
      uint64_t v39 = v33;
      uint64_t v40 = v11;
      uint64_t v41 = v13;
      uint64_t v42 = v12;
      char v43 = v14;
      uint64_t v44 = v15;
      uint64_t v45 = v16;
      uint64_t v46 = v17;
      char v47 = v18;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v13, v12, v14);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v16, v17, v18);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v31 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v34, v29, isUniquelyReferenced_nonNull_native);
      *uint64_t v3 = v31;
      swift_bridgeObjectRelease();
      char v23 = v27;
      if (!v32) {
        char v23 = 0;
      }
      if (v30 && (v23 & 1) == 0) {
        specialized Set._Variant.remove(_:)(v29);
      }
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v13, v12, v14);
      return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v16, v17, v18);
    }
  }
  return result;
}

void TextEffectsAnimationController.resumeAnimation(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (Swift::UInt64 *)(v1 + 64);
  swift_beginAccess();
  uint64_t v5 = v1 + 72;
  uint64_t v6 = *(void *)(*(void *)(v1 + 72) + 16);
  double v7 = CACurrentMediaTime();
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 64);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v10)
    {
      Swift::UInt64 v51 = a1;
      uint64_t v52 = v6;
      uint64_t v53 = v5;
      uint64_t v54 = v2;
      uint64_t v11 = *(void *)(v8 + 56) + 120 * v9;
      double v13 = *(double *)v11;
      double v12 = *(double *)(v11 + 8);
      Swift::UInt64 v14 = *(void *)(v11 + 16);
      char v15 = *(unsigned char *)(v11 + 24);
      char v16 = *(unsigned char *)(v11 + 25);
      double v58 = *(double *)(v11 + 32);
      double v17 = v58;
      int v18 = *(unsigned __int8 *)(v11 + 40);
      uint64_t v19 = *(void *)(v11 + 48);
      uint64_t v20 = *(void *)(v11 + 56);
      uint64_t v21 = *(void *)(v11 + 64);
      uint64_t v22 = *(void *)(v11 + 72);
      char v23 = *(unsigned char *)(v11 + 80);
      uint64_t v25 = *(void *)(v11 + 88);
      uint64_t v24 = *(void *)(v11 + 96);
      uint64_t v26 = *(void *)(v11 + 104);
      char v27 = *(unsigned char *)(v11 + 112);
      *(double *)&v55[1] = v13;
      *(double *)&v55[2] = v12;
      Swift::UInt64 v50 = v14;
      v55[3] = v14;
      char v48 = v16;
      char v49 = v15;
      char v56 = v15;
      char v57 = v16;
      char v59 = v18;
      uint64_t v60 = v19;
      uint64_t v61 = v20;
      uint64_t v62 = v21;
      uint64_t v63 = v22;
      char v64 = v23;
      uint64_t v65 = v25;
      uint64_t v66 = v24;
      uint64_t v67 = v26;
      char v68 = v27;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v21, v22, v23);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v25, v24, v26, v27);
      TextEffectsAnimationController.Timing.beginAnimationInterval()();
      if (v18)
      {
        BOOL v47 = v59 == 0;
        char v28 = v18;
      }
      else
      {
        BOOL v47 = 0;
        if (v7 >= v58) {
          double v29 = v7;
        }
        else {
          double v29 = v58;
        }
        double v30 = v29 - v58;
        double v13 = v13 + v30;
        double v12 = v12 + v30;
        char v28 = 2;
        double v17 = 0.0;
      }
      *(double *)uint64_t v69 = v13;
      *(double *)&v69[1] = v12;
      v69[2] = v50;
      char v70 = v49;
      char v71 = v48;
      double v72 = v17;
      char v73 = v28;
      uint64_t v74 = v60;
      uint64_t v75 = v20;
      uint64_t v76 = v21;
      uint64_t v77 = v22;
      char v78 = v23;
      uint64_t v79 = v25;
      uint64_t v80 = v24;
      uint64_t v81 = v26;
      char v82 = v27;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v20, v21, v22, v23);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v25, v24, v26, v27);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v55[0] = *v4;
      Swift::UInt64 *v4 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v69, v51, isUniquelyReferenced_nonNull_native);
      Swift::UInt64 *v4 = v55[0];
      swift_bridgeObjectRelease();
      if (v18)
      {
        uint64_t v5 = v53;
        if (v47) {
          specialized Set._Variant.remove(_:)(v51);
        }
      }
      else
      {
        uint64_t v5 = v53;
        if (!v47) {
          specialized Set._Variant.insert(_:)(v55, v51);
        }
      }
      uint64_t v32 = v61;
      uint64_t v33 = v62;
      uint64_t v34 = v63;
      char v35 = v64;
      uint64_t v36 = v65;
      uint64_t v37 = v66;
      uint64_t v38 = v67;
      char v39 = v68;
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v32, v33, v34, v35);
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v36, v37, v38, v39);
      uint64_t v2 = v54;
      uint64_t v6 = v52;
    }
  }
  swift_endAccess();
  uint64_t v40 = *(void *)(*(void *)v5 + 16);
  if (v6)
  {
    if (!v40) {
      TextEffectsAnimationController.clearDisplayLink()();
    }
  }
  else if (v40)
  {
    if ((*(unsigned char *)(v2 + 40) & 1) == 0)
    {
      *(unsigned char *)(v2 + 40) = 1;
      *(CFTimeInterval *)(v2 + 56) = CACurrentMediaTime();
      if (!TextEffectsAnimationController.startExternalDisplayLink()() && !*(void *)(v2 + 48))
      {
        id v41 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v2, sel_displayLink_);
        uint64_t v42 = *(void **)(v2 + 48);
        *(void *)(v2 + 48) = v41;

        char v43 = *(void **)(v2 + 48);
        if (v43)
        {
          uint64_t v44 = self;
          id v45 = v43;
          id v46 = objc_msgSend(v44, sel_mainRunLoop);
          objc_msgSend(v45, sel_addToRunLoop_forMode_, v46, *MEMORY[0x263EFF588]);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t TextEffectsAnimationController.duration(with:phase:configuration:variant:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  swift_beginAccess();
  uint64_t v12 = *(void *)(v5 + 64);
  if (*(void *)(v12 + 16))
  {
    uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v14)
    {
      uint64_t v15 = *(void *)(v12 + 56) + 120 * v13;
      if (*(unsigned char *)(v15 + 24) != 1) {
        return *(void *)(v15 + 16);
      }
    }
  }
  swift_beginAccess();
  uint64_t result = (uint64_t)Text.Effect.Keyframes.validAnimation(_:)(a1, *(void *)(v6 + 112));
  if (result)
  {
    double v17 = (void *)result;
    unsigned int v40 = a5 & 1;
    uint64_t v18 = TextEffectsAnimationController.currentPhaseConfiguration(with:)(a1);
    uint64_t v20 = v19;
    uint64_t v42 = v21;
    char v23 = v22;
    uint64_t v24 = TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(a1, a2, a3, a4);
    uint64_t v26 = v25;
    char v28 = v27;
    char v41 = v23;
    uint64_t v39 = v29;
    if (v23)
    {
      swift_retain();
      swift_retain();
      uint64_t v45 = v18;
      uint64_t v30 = v20;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v30 = 0;
    }
    uint64_t v43 = v20;
    uint64_t v44 = v18;
    uint64_t v38 = v26;
    if (v28)
    {
      swift_retain();
      swift_retain();
      uint64_t v31 = v24;
      uint64_t v32 = v26;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
    }
    unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v34 = *(void *)(v6 + 112);
    char v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, unint64_t, void, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v17) + 0x78);
    swift_retain();
    swift_retain();
    uint64_t v36 = v35(v45, v30, v31, v32, v40, v33, 0, v34, v6);
    LOBYTE(v35) = v37;
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v24, v38, v39, v28 & 1);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v44, v43, v42, v41 & 1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (v35) {
      return 0x3FF0000000000000;
    }
    else {
      return v36;
    }
  }
  return result;
}

uint64_t TextEffectsAnimationController.duration(with:from:to:variant:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  swift_beginAccess();
  uint64_t v14 = *(void *)(v6 + 64);
  if (*(void *)(v14 + 16))
  {
    uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v16)
    {
      uint64_t v17 = *(void *)(v14 + 56) + 120 * v15;
      if (*(unsigned char *)(v17 + 24) != 1) {
        return *(void *)(v17 + 16);
      }
    }
  }
  swift_beginAccess();
  uint64_t result = (uint64_t)Text.Effect.Keyframes.validAnimation(_:)(a1, *(void *)(v7 + 112));
  if (result)
  {
    uint64_t v19 = (void *)result;
    unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v21 = *(void *)(v7 + 112);
    char v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, unint64_t, void, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v19) + 0x78);
    swift_retain();
    swift_retain();
    uint64_t v23 = v22(a2, a3, a4, a5, a6 & 1, v20, 0, v21, v7);
    char v25 = v24;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    if (v25) {
      return 0x3FF0000000000000;
    }
    else {
      return v23;
    }
  }
  return result;
}

uint64_t TextEffectsAnimationController.TimingMap.cancel(_:at:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = v2;
  Swift::UInt64 v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    Swift::UInt64 v5 = result;
    uint64_t v6 = *a2;
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if (v7)
    {
      uint64_t v8 = *(void *)(v4 + 56) + 120 * result;
      uint64_t v9 = *(void *)(v8 + 16);
      char v10 = *(unsigned char *)(v8 + 24);
      char v11 = *(unsigned char *)(v8 + 25);
      uint64_t v12 = *(void *)(v8 + 32);
      int v24 = *(unsigned __int8 *)(v8 + 40);
      Swift::UInt64 v25 = v5;
      uint64_t v13 = *(void *)(v8 + 48);
      uint64_t v14 = *(void *)(v8 + 56);
      uint64_t v15 = *(void *)(v8 + 64);
      uint64_t v16 = *(void *)(v8 + 72);
      char v17 = *(unsigned char *)(v8 + 80);
      uint64_t v18 = *(void *)(v8 + 88);
      uint64_t v19 = *(void *)(v8 + 96);
      uint64_t v20 = *(void *)(v8 + 104);
      char v21 = *(unsigned char *)(v8 + 112);
      if (v24 != 1) {
        uint64_t v12 = v6;
      }
      uint64_t v22 = *(void *)(v8 + 88);
      long long v27 = *(_OWORD *)v8;
      uint64_t v28 = v9;
      char v29 = v10;
      char v30 = v11;
      uint64_t v31 = v12;
      char v32 = 1;
      uint64_t v33 = v13;
      uint64_t v34 = v14;
      uint64_t v35 = v15;
      uint64_t v36 = v16;
      char v37 = v17;
      uint64_t v38 = v18;
      uint64_t v39 = v19;
      uint64_t v40 = v20;
      char v41 = v21;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v19, v20, v21);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v19, v20, v21);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::UInt64 v26 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v27, v25, isUniquelyReferenced_nonNull_native);
      *uint64_t v3 = v26;
      swift_bridgeObjectRelease();
      if (v24)
      {
        swift_release();
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
        return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v19, v20, v21);
      }
      else
      {
        specialized Set._Variant.insert(_:)(&v26, v25);
        swift_release();
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v17);
        return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v19, v20, v21);
      }
    }
  }
  return result;
}

uint64_t TextEffectsAnimationController.TimingMap.resolve(_:duration:)(uint64_t result, uint64_t a2, char a3)
{
  Swift::UInt64 v4 = v3;
  uint64_t v5 = *v3;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = result;
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if (v9)
    {
      uint64_t v10 = *(void *)(v5 + 56) + 120 * result;
      char v11 = *(unsigned char *)(v10 + 25);
      uint64_t v12 = *(void *)(v10 + 32);
      char v13 = *(unsigned char *)(v10 + 40);
      uint64_t v14 = *(void *)(v10 + 48);
      uint64_t v15 = *(void *)(v10 + 56);
      uint64_t v17 = *(void *)(v10 + 64);
      uint64_t v16 = *(void *)(v10 + 72);
      char v18 = *(unsigned char *)(v10 + 80);
      uint64_t v19 = *(void *)(v10 + 88);
      uint64_t v20 = *(void *)(v10 + 96);
      uint64_t v21 = *(void *)(v10 + 104);
      char v25 = *(unsigned char *)(v10 + 112);
      long long v27 = *(_OWORD *)v10;
      uint64_t v28 = a2;
      char v29 = a3 & 1;
      char v30 = v11;
      uint64_t v31 = v12;
      char v32 = v13;
      uint64_t v33 = v14;
      uint64_t v34 = v15;
      uint64_t v35 = v17;
      uint64_t v36 = v16;
      char v37 = v18;
      uint64_t v22 = v19;
      uint64_t v38 = v19;
      uint64_t v39 = v20;
      uint64_t v23 = v20;
      uint64_t v40 = v21;
      char v41 = v25;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v17, v16, v18);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v23, v21, v25);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v17, v16, v18);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v23, v21, v25);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = *v4;
      uint64_t *v4 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v27, v8, isUniquelyReferenced_nonNull_native);
      uint64_t *v4 = v26;
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v15, v17, v16, v18);
      return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v22, v23, v21, v25);
    }
  }
  return result;
}

void closure #1 in TextEffectsAnimationController.restoreState(_:for:)(uint64_t a1, uint64_t a2, Swift::UInt64 a3, double a4)
{
  uint64_t v8 = *(void *)(a1 + 48);
  double v9 = *(double *)(a1 + 24) - *(double *)(a1 + 16);
  if (v9 < 0.0) {
    double v9 = 0.0;
  }
  double v10 = a4 - v9;
  char v26 = *(unsigned char *)(a1 + 56);
  outlined init with take of Text.Effect.Phase.Storage((uint64_t)&v26, (uint64_t)&v27);
  outlined init with take of Text.Effect.Phase.Storage((uint64_t)&v27, (uint64_t)&v28);
  if (v28 == 3)
  {
    double v25 = v10;
    char v16 = *(unsigned char *)a1;
    uint64_t v17 = *(void *)(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = *(void *)(a1 + 80);
    uint64_t v20 = *(void *)(a1 + 88);
    swift_beginAccess();
    TextEffectsAnimationController.TimingMap.start(_:time:duration:variant:from:to:)(a3, (uint64_t *)&v25, v8, 0, v16, v17, v18, 0, 1, v19, v20, 0, 1);
    double v25 = a4;
    TextEffectsAnimationController.TimingMap.pause(_:at:)(a3, &v25);
  }
  else
  {
    if (v28 != 2) {
      goto LABEL_8;
    }
    double v25 = v10;
    char v11 = *(unsigned char *)a1;
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v15 = *(void *)(a1 + 88);
    swift_beginAccess();
    TextEffectsAnimationController.TimingMap.start(_:time:duration:variant:from:to:)(a3, (uint64_t *)&v25, v8, 0, v11, v12, v13, 0, 1, v14, v15, 0, 1);
  }
  swift_endAccess();
LABEL_8:
  type metadata accessor for TextRenderLayer.Layout?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Identifier>, (uint64_t)&type metadata for Text.Effect.Identifier, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = a3;
  uint64_t v22 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  uint64_t v23 = MEMORY[0x24C527E00](a2 + 16);
  if (v23)
  {
    int v24 = (void *)v23;
    TextEffectsRenderer.notifyStateObservers(with:time:)(v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t TextEffectsAnimationController.animationInfo(for:persist:default:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  char v7 = (uint64_t *)(v3 + 80);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 80);
  if (*(void *)(v8 + 16) && (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_endAccess();
    swift_retain();
  }
  else
  {
    uint64_t v12 = swift_endAccess();
    uint64_t v11 = a3(v12);
    if (a2)
    {
      swift_beginAccess();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = *v7;
      uint64_t *v7 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a1, isUniquelyReferenced_nonNull_native);
      uint64_t *v7 = v15;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
  }
  return v11;
}

uint64_t TextEffectsAnimationController.animationInfo(for:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 80);
  if (*(void *)(v3 + 16) && (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    uint64_t v6 = 0;
  }
  swift_endAccess();
  return v6;
}

uint64_t TextEffectsAnimationController.evaluateWithTraitCollection(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = MEMORY[0x24C527E00](v2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    char v7 = (void *)MEMORY[0x24C527E00](v5 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
  }
  else
  {
    char v7 = 0;
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  v12[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v12[5] = v8;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  v12[3] = &block_descriptor_73;
  uint64_t v9 = _Block_copy(v12);
  swift_retain();
  swift_release();
  _NSTextCustomRenderingDelegateWillDraw(v7, 0, v9);
  swift_unknownObjectRelease();
  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall TextEffectsAnimationController.Timing.beginAnimationInterval()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v15 - v7;
  if (!*(void *)(v0 + 48))
  {
    if (one-time initialization token for textEffects != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v9, (uint64_t)static Signpost.textEffects);
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    char v10 = OSSignposter.logHandle.getter();
    os_signpost_type_t v11 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      char v16 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v16(v5, v8, v2);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245728000, v10, v11, v13, "Animation", "isAnimation=YES", v12, 2u);
      MEMORY[0x24C527CC0](v12, -1, -1);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v16(v5, v8, v2);
    }
    else
    {

      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    }
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v14 = OSSignpostIntervalState.init(id:isOpen:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    swift_release();
    *(void *)(v1 + 48) = v14;
  }
}

Swift::Void __swiftcall TextEffectsAnimationController.Timing.endAnimationInterval()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v21[-v11];
  if (*(void *)(v1 + 48))
  {
    uint64_t v23 = v3;
    uint64_t v13 = one-time initialization token for textEffects;
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v14, (uint64_t)static Signpost.textEffects);
    uint64_t v15 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    int v22 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v16 = v23;
      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v23 + 88))(v5, v2) == *MEMORY[0x263F90238])
      {
        uint64_t v17 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v5, v2);
        uint64_t v17 = "";
      }
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v9, v12, v6);
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245728000, v15, (os_signpost_type_t)v22, v19, "Animation", v17, v18, 2u);
      MEMORY[0x24C527CC0](v18, -1, -1);

      uint64_t v20 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
      v20(v12, v6);
      swift_release();
      v20(v9, v6);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
      swift_release();
    }
    swift_release();
    *(void *)(v1 + 48) = 0;
  }
}

void (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t TextEffectsAnimationController.animatorToPhase(with:)(Swift::UInt64 a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 64);
  if (!*(void *)(v4 + 16) || (uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) == 0))
  {
    swift_beginAccess();
    uint64_t v17 = *(void *)(v2 + 88);
    if (*(void *)(v17 + 16) && (uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v19 & 1) != 0))
    {
      uint64_t v20 = *(void *)(*(void *)(v17 + 56) + 16 * v18);
      swift_endAccess();
      swift_retain();
      uint64_t v21 = swift_retain_n();
      outlined consume of EnvironmentValues?(v21);
      if (v20)
      {
        int v22 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 112);
        uint64_t v23 = swift_retain();
        uint64_t v24 = v22(v23);
        swift_release();
        goto LABEL_13;
      }
    }
    else
    {
      swift_endAccess();
    }
    swift_beginAccess();
    double v25 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(void *)(v2 + 112));
    if (!v25)
    {
      char v29 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(void *)(v2 + 112));
      if (!v29) {
        return 0;
      }
      char v30 = v29;
      uint64_t v31 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v29) + 0x88))();
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 80))(v31);

      goto LABEL_16;
    }
    char v26 = v25;
    uint64_t v27 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v25) + 0x88))();
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 112))(v27);

LABEL_13:
    uint64_t v28 = swift_release();
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 80))(v28);
LABEL_16:
    swift_release();
    return v8;
  }
  uint64_t v7 = *(void *)(v4 + 56) + 120 * v5;
  uint64_t v8 = *(void *)(v7 + 88);
  uint64_t v9 = *(void *)(v7 + 96);
  if (*(unsigned char *)(v7 + 112))
  {
    uint64_t v10 = *(void *)(v7 + 56);
    uint64_t v11 = *(void *)(v7 + 64);
    uint64_t v12 = *(void *)(v7 + 72);
    char v13 = *(unsigned char *)(v7 + 80);
    uint64_t v14 = *(void *)(v7 + 104);
    if (v8)
    {
      uint64_t v39 = (*(uint64_t (**)(void))(*(void *)v8 + 80))();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v14, 1);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v14, 1);
      swift_release();
      uint64_t v15 = v14;
      uint64_t v16 = v39;
    }
    else
    {
      swift_beginAccess();
      char v32 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(void *)(v2 + 112));
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v38 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v32) + 0x88);
        uint64_t v34 = v14;
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v14, 1);
        swift_retain();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
        uint64_t v35 = outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v14, 1);
        uint64_t v36 = v38(v35);
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 80))(v36);

        uint64_t v15 = v34;
        swift_release();
      }
      else
      {
        uint64_t v15 = v14;
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v14, 1);
        swift_retain();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v14, 1);
        uint64_t v16 = 0;
      }
    }
    swift_release();
    swift_release();
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v15, 1);
    return v16;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v8;
}

void *TextEffectsAnimationController.animatorFromPhase(with:)(Swift::UInt64 a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 64);
  if (!*(void *)(v4 + 16) || (uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) == 0))
  {
    swift_beginAccess();
    uint64_t v16 = *(void *)(v2 + 88);
    if (*(void *)(v16 + 16) && (uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v18 & 1) != 0))
    {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 16 * v17);
      swift_endAccess();
      swift_retain();
      uint64_t v20 = swift_retain_n();
      uint64_t v21 = outlined consume of EnvironmentValues?(v20);
      if (v19)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 80))(v21);
LABEL_13:
        swift_release();
        return (void *)v8;
      }
    }
    else
    {
      swift_endAccess();
    }
    swift_beginAccess();
    int v22 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(void *)(v2 + 112));
    if (!v22) {
      return 0;
    }
    uint64_t v23 = v22;
    uint64_t v24 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v22) + 0x88))();
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 80))(v24);

    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v4 + 56) + 120 * v5;
  uint64_t v8 = *(void *)(v7 + 56);
  uint64_t v9 = *(void *)(v7 + 64);
  if (*(unsigned char *)(v7 + 80))
  {
    uint64_t v10 = *(void *)(v7 + 72);
    uint64_t v11 = *(void *)(v7 + 88);
    uint64_t v12 = *(void *)(v7 + 96);
    uint64_t v13 = *(void *)(v7 + 104);
    char v14 = *(unsigned char *)(v7 + 112);
    if (v8)
    {
      uint64_t v15 = (void *)(*(uint64_t (**)(void))(*(void *)v8 + 80))();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v10, 1);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v10, 1);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v12, v13, v14);
    }
    else
    {
      swift_beginAccess();
      double v25 = Text.Effect.Keyframes.validAnimation(_:)(a1, *(void *)(v2 + 112));
      uint64_t v15 = v25;
      if (!v25)
      {
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v10, 1);
        swift_retain();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v10, 1);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v12, v13, v14);
        goto LABEL_19;
      }
      char v30 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v25) + 0x88);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v10, 1);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(0, v9, v10, 1);
      uint64_t v26 = outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v12, v13, v14);
      uint64_t v27 = v30(v26);
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 80))(v27);

      uint64_t v15 = (void *)v28;
    }
    swift_release();
LABEL_19:
    swift_release();
    swift_release();
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v10, 1);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v11, v12, v13, v14);
    return v15;
  }
  swift_bridgeObjectRetain();
  return (void *)v8;
}

void TextEffectsAnimationController.invalidateAnimator(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t *)(v1 + 96);
  swift_beginAccess();
  uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    uint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v4;
    uint64_t v21 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void **)(*(void *)(v9 + 56) + 8 * v7);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    uint64_t *v4 = v9;

    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  type metadata accessor for TextRenderLayer.Layout?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Identifier>, (uint64_t)&type metadata for Text.Effect.Identifier, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = a1;
  uint64_t v12 = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  if (!*(void *)(v12 + 16)) {
    goto LABEL_13;
  }
  swift_beginAccess();
  uint64_t v13 = *(void *)(*(void *)(v2 + 72) + 16);
  closure #1 in TextEffectsAnimationController.removeAnimations(_:)(v12, (uint64_t *)v2);
  uint64_t v14 = *(void *)(*(void *)(v2 + 72) + 16);
  if (v13)
  {
    if (!v14) {
      TextEffectsAnimationController.clearDisplayLink()();
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  if (!v14) {
    goto LABEL_13;
  }
  if (*(unsigned char *)(v2 + 40)) {
    goto LABEL_13;
  }
  *(unsigned char *)(v2 + 40) = 1;
  *(CFTimeInterval *)(v2 + 56) = CACurrentMediaTime();
  if (TextEffectsAnimationController.startExternalDisplayLink()() || *(void *)(v2 + 48)) {
    goto LABEL_13;
  }
  id v15 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v2, sel_displayLink_);
  uint64_t v16 = *(void **)(v2 + 48);
  *(void *)(v2 + 48) = v15;

  uint64_t v17 = *(void **)(v2 + 48);
  if (v17)
  {
    char v18 = self;
    id v19 = v17;
    id v20 = objc_msgSend(v18, sel_mainRunLoop);
    objc_msgSend(v19, sel_addToRunLoop_forMode_, v20, *MEMORY[0x263EFF588]);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for TextAnimator()
{
  return self;
}

void TextAnimator.start()()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      Swift::UInt64 v2 = *(void *)(*(void *)(v0
                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      char v3 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant);
      uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
      uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8);
      uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration);
      if (v6)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t Strong = swift_weakLoadStrong();
        swift_bridgeObjectRetain();
        if (Strong) {
          swift_release();
        }
      }
      swift_bridgeObjectRetain();
      CFTimeInterval v10 = CACurrentMediaTime();
      TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(v2, v3, &v10, v5, v4, v6, 0, 1);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v8 = (void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
    *uint64_t v8 = 0;
    v8[1] = 0;
    swift_bridgeObjectRelease();
    *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration) = 0;
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + v1) != 2)
    {
      *(void *)(v0 + v1) = 2;
      uint64_t v9 = *(void (**)(uint64_t))(v0
                                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v9(v0);
      swift_release();
    }
  }
}

void TextAnimator.start(duration:)(double a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      Swift::UInt64 v4 = *(void *)(*(void *)(v1
                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      char v5 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant);
      uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
      uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8);
      uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CFTimeInterval v11 = CACurrentMediaTime();
      TextEffectsAnimationController.startAnimation(with:variant:at:phase:configuration:duration:)(v4, v5, &v11, v6, v7, v8, *(uint64_t *)&a1, 0);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v9 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
    *uint64_t v9 = 0;
    v9[1] = 0;
    swift_bridgeObjectRelease();
    *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration) = 0;
    swift_bridgeObjectRelease();
    if (*(void *)(v1 + v2) != 2)
    {
      *(void *)(v1 + v2) = 2;
      CFTimeInterval v10 = *(void (**)(uint64_t))(v1
                                           + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v10(v1);
      swift_release();
    }
  }
}

void TextAnimator.pause()()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      TextEffectsAnimationController.pauseAnimation(with:)(*(void *)(*(void *)(v0
                                                                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
      swift_release();
    }
    if (*(void *)(v0 + v1) != 3)
    {
      *(void *)(v0 + v1) = 3;
      uint64_t v2 = *(void (**)(uint64_t))(v0
                                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v2(v0);
      swift_release();
    }
  }
}

void TextAnimator.resume()()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      TextEffectsAnimationController.resumeAnimation(with:)(*(void *)(*(void *)(v0
                                                                                  + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                      + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
      swift_release();
    }
    if (*(void *)(v0 + v1) != 2)
    {
      *(void *)(v0 + v1) = 2;
      uint64_t v2 = *(void (**)(uint64_t))(v0
                                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v2(v0);
      swift_release();
    }
  }
}

void TextAnimator.invalidate()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state) = 0;
    if (swift_weakLoadStrong())
    {
      TextEffectsAnimationController.invalidateAnimator(with:)(*(void *)(*(void *)(v0
                                                                                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                         + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
      swift_release();
    }
  }
}

double TextAnimator.duration.getter()
{
  double v1 = 0.0;
  if (swift_weakLoadStrong())
  {
    Swift::UInt64 v2 = *(void *)(*(void *)(v0
                               + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                   + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8);
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__configuration);
    char v6 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = TextEffectsAnimationController.duration(with:phase:configuration:variant:)(v2, v3, v4, v5, v6);
    LOBYTE(v2) = v8;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0) {
      return *(double *)&v7;
    }
  }
  return v1;
}

uint64_t TextAnimator.toPhase.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase);
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator__phase + 8);
  }
  else
  {
    if (!swift_weakLoadStrong()) {
      return 0;
    }
    uint64_t v1 = TextEffectsAnimationController.animatorToPhase(with:)(*(void *)(*(void *)(v0
                                                                                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                         + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
    uint64_t v2 = v4;
    swift_release();
    if (!v2) {
      return 0;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = MEMORY[0x24C522820](v1, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t TextAnimator.fromPhase.getter()
{
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  uint64_t v1 = TextEffectsAnimationController.animatorFromPhase(with:)(*(void *)(*(void *)(v0
                                                                                     + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                                                                         + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id));
  uint64_t v3 = v2;
  swift_release();
  if (!v3) {
    return 0;
  }
  uint64_t v4 = MEMORY[0x24C522820](v1, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t TextAnimator.stateSnapshot.getter()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state)) {
    return 0;
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v2 = Strong;
  Swift::UInt64 v3 = *(void *)(*(void *)(v0
                             + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  swift_beginAccess();
  uint64_t v4 = Text.Effect.Keyframes.validAnimation(_:)(v3, *(void *)(v2 + 112));
  if (!v4)
  {
    swift_release();
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0xC0))(v2);
  swift_release();

  return v6;
}

uint64_t TextAnimator.stateSnapshot.setter(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state;
  if (!*(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state)) {
    goto LABEL_7;
  }
  if (!result) {
    return result;
  }
  uint64_t v3 = v1;
  type metadata accessor for Text.Effect.AnyStateSnapshot();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4 && (uint64_t v5 = v4, (Strong = swift_weakLoadStrong()) != 0))
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation);
    uint64_t v9 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
    Swift::UInt64 v10 = *(void *)(v8 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
    swift_beginAccess();
    CFTimeInterval v11 = Text.Effect.Keyframes.validAnimation(_:)(v10, v7[14]);
    if (v11)
    {
      uint64_t v12 = v11;
      unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v22 = v8;
      uint64_t v14 = v7[14];
      uint64_t v21 = v9;
      id v15 = *(void (**)(uint64_t, unint64_t, void, uint64_t, void *))((*MEMORY[0x263F8EED0] & *v12)
                                                                                        + 0xC8);
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      v15(v5, v13, 0, v14, v7);
      uint64_t v9 = v21;

      swift_release();
      uint64_t v8 = v22;
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_beginAccess();
      swift_unknownObjectRetain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = v7[13];
      v7[13] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v10, isUniquelyReferenced_nonNull_native);
      v7[13] = v24;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
    Swift::UInt64 v17 = *(void *)(v8 + v9);
    uint64_t v24 = v7[7];
    TextEffectsAnimationController.state(for:time:)(v17, (double *)&v24, (uint64_t)v23);
    int v18 = v23[56];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v19 = 3;
    if (v18 != 3) {
      uint64_t v19 = 1;
    }
    if (v18 == 2) {
      uint64_t v19 = 2;
    }
    if (*(void *)(v3 + v2) == v19)
    {
      swift_release();
      return swift_unknownObjectRelease_n();
    }
    else
    {
      *(void *)(v3 + v2) = v19;
      id v20 = *(void (**)(uint64_t))(v3
                                           + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_notify);
      swift_retain();
      v20(v3);
      swift_release();
      swift_unknownObjectRelease_n();
      return swift_release();
    }
  }
  else
  {
LABEL_7:
    return swift_unknownObjectRelease();
  }
}

double TextAnimator.nextAnimationTriggerDelay.getter()
{
  double v1 = 0.0;
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v3 = Strong;
      Swift::UInt64 v4 = *(void *)(*(void *)(v0
                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      double v5 = COERCE_DOUBLE(TextEffectsAnimationController.duration(with:phase:configuration:variant:)(v4, 0, 0, 0, *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_variant)));
      if (v6) {
        double v1 = 1.0;
      }
      else {
        double v1 = v5;
      }
      swift_beginAccess();
      uint64_t v7 = Text.Effect.Keyframes.validAnimation(_:)(v4, *(void *)(v3 + 112));
      if (v7)
      {
        uint64_t v8 = v7;
        double v9 = COERCE_DOUBLE((*(uint64_t (**)(double))((*MEMORY[0x263F8EED0] & *v7) + 0xB8))(v1));
        char v11 = v10;
        swift_release();

        if ((v11 & 1) == 0) {
          return v9;
        }
      }
      else
      {
        swift_release();
      }
    }
  }
  return v1;
}

void TextAnimator.cancel()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_state))
  {
    if (swift_weakLoadStrong())
    {
      uint64_t v1 = *(void *)(*(void *)(v0
                                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D412TextAnimator_textAnimation)
                     + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
      CFTimeInterval v2 = CACurrentMediaTime();
      swift_beginAccess();
      TextEffectsAnimationController.TimingMap.cancel(_:at:)(v1, (uint64_t *)&v2);
      swift_endAccess();
      swift_release();
    }
  }
}

id Text.Effect.AnyStateSnapshot.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Text.Effect.AnyStateSnapshot();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for Text.Effect.AnyStateSnapshot()
{
  return self;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.TimingMap()
{
  return &type metadata for TextEffectsAnimationController.TimingMap;
}

ValueMetadata *type metadata accessor for TextEffectsRenderer.NotifyFlags()
{
  return &type metadata for TextEffectsRenderer.NotifyFlags;
}

void *initializeBufferWithCopyOfBuffer for TextRenderLayer.SegmentLayer(void *a1, void *a2)
{
  uint64_t v3 = (void *)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for TextRenderLayer.SegmentLayer(void *a1)
{
}

uint64_t *assignWithCopy for TextRenderLayer.SegmentLayer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  uint64_t v4 = *a1;
  *a1 = *a2;
  double v5 = (void *)(v4 & 0x3FFFFFFFFFFFFFFFLL);
  id v6 = v3;

  return a1;
}

uint64_t *assignWithTake for TextRenderLayer.SegmentLayer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for TextRenderLayer.SegmentLayer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextRenderLayer.SegmentLayer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextRenderLayer.SegmentLayer()
{
  return &type metadata for TextRenderLayer.SegmentLayer;
}

ValueMetadata *type metadata accessor for TextRenderLayer.SegmentIdentifierKey()
{
  return &type metadata for TextRenderLayer.SegmentIdentifierKey;
}

void *type metadata accessor for TextRenderLayer.UpdateFlags()
{
  return &unk_26FA89728;
}

void *type metadata accessor for RawTextLayout()
{
  return &unk_26FA493F8;
}

void destroy for TextRenderLayer.Layout(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_super v2 = *(void **)(a1 + 136);
}

uint64_t initializeWithCopy for TextRenderLayer.Layout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v7 = *(void **)(a2 + 136);
  *(void *)(a1 + 136) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v7;
  return a1;
}

uint64_t assignWithCopy for TextRenderLayer.Layout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v4 = *(void **)(a2 + 136);
  uint64_t v5 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for TextRenderLayer.Layout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v4 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);

  return a1;
}

uint64_t getEnumTagSinglePayload for TextRenderLayer.Layout(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextRenderLayer.Layout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for TextRenderLayer.Layout()
{
  return &unk_26FA897A8;
}

unint64_t lazy protocol witness table accessor for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.UpdateFlags and conformance TextRenderLayer.UpdateFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags;
  if (!lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags;
  if (!lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags;
  if (!lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags;
  if (!lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEffectsRenderer.NotifyFlags and conformance TextEffectsRenderer.NotifyFlags);
  }
  return result;
}

uint64_t one-time initialization function for textEffects()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v4, static Signpost.textEffects);
  __swift_project_value_buffer(v4, (uint64_t)static Signpost.textEffects);
  if (one-time initialization token for textEffects != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v0, (uint64_t)static Log.textEffects);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.textEffects);
  __swift_project_value_buffer(v0, (uint64_t)static Log.textEffects);
  return Logger.init(subsystem:category:)();
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.intersection(_:)(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
}

{
  uint64_t vars8;

  return specialized _NativeSet.intersection(_:)(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v5);
    swift_release();
  }
  else
  {
    char v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, a2, v5);
    swift_release();
    MEMORY[0x24C527CC0](v10, -1, -1);
  }
  return v9;
}

void specialized closure #1 in _NativeSet.intersection(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a2;
  uint64_t v69 = a1;
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v66 - v9;
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v66 - v12;
  v17.n128_f64[0] = MEMORY[0x270FA5388](v14);
  int v18 = (char *)&v66 - v15;
  unint64_t v19 = *(void *)(a3 + 16);
  unint64_t v20 = *(void *)(a4 + 16);
  uint64_t v81 = v7 + 16;
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v76 = v7;
  if (v20 >= v19)
  {
    uint64_t v73 = 0;
    int64_t v43 = 0;
    uint64_t v44 = *(void *)(a3 + 56);
    int64_t v68 = a3 + 56;
    uint64_t v45 = 1 << *(unsigned char *)(a3 + 32);
    if (v45 < 64) {
      uint64_t v46 = ~(-1 << v45);
    }
    else {
      uint64_t v46 = -1;
    }
    unint64_t v47 = v46 & v44;
    int64_t v70 = (unint64_t)(v45 + 63) >> 6;
    uint64_t v77 = a4 + 56;
    char v48 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v80 = v16;
    if ((v46 & v44) != 0) {
      goto LABEL_39;
    }
LABEL_40:
    int64_t v50 = v43 + 1;
    if (!__OFADD__(v43, 1))
    {
      if (v50 < v70)
      {
        unint64_t v51 = *(void *)(v68 + 8 * v50);
        int64_t v52 = v43 + 1;
        if (!v51)
        {
          int64_t v52 = v43 + 2;
          if (v43 + 2 >= v70) {
            goto LABEL_62;
          }
          unint64_t v51 = *(void *)(v68 + 8 * v52);
          if (!v51)
          {
            int64_t v52 = v43 + 3;
            if (v43 + 3 >= v70) {
              goto LABEL_62;
            }
            unint64_t v51 = *(void *)(v68 + 8 * v52);
            if (!v51)
            {
              uint64_t v53 = v43 + 4;
              if (v43 + 4 >= v70) {
                goto LABEL_62;
              }
              unint64_t v51 = *(void *)(v68 + 8 * v53);
              if (!v51)
              {
                while (1)
                {
                  int64_t v52 = v53 + 1;
                  if (__OFADD__(v53, 1)) {
                    goto LABEL_68;
                  }
                  if (v52 >= v70) {
                    goto LABEL_62;
                  }
                  unint64_t v51 = *(void *)(v68 + 8 * v52);
                  ++v53;
                  if (v51) {
                    goto LABEL_53;
                  }
                }
              }
              int64_t v52 = v43 + 4;
            }
          }
        }
LABEL_53:
        uint64_t v74 = (v51 - 1) & v51;
        int64_t v75 = v52;
        for (unint64_t i = __clz(__rbit64(v51)) + (v52 << 6); ; unint64_t i = __clz(__rbit64(v47)) | (v43 << 6))
        {
          uint64_t v54 = *(void *)(a3 + 48);
          uint64_t v55 = *(void *)(v7 + 72);
          unint64_t v72 = i;
          char v56 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
          v56(v80, v54 + v55 * i, v6, v17);
          lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
          uint64_t v57 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v58 = -1 << *(unsigned char *)(a4 + 32);
          unint64_t v59 = v57 & ~v58;
          if ((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59))
          {
            char v71 = (char *)((unint64_t)v48 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
            uint64_t v60 = ~v58;
            while (1)
            {
              ((void (*)(char *, unint64_t, uint64_t))v56)(v10, *(void *)(v79 + 48) + v59 * v55, v6);
              lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
              char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v62 = *v48;
              (*v48)(v10, v6);
              if (v61) {
                break;
              }
              unint64_t v59 = (v59 + 1) & v60;
              if (((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
              {
                a3 = v78;
                a4 = v79;
                int64_t v43 = v75;
                uint64_t v7 = v76;
                uint64_t v63 = v80;
                unint64_t v47 = v74;
                goto LABEL_60;
              }
            }
            v62(v80, v6);
            *(unint64_t *)((char *)v69 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
            unint64_t v47 = v74;
            BOOL v28 = __OFADD__(v73++, 1);
            a3 = v78;
            a4 = v79;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            if (v28) {
              goto LABEL_66;
            }
            if (!v74) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v62 = *v48;
            a3 = v78;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            uint64_t v63 = v80;
            unint64_t v47 = v74;
LABEL_60:
            v62(v63, v6);
            if (!v47) {
              goto LABEL_40;
            }
          }
LABEL_39:
          uint64_t v74 = (v47 - 1) & v47;
          int64_t v75 = v43;
        }
      }
      goto LABEL_62;
    }
  }
  else
  {
    int64_t v21 = 0;
    uint64_t v22 = *(void *)(a4 + 56);
    uint64_t v67 = a4 + 56;
    uint64_t v23 = 1 << *(unsigned char *)(a4 + 32);
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v25 = v24 & v22;
    int64_t v68 = (unint64_t)(v23 + 63) >> 6;
    unint64_t v72 = v7 + 32;
    uint64_t v73 = 0;
    uint64_t v77 = a3 + 56;
    uint64_t v80 = (char *)(v7 + 8);
    char v71 = (char *)&v66 - v15;
    if ((v24 & v22) != 0) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v30 = v21 + 1;
    if (!__OFADD__(v21, 1))
    {
      if (v30 < v68)
      {
        unint64_t v31 = *(void *)(v67 + 8 * v30);
        int64_t v32 = v21 + 1;
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 2;
        if (v21 + 2 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 3;
        if (v21 + 3 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31)
        {
LABEL_23:
          uint64_t v74 = (v31 - 1) & v31;
          int64_t v75 = v32;
          for (unint64_t j = __clz(__rbit64(v31)) + (v32 << 6); ; unint64_t j = __clz(__rbit64(v25)) | (v21 << 6))
          {
            uint64_t v34 = *(void *)(v7 + 72);
            uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
            v35(v18, *(void *)(a4 + 48) + v34 * j, v6, v17);
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v18, v6);
            lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
            uint64_t v36 = v13;
            uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v38 = -1 << *(unsigned char *)(a3 + 32);
            unint64_t v39 = v37 & ~v38;
            if ((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
            {
              int64_t v70 = (unint64_t)v80 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
              uint64_t v40 = ~v38;
              while (1)
              {
                ((void (*)(char *, unint64_t, uint64_t))v35)(v10, *(void *)(v78 + 48) + v39 * v34, v6);
                lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
                char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v42 = *(void (**)(char *, uint64_t))v80;
                (*(void (**)(char *, uint64_t))v80)(v10, v6);
                if (v41) {
                  break;
                }
                unint64_t v39 = (v39 + 1) & v40;
                if (((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
                {
                  a3 = v78;
                  int64_t v21 = v75;
                  uint64_t v7 = v76;
                  unint64_t v13 = v36;
                  int v18 = v71;
                  goto LABEL_30;
                }
              }
              v42(v36, v6);
              uint64_t v26 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
              uint64_t v27 = 1 << v39;
              unint64_t v13 = v36;
              *(unint64_t *)((char *)v69 + v26) |= v27;
              unint64_t v25 = v74;
              BOOL v28 = __OFADD__(v73++, 1);
              a3 = v78;
              a4 = v79;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              int v18 = v71;
              if (v28) {
                goto LABEL_65;
              }
              if (!v74) {
                goto LABEL_10;
              }
            }
            else
            {
              uint64_t v42 = *(void (**)(char *, uint64_t))v80;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              unint64_t v13 = v36;
              int v18 = v71;
LABEL_30:
              unint64_t v25 = v74;
              v42(v13, v6);
              a4 = v79;
              if (!v25) {
                goto LABEL_10;
              }
            }
LABEL_9:
            uint64_t v74 = (v25 - 1) & v25;
            int64_t v75 = v21;
          }
        }
        uint64_t v33 = v21 + 4;
        if (v21 + 4 < v68)
        {
          unint64_t v31 = *(void *)(v67 + 8 * v33);
          if (v31)
          {
            int64_t v32 = v21 + 4;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v32 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_67;
            }
            if (v32 >= v68) {
              break;
            }
            unint64_t v31 = *(void *)(v67 + 8 * v32);
            ++v33;
            if (v31) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_62:
      uint64_t v64 = v66;
      uint64_t v65 = v73;
      swift_retain();
      specialized _NativeSet.extractSubset(using:count:)(v69, v64, v65, a3);
      return;
    }
    __break(1u);
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
}

Swift::Int specialized closure #1 in _NativeSet.intersection(_:)(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v43 = (unint64_t *)result;
  uint64_t v6 = 0;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v7 = 0;
    uint64_t v8 = a4 + 56;
    uint64_t v9 = 1 << *(unsigned char *)(a4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(a4 + 56);
    int64_t v45 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        unint64_t v13 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v14 = v13 | (v7 << 6);
      }
      else
      {
        int64_t v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v15 >= v45) {
          goto LABEL_60;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v15);
        ++v7;
        if (!v16)
        {
          int64_t v7 = v15 + 1;
          if (v15 + 1 >= v45) {
            goto LABEL_60;
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            int64_t v7 = v15 + 2;
            if (v15 + 2 >= v45) {
              goto LABEL_60;
            }
            unint64_t v16 = *(void *)(v8 + 8 * v7);
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v45)
              {
LABEL_60:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v43, a2, v6, a3);
              }
              unint64_t v16 = *(void *)(v8 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  int64_t v7 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    break;
                  }
                  if (v7 >= v45) {
                    goto LABEL_60;
                  }
                  unint64_t v16 = *(void *)(v8 + 8 * v7);
                  ++v17;
                  if (v16) {
                    goto LABEL_21;
                  }
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              int64_t v7 = v17;
            }
          }
        }
LABEL_21:
        unint64_t v11 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
      }
      Swift::UInt64 v18 = *(void *)(*(void *)(a4 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      unint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      uint64_t v22 = 1 << v20;
      if (((1 << v20) & *(void *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        uint64_t v23 = *(void *)(a3 + 48);
        if (*(void *)(v23 + 8 * v20) != v18)
        {
          for (unint64_t i = v20 + 1; ; unint64_t i = v25 + 1)
          {
            unint64_t v25 = i & ~v19;
            if (((*(void *)(v12 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
              goto LABEL_6;
            }
            if (*(void *)(v23 + 8 * v25) == v18) {
              break;
            }
          }
          unint64_t v21 = v25 >> 6;
          uint64_t v22 = 1 << v25;
        }
        v43[v21] |= v22;
        BOOL v26 = __OFADD__(v6++, 1);
        if (v26) {
          break;
        }
      }
    }
    __break(1u);
  }
  int64_t v27 = 0;
  uint64_t v44 = a3 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(a3 + 32);
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  else {
    uint64_t v29 = -1;
  }
  unint64_t v30 = v29 & *(void *)(a3 + 56);
  int64_t v46 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v31 = a4 + 56;
  while (v30)
  {
    unint64_t v32 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    unint64_t v33 = v32 | (v27 << 6);
LABEL_52:
    Swift::UInt64 v37 = *(void *)(*(void *)(a3 + 48) + 8 * v33);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v37);
    unint64_t result = Hasher._finalize()();
    uint64_t v38 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v39 = result & ~v38;
    if ((*(void *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
    {
      uint64_t v40 = *(void *)(a4 + 48);
      if (*(void *)(v40 + 8 * v39) == v37)
      {
LABEL_57:
        *(unint64_t *)((char *)v43 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
        BOOL v26 = __OFADD__(v6++, 1);
        if (v26)
        {
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v41 = ~v38;
        while (1)
        {
          unint64_t v39 = (v39 + 1) & v41;
          if (((*(void *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0) {
            break;
          }
          if (*(void *)(v40 + 8 * v39) == v37) {
            goto LABEL_57;
          }
        }
      }
    }
  }
  int64_t v34 = v27 + 1;
  if (__OFADD__(v27, 1)) {
    goto LABEL_62;
  }
  if (v34 >= v46) {
    goto LABEL_60;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v34);
  ++v27;
  if (v35) {
    goto LABEL_51;
  }
  int64_t v27 = v34 + 1;
  if (v34 + 1 >= v46) {
    goto LABEL_60;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v27);
  if (v35) {
    goto LABEL_51;
  }
  int64_t v27 = v34 + 2;
  if (v34 + 2 >= v46) {
    goto LABEL_60;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v27);
  if (v35)
  {
LABEL_51:
    unint64_t v30 = (v35 - 1) & v35;
    unint64_t v33 = __clz(__rbit64(v35)) + (v27 << 6);
    goto LABEL_52;
  }
  int64_t v36 = v34 + 3;
  if (v36 >= v46) {
    goto LABEL_60;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v36);
  if (v35)
  {
    int64_t v27 = v36;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v27 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v27 >= v46) {
      goto LABEL_60;
    }
    unint64_t v35 = *(void *)(v44 + 8 * v27);
    ++v36;
    if (v35) {
      goto LABEL_51;
    }
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v34 = a1;
  uint64_t v7 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>();
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  unint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t (**v35)(unint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;

  int64_t v34 = a1;
  uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  type metadata accessor for _SetStorage<Duration.UnitsFormatStyle.Unit>();
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  unint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;

  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = MEMORY[0x263F8EE88];
LABEL_36:
    swift_release();
    return v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<Text.Effect.Identifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier, (uint64_t)&type metadata for Text.Effect.Identifier, MEMORY[0x263F8DBD8]);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v28 = a1;
  if (a2 < 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  unint64_t v11 = 0;
  unint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      uint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      unint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        unint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    unint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      uint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        unint64_t v25 = v21 == v24;
        if (v21 == v24) {
          uint64_t v21 = 0;
        }
        v23 |= v25;
        unint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      uint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v9 + 48) + 8 * v22) = v18;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    unint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t (**v35)(unint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;

  int64_t v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  type metadata accessor for _SetStorage<UUID>();
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  unint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    unint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    unint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x263F073D0], &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0], MEMORY[0x263F073E0]);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    unint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    unint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x263F07EC8], &lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8], MEMORY[0x263F07ED0]);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t specialized Set._Variant.remove(_:)(Swift::UInt64 a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(void *)(v7 + 8 * v6) != a1)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v7 + 8 * v6) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v13 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v10 = v13;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *uint64_t v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(char a1@<W0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  DefaultDescriptionAttribute.rawValue.getter();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_96:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = 29;
    return result;
  }
  uint64_t v10 = ~v8;
  while (2)
  {
    unint64_t v11 = 0xE400000000000000;
    uint64_t v12 = 1952671090;
    switch(*(unsigned char *)(*(void *)(v6 + 48) + v9))
    {
      case 1:
        unint64_t v11 = 0xE600000000000000;
        uint64_t v12 = 0x6E696769726FLL;
        break;
      case 2:
        uint64_t v12 = 0x696F507472617473;
        unint64_t v11 = 0xEA0000000000746ELL;
        break;
      case 3:
        unint64_t v11 = 0xE800000000000000;
        uint64_t v12 = 0x746E696F50646E65;
        break;
      case 4:
        uint64_t v12 = 0x726F66736E617274;
        unint64_t v11 = 0xE90000000000006DLL;
        break;
      case 5:
        unint64_t v11 = 0xE500000000000000;
        uint64_t v12 = 0x7370696C63;
        break;
      case 6:
        uint64_t v13 = 0x72656E726F63;
        goto LABEL_19;
      case 7:
        uint64_t v14 = "continuousCorners";
        goto LABEL_35;
      case 8:
        unint64_t v11 = 0xE700000000000000;
        uint64_t v12 = 0x7974696361706FLL;
        break;
      case 9:
        uint64_t v12 = 0x6957726564726F62;
        unint64_t v11 = 0xEB00000000687464;
        break;
      case 0xA:
        uint64_t v15 = 0x726564726F62;
        goto LABEL_21;
      case 0xB:
        uint64_t v12 = 0x756F72676B636162;
        unint64_t v11 = 0xEF726F6C6F43646ELL;
        break;
      case 0xC:
        uint64_t v14 = "compositingFilter";
        goto LABEL_35;
      case 0xD:
        uint64_t v12 = 0x55656C6261736964;
        unint64_t v11 = 0xEE00736574616470;
        break;
      case 0xE:
        uint64_t v12 = 0x704F776F64616873;
        unint64_t v11 = 0xED00007974696361;
        break;
      case 0xF:
        uint64_t v13 = 0x776F64616873;
LABEL_19:
        uint64_t v12 = v13 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
        unint64_t v11 = 0xEC00000073756964;
        break;
      case 0x10:
        uint64_t v15 = 0x776F64616873;
LABEL_21:
        uint64_t v12 = v15 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
        unint64_t v11 = 0xEB00000000726F6CLL;
        break;
      case 0x11:
        uint64_t v12 = 0x664F776F64616873;
        unint64_t v11 = 0xEC00000074657366;
        break;
      case 0x12:
        uint64_t v12 = 0x6150776F64616873;
        unint64_t v11 = 0xEA00000000006874;
        break;
      case 0x13:
        uint64_t v12 = 0xD000000000000012;
        unint64_t v16 = "shadowPathIsBounds";
        goto LABEL_37;
      case 0x14:
        unint64_t v11 = 0xEE007265746E6543;
        goto LABEL_27;
      case 0x15:
        unint64_t v11 = 0xEF676E696C616353;
LABEL_27:
        uint64_t v12 = 0x73746E65746E6F63;
        break;
      case 0x16:
        uint64_t v12 = 0xD000000000000015;
        unint64_t v16 = "contentsMultiplyColor";
        goto LABEL_37;
      case 0x17:
        uint64_t v12 = 0x686353726F6C6F63;
        unint64_t v11 = 0xEB00000000656D65;
        break;
      case 0x18:
        unint64_t v11 = 0xE700000000000000;
        uint64_t v12 = 0x737265746C6966;
        break;
      case 0x19:
        unint64_t v11 = 0xEC00000065707954;
        goto LABEL_33;
      case 0x1A:
        unint64_t v11 = 0xEE0073726F6C6F43;
LABEL_33:
        uint64_t v12 = 0x746E656964617267;
        break;
      case 0x1B:
        uint64_t v14 = "gradientLocations";
LABEL_35:
        unint64_t v11 = (unint64_t)(v14 - 32) | 0x8000000000000000;
        uint64_t v12 = 0xD000000000000011;
        break;
      case 0x1C:
        uint64_t v12 = 0xD000000000000016;
        unint64_t v16 = "gradientInterpolations";
LABEL_37:
        unint64_t v11 = (unint64_t)(v16 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    unint64_t v17 = 0xE400000000000000;
    unint64_t v18 = 1952671090;
    switch(a1)
    {
      case 1:
        unint64_t v17 = 0xE600000000000000;
        if (v12 == 0x6E696769726FLL) {
          goto LABEL_89;
        }
        goto LABEL_90;
      case 2:
        unint64_t v17 = 0xEA0000000000746ELL;
        if (v12 != 0x696F507472617473) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 3:
        unint64_t v17 = 0xE800000000000000;
        uint64_t v19 = 0x696F50646E65;
        goto LABEL_84;
      case 4:
        unint64_t v17 = 0xE90000000000006DLL;
        if (v12 != 0x726F66736E617274) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 5:
        unint64_t v17 = 0xE500000000000000;
        if (v12 != 0x7370696C63) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 6:
        uint64_t v20 = 0x72656E726F63;
        goto LABEL_62;
      case 7:
        uint64_t v21 = "continuousCorners";
        goto LABEL_87;
      case 8:
        unint64_t v17 = 0xE700000000000000;
        if (v12 != 0x7974696361706FLL) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 9:
        uint64_t v22 = 0x6957726564726F62;
        uint64_t v23 = 6845540;
        goto LABEL_77;
      case 10:
        uint64_t v24 = 0x726564726F62;
        goto LABEL_64;
      case 11:
        unint64_t v17 = 0xEF726F6C6F43646ELL;
        if (v12 != 0x756F72676B636162) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 12:
        uint64_t v21 = "compositingFilter";
        goto LABEL_87;
      case 13:
        unint64_t v17 = 0xEE00736574616470;
        if (v12 != 0x55656C6261736964) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 14:
        unint64_t v17 = 0xED00007974696361;
        if (v12 != 0x704F776F64616873) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 15:
        uint64_t v20 = 0x776F64616873;
LABEL_62:
        uint64_t v25 = v20 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
        uint64_t v26 = 1937074532;
        goto LABEL_66;
      case 16:
        uint64_t v24 = 0x776F64616873;
LABEL_64:
        uint64_t v22 = v24 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
        uint64_t v23 = 7499628;
        goto LABEL_77;
      case 17:
        uint64_t v25 = 0x664F776F64616873;
        uint64_t v26 = 1952805734;
LABEL_66:
        unint64_t v17 = v26 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
        if (v12 != v25) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 18:
        unint64_t v17 = 0xEA00000000006874;
        if (v12 != 0x6150776F64616873) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 19:
        unint64_t v27 = 0xD000000000000012;
        uint64_t v28 = "shadowPathIsBounds";
        goto LABEL_94;
      case 20:
        unint64_t v17 = 0xEE007265746E6543;
        goto LABEL_73;
      case 21:
        unint64_t v17 = 0xEF676E696C616353;
LABEL_73:
        if (v12 != 0x73746E65746E6F63) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 22:
        unint64_t v27 = 0xD000000000000015;
        uint64_t v28 = "contentsMultiplyColor";
        goto LABEL_94;
      case 23:
        uint64_t v22 = 0x686353726F6C6F63;
        uint64_t v23 = 6647141;
LABEL_77:
        unint64_t v17 = v23 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        if (v12 != v22) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 24:
        unint64_t v17 = 0xE700000000000000;
        if (v12 != 0x737265746C6966) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 25:
        unint64_t v17 = 0xEC00000065707954;
        goto LABEL_83;
      case 26:
        unint64_t v17 = 0xEE0073726F6C6F43;
LABEL_83:
        uint64_t v19 = 0x656964617267;
LABEL_84:
        if (v12 != (v19 & 0xFFFFFFFFFFFFLL | 0x746E000000000000)) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 27:
        uint64_t v21 = "gradientLocations";
LABEL_87:
        unint64_t v17 = (unint64_t)(v21 - 32) | 0x8000000000000000;
        unint64_t v18 = 0xD000000000000011;
        goto LABEL_88;
      case 28:
        unint64_t v27 = 0xD000000000000016;
        uint64_t v28 = "gradientInterpolations";
LABEL_94:
        unint64_t v17 = (unint64_t)(v28 - 32) | 0x8000000000000000;
        if (v12 != v27) {
          goto LABEL_90;
        }
        goto LABEL_89;
      default:
LABEL_88:
        if (v12 != v18) {
          goto LABEL_90;
        }
LABEL_89:
        if (v11 == v17)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_99;
        }
LABEL_90:
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {
          unint64_t v9 = (v9 + 1) & v10;
          if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_96;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_99:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v32 = *v3;
        uint64_t v33 = *v3;
        *uint64_t v3 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeSet.copy()();
          uint64_t v32 = v33;
        }
        *a2 = *(unsigned char *)(*(void *)(v32 + 48) + v9);
        specialized _NativeSet._delete(at:)(v9);
        *uint64_t v3 = v33;
        return swift_bridgeObjectRelease();
    }
  }
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  Swift::UInt32 v5 = a2;
  Swift::UInt32 v6 = a1;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = HIDWORD(a2);
  int v10 = a3 & 1;
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = result & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    while (1)
    {
      uint64_t v16 = *(void *)(v11 + 48) + 20 * v14;
      BOOL v17 = *(_DWORD *)v16 == v6 && *(_DWORD *)(v16 + 4) == v8;
      BOOL v18 = v17 && *(_DWORD *)(v16 + 8) == v5;
      BOOL v19 = v18 && *(_DWORD *)(v16 + 12) == v9;
      if (v19 && (((v10 != 0) ^ *(unsigned __int8 *)(v16 + 16)) & 1) == 0) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_19;
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v4;
    uint64_t v24 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v21 = v24;
    }
    uint64_t v22 = *(void *)(v21 + 48) + 20 * v14;
    char v23 = *(unsigned char *)(v22 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v22;
    *(unsigned char *)(a4 + 16) = v23;
    specialized _NativeSet._delete(at:)(v14);
    uint64_t *v4 = v24;
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_19:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 16) = 2;
  }
  return result;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int result = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = result & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_9:
    *(void *)a2 = 0;
    char v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a1)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_9;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v12 = v14;
  }
  *(void *)a2 = *(void *)(*(void *)(v12 + 48) + 8 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *uint64_t v2 = v14;
  Swift::Int result = swift_bridgeObjectRelease();
  char v13 = 0;
LABEL_10:
  *(unsigned char *)(a2 + 8) = v13;
  return result;
}

void specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v41 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = *v5;
  uint64_t v12 = *v5 + 56;
  uint64_t v13 = -1 << *(unsigned char *)(*v5 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(void *)(v12 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v37 = v5;
    uint64_t v15 = ~v13;
    swift_retain();
    uint64_t v16 = _HashTable.previousHole(before:)();
    uint64_t v17 = v11;
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      unint64_t v39 = (v16 + 1) & v15;
      BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v18 = v8 + 16;
      uint64_t v38 = v19;
      uint64_t v44 = *(void *)(v18 + 56);
      uint64_t v40 = v18;
      uint64_t v20 = (void (**)(char *, uint64_t))(v18 - 8);
      do
      {
        uint64_t v21 = v12;
        int64_t v22 = v44 * v14;
        v38(v10, *(void *)(v17 + 48) + v44 * v14, v7);
        uint64_t v23 = v17;
        lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(v41, v42);
        uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v20)(v10, v7);
        unint64_t v25 = v24 & v15;
        if (a1 >= (uint64_t)v39)
        {
          if (v25 >= v39 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            uint64_t v17 = v23;
            uint64_t v28 = *(void *)(v23 + 48);
            int64_t v29 = v44 * a1;
            unint64_t v30 = v28 + v44 * a1;
            unint64_t v31 = v28 + v22 + v44;
            if (v44 * a1 < v22 || v30 >= v31)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v14;
            }
            else
            {
              a1 = v14;
              if (v29 != v22)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v39 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        uint64_t v17 = v23;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v15;
        uint64_t v12 = v21;
      }
      while (((*(void *)(v21 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    uint64_t v5 = v37;
  }
  else
  {
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v33 = *v5;
  uint64_t v34 = *(void *)(*v5 + 16);
  BOOL v35 = __OFSUB__(v34, 1);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v33 + 16) = v36;
    ++*(_DWORD *)(v33 + 36);
  }
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt64 v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          unint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    Swift::Int result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  unsigned char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::UInt64 v10 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 < v9) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(v3 + 48);
          uint64_t v12 = (unsigned char *)(v11 + v2);
          uint64_t v13 = (unsigned char *)(v11 + v6);
          if (v2 != v6 || (int64_t v2 = v6, v12 >= v13 + 1))
          {
            *uint64_t v12 = *v13;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    Swift::Int result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  unint64_t v14 = *(void *)(v3 + 16);
  uint64_t v15 = __OFSUB__(v14, 1);
  BOOL v16 = v14 - 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x245B75E68);
  }
  *(void *)(v3 + 16) = v16;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

{
  uint64_t *v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  long long v10;
  uint64_t v11;
  Swift::UInt32 v12;
  Swift::UInt32 v13;
  int64_t v14;
  Swift::UInt32 v15;
  Swift::UInt32 v16;
  Swift::UInt8 v17;
  Swift::UInt32 v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  long long *v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      unint64_t v27 = v3;
      uint64_t v28 = v4;
      do
      {
        int64_t v29 = 20 * v6;
        unint64_t v11 = *(void *)(v3 + 48) + 20 * v6;
        uint64_t v12 = *(_DWORD *)v11;
        uint64_t v13 = *(_DWORD *)(v11 + 4);
        unint64_t v14 = v2;
        uint64_t v15 = *(_DWORD *)(v11 + 8);
        BOOL v16 = *(_DWORD *)(v11 + 12);
        uint64_t v17 = *(unsigned char *)(v11 + 16);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        uint64_t v18 = v15;
        int64_t v2 = v14;
        Hasher._combine(_:)(v18);
        Hasher._combine(_:)(v16);
        Hasher._combine(_:)(v17);
        BOOL v19 = Hasher._finalize()() & v7;
        if (v14 >= (uint64_t)v9)
        {
          if (v19 < v9)
          {
            uint64_t v3 = v27;
            uint64_t v4 = v28;
          }
          else
          {
            uint64_t v3 = v27;
            uint64_t v4 = v28;
            if (v2 >= v19) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v3 = v27;
          uint64_t v4 = v28;
          if (v19 >= v9 || v2 >= v19)
          {
LABEL_12:
            uint64_t v20 = *(void *)(v3 + 48);
            uint64_t v21 = v20 + 20 * v2;
            int64_t v22 = (long long *)(v20 + v29);
            if (20 * v2 < v29 || v21 >= (unint64_t)v22 + 20 || (v23 = v2 == v6, int64_t v2 = v6, !v23))
            {
              Swift::UInt64 v10 = *v22;
              *(_DWORD *)(v21 + 16) = *((_DWORD *)v22 + 4);
              *(_OWORD *)uint64_t v21 = v10;
              int64_t v2 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    Swift::Int result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v24 = *(void *)(v3 + 16);
  unint64_t v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v26;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt64 v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          unint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    Swift::Int result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized Set.formSymmetricDifference(_:)(uint64_t result)
{
  uint64_t v2 = result;
  int64_t i = 0;
  uint64_t v4 = result + 56;
  uint64_t v5 = -1 << *(unsigned char *)(result + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(63 - v5) >> 6;
  if (v7) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v11 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  if (v11 < v8)
  {
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    int64_t v13 = i + 1;
    if (v12) {
      goto LABEL_21;
    }
    int64_t v13 = i + 2;
    if (i + 2 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v13);
    if (v12) {
      goto LABEL_21;
    }
    int64_t v13 = i + 3;
    if (i + 3 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v13);
    if (v12)
    {
LABEL_21:
      unint64_t v7 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
      for (i = v13; ; unint64_t v10 = v9 | (i << 6))
      {
        Swift::UInt64 v15 = *(void *)(*(void *)(v2 + 48) + 8 * v10);
        if (specialized Set.contains(_:)(v15, *v1))
        {
          Swift::Int result = specialized Set._Variant.remove(_:)(v15);
          if (!v7) {
            goto LABEL_8;
          }
        }
        else
        {
          Swift::Int result = specialized Set._Variant.insert(_:)(&v16, v15);
          if (!v7) {
            goto LABEL_8;
          }
        }
LABEL_7:
        unint64_t v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
      }
    }
    int64_t v14 = i + 4;
    if (i + 4 < v8)
    {
      unint64_t v12 = *(void *)(v4 + 8 * v14);
      if (v12)
      {
        int64_t v13 = i + 4;
        goto LABEL_21;
      }
      while (1)
      {
        int64_t v13 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_29;
        }
        if (v13 >= v8) {
          break;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        ++v14;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_25:

  return outlined consume of Set<EventID>.Iterator._Variant();
}

Swift::Int specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v33[5] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v32 = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }
        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          if (v14 >= v10) {
            goto LABEL_35;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_35;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_35;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  int64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_35:
                    swift_bridgeObjectRetain();
                    outlined consume of Set<EventID>.Iterator._Variant();
                    return v2;
                  }
                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_35;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }
LABEL_37:
                    __break(1u);
                  }
                  int64_t v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          unint64_t v9 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
          int64_t v4 = v16;
        }
        Swift::UInt64 v18 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v18);
        Swift::Int v19 = Hasher._finalize()();
        uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
      }
      while (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      uint64_t v22 = *(void *)(v2 + 48);
      if (*(void *)(v22 + 8 * v21) == v18) {
        break;
      }
      while (1)
      {
        unint64_t v21 = (v21 + 1) & ~v20;
        if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        if (*(void *)(v22 + 8 * v21) == v18) {
          goto LABEL_28;
        }
      }
    }
LABEL_28:
    v33[0] = a1;
    v33[1] = v6;
    v33[2] = v32;
    v33[3] = v4;
    v33[4] = v9;
    unint64_t v23 = (unint64_t)(63 - v20) >> 6;
    size_t v24 = 8 * v23;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x270FA5388](isStackAllocationSafe);
      unint64_t v27 = (char *)&v31 - v26;
      memcpy((char *)&v31 - v26, (const void *)(v2 + 56), v24);
      Swift::Int v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v27, v23, v2, v21, v33);
      swift_release();
      outlined consume of Set<EventID>.Iterator._Variant();
    }
    else
    {
      int64_t v29 = (void *)swift_slowAlloc();
      memcpy(v29, (const void *)(v2 + 56), v24);
      Swift::Int v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v29, v23, v2, v21, v33);
      swift_release();
      outlined consume of Set<EventID>.Iterator._Variant();
      MEMORY[0x24C527CC0](v29, -1, -1);
    }
    return v28;
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v35 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int64_t v45 = (char *)v35 - v12;
  if (*(void *)(a2 + 16))
  {
    uint64_t v46 = a1;
    unint64_t v47 = 0;
    unint64_t v13 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v40 = (void (**)(char *, char *, uint64_t))(v8 + 32);
      uint64_t v41 = v8 + 48;
      uint64_t v43 = (char *)(a2 + 56);
      uint64_t v44 = v8 + 16;
      unint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v42 = v8 + 56;
      v35[1] = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v36 = v6;
      uint64_t v38 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v39 = v8;
      while (1)
      {
        if (v14 >= v13) {
          __break(1u);
        }
        uint64_t v16 = *(void *)(v8 + 72);
        int64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        v17(v6, a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v16 * v14, v7);
        unint64_t v47 = v14 + 1;
        Swift::UInt64 v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v18(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
          break;
        }
        uint64_t v37 = v18;
        (*v40)(v45, v6, v7);
        lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v20 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v21 = v19 & ~v20;
        if ((*(void *)&v43[(v21 >> 3) & 0xFFFFFFFFFFFFFF8] >> v21))
        {
          uint64_t v22 = a2;
          uint64_t v23 = ~v20;
          while (1)
          {
            v17(v10, *(void *)(v22 + 48) + v21 * v16, v7);
            lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
            char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
            unint64_t v25 = *v15;
            (*v15)(v10, v7);
            if (v24) {
              break;
            }
            unint64_t v21 = (v21 + 1) & v23;
            if (((*(void *)&v43[(v21 >> 3) & 0xFFFFFFFFFFFFFF8] >> v21) & 1) == 0)
            {
              a2 = v22;
              uint64_t v6 = v36;
              goto LABEL_12;
            }
          }
          uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v25)(v45, v7);
          char v27 = *(unsigned char *)(v22 + 32);
          unint64_t v28 = (unint64_t)((1 << v27) + 63) >> 6;
          size_t v29 = 8 * v28;
          if ((v27 & 0x3Fu) <= 0xD
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            MEMORY[0x270FA5388](isStackAllocationSafe);
            memcpy((char *)v35 - ((v29 + 15) & 0x3FFFFFFFFFFFFFF0), v43, v29);
            specialized closure #1 in _NativeSet.subtracting<A>(_:)((void *)((char *)v35 - ((v29 + 15) & 0x3FFFFFFFFFFFFFF0)), v28, v22, v21, &v46);
            uint64_t v31 = v30;
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v32 = (void *)swift_slowAlloc();
            memcpy(v32, v43, v29);
            specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v32, v28, v22, v21, &v46);
            uint64_t v31 = v33;
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x24C527CC0](v32, -1, -1);
          }
          return v31;
        }
        unint64_t v25 = *v15;
LABEL_12:
        v25(v45, v7);
        a1 = v46;
        unint64_t v14 = v47;
        unint64_t v13 = *(void *)(v46 + 16);
        uint64_t v8 = v39;
        if (v47 == v13)
        {
          v37(v6, 1, 1, v7);
          break;
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
    _sypSgWOhTm_1((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  return a2;
}

Swift::Int specialized closure #1 in _NativeSet.subtracting<A>(_:)(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = (unint64_t *)result;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v9 = v8 - 1;
  uint64_t v10 = a3 + 56;
  while (1)
  {
    int64_t v15 = a5[3];
    unint64_t v16 = a5[4];
    if (!v16) {
      break;
    }
    uint64_t v17 = (v16 - 1) & v16;
    unint64_t v18 = __clz(__rbit64(v16)) | (v15 << 6);
LABEL_16:
    Swift::UInt64 v25 = *(void *)(*(void *)(*a5 + 48) + 8 * v18);
    a5[3] = v15;
    a5[4] = v17;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v25);
    Swift::Int result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v27 = result & ~v26;
    uint64_t v11 = v27 >> 6;
    uint64_t v12 = 1 << v27;
    if (((1 << v27) & *(void *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      uint64_t v28 = *(void *)(a3 + 48);
      if (*(void *)(v28 + 8 * v27) == v25)
      {
LABEL_3:
        uint64_t v13 = v11;
        unint64_t v14 = v7[v11];
        v7[v13] = v14 & ~v12;
        if ((v12 & v14) != 0)
        {
          if (__OFSUB__(v9--, 1)) {
            goto LABEL_36;
          }
          if (!v9) {
            return MEMORY[0x263F8EE88];
          }
        }
      }
      else
      {
        for (unint64_t i = v27 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & ~v26;
          if (((*(void *)(v10 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0) {
            break;
          }
          if (*(void *)(v28 + 8 * v30) == v25)
          {
            uint64_t v11 = v30 >> 6;
            uint64_t v12 = 1 << v30;
            goto LABEL_3;
          }
        }
      }
    }
  }
  int64_t v19 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    int64_t v20 = (unint64_t)(a5[2] + 64) >> 6;
    int64_t v21 = a5[3];
    if (v19 >= v20) {
      goto LABEL_33;
    }
    uint64_t v22 = a5[1];
    unint64_t v23 = *(void *)(v22 + 8 * v19);
    if (v23) {
      goto LABEL_15;
    }
    int64_t v24 = v15 + 2;
    int64_t v21 = v15 + 1;
    if (v15 + 2 >= v20) {
      goto LABEL_33;
    }
    unint64_t v23 = *(void *)(v22 + 8 * v24);
    if (!v23)
    {
      int64_t v21 = v15 + 2;
      if (v15 + 3 >= v20) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v22 + 8 * (v15 + 3));
      if (v23)
      {
        int64_t v19 = v15 + 3;
        goto LABEL_15;
      }
      int64_t v24 = v15 + 4;
      int64_t v21 = v15 + 3;
      if (v15 + 4 >= v20) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v22 + 8 * v24);
      if (!v23)
      {
        int64_t v19 = v15 + 5;
        int64_t v21 = v15 + 4;
        if (v15 + 5 >= v20) {
          goto LABEL_33;
        }
        unint64_t v23 = *(void *)(v22 + 8 * v19);
        if (!v23)
        {
          int64_t v21 = v20 - 1;
          int64_t v31 = v15 + 6;
          while (v20 != v31)
          {
            unint64_t v23 = *(void *)(v22 + 8 * v31++);
            if (v23)
            {
              int64_t v19 = v31 - 1;
              goto LABEL_15;
            }
          }
LABEL_33:
          a5[3] = v21;
          a5[4] = 0;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v7, a2, v9, a3);
        }
        goto LABEL_15;
      }
    }
    int64_t v19 = v24;
LABEL_15:
    uint64_t v17 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v19 << 6);
    int64_t v15 = v19;
    goto LABEL_16;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v43 = a2;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v13);
  int64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19.n128_f64[0] = MEMORY[0x270FA5388](v16);
  uint64_t v20 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v44 = a1;
  uint64_t v45 = v20 - 1;
  uint64_t v21 = *a5;
  unint64_t v22 = a5[1];
  unint64_t v23 = *(void *)(*a5 + 16);
  uint64_t v54 = a3;
  if (v22 == v23)
  {
    uint64_t v24 = v43;
    uint64_t v25 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56))(v12, 1, 1, v13, v19);
LABEL_22:
    _sypSgWOhTm_1((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
    uint64_t v41 = v54;
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(v44, v24, v25, v41);
    return;
  }
  uint64_t v42 = v5;
  uint64_t v53 = v18 + 56;
  uint64_t v52 = v18 + 48;
  int64_t v50 = a5;
  unint64_t v51 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v55 = a3 + 56;
  uint64_t v56 = v18 + 16;
  uint64_t v57 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v26 = v18;
  uint64_t v46 = v12;
  uint64_t v49 = v18;
  uint64_t v58 = (char *)&v42 - v17;
  while (v22 < v23)
  {
    uint64_t v28 = *(void *)(v26 + 72);
    size_t v29 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v26 + 16);
    v29(v12, v21 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)) + v28 * v22, v13, v19);
    a5[1] = v22 + 1;
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v26 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v48)(v12, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v12, 1, v13) == 1)
    {
      uint64_t v24 = v43;
      uint64_t v25 = v45;
      goto LABEL_22;
    }
    (*v51)(v58, v12, v13);
    uint64_t v30 = v54;
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v31 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = v30;
    uint64_t v33 = -1 << *(unsigned char *)(v30 + 32);
    unint64_t v34 = v31 & ~v33;
    if (((*(void *)(v55 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
    {
      unint64_t v27 = *v57;
LABEL_5:
      v27(v58, v13);
      goto LABEL_6;
    }
    uint64_t v47 = (unint64_t)v57 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v35 = v32;
    uint64_t v36 = ~v33;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v29)(v15, *(void *)(v35 + 48) + v34 * v28, v13);
      lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v27 = *v57;
      (*v57)(v15, v13);
      if (v37) {
        break;
      }
      unint64_t v34 = (v34 + 1) & v36;
      if (((*(void *)(v55 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
      {
        uint64_t v12 = v46;
        goto LABEL_5;
      }
    }
    v27(v58, v13);
    uint64_t v38 = (v34 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v39 = *(unint64_t *)((char *)v44 + v38);
    *(unint64_t *)((char *)v44 + v38) = v39 & ~(1 << v34);
    if ((v39 & (1 << v34)) == 0)
    {
      uint64_t v12 = v46;
LABEL_6:
      uint64_t v26 = v49;
      a5 = v50;
      goto LABEL_7;
    }
    uint64_t v40 = v45 - 1;
    uint64_t v26 = v49;
    a5 = v50;
    if (__OFSUB__(v45, 1)) {
      goto LABEL_24;
    }
    uint64_t v12 = v46;
    --v45;
    if (!v40) {
      return;
    }
LABEL_7:
    uint64_t v21 = *a5;
    unint64_t v22 = a5[1];
    unint64_t v23 = *(void *)(*a5 + 16);
    if (v22 == v23)
    {
      uint64_t v24 = v43;
      uint64_t v25 = v45;
      v48(v12, 1, 1, v13, v19);
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(char **a1, char a2)
{
  uint64_t v4 = v3;
  uint64_t v8 = (char *)malloc(0x180uLL);
  *a1 = v8;
  *((void *)v8 + 45) = a2;
  *((void *)v8 + 46) = v3;
  uint64_t v9 = *v3;
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[113] = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 >= v14 && (a3 & 1) != 0) {
    goto LABEL_9;
  }
  if (v16 < v14 || (a3 & 1) != 0)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      uint64_t v11 = v17;
      goto LABEL_9;
    }
LABEL_16:
    Swift::Int result = (void (*)(char **, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  specialized _NativeDictionary.copy()();
LABEL_9:
  *((void *)v8 + 47) = v11;
  if (v15)
  {
    uint64_t v19 = *(void *)(*v4 + 56) + 120 * v11;
    uint64_t v20 = *(void *)(v19 + 16);
    uint64_t v21 = *(void *)(v19 + 32);
    uint64_t v22 = *(unsigned __int8 *)(v19 + 40);
    long long v24 = *(_OWORD *)(v19 + 48);
    long long v23 = *(_OWORD *)(v19 + 64);
    uint64_t v25 = *(unsigned __int8 *)(v19 + 80);
    long long v26 = *(_OWORD *)(v19 + 88);
    uint64_t v27 = *(void *)(v19 + 104);
    char v28 = *(unsigned char *)(v19 + 112);
    uint64_t v29 = 256;
    if (!*(unsigned char *)(v19 + 25)) {
      uint64_t v29 = 0;
    }
    uint64_t v30 = v29 | *(unsigned __int8 *)(v19 + 24);
    *((_OWORD *)v8 + 15) = *(_OWORD *)v19;
    *((void *)v8 + 32) = v20;
    *((void *)v8 + 33) = v30;
    *((void *)v8 + 34) = v21;
    *((void *)v8 + 35) = v22;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v27 = 0;
    char v28 = 0;
    long long v23 = 0uLL;
    *((_OWORD *)v8 + 16) = 0u;
    *((_OWORD *)v8 + 17) = 0u;
    *((_OWORD *)v8 + 15) = 0u;
    long long v24 = xmmword_24619B520;
    long long v26 = 0uLL;
  }
  *((_OWORD *)v8 + 18) = v24;
  *((_OWORD *)v8 + 19) = v23;
  *((void *)v8 + 40) = v25;
  *(_OWORD *)(v8 + 328) = v26;
  *((void *)v8 + 43) = v27;
  v8[352] = v28;
  return _NativeDictionary.subscript.modifyspecialized ;
}

void _NativeDictionary.subscript.modifyspecialized (char **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 30);
  uint64_t v4 = *((void *)*a1 + 31);
  uint64_t v5 = *((void *)*a1 + 32);
  uint64_t v7 = *((void *)*a1 + 33);
  uint64_t v6 = *((void *)*a1 + 34);
  uint64_t v8 = *((void *)*a1 + 35);
  uint64_t v9 = *((void *)*a1 + 36);
  uint64_t v10 = *((void *)*a1 + 37);
  uint64_t v11 = *((void *)*a1 + 38);
  uint64_t v12 = *((void *)*a1 + 39);
  uint64_t v13 = *((void *)*a1 + 40);
  uint64_t v14 = *((void *)*a1 + 41);
  uint64_t v15 = *((void *)*a1 + 42);
  uint64_t v16 = *((void *)*a1 + 43);
  char v17 = v2[352];
  char v18 = v2[113];
  if ((a2 & 1) == 0)
  {
    if (v9 == 1)
    {
      if ((v2[113] & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v72 = v7;
      uint64_t v76 = v16;
      uint64_t v19 = v3;
      uint64_t v69 = v4;
      uint64_t v20 = v5;
      uint64_t v64 = v12;
      uint64_t v66 = v8;
      uint64_t v21 = v6;
      uint64_t v22 = v10;
      uint64_t v23 = v11;
      char v27 = v13;
      uint64_t v62 = v14;
      char v28 = v2[352];
      specialized _NativeDictionary._delete(at:)(*((void *)v2 + 47), **((void **)v2 + 46));
      char v17 = v28;
      uint64_t v16 = v76;
      uint64_t v14 = v62;
      uint64_t v12 = v64;
      LOBYTE(v13) = v27;
      goto LABEL_8;
    }
    uint64_t v39 = (long long *)(v2 + 120);
    *((void *)v2 + 15) = v3;
    *((void *)v2 + 16) = v4;
    *((void *)v2 + 17) = v5;
    v2[144] = v7 & 1;
    v2[145] = BYTE1(v7) & 1;
    *((void *)v2 + 19) = v6;
    v2[160] = v8;
    *((void *)v2 + 21) = v9;
    *((void *)v2 + 22) = v10;
    *((void *)v2 + 23) = v11;
    *((void *)v2 + 24) = v12;
    v2[200] = v13 & 1;
    *((void *)v2 + 26) = v14;
    *((void *)v2 + 27) = v15;
    uint64_t v77 = v16;
    *((void *)v2 + 28) = v16;
    char v67 = v17;
    v2[232] = v17 & 1;
    unint64_t v29 = *((void *)v2 + 47);
    uint64_t v30 = (void *)**((void **)v2 + 46);
    if (v18)
    {
      uint64_t v31 = v30[7] + 120 * v29;
      long long v40 = *v39;
      long long v41 = *(_OWORD *)(v2 + 136);
      long long v42 = *(_OWORD *)(v2 + 168);
      *(_OWORD *)(v31 + 32) = *(_OWORD *)(v2 + 152);
      *(_OWORD *)(v31 + 48) = v42;
      *(_OWORD *)uint64_t v31 = v40;
      *(_OWORD *)(v31 + 16) = v41;
      long long v35 = *(_OWORD *)(v2 + 184);
      long long v36 = *(_OWORD *)(v2 + 200);
      long long v37 = *(_OWORD *)(v2 + 216);
      char v38 = v2[232];
      goto LABEL_13;
    }
    uint64_t v43 = *((void *)v2 + 45);
LABEL_16:
    uint64_t v73 = v7;
    uint64_t v44 = v3;
    uint64_t v70 = v4;
    uint64_t v45 = v5;
    uint64_t v46 = v8;
    uint64_t v47 = v6;
    uint64_t v48 = v9;
    uint64_t v49 = v10;
    uint64_t v50 = v11;
    uint64_t v51 = v12;
    char v65 = v13;
    uint64_t v52 = v14;
    specialized _NativeDictionary._insert(at:key:value:)(v29, v43, (uint64_t)v39, v30);
    LOBYTE(v13) = v65;
    uint64_t v14 = v52;
    uint64_t v12 = v51;
    uint64_t v11 = v50;
    uint64_t v10 = v49;
    uint64_t v9 = v48;
    uint64_t v6 = v47;
    uint64_t v8 = v46;
    uint64_t v5 = v45;
    uint64_t v4 = v70;
    uint64_t v3 = v44;
    uint64_t v7 = v73;
    goto LABEL_17;
  }
  if (v9 == 1)
  {
    if ((v2[113] & 1) == 0) {
      goto LABEL_18;
    }
    uint64_t v72 = v7;
    uint64_t v75 = v16;
    uint64_t v19 = v3;
    uint64_t v69 = v4;
    uint64_t v20 = v5;
    char v63 = v13;
    uint64_t v66 = v8;
    uint64_t v21 = v6;
    uint64_t v22 = v10;
    uint64_t v23 = v11;
    uint64_t v24 = v12;
    uint64_t v25 = v14;
    char v26 = v2[352];
    specialized _NativeDictionary._delete(at:)(*((void *)v2 + 47), **((void **)v2 + 46));
    char v17 = v26;
    uint64_t v16 = v75;
    LOBYTE(v13) = v63;
    uint64_t v14 = v25;
    uint64_t v12 = v24;
LABEL_8:
    uint64_t v11 = v23;
    uint64_t v10 = v22;
    uint64_t v9 = 1;
    uint64_t v6 = v21;
    uint64_t v8 = v66;
    uint64_t v5 = v20;
    uint64_t v4 = v69;
    uint64_t v3 = v19;
    uint64_t v7 = v72;
    goto LABEL_18;
  }
  *(void *)uint64_t v2 = v3;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v5;
  v2[24] = v7 & 1;
  v2[25] = BYTE1(v7) & 1;
  *((void *)v2 + 4) = v6;
  v2[40] = v8;
  *((void *)v2 + 6) = v9;
  *((void *)v2 + 7) = v10;
  *((void *)v2 + 8) = v11;
  *((void *)v2 + 9) = v12;
  v2[80] = v13 & 1;
  *((void *)v2 + 11) = v14;
  *((void *)v2 + 12) = v15;
  uint64_t v77 = v16;
  *((void *)v2 + 13) = v16;
  char v67 = v17;
  v2[112] = v17 & 1;
  unint64_t v29 = *((void *)v2 + 47);
  uint64_t v30 = (void *)**((void **)v2 + 46);
  if ((v18 & 1) == 0)
  {
    uint64_t v43 = *((void *)v2 + 45);
    uint64_t v39 = (long long *)v2;
    goto LABEL_16;
  }
  uint64_t v31 = v30[7] + 120 * v29;
  long long v32 = *(_OWORD *)v2;
  long long v33 = *((_OWORD *)v2 + 1);
  long long v34 = *((_OWORD *)v2 + 3);
  *(_OWORD *)(v31 + 32) = *((_OWORD *)v2 + 2);
  *(_OWORD *)(v31 + 48) = v34;
  *(_OWORD *)uint64_t v31 = v32;
  *(_OWORD *)(v31 + 16) = v33;
  long long v35 = *((_OWORD *)v2 + 4);
  long long v36 = *((_OWORD *)v2 + 5);
  long long v37 = *((_OWORD *)v2 + 6);
  char v38 = v2[112];
LABEL_13:
  *(unsigned char *)(v31 + 112) = v38;
  *(_OWORD *)(v31 + 80) = v36;
  *(_OWORD *)(v31 + 96) = v37;
  *(_OWORD *)(v31 + 64) = v35;
LABEL_17:
  uint64_t v16 = v77;
  char v17 = v67;
LABEL_18:
  uint64_t v53 = *((void *)v2 + 30);
  uint64_t v54 = *((void *)v2 + 32);
  uint64_t v55 = *((void *)v2 + 33);
  uint64_t v56 = *((void *)v2 + 34);
  uint64_t v57 = *((void *)v2 + 35);
  uint64_t v58 = *((void *)v2 + 36);
  uint64_t v74 = *((void *)v2 + 37);
  uint64_t v78 = *((void *)v2 + 31);
  long long v68 = *((_OWORD *)v2 + 20);
  long long v71 = *((_OWORD *)v2 + 19);
  uint64_t v60 = *((void *)v2 + 42);
  uint64_t v59 = *((void *)v2 + 43);
  char v61 = v2[352];
  outlined copy of TextEffectsAnimationController.Timing?(v3, v4, v5, v7, v6, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  outlined consume of TextEffectsAnimationController.Timing?(v53, v78, v54, v55, v56, v57, v58, v74, v71, *((uint64_t *)&v71 + 1), v68, *((uint64_t *)&v68 + 1), v60, v59, v61);

  free(v2);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

BOOL specialized closure #1 in RangeSet.contains(_:)(void *a1, void *a2)
{
  return *a2 >= *a1 && a1[1] >= a2[1];
}

uint64_t sub_245B77C1C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextEffectsAnimationController.startExternalDisplayLink()(void *a1)
{
  return closure #1 in TextEffectsAnimationController.startExternalDisplayLink()(a1);
}

void specialized Set.init<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v24 = a1;
  uint64_t v5 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v23 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v22 = (char *)v17 - v9;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, MEMORY[0x263F073D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v17 - v11;
  int64_t v13 = a3 >> 1;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
    uint64_t v25 = Set.init(minimumCapacity:)();
    if (v13 == a2)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, v5);
      return;
    }
    char v18 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v19 = v6 + 48;
    uint64_t v20 = v6 + 56;
    uint64_t v21 = v6 + 16;
    v17[1] = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v15 = (uint64_t)v22;
    uint64_t v14 = v23;
    while (a2 < v13)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, v24 + *(void *)(v6 + 72) * a2, v5);
      uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v16(v12, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1) {
        return;
      }
      ++a2;
      (*v18)(v14, v12, v5);
      specialized Set._Variant.insert(_:)(v15, v14);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v5);
      if (v13 == a2)
      {
        v16(v12, 1, 1, v5);
        return;
      }
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    while (1)
    {
      uint64_t v10 = *(v8 - 2);
      uint64_t v12 = (void *)*(v8 - 1);
      uint64_t v11 = *v8;
      Swift::UInt64 v13 = v8[1];
      uint64_t v14 = v8[2];
      uint64_t v16 = v8[3];
      unint64_t v15 = v8[4];
      Swift::UInt64 v17 = v8[5];
      Swift::UInt64 v18 = v8[6];
      Swift::UInt64 v19 = v8[7];
      v33[0] = *(v8 - 3);
      uint64_t v9 = v33[0];
      v33[1] = v10;
      v33[2] = (Swift::UInt64)v12;
      v33[3] = v11;
      uint64_t v28 = v7;
      unint64_t v29 = v12;
      uint64_t v34 = v11;
      uint64_t v31 = v14;
      char v32 = v13;
      v33[4] = v13;
      v33[5] = v14;
      void v33[6] = v16;
      v33[7] = v15;
      unint64_t v30 = v15;
      v33[8] = v17;
      v33[9] = v18;
      v33[10] = v19;
      outlined copy of Text.Effect.Composition.Operation(v33[0], v10, v12, v11, v13, v14, v16, v15);
      uint64_t v20 = v6;
      char v21 = closure #1 in Text.Effect.Composition.useSharedDrawing(context:)(v33, a2, a3, a4, a5);
      outlined consume of Text.Effect.Composition.Operation(v9, v10, v29, v34, v32, v31, v16, v30);
      if (v20)
      {
        swift_bridgeObjectRelease();
        return v22 & 1;
      }
      if (v21) {
        break;
      }
      v8 += 11;
      uint64_t v7 = v28 - 1;
      uint64_t v6 = 0;
      if (v28 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    char v22 = 1;
  }
  else
  {
LABEL_7:
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t specialized TextEffectsAnimationController.TimingMap.update(_:body:)(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6 = *a2;
  if (*(void *)(*a2 + 16))
  {
    uint64_t v12 = result;
    Swift::Int result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if (v13)
    {
      uint64_t v14 = *(void *)(v6 + 56) + 120 * result;
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(v14 + 8);
      uint64_t v34 = *(void *)(v14 + 16);
      uint64_t v35 = v12;
      char v32 = *(unsigned char *)(v14 + 25);
      char v33 = *(unsigned char *)(v14 + 24);
      uint64_t v31 = *(void *)(v14 + 32);
      char v30 = *(unsigned char *)(v14 + 40);
      uint64_t v17 = *(void *)(v14 + 56);
      uint64_t v18 = *(void *)(v14 + 64);
      uint64_t v19 = *(void *)(v14 + 72);
      char v20 = *(unsigned char *)(v14 + 80);
      uint64_t v21 = *(void *)(v14 + 88);
      uint64_t v29 = *(void *)(v14 + 48);
      uint64_t v27 = a4;
      uint64_t v28 = a5;
      uint64_t v23 = *(void *)(v14 + 96);
      uint64_t v22 = *(void *)(v14 + 104);
      uint64_t v26 = a3;
      char v24 = *(unsigned char *)(v14 + 112);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v18, v19, v20);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v23, v22, v24);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v26, v27, v28, a6 & 1);
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v18, v19, v20);
      v37[0] = v15;
      v37[1] = v16;
      v37[2] = v34;
      char v38 = v33;
      char v39 = v32;
      uint64_t v40 = v31;
      char v41 = v30;
      uint64_t v42 = v29;
      uint64_t v43 = v26;
      uint64_t v44 = v27;
      uint64_t v45 = v28;
      char v46 = a6 & 1;
      uint64_t v47 = v21;
      uint64_t v48 = v23;
      uint64_t v49 = v22;
      char v50 = v24;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v26, v27, v28, a6 & 1);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v23, v22, v24);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = *a2;
      *a2 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v37, v35, isUniquelyReferenced_nonNull_native);
      *a2 = v36;
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v26, v27, v28, a6 & 1);
      return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v23, v22, v24);
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void v38[3];
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t vars8;

  uint64_t v6 = *a2;
  if (*(void *)(*a2 + 16))
  {
    uint64_t v12 = result;
    Swift::Int result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if (v13)
    {
      uint64_t v14 = *(void *)(v6 + 56) + 120 * result;
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(v14 + 8);
      uint64_t v36 = *(void *)(v14 + 16);
      uint64_t v34 = *(unsigned char *)(v14 + 25);
      uint64_t v35 = *(unsigned char *)(v14 + 24);
      char v33 = *(void *)(v14 + 32);
      char v32 = *(unsigned char *)(v14 + 40);
      uint64_t v28 = a5;
      uint64_t v29 = a4;
      uint64_t v17 = *(void *)(v14 + 56);
      char v30 = *(void *)(v14 + 48);
      uint64_t v31 = v12;
      uint64_t v27 = a3;
      uint64_t v19 = *(void *)(v14 + 64);
      uint64_t v18 = *(void *)(v14 + 72);
      char v20 = *(unsigned char *)(v14 + 80);
      uint64_t v21 = *(void *)(v14 + 88);
      uint64_t v22 = *(void *)(v14 + 96);
      uint64_t v23 = *(void *)(v14 + 104);
      char v24 = *(unsigned char *)(v14 + 112);
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v19, v18, v20);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v22, v23, v24);
      uint64_t v25 = a6 & 1;
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v27, v29, v28, v25);
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v22, v23, v24);
      v38[0] = v15;
      v38[1] = v16;
      v38[2] = v36;
      char v39 = v35;
      uint64_t v40 = v34;
      char v41 = v33;
      uint64_t v42 = v32;
      uint64_t v43 = v30;
      uint64_t v44 = v17;
      uint64_t v45 = v19;
      char v46 = v18;
      uint64_t v47 = v20;
      uint64_t v48 = v27;
      uint64_t v49 = v29;
      char v50 = v28;
      uint64_t v51 = v25;
      swift_retain();
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v19, v18, v20);
      outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v27, v29, v28, v25);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      long long v37 = *a2;
      *a2 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v38, v31, isUniquelyReferenced_nonNull_native);
      *a2 = v37;
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v19, v18, v20);
      return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v27, v29, v28, v25);
    }
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  uint64_t v20 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
  int64_t v19 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    Swift::UInt64 v14 = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    uint64_t v24 = *(void *)(a2 + v20);
    uint64_t v15 = TextEffectsAnimationController.state(for:time:)(v14, (double *)&v24, (uint64_t)v21);
    uint64_t v16 = v23;
    if ((v21[56] & 0xFE) == 2
      || v22 && (uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 120))(v15), (v15 & 1) != 0))
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
LABEL_29:
      swift_release();
      return 1;
    }
    if (v16)
    {
      char v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 120))(v15);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      if (v17) {
        goto LABEL_29;
      }
    }
    else
    {
      swift_release();
      swift_release();
      uint64_t result = swift_release();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v11 >= v19) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v19) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v19) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v19) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v19)
  {
LABEL_30:
    swift_release();
    return 0;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v13);
  int64_t v8 = v13;
  if (v12)
  {
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v19) {
      goto LABEL_30;
    }
    unint64_t v12 = *(void *)(v18 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void specialized RawTextLayout.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v28 = a1;
    uint64_t v29 = a2;
    if (v6) {
      goto LABEL_3;
    }
LABEL_16:
    int64_t v8 = (void *)MEMORY[0x263F8EE78];
LABEL_17:
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_layoutFragmentFrame);
    *uint64_t v29 = v8;
    v29[1] = v24;
    v29[2] = v25;
    v29[3] = v26;
    v29[4] = v27;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  id v28 = a1;
  uint64_t v29 = a2;
  if (!v6) {
    goto LABEL_16;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    int64_t v8 = (void *)MEMORY[0x263F8EE78];
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x24C523D60](v7, v5);
      }
      else {
        id v11 = *(id *)(v5 + 8 * v7 + 32);
      }
      unint64_t v10 = v11;
      objc_msgSend(v11, sel_typographicBounds, v28);
      double v13 = v12;
      double v15 = v14;
      objc_msgSend(v10, sel_glyphOrigin);
      double v17 = v16;
      double v19 = v18;
      id v20 = (id)_NSTextLineFragmentGetCTLine(v10);
      if (v20)
      {
        id v21 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v23 = v8[2];
        unint64_t v22 = v8[3];
        if (v23 >= v22 >> 1) {
          int64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v8);
        }
        v8[2] = v23 + 1;
        unint64_t v9 = (double *)&v8[3 * v23];
        *((void *)v9 + 4) = v21;
        v9[5] = v13 + v17;
        v9[6] = v15 + v19;

        unint64_t v10 = v21;
      }
      ++v7;
    }
    while (v6 != v7);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t specialized TextRenderLayer.draw(line:glyphOrigin:ranges:in:_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = a5;
  long long v37 = a3;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  int v13 = *((unsigned __int8 *)a1 + 16);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  int v16 = *((_DWORD *)a1 + 10);
  _sypSgWObTm_1(a4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v44, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v44, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v45);
  if (result != 1)
  {
    int v35 = v16;
    uint64_t v18 = TextRenderLayer.textMarkers(for:)(a2);
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v34 = v11;
      uint64_t v38 = v11;
      uint64_t v39 = v12;
      uint64_t v20 = v12;
      int v33 = v13;
      char v40 = v13;
      uint64_t v41 = v14;
      uint64_t v42 = v15;
      int v13 = v35;
      int v43 = v35;
      uint64_t v21 = type metadata accessor for Text.Effect.InteractionMetrics();
      uint64_t v22 = *(void *)(v21 - 8);
      unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      uint64_t v31 = v22 + 56;
      char v32 = v23;
      v23(v10, 1, 1, v21);
      uint64_t v24 = swift_bridgeObjectRetain();
      uint64_t v25 = v37;
      TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(v24, (uint64_t)&v38, a2, (uint64_t)v10, v37);
      uint64_t v26 = a2;
      uint64_t v27 = v25;
      LOBYTE(v25) = v28;
      swift_bridgeObjectRelease();
      _sypSgWOhTm_1((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
      closure #1 in closure #1 in closure #1 in TextRunsLayer.draw(in:)(v27, v36);
      if (v25)
      {
        swift_bridgeObjectRelease();
        a2 = v26;
        LOBYTE(v13) = v33;
      }
      else
      {
        uint64_t v38 = v34;
        uint64_t v39 = v20;
        char v29 = v33;
        char v40 = v33;
        uint64_t v41 = v14;
        uint64_t v42 = v15;
        int v43 = v13;
        v32(v10, 1, 1, v21);
        TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(v19, (uint64_t)&v38, v26, (uint64_t)v10, v27);
        swift_bridgeObjectRelease();
        _sypSgWOhTm_1((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
        a2 = v26;
        LOBYTE(v13) = v29;
      }
      uint64_t v11 = v34;
    }
    else
    {
      closure #1 in closure #1 in closure #1 in TextRunsLayer.draw(in:)(v37, v36);
      uint64_t v20 = v12;
    }
    uint64_t v38 = v11;
    uint64_t v39 = v20;
    char v40 = v13;
    uint64_t v41 = v14;
    uint64_t v42 = v15;
    int v43 = v35;
    uint64_t v30 = type metadata accessor for Text.Effect.InteractionMetrics();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v10, 1, 1, v30);
    TextRenderLayer.drawCorrectionMarkers(line:glyphOrigin:ranges:metrics:in:)((uint64_t)&v38, a2, (uint64_t)v10, v37);
    return _sypSgWOhTm_1((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  }
  return result;
}

void specialized TextRenderLayer.drawContent(_:)(char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t isEscapingClosureAtFileLocation = a2;
  v21[2] = a2;
  v21[3] = a3;
  uint64_t v6 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController];
  swift_beginAccess();
  if (*(void *)(*(void *)(v6 + 112) + 56) == *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v9 = MEMORY[0x24C527E00](v7 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v9)
        {
          unint64_t v10 = (void *)v9;
          uint64_t v11 = (void *)MEMORY[0x24C527E00](v9 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v11)
          {
            uint64_t v3 = (uint64_t *)swift_allocObject();
            v3[2] = (uint64_t)partial apply for closure #1 in StaticEffectLayer.draw(in:);
            v3[3] = (uint64_t)v21;
            *((void *)&v25 + 1) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            uint64_t v26 = v3;
            uint64_t aBlock = (void *)MEMORY[0x263EF8330];
            uint64_t v23 = 1107296256;
            uint64_t v24 = thunk for @escaping @callee_guaranteed () -> ();
            *(void *)&long long v25 = &block_descriptor_122;
            uint64_t v12 = _Block_copy(&aBlock);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v11, v8, v12);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v12);
            uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0) {
              return;
            }
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    id v13 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_superlayer);
    if (v13)
    {
      uint64_t v14 = v13;
      type metadata accessor for TextRenderLayer(0);
      if (swift_dynamicCastClass())
      {
        uint64_t v15 = *(void **)(isEscapingClosureAtFileLocation
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                       + 24);
        uint64_t v16 = *(void *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 32);
        char v17 = *(unsigned char *)(isEscapingClosureAtFileLocation
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                       + 40);
        int v18 = *(_DWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 64);
        uint64_t v19 = *(void *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 88);
        uint64_t aBlock = v15;
        uint64_t v23 = v16;
        LOBYTE(v24) = v17;
        long long v25 = *(_OWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 48);
        LODWORD(v26) = v18;
        long long v27 = *(_OWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                        + 72);
        uint64_t v28 = v19;
        uint64_t v20 = *(void *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_segmentIndex);
        outlined copy of Text.Layout.Line.Line(v15, v16, v17);
        swift_bridgeObjectRetain();
        TextRenderLayer.draw(composition:segmentIndex:in:)((uint64_t)&aBlock, v20, v3);

        outlined consume of Text.Layout.Line.Line(v15, v16, v17);
        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
  }
}

{
  uint64_t *v3;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void v21[4];
  void *aBlock;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  long long v25;
  uint64_t *v26;
  long long v27;
  uint64_t v28;

  uint64_t v3 = a3;
  uint64_t isEscapingClosureAtFileLocation = a2;
  v21[2] = a2;
  v21[3] = a3;
  uint64_t v6 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController];
  swift_beginAccess();
  if (*(void *)(*(void *)(v6 + 112) + 56) == *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v9 = MEMORY[0x24C527E00](v7 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v9)
        {
          unint64_t v10 = (void *)v9;
          uint64_t v11 = (void *)MEMORY[0x24C527E00](v9 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v11)
          {
            uint64_t v3 = (uint64_t *)swift_allocObject();
            v3[2] = (uint64_t)partial apply for closure #1 in DynamicEffectLayer.draw(in:);
            v3[3] = (uint64_t)v21;
            *((void *)&v25 + 1) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            uint64_t v26 = v3;
            uint64_t aBlock = (void *)MEMORY[0x263EF8330];
            uint64_t v23 = 1107296256;
            uint64_t v24 = thunk for @escaping @callee_guaranteed () -> ();
            *(void *)&long long v25 = &block_descriptor_148;
            uint64_t v12 = _Block_copy(&aBlock);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v11, v8, v12);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v12);
            uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0) {
              return;
            }
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    id v13 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_superlayer);
    if (v13)
    {
      uint64_t v14 = v13;
      type metadata accessor for TextRenderLayer(0);
      if (swift_dynamicCastClass())
      {
        uint64_t v15 = *(void **)(isEscapingClosureAtFileLocation
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                       + 24);
        uint64_t v16 = *(void *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 32);
        char v17 = *(unsigned char *)(isEscapingClosureAtFileLocation
                       + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                       + 40);
        int v18 = *(_DWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 64);
        uint64_t v19 = *(void *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 88);
        uint64_t aBlock = v15;
        uint64_t v23 = v16;
        LOBYTE(v24) = v17;
        long long v25 = *(_OWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 48);
        LODWORD(v26) = v18;
        long long v27 = *(_OWORD *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                        + 72);
        uint64_t v28 = v19;
        uint64_t v20 = *(void *)(isEscapingClosureAtFileLocation
                        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_segmentIndex);
        outlined copy of Text.Layout.Line.Line(v15, v16, v17);
        swift_bridgeObjectRetain();
        TextRenderLayer.draw(composition:segmentIndex:in:)((uint64_t)&aBlock, v20, v3);

        outlined consume of Text.Layout.Line.Line(v15, v16, v17);
        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
  }
}

uint64_t specialized TextRenderLayer.drawContent(_:)(char *a1, CGContext *a2, CGContext *a3, uint64_t a4)
{
  uint64_t isEscapingClosureAtFileLocation = a4;
  unint64_t v5 = a3;
  uint64_t v6 = a2;
  v23[2] = a2;
  v23[3] = a3;
  v23[4] = a4;
  uint64_t v8 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController];
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v8 + 112) + 56) == *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      uint64_t v10 = swift_dynamicCastClass();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v12 = MEMORY[0x24C527E00](v10 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v12)
        {
          id v13 = (void *)v12;
          uint64_t v14 = (void *)MEMORY[0x24C527E00](v12 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v14)
          {
            uint64_t v6 = (CGContext *)swift_allocObject();
            *((void *)v6 + 2) = partial apply for closure #1 in TextLinesLayer.draw(in:);
            *((void *)v6 + 3) = v23;
            aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            long long v25 = v6;
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = &block_descriptor_162;
            uint64_t v15 = _Block_copy(aBlock);
            unint64_t v5 = v25;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v14, v11, v15);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v15);
            uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            uint64_t result = swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0) {
              return result;
            }
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    [(CGContext *)v5 contentsScale];
    uint64_t v17 = v16;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v18 = one-time initialization token for shared;
    uint64_t v19 = v5;
    id v20 = (id)isEscapingClosureAtFileLocation;
    if (v18 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v21 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v22 = static CoreGlue2.shared;
    v21(&v27);

    v26[0] = v27;
    v26[1] = v28;
    specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v6, v26, v17, 0, (uint64_t)v19, (uint64_t)v20);

    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized TextRenderLayer.drawContent(_:)(char *a1, CGContext *a2, uint64_t a3, CGContext *a4)
{
  id v4 = a4;
  uint64_t isEscapingClosureAtFileLocation = a3;
  uint64_t v6 = a2;
  v23[2] = a2;
  v23[3] = a3;
  v23[4] = a4;
  uint64_t v8 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController];
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v8 + 112) + 56) == *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      uint64_t v10 = swift_dynamicCastClass();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v12 = MEMORY[0x24C527E00](v10 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v12)
        {
          id v13 = (void *)v12;
          uint64_t v14 = (void *)MEMORY[0x24C527E00](v12 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v14)
          {
            uint64_t v6 = (CGContext *)swift_allocObject();
            *((void *)v6 + 2) = partial apply for closure #1 in TextRunsLayer.draw(in:);
            *((void *)v6 + 3) = v23;
            aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            long long v25 = v6;
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = &block_descriptor_155;
            uint64_t v15 = _Block_copy(aBlock);
            id v4 = v25;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v14, v11, v15);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v15);
            uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            uint64_t result = swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0) {
              return result;
            }
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    objc_msgSend((id)isEscapingClosureAtFileLocation, sel_contentsScale);
    uint64_t v17 = v16;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v18 = one-time initialization token for shared;
    uint64_t v19 = v4;
    id v20 = (id)isEscapingClosureAtFileLocation;
    if (v18 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v21 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v22 = static CoreGlue2.shared;
    v21(&v27);

    v26[0] = v27;
    v26[1] = v28;
    specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v6, (uint64_t)v26, v17, 0, (uint64_t)v19, v20);

    swift_release();
    return swift_release();
  }
  return result;
}

void specialized TextRenderLayer.drawContent(_:)(char *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  id v4 = a2;
  v15[2] = a2;
  v15[3] = a3;
  uint64_t v6 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController];
  swift_beginAccess();
  if (*(void *)(*(void *)(v6 + 112) + 56) == *(void *)&a1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version])
  {
    if (objc_msgSend(a1, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v9 = MEMORY[0x24C527E00](v7 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v9)
        {
          uint64_t v10 = (void *)v9;
          uint64_t v11 = (void *)MEMORY[0x24C527E00](v9 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);

          if (v11)
          {
            uint64_t v3 = (uint64_t *)swift_allocObject();
            v3[2] = (uint64_t)partial apply for closure #1 in SharedDynamicLayer.draw(in:);
            v3[3] = (uint64_t)v15;
            aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
            void aBlock[5] = v3;
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = &block_descriptor_141;
            id v4 = _Block_copy(aBlock);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_release();
            _NSTextCustomRenderingDelegateWillDraw(v11, v8, v4);
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease_n();
            _Block_release(v4);
            char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0) {
              return;
            }
            __break(1u);
          }
        }
      }
      swift_unknownObjectRelease();
    }
    id v13 = objc_msgSend(v4, sel_superlayer);
    if (v13)
    {
      uint64_t v14 = v13;
      type metadata accessor for TextRenderLayer(0);
      if (swift_dynamicCastClass()) {
        TextRenderLayer.drawShared(in:)(v3);
      }
    }
  }
}

void specialized Text.Effect.KeyframeSequence.gather(into:fragment:layout:attributedString:map:segmentation:)(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, CFIndex a7, uint64_t a8)
{
  uint64_t v69 = *(void *)(a8 + 16);
  if (!v69) {
    return;
  }
  uint64_t v62 = *(void **)a3;
  char v61 = *(unsigned char *)(a3 + 8);
  uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16);
  uint64_t v68 = a8 + 32;
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  uint64_t v64 = a6;
  CFIndex v65 = a7;
  uint64_t v63 = a5;
  while (1)
  {
    uint64_t v16 = v68 + 24 * v11;
    uint64_t v18 = *(void *)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    unsigned __int8 v19 = *(unsigned char *)(v16 + 16);
    uint64_t v76 = v17;
    unsigned __int8 v75 = v19;
    if (v11) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = v62;
    swift_bridgeObjectRetain();
    CFAttributedStringRef v13 = a4;
    char v14 = v61;
    uint64_t v15 = v60;
LABEL_4:
    ++v11;
    uint64_t aBlock = v12;
    LOBYTE(v80) = v14;
    uint64_t v81 = v15;
    specialized static Text.Effect.KeyframeLayout.gather(keyframes:entry:from:attributedString:segmentation:map:id:)(a1, v18, (uint64_t *)&aBlock, v13, a5, a6, a7, v76, v75);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (v11 == v69)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  id v20 = (objc_class *)type metadata accessor for TextEffectKeyframeBox();
  uint64_t v21 = (char *)objc_allocWithZone(v20);
  uint64_t v22 = &v21[OBJC_IVAR____TtC7SwiftUI21TextEffectKeyframeBox_entry];
  *(void *)uint64_t v22 = v18;
  *((void *)v22 + 1) = v17;
  v22[16] = v19;
  v85.receiver = v21;
  v85.super_class = v20;
  uint64_t v73 = v18;
  swift_bridgeObjectRetain_n();
  id v71 = objc_msgSendSuper2(&v85, sel_init);
  id v23 = _NSTextLayoutFragmentLayoutFragmentWithKeyframe(a2, v71);
  type metadata accessor for TextLayoutFragmentRenderer();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  id v74 = v23;
  id v25 = objc_msgSend(v74, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v78 = v26;
  if (!(v26 >> 62))
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v72 = v11;
    if (v27) {
      goto LABEL_8;
    }
LABEL_26:
    uint64_t v54 = v74;

    swift_release();
    uint64_t v28 = 0;
    uint64_t v12 = (void *)MEMORY[0x263F8EE78];
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12[2];
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v28);
    id v55 = objc_msgSend(v54, sel_textLineFragments);
    unint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = v73;
    if (v56 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v11 = v72;
      if (v59) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v11 = v72;
      if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_29:
        if ((v56 & 0xC000000000000001) != 0)
        {
          id v57 = (id)MEMORY[0x24C523D60](0, v56);
        }
        else
        {
          if (!*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_41;
          }
          id v57 = *(id *)(v56 + 32);
        }
        uint64_t v58 = v57;
        swift_bridgeObjectRelease();
        CFAttributedStringRef v13 = (const __CFAttributedString *)objc_msgSend(v58, sel_attributedString);

        goto LABEL_35;
      }
    }

    swift_bridgeObjectRelease();
    CFAttributedStringRef v13 = a4;
LABEL_35:
    char v14 = 0;
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v72 = v11;
  if (!v27) {
    goto LABEL_26;
  }
LABEL_8:
  uint64_t v77 = v27;
  if (v27 < 1) {
    goto LABEL_40;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v31 = v27;
  unint64_t v30 = v78;
  uint64_t v12 = (void *)MEMORY[0x263F8EE78];
  while (2)
  {
    if ((v78 & 0xC000000000000001) != 0) {
      id v34 = (id)MEMORY[0x24C523D60](v29, v30);
    }
    else {
      id v34 = *(id *)(v30 + 8 * v29 + 32);
    }
    int v33 = v34;
    objc_msgSend(v34, sel_typographicBounds);
    double v36 = v35;
    double v38 = v37;
    objc_msgSend(v33, sel_glyphOrigin);
    double v40 = v39;
    double v42 = v41;
    id v43 = (id)_NSTextLineFragmentGetCTLine(v33);
    if (!v43)
    {
LABEL_11:
      ++v29;

      if (v31 == v29)
      {
        uint64_t v54 = v74;

        swift_release();
        a6 = v64;
        a7 = v65;
        a5 = v63;
        goto LABEL_27;
      }
      continue;
    }
    break;
  }
  id v44 = v43;
  id v45 = _NSTextLineFragmentGetOverridesHandler(v33);
  if (!v45)
  {

LABEL_20:
    id v51 = v44;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    uint64_t v31 = v77;
    unint64_t v53 = v12[2];
    unint64_t v52 = v12[3];
    if (v53 >= v52 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v12);
    }
    void v12[2] = v53 + 1;
    char v32 = &v12[6 * v53];
    v32[4] = v51;
    v32[5] = v24;
    *((unsigned char *)v32 + 48) = 0;
    *((double *)v32 + 7) = v36 + v40;
    *((double *)v32 + 8) = v38 + v42;
    *((_DWORD *)v32 + 18) = 0;

    int v33 = v51;
    unint64_t v30 = v78;
    goto LABEL_11;
  }
  id v46 = v45;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v46;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v28);
  uint64_t v48 = swift_allocObject();
  uint64_t v28 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
  *(void *)(v48 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
  *(void *)(v48 + 24) = v47;
  uint64_t v83 = partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
  uint64_t v84 = v48;
  uint64_t aBlock = (void *)MEMORY[0x263EF8330];
  uint64_t v80 = 1107296256;
  uint64_t v81 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
  char v82 = &block_descriptor_103;
  uint64_t v49 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t CopyWithAttributeOverrides = CTLineCreateCopyWithAttributeOverrides();

  _Block_release(v49);
  LOBYTE(v49) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v49 & 1) == 0)
  {
    id v44 = (id)CopyWithAttributeOverrides;
    goto LABEL_20;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

void specialized TextRenderLayer.init(coder:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment] = 0;
  uint64_t v1 = (uint64_t)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout];
  _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v10);
  _sypSgWObTm_1((uint64_t)v10, v1, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_rawLayout];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((void *)v2 + 4) = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] = 0;
  uint64_t v3 = MEMORY[0x263F8EE80];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_interactionMetrics] = MEMORY[0x263F8EE80];
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers] = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectToSegmentsIndices] = v3;
  uint64_t v5 = MEMORY[0x263F8EE88];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectIdentifiers] = MEMORY[0x263F8EE88];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version] = -1;
  RangeSet.init()();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements] = v4;
  uint64_t v6 = &v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
  _OWORD *v6 = 0u;
  v6[1] = 0u;
  uint64_t v7 = &v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets];
  _OWORD *v7 = 0u;
  v7[1] = 0u;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutLineFragmentPadding] = 0;
  uint64_t v8 = &v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement];
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_activeIdentifiers] = v5;
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
  *(CFTimeInterval *)&v0[v9] = CACurrentMediaTime();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized Collection.prefix(while:)(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a4;
  uint64_t v27 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v27);
  uint64_t v26 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x270FA5388](v30);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v25 - v13;
  if (a1 == a2) {
    return;
  }
  uint64_t v25 = v4;
  uint64_t v15 = *(void *)(a3 + 32);
  uint64_t v16 = v15 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  unint64_t v17 = *(void *)(v15 + 16);
  if (v17 <= a1) {
    unint64_t v18 = a1;
  }
  else {
    unint64_t v18 = v17;
  }
  if (a2 <= a1) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = a2;
  }
  uint64_t v28 = v19;
  uint64_t v29 = v16;
  uint64_t v20 = a1;
  do
  {
    if (v18 == v20)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v21 = v12;
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v29 + *(void *)(v12 + 72) * v20, (uint64_t)v14, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)v14, (uint64_t)v10, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v23 = v26;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v10, v26, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        uint64_t v24 = *(void *)(v23 + *(int *)(v27 + 28));
        outlined destroy of Text.Effect.RenderSegmentation.Segment(v23, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        goto LABEL_16;
      }
      uint64_t v24 = *(void *)v10;
      outlined consume of Text.Layout.Line.Line(*((void **)v10 + 3), *((void *)v10 + 4), v10[40]);
    }
    else
    {
      uint64_t v24 = *((void *)v10 + 2);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_16:
    outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v14, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (v24 != v31) {
      goto LABEL_21;
    }
    if (a2 < a1) {
      goto LABEL_24;
    }
    if (v28 == v20) {
      goto LABEL_25;
    }
    ++v20;
    uint64_t v12 = v21;
  }
  while (a2 != v20);
  uint64_t v20 = a2;
LABEL_21:
  if (v20 >= a1) {
    return;
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized TextEffectsAnimationController.TimingMap.update(at:)(double *a1, uint64_t a2)
{
  double v3 = *a1;
  uint64_t v19 = MEMORY[0x263F8EE88];
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_21:
    uint64_t v16 = *(void *)(a2 + 56) + 120 * v12;
    if ((*(unsigned char *)(v16 + 24) & 1) == 0)
    {
      if (*(unsigned char *)(v16 + 40))
      {
        double v17 = v3;
        if (*(unsigned char *)(v16 + 40) == 1) {
          goto LABEL_4;
        }
      }
      else
      {
        double v17 = *(double *)(v16 + 32);
      }
      if (*(double *)(v16 + 16) <= v17 - *(double *)(v16 + 8)) {
LABEL_4:
      }
        uint64_t result = specialized Set._Variant.insert(_:)(&v18, *(void *)(*(void *)(a2 + 48) + 8 * v12));
    }
  }
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= v8) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  ++v10;
  if (v14) {
    goto LABEL_20;
  }
  int64_t v10 = v13 + 1;
  if (v13 + 1 >= v8) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v10 = v13 + 2;
  if (v13 + 2 >= v8) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_21;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_28:
    swift_release();
    return v19;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_28;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = (unint64_t *)result;
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  unint64_t v11 = (uint64_t *)(a4 + 80);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  while (2)
  {
    uint64_t v26 = v5;
    while (1)
    {
      if (v10)
      {
        unint64_t v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v6 << 6);
      }
      else
      {
        int64_t v15 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        if (v15 >= v12) {
          goto LABEL_27;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v15);
        ++v6;
        if (!v16)
        {
          int64_t v6 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_27;
          }
          unint64_t v16 = *(void *)(v7 + 8 * v6);
          if (!v16)
          {
            int64_t v6 = v15 + 2;
            if (v15 + 2 >= v12) {
              goto LABEL_27;
            }
            unint64_t v16 = *(void *)(v7 + 8 * v6);
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v12)
              {
LABEL_27:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v25, a2, v26, a3);
              }
              unint64_t v16 = *(void *)(v7 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  int64_t v6 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_29;
                  }
                  if (v6 >= v12) {
                    goto LABEL_27;
                  }
                  unint64_t v16 = *(void *)(v7 + 8 * v6);
                  ++v17;
                  if (v16) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v6 = v17;
            }
          }
        }
LABEL_22:
        unint64_t v10 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v6 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(a3 + 48) + 8 * v14);
      swift_beginAccess();
      uint64_t v19 = *v11;
      if (!*(void *)(*v11 + 16)) {
        break;
      }
      uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
      if ((v21 & 1) == 0) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
      uint64_t v23 = swift_endAccess();
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 96))(v23);
      if (result) {
        goto LABEL_5;
      }
    }
    uint64_t result = swift_endAccess();
LABEL_5:
    *(unint64_t *)((char *)v25 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v5 = v26 + 1;
    if (!__OFADD__(v26, 1)) {
      continue;
    }
    break;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v14[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v11 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    int64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    uint64_t v11 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v12, v8, a1, a2);
    swift_release();
    swift_release();
    MEMORY[0x24C527CC0](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

void type metadata accessor for (key: UUID, value: TextRenderSurface)()
{
  if (!lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface))
  {
    type metadata accessor for UUID();
    type metadata accessor for TextRenderSurface();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface));
    }
  }
}

void type metadata accessor for (key: UUID, value: TextRenderSurface)?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined retain of TextRenderLayer.Layout(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t outlined consume of Text.Effect.Composition.Operation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (!(a8 >> 62))
  {
    outlined consume of Text.Layout.Line.Line(a3, a4, a5 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of Text.Effect.Composition.Operation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (!(a8 >> 62))
  {
    outlined copy of Text.Layout.Line.Line(a3, a4, a5 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void outlined consume of TextRenderLayer.Layout?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void type metadata accessor for RangeSet<Int><>.IndexSequence(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, void, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v7 = a3(a1, MEMORY[0x263F8D6C8], MEMORY[0x263F8D708], v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined destroy of RangeSet<Int><>.IndexSequence.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, void, unint64_t))
{
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

id outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(id result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  switch(a11 >> 5)
  {
    case 0:
      char v11 = a3 & 1;
      uint64_t result = outlined copy of Text.Layout.Line.Line(result, a2, v11);
      break;
    case 1:
      id v12 = result;
      swift_retain();
      uint64_t result = v12;
      goto LABEL_6;
    case 2:
      uint64_t result = (id)outlined copy of Path.Storage((uint64_t)result, a2, a3, a4, a5);
      break;
    case 3:
LABEL_6:
      uint64_t result = result;
      break;
    case 4:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined retain of Text.Effect.ResolvedDrawing.Operation(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 80);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v4);
  return a1;
}

void outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  switch(a11 >> 5)
  {
    case 0:
      char v11 = a3 & 1;
      outlined consume of Text.Layout.Line.Line(a1, a2, v11);
      break;
    case 1:

      swift_release();
      break;
    case 2:
      outlined consume of Path.Storage((uint64_t)a1, a2, a3, a4, a5);
      break;
    case 3:

      break;
    case 4:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

void *outlined release of TextRenderLayer.Layout?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

id outlined copy of TextRenderLayer.Layout?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a18;
  }
  return result;
}

uint64_t sub_245B7BDD8()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of Text.Effect.MarkerLayoutInfo.Element(uint64_t a1)
{
  return a1;
}

uint64_t sub_245B7BE98()
{
  outlined consume of Text.Effect.Markers.MarkerType(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  if (*(void *)(v0 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined consume of Text.Effect.Markers.MarkerType(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

double partial apply for closure #1 in TextRenderLayer.markedTextBounds(line:glyphOrigin:ranges:metrics:)()
{
  double v1 = *(double *)(v0 + 96);
  swift_beginAccess();
  return v1;
}

void type metadata accessor for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>)()
{
  if (!lazy cache variable for type metadata for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>))
  {
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(255, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], MEMORY[0x263F8D1A0]);
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8D870]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>));
    }
  }
}

void type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>)
  {
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
    lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges()
{
  unint64_t result = lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_4(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

uint64_t outlined copy of Text.Effect.Markers.MarkerType(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void outlined copy of TextEffectsAnimationController.Timing?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a7 != 1)
  {
    swift_retain();
    outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(a8, a9, a10, a11 & 1);
    outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(a12, a13, a14, a15 & 1);
  }
}

void outlined consume of TextEffectsAnimationController.Timing?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a7 != 1)
  {
    swift_release();
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(a8, a9, a10, a11 & 1);
    outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(a12, a13, a14, a15 & 1);
  }
}

uint64_t outlined init with take of Text.Effect.Phase.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_245B7C3E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned _NSTextAnimator) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment))
  {
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
    }
  }
}

void type metadata accessor for (UUID, NSTextLayoutFragment)()
{
  if (!lazy cache variable for type metadata for (UUID, NSTextLayoutFragment))
  {
    type metadata accessor for UUID();
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UUID, NSTextLayoutFragment));
    }
  }
}

uint64_t outlined init with take of (key: UUID, value: TextRenderSurface)?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

BOOL partial apply for specialized closure #1 in RangeSet.contains(_:)(void *a1)
{
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  return v4 >= *a1 && a1[1] >= v3;
}

void type metadata accessor for TextRenderLayer.Layout?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined release of Text.Effect.RenderSegmentation.StaticLines(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for thunk for @callee_unowned @convention(block) (@unowned NSTextRange?, @unowned CGRect, @unowned CGFloat, @unowned NSTextContainer) -> (@unowned ObjCBool)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_245B7C640()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t specialized TextEffectsRenderer.updateKeyframes(with:)(char *a1, uint64_t a2)
{
  uint64_t v105 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v98 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v129 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v98 - v11);
  MEMORY[0x270FA5388](v12);
  char v121 = (char *)&v98 - v13;
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (unint64_t)&v98 - v15;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v17 - 8);
  id v128 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  Swift::String v127 = (char *)&v98 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v99 = (uint64_t)&v98 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v103 = (char *)&v98 - v24;
  type metadata accessor for (NSTextLayoutFragment, UUID)();
  uint64_t v131 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v120 = (char **)((char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v27);
  int v122 = (char *)&v98 - v28;
  uint64_t v29 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion] + 1;
  uint64_t v106 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion;
  *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion] = v29;
  type metadata accessor for Text.Effect.Keyframes.Storage();
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = MEMORY[0x263F8EE88];
  v30[5] = MEMORY[0x263F8EE88];
  uint64_t v32 = MEMORY[0x263F8EE80];
  v30[6] = MEMORY[0x263F8EE80];
  v30[2] = v32;
  v30[3] = v32;
  v30[4] = v32;
  swift_beginAccess();
  v30[5] = v31;
  swift_bridgeObjectRelease();
  v30[7] = v29;
  Swift::String v136 = v30;
  unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v100 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  unint64_t v34 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments];
  unint64_t v134 = v33;
  uint64_t v135 = 0;
  uint64_t v104 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  uint64_t v112 = a1;
  double v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs];
  if (v34 >> 62)
  {
LABEL_47:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v36 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v119 = v3;
  uint64_t v130 = v4;
  uint64_t v37 = (uint64_t)v128;
  if (v36)
  {
    unint64_t v98 = v16;
    int v111 = 0;
    unint64_t v16 = 0;
    uint64_t v126 = v35;
    unint64_t v125 = *((void *)v35 + 2);
    double v114 = &v112[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap];
    unint64_t v124 = v34 & 0xC000000000000001;
    uint64_t v118 = (char *)(v4 + 16);
    uint64_t v123 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    uint64_t v117 = (void (**)(char *, uint64_t))(v4 + 48);
    double v35 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    double v113 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v102 = v6;
    uint64_t v101 = v9;
    unint64_t v116 = v34;
    uint64_t v115 = v36;
    while (1)
    {
      id v38 = v124 ? (id)MEMORY[0x24C523D60](v16, v34) : *(id *)(v34 + 8 * v16 + 32);
      double v39 = v38;
      if (v125 == v16) {
        break;
      }
      if (v16 >= *((void *)v126 + 2))
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v37, (unint64_t)v126+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v16, v3);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v37, 0, 1, v3);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v37, 1, v3) == 1) {
        goto LABEL_18;
      }
      double v40 = *(void (**)(char *, uint64_t, uint64_t))v35;
      (*(void (**)(char *, uint64_t, uint64_t))v35)(v9, v37, v3);
      uint64_t v41 = *(int *)(v131 + 48);
      double v42 = v122;
      id v43 = &v122[v41];
      *(void *)int v122 = v39;
      v40(&v42[v41], (uint64_t)v9, v3);
      v40(v6, (uint64_t)v43, v3);
      id v44 = v114;
      swift_beginAccess();
      uint64_t v45 = *(void *)v44;
      if (*(void *)(v45 + 16) && (unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v47 & 1) != 0))
      {
        uint64_t v48 = *(void **)(*(void *)(v45 + 56) + 8 * v46);
        swift_endAccess();
        uint64_t v49 = *v113;
        char v50 = v48;
        id v110 = v50;
        v49(v6, v3);
        uint64_t v51 = v134;
        uint64_t v52 = v135;
        uint64_t v53 = *(void *)&v112[v106];
        uint64_t v54 = *(void **)&v50[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        swift_bridgeObjectRetain();
        id v55 = v54;
        TextRenderLayer.update(with:baseFragmentIdentifierMap:version:)(v39, v51, v52, v53, (uint64_t)v132);
        uint64_t v56 = v132[1];
        uint64_t v108 = v132[0];
        uint64_t v58 = v132[2];
        uint64_t v57 = v132[3];
        uint64_t v59 = v132[4];
        uint64_t v60 = v132[5];
        uint64_t v107 = v132[6];
        int v109 = v133;
        swift_bridgeObjectRelease();

        Text.Effect.Keyframes.appendPartial(map:keyframes:baseFragmentIdentifierMap:)(v108, v56, v58, v57, v59, v60, v107, (uint64_t)&v134);
        uint64_t v6 = v102;
        swift_bridgeObjectRelease();
        uint64_t v3 = v119;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v130;
        swift_bridgeObjectRelease();
        uint64_t v9 = v101;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v111 |= v109;
      }
      else
      {
        swift_endAccess();

        (*v113)(v6, v3);
      }
      ++v16;
      uint64_t v37 = (uint64_t)v128;
      unint64_t v34 = v116;
      if (v115 == v16) {
        goto LABEL_19;
      }
    }
    (*v123)(v37, 1, 1, v3);
LABEL_18:

    _sypSgWOhTm_1(v37, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v16 = v98;
    if ((v111 & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v61 = swift_retain();
    TextEffectsAnimationController.updateKeyframes(_:)(v61);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    TextEffectsAnimationController.updateKeyframes(version:)(*(void *)&v112[v106]);
  }
  uint64_t v6 = v112;
  uint64_t v62 = swift_bridgeObjectRetain();
  uint64_t v63 = v103;
  specialized Sequence.first(where:)(v62, v6, v103);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v64 = (uint64_t)v63;
  uint64_t v65 = v99;
  outlined init with copy of Any?(v64, v99, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  id v128 = (char *)(v4 + 48);
  uint64_t v126 = v66;
  if (v66(v65, 1, v3) == 1)
  {
    _sypSgWOhTm_1(v65, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
    double v35 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))&unk_268EF7000;
  }
  else
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v16, v65, v3);
    double v35 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))&unk_268EF7000;
    char v67 = &v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap];
    swift_beginAccess();
    uint64_t v68 = *(void *)v67;
    if (*(void *)(v68 + 16) && (unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v70 & 1) != 0))
    {
      id v71 = *(char **)(*(void *)(v68 + 56) + 8 * v69);
      swift_endAccess();
      uint64_t v72 = *(void *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver];
      uint64_t v73 = *(void **)&v71[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      id v74 = v71;
      id v75 = objc_msgSend(v73, sel_superlayer);
      double v35 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))&unk_268EF7000;
      id v76 = objc_msgSend(v75, sel_superlayer);

      (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v16, v119);
      uint64_t v77 = *(void **)(v72 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor);
      *(void *)(v72 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor) = v76;
      uint64_t v3 = v119;
    }
    else
    {
      swift_endAccess();
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v16, v3);
    }
  }
  unint64_t v34 = *(void *)&v112[v100];
  unint64_t v78 = *(char **)&v112[v104];
  uint64_t v79 = (uint64_t)v127;
  if (v34 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v79 = (uint64_t)v127;
    unint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (!v16) {
      goto LABEL_44;
    }
  }
  else
  {
    unint64_t v16 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v16) {
      goto LABEL_44;
    }
  }
  unint64_t v80 = 0;
  uint64_t v118 = &v6[*((void *)v35 + 298)];
  unint64_t v125 = v34 & 0xC000000000000001;
  int v122 = (char *)(v4 + 16);
  unint64_t v124 = *((void *)v78 + 2);
  uint64_t v123 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v81 = v4;
  v4 += 32;
  uint64_t v117 = (void (**)(char *, uint64_t))(v81 + 8);
  unint64_t v116 = v105 + 16;
  while (1)
  {
    char v82 = v125 ? (char *)MEMORY[0x24C523D60](v80, v34) : (char *)*(id *)(v34 + 8 * v80 + 32);
    uint64_t v9 = v82;
    if (v124 == v80) {
      break;
    }
    if (v80 >= *((void *)v78 + 2)) {
      goto LABEL_46;
    }
    uint64_t v83 = v130;
    (*(void (**)(uint64_t, char *, uint64_t))(v130 + 16))(v79, &v78[((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(void *)(v83 + 72) * v80], v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v83 + 56))(v79, 0, 1, v3);
    if (v126(v79, 1, v3) == 1) {
      goto LABEL_43;
    }
    uint64_t v6 = v78;
    unint64_t v84 = v34;
    objc_super v85 = *(void (**)(char *, uint64_t, uint64_t))v4;
    double v86 = v121;
    (*(void (**)(char *, uint64_t, uint64_t))v4)(v121, v79, v3);
    uint64_t v87 = *(int *)(v131 + 48);
    uint64_t v88 = (char *)v120;
    uint64_t v89 = (char *)v120 + v87;
    *uint64_t v120 = v9;
    v85(&v88[v87], (uint64_t)v86, v3);
    double v35 = v129;
    v85((char *)v129, (uint64_t)v89, v3);
    uint64_t v90 = v118;
    swift_beginAccess();
    uint64_t v91 = *(void *)v90;
    if (*(void *)(v91 + 16) && (unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v35), (v93 & 1) != 0))
    {
      double v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 + 56) + 8 * v92);
      swift_endAccess();
      uint64_t v94 = *v117;
      char v95 = v35;
      v94((char *)v129, v119);
      uint64_t v3 = v119;
      int64_t v96 = v95;
      (*(void (**)(uint64_t, char *, unsigned int (*)(uint64_t, uint64_t, uint64_t)))(v105 + 16))(v105, v9, v96);
    }
    else
    {
      swift_endAccess();

      (*v117)((char *)v35, v3);
    }
    unint64_t v34 = v84;
    ++v80;
    uint64_t v79 = (uint64_t)v127;
    unint64_t v78 = v6;
    if (v16 == v80) {
      goto LABEL_44;
    }
  }
  (*v123)(v79, 1, 1, v3);
LABEL_43:

  _sypSgWOhTm_1(v79, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_44:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _sypSgWOhTm_1((uint64_t)v103, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  return swift_release();
}

void specialized TextEffectsRenderer.endLayout(with:)(char *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  double v5 = *(double *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  CGFloat v150 = (char *)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v139 - v8;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  CGFloat v148 = (char *)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v139 - v13;
  uint64_t v143 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  unint64_t v15 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments];
  uint64_t v16 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  uint64_t v17 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs];
  uint64_t v18 = (unint64_t *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments];
  swift_beginAccess();
  v140 = v18;
  unint64_t v19 = *v18;
  uint64_t v142 = a2;
  uint64_t v20 = a2;
  uint64_t v21 = v4;
  _Block_copy(v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = specialized updatedIdentifiers<A, B>(a:b:makeIdentifier:)(v15, v17, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = specialized Set.init<A>(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = specialized _NativeSet.subtracting<A>(_:)(v22, v24);
  uint64_t v26 = swift_bridgeObjectRetain();
  unint64_t v27 = specialized Set.init<A>(_:)(v26);
  uint64_t v139 = v22;
  swift_bridgeObjectRelease();
  uint64_t v141 = v16;
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v151 = specialized _NativeSet.subtracting<A>(_:)(v28, v27);
  swift_bridgeObjectRelease();
  int64_t v29 = 0;
  uint64_t v30 = *(void *)(v25 + 56);
  id v157 = (char *)(v25 + 56);
  double v159 = *(double *)&v25;
  uint64_t v31 = 1 << *(unsigned char *)(v25 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & v30;
  double v149 = a1;
  *(void *)&CGFloat v166 = &a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap];
  int64_t v158 = (unint64_t)(v31 + 63) >> 6;
  *(void *)&CGFloat v165 = *(void *)&v5 + 16;
  *(void *)&CGFloat v163 = *(void *)&v5 + 56;
  *(void *)&double v161 = *(void *)&v5 + 48;
  *(void *)&double v160 = *(void *)&v5 + 32;
  double v162 = v5;
  *(void *)&CGFloat v164 = *(void *)&v5 + 8;
  uint64_t v154 = v21;
  while (1)
  {
    if (v33)
    {
      unint64_t v36 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      unint64_t v37 = v36 | (v29 << 6);
      goto LABEL_22;
    }
    int64_t v38 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    if (v38 >= v158) {
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)&v157[8 * v38];
    ++v29;
    if (!v39)
    {
      int64_t v29 = v38 + 1;
      if (v38 + 1 >= v158) {
        goto LABEL_26;
      }
      unint64_t v39 = *(void *)&v157[8 * v29];
      if (!v39)
      {
        int64_t v29 = v38 + 2;
        if (v38 + 2 >= v158) {
          goto LABEL_26;
        }
        unint64_t v39 = *(void *)&v157[8 * v29];
        if (!v39) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v33 = (v39 - 1) & v39;
    unint64_t v37 = __clz(__rbit64(v39)) + (v29 << 6);
LABEL_22:
    unint64_t v27 = *(void *)&v162;
    uint64_t v41 = *(void *)(*(void *)&v162 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)&v162 + 16))(v14, *(void *)(*(void *)&v159 + 48) + v41 * v37, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v14, 0, 1, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v14, 1, v21) == 1) {
      goto LABEL_27;
    }
    (**(void (***)(char *, char *, uint64_t))&v160)(v9, v14, v21);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    uint64_t v34 = v21;
    char v44 = v43;
    swift_bridgeObjectRelease();
    unint64_t v27 = 0;
    if (v44)
    {
      CGFloat v45 = v166;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v47 = **(void **)&v45;
      uint64_t v168 = **(void **)&v45;
      **(void **)&CGFloat v45 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v47 = v168;
      }
      uint64_t v34 = v154;
      (**(void (***)(unint64_t, uint64_t))&v164)(*(void *)(v47 + 48) + v42 * v41, v154);
      uint64_t v35 = v168;
      unint64_t v27 = *(void *)(*(void *)(v168 + 56) + 8 * v42);
      specialized _NativeDictionary._delete(at:)(v42, v168);
      **(void **)&CGFloat v45 = v35;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();

    (**(void (***)(char *, uint64_t))&v164)(v9, v34);
    uint64_t v21 = v34;
  }
  int64_t v40 = v38 + 3;
  if (v40 < v158)
  {
    unint64_t v39 = *(void *)&v157[8 * v40];
    if (!v39)
    {
      while (1)
      {
        int64_t v29 = v40 + 1;
        if (__OFADD__(v40, 1)) {
          break;
        }
        if (v29 >= v158) {
          goto LABEL_26;
        }
        unint64_t v39 = *(void *)&v157[8 * v29];
        ++v40;
        if (v39) {
          goto LABEL_21;
        }
      }
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_75;
      }
LABEL_62:
      if ((v27 & 0xC000000000000001) != 0)
      {
        id v107 = (id)MEMORY[0x24C523D60](0, v27);
      }
      else
      {
        if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_98:
          Swift::String v138 = v142;
          _Block_release(v142);
          _Block_release(v138);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        id v107 = *(id *)(v27 + 32);
      }
      uint64_t v108 = v107;
      swift_bridgeObjectRelease();
      id v109 = objc_msgSend(v108, sel_textLayoutManager);

      uint64_t v110 = 0;
      if (v109)
      {
        id v111 = objc_msgSend(v109, sel_textContainer);

        if (v111)
        {
          objc_msgSend(v111, sel_lineFragmentPadding);
          uint64_t v110 = v112;
        }
      }
      goto LABEL_76;
    }
    int64_t v29 = v40;
    goto LABEL_21;
  }
LABEL_26:
  (**(void (***)(char *, uint64_t, uint64_t, uint64_t))&v163)(v14, 1, 1, v21);
LABEL_27:
  swift_release();
  int64_t v48 = 0;
  uint64_t v49 = *(void *)(v151 + 56);
  uint64_t v144 = v151 + 56;
  uint64_t v50 = 1 << *(unsigned char *)(v151 + 32);
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  else {
    uint64_t v51 = -1;
  }
  unint64_t v52 = v51 & v49;
  uint64_t v147 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_animationController;
  uint64_t v146 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver;
  int64_t v145 = (unint64_t)(v50 + 63) >> 6;
  uint64_t v14 = v149;
  uint64_t v53 = (uint64_t)v150;
  uint64_t v54 = v148;
  while (2)
  {
    if (v52)
    {
      unint64_t v57 = __clz(__rbit64(v52));
      uint64_t v58 = (v52 - 1) & v52;
      unint64_t v59 = v57 | (v48 << 6);
LABEL_49:
      double v63 = v162;
      uint64_t v64 = *(void *)(*(void *)&v162 + 72);
      uint64_t v65 = *(void (**)(char *, unint64_t, uint64_t))(*(void *)&v162 + 16);
      v65(v54, *(void *)(v151 + 48) + v64 * v59, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)&v63 + 56))(v54, 0, 1, v21);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)&v63 + 48))(v54, 1, v21) == 1) {
        goto LABEL_60;
      }
      uint64_t v152 = v64;
      id v153 = (void (*)(unint64_t, uint64_t, uint64_t))v65;
      unint64_t v155 = v58;
      int64_t v156 = v48;
      (**(void (***)(uint64_t, char *, uint64_t))&v160)(v53, v54, v21);
      double v159 = COERCE_DOUBLE(type metadata accessor for TextRenderSurface());
      uint64_t v66 = (char *)objc_allocWithZone(*(Class *)&v159);
      int64_t v158 = (int64_t)&v66[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer];
      swift_unknownObjectWeakInit();
      *(void *)&v66[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement] = 0;
      uint64_t v67 = *(void *)&v14[v147];
      uint64_t v68 = *(void **)&v14[v146];
      unint64_t v69 = (objc_class *)type metadata accessor for TextRenderLayer(0);
      char v70 = objc_allocWithZone(v69);
      swift_unknownObjectWeakInit();
      *(void *)&v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment] = 0;
      uint64_t v71 = (uint64_t)&v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout];
      _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(&v171);
      _sypSgWObTm_1((uint64_t)&v171, v71, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
      uint64_t v72 = &v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_rawLayout];
      *(_OWORD *)uint64_t v72 = 0u;
      *((_OWORD *)v72 + 1) = 0u;
      *((void *)v72 + 4) = 0;
      *(void *)&v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers] = 0;
      v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] = 0;
      uint64_t v73 = MEMORY[0x263F8EE80];
      *(void *)&v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_interactionMetrics] = MEMORY[0x263F8EE80];
      uint64_t v74 = MEMORY[0x263F8EE78];
      *(void *)&v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers] = MEMORY[0x263F8EE78];
      *(void *)&v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectToSegmentsIndices] = v73;
      id v75 = v14;
      uint64_t v14 = (char *)MEMORY[0x263F8EE88];
      *(void *)&v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectIdentifiers] = MEMORY[0x263F8EE88];
      *(void *)&v70[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version] = -1;
      id v157 = v75;
      id v76 = v66;
      swift_retain();
      id v77 = v68;
      unint64_t v78 = v70;
      RangeSet.init()();
      *(void *)&v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer] = 0;
      *(void *)&v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements] = v74;
      uint64_t v79 = &v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
      *(_OWORD *)uint64_t v79 = 0u;
      *((_OWORD *)v79 + 1) = 0u;
      unint64_t v80 = &v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets];
      *(_OWORD *)unint64_t v80 = 0u;
      *((_OWORD *)v80 + 1) = 0u;
      *(void *)&v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutLineFragmentPadding] = 0;
      uint64_t v81 = &v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement];
      *(_OWORD *)uint64_t v81 = 0u;
      *((_OWORD *)v81 + 1) = 0u;
      *(void *)&v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_activeIdentifiers] = v14;
      uint64_t v82 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
      *(CFTimeInterval *)&v78[v82] = CACurrentMediaTime();
      *(void *)&v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController] = v67;
      uint64_t v53 = (uint64_t)v150;
      swift_unknownObjectWeakAssign();
      unint64_t v83 = specialized Dictionary.init(dictionaryLiteral:)(v74);
      unint64_t v84 = (unint64_t *)&v78[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap];
      *unint64_t v84 = v83;
      v84[1] = 0;
      swift_retain();

      v170.receiver = v78;
      v170.super_class = v69;
      id v85 = objc_msgSendSuper2(&v170, sel_init);
      swift_release();

      *(void *)&v76[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer] = v85;
      CGFloat v86 = v166;
      uint64_t v87 = v157;
      swift_unknownObjectWeakAssign();

      v169.receiver = v76;
      *(double *)&v169.super_class = v159;
      uint64_t v88 = (char *)objc_msgSendSuper2(&v169, sel_init);
      uint64_t v89 = *(void **)&v88[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      uint64_t v90 = v88;
      unint64_t v27 = v89;
      objc_msgSend((id)v27, sel_setDelegate_, v90);

      swift_beginAccess();
      int v91 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v167 = **(void **)&v86;
      unint64_t v92 = v167;
      **(void **)&CGFloat v86 = 0x8000000000000000;
      unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
      uint64_t v95 = *(void *)(v92 + 16);
      BOOL v96 = (v93 & 1) == 0;
      uint64_t v97 = v95 + v96;
      if (__OFADD__(v95, v96))
      {
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      char v98 = v93;
      if (*(void *)(v92 + 24) >= v97)
      {
        uint64_t v14 = v149;
        if ((v91 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v97, v91);
        unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
        uint64_t v14 = v149;
        if ((v98 & 1) != (v100 & 1)) {
          goto LABEL_98;
        }
        unint64_t v94 = v99;
      }
      unint64_t v27 = v167;
      if (v98)
      {
        uint64_t v55 = *(void *)(v167 + 56);
        uint64_t v56 = 8 * v94;

        *(void *)(v55 + v56) = v90;
        uint64_t v21 = v154;
      }
      else
      {
        *(void *)(v167 + 8 * (v94 >> 6) + 64) |= 1 << v94;
        uint64_t v21 = v154;
        v153(*(void *)(v27 + 48) + v94 * v152, v53, v154);
        *(void *)(*(void *)(v27 + 56) + 8 * v94) = v90;
        uint64_t v101 = *(void *)(v27 + 16);
        BOOL v102 = __OFADD__(v101, 1);
        uint64_t v103 = v101 + 1;
        if (v102) {
          goto LABEL_69;
        }
        *(void *)(v27 + 16) = v103;
      }
      **(void **)&CGFloat v86 = v27;
      swift_bridgeObjectRelease();
      (**(void (***)(uint64_t, uint64_t))&v164)(v53, v21);
      swift_endAccess();
      uint64_t v54 = v148;
      int64_t v48 = v156;
      unint64_t v52 = v155;
      continue;
    }
    break;
  }
  int64_t v60 = v48 + 1;
  if (__OFADD__(v48, 1)) {
    goto LABEL_71;
  }
  if (v60 < v145)
  {
    unint64_t v61 = *(void *)(v144 + 8 * v60);
    ++v48;
    if (!v61)
    {
      int64_t v48 = v60 + 1;
      if (v60 + 1 >= v145) {
        goto LABEL_59;
      }
      unint64_t v61 = *(void *)(v144 + 8 * v48);
      if (!v61)
      {
        int64_t v48 = v60 + 2;
        if (v60 + 2 >= v145) {
          goto LABEL_59;
        }
        unint64_t v61 = *(void *)(v144 + 8 * v48);
        if (!v61)
        {
          int64_t v62 = v60 + 3;
          if (v62 >= v145) {
            goto LABEL_59;
          }
          unint64_t v61 = *(void *)(v144 + 8 * v62);
          if (!v61)
          {
            while (1)
            {
              int64_t v48 = v62 + 1;
              if (__OFADD__(v62, 1)) {
                goto LABEL_73;
              }
              if (v48 >= v145) {
                goto LABEL_59;
              }
              unint64_t v61 = *(void *)(v144 + 8 * v48);
              ++v62;
              if (v61) {
                goto LABEL_48;
              }
            }
          }
          int64_t v48 = v62;
        }
      }
    }
LABEL_48:
    uint64_t v58 = (v61 - 1) & v61;
    unint64_t v59 = __clz(__rbit64(v61)) + (v48 << 6);
    goto LABEL_49;
  }
LABEL_59:
  (**(void (***)(char *, uint64_t, uint64_t, uint64_t))&v163)(v54, 1, 1, v21);
LABEL_60:
  swift_release();
  uint64_t v104 = v143;
  *(void *)&v14[v143] = *v140;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v14[v141] = v139;
  swift_bridgeObjectRelease();
  uint64_t v105 = v142;
  _Block_copy(v142);
  specialized TextEffectsRenderer.updateKeyframes(with:)(v14, (uint64_t)v105);
  _Block_release(v105);
  unint64_t v27 = *(void *)&v14[v104];
  if (v27 >> 62) {
    goto LABEL_74;
  }
  uint64_t v106 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v106) {
    goto LABEL_62;
  }
LABEL_75:
  swift_bridgeObjectRelease();
  uint64_t v110 = 0;
LABEL_76:
  uint64_t v113 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding;
  *(void *)&v14[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding] = v110;
  unint64_t v114 = *(void *)&v14[v143];
  uint64_t v115 = (double *)MEMORY[0x263F001A0];
  if (v114 >> 62) {
    goto LABEL_95;
  }
  uint64_t v116 = *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  uint64_t v117 = v14;
  while (1)
  {
    double v118 = *v115;
    double v119 = v115[1];
    double v120 = v115[2];
    double v121 = v115[3];
    if (!v116) {
      break;
    }
    uint64_t v122 = 4;
    double v162 = *v115;
    double v161 = v119;
    double v160 = v120;
    double v159 = v121;
    while (1)
    {
      uint64_t v123 = (v114 & 0xC000000000000001) != 0
           ? (double *)MEMORY[0x24C523D60](v122 - 4, v114)
           : (double *)*(id *)(v114 + 8 * v122);
      uint64_t v115 = v123;
      uint64_t v124 = v122 - 3;
      if (__OFADD__(v122 - 4, 1)) {
        break;
      }
      CGFloat v163 = v121;
      CGFloat v164 = v120;
      CGFloat v165 = v119;
      CGFloat v166 = v118;
      objc_msgSend(v123, sel_layoutFragmentFrame);
      CGFloat x = v174.origin.x;
      CGFloat y = v174.origin.y;
      CGFloat width = v174.size.width;
      CGFloat height = v174.size.height;
      double v129 = *(double *)&v14[v113];
      if (!CGRectIsNull(v174))
      {
        v175.origin.CGFloat x = x;
        v175.origin.CGFloat y = y;
        v175.size.CGFloat width = width;
        v175.size.CGFloat height = height;
        CGRect v176 = CGRectStandardize(v175);
        CGFloat v130 = v176.origin.y;
        double v131 = v176.origin.x - v129;
        double v132 = v176.size.width - (-v129 - v129);
        double v133 = v176.size.height + 0.0;
        v176.origin.CGFloat x = v131;
        v176.size.CGFloat width = v132;
        v176.size.CGFloat height = v176.size.height + 0.0;
        CGFloat v134 = CGRectGetWidth(v176);
        CGFloat x = v162;
        CGFloat y = v161;
        CGFloat width = v160;
        CGFloat height = v159;
        if (v134 >= 0.0)
        {
          v177.origin.CGFloat x = v131;
          v177.origin.CGFloat y = v130;
          v177.size.CGFloat width = v132;
          v177.size.CGFloat height = v133;
          CGFloat x = v131;
          CGFloat y = v130;
          CGFloat width = v132;
          CGFloat height = v133;
          if (CGRectGetHeight(v177) < 0.0)
          {
            CGFloat x = v162;
            CGFloat y = v161;
            CGFloat width = v160;
            CGFloat height = v159;
          }
        }
      }
      v172.origin.CGFloat x = v166;
      v172.origin.CGFloat y = v165;
      v172.size.CGFloat width = v164;
      v172.size.CGFloat height = v163;
      v179.origin.CGFloat x = x;
      v179.origin.CGFloat y = y;
      v179.size.CGFloat width = width;
      v179.size.CGFloat height = height;
      CGRect v173 = CGRectUnion(v172, v179);
      double v118 = v173.origin.x;
      double v119 = v173.origin.y;
      double v120 = v173.size.width;
      double v121 = v173.size.height;

      ++v122;
      if (v124 == v116) {
        goto LABEL_89;
      }
    }
    __break(1u);
LABEL_95:
    swift_bridgeObjectRetain_n();
    Swift::String v137 = v14;
    uint64_t v116 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_89:

  swift_bridgeObjectRelease_n();
  v178.origin.CGFloat x = v118;
  v178.origin.CGFloat y = v119;
  v178.size.CGFloat width = v120;
  v178.size.CGFloat height = v121;
  if (CGRectIsNull(v178))
  {
    double v120 = 0.0;
    double v121 = 0.0;
    double v118 = 0.0;
    double v119 = 0.0;
  }
  uint64_t v135 = (double *)&v14[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds];
  v180.origin.CGFloat x = v118;
  v180.origin.CGFloat y = v119;
  v180.size.CGFloat width = v120;
  v180.size.CGFloat height = v121;
  BOOL v136 = CGRectEqualToRect(*(CGRect *)&v14[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds], v180);
  if (!v136)
  {
    *uint64_t v135 = v118;
    v135[1] = v119;
    v135[2] = v120;
    v135[3] = v121;
  }
  TextEffectsRenderer.updateDisplacementAndBounds(changed:)(!v136);
  TextEffectsAnimationController.restorePendingSnapshots()();
  _Block_release(v142);
}

void specialized TextEffectsRenderer.externalDisplayLink.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_animationController);
  *(void *)(v2 + 24) = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (*(unsigned char *)(v2 + 40) == 1)
  {
    TextEffectsAnimationController.clearDisplayLink()();
    if ((*(unsigned char *)(v2 + 40) & 1) == 0)
    {
      *(unsigned char *)(v2 + 40) = 1;
      *(CFTimeInterval *)(v2 + 56) = CACurrentMediaTime();
      if (!TextEffectsAnimationController.startExternalDisplayLink()() && !*(void *)(v2 + 48))
      {
        id v3 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v2, sel_displayLink_);
        uint64_t v4 = *(void **)(v2 + 48);
        *(void *)(v2 + 48) = v3;

        double v5 = *(void **)(v2 + 48);
        if (v5)
        {
          uint64_t v6 = self;
          id v7 = v5;
          id v8 = objc_msgSend(v6, sel_mainRunLoop);
          objc_msgSend(v7, sel_addToRunLoop_forMode_, v8, *MEMORY[0x263EFF588]);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t sub_245B7E8E4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(a1, a2, a3, *(void *)(v8 + 16), *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double, double))(v8 + 24), *(void *)(v8 + 32), *(void *)(v8 + 40), a4, a5, a6, a7, a8);
}

uint64_t sub_245B7E930()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer, @unowned NSTextLayoutManagerSegmentCategory) -> (@unowned Bool)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t partial apply for implicit closure #2 in closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)()
{
  return implicit closure #2 in closure #1 in TextEffectsRenderer.enumerateTextSegments(in:type:options:textLayoutManager:using:)(*(void **)(v0 + 16));
}

uint64_t implicit closure #1 in NSTextRange.textRange.getterpartial apply()
{
  return implicit closure #1 in NSTextRange.textRange.getter(*(void **)(v0 + 16));
}

double _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void type metadata accessor for (NSTextLayoutFragment, UUID)()
{
  if (!lazy cache variable for type metadata for (NSTextLayoutFragment, UUID))
  {
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    type metadata accessor for UUID();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NSTextLayoutFragment, UUID));
    }
  }
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_245B7EA30()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_245B7EA68()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_245B7EAA0()
{
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _SetStorage<UUID>()
{
  if (!lazy cache variable for type metadata for _SetStorage<UUID>)
  {
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UUID>);
    }
  }
}

uint64_t outlined assign with copy of Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _NativeDictionary<Text.Effect.Identifier, Set<Int>>()
{
  if (!lazy cache variable for type metadata for _NativeDictionary<Text.Effect.Identifier, Set<Int>>)
  {
    type metadata accessor for RangeSet<Int>(255, &lazy cache variable for type metadata for Set<Int>, MEMORY[0x263F8D6D8], MEMORY[0x263F8D680]);
    lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
    unint64_t v0 = type metadata accessor for _NativeDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<Text.Effect.Identifier, Set<Int>>);
    }
  }
}

void type metadata accessor for RangeSet<Int>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x263F8D6C8]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void partial apply for closure #1 in StaticEffectLayer.draw(in:)()
{
  closure #1 in DynamicEffectLayer.draw(in:)(*(char **)(v0 + 16), *(uint64_t **)(v0 + 24), &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content, &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_segmentIndex);
}

uint64_t sub_245B7ED64()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_124Tm()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(uint64_t a1, double a2)
{
  closure #1 in closure #1 in TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(a2, a1, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

void partial apply for closure #1 in SharedDynamicLayer.draw(in:)()
{
  closure #1 in SharedDynamicLayer.draw(in:)(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_245B7EDE0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in DynamicEffectLayer.draw(in:)()
{
  closure #1 in DynamicEffectLayer.draw(in:)(*(char **)(v0 + 16), *(uint64_t **)(v0 + 24), &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content, &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_segmentIndex);
}

uint64_t sub_245B7EE1C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextRunsLayer.draw(in:)()
{
  return closure #1 in TextRunsLayer.draw(in:)(*(CGContext **)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_245B7EE38()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of RangeSet<Int><>.IndexSequence.Iterator(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in TextLinesLayer.draw(in:)()
{
  return closure #1 in TextLinesLayer.draw(in:)(*(CGContext **)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_245B7EF34()
{
  return swift_deallocObject();
}

void type metadata accessor for _SetStorage<Duration.UnitsFormatStyle.Unit>()
{
  if (!lazy cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>)
  {
    type metadata accessor for Duration.UnitsFormatStyle.Unit();
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>);
    }
  }
}

void type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>()
{
  if (!lazy cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>)
  {
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute;
  if (!lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute;
  if (!lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute);
  }
  return result;
}

uint64_t sub_245B7F0C0()
{
  return swift_deallocObject();
}

uint64_t sub_245B7F0D0()
{
  return swift_deallocObject();
}

uint64_t sub_245B7F0E0()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for TextEffectsAnimationController.Timing(uint64_t a1)
{
  swift_release();
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  char v5 = *(unsigned char *)(a1 + 112);

  return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v2, v3, v4, v5);
}

uint64_t initializeWithCopy for TextEffectsAnimationController.Timing(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  char v7 = *(unsigned char *)(a2 + 80);
  swift_retain();
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v4, v5, v6, v7);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(unsigned char *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(v2 + 88);
  uint64_t v9 = *(void *)(v2 + 96);
  uint64_t v10 = *(void *)(v2 + 104);
  LOBYTE(v2) = *(unsigned char *)(v2 + 112);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v8, v9, v10, v2);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v10;
  *(unsigned char *)(a1 + 112) = v2;
  return a1;
}

uint64_t assignWithCopy for TextEffectsAnimationController.Timing(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(v2 + 56);
  uint64_t v7 = *(void *)(v2 + 64);
  uint64_t v8 = *(void *)(v2 + 72);
  char v9 = *(unsigned char *)(v2 + 80);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v6, v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  char v13 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 80) = v9;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v10, v11, v12, v13);
  uint64_t v14 = *(void *)(v2 + 88);
  uint64_t v15 = *(void *)(v2 + 96);
  uint64_t v16 = *(void *)(v2 + 104);
  LOBYTE(v2) = *(unsigned char *)(v2 + 112);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v14, v15, v16, v2);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = *(void *)(a1 + 104);
  char v20 = *(unsigned char *)(a1 + 112);
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  *(void *)(a1 + 104) = v16;
  *(unsigned char *)(a1 + 112) = v2;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for TextEffectsAnimationController.Timing(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 72);
  char v5 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  char v9 = *(unsigned char *)(a1 + 80);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 80) = v5;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v6, v7, v8, v9);
  uint64_t v10 = *(void *)(a2 + 104);
  char v11 = *(unsigned char *)(a2 + 112);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v14 = *(void *)(a1 + 104);
  char v15 = *(unsigned char *)(a1 + 112);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v10;
  *(unsigned char *)(a1 + 112) = v11;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEffectsAnimationController.Timing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextEffectsAnimationController.Timing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.Timing()
{
  return &type metadata for TextEffectsAnimationController.Timing;
}

uint64_t initializeBufferWithCopyOfBuffer for RawTextLayout.Fragment(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  id v4 = v3;
  return a1;
}

void destroy for RawTextLayout.Fragment(id *a1)
{
}

uint64_t assignWithCopy for RawTextLayout.Fragment(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RawTextLayout.Fragment(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for RawTextLayout.Fragment()
{
  return &type metadata for RawTextLayout.Fragment;
}

uint64_t destroy for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1)
{
  return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.Timing.PhaseConfiguration()
{
  return &type metadata for TextEffectsAnimationController.Timing.PhaseConfiguration;
}

uint64_t getEnumTagSinglePayload for TextEffectsAnimationController.Timing.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextEffectsAnimationController.Timing.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TextEffectsAnimationController.Timing.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for TextEffectsAnimationController.Timing.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.Timing.State()
{
  return &type metadata for TextEffectsAnimationController.Timing.State;
}

ValueMetadata *type metadata accessor for TextEffectsAnimationController.Duration()
{
  return &type metadata for TextEffectsAnimationController.Duration;
}

BOOL closure #1 in RangeSet.contains(_:)specialized partial apply(void *a1)
{
  return partial apply for specialized closure #1 in RangeSet.contains(_:)(a1);
}

{
  return _ss8RangeSetV7SwiftUIE8containsySbSnyxGFSbAEXEfU_AC4TextV6LayoutV14CharacterIndexV_TG5TA_0(a1);
}

void *static TextAnimationsProvider.animationNames(for:)()
{
  return &outlined read-only object #0 of static TextAnimationsProvider.animationNames(for:);
}

uint64_t static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, uint64_t a8, uint64_t a9, CGContext *a10, void *a11)
{
  return specialized static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(a1, a2, a10, a11, a3, a4, a5, a6, a7);
}

id makeAttributedString #1 () in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of Any(a1, (uint64_t)v13);
  type metadata accessor for NSAttributedString();
  if (swift_dynamicCast()) {
    return (id)v11;
  }
  outlined init with copy of Any(a1, (uint64_t)v13);
  if (!swift_dynamicCast())
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0xE000000000000000;
    if (a2) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = v11;
  unint64_t v5 = v12;
  if (!a2) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v7 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(a2);
LABEL_8:
  char v8 = (void *)MEMORY[0x24C522820](v6, v5);
  swift_bridgeObjectRelease();
  if (v7)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F086A0]), sel_initWithString_attributes_, v8, v9.super.isa);

  return v4;
}

uint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>();
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v2 = -1 << *(unsigned char *)(a1 + 32);
  if (-v2 < 64) {
    uint64_t v3 = ~(-1 << -(char)v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v2) >> 6;
  uint64_t v5 = v1 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v7 << 6);
      int64_t v11 = v7;
      goto LABEL_28;
    }
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v12);
    int64_t v11 = v7 + 1;
    if (!v13)
    {
      int64_t v11 = v7 + 2;
      if (v7 + 2 >= v26) {
        goto LABEL_39;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v11);
      if (!v13)
      {
        int64_t v11 = v7 + 3;
        if (v7 + 3 >= v26) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v27 + 8 * v11);
        if (!v13)
        {
          int64_t v11 = v7 + 4;
          if (v7 + 4 >= v26) {
            goto LABEL_39;
          }
          unint64_t v13 = *(void *)(v27 + 8 * v11);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_28:
    outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v37);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    uint64_t v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    outlined init with copy of AnyHashable((uint64_t)v34, (uint64_t)v31);
    type metadata accessor for NSAttributedStringKey(0);
    if (!swift_dynamicCast())
    {
      uint64_t v30 = 0;
      _sypSgWOhTm_2((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for (key: AnyHashable, value: Any));
      uint64_t v25 = v30;
      swift_release();

      outlined consume of Set<EventID>.Iterator._Variant();
      swift_release();
      return 0;
    }
    char v15 = v30;
    outlined init with copy of Any((uint64_t)v35 + 8, (uint64_t)v31);
    _sypSgWOhTm_2((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for (key: AnyHashable, value: Any));
    outlined init with take of Any(v31, (_OWORD *)((char *)v32 + 8));
    outlined init with take of Any((_OWORD *)((char *)v32 + 8), v29);
    uint64_t v16 = v15;
    outlined init with take of Any(v29, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v19 = v17 & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v5 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v19) & ~*(void *)(v5 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v5 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v8 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v1 + 48) + 8 * v8) = v16;
    uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(void *)(v1 + 56) + 32 * v8));
    ++*(void *)(v1 + 16);
    int64_t v7 = v11;
    unint64_t v4 = v9;
  }
  int64_t v14 = v7 + 5;
  if (v7 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    outlined consume of Set<EventID>.Iterator._Variant();
    return v1;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v14);
  if (v13)
  {
    int64_t v11 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v11 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v11);
    ++v14;
    if (v13) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t closure #1 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments);
  swift_beginAccess();
  id v4 = a1;
  MEMORY[0x24C522D60]();
  if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return 1;
}

void closure #3 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  outlined init with copy of Any?(a1, (uint64_t)v13);
  if (v14)
  {
    type metadata accessor for AnyTextEffect();
    if (swift_dynamicCast())
    {
      id v7 = v12;
      uint64_t v8 = swift_dynamicCastClass();
      if (v8)
      {
        uint64_t v9 = (char *)v8;
        id v10 = v12;
        id v11 = TextEffectsAnimationController.staticAnimator(for:)(v9);

        id v7 = v11;
        MEMORY[0x24C522D60]();
        if (*(void *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        objc_msgSend(v7, sel_start);
      }
    }
  }
  else
  {
    _sypSgWOhTm_2((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Any?);
  }
}

CGAffineTransform *CGRect.transformToFit(within:anchor:)@<X0>(long long *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>, CGFloat a10, CGFloat a11)
{
  CGFloat rect = a8;
  v67.origin.CGFloat x = a8;
  v67.origin.CGFloat y = a9;
  v67.size.CGFloat width = a10;
  v67.size.CGFloat height = a11;
  uint64_t result = (CGAffineTransform *)CGRectContainsRect(*(CGRect *)&a2, v67);
  if (result)
  {
    long long v19 = xmmword_2461C55F0;
    long long v20 = xmmword_2461BCA80;
    long long v21 = 0uLL;
  }
  else
  {
    double v45 = a6;
    v57.origin.CGFloat x = rect;
    v57.origin.CGFloat y = a9;
    v57.size.CGFloat width = a10;
    v57.size.CGFloat height = a11;
    double Width = CGRectGetWidth(v57);
    v58.origin.CGFloat x = a2;
    v58.origin.CGFloat y = a3;
    v58.size.CGFloat width = a4;
    v58.size.CGFloat height = a5;
    CGFloat v22 = CGRectGetWidth(v58);
    v59.origin.CGFloat y = a9;
    CGFloat v23 = a5;
    double v24 = v22;
    v59.origin.CGFloat x = rect;
    CGFloat y = v59.origin.y;
    v59.size.CGFloat width = a10;
    v59.size.CGFloat height = a11;
    CGFloat Height = CGRectGetHeight(v59);
    CGFloat v26 = a2;
    double v27 = Height;
    CGFloat v52 = v26;
    CGFloat v53 = a3;
    v60.origin.CGFloat x = v26;
    v60.origin.CGFloat y = a3;
    CGFloat v28 = a4;
    v60.size.CGFloat width = a4;
    v60.size.CGFloat height = v23;
    double v29 = CGRectGetHeight(v60);
    if (v24 < Width || v29 < v27)
    {
      v61.origin.CGFloat y = a3;
      v61.origin.CGFloat x = v52;
      v61.size.CGFloat width = a4;
      v61.size.CGFloat height = v23;
      double v31 = CGRectGetWidth(v61);
      v62.origin.CGFloat x = rect;
      v62.origin.CGFloat y = y;
      v62.size.CGFloat width = a10;
      v62.size.CGFloat height = a11;
      double v32 = v31 / CGRectGetWidth(v62);
      v63.origin.CGFloat x = v52;
      v63.origin.CGFloat y = a3;
      v63.size.CGFloat width = v28;
      v63.size.CGFloat height = v23;
      double v33 = CGRectGetHeight(v63);
      v64.origin.CGFloat x = rect;
      v64.origin.CGFloat y = y;
      v64.size.CGFloat width = a10;
      v64.size.CGFloat height = a11;
      double v34 = v33 / CGRectGetHeight(v64);
      if (v34 >= v32) {
        CGFloat v35 = v32;
      }
      else {
        CGFloat v35 = v34;
      }
      CGAffineTransformMakeTranslation(&v56, v45, a7);
      CGFloat v36 = v28;
      CGAffineTransformScale(&rect_8, &v56, v35, v35);
      CGAffineTransform v56 = rect_8;
      CGAffineTransformTranslate(&rect_8, &v56, -v45, -a7);
      long long v46 = *(_OWORD *)&rect_8.c;
      long long v48 = *(_OWORD *)&rect_8.a;
      CGAffineTransform v56 = rect_8;
      long long v51 = *(_OWORD *)&rect_8.tx;
      v65.origin.CGFloat x = rect;
      v65.origin.CGFloat y = y;
      v65.size.CGFloat width = a10;
      v65.size.CGFloat height = a11;
      CGRect v66 = CGRectApplyAffineTransform(v65, &v56);
      CGFloat x = v66.origin.x;
      CGFloat v38 = v66.origin.y;
      CGFloat v39 = v66.size.width;
      CGFloat v40 = v66.size.height;
      v66.origin.CGFloat x = v52;
      v66.origin.CGFloat y = v53;
      v66.size.CGFloat width = v36;
      v66.size.CGFloat height = v23;
      v68.origin.CGFloat x = x;
      v68.origin.CGFloat y = v38;
      v68.size.CGFloat width = v39;
      v68.size.CGFloat height = v40;
      uint64_t result = (CGAffineTransform *)CGRectContainsRect(v66, v68);
      if (result)
      {
        long long v19 = v46;
        long long v20 = v48;
        long long v21 = v51;
      }
      else
      {
        CGRect.offsetToFit(within:)(v52, v53, v36, v23, x, v38, v39, v40);
        *(_OWORD *)&v56.a = v48;
        *(_OWORD *)&v56.c = v46;
        *(_OWORD *)&v56.tCGFloat x = v51;
        uint64_t result = CGAffineTransformTranslate(&rect_8, &v56, v43, v44);
        long long v20 = *(_OWORD *)&rect_8.a;
        long long v19 = *(_OWORD *)&rect_8.c;
        long long v21 = *(_OWORD *)&rect_8.tx;
      }
    }
    else
    {
      CGRect.offsetToFit(within:)(v52, a3, a4, v23, rect, y, a10, a11);
      uint64_t result = CGAffineTransformMakeTranslation(&v56, v41, v42);
      long long v20 = *(_OWORD *)&v56.a;
      long long v19 = *(_OWORD *)&v56.c;
      long long v21 = *(_OWORD *)&v56.tx;
    }
  }
  *a1 = v20;
  a1[1] = v19;
  a1[2] = v21;
  return result;
}

id TextAnimationsProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id TextAnimationsProvider.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TextAnimationsProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void CGRect.offsetToFit(within:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGFloat MinX = CGRectGetMinX(*(CGRect *)&a1);
  CGFloat v39 = a1;
  CGFloat v40 = a2;
  v45.origin.CGFloat x = a1;
  double v17 = MinX;
  v45.origin.CGFloat y = a2;
  CGFloat rect = a3;
  v45.size.CGFloat width = a3;
  CGFloat v41 = a4;
  v45.size.CGFloat height = a4;
  double MaxX = CGRectGetMaxX(v45);
  if (v17 > MaxX)
  {
    __break(1u);
    goto LABEL_24;
  }
  double v19 = MaxX;
  v46.origin.CGFloat x = a5;
  v46.origin.CGFloat y = a6;
  v46.size.CGFloat width = a7;
  v46.size.CGFloat height = a8;
  CGFloat v20 = CGRectGetMinX(v46);
  v47.origin.CGFloat y = a6;
  double v21 = v20;
  CGFloat y = v47.origin.y;
  v47.origin.CGFloat x = a5;
  v47.size.CGFloat width = a7;
  v47.size.CGFloat height = a8;
  double v22 = CGRectGetMaxX(v47);
  if (v21 > v22)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  CGFloat v42 = a8;
  if (v17 > v21 || v22 > v19)
  {
    v48.origin.CGFloat x = a5;
    v48.origin.CGFloat y = y;
    v48.size.CGFloat width = a7;
    v48.size.CGFloat height = a8;
    double Width = CGRectGetWidth(v48);
    CGFloat v27 = v39;
    CGFloat v25 = v40;
    v49.origin.CGFloat x = v39;
    v49.origin.CGFloat y = v40;
    v49.size.CGFloat width = rect;
    v49.size.CGFloat height = v41;
    if (Width <= CGRectGetWidth(v49))
    {
      v52.origin.CGFloat x = a5;
      v52.origin.CGFloat y = y;
      v52.size.CGFloat width = a7;
      v52.size.CGFloat height = a8;
      double v29 = CGRectGetMinX(v52);
      v53.origin.CGFloat x = v39;
      v53.origin.CGFloat y = v40;
      v53.size.CGFloat width = rect;
      v53.size.CGFloat height = v41;
      if (v29 >= CGRectGetMinX(v53))
      {
        v56.origin.CGFloat x = a5;
        v56.origin.CGFloat y = y;
        CGFloat v23 = a7;
        v56.size.CGFloat width = a7;
        v56.size.CGFloat height = a8;
        double v30 = CGRectGetMaxX(v56);
        v57.origin.CGFloat x = v39;
        v57.origin.CGFloat y = v40;
        v57.size.CGFloat width = rect;
        v57.size.CGFloat height = v41;
        CGFloat v24 = v41;
        CGFloat v26 = rect;
        if (CGRectGetMaxX(v57) < v30)
        {
          v58.origin.CGFloat x = a5;
          v58.origin.CGFloat y = y;
          v58.size.CGFloat width = v23;
          v58.size.CGFloat height = v42;
          CGRectGetMaxX(v58);
          v59.origin.CGFloat x = v39;
          v59.origin.CGFloat y = v40;
          v59.size.CGFloat width = rect;
          v59.size.CGFloat height = v41;
          CGRectGetMaxX(v59);
        }
      }
      else
      {
        v54.origin.CGFloat x = v39;
        v54.origin.CGFloat y = v40;
        v54.size.CGFloat width = rect;
        v54.size.CGFloat height = v41;
        CGRectGetMinX(v54);
        v55.origin.CGFloat x = a5;
        v55.origin.CGFloat y = y;
        CGFloat v23 = a7;
        v55.size.CGFloat width = a7;
        v55.size.CGFloat height = a8;
        CGRectGetMinX(v55);
        CGFloat v24 = v41;
        CGFloat v26 = rect;
      }
    }
    else
    {
      v50.origin.CGFloat x = a5;
      v50.origin.CGFloat y = y;
      CGFloat v23 = a7;
      v50.size.CGFloat width = a7;
      v50.size.CGFloat height = a8;
      CGRectGetMidX(v50);
      v51.origin.CGFloat x = v39;
      v51.origin.CGFloat y = v40;
      v51.size.CGFloat width = rect;
      v51.size.CGFloat height = v41;
      CGRectGetMidX(v51);
      CGFloat v24 = v41;
      CGFloat v26 = rect;
    }
  }
  else
  {
    CGFloat v23 = a7;
    CGFloat v25 = a2;
    CGFloat v24 = v41;
    CGFloat v26 = rect;
    CGFloat v27 = v39;
  }
  v60.origin.CGFloat x = v27;
  v60.origin.CGFloat y = v25;
  v60.size.CGFloat width = v26;
  v60.size.CGFloat height = v24;
  double MinY = CGRectGetMinY(v60);
  v61.origin.CGFloat x = v27;
  v61.origin.CGFloat y = v25;
  v61.size.CGFloat width = v26;
  v61.size.CGFloat height = v24;
  double MaxY = CGRectGetMaxY(v61);
  if (MinY > MaxY) {
    goto LABEL_25;
  }
  double v33 = MaxY;
  v62.origin.CGFloat x = a5;
  v62.origin.CGFloat y = y;
  v62.size.CGFloat width = v23;
  v62.size.CGFloat height = v42;
  double v34 = CGRectGetMinY(v62);
  v63.origin.CGFloat x = a5;
  v63.origin.CGFloat y = y;
  v63.size.CGFloat width = v23;
  v63.size.CGFloat height = v42;
  double v35 = CGRectGetMaxY(v63);
  if (v34 > v35)
  {
LABEL_26:
    __break(1u);
    return;
  }
  if (MinY > v34 || v35 > v33)
  {
    v64.origin.CGFloat x = a5;
    v64.origin.CGFloat y = y;
    v64.size.CGFloat width = v23;
    v64.size.CGFloat height = v42;
    double Height = CGRectGetHeight(v64);
    v65.origin.CGFloat x = v39;
    v65.origin.CGFloat y = v40;
    v65.size.CGFloat width = v26;
    v65.size.CGFloat height = v41;
    if (Height <= CGRectGetHeight(v65))
    {
      v68.origin.CGFloat x = a5;
      v68.origin.CGFloat y = y;
      v68.size.CGFloat width = v23;
      v68.size.CGFloat height = v42;
      double v37 = CGRectGetMinY(v68);
      v69.origin.CGFloat x = v39;
      v69.origin.CGFloat y = v40;
      v69.size.CGFloat width = v26;
      v69.size.CGFloat height = v41;
      if (v37 >= CGRectGetMinY(v69))
      {
        v72.origin.CGFloat x = a5;
        v72.origin.CGFloat y = y;
        v72.size.CGFloat width = v23;
        v72.size.CGFloat height = v42;
        double v38 = CGRectGetMaxY(v72);
        v73.origin.CGFloat x = v39;
        v73.origin.CGFloat y = v40;
        v73.size.CGFloat width = v26;
        v73.size.CGFloat height = v41;
        if (CGRectGetMaxX(v73) < v38)
        {
          v74.origin.CGFloat x = a5;
          v74.origin.CGFloat y = y;
          v74.size.CGFloat width = v23;
          v74.size.CGFloat height = v42;
          CGRectGetMaxY(v74);
          v75.origin.CGFloat x = v39;
          v75.origin.CGFloat y = v40;
          v75.size.CGFloat width = v26;
          v75.size.CGFloat height = v41;
          CGRectGetMaxY(v75);
        }
      }
      else
      {
        v70.origin.CGFloat x = v39;
        v70.origin.CGFloat y = v40;
        v70.size.CGFloat width = v26;
        v70.size.CGFloat height = v41;
        CGRectGetMinY(v70);
        v71.origin.CGFloat x = a5;
        v71.origin.CGFloat y = y;
        v71.size.CGFloat width = v23;
        v71.size.CGFloat height = v42;
        CGRectGetMinY(v71);
      }
    }
    else
    {
      v66.origin.CGFloat x = a5;
      v66.origin.CGFloat y = y;
      v66.size.CGFloat width = v23;
      v66.size.CGFloat height = v42;
      CGRectGetMidY(v66);
      v67.origin.CGFloat x = v39;
      v67.origin.CGFloat y = v40;
      v67.size.CGFloat width = v26;
      v67.size.CGFloat height = v41;
      CGRectGetMidY(v67);
    }
  }
}

id specialized static TextAnimationsProvider.textEffect(named:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x706952656C616373 && a2 == 0xEB00000000656C70;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextEffectImplementation<ScaleRippleTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect, (uint64_t)&type metadata for ScaleRippleTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v5;
    id v28 = objc_allocWithZone(v5);
    id v7 = (objc_super *)&v28;
  }
  else if (a1 == 0x68637465727473 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextEffectImplementation<StretchTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect, (uint64_t)&type metadata for StretchTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v9;
    id v10 = (char *)objc_allocWithZone(v9);
    id v11 = &v10[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v10) + 0x128)];
    *(_OWORD *)id v11 = xmmword_2461C5620;
    *((_OWORD *)v11 + 1) = xmmword_2461C5630;
    *((void *)v11 + 4) = 0x3FC999999999999ALL;
    double v29 = v10;
    id v7 = (objc_super *)&v29;
  }
  else if (a1 == 0x687369757173 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextEffectImplementation<SquishTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect, (uint64_t)&type metadata for SquishTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v12;
    unint64_t v13 = (char *)objc_allocWithZone(v12);
    uint64_t v14 = &v13[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v13) + 0x128)];
    *(_OWORD *)uint64_t v14 = xmmword_2461C5600;
    *((_OWORD *)v14 + 1) = xmmword_2461C5610;
    double v30 = v13;
    id v7 = (objc_super *)&v30;
  }
  else if (a1 == 0x65636E756F62 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextEffectImplementation<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v15;
    id v31 = objc_allocWithZone(v15);
    id v7 = (objc_super *)&v31;
  }
  else if (a1 == 6777186 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<BigTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v16;
    id v32 = objc_allocWithZone(v16);
    id v7 = (objc_super *)&v32;
  }
  else if (a1 == 0x6C6C616D73 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<SmallTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v17;
    id v33 = objc_allocWithZone(v17);
    id v7 = (objc_super *)&v33;
  }
  else if (a1 == 0x6D6F6F6C62 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<BloomTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v18;
    id v34 = objc_allocWithZone(v18);
    id v7 = (objc_super *)&v34;
  }
  else if (a1 == 0x75617372656D6F73 && a2 == 0xEA0000000000746CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextEffectImplementation<SomersaultTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect, (uint64_t)&type metadata for SomersaultTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v19;
    id v35 = objc_allocWithZone(v19);
    id v7 = (objc_super *)&v35;
  }
  else if (a1 == 0x726556656B616873 && a2 == 0xED00006C61636974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<ShakeVerticalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v20;
    id v36 = objc_allocWithZone(v20);
    id v7 = (objc_super *)&v36;
  }
  else if (a1 == 0x726F48656B616873 && a2 == 0xEF6C61746E6F7A69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, (unint64_t *)&lazy cache variable for type metadata for TextEffectImplementation<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v21;
    id v37 = objc_allocWithZone(v21);
    id v7 = (objc_super *)&v37;
  }
  else if (a1 == 0x72657474696ALL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextEffectImplementation<JitterTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect, (uint64_t)&type metadata for JitterTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v22;
    id v38 = objc_allocWithZone(v22);
    id v7 = (objc_super *)&v38;
  }
  else if (a1 == 0x65646F6C707865 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextEffectImplementation<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextEffectImplementation);
    uint64_t v6 = v23;
    id v39 = objc_allocWithZone(v23);
    id v7 = (objc_super *)&v39;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024621DB90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextFilterEffect<GradientForegroundTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect, (uint64_t)&type metadata for GradientForegroundTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFilterEffect);
    uint64_t v6 = v24;
    id v40 = objc_allocWithZone(v24);
    id v7 = (objc_super *)&v40;
  }
  else if (a1 == 0x746E656964617267 && a2 == 0xEC00000072756C42 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextFilterEffect<GradientBlurTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type GradientBlurTextEffect and conformance GradientBlurTextEffect, (uint64_t)&type metadata for GradientBlurTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFilterEffect);
    uint64_t v6 = v25;
    CGFloat v26 = (char *)objc_allocWithZone(v25);
    *(void *)&v26[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v26) + 0xF8)] = 0x4014000000000000;
    CGFloat v41 = v26;
    id v7 = (objc_super *)&v41;
  }
  else
  {
    if ((a1 != 0x72656D6D696C67 || a2 != 0xE700000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      return 0;
    }
    type metadata accessor for TextFilterEffect<GlimmerTextEffect>(0, &lazy cache variable for type metadata for TextFilterEffect<GlimmerTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type GlimmerTextEffect and conformance GlimmerTextEffect, (uint64_t)&type metadata for GlimmerTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFilterEffect);
    uint64_t v6 = v27;
    id v42 = objc_allocWithZone(v27);
    id v7 = (objc_super *)&v42;
  }
  v7->super_class = v6;
  return [(objc_super *)v7 init];
}

uint64_t specialized static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2, CGContext *a3, void *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v103 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  CGFloat v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81688]), sel_init);
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F816B8]), sel_init);
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81680]), sel_init);
  objc_msgSend(v23, sel_setLineFragmentPadding_, a9);
  v114.origin.double x = a5;
  v114.origin.CGFloat y = a6;
  v114.size.CGFloat width = a7;
  v114.size.CGFloat height = a8;
  double Width = CGRectGetWidth(v114);
  objc_msgSend(v23, sel_size);
  objc_msgSend(v23, sel_setSize_, Width);
  objc_msgSend(v22, sel_setTextContainer_, v23);
  objc_msgSend(v23, sel_setLineBreakMode_, 0);
  double x = *(double *)&a4;
  id v25 = objc_msgSend(a4, sel_maximumNumberOfLines);
  id v102 = v23;
  objc_msgSend(v23, sel_setMaximumNumberOfLines_, v25);
  _NSTextLayoutManagerRequiresCTLine(v22);
  id v26 = makeAttributedString #1 () in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(a1, a2);
  CGFloat v27 = NSAttributedString.replacingLineBreakModes(_:)(0);

  id v106 = v27;
  objc_msgSend(v21, sel_setAttributedString_, v27);
  objc_msgSend(v22, sel_replaceTextContentManager_, v21);
  id v28 = objc_msgSend(v22, sel_documentRange);
  objc_msgSend(v22, sel_invalidateLayoutForRange_, v28);

  id v29 = objc_msgSend(v22, sel_documentRange);
  objc_msgSend(v22, sel_ensureLayoutForRange_, v29);

  double v30 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextEffectsRenderer()), sel_init);
  double v105 = *(double *)&a3;
  if (*(double *)&a3 == 0.0)
  {
    double v35 = 1.0;
  }
  else
  {
    CGContextGetCTM(&aBlock, a3);
    double v31 = fabs(aBlock.a);
    double v32 = fabs(aBlock.d);
    if (aBlock.c == 0.0 && aBlock.b == 0.0 && v31 == v32) {
      double v35 = v31;
    }
    else {
      double v35 = 1.0;
    }
  }
  double v36 = *(double *)&v30[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale];
  uint64_t v100 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale;
  *(double *)&v30[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale] = v35;
  TextEffectsRenderer.contentsScale.didset(v36);
  id v37 = &v30[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments];
  swift_beginAccess();
  id v38 = (void *)MEMORY[0x263F8EE78];
  *(void *)id v37 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v30;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = partial apply for closure #1 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:);
  *(void *)(v40 + 24) = v39;
  uint64_t v101 = v39;
  *(void *)&aBlock.tdouble x = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  *(void *)&aBlock.tCGFloat y = v40;
  *(void *)&aBlock.a = MEMORY[0x263EF8330];
  *(void *)&aBlock.b = 1107296256;
  *(void *)&aBlock.c = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  *(void *)&aBlock.d = &block_descriptor_6;
  CGFloat v41 = _Block_copy(&aBlock);
  id v42 = v30;
  swift_retain();
  swift_release();
  id v43 = objc_msgSend(v22, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 4, v41);
  swift_unknownObjectRelease();
  _Block_release(v41);
  LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v41)
  {
    __break(1u);
  }
  else
  {
    id v97 = v21;
    char v98 = v20;
    uint64_t v99 = v18;
    specialized TextEffectsRenderer.endLayout(with:)((unint64_t)v42);
    id v113 = v38;
    if (one-time initialization token for _textAnimation == -1) {
      goto LABEL_14;
    }
  }
  swift_once();
LABEL_14:
  CGFloat v44 = (char *)static NSAttributedStringKey._textAnimation;
  id v45 = v106;
  id v46 = objc_msgSend(v106, sel_length);
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v42;
  *(void *)(v47 + 24) = &v113;
  CGRect v48 = (CGContext *)swift_allocObject();
  *((void *)v48 + 2) = partial apply for closure #3 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:);
  *((void *)v48 + 3) = v47;
  uint64_t v96 = v47;
  *(void *)&aBlock.tdouble x = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  *(void *)&aBlock.tCGFloat y = v48;
  *(void *)&aBlock.a = MEMORY[0x263EF8330];
  *(void *)&aBlock.b = 1107296256;
  *(void *)&aBlock.c = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *(void *)&aBlock.d = &block_descriptor_14;
  CGRect v49 = _Block_copy(&aBlock);
  CGRect v50 = v42;
  swift_retain();
  swift_release();
  objc_msgSend(v45, sel_enumerateAttribute_inRange_options_usingBlock_, v44, 0, v46, 0, v49);
  _Block_release(v49);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_37:
    swift_once();
LABEL_27:
    swift_beginAccess();
    unint64_t v78 = *(void (**)(CGPoint *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v79 = static CoreGlue2.shared;
    v78(&v111);

    CGPoint v107 = v111;
    specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v48, &v107.x, 0, 1, &aBlock.a, x, v105);

    swift_release();
    swift_release();
    double v35 = v95;
    goto LABEL_28;
  }
  specialized TextEffectsRenderer.updateForStaticRendering(with:)((unint64_t)v50);
  CGRect v52 = (double *)TextEffectsRenderer.baselineOffsets.getter();
  double v53 = x;
  unsigned int v54 = objc_msgSend(*(id *)&x, sel_wantsBaselineOffset);
  double v55 = v105;
  id v45 = (id)MEMORY[0x263F8EE78];
  if (v54)
  {
    uint64_t v56 = *((void *)v52 + 2);
    if (v56)
    {
      uint64_t result = _NSStringDrawingContextSetBaselineOffset(*(void *)&v53, v52[v56 + 3]);
      if (!*((void *)v52 + 2))
      {
        __break(1u);
        return result;
      }
      double v58 = v52[4];
    }
    else
    {
      double v58 = 0.0;
      _NSStringDrawingContextSetBaselineOffset(*(void *)&v53, 0.0);
    }
    _NSStringDrawingContextSetFirstBaselineOffset(*(void *)&v53, v58);
  }
  if (v55 != 0.0)
  {
    double v95 = v35;
    CGRect v48 = (CGContext *)*(id *)&v55;
    NSAttributedString.maxFontMetrics.getter((uint64_t)&aBlock);
    CGFloat v94 = CGRect.outset(by:)(aBlock.tx, aBlock.ty, v109, v110, a5, a6, a7, a8);
    CGFloat v93 = v59;
    CGFloat v61 = v60;
    CGFloat v63 = v62;
    double v64 = TextEffectsRenderer.drawingBounds.getter();
    CGFloat v65 = a8;
    CGFloat v66 = v64;
    CGFloat v67 = a7;
    CGFloat v69 = v68;
    CGFloat v71 = v70;
    v115.origin.double x = a5;
    CGFloat v73 = v72;
    double x = v115.origin.x;
    double v105 = a6;
    v115.origin.CGFloat y = a6;
    v115.size.CGFloat width = v67;
    v115.size.CGFloat height = v65;
    double MinX = CGRectGetMinX(v115);
    uint64_t v75 = *((void *)v52 + 2);
    if (v75) {
      CGFloat v76 = v52[v75 + 3];
    }
    else {
      CGFloat v76 = 0.0;
    }
    swift_bridgeObjectRelease();
    CGRect.transformToFit(within:anchor:)((long long *)&aBlock, v94, v93, v61, v63, MinX, v76, v66, v69, v71, v73);
    CGPoint v111 = (CGPoint)0;
    uint64_t v77 = one-time initialization token for shared;
    CGFloat v44 = v50;
    if (v77 == -1) {
      goto LABEL_27;
    }
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
LABEL_28:
  double v80 = 1.0;
  if (v35 == 0.0) {
    double v81 = 1.0;
  }
  else {
    double v81 = 1.0 / v35;
  }
  uint64_t v82 = (CGPoint *)&v50[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds];
  double v83 = *(double *)&v30[v100];
  if (v83 != 0.0) {
    double v80 = 1.0 / v83;
  }
  CGSize v84 = (CGSize)v82[1];
  CGPoint v111 = *v82;
  CGSize v112 = v84;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v80);
  CGPoint v85 = v111;
  CGSize v86 = v112;
  CGFloat v87 = *(double *)&v50[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds + 16];
  CGFloat v88 = *(double *)&v50[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds + 24];
  uint64_t v89 = v103;
  uint64_t v90 = v98;
  uint64_t v91 = v99;
  (*(void (**)(char *, void, uint64_t))(v103 + 104))(v98, *MEMORY[0x263F8E218], v99);
  v111.double x = v87;
  v107.double x = v88;
  specialized FloatingPoint.round(_:toMultipleOf:)(v90, v81);
  specialized FloatingPoint.round(_:toMultipleOf:)(v90, v81);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
  v116.origin = v85;
  v116.size = v86;
  CGRectGetWidth(v116);

  id v113 = v45;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_245B820BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(void *a1)
{
  return closure #1 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_245B820FC()
{
  return swift_deallocObject();
}

uint64_t sub_245B8210C()
{
  return swift_deallocObject();
}

void partial apply for closure #3 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #3 in static TextAnimationsProvider.drawStatic(string:attributes:options:rect:padding:forceClipping:cgContext:stringDrawingContext:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void **)(v4 + 24));
}

uint64_t sub_245B8214C()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

void type metadata accessor for (key: AnyHashable, value: Any)()
{
  if (!lazy cache variable for type metadata for (key: AnyHashable, value: Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: AnyHashable, value: Any));
    }
  }
}

unint64_t lazy protocol witness table accessor for type GlimmerTextEffect and conformance GlimmerTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect;
  if (!lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect;
  if (!lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlimmerTextEffect and conformance GlimmerTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GradientBlurTextEffect and conformance GradientBlurTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect;
  if (!lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect;
  if (!lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientBlurTextEffect and conformance GradientBlurTextEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect;
  if (!lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect;
  if (!lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect);
  }
  return result;
}

void type metadata accessor for TextFilterEffect<GlimmerTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeSequence()
{
  return &type metadata for Text.Effect.KeyframeSequence;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Effect.KeyframeSequence.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.KeyframeSequence.Entry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for Text.Effect.KeyframeSequence.Entry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.KeyframeSequence.Entry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.KeyframeSequence.Entry()
{
  return &type metadata for Text.Effect.KeyframeSequence.Entry;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.KeyframeSequence()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeSequence> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.KeyframeSequence> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.KeyframeSequence>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence;
  if (!lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
  }
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.KeyframeSequence@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.KeyframeSequence(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(void *)(*(void *)v1 + 16))
  {
    *unint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Effect.KeyframeSequence(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

void *protocol witness for Collection.subscript.read in conformance Text.Effect.KeyframeSequence(void *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    uint64_t v4 = *(void *)v2 + 24 * v3;
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = *(void *)(v4 + 40);
    LOBYTE(v4) = *(unsigned char *)(v4 + 48);
    *unint64_t result = v5;
    result[1] = v6;
    *((unsigned char *)result + 16) = v4;
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.KeyframeSequence@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Effect.KeyframeSequence(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Effect.KeyframeSequence()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Effect.KeyframeSequence@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)v3 + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.KeyframeSequence@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Effect.KeyframeSequence(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

void *protocol witness for Collection.index(after:) in conformance Text.Effect.KeyframeSequence@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >= *(void *)(*(void *)v2 + 16)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance Text.Effect.KeyframeSequence(void *result)
{
  if (*result >= *(void *)(*(void *)v1 + 16)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.KeyframeSequence(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Text.Effect.KeyframeSequence()
{
  return *(void *)(*(void *)v0 + 16);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.KeyframeSequence()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.KeyframeSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.KeyframeSequence()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeSequence> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeSequence> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeSequence>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.KeyframeSequence> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.KeyframeSequence>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<Text.Effect.KeyframeSequence>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence();
    unint64_t v7 = a3(a1, &type metadata for Text.Effect.KeyframeSequence, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.KeyframeSequence()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.KeyframeSequence()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.KeyframeSequence and conformance Text.Effect.KeyframeSequence);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.KeyframeSequence> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.KeyframeSequence>(255, &lazy cache variable for type metadata for Slice<Text.Effect.KeyframeSequence>, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Text.Effect.KeyframeSequence.init(order:map:)(unint64_t a1, uint64_t a2, void *a3)
{
  Swift::Int v5 = *(void *)(a1 + 16);
  CGFloat v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 + 1, 0, MEMORY[0x263F8EE78]);
  double v64 = (void *)MEMORY[0x263F8EE80];
  type metadata accessor for [Text.Effect.Identifier : Text.Effect.AnyLayoutState]();
  Dictionary.reserveCapacity(_:)(v5);
  double v58 = a3;
  unint64_t v59 = a1;
  uint64_t v60 = *(void *)(a1 + 16);
  if (!v60)
  {
    uint64_t v7 = (uint64_t)v64;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  uint64_t v7 = (uint64_t)v64;
  while (1)
  {
    if (!a3[2]) {
      goto LABEL_5;
    }
    uint64_t v9 = *(void *)(v59 + 8 * v6 + 32);
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) == 0) {
      goto LABEL_5;
    }
    int64_t v12 = *(void **)(a3[7] + 8 * v10);
    unint64_t v13 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v12) + 0xA0);
    unint64_t v14 = v12;
    uint64_t v15 = v13();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    CGFloat v63 = (void *)v7;
    double v17 = (void *)v7;
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    uint64_t v20 = *(void *)(v7 + 16);
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_61;
    }
    char v23 = v18;
    if (*(void *)(v7 + 24) < v22) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v7 = (uint64_t)v63;
      if ((v18 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      double v17 = &v63;
      specialized _NativeDictionary.copy()();
      uint64_t v7 = (uint64_t)v63;
      if ((v23 & 1) == 0)
      {
LABEL_15:
        *(void *)(v7 + 8 * (v19 >> 6) + 64) |= 1 << v19;
        uint64_t v26 = 8 * v19;
        *(void *)(*(void *)(v7 + 48) + v26) = v9;
        *(void *)(*(void *)(v7 + 56) + v26) = v15;
        uint64_t v27 = *(void *)(v7 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_62;
        }
        *(void *)(v7 + 16) = v29;
        goto LABEL_4;
      }
    }
LABEL_3:
    uint64_t v8 = *(void *)(v7 + 56);
    swift_release();
    *(void *)(v8 + 8 * v19) = v15;
LABEL_4:
    swift_release();

    swift_bridgeObjectRelease();
    a3 = v58;
LABEL_5:
    if (v60 == ++v6)
    {
      double v64 = (void *)v7;
      swift_bridgeObjectRelease();
LABEL_21:
      unint64_t v6 = v61[2];
      unint64_t v14 = v61[3];
      double v17 = (void *)(v6 + 1);
      swift_bridgeObjectRetain();
      if (v6 >= v14 >> 1) {
        goto LABEL_63;
      }
LABEL_22:
      v61[2] = v17;
      double v30 = &v61[3 * v6];
      v30[4] = v7;
      v30[5] = 0;
      *((unsigned char *)v30 + 48) = 1;
      double v17 = v58;
      unint64_t v14 = v59;
      if (!v60)
      {
LABEL_56:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)v61;
      }
      unint64_t v6 = 0;
      uint64_t v7 = v59 + 32;
      while (1)
      {
        if (v6 >= *(void *)(v14 + 16)) {
          goto LABEL_60;
        }
        if (!v17[2]) {
          goto LABEL_26;
        }
        uint64_t v62 = *(void *)(v7 + 8 * v6);
        uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v62);
        if ((v32 & 1) == 0) {
          goto LABEL_26;
        }
        unint64_t v57 = v6;
        id v33 = *(void **)(v17[7] + 8 * v31);
        id v34 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v33) + 0x98);
        double v35 = v33;
        unint64_t v36 = v34();
        if (!v36)
        {

LABEL_24:
          double v17 = v58;
          unint64_t v14 = v59;
          goto LABEL_25;
        }
        unint64_t v6 = v36;
        unint64_t v14 = v59;
        if (!(v36 >> 62))
        {
          uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
          double v17 = v58;
          if (v37) {
            break;
          }
          goto LABEL_55;
        }
        swift_bridgeObjectRetain();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        double v17 = v58;
        if (v37) {
          break;
        }
LABEL_55:

        swift_bridgeObjectRelease();
LABEL_25:
        uint64_t v7 = v59 + 32;
        unint64_t v6 = v57;
LABEL_26:
        if (++v6 == v60) {
          goto LABEL_56;
        }
      }
      uint64_t v7 = 4;
      while (1)
      {
        double v17 = (void *)(v7 - 4);
        if ((v6 & 0xC000000000000001) != 0)
        {
          unint64_t v14 = MEMORY[0x24C523D60](v7 - 4, v6);
          uint64_t v38 = v7 - 3;
          if (__OFADD__(v17, 1)) {
            goto LABEL_57;
          }
        }
        else
        {
          unint64_t v14 = *(void *)(v6 + 8 * v7);
          swift_retain();
          uint64_t v38 = v7 - 3;
          if (__OFADD__(v17, 1))
          {
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            CGFloat v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), (int64_t)v17, 1, v61);
            goto LABEL_22;
          }
        }
        uint64_t v39 = v35;
        double v17 = v64;
        swift_bridgeObjectRetain();
        swift_retain();
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        CGFloat v63 = v17;
        unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v62);
        uint64_t v43 = v17[2];
        BOOL v44 = (v41 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          goto LABEL_58;
        }
        char v46 = v41;
        if (v17[3] >= v45)
        {
          if ((v40 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, v40);
          uint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v62);
          if ((v46 & 1) != (v48 & 1)) {
            goto LABEL_64;
          }
          unint64_t v42 = v47;
        }
        CGRect v49 = v63;
        double v17 = (void *)(8 * v42);
        if (v46)
        {
          uint64_t v50 = v63[7];
          swift_release();
          *(void *)(v50 + 8 * v42) = v14;
        }
        else
        {
          v63[(v42 >> 6) + 8] |= 1 << v42;
          *(void *)(v49[6] + 8 * v42) = v62;
          *(void *)(v49[7] + 8 * v42) = v14;
          uint64_t v51 = v49[2];
          BOOL v28 = __OFADD__(v51, 1);
          uint64_t v52 = v51 + 1;
          if (v28) {
            goto LABEL_59;
          }
          v49[2] = v52;
        }
        swift_bridgeObjectRelease();
        unint64_t v54 = v61[2];
        unint64_t v53 = v61[3];
        if (v54 >= v53 >> 1) {
          CGFloat v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v61);
        }
        v61[2] = v54 + 1;
        double v55 = &v61[3 * v54];
        Swift::UInt64 v55[4] = v49;
        v55[5] = v62;
        *((unsigned char *)v55 + 48) = 0;
        swift_release();
        ++v7;
        double v35 = v39;
        if (v38 == v37)
        {

          swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  double v17 = v63;
  uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v23 & 1) == (v25 & 1))
  {
    unint64_t v19 = v24;
    uint64_t v7 = (uint64_t)v63;
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_3;
  }
LABEL_64:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static ConditionallyArchivableView._viewListCount(inputs:)(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized find<A>(_:key:)(v1);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  int v9 = v3;
  uint64_t v10 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ArchivedViewBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AppearanceAnimationView<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static ConditionallyArchivableView._makeView(view:inputs:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AppearanceAnimationView<A, B>(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static ConditionallyArchivableView._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AppearanceAnimationView<A, B>(uint64_t a1)
{
  return static ConditionallyArchivableView._viewListCount(inputs:)(a1);
}

uint64_t dispatch thunk of ConditionallyArchivableView.archivedBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for ArchivedViewBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

void specialized ArchivedViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v44 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v45 = (char *)v35 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)v35 - v15;
  if (a2)
  {
    uint64_t v43 = a1;
    int v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
      AGGraphSetUpdate();
      uint64_t v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x270FA5388](v33);
      v35[-2] = type metadata accessor for ArchivedViewBodyAccessor();
      v35[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v35[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    int v38 = v17;
    uint64_t v39 = v16;
    uint64_t v40 = v14;
    uint64_t v41 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v19 = AGTypeID.description.getter();
    uint64_t v21 = v20;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v19;
    char v23 = (void (**)(char *, uint64_t, uint64_t))(inited + 32);
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 40) = v21;
    uint64_t v42 = a3;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v37 = inited + 72;
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v22;
    *(void *)(inited + 80) = v24;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v44 + 16;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v10, v45, v8);
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v26 = swift_initStackObject();
    long long v46 = xmmword_2461BE2B0;
    *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v35[1] = inited;
        uint64_t v36 = a4;
        uint64_t inited = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v37, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v47);
        swift_bridgeObjectRelease();
        if (!v48)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v47);
          swift_bridgeObjectRelease();
          char v32 = *(void (**)(char *, uint64_t))(v44 + 8);
          v32(v45, v8);
          v32(v10, v8);
          a4 = v36;
          uint64_t AssociatedTypeWitness = v41;
          a3 = v42;
          uint64_t v16 = v39;
          uint64_t v14 = v40;
          goto LABEL_15;
        }
        char v23 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
        outlined destroy of CVarArg?((uint64_t)v47);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          uint64_t v29 = *v23;
          while (1)
          {
            v29(v10, v28, v8);
            uint64_t v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v46;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(void *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            uint64_t v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v47);
            swift_bridgeObjectRelease();
            if (!v48) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v47);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void __swiftcall SExpPrinter.init(tag:singleLine:)(SwiftUI::SExpPrinter *__return_ptr retstr, Swift::String tag, Swift::Bool singleLine)
{
  int v3 = singleLine;
  String.append(_:)(tag);
  swift_bridgeObjectRelease();
  uint64_t v5 = 8224;
  if (v3) {
    uint64_t v5 = 0;
  }
  unint64_t v6 = (void *)0xE200000000000000;
  if (v3) {
    unint64_t v6 = (void *)0xE000000000000000;
  }
  retstr->output._countAndFlagsBits = 40;
  retstr->output._object = (void *)0xE100000000000000;
  retstr->depth = ~v3 & 1;
  retstr->indent._countAndFlagsBits = v5;
  retstr->indent._object = v6;
}

Swift::String __swiftcall SExpPrinter.end()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[2];
  if (v2)
  {
    BOOL v3 = __OFSUB__(v2, 1);
    uint64_t v4 = v2 - 1;
    if (v3)
    {
      __break(1u);
      goto LABEL_6;
    }
    v0[2] = v4;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v7 = *v0;
  unint64_t v6 = (void *)v1[1];
  swift_bridgeObjectRetain();
  uint64_t v8 = v7;
  uint64_t v9 = v6;
LABEL_6:
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

Swift::Void __swiftcall SExpPrinter.push(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = v1[2];
  if (v4)
  {
    v5._uint64_t countAndFlagsBits = 10;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    uint64_t v6 = v1[3];
    uint64_t v7 = (void *)v1[4];
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = v6;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 40;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = countAndFlagsBits;
    v10._object = object;
    String.append(_:)(v10);
    if (__OFADD__(v4, 1))
    {
      __break(1u);
    }
    else
    {
      v1[2] = v4 + 1;
      v11._uint64_t countAndFlagsBits = 8224;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
    }
  }
  else
  {
    v12._uint64_t countAndFlagsBits = 40;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    uint64_t v13 = countAndFlagsBits;
    uint64_t v14 = object;
    String.append(_:)(*(Swift::String *)&v13);
  }
}

Swift::Void __swiftcall SExpPrinter.print(_:newline:)(Swift::String _, Swift::Bool newline)
{
  object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  if (newline && v2[2])
  {
    v5._uint64_t countAndFlagsBits = 10;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    uint64_t v6 = v2[3];
    uint64_t v7 = (void *)v2[4];
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = v6;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9._uint64_t countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
  }
  uint64_t v10 = countAndFlagsBits;
  Swift::String v11 = object;

  String.append(_:)(*(Swift::String *)&v10);
}

Swift::Void __swiftcall SExpPrinter.pop()()
{
  uint64_t v1 = v0[2];
  if (v1)
  {
    BOOL v2 = __OFSUB__(v1, 1);
    uint64_t v3 = v1 - 1;
    if (v2)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = v0[3];
      v0[2] = v3;
      unint64_t v5 = v0[4];
      if ((v5 & 0x2000000000000000) != 0) {
        uint64_t v6 = HIBYTE(v5) & 0xF;
      }
      else {
        uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v7 = String.index(_:offsetBy:limitedBy:)();
      if (v8) {
        goto LABEL_14;
      }
      if (4 * v6 >= v7 >> 14)
      {
        String.removeSubrange(_:)();
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
LABEL_9:
  uint64_t v9 = 41;
  unint64_t v10 = 0xE100000000000000;

  String.append(_:)(*(Swift::String *)&v9);
}

uint64_t SExpPrinter.indent.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

Swift::Void __swiftcall SExpPrinter.newline()()
{
  if (v0[2])
  {
    v1._uint64_t countAndFlagsBits = 10;
    v1._object = (void *)0xE100000000000000;
    String.append(_:)(v1);
    uint64_t v2 = v0[3];
    uint64_t v3 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v4._uint64_t countAndFlagsBits = v2;
    v4._object = v3;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t destroy for SExpPrinter()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SExpPrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SExpPrinter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SExpPrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SExpPrinter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SExpPrinter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)Swift::String result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SExpPrinter()
{
  return &type metadata for SExpPrinter;
}

uint64_t destroy for DisplayList.OffsetAnimation()
{
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.OffsetAnimation(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

void *assignWithCopy for DisplayList.OffsetAnimation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.OffsetAnimation(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.OffsetAnimation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.OffsetAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)Swift::String result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.OffsetAnimation()
{
  return &type metadata for DisplayList.OffsetAnimation;
}

uint64_t destroy for DisplayList.ScaleAnimation()
{
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.ScaleAnimation(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  return a1;
}

void *assignWithCopy for DisplayList.ScaleAnimation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.ScaleAnimation(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ScaleAnimation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ScaleAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)Swift::String result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ScaleAnimation()
{
  return &type metadata for DisplayList.ScaleAnimation;
}

uint64_t destroy for DisplayList.RotationAnimation()
{
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.RotationAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for DisplayList.RotationAnimation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.RotationAnimation(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.RotationAnimation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.RotationAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)Swift::String result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.RotationAnimation()
{
  return &type metadata for DisplayList.RotationAnimation;
}

void *assignWithCopy for DisplayList.OpacityAnimation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DisplayList.OpacityAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.OpacityAnimation()
{
  return &type metadata for DisplayList.OpacityAnimation;
}

uint64_t specialized EffectAnimation.encode(to:)(int64_t a1)
{
  long long v3 = v1;
  double v5 = *v3;
  double v6 = v3[1];
  double v7 = v3[2];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  v9[2] = v11 + 1;
  v9[v11 + 4] = v8;
  *(void *)(a1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_21:
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    goto LABEL_8;
  }
  *(void *)(a1 + 8) = v8 + 1;
  uint64_t result = _RotationEffect.encode(to:)(a1, v5, v6, v7);
  if (v2) {
    return result;
  }
  ProtobufEncoder.endLengthDelimited()();
  double v5 = v3[3];
  double v6 = v3[4];
  double v7 = v3[5];
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  unint64_t v14 = v9[2];
  unint64_t v13 = v9[3];
  uint64_t v15 = (void *)(v14 + 1);
  if (v14 >= v13 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v9);
  }
  v9[2] = v15;
  v9[v14 + 4] = v8;
  *(void *)(a1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_23:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    uint64_t v15 = (void *)result;
    goto LABEL_13;
  }
  *(void *)(a1 + 8) = v8 + 1;
  uint64_t result = _RotationEffect.encode(to:)(a1, v5, v6, v7);
  if (v2) {
    return result;
  }
  ProtobufEncoder.endLengthDelimited()();
  uint64_t v9 = (void *)*((void *)v3 + 6);
  outlined retain of DisplayList.RotationAnimation((uint64_t)v3);
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v15 = *(void **)(a1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  unint64_t v17 = v15[2];
  unint64_t v16 = v15[3];
  unint64_t v18 = v17 + 1;
  if (v17 >= v16 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
    unint64_t v18 = v17 + 1;
    uint64_t v15 = (void *)result;
  }
  v15[2] = v18;
  v15[v17 + 4] = v8;
  *(void *)(a1 + 24) = v15;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v8 + 1;
    CodableAnimation.encode(to:)(a1, (uint64_t)v9);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
    return outlined release of DisplayList.RotationAnimation((uint64_t)v3);
  }
  return result;
}

uint64_t specialized EffectAnimation.encode(to:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t result = specialized ProtobufEncoder.messageField<A>(_:_:)(1, a3);
  if (!v4)
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(2, a4);
    swift_retain();
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    uint64_t v9 = *(void *)(a1 + 8);
    unint64_t v10 = *(void **)(a1 + 24);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      unint64_t v10 = (void *)result;
    }
    unint64_t v11 = v10[2];
    unint64_t v12 = v10[3];
    unint64_t v13 = v11 + 1;
    if (v11 >= v12 >> 1)
    {
      unint64_t v16 = v11 + 1;
      unint64_t v14 = v10;
      unint64_t v15 = v10[2];
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v11 + 1, 1, v14);
      unint64_t v11 = v15;
      unint64_t v13 = v16;
      unint64_t v10 = (void *)result;
    }
    v10[2] = v13;
    v10[v11 + 4] = v9;
    *(void *)(a1 + 24) = v10;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(a1 + 8) = v9 + 1;
      CodableAnimation.encode(to:)(a1, a2);
      ProtobufEncoder.endLengthDelimited()();
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized EffectAnimation.encode(to:)(uint64_t a1)
{
  long long v3 = v1;
  double v5 = *v3;
  double v6 = v3[1];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  }
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  void v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  *(void *)(a1 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_21:
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    goto LABEL_8;
  }
  *(void *)(a1 + 8) = v7 + 1;
  uint64_t result = _OffsetEffect.encode(to:)(a1, v5, v6);
  if (v2) {
    return result;
  }
  ProtobufEncoder.endLengthDelimited()();
  double v5 = v3[2];
  double v6 = v3[3];
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  unint64_t v13 = v8[2];
  unint64_t v12 = v8[3];
  unint64_t v14 = (void *)(v13 + 1);
  if (v13 >= v12 >> 1) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v8);
  }
  void v8[2] = v14;
  v8[v13 + 4] = v7;
  *(void *)(a1 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_23:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    unint64_t v14 = (void *)result;
    goto LABEL_13;
  }
  *(void *)(a1 + 8) = v7 + 1;
  uint64_t result = _OffsetEffect.encode(to:)(a1, v5, v6);
  if (v2) {
    return result;
  }
  ProtobufEncoder.endLengthDelimited()();
  uint64_t v8 = (void *)*((void *)v3 + 4);
  swift_retain();
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v14 = *(void **)(a1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  unint64_t v17 = v16 + 1;
  if (v16 >= v15 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
    unint64_t v17 = v16 + 1;
    unint64_t v14 = (void *)result;
  }
  void v14[2] = v17;
  v14[v16 + 4] = v7;
  *(void *)(a1 + 24) = v14;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v7 + 1;
    CodableAnimation.encode(to:)(a1, (uint64_t)v8);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
    return outlined release of DisplayList.OffsetAnimation((uint64_t)v3);
  }
  return result;
}

{
  double *v1;
  uint64_t v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  long long v3 = v1;
  double v5 = *v3;
  double v6 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v8 = v3[3];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  unint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  }
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  v10[2] = v12 + 1;
  v10[v12 + 4] = v9;
  *(void *)(a1 + 24) = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_21:
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    goto LABEL_8;
  }
  *(void *)(a1 + 8) = v9 + 1;
  uint64_t result = _ScaleEffect.encode(to:)(a1, v5, v6, v7, v8);
  if (v2) {
    return result;
  }
  ProtobufEncoder.endLengthDelimited()();
  double v5 = v3[4];
  double v6 = v3[5];
  uint64_t v7 = v3[6];
  uint64_t v8 = v3[7];
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  unint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  unint64_t v15 = v10[2];
  unint64_t v14 = v10[3];
  unint64_t v16 = (void *)(v15 + 1);
  if (v15 >= v14 >> 1) {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v10);
  }
  v10[2] = v16;
  v10[v15 + 4] = v9;
  *(void *)(a1 + 24) = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_23:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    unint64_t v16 = (void *)result;
    goto LABEL_13;
  }
  *(void *)(a1 + 8) = v9 + 1;
  uint64_t result = _ScaleEffect.encode(to:)(a1, v5, v6, v7, v8);
  if (v2) {
    return result;
  }
  ProtobufEncoder.endLengthDelimited()();
  unint64_t v10 = (void *)*((void *)v3 + 8);
  outlined retain of DisplayList.ScaleAnimation((uint64_t)v3);
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  unint64_t v9 = *(void *)(a1 + 8);
  unint64_t v16 = *(void **)(a1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  uint64_t v19 = v18 + 1;
  if (v18 >= v17 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
    uint64_t v19 = v18 + 1;
    unint64_t v16 = (void *)result;
  }
  v16[2] = v19;
  v16[v18 + 4] = v9;
  *(void *)(a1 + 24) = v16;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v9 + 1;
    CodableAnimation.encode(to:)(a1, (uint64_t)v10);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
    return outlined release of DisplayList.ScaleAnimation((uint64_t)v3);
  }
  return result;
}

uint64_t specialized static EffectAnimation<>.effect(value:size:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  CGFloat v12 = a2;
  if (a2 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1) {
      swift_once();
    }
    CGFloat v12 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  double v14 = a4 * a6;
  double v15 = a5 * a7;
  if (a3 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1) {
      swift_once();
    }
    a3 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  CGAffineTransformMakeTranslation(&t1, -v14, -v15);
  long long v35 = *(_OWORD *)&t1.c;
  long long v37 = *(_OWORD *)&t1.a;
  tdouble x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeScale(&t1, v12, a3);
  long long v18 = *(_OWORD *)&t1.a;
  long long v19 = *(_OWORD *)&t1.c;
  long long v20 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v37;
  *(_OWORD *)&t1.CGFloat c = v35;
  t1.tdouble x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&t2.CGFloat a = v18;
  *(_OWORD *)&t2.CGFloat c = v19;
  *(_OWORD *)&t2.tdouble x = v20;
  CGAffineTransformConcat(&v42, &t1, &t2);
  long long v36 = *(_OWORD *)&v42.c;
  long long v38 = *(_OWORD *)&v42.a;
  CGFloat v21 = v42.tx;
  CGFloat v22 = v42.ty;
  CGAffineTransformMakeTranslation(&t1, v14, v15);
  long long v23 = *(_OWORD *)&t1.a;
  long long v24 = *(_OWORD *)&t1.c;
  long long v25 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v38;
  *(_OWORD *)&t1.CGFloat c = v36;
  t1.tdouble x = v21;
  t1.tCGFloat y = v22;
  *(_OWORD *)&t2.CGFloat a = v23;
  *(_OWORD *)&t2.CGFloat c = v24;
  *(_OWORD *)&t2.tdouble x = v25;
  CGAffineTransformConcat(&v42, &t1, &t2);
  CGFloat a = v42.a;
  CGFloat b = v42.b;
  CGFloat c = v42.c;
  CGFloat d = v42.d;
  CGFloat v30 = v42.tx;
  CGFloat v31 = v42.ty;
  t1.CGFloat a = v42.a;
  t1.CGFloat b = v42.b;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = v42.c;
  t1.tdouble x = v42.d;
  t1.tCGFloat y = 0.0;
  long long v44 = *(_OWORD *)&v42.tx;
  uint64_t v45 = 0x3FF0000000000000;
  if (ProjectionTransform.isInvertible.getter())
  {
    uint64_t result = swift_allocObject();
    *(CGFloat *)(result + 16) = a;
    *(CGFloat *)(result + 24) = b;
    *(CGFloat *)(result + 32) = c;
    *(CGFloat *)(result + 40) = d;
    *(CGFloat *)(result + 48) = v30;
    *(CGFloat *)(result + 56) = v31;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 64) = 0;
    char v33 = 8;
    *(unsigned char *)(result + 88) = 0;
  }
  else
  {
    t2.CGFloat a = 0.0;
    t2.CGFloat b = -2.68156159e154;
    _StringGuts.grow(_:)(28);
    v42.CGFloat a = t2.a;
    v42.CGFloat b = t2.b;
    v34._object = (void *)0x800000024621DC20;
    v34._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v34);
    CGAffineTransform t2 = t1;
    long long v40 = v44;
    uint64_t v41 = v45;
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(*(uint64_t *)&v42.a, *(unint64_t *)&v42.b);
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v33 = 19;
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = v33;
  return result;
}

uint64_t specialized static EffectAnimation<>.effect(value:size:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  CGAffineTransformMakeTranslation(&v13, a2, a3);
  CGFloat a = v13.a;
  CGFloat b = v13.b;
  CGFloat c = v13.c;
  CGFloat d = v13.d;
  tdouble x = v13.tx;
  tCGFloat y = v13.ty;
  v13.CGFloat c = 0.0;
  v13.CGFloat d = c;
  v13.tdouble x = d;
  v13.tCGFloat y = 0.0;
  CGFloat v14 = tx;
  CGFloat v15 = ty;
  uint64_t v16 = 0x3FF0000000000000;
  if (ProjectionTransform.isInvertible.getter())
  {
    uint64_t result = swift_allocObject();
    *(CGFloat *)(result + 16) = a;
    *(CGFloat *)(result + 24) = b;
    *(CGFloat *)(result + 32) = c;
    *(CGFloat *)(result + 40) = d;
    *(CGFloat *)(result + 48) = tx;
    *(CGFloat *)(result + 56) = ty;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 64) = 0;
    char v11 = 8;
    *(unsigned char *)(result + 88) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(28);
    v12._object = (void *)0x800000024621DC20;
    v12._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v12);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v11 = 19;
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = v11;
  return result;
}

uint64_t specialized static EffectAnimation<>.effect(value:size:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  CGAffineTransformMakeTranslation(&v22, a3 * a5, a4 * a6);
  CGAffineTransformRotate(&v18, &v22, a2);
  CGAffineTransform v22 = v18;
  CGAffineTransformTranslate(&v18, &v22, -(a3 * a5), -(a4 * a6));
  long long v12 = *(_OWORD *)&v18.a;
  long long v13 = *(_OWORD *)&v18.c;
  long long v14 = *(_OWORD *)&v18.tx;
  *(_OWORD *)&v22.CGFloat a = *(_OWORD *)&v18.a;
  v22.CGFloat c = 0.0;
  *(_OWORD *)&v22.CGFloat d = *(_OWORD *)&v18.c;
  v22.tCGFloat y = 0.0;
  long long v23 = *(_OWORD *)&v18.tx;
  uint64_t v24 = 0x3FF0000000000000;
  if (ProjectionTransform.isInvertible.getter())
  {
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = v12;
    *(_OWORD *)(result + 32) = v13;
    *(_OWORD *)(result + 48) = v14;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 64) = 0;
    char v16 = 8;
    *(unsigned char *)(result + 88) = 0;
  }
  else
  {
    v18.CGFloat a = 0.0;
    v18.CGFloat b = -2.68156159e154;
    _StringGuts.grow(_:)(28);
    long long v21 = *(_OWORD *)&v18.a;
    v17._object = (void *)0x800000024621DC20;
    v17._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v17);
    CGAffineTransform v18 = v22;
    long long v19 = v23;
    uint64_t v20 = v24;
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(v21, *((unint64_t *)&v21 + 1));
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v16 = 19;
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = v16;
  return result;
}

uint64_t EffectAnimator.evaluate(_:at:size:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, double a5, double a6)
{
  CGFloat v71 = (char *)a2;
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  CGFloat v67 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v16 = (char *)&v57 - v15;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v70 = AssociatedTypeWitness;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(v17 - 8);
  uint64_t v65 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v62 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  CGFloat v61 = (char *)&v57 - v20;
  MEMORY[0x270FA5388](v21);
  CGFloat v66 = (char *)&v57 - v22;
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v57 - v25;
  uint64_t v27 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v28);
  CGFloat v30 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *a3;
  outlined init with copy of AnyTrackedValue((uint64_t)v71, (uint64_t)v73);
  type metadata accessor for _DisplayList_AnyEffectAnimation();
  int v32 = swift_dynamicCast();
  char v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  if (!v32)
  {
    uint64_t v34 = 1;
    v33(v26, 1, 1, v10);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 12) = 19;
    return v34;
  }
  uint64_t v60 = a1;
  v33(v26, 0, 1, v10);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v30, v26, v10);
  uint64_t v34 = *v69;
  long long v35 = *(void (**)(void, void))(v11 + 64);
  uint64_t v36 = v27;
  CGFloat v71 = v30;
  if (!v34)
  {
    unint64_t v59 = v35;
    v35(v10, v11);
    uint64_t v37 = AssociatedConformanceWitness;
    unint64_t v57 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    uint64_t v38 = v70;
    v57(v70, AssociatedConformanceWitness);
    uint64_t v58 = v36;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v68 + 8);
    v39(v16, v38);
    (*(void (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
    v57(v38, v37);
    v39(v16, v38);
    uint64_t v40 = v65;
    swift_getAssociatedConformanceWitness();
    uint64_t v41 = v66;
    uint64_t v42 = (uint64_t)v61;
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    uint64_t v43 = v64;
    unint64_t v57 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v57(v42, v40);
    type metadata accessor for AnimatorState();
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v42, v41, v40);
    v73[0] = 0;
    uint64_t v34 = AnimatorState.__allocating_init(animation:interval:at:in:)(v44, v42, v73);
    uint64_t v45 = v40;
    uint64_t v36 = v58;
    v57((uint64_t)v41, v45);
    long long v46 = v69;
    outlined consume of EffectAnimator<A>.State<A>(*v69);
    long long v35 = v59;
    *long long v46 = v34;
  }
  uint64_t v47 = v67;
  v35(v10, v11);
  if (v34 == 1) {
    goto LABEL_8;
  }
  if (v34)
  {
    uint64_t v48 = AssociatedConformanceWitness;
    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    swift_retain();
    uint64_t v50 = (uint64_t)v62;
    v49(v70, v48);
    v73[0] = v31;
    char v72 = 1;
    if ((AnimatorState.update(_:at:environment:)(v50, (double *)v73, 0x100000000uLL) & 1) == 0)
    {
      uint64_t v54 = v64;
      uint64_t v53 = v65;
      double v55 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v66, v50, v65);
      uint64_t v52 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v55, v70, v48);
      outlined consume of EffectAnimator<A>.State<A>(v34);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v62, v53);
      uint64_t v34 = 0;
      goto LABEL_11;
    }
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v50, v65);
    outlined consume of EffectAnimator<A>.State<A>(v34);
    uint64_t v51 = v69;
    outlined consume of EffectAnimator<A>.State<A>(*v69);
    uint64_t v34 = 1;
    unint64_t *v51 = 1;
LABEL_8:
    uint64_t v52 = v70;
LABEL_11:
    (*(void (**)(char *, uint64_t, uint64_t, double, double))(v11 + 96))(v47, v10, v11, a5, a6);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v47, v52);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v71, v10);
    return v34;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for EffectAnimation.animation.getter in conformance DisplayList.OpacityAnimation()
{
  return swift_retain();
}

float protocol witness for static EffectAnimation.effect(value:size:) in conformance DisplayList.OpacityAnimation@<S0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  float result = *a1;
  *(void *)a2 = LODWORD(result);
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 4;
  return result;
}

void protocol witness for _DisplayList_AnyEffectAnimation.makeAnimator() in conformance DisplayList.OpacityAnimation(void *a1@<X8>)
{
  type metadata accessor for EffectAnimator<DisplayList.OpacityAnimation>();
  a1[3] = v2;
  a1[4] = &protocol witness table for EffectAnimator<A>;
  *a1 = 0;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.OpacityAnimation(uint64_t a1)
{
  return specialized EffectAnimation.encode(to:)(a1, *(void *)(v1 + 16), *(double *)v1, *(double *)(v1 + 8));
}

void *protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.OpacityAnimation@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  float result = specialized EffectAnimation.init(from:)(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = result;
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : Animatable in DisplayList.OpacityAnimation()
{
  return &protocol witness table for _OpacityEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufDecodableMessage in DisplayList.OpacityAnimation()
{
  return &protocol witness table for _OpacityEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufEncodableMessage in DisplayList.OpacityAnimation()
{
  return &protocol witness table for _OpacityEffect;
}

__n128 protocol witness for EffectAnimation.to.getter in conformance DisplayList.OffsetAnimation@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

uint64_t protocol witness for EffectAnimation.animation.getter in conformance DisplayList.OffsetAnimation()
{
  return swift_retain();
}

uint64_t protocol witness for static EffectAnimation.effect(value:size:) in conformance DisplayList.OffsetAnimation@<X0>(CGFloat *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static EffectAnimation<>.effect(value:size:)(a2, *a1, a1[1]);
}

void protocol witness for _DisplayList_AnyEffectAnimation.makeAnimator() in conformance DisplayList.OffsetAnimation(void *a1@<X8>)
{
  type metadata accessor for EffectAnimator<DisplayList.RotationAnimation>(0, &lazy cache variable for type metadata for EffectAnimator<DisplayList.OffsetAnimation>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation);
  a1[3] = v2;
  a1[4] = &protocol witness table for EffectAnimator<A>;
  *a1 = 0;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.OffsetAnimation(uint64_t a1)
{
  return specialized EffectAnimation.encode(to:)(a1);
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.OffsetAnimation@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized EffectAnimation.init(from:)(a1, (double *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

__n128 protocol witness for EffectAnimation.to.getter in conformance DisplayList.ScaleAnimation@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 32);
  long long v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t protocol witness for EffectAnimation.animation.getter in conformance DisplayList.ScaleAnimation()
{
  return swift_retain();
}

uint64_t protocol witness for static EffectAnimation.effect(value:size:) in conformance DisplayList.ScaleAnimation@<X0>(CGFloat *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return specialized static EffectAnimation<>.effect(value:size:)(a2, *a1, a1[1], a1[2], a1[3], a3, a4);
}

void protocol witness for _DisplayList_AnyEffectAnimation.makeAnimator() in conformance DisplayList.ScaleAnimation(void *a1@<X8>)
{
  type metadata accessor for EffectAnimator<DisplayList.RotationAnimation>(0, &lazy cache variable for type metadata for EffectAnimator<DisplayList.ScaleAnimation>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation);
  a1[3] = v2;
  a1[4] = &protocol witness table for EffectAnimator<A>;
  *a1 = 0;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.ScaleAnimation(uint64_t a1)
{
  return specialized EffectAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.ScaleAnimation@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  return specialized EffectAnimation.init(from:)(a1, a2);
}

double protocol witness for EffectAnimation.from.getter in conformance DisplayList.RotationAnimation@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

double protocol witness for EffectAnimation.to.getter in conformance DisplayList.RotationAnimation@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for EffectAnimation.animation.getter in conformance DisplayList.RotationAnimation()
{
  return swift_retain();
}

uint64_t protocol witness for static EffectAnimation.effect(value:size:) in conformance DisplayList.RotationAnimation@<X0>(CGFloat *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return specialized static EffectAnimation<>.effect(value:size:)(a2, *a1, a1[1], a1[2], a3, a4);
}

void protocol witness for _DisplayList_AnyEffectAnimation.makeAnimator() in conformance DisplayList.RotationAnimation(void *a1@<X8>)
{
  type metadata accessor for EffectAnimator<DisplayList.RotationAnimation>(0, &lazy cache variable for type metadata for EffectAnimator<DisplayList.RotationAnimation>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation);
  a1[3] = v2;
  a1[4] = &protocol witness table for EffectAnimator<A>;
  *a1 = 0;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.RotationAnimation(int64_t a1)
{
  return specialized EffectAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.RotationAnimation@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  return specialized EffectAnimation.init(from:)(a1, a2);
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufDecodableMessage in DisplayList.RotationAnimation()
{
  return &protocol witness table for _RotationEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufEncodableMessage in DisplayList.RotationAnimation()
{
  return &protocol witness table for _RotationEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufDecodableMessage in DisplayList.ScaleAnimation()
{
  return &protocol witness table for _ScaleEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufEncodableMessage in DisplayList.ScaleAnimation()
{
  return &protocol witness table for _ScaleEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufDecodableMessage in DisplayList.OffsetAnimation()
{
  return &protocol witness table for _OffsetEffect;
}

_UNKNOWN **associated type witness table accessor for EffectAnimation.Value : ProtobufEncodableMessage in DisplayList.OffsetAnimation()
{
  return &protocol witness table for _OffsetEffect;
}

void type metadata accessor for EffectAnimator<DisplayList.OpacityAnimation>()
{
  if (!lazy cache variable for type metadata for EffectAnimator<DisplayList.OpacityAnimation>)
  {
    unint64_t v0 = type metadata accessor for EffectAnimator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EffectAnimator<DisplayList.OpacityAnimation>);
    }
  }
}

uint64_t type metadata accessor for EffectAnimator()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation;
  if (!lazy protocol witness table cache variable for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.RotationAnimation and conformance DisplayList.RotationAnimation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation;
  if (!lazy protocol witness table cache variable for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ScaleAnimation and conformance DisplayList.ScaleAnimation);
  }
  return result;
}

void type metadata accessor for EffectAnimator<DisplayList.RotationAnimation>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for EffectAnimator();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation;
  if (!lazy protocol witness table cache variable for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.OffsetAnimation and conformance DisplayList.OffsetAnimation);
  }
  return result;
}

uint64_t sub_245B863B0()
{
  return swift_deallocObject();
}

uint64_t outlined release of DisplayList.OffsetAnimation(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of DisplayList.ScaleAnimation(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of DisplayList.ScaleAnimation(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of DisplayList.RotationAnimation(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of DisplayList.RotationAnimation(uint64_t a1)
{
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for EffectAnimator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 2) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for EffectAnimator(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for EffectAnimator(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 >= 2)
  {
    if (v4 >= 2)
    {
      *a1 = v4;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v4;
    if (v4 >= 2) {
      swift_retain();
    }
  }
  return a1;
}

unint64_t *assignWithTake for EffectAnimator(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 >= 2)
  {
    if (v3 >= 2)
    {
      *a1 = v3;
      swift_release();
      return a1;
    }
    swift_release();
  }
  *a1 = v3;
  return a1;
}

uint64_t getEnumTagSinglePayload for EffectAnimator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EffectAnimator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

unint64_t type metadata accessor for _DisplayList_AnyEffectAnimation()
{
  unint64_t result = lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation;
  if (!lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EffectAnimator.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for EffectAnimator.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for EffectAnimator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for EffectAnimator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EffectAnimator.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EffectAnimator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for EffectAnimator.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for Text.Effect.RenderSegmentation.Effect(uint64_t a1)
{
  outlined consume of Text.Layout.Line.Line(*(void **)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.Effect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  unsigned int v4 = *(void **)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  outlined copy of Text.Layout.Line.Line(v4, v5, v6);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.RenderSegmentation.Effect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unsigned int v4 = *(void **)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  outlined copy of Text.Layout.Line.Line(v4, v5, v6);
  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.RenderSegmentation.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  char v6 = *(void **)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  outlined consume of Text.Layout.Line.Line(v6, v7, v8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.RenderSegmentation.Effect(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.RenderSegmentation.Effect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 88) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.RenderSegmentation.Effect()
{
  return &type metadata for Text.Effect.RenderSegmentation.Effect;
}

char *initializeBufferWithCopyOfBuffer for Text.Effect.RenderSegmentation.StaticRuns(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *(void *)a1 = *a2;
    a1 = &v22[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = (uint64_t)a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of Text.Layout.Line.Line(*a2, v8, v9);
    *(void *)a1 = v7;
    *((void *)a1 + 1) = v8;
    a1[16] = v9;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = (uint64_t)a2 + v10;
    _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = a3[8];
    *(void *)&a1[a3[7]] = *(char **)((char *)a2 + a3[7]);
    uint64_t v15 = &a1[v14];
    char v16 = (_OWORD *)((char *)a2 + v14);
    long long v17 = v16[1];
    *(_OWORD *)uint64_t v15 = *v16;
    *((_OWORD *)v15 + 1) = v17;
    uint64_t v18 = a3[9];
    uint64_t v19 = &a1[v18];
    uint64_t v20 = (_OWORD *)((char *)a2 + v18);
    long long v21 = v20[1];
    *(_OWORD *)uint64_t v19 = *v20;
    *((_OWORD *)v19 + 1) = v21;
  }
  return a1;
}

uint64_t destroy for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2)
{
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  char v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  uint64_t v13 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a3[9];
  uint64_t v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  long long v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v7, v8);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of Text.Layout.Line.Line(v9, v10, v11);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  void v17[2] = v18[2];
  v17[3] = v18[3];
  uint64_t v19 = a3[9];
  long long v20 = (void *)(a1 + v19);
  long long v21 = (void *)(a2 + v19);
  *long long v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  v20[3] = v21[3];
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.RenderSegmentation.StaticRuns(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
  a1[3] = a2[3];
  uint64_t v7 = a3[6];
  char v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  long long v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[9];
  uint64_t v16 = (_OWORD *)((char *)a1 + v15);
  uint64_t v17 = (_OWORD *)((char *)a2 + v15);
  long long v18 = v17[1];
  _OWORD *v16 = *v17;
  v16[1] = v18;
  return a1;
}

uint64_t assignWithTake for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  long long v17 = v16[1];
  _OWORD *v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a3[9];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  long long v20 = (_OWORD *)(a2 + v18);
  long long v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245B871F0);
}

uint64_t sub_245B871F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245B872C8);
}

uint64_t sub_245B872C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 16) = -(char)a2;
  }
  else
  {
    _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Effect.RenderSegmentation.StaticRuns);
}

void type metadata completion function for Text.Effect.RenderSegmentation.StaticRuns()
{
  _ss8RangeSetVySiGMaTm_0(319, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for Text.Effect.RenderSegmentation()
{
  return &type metadata for Text.Effect.RenderSegmentation;
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.StaticLines(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.RenderSegmentation.StaticLines(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for Text.Effect.RenderSegmentation.StaticLines(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticLines(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.RenderSegmentation.StaticLines()
{
  return &type metadata for Text.Effect.RenderSegmentation.StaticLines;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation.StaticLines> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.RenderSegmentation.StaticLines> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
  }
  return result;
}

uint64_t Text.Effect.RenderSegmentation.StaticRuns.makeIterator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v39 = a1;
  _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v38 = (char *)&v35 - v4;
  uint64_t v42 = type metadata accessor for RangeSet<>.IndexSequence;
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v37 = (char *)&v35 - v6;
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v36 = v7 - 8;
  MEMORY[0x270FA5388](v7 - 8);
  long long v35 = (char *)&v35 - v8;
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v35 - v15;
  long long v17 = *(void **)v2;
  uint64_t v18 = *(void *)(v2 + 8);
  char v19 = *(unsigned char *)(v2 + 16);
  uint64_t v20 = *(void *)(v2 + 24);
  uint64_t v21 = *(void *)(v2 + 32);
  int v22 = *(_DWORD *)(v2 + 40);
  uint64_t v23 = v2 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v24(v16, v23, v10);
  uint64_t v25 = v39;
  *uint64_t v39 = v17;
  v25[1] = v18;
  *((unsigned char *)v25 + 16) = v19;
  v25[3] = v20;
  v25[4] = v21;
  *((_DWORD *)v25 + 10) = v22;
  uint64_t v26 = v25;
  v24(v13, (uint64_t)v16, v10);
  outlined copy of Text.Layout.Line.Line(v17, v18, v19);
  uint64_t v27 = v38;
  RangeSet.ranges.getter();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  v28(v13, v10);
  uint64_t v30 = v40;
  uint64_t v29 = v41;
  uint64_t v31 = (uint64_t)v37;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v27, v41);
  int v32 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(&v35[*(int *)(v36 + 56)], v31, v29);
  *int v32 = 0;
  v32[1] = 0;
  v28(v16, v10);
  outlined destroy of RangeSet<Int><>.IndexSequence(v31, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))v42);
  uint64_t v33 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0);
  return outlined init with take of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v32, (uint64_t)v26 + *(int *)(v33 + 20));
}

void Text.Effect.RenderSegmentation.StaticRuns.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0) + 20));
  uint64_t v5 = *v4;
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  if (v5 >= RangeSet.Ranges.count.getter())
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  RangeSet.Ranges.subscript.getter();
  uint64_t v6 = v4[1];
  uint64_t v7 = v17 + v6;
  if (__OFADD__(v17, v6))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v4[1] = v8;
  RangeSet.Ranges.subscript.getter();
  if (__OFSUB__(v18, v17))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v8 >= v18 - v17)
  {
    uint64_t *v4 = v5 + 1;
    v4[1] = 0;
  }
  uint64_t v10 = *(void **)v1;
  uint64_t v9 = *(void *)(v1 + 8);
  long long v16 = *(_OWORD *)(v2 + 24);
  uint64_t v11 = *(unsigned int *)(v2 + 40);
  uint64_t v12 = *(void **)v2;
  uint64_t v13 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v12, v13, 0);
    outlined copy of Text.Layout.Line.Line(v10, v9, 0);

    swift_release();
    goto LABEL_12;
  }
  outlined copy of Text.Layout.Line.Line(v12, v13, 1);
  id v14 = (id)_NSTextLineFragmentGetCTLine(v10);
  if (!v14)
  {
LABEL_17:
    __break(1u);
    return;
  }
  id v15 = v14;
  outlined consume of Text.Layout.Line.Line(v10, v9, 1);
  uint64_t v9 = 0;
  uint64_t v10 = v15;
LABEL_12:
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = v16;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v9;
}

uint64_t Text.Effect.RenderSegmentation.Segment.characterRanges.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Text.Effect.RenderSegmentation.Segment(v2, (uint64_t)v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of Text.Effect.RenderSegmentation.Segment((uint64_t)v9, (uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      char v11 = v6[16];
      int v12 = *((_DWORD *)v6 + 10);
      long long v29 = *(_OWORD *)v6;
      v30[0] = v11;
      *(_OWORD *)&v30[8] = *(_OWORD *)(v6 + 24);
      *(_DWORD *)&v30[24] = v12;
      Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)&v6[*(int *)(v4 + 24)], a1);
      return _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_0((uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    }
    else
    {
      id v15 = (void *)*((void *)v9 + 3);
      uint64_t v16 = *((void *)v9 + 4);
      char v17 = v9[40];
      uint64_t v18 = *((void *)v9 + 6);
      uint64_t v19 = *((void *)v9 + 7);
      int v20 = *((_DWORD *)v9 + 16);
      uint64_t v21 = *((void *)v9 + 9);
      uint64_t v22 = *((void *)v9 + 10);
      uint64_t v23 = *((void *)v9 + 11);
      outlined copy of Text.Layout.Line.Line(v15, v16, v17);
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      swift_bridgeObjectRetain();
      RangeSet.init()();
      *(void *)&long long v29 = v15;
      *((void *)&v29 + 1) = v16;
      v30[0] = v17;
      *(void *)&v30[8] = v18;
      *(void *)&v30[16] = v19;
      *(_DWORD *)&v30[24] = v20;
      uint64_t v31 = v21;
      uint64_t v32 = v22;
      uint64_t v33 = v23;
      v24[0] = v15;
      v24[1] = v16;
      char v25 = v17;
      uint64_t v26 = v18;
      uint64_t v27 = v19;
      int v28 = v20;
      Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)v24, a1);
      outlined consume of Text.Layout.Line.Line(v15, v16, v17);
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v15, v16, v17);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    long long v14 = *((_OWORD *)v9 + 1);
    long long v29 = *(_OWORD *)v9;
    *(_OWORD *)uint64_t v30 = v14;
    *(_OWORD *)&v30[16] = *((_OWORD *)v9 + 2);
    uint64_t v31 = *((void *)v9 + 6);
    Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
    return outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v29);
  }
}

void Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter()
{
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  RangeSet.init()();
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  if (v2)
  {
    uint64_t v14 = v0;
    outlined retain of Text.Effect.RenderSegmentation.StaticLines(v0);
    for (unint64_t i = (char *)(v1 + 48); ; i += 48)
    {
      uint64_t v4 = (void *)*((void *)i - 2);
      uint64_t v5 = *((void *)i - 1);
      char v6 = *i;
      if (*i)
      {
        outlined copy of Text.Layout.Line.Line(*((void **)i - 2), *((void *)i - 1), 1);
        location = (char *)objc_msgSend(v4, sel_characterRange);
        CFIndex length = v8;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*((void **)i - 2), *((void *)i - 1), 0);
        outlined copy of Text.Layout.Line.Line(v4, v5, 0);
        uint64_t v10 = v4;
        CFRange StringRange = CTLineGetStringRange(v10);
        location = (char *)StringRange.location;
        CFIndex length = StringRange.length;

        outlined consume of Text.Layout.Line.Line(v4, v5, 0);
      }
      int v12 = &location[length];
      if (__OFADD__(location, length)) {
        break;
      }
      if ((uint64_t)v12 < (uint64_t)location) {
        goto LABEL_15;
      }
      uint64_t v16 = location;
      char v17 = &location[length];
      if (__OFSUB__(v12, location)) {
        goto LABEL_16;
      }
      if (v12 != location)
      {
        type metadata accessor for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
        uint64_t v13 = (void (*)(char *, void))RangeSet._ranges.modify();
        type metadata accessor for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
        RangeSet.Ranges._insert(contentsOf:)();
        v13(v15, 0);
      }
      outlined consume of Text.Layout.Line.Line(v4, v5, v6);
      if (!--v2)
      {
        outlined release of Text.Effect.RenderSegmentation.StaticLines(v14);
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation.StaticLines(void *a1, unint64_t *a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x60uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  long long v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + 1) = v7;
  *((_OWORD *)v5 + 2) = *(_OWORD *)(v2 + 32);
  *((void *)v5 + 6) = *(void *)(v2 + 48);
  *((void *)v5 + 11) = Text.Effect.RenderSegmentation.StaticLines.subscript.read((void (**)(void ***))v5 + 7, v6);
  return protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation.StaticLines;
}

void protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation.StaticLines(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(void))(*(void *)a1 + 88))();

  free(v1);
}

void (*Text.Effect.RenderSegmentation.StaticLines.subscript.read(void (**a1)(void ***a1), unint64_t a2))(void ***a1)
{
  unint64_t result = (void (*)(void ***))malloc(0x2CuLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    unint64_t v6 = result;
    uint64_t v7 = *(void *)v2 + 48 * a2;
    CFIndex v8 = *(void **)(v7 + 32);
    uint64_t v9 = *(void *)(v7 + 40);
    char v10 = *(unsigned char *)(v7 + 48);
    int v11 = *(_DWORD *)(v7 + 72);
    long long v12 = *(_OWORD *)(v7 + 56);
    *(void *)unint64_t v6 = v8;
    *((void *)v6 + 1) = v9;
    *((unsigned char *)v6 + 16) = v10;
    *(_OWORD *)((char *)v6 + 24) = v12;
    *((_DWORD *)v6 + 10) = v11;
    outlined copy of Text.Layout.Line.Line(v8, v9, v10);
    return Text.Effect.RenderSegmentation.StaticLines.subscript.read;
  }
  __break(1u);
  return result;
}

void Text.Effect.RenderSegmentation.StaticLines.subscript.read(void ***a1)
{
  uint64_t v1 = *a1;
  outlined consume of Text.Layout.Line.Line(**a1, (uint64_t)v1[1], *((unsigned char *)v1 + 16));

  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.RenderSegmentation.StaticLines@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *(uint64_t **)v2, *(void *)(*(void *)v2 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 8);
    uint64_t v5 = *(void *)(v2 + 16);
    *(void *)(a2 + 16) = result;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v5;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(v2 + 40);
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    swift_bridgeObjectRetain();
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.RenderSegmentation.StaticLines@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Effect.RenderSegmentation.StaticLines@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + 56) = 0;
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.RenderSegmentation.StaticLines()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v4[0] = *(_OWORD *)v0;
  v4[1] = v1;
  v4[2] = *(_OWORD *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v4);
  outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.RenderSegmentation.StaticLines(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation.StaticLines> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.RenderSegmentation.StaticLines>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation.StaticLines> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines, (uint64_t)&type metadata for Text.Effect.RenderSegmentation.StaticLines, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.RenderSegmentation.StaticLines()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation.StaticLines> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>(255, &lazy cache variable for type metadata for Slice<Text.Effect.RenderSegmentation.StaticLines>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticLines and conformance Text.Effect.RenderSegmentation.StaticLines, (uint64_t)&type metadata for Text.Effect.RenderSegmentation.StaticLines, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.RenderSegmentation()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.RenderSegmentation> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.RenderSegmentation>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
  }
  return result;
}

id Text.Effect.RenderSegmentation.StaticRuns.init(line:glyphOrigin:runs:lineIndex:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v64 = a3;
  _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v12 = v11;
  CGFloat v67 = *(int **)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v65 = (char *)v60 - v13;
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v60 - v17;
  CGFloat v66 = type metadata accessor for RangeSet<>.IndexSequence;
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v19 - 8);
  CGFloat v63 = (char *)v60 - v20;
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v22 = v21 - 8;
  MEMORY[0x270FA5388](v21);
  uint64_t v68 = (void *)((char *)v60 - v23);
  long long v24 = a1[1];
  long long v75 = *a1;
  v76[0] = v24;
  *(_OWORD *)((char *)v76 + 12) = *(long long *)((char *)a1 + 28);
  long long v25 = *(_OWORD *)((char *)v76 + 12);
  *(_OWORD *)a4 = v75;
  *(_OWORD *)(a4 + 16) = v24;
  *(_OWORD *)(a4 + 28) = v25;
  *(double *)(a4 + 48) = a5;
  *(double *)(a4 + 56) = a6;
  uint64_t v26 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v27(a4 + v26[6], a2, v15);
  *(void *)(a4 + v26[7]) = v64;
  CGFloat v28 = *MEMORY[0x263F001A0];
  CGFloat v29 = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat v30 = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat v31 = *(double *)(MEMORY[0x263F001A0] + 24);
  outlined retain of Text.Layout.Line((uint64_t)&v75);
  CGFloat v32 = specialized RangeSet<>.reduce<A>(_:_:)(v28, v29, v30, v31, a2, (uint64_t)&v75);
  uint64_t v33 = v26[8];
  uint64_t v64 = a4;
  uint64_t v34 = a4 + v33;
  *(CGFloat *)uint64_t v34 = v32;
  *(void *)(v34 + 8) = v35;
  *(void *)(v34 + 16) = v36;
  *(void *)(v34 + 24) = v37;
  uint64_t v62 = a2;
  v27((uint64_t)v18, a2, v15);
  uint64_t v38 = v65;
  RangeSet.ranges.getter();
  uint64_t v39 = *(uint64_t (**)())(v16 + 8);
  uint64_t v61 = v15;
  uint64_t v40 = v15;
  uint64_t v41 = v68;
  v60[1] = v16 + 8;
  ((void (*)(char *, uint64_t))v39)(v18, v40);
  uint64_t v42 = v67;
  uint64_t v43 = (uint64_t)v63;
  (*((void (**)(char *, char *, uint64_t))v67 + 4))(v63, v38, v12);
  (*((void (**)(char *, uint64_t, uint64_t))v42 + 2))((char *)v41 + *(int *)(v22 + 56), v43, v12);
  *uint64_t v41 = 0;
  v41[1] = 0;
  outlined destroy of RangeSet<Int><>.IndexSequence(v43, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))v66);
  uint64_t v44 = *v41;
  if (v44 >= RangeSet.Ranges.count.getter())
  {
    outlined release of Text.Layout.Line((uint64_t)&v75);
    double v46 = 0.0;
    double v47 = 0.0;
    double v49 = 0.0;
    double v50 = 0.0;
LABEL_21:
    ((void (*)(uint64_t, uint64_t))v39)(v62, v61);
    id result = (id)outlined destroy of RangeSet<Int><>.IndexSequence((uint64_t)v41, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    unint64_t v59 = (double *)(v64 + v26[9]);
    double *v59 = v50;
    v59[1] = v49;
    v59[2] = v47;
    v59[3] = v46;
  }
  else
  {
    CGFloat v66 = v39;
    CGFloat v67 = v26;
    uint64_t v45 = v41[1];
    double v46 = 0.0;
    double v47 = 0.0;
    uint64_t v48 = (void *)v75;
    double v49 = 0.0;
    double v50 = 0.0;
    char v51 = v76[0];
    while (1)
    {
      id result = (id)RangeSet.Ranges.subscript.getter();
      CFIndex v56 = v69 + v45;
      if (__OFADD__(v69, v45)) {
        break;
      }
      if (__OFADD__(v45++, 1)) {
        goto LABEL_23;
      }
      id result = (id)RangeSet.Ranges.subscript.getter();
      if (__OFSUB__(v70, v69)) {
        goto LABEL_24;
      }
      if (v45 >= v70 - v69)
      {
        uint64_t v45 = 0;
        uint64_t *v68 = ++v44;
      }
      outlined retain of Text.Layout.Line((uint64_t)&v75);
      if (v51)
      {
        id result = (id)_NSTextLineFragmentGetCTLine(v48);
        if (!result) {
          goto LABEL_25;
        }
        uint64_t v52 = result;
        outlined release of Text.Layout.Line((uint64_t)&v75);
      }
      else
      {
        outlined retain of Text.Layout.Line((uint64_t)&v75);

        swift_release();
        uint64_t v52 = v48;
      }
      swift_retain();
      uint64_t v53 = v52;
      uint64_t v54 = (id)_CTLineGetRunAtIndex(v53, v56);
      specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v54, (CFRange)0, v71);
      swift_release_n();

      if (v50 <= v72) {
        double v50 = v72;
      }
      if (v49 <= v73) {
        double v49 = v73;
      }
      if (v47 <= v74) {
        double v47 = v74;
      }
      double v46 = v46 + v71[2];
      if (v44 >= RangeSet.Ranges.count.getter())
      {
        outlined release of Text.Layout.Line((uint64_t)&v75);
        uint64_t v26 = v67;
        uint64_t v58 = v68;
        v68[1] = v45;
        uint64_t v41 = v58;
        uint64_t v39 = v66;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Text.Effect.RenderSegmentation.StaticRuns@<X0>(void *a1@<X8>)
{
  Text.Effect.RenderSegmentation.StaticRuns.makeIterator()(a1);
  return _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_0(v1, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.RenderSegmentation.StaticRuns()
{
  specialized _copySequenceToContiguousArray<A>(_:)(v0);
  uint64_t v2 = v1;
  _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_0(v0, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  return v2;
}

uint64_t flushPendingStaticLines #1 (lineIndex:) in Text.Effect.RenderSegmentation.init(layout:fragment:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v8 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = (uint64_t *)(a2 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15) {
    return result;
  }
  uint64_t v16 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  BOOL v17 = __OFSUB__(a1, v15);
  uint64_t v18 = a1 - v15;
  if (v17)
  {
    __break(1u);
    goto LABEL_15;
  }
  a3 += 2;
  uint64_t v19 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Text.Effect.RenderSegmentation.StaticLines.init(lines:glyphOrigins:lineIndex:)(v14, v19, v18, (CGFloat *)v29);
  swift_bridgeObjectRelease();
  long long v20 = v29[1];
  *(_OWORD *)uint64_t v11 = v29[0];
  *((_OWORD *)v11 + 1) = v20;
  *((_OWORD *)v11 + 2) = v29[2];
  *((void *)v11 + 6) = v30;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  unint64_t v8 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_15:
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, v8);
    *a3 = v8;
  }
  unint64_t v23 = *(void *)(v8 + 16);
  unint64_t v22 = *(void *)(v8 + 24);
  if (v23 >= v22 >> 1)
  {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v8);
    *a3 = v8;
  }
  *(void *)(v8 + 16) = v23 + 1;
  outlined init with take of Text.Effect.RenderSegmentation.Segment((uint64_t)v11, v8+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v23, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  swift_endAccess();
  swift_beginAccess();
  int v24 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *v12;
  if (v24)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v25 + 16));
  }
  else
  {
    *uint64_t v12 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v25 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  swift_beginAccess();
  int v26 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v16;
  if (v26)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v27 + 16));
  }
  else
  {
    uint64_t *v16 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v27 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  return swift_endAccess();
}

uint64_t specialized flushStaticRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7, double a8, double a9)
{
  uint64_t v35 = a7;
  uint64_t v33 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v36 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  unint64_t v23 = (char *)&v33 - v22;
  uint64_t v34 = a4;
  flushPendingStaticLines #1 (lineIndex:) in Text.Effect.RenderSegmentation.init(layout:fragment:)(a4, a1, a2, a3);
  swift_beginAccess();
  int v24 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v24(v23, a5, v20);
  LOBYTE(a1) = RangeSet.isEmpty.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if ((a1 & 1) == 0)
  {
    int v26 = a2 + 2;
    long long v27 = a6[1];
    long long v37 = *a6;
    v38[0] = v27;
    *(_OWORD *)((char *)v38 + 12) = *(long long *)((char *)a6 + 28);
    swift_beginAccess();
    v24(v23, a5, v20);
    outlined retain of Text.Layout.Line((uint64_t)a6);
    Text.Effect.RenderSegmentation.StaticRuns.init(line:glyphOrigin:runs:lineIndex:)(&v37, (uint64_t)v23, v34, (uint64_t)v18, a8, a9);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    unint64_t v28 = *v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t *v26 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28);
      unint64_t *v26 = v28;
    }
    uint64_t v30 = (unsigned char *)(v35 + 16);
    unint64_t v32 = *(void *)(v28 + 16);
    unint64_t v31 = *(void *)(v28 + 24);
    if (v32 >= v31 >> 1)
    {
      unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v28);
      unint64_t *v26 = v28;
    }
    *(void *)(v28 + 16) = v32 + 1;
    outlined init with take of Text.Effect.RenderSegmentation.Segment((uint64_t)v18, v28+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v32, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    swift_endAccess();
    swift_beginAccess();
    *uint64_t v30 = 1;
    RangeSet.init()();
    swift_beginAccess();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 40))(a5, v23, v20);
  }
  return result;
}

uint64_t flushEffectRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  uint64_t v9 = a7;
  uint64_t v81 = a5;
  uint64_t v86 = *(void *)a7;
  uint64_t v85 = *(void *)(a7 + 8);
  int v84 = *(unsigned __int8 *)(a7 + 16);
  uint64_t v17 = *(void *)(a7 + 24);
  uint64_t v18 = *(void *)(a7 + 32);
  int v19 = *(_DWORD *)(a7 + 40);
  uint64_t v80 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v20 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v82 = (unsigned char **)((char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = a1 + 16;
  swift_beginAccess();
  uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 16);
  double v83 = (void *)(a2 + 16);
  if (!v22)
  {
    unint64_t v23 = 0;
    goto LABEL_42;
  }
  uint64_t v79 = v20;
  swift_beginAccess();
  unint64_t v23 = 0;
  if ((*(unsigned char *)(a2 + 32) & 1) == 0)
  {
    int v73 = v19;
    uint64_t v78 = a1;
    uint64_t v74 = v9;
    int v24 = (uint64_t *)(a3 + 16);
    uint64_t v77 = (unint64_t *)(a4 + 16);
    double v72 = (unsigned char *)(a6 + 16);
    uint64_t v76 = *(void *)(a2 + 16);
    uint64_t v75 = *(void *)(a2 + 24);
    swift_beginAccess();
    v91[0] = MEMORY[0x263F8EE80];
    Text.Effect.Composition.updateNonadjacentFragmentIdentifiers(map:)((uint64_t)v91);
    uint64_t v25 = FragmentIdentifierOffsetMap.countMap.getter(v91[0]);
    swift_bridgeObjectRelease();
    swift_endAccess();
    unint64_t v23 = 0;
    int64_t v26 = 0;
    uint64_t v27 = 1 << *(unsigned char *)(v25 + 32);
    uint64_t v28 = -1;
    if (v27 < 64) {
      uint64_t v28 = ~(-1 << v27);
    }
    uint64_t v29 = *(void *)(v25 + 64);
    uint64_t v88 = v25 + 64;
    unint64_t v30 = v28 & v29;
    int64_t v89 = (unint64_t)(v27 + 63) >> 6;
    uint64_t v90 = a2;
    if ((v28 & v29) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v31 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    for (unint64_t i = v31 | (v26 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v26 << 6))
    {
      uint64_t v36 = 8 * i;
      a2 = *(void *)(*(void *)(v25 + 48) + v36);
      uint64_t v37 = *(void *)(*(void *)(v25 + 56) + v36);
      swift_beginAccess();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v91[0] = *v24;
      unint64_t v23 = (void *)v91[0];
      *int v24 = 0x8000000000000000;
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      uint64_t v41 = v23[2];
      BOOL v42 = (v39 & 1) == 0;
      uint64_t v43 = v41 + v42;
      if (__OFADD__(v41, v42))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      a4 = v39;
      if (v23[3] >= v43)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          unint64_t v23 = (void *)v91[0];
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, isUniquelyReferenced_nonNull_native);
        unint64_t v23 = (void *)v91[0];
        uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
        if ((a4 & 1) != (v45 & 1))
        {
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v40 = v44;
      }
      *int v24 = (uint64_t)v23;
      swift_bridgeObjectRelease();
      unint64_t v23 = (void *)*v24;
      if (a4)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v23[(v40 >> 6) + 8] |= 1 << v40;
        uint64_t v46 = 8 * v40;
        *(void *)(v23[6] + v46) = a2;
        *(void *)(v23[7] + v46) = 0;
        uint64_t v47 = v23[2];
        a4 = v47 + 1;
        BOOL v48 = __OFADD__(v47, 1);
        swift_bridgeObjectRetain();
        if (v48) {
          goto LABEL_45;
        }
        v23[2] = a4;
      }
      uint64_t v49 = v23[7];
      uint64_t v50 = *(void *)(v49 + 8 * v40);
      BOOL v51 = __OFADD__(v50, v37);
      uint64_t v52 = v50 + v37;
      a2 = v90;
      if (v51) {
        goto LABEL_44;
      }
      *(void *)(v49 + 8 * v40) = v52;
      swift_endAccess();
      swift_bridgeObjectRelease();
      unint64_t v23 = protocol witness for SetAlgebra.init() in conformance NSTextLayoutManagerSegmentCategory;
      if (v30) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v33 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        goto LABEL_46;
      }
      if (v33 >= v89) {
        goto LABEL_38;
      }
      unint64_t v34 = *(void *)(v88 + 8 * v33);
      ++v26;
      if (!v34)
      {
        int64_t v26 = v33 + 1;
        if (v33 + 1 >= v89) {
          goto LABEL_38;
        }
        unint64_t v34 = *(void *)(v88 + 8 * v26);
        if (!v34)
        {
          int64_t v26 = v33 + 2;
          if (v33 + 2 >= v89) {
            goto LABEL_38;
          }
          unint64_t v34 = *(void *)(v88 + 8 * v26);
          if (!v34)
          {
            int64_t v35 = v33 + 3;
            if (v35 >= v89)
            {
LABEL_38:
              swift_release();
              swift_beginAccess();
              uint64_t v53 = v78;
              uint64_t v54 = *(void **)(v78 + 16);
              uint64_t v55 = *(void *)(v78 + 24);
              char v56 = *(unsigned char *)(v78 + 32);
              int v57 = *(_DWORD *)(v78 + 56);
              uint64_t v58 = *(void *)(v78 + 80);
              unint64_t v59 = v82;
              uint64_t v60 = v76;
              *uint64_t v82 = v81;
              v59[1] = v60;
              v59[2] = v75;
              v59[3] = v54;
              v59[4] = v55;
              *((unsigned char *)v59 + 40) = v56;
              *((_OWORD *)v59 + 3) = *(_OWORD *)(v53 + 40);
              *((_DWORD *)v59 + 16) = v57;
              *(_OWORD *)(v59 + 9) = *(_OWORD *)(v53 + 64);
              v59[11] = v58;
              swift_storeEnumTagMultiPayload();
              uint64_t v61 = v77;
              swift_beginAccess();
              a4 = *v61;
              outlined copy of Text.Layout.Line.Line(v54, v55, v56);
              swift_bridgeObjectRetain();
              char v62 = swift_isUniquelyReferenced_nonNull_native();
              *uint64_t v61 = a4;
              if (v62) {
                goto LABEL_39;
              }
LABEL_48:
              a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a4 + 16) + 1, 1, a4);
              unint64_t *v77 = a4;
LABEL_39:
              uint64_t v9 = v74;
              int v19 = v73;
              CGFloat v63 = v72;
              unint64_t v65 = *(void *)(a4 + 16);
              unint64_t v64 = *(void *)(a4 + 24);
              a1 = v78;
              if (v65 >= v64 >> 1)
              {
                a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, a4);
                unint64_t *v77 = a4;
              }
              *(void *)(a4 + 16) = v65 + 1;
              outlined init with take of Text.Effect.RenderSegmentation.Segment((uint64_t)v82, a4+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(void *)(v79 + 72) * v65, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
              swift_endAccess();
              swift_beginAccess();
              unsigned char *v63 = 1;
              break;
            }
            unint64_t v34 = *(void *)(v88 + 8 * v35);
            if (!v34)
            {
              while (1)
              {
                int64_t v26 = v35 + 1;
                if (__OFADD__(v35, 1)) {
                  goto LABEL_47;
                }
                if (v26 >= v89) {
                  goto LABEL_38;
                }
                unint64_t v34 = *(void *)(v88 + 8 * v26);
                ++v35;
                if (v34) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v26 = v35;
          }
        }
      }
LABEL_20:
      unint64_t v30 = (v34 - 1) & v34;
    }
  }
LABEL_42:
  CGFloat v66 = v83;
  swift_beginAccess();
  *CGFloat v66 = 0;
  v66[1] = 0;
  *(unsigned char *)(a2 + 32) = 1;
  swift_beginAccess();
  CGFloat v67 = *(void **)(a1 + 16);
  uint64_t v68 = *(void *)(a1 + 24);
  char v69 = *(unsigned char *)(a1 + 32);
  uint64_t v70 = v85;
  *(void *)(a1 + 16) = v86;
  *(void *)(a1 + 24) = v70;
  *(unsigned char *)(a1 + 32) = v84 & 1;
  *(void *)(a1 + 40) = v17;
  *(void *)(a1 + 48) = v18;
  *(_DWORD *)(a1 + 56) = v19;
  *(double *)(a1 + 64) = a8;
  *(double *)(a1 + 72) = a9;
  *(void *)(a1 + 80) = MEMORY[0x263F8EE78];
  outlined retain of Text.Layout.Line(v9);
  outlined consume of Text.Layout.Line.Line(v67, v68, v69);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation(uint64_t a1, void *a2))(void, void)
{
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(void *)(*(void *)v2 + 16))
  {
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.RenderSegmentation()
{
  size_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.RenderSegmentation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.RenderSegmentation()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.RenderSegmentation>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.RenderSegmentation> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation, (uint64_t)&type metadata for Text.Effect.RenderSegmentation, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.RenderSegmentation()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.RenderSegmentation()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.RenderSegmentation> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>(255, &lazy cache variable for type metadata for Slice<Text.Effect.RenderSegmentation>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.RenderSegmentation and conformance Text.Effect.RenderSegmentation, (uint64_t)&type metadata for Text.Effect.RenderSegmentation, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RenderSegmentation.StaticRuns.Iterator and conformance Text.Effect.RenderSegmentation.StaticRuns.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticRuns.Iterator and conformance Text.Effect.RenderSegmentation.StaticRuns.Iterator;
  if (!lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticRuns.Iterator and conformance Text.Effect.RenderSegmentation.StaticRuns.Iterator)
  {
    type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RenderSegmentation.StaticRuns.Iterator and conformance Text.Effect.RenderSegmentation.StaticRuns.Iterator);
  }
  return result;
}

uint64_t type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
}

void _ss8RangeSetVySiGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, void, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v7 = a3(a1, MEMORY[0x263F8D6C8], MEMORY[0x263F8D708], v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Text.Effect.RenderSegmentation.Segment(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Effect.RenderSegmentation.Segment);
}

void type metadata accessor for IndexingIterator<Text.Effect.RenderSegmentation.StaticLines>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized Text.Effect.RenderSegmentation.StaticLines.init(lines:glyphOrigins:lineIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CGFloat *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  ascent[1] = *(CGFloat *)MEMORY[0x263EF8340];
  CGFloat x = *MEMORY[0x263F001A0];
  CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v13 = (double *)(a1 + 64);
    do
    {
      uint64_t v20 = (void *)*((void *)v13 - 4);
      uint64_t v21 = *((void *)v13 - 3);
      char v22 = *((unsigned char *)v13 - 16);
      double v24 = *(v13 - 1);
      double v23 = *v13;
      if (v22)
      {
        outlined copy of Text.Layout.Line.Line(v20, v21, 1);
        objc_msgSend(v20, sel_typographicBounds);
        double TypographicBounds = v14;
        double v17 = v16;
        objc_msgSend(v20, sel_glyphOrigin);
        double v19 = v17 - v18;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v20, v21, 0);
        outlined copy of Text.Layout.Line.Line(v20, v21, 0);
        uint64_t v25 = v20;
        CGFloat descent = 0.0;
        ascent[0] = 0.0;
        CGFloat leading = 0.0;
        double TypographicBounds = CTLineGetTypographicBounds(v25, ascent, &descent, &leading);

        outlined consume of Text.Layout.Line.Line(v20, v21, 0);
        double v19 = descent;
        double v18 = ascent[0];
      }
      v34.origin.CGFloat x = v24 + 0.0;
      v34.origin.CGFloat y = v23 + 0.0 - v18;
      v34.size.CGFloat height = v19 + v18;
      v32.origin.CGFloat x = x;
      v32.origin.CGFloat y = y;
      v32.size.CGFloat width = width;
      v32.size.CGFloat height = height;
      v34.size.CGFloat width = TypographicBounds;
      CGRect v33 = CGRectUnion(v32, v34);
      CGFloat x = v33.origin.x;
      CGFloat y = v33.origin.y;
      CGFloat width = v33.size.width;
      CGFloat height = v33.size.height;
      outlined consume of Text.Layout.Line.Line(v20, v21, v22);
      v13 += 6;
      --v12;
    }
    while (v12);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = a2;
    uint64_t v4 = a3;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a4 = a1;
  *((void *)a4 + 1) = v5;
  *((void *)a4 + 2) = v4;
  a4[3] = x;
  a4[4] = y;
  a4[5] = width;
  a4[6] = height;
  return result;
}

void specialized Text.Effect.RenderSegmentation.init(layout:fragment:)(uint64_t *a1, void *a2)
{
  id v185 = a2;
  uint64_t v3 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v188 = *(void *)(v3 - 8);
  uint64_t v189 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v197 = (uint64_t)&v179 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v223 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v196 = (char *)&v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v179 - v9;
  uint64_t v11 = *a1;
  char v12 = *((unsigned char *)a1 + 8);
  uint64_t v13 = a1[2];
  double v14 = (unint64_t *)swift_allocObject();
  uint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v218 = v14;
  void v14[2] = MEMORY[0x263F8EE78];
  uint64_t v198 = v14 + 2;
  uint64_t v16 = swift_allocObject();
  uint64_t v200 = v16;
  *(void *)(v16 + 16) = v15;
  uint64_t v183 = (void *)(v16 + 16);
  uint64_t v17 = swift_allocObject();
  uint64_t v199 = v17;
  *(void *)(v17 + 16) = v15;
  char v182 = (void *)(v17 + 16);
  uint64_t v18 = swift_allocObject();
  uint64_t v209 = v18;
  *(void *)(v18 + 16) = MEMORY[0x263F8EE80];
  uint64_t v206 = (uint64_t *)(v18 + 16);
  v258[3] = v11;
  char v259 = v12;
  uint64_t v261 = 0;
  uint64_t v262 = 0;
  uint64_t v260 = v13;
  uint64_t v180 = v11;
  swift_bridgeObjectRetain();
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v248);
  uint64_t v19 = *((void *)&v249[0] + 1);
  if (BYTE8(v249[0]) == 0xFF)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v180 + 16);
    swift_bridgeObjectRelease();
    flushPendingStaticLines #1 (lineIndex:) in Text.Effect.RenderSegmentation.init(layout:fragment:)(v20, v200, v218, v199);

    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return;
  }
  uint64_t v181 = v258;
  uint64_t v207 = (void (**)(char *, char *, uint64_t))(v6 + 16);
  char v22 = (void *)*((void *)&v248 + 1);
  unint64_t v21 = v248;
  uint64_t v201 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v187 = (void (**)(char *, uint64_t, uint64_t))(v6 + 40);
  uint64_t v23 = *(void *)&v249[0];
  uint64_t v25 = *((void *)&v249[1] + 1);
  uint64_t v24 = *(void *)&v249[1];
  unsigned int v26 = v250;
  long long v208 = xmmword_2461B9DC0;
  uint64_t v205 = MEMORY[0x263F8EE58] + 8;
  v195 = v10;
  while (1)
  {
    unint64_t v241 = v21;
    uint64_t v30 = v19 & 1;
    *(void *)&long long v263 = v22;
    *((void *)&v263 + 1) = v23;
    uint64_t v238 = v23;
    v264[0] = v19 & 1;
    uint64_t v221 = v24;
    *(void *)&v264[8] = v24;
    *(void *)&v264[16] = v25;
    unsigned int v230 = v26;
    *(_DWORD *)&v264[24] = v26;
    id v31 = objc_msgSend(v185, sel_textLineFragments);
    unint64_t v32 = type metadata accessor for NSTextLineFragment();
    uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v210 = v19;
    unint64_t v184 = v32;
    if ((v33 & 0xC000000000000001) == 0) {
      break;
    }
    uint64_t v34 = v241;
    id v35 = (id)MEMORY[0x24C523D60](v241, v33);
LABEL_10:
    uint64_t v36 = v35;
    BOOL v37 = v30 != 0;
    swift_bridgeObjectRelease();
    objc_msgSend(v36, sel_glyphOrigin);
    double v39 = v38;
    double v41 = v40;

    RangeSet.init()();
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = 0;
    uint64_t v43 = (void *)(v42 + 16);
    *(void *)(v42 + 24) = 0;
    uint64_t v215 = v42;
    *(unsigned char *)(v42 + 32) = 1;
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v30;
    *(void *)(v44 + 16) = v22;
    uint64_t v46 = v44 + 16;
    uint64_t v47 = v238;
    *(void *)(v44 + 24) = v238;
    *(unsigned char *)(v44 + 32) = v37;
    *(void *)(v44 + 40) = v221;
    *(void *)(v44 + 48) = v25;
    *(_DWORD *)(v44 + 56) = v230;
    *(double *)(v44 + 64) = v39;
    *(double *)(v44 + 72) = v41;
    uint64_t v219 = v44;
    *(void *)(v44 + 80) = MEMORY[0x263F8EE78];
    uint64_t v48 = swift_allocObject();
    uint64_t v211 = v48;
    uint64_t v224 = v25;
    *(unsigned char *)(v48 + 16) = 0;
    uint64_t v49 = (unsigned char *)(v48 + 16);
    long long v256 = v263;
    *(_OWORD *)char v257 = *(_OWORD *)v264;
    *(_OWORD *)&v257[12] = *(_OWORD *)&v264[12];
    uint64_t v50 = v181;
    *uint64_t v181 = 0;
    v50[1] = 0;
    outlined copy of Text.Layout.Line.Line(v22, v47, v45);
    uint64_t v226 = v22;
    uint64_t v220 = v45;
    outlined copy of Text.Layout.Line.Line(v22, v47, v45);
    swift_beginAccess();
    uint64_t v186 = v46;
    swift_beginAccess();
    uint64_t v190 = v43;
    swift_beginAccess();
    id v191 = v49;
    swift_beginAccess();
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v248);
    BOOL v51 = (void *)*((void *)&v248 + 1);
    if (*((void *)&v248 + 1))
    {
      uint64_t v52 = v248;
      uint64_t v53 = *((void *)&v249[0] + 1);
      CFIndex v54 = *(void *)&v249[0];
      uint64_t v55 = *(void *)&v249[1];
      unint64_t v194 = v230;
      double v192 = v41;
      double v193 = v39;
      uint64_t v56 = *((void *)&v249[1] + 1);
      uint64_t v57 = v250;
      do
      {
        uint64_t v244 = v53;
        uint64_t v240 = v52;
        uint64_t v58 = one-time initialization token for _textAnimation;
        double v243 = v51;
        id v59 = v51;
        swift_retain();
        if (v58 != -1) {
          swift_once();
        }
        uint64_t v60 = (const __CTLine *)v59;
        swift_retain();
        CFIndex v246 = v54;
        uint64_t v61 = (id)_CTLineGetRunAtIndex(v60, v54);
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        CGFloat v63 = (void *)MEMORY[0x24C522820](v62);
        swift_bridgeObjectRelease();
        CFDictionaryRef v64 = _CTRunGetAttributeValueForKey((const __CTRun *)v61, v63);

        uint64_t v242 = v55;
        uint64_t v245 = v56;
        uint64_t v247 = v57;
        if (v64)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v254 = 0u;
          long long v255 = 0u;
        }
        uint64_t v65 = v240;
        CGFloat v66 = v243;
        CFIndex v67 = v246;
        outlined init with take of Any?((uint64_t)&v254, (uint64_t)&v248);
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v65, v66);
        if (*((void *)&v249[0] + 1))
        {
          type metadata accessor for AnyTextEffect();
          if (swift_dynamicCast())
          {
            unint64_t v239 = v254;
            outlined consume of (offset: Int, element: Text.Layout.Run)?(v65, v66);
          }
          else
          {
            outlined consume of (offset: Int, element: Text.Layout.Run)?(v65, v66);
            unint64_t v239 = 0;
          }
          uint64_t v68 = v241;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v248);
          outlined consume of (offset: Int, element: Text.Layout.Run)?(v65, v66);
          unint64_t v239 = 0;
          uint64_t v68 = v241;
        }
        uint64_t v69 = one-time initialization token for _textFilterAnimation;
        uint64_t v70 = v60;
        swift_retain();
        if (v69 != -1) {
          swift_once();
        }
        CGFloat v71 = v70;
        swift_retain();
        double v72 = (id)_CTLineGetRunAtIndex(v71, v67);
        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v74 = (void *)MEMORY[0x24C522820](v73);
        swift_bridgeObjectRelease();
        CFDictionaryRef v75 = _CTRunGetAttributeValueForKey((const __CTRun *)v72, v74);

        if (v75)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v254 = 0u;
          long long v255 = 0u;
        }
        uint64_t v76 = v243;
        outlined init with take of Any?((uint64_t)&v254, (uint64_t)&v248);
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v65, v76);
        if (*((void *)&v249[0] + 1))
        {
          type metadata accessor for AnyTextFilterEffect();
          if (swift_dynamicCast())
          {
            unint64_t v77 = v254;
            outlined consume of (offset: Int, element: Text.Layout.Run)?(v65, v76);
            goto LABEL_38;
          }
          uint64_t v78 = v65;
          uint64_t v79 = v76;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v248);
          uint64_t v78 = v65;
          uint64_t v79 = v76;
        }
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v78, v79);
        unint64_t v77 = 0;
LABEL_38:
        unint64_t v80 = v239;
        if (v239 | v77)
        {
          double v229 = (char *)v77;
          flushPendingStaticLines #1 (lineIndex:) in Text.Effect.RenderSegmentation.init(layout:fragment:)(v68, v200, v218, v199);
          double v83 = *v207;
          uint64_t v84 = (uint64_t)v196;
          uint64_t v85 = v223;
          (*v207)(v196, v10, v223);
          char v86 = RangeSet.isEmpty.getter();
          (*v201)(v84, v85);
          if ((v86 & 1) == 0)
          {
            long long v248 = v263;
            v249[0] = *(_OWORD *)v264;
            *(_OWORD *)((char *)v249 + 12) = *(_OWORD *)&v264[12];
            v83((char *)v84, v10, v223);
            outlined copy of Text.Layout.Line.Line(v226, v238, v220);
            Text.Effect.RenderSegmentation.StaticRuns.init(line:glyphOrigin:runs:lineIndex:)(&v248, v84, v68, v197, v39, v41);
            swift_storeEnumTagMultiPayload();
            uint64_t v87 = v198;
            swift_beginAccess();
            unint64_t v88 = *v87;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v88 + 16) + 1, 1, v88);
            }
            unint64_t v90 = *(void *)(v88 + 16);
            unint64_t v89 = *(void *)(v88 + 24);
            if (v90 >= v89 >> 1) {
              unint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1, v88);
            }
            *(void *)(v88 + 16) = v90 + 1;
            outlined init with take of Text.Effect.RenderSegmentation.Segment(v197, v88+ ((*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80))+ *(void *)(v188 + 72) * v90, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            *uint64_t v198 = v88;
            swift_endAccess();
            *id v191 = 1;
            RangeSet.init()();
            (*v187)(v10, v84, v223);
          }
          if (v80)
          {
            uint64_t v91 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
            uint64_t v92 = *(void *)(v80 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
            CGFloat v93 = v206;
            swift_beginAccess();
            uint64_t v94 = *v93;
            if (*(void *)(v94 + 16))
            {
              uint64_t v95 = specialized __RawDictionaryStorage.find<A>(_:)(v92);
              if (v96) {
                uint64_t v97 = *(void *)(*(void *)(v94 + 56) + 8 * v95);
              }
              else {
                uint64_t v97 = 0;
              }
            }
            else
            {
              uint64_t v97 = 0;
            }
            id v102 = v229;
            swift_endAccess();
            uint64_t v99 = v65 + 1;
            if (__OFADD__(v65, 1)) {
              goto LABEL_95;
            }
            if (v99 < v65) {
              goto LABEL_96;
            }
            uint64_t v101 = *(void *)(v80 + v91);
            unint64_t v100 = 0x8000000000000000;
            char v98 = (void *)v65;
          }
          else
          {
            uint64_t v97 = v65 + 1;
            if (__OFADD__(v65, 1)) {
              goto LABEL_97;
            }
            if (v97 < v65) {
              goto LABEL_98;
            }
            char v98 = 0;
            uint64_t v99 = 0;
            unint64_t v100 = 0x4000000000000000;
            uint64_t v101 = v65;
            id v102 = v229;
          }
          uint64_t v227 = v97;
          uint64_t v228 = v101;
          unint64_t v216 = v100;
          uint64_t v217 = v99;
          if (v102)
          {
            uint64_t v103 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
            uint64_t v104 = *(void *)&v102[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
            double v105 = v206;
            swift_beginAccess();
            uint64_t v106 = *v105;
            if (*(void *)(v106 + 16)
              && (uint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(v104), (v108 & 1) != 0))
            {
              uint64_t v225 = *(void *)(*(void *)(v106 + 56) + 8 * v107);
            }
            else
            {
              uint64_t v225 = 0;
            }
            double v109 = v229;
            uint64_t v110 = v227;
            swift_endAccess();
            uint64_t v111 = *(void *)&v109[v103];
            type metadata accessor for EdgeInsets?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Composition.Run>, (uint64_t)&type metadata for Text.Effect.Composition.Run, MEMORY[0x263F8E0F8]);
            uint64_t v112 = swift_allocObject();
            *(_OWORD *)(v112 + 16) = v208;
            *(void *)(v112 + 32) = v228;
            *(void *)(v112 + 40) = v110;
            uint64_t v113 = v217;
            *(void *)(v112 + 48) = v98;
            *(void *)(v112 + 56) = v113;
            *(void *)(v112 + 64) = 0;
            *(void *)(v112 + 72) = 0;
            unint64_t v114 = v216;
            *(void *)(v112 + 80) = 0;
            *(void *)(v112 + 88) = v114;
            *(void *)(v112 + 104) = 0;
            *(void *)(v112 + 112) = 0;
            *(void *)(v112 + 96) = 0;
            uint64_t v115 = v68;
            CGRect v116 = v226;
            uint64_t v117 = v238;
            uint64_t v118 = v221;
            uint64_t v119 = v224;
            outlined copy of (offset: Int, element: Text.Layout.Line)?(v115, v226, v238, v210);
            uint64_t v234 = v117;
            int v235 = v116;
            uint64_t v120 = v219;
            uint64_t v236 = v220;
            uint64_t v237 = v118;
            double v232 = v193;
            unint64_t v233 = v194;
            double v231 = v192;
            uint64_t v121 = v225;
          }
          else
          {
            uint64_t v236 = 0;
            uint64_t v237 = 0;
            uint64_t v119 = 0;
            double v231 = 0.0;
            double v232 = 0.0;
            uint64_t v112 = 0;
            uint64_t v111 = v101;
            uint64_t v121 = v97;
            uint64_t v234 = v99;
            int v235 = v98;
            unint64_t v233 = v100;
            uint64_t v120 = v219;
          }
          unint64_t v222 = v98;
          type metadata accessor for EdgeInsets?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Composition.Run>, (uint64_t)&type metadata for Text.Effect.Composition.Run, MEMORY[0x263F8E0F8]);
          uint64_t v122 = swift_allocObject();
          *(_OWORD *)(v122 + 16) = v208;
          *(void *)(v122 + 32) = v111;
          *(void *)(v122 + 40) = v121;
          uint64_t v123 = v234;
          *(void *)(v122 + 48) = v235;
          *(void *)(v122 + 56) = v123;
          uint64_t v124 = v237;
          *(void *)(v122 + 64) = v236;
          *(void *)(v122 + 72) = v124;
          unint64_t v125 = v233;
          *(void *)(v122 + 80) = v119;
          *(void *)(v122 + 88) = v125;
          double v126 = v231;
          *(double *)(v122 + 96) = v232;
          *(double *)(v122 + 104) = v126;
          *(void *)(v122 + 112) = v112;
          uint64_t v127 = *(void *)(v120 + 80);
          uint64_t v128 = *(void *)(v127 + 16);
          uint64_t v213 = v119;
          uint64_t v214 = v111;
          uint64_t v225 = v121;
          if (v128)
          {
            uint64_t v129 = *(void *)(v120 + 24);
            uint64_t v212 = *(void **)(v120 + 16);
            int v202 = *(unsigned __int8 *)(v120 + 32);
            BOOL v203 = v220 != 0;
            int v130 = *(_DWORD *)(v120 + 56);
            *(void *)&long long v254 = MEMORY[0x263F8EE88];
            *(void *)&long long v248 = v212;
            *((void *)&v248 + 1) = v129;
            uint64_t v204 = v129;
            LOBYTE(v249[0]) = v202;
            *(_OWORD *)((char *)v249 + 8) = *(_OWORD *)(v120 + 40);
            DWORD2(v249[1]) = v130;
            long long v250 = *(_OWORD *)(v120 + 64);
            uint64_t v251 = v127;
            double v131 = v226;
            uint64_t v132 = v221;
            outlined copy of (offset: Int, element: Text.Layout.Line)?(v241, v226, v238, v210);
            outlined copy of Text.Effect.Composition.Operation(v111, v121, v235, v234, v236, v237, v119, v233);
            uint64_t v133 = v129;
            LOBYTE(v129) = v202;
            outlined copy of Text.Layout.Line.Line(v212, v133, v202);
            swift_bridgeObjectRetain();
            Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)&v254);
            uint64_t v134 = v254;
            *(void *)&long long v254 = MEMORY[0x263F8EE88];
            *(void *)&long long v248 = v131;
            *((void *)&v248 + 1) = v238;
            LOBYTE(v249[0]) = v203;
            *((void *)&v249[0] + 1) = v132;
            *(void *)&v249[1] = v224;
            DWORD2(v249[1]) = v230;
            *(double *)&long long v250 = v39;
            *((double *)&v250 + 1) = v41;
            uint64_t v251 = v122;
            Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)&v254);
            uint64_t v135 = specialized _NativeSet.intersection(_:)(v254, v134);
            unint64_t v137 = v216;
            uint64_t v136 = v217;
            outlined copy of Text.Effect.Composition.Operation(v228, v227, v222, v217, 0, 0, 0, v216);
            swift_bridgeObjectRelease();
            uint64_t v138 = *(void *)(v135 + 16);
            uint64_t v139 = v224;
            swift_release();
            uint64_t v140 = v241;
            char v141 = v129;
            uint64_t v142 = v220;
            outlined consume of Text.Layout.Line.Line(v212, v204, v141);
            uint64_t v143 = v139;
            swift_bridgeObjectRelease();
            if (v138)
            {
              uint64_t v144 = v226;
              *(void *)&long long v248 = v226;
              uint64_t v145 = v238;
              *((void *)&v248 + 1) = v238;
              LOBYTE(v249[0]) = v142 != 0;
              *((void *)&v249[0] + 1) = v221;
              *(void *)&v249[1] = v143;
              DWORD2(v249[1]) = v230;
              *(double *)&long long v250 = v39;
              *((double *)&v250 + 1) = v41;
              uint64_t v251 = v122;
              swift_beginAccess();
              Text.Effect.Composition.append(_:)((uint64_t)&v248);
              swift_endAccess();
              outlined consume of Text.Effect.Composition.Operation(v228, v227, v222, v136, 0, 0, 0, v137);
              outlined consume of Text.Effect.Composition.Operation(v214, v225, v235, v234, v236, v237, v213, v233);
              uint64_t v146 = v240;
              outlined consume of (offset: Int, element: Text.Layout.Run)?(v240, v243);

              outlined consume of Text.Layout.Line.Line(v144, v145, v142);
              swift_bridgeObjectRelease();
              uint64_t v147 = v215;
              if (*(unsigned char *)(v215 + 32))
              {
                uint64_t v148 = v146 + 1;
                *(void *)(v215 + 16) = v146;
              }
              else
              {
                uint64_t v148 = v146 + 1;
                if (v146 + 1 < *v190) {
                  goto LABEL_100;
                }
              }
              *(void *)(v147 + 24) = v148;
              *(unsigned char *)(v147 + 32) = 0;
LABEL_13:
              unint64_t v10 = v195;
              goto LABEL_14;
            }
          }
          else
          {
            uint64_t v140 = v241;
            uint64_t v143 = v224;
            outlined copy of (offset: Int, element: Text.Layout.Line)?(v241, v226, v238, v210);
            outlined copy of Text.Effect.Composition.Operation(v111, v121, v235, v234, v236, v237, v119, v233);
            unint64_t v137 = v216;
            uint64_t v136 = v217;
            outlined copy of Text.Effect.Composition.Operation(v228, v227, v222, v217, 0, 0, 0, v216);
            uint64_t v142 = v220;
          }
          LODWORD(v212) = v142 != 0;
          uint64_t v149 = v219;
          uint64_t v150 = v143;
          uint64_t v151 = v215;
          flushEffectRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(v219, v215, v209, (unint64_t)v218, v140, v211, (uint64_t)&v263, v39, v41);
          outlined consume of Text.Effect.Composition.Operation(v228, v227, v222, v136, 0, 0, 0, v137);
          outlined consume of Text.Effect.Composition.Operation(v214, v225, v235, v234, v236, v237, v213, v233);
          uint64_t v152 = v240;
          outlined consume of (offset: Int, element: Text.Layout.Run)?(v240, v243);

          id v153 = *(void **)(v149 + 16);
          uint64_t v154 = *(void *)(v149 + 24);
          char v155 = *(unsigned char *)(v149 + 32);
          uint64_t v156 = v238;
          *(void *)(v149 + 16) = v226;
          *(void *)(v149 + 24) = v156;
          *(unsigned char *)(v149 + 32) = (_BYTE)v212;
          *(void *)(v149 + 40) = v221;
          *(void *)(v149 + 48) = v150;
          *(_DWORD *)(v149 + 56) = v230;
          *(double *)(v149 + 64) = v39;
          *(double *)(v149 + 72) = v41;
          *(void *)(v149 + 80) = v122;
          outlined consume of Text.Layout.Line.Line(v153, v154, v155);
          swift_bridgeObjectRelease();
          if (*(unsigned char *)(v151 + 32))
          {
            *(void *)(v151 + 16) = v152;
            *(void *)(v151 + 24) = v152 + 1;
            *(unsigned char *)(v151 + 32) = 0;
            goto LABEL_13;
          }
          unint64_t v10 = v195;
          if (v152 + 1 < *v190) {
            goto LABEL_99;
          }
          *(void *)(v151 + 24) = v152 + 1;
          *(unsigned char *)(v151 + 32) = 0;
LABEL_14:
          uint64_t v34 = v241;
          goto LABEL_15;
        }
        flushEffectRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(v219, v215, v209, (unint64_t)v218, v68, v211, (uint64_t)&v263, v39, v41);
        swift_beginAccess();
        if (__OFADD__(v65, 1))
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        if (v65 + 1 < v65) {
          goto LABEL_94;
        }
        uint64_t v252 = v65;
        uint64_t v253 = v65 + 1;
        uint64_t v81 = (void (*)(long long *, void))RangeSet._ranges.modify();
        _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
        RangeSet.Ranges._insert(contentsOf:)();
        v81(&v248, 0);
        swift_endAccess();
        uint64_t v82 = v65;
        uint64_t v34 = v241;
        outlined consume of (offset: Int, element: Text.Layout.Run)?(v82, v76);
LABEL_15:
        specialized EnumeratedSequence.Iterator.next()((uint64_t)&v248);
        BOOL v51 = (void *)*((void *)&v248 + 1);
        uint64_t v52 = v248;
        uint64_t v53 = *((void *)&v249[0] + 1);
        CFIndex v54 = *(void *)&v249[0];
        uint64_t v56 = *((void *)&v249[1] + 1);
        uint64_t v55 = *(void *)&v249[1];
        uint64_t v57 = v250;
      }
      while (*((void *)&v248 + 1));
    }
    outlined consume of Text.Layout.Line.Line((void *)v256, *((uint64_t *)&v256 + 1), v257[0]);
    uint64_t v157 = v211;
    flushEffectRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(v219, v215, v209, (unint64_t)v218, v34, v211, (uint64_t)&v263, v39, v41);
    if (*(unsigned char *)(v157 + 16))
    {
      specialized flushStaticRuns #1 () in Text.Effect.RenderSegmentation.init(layout:fragment:)(v200, v218, v199, v34, (uint64_t)v10, &v263, v157, v39, v41);
      uint64_t v27 = v34;
      char v28 = v210;
      uint64_t v29 = v226;
    }
    else
    {
      int64_t v158 = (void **)v183;
      swift_beginAccess();
      double v159 = *v158;
      uint64_t v160 = v34;
      uint64_t v29 = v226;
      char v28 = v210;
      outlined copy of (offset: Int, element: Text.Layout.Line)?(v160, v226, v238, v210);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v159[2] + 1, 1, v159);
      }
      unint64_t v162 = v159[2];
      unint64_t v161 = v159[3];
      if (v162 >= v161 >> 1) {
        double v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v161 > 1), v162 + 1, 1, v159);
      }
      v159[2] = v162 + 1;
      CGFloat v163 = &v159[6 * v162];
      long long v164 = v263;
      long long v165 = *(_OWORD *)v264;
      *(_OWORD *)((char *)v163 + 60) = *(_OWORD *)&v264[12];
      v163[2] = v164;
      v163[3] = v165;
      *uint64_t v183 = v159;
      swift_endAccess();
      id v166 = objc_msgSend(v185, sel_textLineFragments);
      uint64_t v167 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v167 & 0xC000000000000001) != 0)
      {
        id v168 = (id)MEMORY[0x24C523D60](v241, v167);
      }
      else
      {
        if ((v241 & 0x8000000000000000) != 0) {
          goto LABEL_103;
        }
        if (v241 >= *(void *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_104;
        }
        id v168 = *(id *)(v167 + 8 * v241 + 32);
      }
      objc_super v169 = v168;
      swift_bridgeObjectRelease();
      objc_msgSend(v169, sel_glyphOrigin);
      uint64_t v171 = v170;
      uint64_t v173 = v172;

      CGRect v174 = (void **)v182;
      swift_beginAccess();
      CGRect v175 = *v174;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        CGRect v175 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v175[2] + 1, 1, v175);
      }
      unint64_t v177 = v175[2];
      unint64_t v176 = v175[3];
      if (v177 >= v176 >> 1) {
        CGRect v175 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v176 > 1), v177 + 1, 1, v175);
      }
      v175[2] = v177 + 1;
      CGRect v178 = &v175[2 * v177];
      v178[4] = v171;
      v178[5] = v173;
      *char v182 = v175;
      swift_endAccess();
      uint64_t v27 = v241;
    }
    outlined consume of (offset: Int, element: Text.Layout.Line)?(v27, v29, v238, v28);
    swift_release();
    swift_release();
    swift_release();
    (*v201)((uint64_t)v10, v223);
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v248);
    char v22 = (void *)*((void *)&v248 + 1);
    unint64_t v21 = v248;
    uint64_t v19 = *((void *)&v249[0] + 1);
    uint64_t v23 = *(void *)&v249[0];
    uint64_t v25 = *((void *)&v249[1] + 1);
    uint64_t v24 = *(void *)&v249[1];
    unsigned int v26 = v250;
    if (BYTE8(v249[0]) == 0xFF) {
      goto LABEL_2;
    }
  }
  uint64_t v34 = v241;
  if ((v241 & 0x8000000000000000) != 0) {
    goto LABEL_101;
  }
  if (v241 < *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v35 = *(id *)(v33 + 8 * v241 + 32);
    goto LABEL_10;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
}

uint64_t sub_245B8BCF8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t type metadata accessor for NSTextLineFragment()
{
  unint64_t result = lazy cache variable for type metadata for NSTextLineFragment;
  if (!lazy cache variable for type metadata for NSTextLineFragment)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  }
  return result;
}

uint64_t sub_245B8BD70()
{
  return swift_deallocObject();
}

uint64_t sub_245B8BD80()
{
  outlined consume of Text.Layout.Line.Line(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245B8BDC4()
{
  return swift_deallocObject();
}

id outlined copy of (offset: Int, element: Text.Layout.Line)?(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if (a4 != -1) {
    return outlined copy of Text.Layout.Line.Line(a2, a3, a4 & 1);
  }
  return result;
}

void outlined consume of (offset: Int, element: Text.Layout.Line)?(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if (a4 != -1) {
    outlined consume of Text.Layout.Line.Line(a2, a3, a4 & 1);
  }
}

uint64_t outlined consume of (offset: Int, element: Text.Layout.Run)?(uint64_t a1, void *a2)
{
  if (a2)
  {

    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of RangeSet<Int><>.IndexSequence(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, void, unint64_t))
{
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

char *initializeBufferWithCopyOfBuffer for Text.Effect.RenderSegmentation.StaticRuns.Iterator(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = (uint64_t)a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of Text.Layout.Line.Line(*a2, v8, v9);
    *(void *)a1 = v7;
    *((void *)a1 + 1) = v8;
    a1[16] = v9;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = (uint64_t)a2 + v10;
    *(_OWORD *)&a1[v10] = *(_OWORD *)((char *)a2 + v10);
    type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    uint64_t v14 = *(int *)(v13 + 48);
    uint64_t v15 = &v11[v14];
    uint64_t v16 = v12 + v14;
    _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t destroy for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2)
{
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v6 = v4 + *(int *)(v5 + 48);
  _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (_OWORD *)(a2 + v9);
  *(_OWORD *)(a1 + v9) = *v11;
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v13 = *(int *)(v12 + 48);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (char *)v11 + v13;
  _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v7, v8);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of Text.Layout.Line.Line(v9, v10, v11);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v16 = *(int *)(v15 + 48);
  uint64_t v17 = (char *)v13 + v16;
  uint64_t v18 = (char *)v14 + v16;
  _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.RenderSegmentation.StaticRuns.Iterator(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(_OWORD *)((char *)a1 + v5) = *(_OWORD *)((char *)a2 + v5);
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v9 = *(int *)(v8 + 48);
  uint64_t v10 = &v6[v9];
  char v11 = &v7[v9];
  _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (_OWORD *)(a2 + v10);
  *(_OWORD *)(a1 + v10) = *v12;
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v14 = *(int *)(v13 + 48);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (char *)v12 + v14;
  _ss8RangeSetVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245B8C4F0);
}

uint64_t sub_245B8C4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.RenderSegmentation.StaticRuns.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245B8C5C8);
}

uint64_t sub_245B8C5C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 16) = -(char)a2;
  }
  else
  {
    type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for Text.Effect.RenderSegmentation.StaticRuns.Iterator()
{
  type metadata accessor for RangeSet<Int><>.IndexSequence.Iterator(319, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

char *initializeBufferWithCopyOfBuffer for Text.Effect.RenderSegmentation.Segment(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *(void *)a1 = *a2;
    a1 = &v23[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      uint64_t v24 = a2[3];
      uint64_t v25 = (uint64_t)a2[4];
      char v26 = *((unsigned char *)a2 + 40);
      outlined copy of Text.Layout.Line.Line(v24, v25, v26);
      *((void *)a1 + 3) = v24;
      *((void *)a1 + 4) = v25;
      a1[40] = v26;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *((void *)a1 + 11) = a2[11];
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = (uint64_t)a2[1];
      char v9 = *((unsigned char *)a2 + 16);
      outlined copy of Text.Layout.Line.Line(*a2, v8, v9);
      *(void *)a1 = v7;
      *((void *)a1 + 1) = v8;
      a1[16] = v9;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      uint64_t v10 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
      uint64_t v11 = v10[6];
      uint64_t v12 = &a1[v11];
      uint64_t v13 = (uint64_t)a2 + v11;
      _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      *(void *)&a1[v10[7]] = *(char **)((char *)a2 + v10[7]);
      uint64_t v15 = v10[8];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = (_OWORD *)((char *)a2 + v15);
      long long v18 = v17[1];
      *(_OWORD *)uint64_t v16 = *v17;
      *((_OWORD *)v16 + 1) = v18;
      uint64_t v19 = v10[9];
      uint64_t v20 = &a1[v19];
      unint64_t v21 = (_OWORD *)((char *)a2 + v19);
      long long v22 = v21[1];
      *(_OWORD *)uint64_t v20 = *v21;
      *((_OWORD *)v20 + 1) = v22;
    }
    else
    {
      uint64_t v27 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v27;
      *((void *)a1 + 2) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Text.Effect.RenderSegmentation.Segment(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    outlined consume of Text.Layout.Line.Line(*(void **)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
LABEL_6:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v3 = a1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t initializeWithCopy for Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    unint64_t v21 = (void *)a2[3];
    uint64_t v22 = a2[4];
    char v23 = *((unsigned char *)a2 + 40);
    outlined copy of Text.Layout.Line.Line(v21, v22, v23);
    *(void *)(a1 + 24) = v21;
    *(void *)(a1 + 32) = v22;
    *(unsigned char *)(a1 + 40) = v23;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(void *)(a1 + 88) = a2[11];
LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v24 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  char v7 = *((unsigned char *)a2 + 16);
  outlined copy of Text.Layout.Line.Line((void *)*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  uint64_t v8 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  uint64_t v9 = v8[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  *(void *)(a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
  uint64_t v13 = v8[8];
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)((char *)a2 + v13);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = v8[9];
  long long v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)((char *)a2 + v17);
  long long v20 = v19[1];
  *long long v18 = *v19;
  v18[1] = v20;
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.RenderSegmentation.Segment(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_0(a1, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      unint64_t v21 = (void *)a2[3];
      uint64_t v22 = a2[4];
      char v23 = *((unsigned char *)a2 + 40);
      outlined copy of Text.Layout.Line.Line(v21, v22, v23);
      *(void *)(a1 + 24) = v21;
      *(void *)(a1 + 32) = v22;
      *(unsigned char *)(a1 + 40) = v23;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(void *)(a1 + 88) = a2[11];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = *a2;
        uint64_t v6 = a2[1];
        char v7 = *((unsigned char *)a2 + 16);
        outlined copy of Text.Layout.Line.Line((void *)*a2, v6, v7);
        *(void *)a1 = v5;
        *(void *)(a1 + 8) = v6;
        *(unsigned char *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        uint64_t v8 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
        uint64_t v9 = v8[6];
        uint64_t v10 = a1 + v9;
        uint64_t v11 = (uint64_t)a2 + v9;
        _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        *(void *)(a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
        uint64_t v13 = v8[8];
        uint64_t v14 = (_OWORD *)(a1 + v13);
        uint64_t v15 = (_OWORD *)((char *)a2 + v13);
        long long v16 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v16;
        uint64_t v17 = v8[9];
        long long v18 = (_OWORD *)(a1 + v17);
        uint64_t v19 = (_OWORD *)((char *)a2 + v17);
        long long v20 = v19[1];
        *long long v18 = *v19;
        v18[1] = v20;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = a2[2];
      long long v24 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 24) = v24;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.RenderSegmentation.Segment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
    a1[3] = a2[3];
    char v7 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
    uint64_t v8 = v7[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    *(void *)((char *)a1 + v7[7]) = *(void *)((char *)a2 + v7[7]);
    uint64_t v12 = v7[8];
    uint64_t v13 = (_OWORD *)((char *)a1 + v12);
    uint64_t v14 = (_OWORD *)((char *)a2 + v12);
    long long v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = v7[9];
    uint64_t v17 = (_OWORD *)((char *)a1 + v16);
    long long v18 = (_OWORD *)((char *)a2 + v16);
    long long v19 = v18[1];
    _OWORD *v17 = *v18;
    v17[1] = v19;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for Text.Effect.RenderSegmentation.Segment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_0((uint64_t)a1, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
      a1[3] = a2[3];
      char v7 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
      uint64_t v8 = v7[6];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      _ss8RangeSetVySiGMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      *(void *)((char *)a1 + v7[7]) = *(void *)((char *)a2 + v7[7]);
      uint64_t v12 = v7[8];
      uint64_t v13 = (_OWORD *)((char *)a1 + v12);
      uint64_t v14 = (_OWORD *)((char *)a2 + v12);
      long long v15 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v15;
      uint64_t v16 = v7[9];
      uint64_t v17 = (_OWORD *)((char *)a1 + v16);
      long long v18 = (_OWORD *)((char *)a2 + v16);
      long long v19 = v18[1];
      _OWORD *v17 = *v18;
      v17[1] = v19;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for Text.Effect.RenderSegmentation.Segment()
{
  uint64_t result = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

BOOL static TimelineScheduleMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TimelineScheduleMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TimelineScheduleMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static UInt.minimumTimelineScheduleLimit.getter()
{
  return 60;
}

uint64_t TimelineSchedule.entries(within:mode:limit:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v52 = a3;
  LODWORD(v49) = a4;
  uint64_t v55 = a2;
  type metadata accessor for (lower: Date, upper: Date)();
  uint64_t v51 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v57 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v56 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  long long v18 = (char *)&v42 - v17;
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (char *)&v42 - v20;
  type metadata accessor for Range<Date>();
  uint64_t v47 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v48 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v50 = (uint64_t)&v42 - v25;
  swift_getAssociatedTypeWitness();
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LazyPrefixWhileSequence();
  swift_getWitnessTable();
  type metadata accessor for LazyDropWhileSequence();
  swift_getWitnessTable();
  uint64_t v26 = type metadata accessor for LazyPrefixWhileSequence();
  MEMORY[0x270FA5388](v26);
  char v28 = (char *)&v42 - v27;
  LODWORD(v55) = *v55;
  DateInterval.start.getter();
  DateInterval.end.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v29 = v56;
  Date.init(timeIntervalSinceReferenceDate:)();
  uint64_t v30 = v57;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v57 + 8);
  uint64_t v46 = v57 + 8;
  v45(v18, v14);
  _s10Foundation4DateVACSLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    int v44 = v49 & 1;
    uint64_t v43 = v28;
    unint64_t v32 = v13;
    uint64_t v33 = v51;
    uint64_t v34 = &v32[*(int *)(v51 + 48)];
    uint64_t v49 = v26;
    id v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v35(v32, v21, v14);
    uint64_t v42 = v34;
    v35(v34, v29, v14);
    uint64_t v36 = &v10[*(int *)(v33 + 48)];
    BOOL v37 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    v37(v10, v32, v14);
    v37(v36, v34, v14);
    uint64_t v38 = (uint64_t)v48;
    v35(v48, v10, v14);
    double v39 = v45;
    v45(v36, v14);
    double v40 = &v10[*(int *)(v33 + 48)];
    v35(v10, v32, v14);
    v35(v40, v42, v14);
    v35((char *)(v38 + *(int *)(v47 + 36)), v40, v14);
    v39(v10, v14);
    uint64_t v41 = v50;
    outlined init with take of Range<Date>(v38, v50, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    char v58 = (char)v55;
    TimelineSchedule.entries(within:mode:limit:)(v41, &v58, v52, v44, v53, v54, (uint64_t)v43);
    outlined destroy of Range<Date>(v41, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    swift_getWitnessTable();
    return Array.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for Range<Date>()
{
  if (!lazy cache variable for type metadata for Range<Date>)
  {
    type metadata accessor for Date();
    _s10Foundation4DateVACSLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>);
    }
  }
}

uint64_t TimelineSchedule.entries(within:mode:limit:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v41 = a3;
  uint64_t v37 = a1;
  uint64_t v44 = a7;
  int v40 = a4 & 1;
  type metadata accessor for Range<Date>();
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v42 = *(void *)(v43 + 64);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v39 = (uint64_t)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for LazySequence();
  uint64_t v36 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v34 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v34 - v18;
  uint64_t v20 = type metadata accessor for LazyPrefixWhileSequence();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v34 - v21;
  v34[0] = (char *)v34 - v21;
  swift_getWitnessTable();
  uint64_t v38 = type metadata accessor for LazyDropWhileSequence();
  double v23 = MEMORY[0x270FA5388](v38);
  v34[1] = (char *)v34 - v24;
  char v45 = *a2;
  uint64_t v25 = a6;
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(a6 + 24);
  uint64_t v27 = v37;
  v26(v37, &v45, v35, v25, v23);
  MEMORY[0x24C522BD0](AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  uint64_t WitnessTable = swift_getWitnessTable();
  LazySequenceProtocol<>.abort(after:)(v41, v40, v13, WitnessTable, (uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v13);
  uint64_t v29 = v39;
  outlined init with copy of Range<Date>(v27, v39);
  unint64_t v30 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v31 = swift_allocObject();
  outlined init with take of Range<Date>(v29, v31 + v30, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  swift_getWitnessTable();
  LazySequenceProtocol.drop(while:)();
  swift_release();
  outlined init with copy of Range<Date>(v27, v29);
  uint64_t v32 = swift_allocObject();
  outlined init with take of Range<Date>(v29, v32 + v30, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  swift_getWitnessTable();
  LazySequenceProtocol.prefix(while:)();
  return swift_release();
}

uint64_t TimelineSchedule.nextEntry(after:mode:limit:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v33 = a5;
  uint64_t v38 = a3;
  uint64_t v39 = a7;
  int v37 = a4 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for LazySequence();
  uint64_t v35 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = type metadata accessor for LazyPrefixWhileSequence();
  uint64_t v34 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v31 - v18;
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  double v21 = MEMORY[0x270FA5388](v20 - 8);
  double v23 = (char *)&v31 - v22;
  char v41 = *a2;
  uint64_t v24 = a6;
  uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(a6 + 24);
  uint64_t v26 = v36;
  v25(v36, &v41, v33, v24, v21);
  MEMORY[0x24C522BD0](AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
  uint64_t WitnessTable = swift_getWitnessTable();
  LazySequenceProtocol<>.abort(after:)(v38, v37, v10, WitnessTable, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v10);
  uint64_t v40 = v26;
  swift_getWitnessTable();
  Sequence.first(where:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v17);
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v23, 1, v28) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v39, v23, v28);
  }
  static Date.distantFuture.getter();
  return outlined destroy of Date?((uint64_t)v23);
}

uint64_t LazySequenceProtocol<>.abort(after:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  v22[1] = a5;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v22 - v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(unsigned char *)(v17 + 24) = a2 & 1;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, v6, a3);
  v18(v13, v6, a3);
  unint64_t v19 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = a3;
  *((void *)v20 + 3) = a4;
  *((void *)v20 + 4) = v17;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v20[v19], v13, a3);
  swift_retain();
  LazySequenceProtocol.prefix(while:)();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in TimelineSchedule.nextEntry(after:mode:limit:)()
{
  return static Date.> infix(_:_:)() & 1;
}

uint64_t TimelineSchedule.lazyEntries(within:mode:limit:)(uint64_t a1, char *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  char v11 = a4 & 1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LazyPrefixWhileSequence();
  swift_getWitnessTable();
  type metadata accessor for LazyDropWhileSequence();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for LazyPrefixWhileSequence();
  MEMORY[0x270FA5388](v12);
  char v16 = *a2;
  TimelineSchedule.entries(within:mode:limit:)(a1, &v16, a3, v11, a5, a6, (uint64_t)&v15 - v13);
  type metadata accessor for Date();
  swift_getWitnessTable();
  return AnySequence.init<A>(_:)();
}

uint64_t closure #1 in LazySequenceProtocol<>.abort(after:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v48 = (char *)v43 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for PrefixSequence();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v47 = (char *)v43 - v9;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v16 = (char *)v43 - v15;
  swift_beginAccess();
  uint64_t v17 = *(void *)(a2 + 16);
  char v18 = *(unsigned char *)(a2 + 24);
  if (v18) {
    goto LABEL_4;
  }
  if (v17)
  {
    --v17;
LABEL_4:
    uint64_t v19 = 1;
    swift_beginAccess();
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v18;
    return v19;
  }
  if (one-time initialization token for timelineScheduleSequences != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Log.timelineScheduleSequences);
  uint64_t v22 = v10;
  double v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v24 = v51;
  v23(v16, v51, a4);
  v23(v13, v24, a4);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.fault.getter();
  int v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    uint64_t DynamicType = 0;
    v53[0] = v51;
    *(_DWORD *)uint64_t v28 = 134218498;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2080;
    os_log_t v45 = v25;
    v43[1] = v28 + 14;
    int v44 = v27;
    dispatch thunk of LazySequenceProtocol.elements.getter();
    uint64_t v29 = v47;
    Sequence.prefix(_:)();
    uint64_t v30 = v50;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v33 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in implicit closure #2 in closure #1 in LazySequenceProtocol<>.abort(after:), 0, v30, MEMORY[0x263F8D310], MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v32);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v30);
    uint64_t DynamicType = v33;
    type metadata accessor for [String]();
    _s10Foundation4DateVACSLAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (void (*)(uint64_t))type metadata accessor for [String]);
    uint64_t v34 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t DynamicType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v37 = *(void (**)(char *, uint64_t))(v22 + 8);
    v37(v16, a4);
    *(_WORD *)(v28 + 22) = 2080;
    uint64_t DynamicType = swift_getDynamicType();
    swift_getMetatypeMetadata();
    uint64_t v38 = String.init<A>(describing:)();
    uint64_t DynamicType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v37(v13, a4);
    os_log_t v40 = v45;
    _os_log_impl(&dword_245728000, v45, (os_log_type_t)v44, "TimelineSchedule exceeded max length of %lu! Prefix: %s\nBase type: %s", (uint8_t *)v28, 0x20u);
    uint64_t v41 = v51;
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v41, -1, -1);
    MEMORY[0x24C527CC0](v28, -1, -1);
  }
  else
  {
    uint64_t v42 = *(void (**)(char *, uint64_t))(v22 + 8);
    v42(v16, a4);
    v42(v13, a4);
  }
  return 0;
}

uint64_t closure #1 in implicit closure #2 in closure #1 in LazySequenceProtocol<>.abort(after:)@<X0>(uint64_t *a1@<X8>)
{
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t result = Double.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t PeriodicTimelineSchedule.init(from:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  uint64_t result = type metadata accessor for PeriodicTimelineSchedule(0);
  *(double *)(a2 + *(int *)(result + 20)) = a3;
  return result;
}

uint64_t ExplicitTimelineSchedule.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t PeriodicTimelineSchedule.Entries.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
  type metadata accessor for PeriodicTimelineSchedule.Entries(0);

  return static Date.+= infix(_:_:)();
}

uint64_t type metadata accessor for PeriodicTimelineSchedule.Entries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for PeriodicTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance PeriodicTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of Range<Date>(v1, a1, type metadata accessor for PeriodicTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance PeriodicTimelineSchedule.Entries()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of Range<Date>(v0, type metadata accessor for PeriodicTimelineSchedule.Entries);
  return v1;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance PeriodicTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);

  return static Date.+= infix(_:_:)();
}

uint64_t PeriodicTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X8>)
{
  Date.timeIntervalSince(_:)();
  long double v4 = v3;
  long double v5 = *(double *)(v1 + *(int *)(type metadata accessor for PeriodicTimelineSchedule(0) + 20));
  fmod(v4, v5);
  static Date.+ infix(_:_:)();
  uint64_t result = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  *(long double *)(a1 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance PeriodicTimelineSchedule@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  Date.timeIntervalSince(_:)();
  long double v5 = *(double *)(v2 + *(int *)(a1 + 20));
  fmod(v6, v5);
  static Date.+ infix(_:_:)();
  uint64_t result = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  *(long double *)(a2 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance EveryMinuteTimelineSchedule.Entries()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of Range<Date>(v0, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
  return v1;
}

uint64_t EveryMinuteTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  double v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))(v7, a1, v5);
  return EveryMinuteTimelineSchedule.Entries.init(startDate:)((uint64_t)v7, a2);
}

uint64_t ExplicitTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

unint64_t lazy protocol witness table accessor for type TimelineScheduleMode and conformance TimelineScheduleMode()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineScheduleMode and conformance TimelineScheduleMode;
  if (!lazy protocol witness table cache variable for type TimelineScheduleMode and conformance TimelineScheduleMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineScheduleMode and conformance TimelineScheduleMode);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PeriodicTimelineSchedule.Entries()
{
  return _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for PeriodicTimelineSchedule.Entries);
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in PeriodicTimelineSchedule()
{
  return _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for PeriodicTimelineSchedule.Entries);
}

uint64_t dispatch thunk of TimelineSchedule.entries(from:mode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unsigned char *storeEnumTagSinglePayload for TimelineScheduleMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245B8F1D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimelineScheduleMode()
{
  return &type metadata for TimelineScheduleMode;
}

uint64_t getEnumTagSinglePayload for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t *initializeBufferWithCopyOfBuffer for PeriodicTimelineSchedule(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for PeriodicTimelineSchedule(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PeriodicTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for PeriodicTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245B8F58C);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PeriodicTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245B8F610);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for EveryMinuteTimelineSchedule.Entries(uint64_t *a1, uint64_t *a2)
{
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for EveryMinuteTimelineSchedule.Entries(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for EveryMinuteTimelineSchedule.Entries(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for EveryMinuteTimelineSchedule.Entries(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for EveryMinuteTimelineSchedule.Entries(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for EveryMinuteTimelineSchedule.Entries(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_245B8FE3C(uint64_t a1, uint64_t a2)
{
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_245B8FEC4(uint64_t a1, uint64_t a2)
{
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t getEnumTagSinglePayload for ExplicitTimelineSchedule(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ExplicitTimelineSchedule(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245B902C4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ExplicitTimelineSchedule()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined destroy of Range<Date>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_245B90364()
{
  return swift_deallocObject();
}

uint64_t sub_245B90374()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LazySequenceProtocol<>.abort(after:)(uint64_t a1)
{
  return closure #1 in LazySequenceProtocol<>.abort(after:)(a1, *(void *)(v1 + 32), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16));
}

void type metadata accessor for [String]()
{
  if (!lazy cache variable for type metadata for [String])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [String]);
    }
  }
}

uint64_t outlined init with copy of Range<Date>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Range<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in TimelineSchedule.entries(within:mode:limit:)()
{
  type metadata accessor for Range<Date>();

  return static Date.< infix(_:_:)();
}

uint64_t objectdestroy_16Tm()
{
  type metadata accessor for Range<Date>();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = v0 + ((v3 + 16) & ~v3);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v4 + *(int *)(v2 + 44), v5);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TimelineSchedule.entries(within:mode:limit:)()
{
  type metadata accessor for Range<Date>();

  return static Date.< infix(_:_:)();
}

void specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5[2];

  uint64_t v2 = *(void *)(type metadata accessor for Date.ComponentsFormatStyle.Field() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

uint64_t specialized RangeSet.upperBound.getter()
{
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v4 = &v11[-v3 - 8];
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Int>.Ranges);
  char v5 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t v6 = 0;
  if ((v5 & 1) == 0)
  {
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Int>.Ranges);
    dispatch thunk of BidirectionalCollection.index(before:)();
    unsigned int v7 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v6 = *(void *)(v8 + 8);
    v7(v11, 0);
  }
  v11[0] = v5 & 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v11[0]) {
    return 0;
  }
  else {
    return v6;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  void (*v7)(unsigned char *, void);
  uint64_t v8;
  unsigned char v11[32];

  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v4 = &v11[-v3 - 8];
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
  char v5 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t v6 = 0;
  if ((v5 & 1) == 0)
  {
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
    dispatch thunk of BidirectionalCollection.index(before:)();
    unsigned int v7 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v6 = *(void *)(v8 + 8);
    v7(v11, 0);
  }
  v11[0] = v5 & 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v11[0]) {
    return 0;
  }
  else {
    return v6;
  }
}

char *NSTextRange.textRange.getter()
{
  self;
  uint64_t v1 = (void *)swift_dynamicCastObjCClass();
  if (!v1)
  {
    id v7 = objc_msgSend(objc_msgSend(v0, sel_location), sel_compare_, objc_msgSend(v0, sel_endLocation));
    swift_unknownObjectRelease();
    uint64_t v8 = swift_unknownObjectRelease();
    if (!v7)
    {
      id v9 = objc_msgSend(v0, sel_location);
      self;
      unsigned int v10 = (void *)swift_dynamicCastObjCClass();
      if (v10)
      {
        uint64_t v6 = (char *)objc_msgSend(v10, sel_range);
        uint64_t v12 = v11;
        uint64_t result = (char *)swift_unknownObjectRelease();
        if (__OFADD__(v6, v12)) {
          goto LABEL_15;
        }
        if ((uint64_t)&v6[v12] >= (uint64_t)v6) {
          return v6;
        }
        __break(1u);
      }
      uint64_t v8 = swift_unknownObjectRelease();
    }
    MEMORY[0x270FA5388](v8);
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, implicit closure #1 in NSTextRange.textRange.getterpartial apply);
    return 0;
  }
  uint64_t result = (char *)objc_msgSend(v1, sel_range);
  BOOL v4 = __OFADD__(result, v3);
  char v5 = &result[v3];
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = result;
    if ((uint64_t)v5 >= (uint64_t)result) {
      return v6;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

double Text.Effect.SegmentInteraction.displacement(segmentCategory:range:time:context:layer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11)
{
  uint64_t v15 = a1;
  uint64_t v16 = *a4;
  if (a1)
  {
    char v17 = specialized Text.Effect.SegmentInteraction.matches(range:)(a2, a3, (uint64_t)a10);
    uint64_t v18 = 2;
    uint64_t v19 = 4;
    if ((v15 & 4) == 0) {
      uint64_t v19 = v15;
    }
    if ((v15 & 2) == 0) {
      uint64_t v18 = v19;
    }
    if ((v17 & 1) == 0) {
      uint64_t v15 = v18;
    }
  }
  uint64_t v20 = a10[2];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v21 = specialized Sequence.filter(_:)(0, v20, a10, a11, a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_7SwiftUI4TextVAGE6EffectO18SegmentInteractionVAC33_18FF04020434AC91D85E42E330E464BELLVs5NeverOTg503_s7d3UI4f5VAAE6g3O18hi198V12displacement15segmentCategory5range4time7context5layerAG21SelectionDisplacementVSo019NSTextLayoutManagereI0V_SnyAC0Q0V14CharacterIndexVGAA4TimeVAE11BaseContextVAA0C11RenderLayerCtFAG7Element33_18jklmnO13BELLVSiXEfU0_AMTf1cn_nTf4ng_n(v21, (uint64_t)a10, a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v16;
  double v23 = Text.Effect.InteractionElementContainer.selectionDisplacement(for:category:time:context:layer:)(a2, a3, v15, &v27, a5, a6, a7, a8, a9, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

double Text.Effect.InteractionElementContainer.selectionDisplacement(for:category:time:context:layer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v71 = a7;
  uint64_t v72 = a8;
  uint64_t v69 = a5;
  uint64_t v70 = a6;
  uint64_t v66 = a1;
  uint64_t v67 = a2;
  uint64_t v68 = a9;
  type metadata accessor for Text.Effect.SegmentInteraction.Element?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.SegmentInteraction.Element?, (void (*)(uint64_t))type metadata accessor for Text.Effect.SegmentInteraction.Element);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v63 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v62 - v15;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v64 = *(void *)(v17 - 8);
  uint64_t v65 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v62 - v18;
  uint64_t v20 = type metadata accessor for Text.Effect.SegmentInteraction.Element();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v62 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v62 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v62 - v29;
  MEMORY[0x270FA5388](v31);
  unint64_t v35 = (char *)&v62 - v33;
  uint64_t v36 = *a4;
  double v37 = 0.0;
  switch(a3)
  {
    case 2:
      if (*(void *)(a10 + 16))
      {
        uint64_t v38 = v32;
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(a10 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), (uint64_t)&v62 - v33, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
        Text.Effect.RenderSegmentation.Segment.characterRanges.getter((uint64_t)v19);
        uint64_t v39 = specialized RangeSet.lowerBound.getter();
        char v41 = v40;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v19, v65);
        if ((v41 & 1) == 0)
        {
          uint64_t v73 = v36;
          Text.Effect.SegmentInteraction.Element.displacement(for:segment:time:context:segmentIndex:type:layer:)(v39, (uint64_t)v35, &v73, v69, v70, v71, v72, *(void *)&v35[*(int *)(v38 + 20)], 0);
        }
        uint64_t v42 = (uint64_t)v35;
        goto LABEL_20;
      }
      break;
    case 3:
      uint64_t v43 = v32;
      specialized BidirectionalCollection.last.getter(a10, (uint64_t)v16);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v43) != 1)
      {
        outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v16, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
        uint64_t v73 = v36;
        Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:)(v66, v67, 1, &v73, v69, v70, v71, v72, v68);
        uint64_t v42 = (uint64_t)v27;
        goto LABEL_20;
      }
      _ss8RangeSetV7SwiftUISxRzSZ6StrideRpzrlE13IndexSequenceV8IteratorVySi__GWOhTm_0((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for Text.Effect.SegmentInteraction.Element?, (uint64_t)type metadata accessor for Text.Effect.SegmentInteraction.Element, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element?);
      break;
    case 4:
      uint64_t v44 = *(void *)(a10 + 16);
      if (v44)
      {
        uint64_t v45 = v32;
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(a10+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * (v44 - 1), (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
        Text.Effect.RenderSegmentation.Segment.characterRanges.getter((uint64_t)v19);
        uint64_t v46 = specialized RangeSet.upperBound.getter();
        char v48 = v47;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v19, v65);
        if ((v48 & 1) == 0)
        {
          uint64_t v73 = v36;
          double v37 = Text.Effect.SegmentInteraction.Element.displacement(for:segment:time:context:segmentIndex:type:layer:)(v46, (uint64_t)v30, &v73, v69, v70, v71, v72, *(void *)&v30[*(int *)(v45 + 20)], 1u);
        }
        uint64_t v42 = (uint64_t)v30;
        goto LABEL_20;
      }
      break;
    case 5:
      if (*(void *)(a10 + 16))
      {
        uint64_t v73 = *a4;
        Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:)(v66, v67, 0, &v73, v69, v70, v71, v72, v68);
        double v37 = v49;
      }
      break;
    case 7:
      return v37;
    default:
      if (*(void *)(a10 + 16))
      {
        uint64_t v50 = v34;
        uint64_t v51 = v32;
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(a10 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
        uint64_t v52 = v63;
        specialized BidirectionalCollection.last.getter(a10, v63);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v52, 1, v51) == 1)
        {
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
          _ss8RangeSetV7SwiftUISxRzSZ6StrideRpzrlE13IndexSequenceV8IteratorVySi__GWOhTm_0(v52, (uint64_t)&lazy cache variable for type metadata for Text.Effect.SegmentInteraction.Element?, (uint64_t)type metadata accessor for Text.Effect.SegmentInteraction.Element, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element?);
          double v37 = 0.0;
        }
        else
        {
          outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v52, v50, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
          uint64_t v73 = v36;
          uint64_t v53 = v68;
          uint64_t v55 = v66;
          uint64_t v54 = v67;
          uint64_t v57 = v69;
          uint64_t v56 = v70;
          uint64_t v59 = v71;
          uint64_t v58 = v72;
          Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:)(v66, v67, 0, &v73, v69, v70, v71, v72, v68);
          double v37 = v60;
          uint64_t v73 = v36;
          Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:)(v55, v54, 1, &v73, v57, v56, v59, v58, v53);
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v50, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
          uint64_t v42 = (uint64_t)v24;
LABEL_20:
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v42, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
        }
      }
      else
      {
        double v37 = 0.0;
      }
      break;
  }
  return v37;
}

void Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:)(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v57 = a7;
  uint64_t v58 = a8;
  uint64_t v55 = a5;
  uint64_t v56 = a6;
  int v54 = a3;
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  uint64_t v53 = a9;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  uint64_t v61 = (void *)(v11 - 8);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v53 - v20;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v53 - v25;
  uint64_t v27 = *a4;
  uint64_t v59 = v9;
  Text.Effect.RenderSegmentation.Segment.characterRanges.getter((uint64_t)&v53 - v25);
  RangeSet.ranges.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  double v60 = v21;
  uint64_t v62 = v28;
  v28(v18, v21, v15);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v29 = &v13[*((int *)v61 + 11)];
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
  uint64_t v30 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v61 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v31 = *(void *)v29;
    dispatch thunk of Collection.endIndex.getter();
    if (v31 == v65[0]) {
      break;
    }
    uint64_t v32 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v34 = *v33;
    uint64_t v35 = v33[1];
    v32(v65, 0);
    v62(v18, v13, v15);
    dispatch thunk of Collection.formIndex(after:)();
    (*v30)(v18, v15);
    if (v34 <= v63) {
      uint64_t v36 = v63;
    }
    else {
      uint64_t v36 = v34;
    }
    if (v35 >= v64) {
      uint64_t v37 = v64;
    }
    else {
      uint64_t v37 = v35;
    }
    if (v36 < v37)
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v38 = v61;
      }
      else {
        uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
      }
      unint64_t v40 = v38[2];
      unint64_t v39 = v38[3];
      char v41 = (void *)(v40 + 1);
      if (v40 >= v39 >> 1)
      {
        uint64_t v61 = (void *)(v40 + 1);
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v38);
        char v41 = v61;
        uint64_t v38 = v43;
      }
      _OWORD v38[2] = v41;
      uint64_t v61 = v38;
      uint64_t v42 = &v38[2 * v40];
      v42[4] = v36;
      v42[5] = v37;
    }
  }
  _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  uint64_t v44 = ((uint64_t (*)(char *, uint64_t))*v30)(v60, v15);
  unint64_t v45 = v61[2];
  if (v45 <= 1)
  {
    if (v45)
    {
      CFIndex v46 = v61[4];
      uint64_t v47 = v61[5];
      swift_bridgeObjectRelease();
      uint64_t v48 = v47;
      unsigned __int8 v49 = v54;
      uint64_t v50 = v59;
      CFIndex v51 = Text.Effect.RenderSegmentation.Segment.characterIndex(for:type:)(v46, v48, v54);
      v65[0] = v27;
      uint64_t v52 = type metadata accessor for Text.Effect.SegmentInteraction.Element();
      Text.Effect.SegmentInteraction.Element.displacement(for:segment:time:context:segmentIndex:type:layer:)(v51, v50, v65, v55, v56, v57, v58, *(void *)(v50 + *(int *)(v52 + 20)), v49);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    MEMORY[0x270FA5388](v44);
    specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, partial apply for implicit closure #1 in Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:));
    swift_bridgeObjectRelease();
  }
}

double Text.Effect.SegmentInteraction.Element.displacement(for:segment:time:context:segmentIndex:type:layer:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v10 = v9;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v17 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (void **)((char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a3;
  _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(a2, (uint64_t)v22, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v36 = v10;
    uint64_t v34 = a1;
    int v35 = a9;
    uint64_t v24 = a6;
    uint64_t v26 = (void *)*((void *)v22 + 3);
    uint64_t v25 = *((void *)v22 + 4);
    char v27 = v22[40];
    int v28 = *((_DWORD *)v22 + 16);
    uint64_t v29 = *((void *)v22 + 11);
    v40[0] = v26;
    v40[1] = v25;
    char v41 = v27;
    long long v42 = *((_OWORD *)v22 + 3);
    int v43 = v28;
    long long v44 = *(_OWORD *)(v22 + 72);
    uint64_t v45 = v29;
    uint64_t v39 = v23;
    outlined copy of Text.Layout.Line.Line(v26, v25, v27);
    swift_bridgeObjectRetain();
    uint64_t v10 = v36;
    TextRenderLayer.interactionMetrics(for:at:context:segmentIndex:)((uint64_t)v40, &v39, v37, v38, v24, a7, a8, v19);
    outlined consume of Text.Layout.Line.Line(v26, v25, v27);
    swift_bridgeObjectRelease();
    Text.Effect.InteractionMetrics.displacement(for:type:)(v34, v35);
    double v31 = v30;
    outlined consume of Text.Layout.Line.Line(v26, v25, v27);
    swift_bridgeObjectRelease();
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
  }
  else
  {
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v22, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    double v31 = 0.0;
  }
  return v31 + *(double *)(v10 + *(int *)(type metadata accessor for Text.Effect.SegmentInteraction.Element() + 24));
}

uint64_t implicit closure #1 in Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:)()
{
  _StringGuts.grow(_:)(45);
  v0._object = (void *)0x800000024621DC70;
  v0._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

CFIndex Text.Effect.RenderSegmentation.Segment.characterIndex(for:type:)(CFIndex result, uint64_t a2, char a3)
{
  uint64_t v3 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    CFIndex v4 = result;
    if (!a3)
    {
      Text.Effect.RenderSegmentation.Segment.layoutDirection(for:)(result, &v15);
      if ((_BYTE)v15) {
        return v3;
      }
      return v4;
    }
    if (a3 == 1)
    {
      Text.Effect.RenderSegmentation.Segment.layoutDirection(for:)(a2 - 1, &v15);
      if (!(_BYTE)v15) {
        return v3;
      }
      return v4;
    }
    if (!__OFSUB__(v3, result))
    {
      if (v3 != result)
      {
        type metadata accessor for _ContiguousArrayStorage<Any>();
        uint64_t v5 = swift_allocObject();
        *(_OWORD *)(v5 + 16) = xmmword_2461B9DC0;
        _StringGuts.grow(_:)(38);
        _StringGuts.grow(_:)(39);
        v6._uint64_t countAndFlagsBits = 0xD000000000000025;
        v6._object = (void *)0x800000024621DCA0;
        String.append(_:)(v6);
        _print_unlocked<A, B>(_:_:)();
        v7._uint64_t countAndFlagsBits = 3943982;
        v7._object = (void *)0xE300000000000000;
        String.append(_:)(v7);
        _print_unlocked<A, B>(_:_:)();
        v8._uint64_t countAndFlagsBits = 0;
        v8._object = (void *)0xE000000000000000;
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        v9._uint64_t countAndFlagsBits = 0;
        v9._object = (void *)0xE000000000000000;
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        v10._uint64_t countAndFlagsBits = 2108704;
        v10._object = (void *)0xE300000000000000;
        String.append(_:)(v10);
        v11._uint64_t countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        v12._uint64_t countAndFlagsBits = 58;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        v14._object = (void *)0x800000024621D860;
        v14._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
        String.append(_:)(v14);
        *(void *)(v5 + 56) = MEMORY[0x263F8D310];
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0xE000000000000000;
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
      }
      return v4;
    }
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.trailingSegment.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::String v10 = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v10);
  uint64_t v3 = v10;
  uint64_t v4 = v10[2];
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    uint64_t v7 = *(void *)(v6 - 8);
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0((uint64_t)v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v5, a2, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 1, 1, v8);
  }

  return swift_release();
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for Text.Effect.SegmentInteraction.Element?(0, &lazy cache variable for type metadata for Text.Effect.RenderSegmentation.Segment?, (void (*)(uint64_t))type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v78 = (uint64_t)v64 - v13;
  uint64_t v76 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v81 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v70 = (uint64_t)v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v77 = v15;
  uint64_t v87 = *(void (***)(char *, uint64_t))(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v64 - v16;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v85 = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v67 = (uint64_t)v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v69 = (uint64_t)v64 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v68 = (uint64_t)v64 - v24;
  MEMORY[0x270FA5388](v25);
  unint64_t v90 = (char *)v64 - v26;
  MEMORY[0x270FA5388](v27);
  unint64_t v88 = (char *)v64 - v28;
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = a3;
  _OWORD v29[3] = a4;
  _OWORD v29[4] = a5;
  v29[5] = a6;
  uint64_t v66 = v29;
  unint64_t v89 = a3;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v82 = a2;
  if (a1 == a2)
  {
    uint64_t v31 = MEMORY[0x263F8EE78];
    goto LABEL_36;
  }
  uint64_t v32 = a1;
  if (v82 >= a1)
  {
    uint64_t v80 = a6;
    uint64_t v71 = v87 + 1;
    uint64_t v74 = (void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v72 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
    v64[0] = v82 - 1;
    uint64_t v31 = MEMORY[0x263F8EE78];
    uint64_t v33 = v32;
    uint64_t v86 = a5;
    CFDictionaryRef v75 = v17;
    uint64_t v34 = v85;
    v64[1] = a4;
    uint64_t v84 = v32;
    uint64_t v87 = (void (**)(char *, uint64_t))(v19 + 8);
    while (1)
    {
      uint64_t v65 = v31;
      uint64_t v35 = v82;
      if (v33 > v82) {
        uint64_t v35 = v33;
      }
      uint64_t v79 = v35;
      unint64_t v36 = v33;
      uint64_t v37 = v71;
      uint64_t v73 = v33;
      while (1)
      {
        if (v33 < v32)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v79 == v36) {
          goto LABEL_38;
        }
        if (v33 < 0) {
          goto LABEL_39;
        }
        if (v36 >= v89[2]) {
          goto LABEL_40;
        }
        uint64_t v38 = (uint64_t)v88;
        double v83 = (char *)v89
            + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80))
            + *(void *)(v81 + 72) * v36;
        Text.Effect.RenderSegmentation.Segment.characterRanges.getter((uint64_t)v88);
        uint64_t v92 = a5;
        uint64_t v39 = v80;
        uint64_t v93 = v80;
        uint64_t v40 = RangeSet.ranges.getter();
        MEMORY[0x270FA5388](v40);
        v64[-2] = v41;
        uint64_t v42 = v91;
        char v43 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in RangeSet.overlaps(_:)specialized partial apply, (uint64_t)&v64[-4]);
        uint64_t v91 = v42;
        long long v44 = *v37;
        uint64_t v45 = v77;
        (*v37)(v17, v77);
        (*v74)(v90, v38, v34);
        if (v43)
        {
          char v46 = 1;
        }
        else
        {
          uint64_t v92 = v86;
          uint64_t v93 = v39;
          uint64_t v47 = RangeSet.ranges.getter();
          MEMORY[0x270FA5388](v47);
          v64[-2] = &v92;
          uint64_t v48 = v91;
          char v46 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in RangeSet.contains(_:)specialized partial apply, (uint64_t)&v64[-4]);
          uint64_t v91 = v48;
          v44(v17, v45);
        }
        unsigned __int8 v49 = *v87;
        (*v87)(v90, v34);
        v49(v88, v34);
        a5 = v86;
        uint64_t v32 = v84;
        uint64_t v50 = v78;
        uint64_t v17 = v75;
        if (v46) {
          break;
        }
        CFIndex v51 = v89;
        Array<A>.trailingSegment.getter(v89, v78);
        if ((*v72)(v50, 1, v76) == 1)
        {
          uint64_t result = _ss8RangeSetV7SwiftUISxRzSZ6StrideRpzrlE13IndexSequenceV8IteratorVySi__GWOhTm_0(v50, (uint64_t)&lazy cache variable for type metadata for Text.Effect.RenderSegmentation.Segment?, (uint64_t)type metadata accessor for Text.Effect.RenderSegmentation.Segment, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element?);
        }
        else
        {
          uint64_t v52 = v50;
          uint64_t v53 = v70;
          uint64_t result = outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v52, v70, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          if (v36 >= v51[2]) {
            goto LABEL_41;
          }
          uint64_t v54 = v68;
          Text.Effect.RenderSegmentation.Segment.characterRanges.getter(v68);
          uint64_t v55 = v69;
          Text.Effect.RenderSegmentation.Segment.characterRanges.getter(v69);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          char v56 = static RangeSet.== infix(_:_:)();
          uint64_t v57 = v85;
          v49((char *)v55, v85);
          v49((char *)v54, v57);
          if ((v56 & 1) == 0)
          {
            uint64_t result = _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v53, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            goto LABEL_26;
          }
          uint64_t v58 = v67;
          Text.Effect.RenderSegmentation.Segment.characterRanges.getter(v67);
          uint64_t v59 = specialized RangeSet.upperBound.getter();
          char v61 = v60;
          v49((char *)v58, v57);
          if (v61)
          {
            uint64_t result = _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v53, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            a5 = v86;
LABEL_26:
            uint64_t v32 = v84;
LABEL_27:
            uint64_t v37 = v71;
            goto LABEL_9;
          }
          a5 = v86;
          uint64_t v32 = v84;
          if (v59 > v86)
          {
            uint64_t result = _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v53, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            goto LABEL_27;
          }
          uint64_t result = _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v53, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          uint64_t v37 = v71;
          if (v59 < v80) {
            break;
          }
        }
LABEL_9:
        ++v36;
        uint64_t v34 = v85;
        uint64_t v33 = v73;
        if (v82 == v36)
        {
          uint64_t v31 = v65;
          goto LABEL_36;
        }
      }
      uint64_t v31 = v65;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v94 = v31;
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v31 = v94;
      }
      uint64_t v34 = v85;
      unint64_t v63 = *(void *)(v31 + 16);
      unint64_t v62 = *(void *)(v31 + 24);
      if (v63 >= v62 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
        uint64_t v31 = v94;
      }
      uint64_t v33 = v36 + 1;
      *(void *)(v31 + 16) = v63 + 1;
      *(void *)(v31 + 8 * v63 + 32) = v36;
      if (v64[0] == v36)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return v31;
      }
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void Text.Layout.Line.layoutDirection(for:)(CFIndex a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  int v5 = *(unsigned __int8 *)(v2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)v2, v4, *(unsigned char *)(v2 + 16));
  for (CFIndex i = 0; ; ++i)
  {
    if (v5)
    {
      uint64_t v7 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
      if (!v7)
      {
        if (!i)
        {
          uint64_t v23 = v3;
          uint64_t v24 = v4;
          char v25 = 1;
LABEL_22:
          outlined consume of Text.Layout.Line.Line(v23, v24, v25);
          char v22 = 0;
          goto LABEL_23;
        }
        goto LABEL_10;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v3, v4, 0);
      swift_release();
      uint64_t v7 = (const __CTLine *)v3;
    }
    CFArrayRef RunCount = _CTLineGetRunCount(v7);

    if ((const __CFArray *)i == RunCount)
    {
      uint64_t v23 = v3;
      uint64_t v24 = v4;
      char v25 = v5;
      goto LABEL_22;
    }
    if (!v5)
    {
      outlined copy of Text.Layout.Line.Line(v3, v4, 0);
      swift_release();
      outlined copy of Text.Layout.Line.Line(v3, v4, 0);

      outlined copy of Text.Layout.Line.Line(v3, v4, 0);
      outlined copy of Text.Layout.Line.Line(v3, v4, 0);
      swift_release();
      uint64_t v14 = (const __CTLine *)v3;
      Swift::String v10 = v3;
      goto LABEL_14;
    }
LABEL_10:
    id v9 = (id)_NSTextLineFragmentGetCTLine(v3);
    if (!v9) {
      goto LABEL_27;
    }
    Swift::String v10 = v9;
    char v11 = 1;
    outlined copy of Text.Layout.Line.Line(v3, v4, 1);
    uint64_t v12 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
    CFArrayRef v13 = 0;
    if (v12)
    {
      uint64_t v14 = v12;
LABEL_14:
      CFArrayRef v13 = _CTLineGetRunCount(v14);

      char v11 = v5;
    }
    outlined consume of Text.Layout.Line.Line(v3, v4, v11);
    if (i >= (uint64_t)v13) {
      break;
    }
    swift_retain();
    uint64_t v15 = v10;
    uint64_t v16 = (id)_CTLineGetRunAtIndex(v15, i);
    CFRange StringRange = CTRunGetStringRange((CTRunRef)v16);
    swift_release();

    CFIndex v18 = StringRange.location + StringRange.length;
    if (__OFADD__(StringRange.location, StringRange.length)) {
      goto LABEL_25;
    }
    if (v18 < StringRange.location) {
      goto LABEL_26;
    }
    if (StringRange.location <= a1 && v18 > a1)
    {
      outlined consume of Text.Layout.Line.Line(v3, v4, v5);
      uint64_t v19 = v15;
      swift_retain();
      uint64_t v20 = (id)_CTLineGetRunAtIndex(v19, i);
      char Status = CTRunGetStatus((CTRunRef)v20);
      swift_release_n();

      char v22 = Status & 1;
LABEL_23:
      *a2 = v22;
      return;
    }
    swift_release();
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

void Text.Effect.RenderSegmentation.StaticLines.layoutDirection(for:)(CFIndex a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *v2;
  uint64_t v17 = v3;
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_15:
    *a2 = 0;
    return;
  }
  uint64_t v16 = a2;
  swift_bridgeObjectRetain_n();
  uint64_t v6 = v3 + 72;
  while (1)
  {
    uint64_t v8 = *(void **)(v6 - 40);
    uint64_t v7 = *(void *)(v6 - 32);
    char v9 = *(unsigned char *)(v6 - 24);
    if ((v9 & 1) == 0)
    {
      outlined copy of Text.Layout.Line.Line(v8, v7, 0);
      outlined copy of Text.Layout.Line.Line(v8, v7, 0);
      uint64_t v14 = v8;
      CFRange StringRange = CTLineGetStringRange(v14);

      outlined consume of Text.Layout.Line.Line(v8, v7, 0);
      CFIndex v13 = StringRange.location + StringRange.length;
      if (__OFADD__(StringRange.location, StringRange.length)) {
        goto LABEL_18;
      }
      if (v13 < StringRange.location) {
        goto LABEL_19;
      }
      if (StringRange.location > a1)
      {
        char v9 = 0;
        goto LABEL_4;
      }
      goto LABEL_3;
    }
    outlined copy of Text.Layout.Line.Line(v8, v7, 1);
    outlined copy of Text.Layout.Line.Line(v8, v7, 1);
    id v10 = objc_msgSend(v8, sel_characterRange);
    uint64_t v12 = v11;
    outlined consume of Text.Layout.Line.Line(v8, v7, 1);
    CFIndex v13 = (CFIndex)v10 + v12;
    if (__OFADD__(v10, v12)) {
      break;
    }
    if (v13 < (uint64_t)v10) {
      goto LABEL_20;
    }
    if ((uint64_t)v10 > a1)
    {
      char v9 = 1;
      goto LABEL_4;
    }
LABEL_3:
    if (v13 > a1)
    {
      outlined release of LinearGradient((uint64_t)&v17);
      outlined release of LinearGradient((uint64_t)&v17);
      Text.Layout.Line.layoutDirection(for:)(a1, v16);
      outlined consume of Text.Layout.Line.Line(v8, v7, v9);
      return;
    }
LABEL_4:
    outlined consume of Text.Layout.Line.Line(v8, v7, v9);
    v6 += 48;
    if (!--v4)
    {
      outlined release of LinearGradient((uint64_t)&v17);
      outlined release of LinearGradient((uint64_t)&v17);
      a2 = v16;
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

void Text.Effect.RenderSegmentation.Segment.layoutDirection(for:)(CFIndex a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  uint64_t v9 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v3, (uint64_t)v11, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v11, (uint64_t)v8, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      char v13 = v8[16];
      int v14 = *((_DWORD *)v8 + 10);
      long long v20 = *(_OWORD *)v8;
      v21[0] = v13;
      *(_OWORD *)&v21[8] = *(_OWORD *)(v8 + 24);
      *(_DWORD *)&v21[24] = v14;
      Text.Layout.Line.layoutDirection(for:)(a1, a2);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v8, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    }
    else
    {
      uint64_t v16 = (void *)*((void *)v11 + 3);
      uint64_t v17 = *((void *)v11 + 4);
      char v18 = v11[40];
      int v19 = *((_DWORD *)v11 + 16);
      *(void *)&long long v20 = v16;
      *((void *)&v20 + 1) = v17;
      v21[0] = v18;
      *(_OWORD *)&v21[8] = *((_OWORD *)v11 + 3);
      *(_DWORD *)&v21[24] = v19;
      outlined copy of Text.Layout.Line.Line(v16, v17, v18);
      Text.Layout.Line.layoutDirection(for:)(a1, a2);
      outlined consume of Text.Layout.Line.Line(v16, v17, v18);
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v16, v17, v18);
    }
  }
  else
  {
    long long v15 = *((_OWORD *)v11 + 1);
    long long v20 = *(_OWORD *)v11;
    *(_OWORD *)uint64_t v21 = v15;
    *(_OWORD *)&v21[16] = *((_OWORD *)v11 + 2);
    uint64_t v22 = *((void *)v11 + 6);
    Text.Effect.RenderSegmentation.StaticLines.layoutDirection(for:)(a1, a2);
    outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v20);
  }
}

uint64_t implicit closure #1 in NSTextRange.textRange.getter(void *a1)
{
  _StringGuts.grow(_:)(55);
  v2._object = (void *)0x800000024621D820;
  v2._uint64_t countAndFlagsBits = 0xD000000000000035;
  String.append(_:)(v2);
  id v3 = objc_msgSend(a1, sel_description);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  id v3 = (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x263F8ED78];
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  v402 = (char *)&v384 - v7;
  Swift::String v8 = (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x263F8EDA0];
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v401 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  CGPoint v400 = (char *)&v384 - v11;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v399 = (char *)&v384 - v13;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v398 = v14;
  MEMORY[0x270FA5388](v14);
  v433 = (Swift::Int *)((char *)&v384 - v15);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, v3);
  uint64_t v447 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v407 = (char *)&v384 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v410 = (char *)&v384 - v20;
  MEMORY[0x270FA5388](v21);
  unint64_t v404 = (char *)&v384 - v22;
  MEMORY[0x270FA5388](v23);
  v421 = (char *)&v384 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v388 = (char *)&v384 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v429 = (char *)&v384 - v28;
  uint64_t v415 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v415);
  uint64_t v405 = (uint64_t)&v384 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v406 = (uint64_t)&v384 - v31;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, v8);
  uint64_t v465 = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v441 = (uint64_t)&v384 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v384 - v36;
  MEMORY[0x270FA5388](v38);
  uint64_t v442 = (uint64_t)&v384 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v443 = (uint64_t)&v384 - v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v394 = (uint64_t)&v384 - v43;
  MEMORY[0x270FA5388](v44);
  uint64_t v397 = (uint64_t)&v384 - v45;
  uint64_t v438 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v431 = *(void *)(v438 - 8);
  MEMORY[0x270FA5388](v438);
  uint64_t v413 = (uint64_t)&v384 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v47);
  uint64_t v422 = (uint64_t)&v384 - v48;
  MEMORY[0x270FA5388](v49);
  uint64_t v423 = (Swift::Int *)((char *)&v384 - v50);
  MEMORY[0x270FA5388](v51);
  v425 = (char **)((char *)&v384 - v52);
  MEMORY[0x270FA5388](v53);
  uint64_t v432 = (uint64_t)&v384 - v54;
  MEMORY[0x270FA5388](v55);
  uint64_t v424 = (uint64_t)&v384 - v56;
  MEMORY[0x270FA5388](v57);
  v412 = (Swift::Int *)((char *)&v384 - v58);
  MEMORY[0x270FA5388](v59);
  uint64_t v427 = (uint64_t)&v384 - v60;
  MEMORY[0x270FA5388](v61);
  uint64_t v430 = (uint64_t)&v384 - v62;
  MEMORY[0x270FA5388](v63);
  uint64_t v426 = (uint64_t)&v384 - v64;
  MEMORY[0x270FA5388](v65);
  uint64_t v393 = (uint64_t)&v384 - v66;
  MEMORY[0x270FA5388](v67);
  uint64_t v396 = (uint64_t)&v384 - v68;
  MEMORY[0x270FA5388](v69);
  uint64_t v403 = (uint64_t)&v384 - v70;
  MEMORY[0x270FA5388](v71);
  uint64_t v395 = (uint64_t)&v384 - v72;
  uint64_t v437 = a1;
  Swift::Int v73 = a1[1];
  Swift::Int v74 = _minimumMergeRunLength(_:)(v73);
  if (v74 >= v73)
  {
    if ((v73 & 0x8000000000000000) == 0)
    {
      if (v73) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v73, 1, v437);
      }
      return;
    }
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
    goto LABEL_300;
  }
  if (v73 >= 0) {
    uint64_t v75 = v73;
  }
  else {
    uint64_t v75 = v73 + 1;
  }
  if (v73 < -1) {
    goto LABEL_306;
  }
  unint64_t v445 = v37;
  Swift::Int v386 = v74;
  if (v73 < 2)
  {
    unint64_t v428 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v431 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v431 + 80));
    uint64_t v385 = MEMORY[0x263F8EE78];
    if (v73 != 1)
    {
      unint64_t v224 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v80 = (char *)MEMORY[0x263F8EE78];
      uint64_t v376 = v1;
      if (v224 < 2)
      {
LABEL_256:
        swift_bridgeObjectRelease();
        *(void *)(v385 + 16) = 0;
        goto LABEL_257;
      }
LABEL_243:
      uint64_t v377 = *v437;
      while (1)
      {
        unint64_t v378 = v224 - 2;
        if (v224 < 2) {
          goto LABEL_291;
        }
        if (!v377) {
          goto LABEL_305;
        }
        v379 = v80;
        uint64_t v380 = *(void *)&v80[16 * v378 + 32];
        uint64_t v381 = *(void *)&v80[16 * v224 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)(v377 + *(void *)(v431 + 72) * v380, v377 + *(void *)(v431 + 72) * *(void *)&v80[16 * v224 + 16], v377 + *(void *)(v431 + 72) * v381, v428);
        if (v376)
        {
          uint64_t v375 = v385;
          goto LABEL_241;
        }
        if (v381 < v380) {
          goto LABEL_292;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v379 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v379);
        }
        if (v378 >= *((void *)v379 + 2)) {
          goto LABEL_293;
        }
        v382 = &v379[16 * v378 + 32];
        *(void *)v382 = v380;
        *((void *)v382 + 1) = v381;
        unint64_t v383 = *((void *)v379 + 2);
        if (v224 > v383) {
          goto LABEL_294;
        }
        memmove(&v379[16 * v224 + 16], &v379[16 * v224 + 32], 16 * (v383 - v224));
        uint64_t v80 = v379;
        *((void *)v379 + 2) = v383 - 1;
        unint64_t v224 = v383 - 1;
        if (v383 <= 2) {
          goto LABEL_256;
        }
      }
    }
  }
  else
  {
    uint64_t v76 = v75 >> 1;
    uint64_t v77 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v77 + 16) = v76;
    uint64_t v78 = *(unsigned __int8 *)(v431 + 80);
    uint64_t v385 = v77;
    unint64_t v428 = v77 + ((v78 + 32) & ~v78);
  }
  Swift::Int v79 = 0;
  uint64_t v434 = (uint64_t *)(v33 + 8);
  uint64_t v435 = (Swift::Int *)(v17 + 8);
  double v391 = (void (**)(char *, uint64_t))(v10 + 8);
  double v392 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v389 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  double v390 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v80 = (char *)MEMORY[0x263F8EE78];
  uint64_t v436 = v1;
  uint64_t v446 = v5;
  uint64_t v81 = v429;
  while (2)
  {
    Swift::Int v82 = v79 + 1;
    uint64_t v408 = v80;
    Swift::Int v420 = v79;
    if (v79 + 1 >= v73) {
      goto LABEL_109;
    }
    Swift::Int v83 = v79;
    uint64_t v84 = *v437;
    uint64_t v85 = *(char **)(v431 + 72);
    Swift::Int v409 = v79 + 1;
    uint64_t v86 = v84 + (void)v85 * v82;
    uint64_t v87 = v395;
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v86, v395, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    uint64_t v419 = v84;
    uint64_t v440 = v85;
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v84 + (void)v85 * v83, v403, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v87, v396, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    Swift::Int v416 = v73;
    if (EnumCaseMultiPayload)
    {
      uint64_t v89 = v447;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v90 = v406;
        outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v396, v406, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        char v91 = *(unsigned char *)(v90 + 16);
        int v92 = *(_DWORD *)(v90 + 40);
        long long v454 = *(_OWORD *)v90;
        char v455 = v91;
        long long v456 = *(_OWORD *)(v90 + 24);
        int v457 = v92;
        Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v90 + *(int *)(v415 + 24)), v397);
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v90, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      }
      else
      {
        uint64_t v94 = *(void **)(v396 + 24);
        uint64_t v95 = *(void *)(v396 + 32);
        char v96 = *(unsigned char *)(v396 + 40);
        uint64_t v97 = *(char **)(v396 + 48);
        char v98 = *(char **)(v396 + 56);
        int v99 = *(_DWORD *)(v396 + 64);
        unint64_t v100 = *(char **)(v396 + 72);
        uint64_t v101 = *(char **)(v396 + 80);
        id v102 = *(char **)(v396 + 88);
        outlined copy of Text.Layout.Line.Line(v94, v95, v96);
        lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
        swift_bridgeObjectRetain();
        uint64_t v103 = v397;
        RangeSet.init()();
        *(void *)&long long v454 = v94;
        *((void *)&v454 + 1) = v95;
        char v455 = v96;
        *(void *)&long long v456 = v97;
        *((void *)&v456 + 1) = v98;
        int v457 = v99;
        uint64_t v458 = v100;
        unint64_t v459 = v101;
        unint64_t v460 = v102;
        CFIndex v448 = (CFIndex)v94;
        CFIndex v449 = v95;
        char v450 = v96;
        double v451 = v97;
        uint64_t v452 = v98;
        int v453 = v99;
        Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v448, v103);
        outlined consume of Text.Layout.Line.Line(v94, v95, v96);
        swift_bridgeObjectRelease();
        uint64_t v104 = v94;
        uint64_t v81 = v429;
        outlined consume of Text.Layout.Line.Line(v104, v95, v96);
        uint64_t v89 = v447;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      long long v93 = *(_OWORD *)(v396 + 16);
      v463[0] = *(_OWORD *)v396;
      v463[1] = v93;
      v463[2] = *(_OWORD *)(v396 + 32);
      uint64_t v464 = *(void *)(v396 + 48);
      Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
      outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v463);
      uint64_t v89 = v447;
    }
    RangeSet.ranges.getter();
    uint64_t v105 = lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
    uint64_t v106 = v81;
    char v107 = dispatch thunk of Collection.isEmpty.getter();
    if (v107)
    {
      char v108 = 0;
    }
    else
    {
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
      dispatch thunk of BidirectionalCollection.index(before:)();
      double v109 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
      char v108 = *(void (**)(void, void))(v110 + 8);
      v109(&v454, 0);
    }
    Swift::Int v111 = v416;
    LOBYTE(v454) = v107 & 1;
    Swift::Int v418 = *v435;
    ((void (*)(char *, uint64_t))v418)(v106, v89);
    char v112 = v454;
    Swift::Int v417 = *v434;
    ((void (*)(uint64_t, uint64_t))v417)(v397, v465);
    uint64_t v414 = v105;
    if (v112) {
      goto LABEL_33;
    }
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v403, v393, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int v113 = swift_getEnumCaseMultiPayload();
    unint64_t v114 = v388;
    uint64_t v444 = v108;
    if (v113)
    {
      if (v113 == 1)
      {
        uint64_t v115 = v406;
        outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v393, v406, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        char v116 = *(unsigned char *)(v115 + 16);
        int v117 = *(_DWORD *)(v115 + 40);
        long long v454 = *(_OWORD *)v115;
        char v455 = v116;
        long long v456 = *(_OWORD *)(v115 + 24);
        int v457 = v117;
        Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v115 + *(int *)(v415 + 24)), v394);
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v115, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      }
      else
      {
        uint64_t v119 = *(void **)(v393 + 24);
        uint64_t v120 = *(void *)(v393 + 32);
        char v121 = *(unsigned char *)(v393 + 40);
        uint64_t v122 = *(char **)(v393 + 48);
        uint64_t v123 = *(char **)(v393 + 56);
        int v124 = *(_DWORD *)(v393 + 64);
        unint64_t v125 = *(char **)(v393 + 72);
        double v126 = *(char **)(v393 + 80);
        uint64_t v127 = *(char **)(v393 + 88);
        outlined copy of Text.Layout.Line.Line(v119, v120, v121);
        lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
        swift_bridgeObjectRetain();
        uint64_t v128 = v394;
        RangeSet.init()();
        *(void *)&long long v454 = v119;
        *((void *)&v454 + 1) = v120;
        char v455 = v121;
        *(void *)&long long v456 = v122;
        *((void *)&v456 + 1) = v123;
        int v457 = v124;
        uint64_t v458 = v125;
        unint64_t v459 = v126;
        unint64_t v460 = v127;
        CFIndex v448 = (CFIndex)v119;
        CFIndex v449 = v120;
        char v450 = v121;
        double v451 = v122;
        uint64_t v452 = v123;
        int v453 = v124;
        Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v448, v128);
        outlined consume of Text.Layout.Line.Line(v119, v120, v121);
        swift_bridgeObjectRelease();
        uint64_t v129 = v119;
        unint64_t v114 = v388;
        outlined consume of Text.Layout.Line.Line(v129, v120, v121);
        uint64_t v89 = v447;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      long long v118 = *(_OWORD *)(v393 + 16);
      v461[0] = *(_OWORD *)v393;
      v461[1] = v118;
      v461[2] = *(_OWORD *)(v393 + 32);
      uint64_t v462 = *(void *)(v393 + 48);
      Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
      outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v461);
    }
    RangeSet.ranges.getter();
    int v130 = v114;
    char v131 = dispatch thunk of Collection.isEmpty.getter();
    if (v131)
    {
      uint64_t v132 = 0;
    }
    else
    {
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
      dispatch thunk of BidirectionalCollection.index(before:)();
      uint64_t v133 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v132 = *(void (**)(void, void))(v134 + 8);
      v133(&v454, 0);
    }
    Swift::Int v111 = v416;
    LOBYTE(v454) = v131 & 1;
    ((void (*)(char *, uint64_t))v418)(v130, v89);
    char v135 = v454;
    ((void (*)(uint64_t, uint64_t))v417)(v394, v465);
    if (v135) {
LABEL_33:
    }
      LODWORD(v411) = 0;
    else {
      LODWORD(v411) = (uint64_t)v444 < (uint64_t)v132;
    }
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v403, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v395, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    uint64_t v136 = (char *)(v420 + 2);
    if (v420 + 2 >= v111)
    {
      Swift::Int v82 = v420 + 2;
      if (!v411) {
        goto LABEL_98;
      }
      goto LABEL_85;
    }
    Swift::Int v137 = v409;
    do
    {
      uint64_t v138 = v89;
      uint64_t v139 = v419;
      uint64_t v140 = v440;
      v439 = v136;
      uint64_t v141 = v426;
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v419 + (void)v136 * (void)v440, v426, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v139 + v137 * (void)v140, v430, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v141, v427, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int v142 = swift_getEnumCaseMultiPayload();
      if (v142)
      {
        uint64_t v143 = v421;
        if (v142 == 1)
        {
          uint64_t v89 = v138;
          uint64_t v144 = v406;
          outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v427, v406, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          char v145 = *(unsigned char *)(v144 + 16);
          int v146 = *(_DWORD *)(v144 + 40);
          long long v454 = *(_OWORD *)v144;
          char v455 = v145;
          long long v456 = *(_OWORD *)(v144 + 24);
          int v457 = v146;
          Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v144 + *(int *)(v415 + 24)), v443);
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v144, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          unint64_t v161 = *(void **)(v427 + 24);
          uint64_t v162 = *(void *)(v427 + 32);
          char v163 = *(unsigned char *)(v427 + 40);
          long long v164 = *(char **)(v427 + 48);
          long long v165 = *(char **)(v427 + 56);
          int v166 = *(_DWORD *)(v427 + 64);
          uint64_t v167 = *(char **)(v427 + 72);
          id v168 = *(char **)(v427 + 80);
          objc_super v169 = *(char **)(v427 + 88);
          outlined copy of Text.Layout.Line.Line(v161, v162, v163);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          swift_bridgeObjectRetain();
          uint64_t v170 = v443;
          RangeSet.init()();
          *(void *)&long long v454 = v161;
          *((void *)&v454 + 1) = v162;
          char v455 = v163;
          *(void *)&long long v456 = v164;
          *((void *)&v456 + 1) = v165;
          int v457 = v166;
          uint64_t v458 = v167;
          unint64_t v459 = v168;
          unint64_t v460 = v169;
          CFIndex v448 = (CFIndex)v161;
          CFIndex v449 = v162;
          char v450 = v163;
          double v451 = v164;
          uint64_t v452 = v165;
          int v453 = v166;
          Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v448, v170);
          outlined consume of Text.Layout.Line.Line(v161, v162, v163);
          swift_bridgeObjectRelease();
          uint64_t v143 = v421;
          outlined consume of Text.Layout.Line.Line(v161, v162, v163);
          uint64_t v89 = v447;
          swift_bridgeObjectRelease();
        }
        goto LABEL_54;
      }
      Swift::Int v147 = *(void *)v427;
      uint64_t v148 = *(void (**)(void, void))(v427 + 8);
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      RangeSet.init()();
      uint64_t v149 = *(void *)(v147 + 16);
      uint64_t v143 = v421;
      if (v149)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Swift::Int v409 = v147;
        uint64_t v150 = (char *)(v147 + 48);
        uint64_t v444 = v148;
        while (1)
        {
          uint64_t v151 = (void *)*((void *)v150 - 2);
          uint64_t v152 = *((void *)v150 - 1);
          char v153 = *v150;
          if (*v150)
          {
            outlined copy of Text.Layout.Line.Line(*((void **)v150 - 2), *((void *)v150 - 1), 1);
            location = (char *)objc_msgSend(v151, sel_characterRange);
            CFIndex length = v155;
          }
          else
          {
            outlined copy of Text.Layout.Line.Line(*((void **)v150 - 2), *((void *)v150 - 1), 0);
            outlined copy of Text.Layout.Line.Line(v151, v152, 0);
            uint64_t v157 = v151;
            CFRange StringRange = CTLineGetStringRange(v157);
            location = (char *)StringRange.location;
            CFIndex length = StringRange.length;

            outlined consume of Text.Layout.Line.Line(v151, v152, 0);
          }
          double v159 = &location[length];
          if (__OFADD__(location, length)) {
            break;
          }
          if ((uint64_t)v159 < (uint64_t)location) {
            goto LABEL_259;
          }
          CFIndex v448 = (CFIndex)location;
          CFIndex v449 = (CFIndex)&location[length];
          if (__OFSUB__(v159, location)) {
            goto LABEL_260;
          }
          if (v159 != location)
          {
            uint64_t v160 = (void (*)(long long *, void))RangeSet._ranges.modify();
            RangeSet.Ranges._insert(contentsOf:)();
            v160(&v454, 0);
          }
          v150 += 48;
          outlined consume of Text.Layout.Line.Line(v151, v152, v153);
          if (!--v149)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t v5 = v446;
            uint64_t v89 = v447;
            uint64_t v143 = v421;
            goto LABEL_54;
          }
        }
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
        goto LABEL_296;
      }
      uint64_t v89 = v138;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = v446;
LABEL_54:
      RangeSet.ranges.getter();
      char v171 = dispatch thunk of Collection.isEmpty.getter();
      if (v171)
      {
        Swift::Int v409 = 0;
      }
      else
      {
        dispatch thunk of Collection.endIndex.getter();
        lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
        dispatch thunk of BidirectionalCollection.index(before:)();
        uint64_t v172 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
        Swift::Int v409 = *(void *)(v173 + 8);
        v172(&v454, 0);
      }
      LOBYTE(v454) = v171 & 1;
      ((void (*)(char *, uint64_t))v418)(v143, v89);
      char v174 = v454;
      ((void (*)(uint64_t, uint64_t))v417)(v443, v465);
      if (v174)
      {
LABEL_80:
        int v210 = 0;
        goto LABEL_82;
      }
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v430, (uint64_t)v412, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int v175 = swift_getEnumCaseMultiPayload();
      if (v175)
      {
        if (v175 == 1)
        {
          uint64_t v176 = v406;
          outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v412, v406, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          char v177 = *(unsigned char *)(v176 + 16);
          int v178 = *(_DWORD *)(v176 + 40);
          long long v454 = *(_OWORD *)v176;
          char v455 = v177;
          long long v456 = *(_OWORD *)(v176 + 24);
          int v457 = v178;
          Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v176 + *(int *)(v415 + 24)), v442);
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v176, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          double v193 = (void *)v412[3];
          uint64_t v194 = v412[4];
          char v195 = *((unsigned char *)v412 + 40);
          char v196 = (char *)v412[6];
          uint64_t v197 = (char *)v412[7];
          int v198 = *((_DWORD *)v412 + 16);
          uint64_t v199 = (char *)v412[9];
          uint64_t v200 = (char *)v412[10];
          uint64_t v201 = (char *)v412[11];
          outlined copy of Text.Layout.Line.Line(v193, v194, v195);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          swift_bridgeObjectRetain();
          uint64_t v202 = v442;
          RangeSet.init()();
          *(void *)&long long v454 = v193;
          *((void *)&v454 + 1) = v194;
          char v455 = v195;
          *(void *)&long long v456 = v196;
          *((void *)&v456 + 1) = v197;
          int v457 = v198;
          uint64_t v458 = v199;
          unint64_t v459 = v200;
          unint64_t v460 = v201;
          CFIndex v448 = (CFIndex)v193;
          CFIndex v449 = v194;
          char v450 = v195;
          double v451 = v196;
          uint64_t v452 = v197;
          int v453 = v198;
          Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v448, v202);
          outlined consume of Text.Layout.Line.Line(v193, v194, v195);
          swift_bridgeObjectRelease();
          outlined consume of Text.Layout.Line.Line(v193, v194, v195);
          uint64_t v89 = v447;
          swift_bridgeObjectRelease();
        }
        goto LABEL_75;
      }
      uint64_t v179 = *v412;
      uint64_t v180 = (void (*)(void, void))v412[1];
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      RangeSet.init()();
      uint64_t v181 = *(void *)(v179 + 16);
      if (!v181)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v5 = v446;
LABEL_75:
        BOOL v203 = v404;
        goto LABEL_76;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v387 = v179;
      char v182 = (char *)(v179 + 48);
      uint64_t v444 = v180;
      do
      {
        uint64_t v183 = (void *)*((void *)v182 - 2);
        uint64_t v184 = *((void *)v182 - 1);
        char v185 = *v182;
        if (*v182)
        {
          outlined copy of Text.Layout.Line.Line(*((void **)v182 - 2), *((void *)v182 - 1), 1);
          uint64_t v186 = (char *)objc_msgSend(v183, sel_characterRange);
          CFIndex v188 = v187;
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(*((void **)v182 - 2), *((void *)v182 - 1), 0);
          outlined copy of Text.Layout.Line.Line(v183, v184, 0);
          uint64_t v189 = v183;
          CFRange v190 = CTLineGetStringRange(v189);
          uint64_t v186 = (char *)v190.location;
          CFIndex v188 = v190.length;

          outlined consume of Text.Layout.Line.Line(v183, v184, 0);
        }
        id v191 = &v186[v188];
        if (__OFADD__(v186, v188)) {
          goto LABEL_273;
        }
        if ((uint64_t)v191 < (uint64_t)v186) {
          goto LABEL_274;
        }
        CFIndex v448 = (CFIndex)v186;
        CFIndex v449 = (CFIndex)&v186[v188];
        if (__OFSUB__(v191, v186)) {
          goto LABEL_275;
        }
        if (v191 != v186)
        {
          double v192 = (void (*)(long long *, void))RangeSet._ranges.modify();
          RangeSet.Ranges._insert(contentsOf:)();
          v192(&v454, 0);
        }
        v182 += 48;
        outlined consume of Text.Layout.Line.Line(v183, v184, v185);
        --v181;
      }
      while (v181);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v5 = v446;
      uint64_t v89 = v447;
      BOOL v203 = v404;
LABEL_76:
      RangeSet.ranges.getter();
      uint64_t v204 = v203;
      char v205 = dispatch thunk of Collection.isEmpty.getter();
      if (v205)
      {
        Swift::Int v206 = 0;
      }
      else
      {
        dispatch thunk of Collection.endIndex.getter();
        lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
        dispatch thunk of BidirectionalCollection.index(before:)();
        uint64_t v207 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
        Swift::Int v206 = *(void *)(v208 + 8);
        v207(&v454, 0);
      }
      LOBYTE(v454) = v205 & 1;
      ((void (*)(char *, uint64_t))v418)(v204, v89);
      char v209 = v454;
      ((void (*)(uint64_t, uint64_t))v417)(v442, v465);
      if (v209) {
        goto LABEL_80;
      }
      int v210 = v409 < v206;
LABEL_82:
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v430, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v426, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if (v411 != v210)
      {
        Swift::Int v82 = (Swift::Int)v439;
        if (!v411) {
          goto LABEL_98;
        }
LABEL_85:
        uint64_t v211 = v441;
        if (v82 >= v420)
        {
          uint64_t v212 = v419;
          if (v420 < v82)
          {
            uint64_t v213 = 0;
            uint64_t v214 = (void)v440 * (v82 - 1);
            uint64_t v215 = v82 * (void)v440;
            Swift::Int v216 = v420;
            uint64_t v217 = v420 * (void)v440;
            do
            {
              if (v216 != v82 + v213 - 1)
              {
                if (!v212) {
                  goto LABEL_304;
                }
                uint64_t v444 = (void (*)(void, void))(v212 + v214);
                outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v212 + v217, v413, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
                if (v217 < v214 || v212 + v217 >= (unint64_t)(v212 + v215))
                {
                  uint64_t v218 = v444;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  uint64_t v218 = v444;
                  if (v217 != v214) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v413, (uint64_t)v218, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
                uint64_t v212 = v419;
              }
              ++v216;
              --v213;
              v214 -= (uint64_t)v440;
              v215 -= (uint64_t)v440;
              v217 += (uint64_t)v440;
            }
            while (v216 < v82 + v213);
            uint64_t v5 = v446;
            uint64_t v89 = v447;
            uint64_t v211 = v441;
          }
          goto LABEL_100;
        }
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
LABEL_303:
        __break(1u);
LABEL_304:
        __break(1u);
LABEL_305:
        __break(1u);
LABEL_306:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      Swift::Int v137 = (Swift::Int)v439;
      Swift::Int v82 = (Swift::Int)(v439 + 1);
      uint64_t v136 = v439 + 1;
    }
    while ((uint64_t)(v439 + 1) < v416);
    if (v411) {
      goto LABEL_85;
    }
LABEL_98:
    uint64_t v211 = v441;
LABEL_100:
    if (v82 >= v416) {
      goto LABEL_109;
    }
    if (__OFSUB__(v82, v420)) {
      goto LABEL_297;
    }
    if (v82 - v420 >= v386) {
      goto LABEL_109;
    }
    if (__OFADD__(v420, v386)) {
      goto LABEL_298;
    }
    if (v420 + v386 >= v416) {
      Swift::Int v219 = v416;
    }
    else {
      Swift::Int v219 = v420 + v386;
    }
    if (v219 < v420) {
      goto LABEL_299;
    }
    if (v82 == v219) {
      goto LABEL_109;
    }
    Swift::Int v416 = *(void *)(v431 + 72);
    Swift::Int v384 = v219;
    while (2)
    {
      Swift::Int v409 = v82;
      uint64_t v275 = v82;
      while (2)
      {
        uint64_t v276 = v275 - 1;
        uint64_t v277 = *v437;
        Swift::Int v278 = v416;
        Swift::Int v418 = v416 * v275;
        uint64_t v279 = v424;
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v277 + v416 * v275, v424, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        uint64_t v419 = v276;
        Swift::Int v417 = v278 * v276;
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v277 + v278 * v276, v432, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v279, (uint64_t)v425, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        int v280 = swift_getEnumCaseMultiPayload();
        if (v280)
        {
          if (v280 == 1)
          {
            uint64_t v281 = v405;
            outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v425, v405, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
            uint64_t v282 = *(char **)v281;
            uint64_t v444 = *(void (**)(void, void))(v281 + 8);
            LODWORD(v440) = *(unsigned __int8 *)(v281 + 16);
            uint64_t v283 = v281 + *(int *)(v415 + 24);
            lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
            RangeSet.init()();
            uint64_t v285 = v400;
            uint64_t v284 = v401;
            (*v392)(v400, v283, v401);
            uint64_t v286 = v402;
            RangeSet.ranges.getter();
            (*v391)(v285, v284);
            uint64_t v287 = (uint64_t)v399;
            (*v390)(v399, v286, v5);
            uint64_t v288 = v433;
            (*v389)((char *)v433 + *(int *)(v398 + 48), v287, v5);
            *uint64_t v288 = 0;
            v288[1] = 0;
            _ss8RangeSetV7SwiftUISxRzSZ6StrideRpzrlE13IndexSequenceV8IteratorVySi__GWOhTm_0(v287, (uint64_t)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t)type metadata accessor for RangeSet<>.IndexSequence, (uint64_t (*)(void))type metadata accessor for RangeSet<Int><>.IndexSequence);
            uint64_t v289 = *v288;
            if (v289 >= RangeSet.Ranges.count.getter())
            {
              uint64_t v326 = (uint64_t)v288;
            }
            else
            {
              uint64_t v290 = v288[1];
              v439 = v282;
              do
              {
                RangeSet.Ranges.subscript.getter();
                CFIndex v292 = v454 + v290;
                if (__OFADD__((void)v454, v290)) {
                  goto LABEL_267;
                }
                BOOL v239 = __OFADD__(v290++, 1);
                if (v239) {
                  goto LABEL_268;
                }
                RangeSet.Ranges.subscript.getter();
                if (__OFSUB__(*((void *)&v454 + 1), (void)v454)) {
                  goto LABEL_269;
                }
                if (v290 >= *((void *)&v454 + 1) - (void)v454)
                {
                  uint64_t v290 = 0;
                  uint64_t *v433 = ++v289;
                }
                uint64_t v293 = v444;
                if (v440)
                {
                  outlined copy of Text.Layout.Line.Line(v282, (uint64_t)v444, 1);
                  CGFloat v294 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v282);
                  if (!v294) {
                    goto LABEL_301;
                  }
                  unint64_t v295 = v294;
                  outlined consume of Text.Layout.Line.Line(v282, (uint64_t)v293, 1);
                }
                else
                {
                  outlined copy of Text.Layout.Line.Line(v282, (uint64_t)v444, 0);
                  outlined copy of Text.Layout.Line.Line(v282, (uint64_t)v293, 0);

                  swift_release();
                  unint64_t v295 = (const __CTLine *)v282;
                }
                uint64_t v296 = (id)_CTLineGetRunAtIndex(v295, v292);
                CFRange v297 = CTRunGetStringRange((CTRunRef)v296);

                swift_release();
                CFIndex v298 = v297.location + v297.length;
                if (__OFADD__(v297.location, v297.length)) {
                  goto LABEL_270;
                }
                if (v298 < v297.location) {
                  goto LABEL_271;
                }
                CFIndex v448 = v297.location;
                CFIndex v449 = v297.location + v297.length;
                if (__OFSUB__(v298, v297.location)) {
                  goto LABEL_272;
                }
                if (v298 != v297.location)
                {
                  char v299 = (void (*)(long long *, void))RangeSet._ranges.modify();
                  RangeSet.Ranges._insert(contentsOf:)();
                  v299(&v454, 0);
                }
                uint64_t v5 = v446;
                uint64_t v291 = RangeSet.Ranges.count.getter();
                uint64_t v282 = v439;
              }
              while (v289 < v291);
              uint64_t v326 = (uint64_t)v433;
              v433[1] = v290;
            }
            _ss8RangeSetV7SwiftUISxRzSZ6StrideRpzrlE13IndexSequenceV8IteratorVySi__GWOhTm_0(v326, (uint64_t)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t)type metadata accessor for RangeSet<>.IndexSequence.Iterator, (uint64_t (*)(void))type metadata accessor for RangeSet<Int><>.IndexSequence);
            _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v405, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
            uint64_t v89 = v447;
            long long v324 = v410;
            uint64_t v325 = v441;
          }
          else
          {
            uint64_t v314 = v425[3];
            uint64_t v315 = (uint64_t)v425[4];
            char v316 = *((unsigned char *)v425 + 40);
            uint64_t v317 = v425[6];
            uint64_t v318 = v425[7];
            int v319 = *((_DWORD *)v425 + 16);
            long long v320 = v425[9];
            char v321 = v425[10];
            long long v322 = v425[11];
            outlined copy of Text.Layout.Line.Line(v314, v315, v316);
            lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
            swift_bridgeObjectRetain();
            uint64_t v323 = (uint64_t)v445;
            RangeSet.init()();
            *(void *)&long long v454 = v314;
            *((void *)&v454 + 1) = v315;
            char v455 = v316;
            *(void *)&long long v456 = v317;
            *((void *)&v456 + 1) = v318;
            int v457 = v319;
            uint64_t v458 = v320;
            unint64_t v459 = v321;
            unint64_t v460 = v322;
            CFIndex v448 = (CFIndex)v314;
            CFIndex v449 = v315;
            char v450 = v316;
            double v451 = v317;
            uint64_t v452 = v318;
            int v453 = v319;
            Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v448, v323);
            outlined consume of Text.Layout.Line.Line(v314, v315, v316);
            swift_bridgeObjectRelease();
            outlined consume of Text.Layout.Line.Line(v314, v315, v316);
            swift_bridgeObjectRelease();
            uint64_t v89 = v447;
            long long v324 = v410;
            uint64_t v325 = v441;
          }
        }
        else
        {
          unint64_t v300 = *v425;
          char v301 = v425[1];
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          RangeSet.init()();
          uint64_t v302 = *((void *)v300 + 2);
          if (v302)
          {
            swift_bridgeObjectRetain();
            uint64_t v440 = v301;
            swift_bridgeObjectRetain();
            uint64_t v444 = (void (*)(void, void))v300;
            double v303 = v300 + 48;
            do
            {
              uint64_t v304 = (void *)*((void *)v303 - 2);
              uint64_t v305 = *((void *)v303 - 1);
              char v306 = *v303;
              if (*v303)
              {
                outlined copy of Text.Layout.Line.Line(*((void **)v303 - 2), *((void *)v303 - 1), 1);
                uint64_t v307 = (char *)objc_msgSend(v304, sel_characterRange);
                CFIndex v309 = v308;
              }
              else
              {
                outlined copy of Text.Layout.Line.Line(*((void **)v303 - 2), *((void *)v303 - 1), 0);
                outlined copy of Text.Layout.Line.Line(v304, v305, 0);
                id v310 = v304;
                CFRange v311 = CTLineGetStringRange(v310);
                uint64_t v307 = (char *)v311.location;
                CFIndex v309 = v311.length;

                outlined consume of Text.Layout.Line.Line(v304, v305, 0);
              }
              v312 = &v307[v309];
              if (__OFADD__(v307, v309)) {
                goto LABEL_261;
              }
              if ((uint64_t)v312 < (uint64_t)v307) {
                goto LABEL_262;
              }
              CFIndex v448 = (CFIndex)v307;
              CFIndex v449 = (CFIndex)&v307[v309];
              if (__OFSUB__(v312, v307)) {
                goto LABEL_263;
              }
              if (v312 != v307)
              {
                uint64_t v313 = (void (*)(long long *, void))RangeSet._ranges.modify();
                RangeSet.Ranges._insert(contentsOf:)();
                v313(&v454, 0);
              }
              v303 += 48;
              outlined consume of Text.Layout.Line.Line(v304, v305, v306);
              --v302;
            }
            while (v302);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t v5 = v446;
            uint64_t v89 = v447;
            long long v324 = v410;
            uint64_t v325 = v441;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v5 = v446;
            long long v324 = v410;
            uint64_t v325 = v211;
          }
        }
        RangeSet.ranges.getter();
        uint64_t v327 = lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
        double v328 = v324;
        char v329 = dispatch thunk of Collection.isEmpty.getter();
        if (v329)
        {
          CGPoint v330 = 0;
        }
        else
        {
          dispatch thunk of Collection.endIndex.getter();
          lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
          dispatch thunk of BidirectionalCollection.index(before:)();
          CGRect v331 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
          CGPoint v330 = *(char **)(v332 + 8);
          v331(&v454, 0);
        }
        LOBYTE(v454) = v329 & 1;
        double v333 = (char *)*v435;
        ((void (*)(char *, uint64_t))*v435)(v328, v89);
        char v334 = v454;
        uint64_t v444 = (void (*)(void, void))*v434;
        v444(v445, v465);
        if (v334)
        {
LABEL_161:
          uint64_t v211 = v325;
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v432, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v424, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          goto LABEL_162;
        }
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v432, (uint64_t)v423, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        int v335 = swift_getEnumCaseMultiPayload();
        v439 = v330;
        uint64_t v440 = v333;
        if (v335)
        {
          if (v335 == 1)
          {
            uint64_t v336 = v406;
            outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v423, v406, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
            char v337 = *(unsigned char *)(v336 + 16);
            int v338 = *(_DWORD *)(v336 + 40);
            long long v454 = *(_OWORD *)v336;
            char v455 = v337;
            long long v456 = *(_OWORD *)(v336 + 24);
            int v457 = v338;
            Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v336 + *(int *)(v415 + 24)), v325);
            _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v336, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
            goto LABEL_224;
          }
          uint64_t v353 = (void *)v423[3];
          uint64_t v354 = v423[4];
          char v355 = *((unsigned char *)v423 + 40);
          uint64_t v356 = (char *)v423[6];
          uint64_t v357 = (char *)v423[7];
          int v358 = *((_DWORD *)v423 + 16);
          v359 = (char *)v423[9];
          uint64_t v360 = (char *)v423[10];
          uint64_t v361 = (char *)v423[11];
          outlined copy of Text.Layout.Line.Line(v353, v354, v355);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          swift_bridgeObjectRetain();
          RangeSet.init()();
          *(void *)&long long v454 = v353;
          *((void *)&v454 + 1) = v354;
          char v455 = v355;
          *(void *)&long long v456 = v356;
          *((void *)&v456 + 1) = v357;
          int v457 = v358;
          uint64_t v458 = v359;
          unint64_t v459 = v360;
          unint64_t v460 = v361;
          CFIndex v448 = (CFIndex)v353;
          CFIndex v449 = v354;
          char v450 = v355;
          double v451 = v356;
          uint64_t v452 = v357;
          int v453 = v358;
          Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v448, v441);
          outlined consume of Text.Layout.Line.Line(v353, v354, v355);
          swift_bridgeObjectRelease();
          char v362 = v355;
          uint64_t v325 = v441;
          outlined consume of Text.Layout.Line.Line(v353, v354, v362);
          uint64_t v89 = v447;
LABEL_223:
          swift_bridgeObjectRelease();
LABEL_224:
          char v363 = v407;
        }
        else
        {
          uint64_t v339 = *v423;
          uint64_t v340 = v423[1];
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          RangeSet.init()();
          uint64_t v341 = *(void *)(v339 + 16);
          if (!v341)
          {
            swift_bridgeObjectRelease();
            goto LABEL_223;
          }
          uint64_t v414 = v327;
          swift_bridgeObjectRetain();
          uint64_t v387 = v340;
          swift_bridgeObjectRetain();
          uint64_t v411 = v339;
          uint64_t v342 = (char *)(v339 + 48);
          do
          {
            CFIndex v344 = (void *)*((void *)v342 - 2);
            uint64_t v343 = *((void *)v342 - 1);
            char v345 = *v342;
            if (*v342)
            {
              outlined copy of Text.Layout.Line.Line(*((void **)v342 - 2), *((void *)v342 - 1), 1);
              double v346 = (char *)objc_msgSend(v344, sel_characterRange);
              CFIndex v348 = v347;
            }
            else
            {
              outlined copy of Text.Layout.Line.Line(*((void **)v342 - 2), *((void *)v342 - 1), 0);
              outlined copy of Text.Layout.Line.Line(v344, v343, 0);
              CFIndex v349 = v344;
              CFRange v350 = CTLineGetStringRange(v349);
              double v346 = (char *)v350.location;
              CFIndex v348 = v350.length;

              uint64_t v5 = v446;
              outlined consume of Text.Layout.Line.Line(v344, v343, 0);
            }
            double v351 = &v346[v348];
            if (__OFADD__(v346, v348)) {
              goto LABEL_264;
            }
            if ((uint64_t)v351 < (uint64_t)v346) {
              goto LABEL_265;
            }
            CFIndex v448 = (CFIndex)v346;
            CFIndex v449 = (CFIndex)&v346[v348];
            if (__OFSUB__(v351, v346)) {
              goto LABEL_266;
            }
            if (v351 != v346)
            {
              BOOL v352 = (void (*)(long long *, void))RangeSet._ranges.modify();
              RangeSet.Ranges._insert(contentsOf:)();
              v352(&v454, 0);
            }
            v342 += 48;
            outlined consume of Text.Layout.Line.Line(v344, v343, v345);
            --v341;
          }
          while (v341);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          uint64_t v89 = v447;
          char v363 = v407;
          uint64_t v325 = v441;
        }
        RangeSet.ranges.getter();
        v364 = v363;
        char v365 = dispatch thunk of Collection.isEmpty.getter();
        if (v365)
        {
          uint64_t v366 = 0;
        }
        else
        {
          dispatch thunk of Collection.endIndex.getter();
          lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
          dispatch thunk of BidirectionalCollection.index(before:)();
          uint64_t v367 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v366 = *(void *)(v368 + 8);
          v367(&v454, 0);
        }
        LOBYTE(v454) = v365 & 1;
        ((void (*)(char *, uint64_t))v440)(v364, v89);
        char v369 = v454;
        v444(v325, v465);
        if (v369) {
          goto LABEL_161;
        }
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v432, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v424, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        if ((uint64_t)v439 < v366)
        {
          uint64_t v370 = *v437;
          if (!*v437) {
            goto LABEL_303;
          }
          uint64_t v211 = v325;
          uint64_t v372 = v417;
          CFIndex v371 = (char *)v418;
          v373 = (char *)(v370 + v418);
          uint64_t v374 = v370 + v417;
          outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v370 + v418, v422, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          if ((uint64_t)v371 < v372 || (unint64_t)v373 >= v374 + v416) {
            swift_arrayInitWithTakeFrontToBack();
          }
          outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v422, v374, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          uint64_t v275 = v419;
          if (v419 == v420) {
            goto LABEL_162;
          }
          continue;
        }
        break;
      }
      uint64_t v211 = v325;
LABEL_162:
      Swift::Int v82 = v409 + 1;
      if (v409 + 1 != v384) {
        continue;
      }
      break;
    }
    Swift::Int v82 = v384;
LABEL_109:
    Swift::Int v220 = v420;
    if (v82 < v420) {
      goto LABEL_295;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v409 = v82;
    if (isUniquelyReferenced_nonNull_native) {
      uint64_t v80 = v408;
    }
    else {
      uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v408 + 2) + 1, 1, v408);
    }
    unint64_t v223 = *((void *)v80 + 2);
    unint64_t v222 = *((void *)v80 + 3);
    unint64_t v224 = v223 + 1;
    if (v223 >= v222 >> 1) {
      uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v222 > 1), v223 + 1, 1, v80);
    }
    *((void *)v80 + 2) = v224;
    uint64_t v225 = v80 + 32;
    uint64_t v226 = &v80[16 * v223 + 32];
    Swift::Int v227 = v409;
    *(void *)uint64_t v226 = v220;
    *((void *)v226 + 1) = v227;
    if (!v223)
    {
      unint64_t v224 = 1;
      uint64_t v81 = v429;
LABEL_158:
      Swift::Int v73 = v437[1];
      Swift::Int v79 = v409;
      if (v409 >= v73)
      {
        uint64_t v376 = v436;
        if (v224 < 2) {
          goto LABEL_256;
        }
        goto LABEL_243;
      }
      continue;
    }
    break;
  }
  uint64_t v81 = v429;
  while (1)
  {
    unint64_t v228 = v224 - 1;
    if (v224 >= 4)
    {
      unint64_t v233 = &v225[16 * v224];
      uint64_t v234 = *((void *)v233 - 8);
      uint64_t v235 = *((void *)v233 - 7);
      BOOL v239 = __OFSUB__(v235, v234);
      uint64_t v236 = v235 - v234;
      if (v239) {
        goto LABEL_280;
      }
      uint64_t v238 = *((void *)v233 - 6);
      uint64_t v237 = *((void *)v233 - 5);
      BOOL v239 = __OFSUB__(v237, v238);
      uint64_t v231 = v237 - v238;
      char v232 = v239;
      if (v239) {
        goto LABEL_281;
      }
      unint64_t v240 = v224 - 2;
      unint64_t v241 = &v225[16 * v224 - 32];
      uint64_t v243 = *(void *)v241;
      uint64_t v242 = *((void *)v241 + 1);
      BOOL v239 = __OFSUB__(v242, v243);
      uint64_t v244 = v242 - v243;
      if (v239) {
        goto LABEL_283;
      }
      BOOL v239 = __OFADD__(v231, v244);
      uint64_t v245 = v231 + v244;
      if (v239) {
        goto LABEL_286;
      }
      if (v245 >= v236)
      {
        long long v263 = &v225[16 * v228];
        uint64_t v265 = *(void *)v263;
        uint64_t v264 = *((void *)v263 + 1);
        BOOL v239 = __OFSUB__(v264, v265);
        uint64_t v266 = v264 - v265;
        if (v239) {
          goto LABEL_290;
        }
        BOOL v256 = v231 < v266;
        goto LABEL_147;
      }
    }
    else
    {
      if (v224 != 3)
      {
        uint64_t v257 = *((void *)v80 + 4);
        uint64_t v258 = *((void *)v80 + 5);
        BOOL v239 = __OFSUB__(v258, v257);
        uint64_t v250 = v258 - v257;
        char v251 = v239;
        goto LABEL_141;
      }
      uint64_t v230 = *((void *)v80 + 4);
      uint64_t v229 = *((void *)v80 + 5);
      BOOL v239 = __OFSUB__(v229, v230);
      uint64_t v231 = v229 - v230;
      char v232 = v239;
    }
    if (v232) {
      goto LABEL_282;
    }
    unint64_t v240 = v224 - 2;
    CFIndex v246 = &v225[16 * v224 - 32];
    uint64_t v248 = *(void *)v246;
    uint64_t v247 = *((void *)v246 + 1);
    BOOL v249 = __OFSUB__(v247, v248);
    uint64_t v250 = v247 - v248;
    char v251 = v249;
    if (v249) {
      goto LABEL_285;
    }
    uint64_t v252 = &v225[16 * v228];
    uint64_t v254 = *(void *)v252;
    uint64_t v253 = *((void *)v252 + 1);
    BOOL v239 = __OFSUB__(v253, v254);
    uint64_t v255 = v253 - v254;
    if (v239) {
      goto LABEL_288;
    }
    if (__OFADD__(v250, v255)) {
      goto LABEL_289;
    }
    if (v250 + v255 >= v231)
    {
      BOOL v256 = v231 < v255;
LABEL_147:
      if (v256) {
        unint64_t v228 = v240;
      }
      goto LABEL_149;
    }
LABEL_141:
    if (v251) {
      goto LABEL_284;
    }
    char v259 = &v225[16 * v228];
    uint64_t v261 = *(void *)v259;
    uint64_t v260 = *((void *)v259 + 1);
    BOOL v239 = __OFSUB__(v260, v261);
    uint64_t v262 = v260 - v261;
    if (v239) {
      goto LABEL_287;
    }
    if (v262 < v250) {
      goto LABEL_158;
    }
LABEL_149:
    unint64_t v267 = v228 - 1;
    if (v228 - 1 >= v224) {
      goto LABEL_276;
    }
    if (!*v437) {
      goto LABEL_302;
    }
    double v268 = v80;
    uint64_t v269 = &v225[16 * v267];
    uint64_t v270 = *(void *)v269;
    uint64_t v271 = &v225[16 * v228];
    uint64_t v272 = *((void *)v271 + 1);
    uint64_t v273 = v436;
    specialized _merge<A>(low:mid:high:buffer:by:)(*v437 + *(void *)(v431 + 72) * *(void *)v269, *v437 + *(void *)(v431 + 72) * *(void *)v271, *v437 + *(void *)(v431 + 72) * v272, v428);
    uint64_t v436 = v273;
    if (v273) {
      break;
    }
    if (v272 < v270) {
      goto LABEL_277;
    }
    if (v228 > *((void *)v268 + 2)) {
      goto LABEL_278;
    }
    *(void *)uint64_t v269 = v270;
    *(void *)&v225[16 * v267 + 8] = v272;
    unint64_t v274 = *((void *)v268 + 2);
    if (v228 >= v274) {
      goto LABEL_279;
    }
    unint64_t v224 = v274 - 1;
    memmove(&v225[16 * v228], v271 + 16, 16 * (v274 - 1 - v228));
    uint64_t v80 = v268;
    *((void *)v268 + 2) = v274 - 1;
    uint64_t v5 = v446;
    uint64_t v81 = v429;
    if (v274 <= 2) {
      goto LABEL_158;
    }
  }
  uint64_t v375 = v385;
LABEL_241:
  swift_bridgeObjectRelease();
  *(void *)(v375 + 16) = 0;
LABEL_257:
  swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  Swift::Int v37;
  char *v38;
  unint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  double v47;
  double v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  double v60;
  char *v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  double v69;
  BOOL v70;
  char v71;
  char v72;
  Swift::Int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  Swift::Int v81;
  uint64_t v82;
  Swift::Int v83;
  char *v84;
  Swift::Int v85;
  uint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void (*v91)(char *, uint64_t, uint64_t);
  void (*v92)(char *, uint64_t);
  double v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char *v100;
  char v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, char *, uint64_t);
  char v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  Swift::Int v178;
  Swift::Int v179;
  char *v180;
  char *v181;
  char *v182;
  Swift::Int v183;
  char *v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  void (**v194)(char *, uint64_t);
  Swift::Int v195;
  char *v196;
  Swift::Int v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t, uint64_t);
  Swift::Int *v200;
  char *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  char *v205;
  double v206;
  double v207;

  Swift::String v2 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v186 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v182 = (char *)&v175 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v196 = (char *)&v175 - v5;
  MEMORY[0x270FA5388](v6);
  Swift::String v8 = (char *)&v175 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v175 - v10;
  MEMORY[0x270FA5388](v12);
  char v205 = (char *)&v175 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v201 = (char *)&v175 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v175 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v175 - v20;
  MEMORY[0x270FA5388](v22);
  CFIndex v188 = (char *)&v175 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v184 = (char *)&v175 - v25;
  MEMORY[0x270FA5388](v26);
  char v177 = (char *)&v175 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v175 - v29;
  BOOL v203 = a1;
  uint64_t v31 = a1[1];
  int v178 = _minimumMergeRunLength(_:)(v31);
  if (v178 >= v31)
  {
    if (v31 < 0) {
      goto LABEL_208;
    }
    if (v31) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v31, 1, v203);
    }
    return;
  }
  if (v31 >= 0) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = v31 + 1;
  }
  if (v31 < -1) {
    goto LABEL_216;
  }
  CFRange v190 = v8;
  id v191 = v11;
  if (v31 < 2)
  {
    char v185 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
    uint64_t v176 = MEMORY[0x263F8EE78];
    if (v31 != 1)
    {
      uint64_t v39 = *(void *)(MEMORY[0x263F8EE78] + 16);
      CFIndex v187 = (char *)MEMORY[0x263F8EE78];
LABEL_175:
      long long v165 = v189;
      int v166 = v186;
      if (v39 >= 2)
      {
        uint64_t v167 = *v203;
        do
        {
          id v168 = v39 - 2;
          if (v39 < 2) {
            goto LABEL_203;
          }
          if (!v167) {
            goto LABEL_215;
          }
          objc_super v169 = *(void *)&v187[16 * v168 + 32];
          uint64_t v170 = *(void *)&v187[16 * v39 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v167 + *(void *)(v166 + 72) * v169, v167 + *(void *)(v166 + 72) * *(void *)&v187[16 * v39 + 16], v167 + *(void *)(v166 + 72) * v170, v185);
          if (v165) {
            break;
          }
          if (v170 < v169) {
            goto LABEL_204;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            CFIndex v187 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v187);
          }
          char v171 = v187;
          if (v168 >= *((void *)v187 + 2)) {
            goto LABEL_205;
          }
          uint64_t v172 = v187 + 32;
          uint64_t v173 = &v187[16 * v168 + 32];
          *(void *)uint64_t v173 = v169;
          *((void *)v173 + 1) = v170;
          char v174 = *((void *)v171 + 2);
          if (v39 > v174) {
            goto LABEL_206;
          }
          memmove(&v172[16 * v39 - 16], &v172[16 * v39], 16 * (v174 - v39));
          *((void *)v171 + 2) = v174 - 1;
          uint64_t v39 = v174 - 1;
        }
        while (v174 > 2);
      }
LABEL_186:
      swift_bridgeObjectRelease();
      *(void *)(v176 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v35 = v186;
  }
  else
  {
    uint64_t v33 = v32 >> 1;
    uint64_t v34 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v34 + 16) = v33;
    uint64_t v35 = v186;
    uint64_t v36 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    uint64_t v176 = v34;
    char v185 = v34 + v36;
  }
  uint64_t v37 = 0;
  uint64_t v204 = v35 + 16;
  uint64_t v200 = (Swift::Int *)(v35 + 32);
  uint64_t v38 = (char *)MEMORY[0x263F8EE78];
  uint64_t v180 = v18;
  uint64_t v194 = (void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v181 = v21;
  while (2)
  {
    uint64_t v40 = v37;
    uint64_t v41 = v37 + 1;
    uint64_t v183 = v37;
    if (v37 + 1 >= v31)
    {
      Swift::Int v73 = v178;
      goto LABEL_73;
    }
    uint64_t v42 = *v203;
    uint64_t v43 = *(void *)(v186 + 72);
    uint64_t v197 = v37 + 1;
    int v198 = v42;
    uint64_t v199 = (void (*)(char *, uint64_t, uint64_t))v31;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v186 + 16);
    v44(v30, v42 + v43 * v41, v2);
    uint64_t v45 = v42 + v43 * v40;
    uint64_t v46 = v177;
    v44(v177, v45, v2);
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v207);
    uint64_t v47 = v207;
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v206);
    uint64_t v48 = v206;
    uint64_t v49 = *(void (**)(char *, uint64_t))(v186 + 8);
    uint64_t v50 = v46;
    uint64_t v40 = v183;
    v49(v50, v2);
    v49(v30, v2);
    uint64_t v41 = v40 + 2;
    uint64_t v202 = v43;
    if (v40 + 2 >= (uint64_t)v199)
    {
      uint64_t v31 = (Swift::Int)v199;
      goto LABEL_59;
    }
    CFIndex v187 = v38;
    v197 *= v43;
    uint64_t v51 = v198;
    double v193 = v43 * v41;
    uint64_t v52 = v181;
    while (1)
    {
      char v195 = v41;
      uint64_t v53 = v184;
      v44(v184, v51 + v193, v2);
      v44(v188, v51 + v197, v2);
      v44(v52, (uint64_t)v53, v2);
      static Date.ComponentsFormatStyle.Style.wide.getter();
      _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      LOBYTE(v53) = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v53)
      {
        v49(v52, v2);
        *(double *)&uint64_t v54 = 31536000.0;
LABEL_31:
        uint64_t v60 = *(double *)&v54;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      uint64_t v55 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v55)
      {
        v49(v52, v2);
        *(double *)&uint64_t v54 = 2592000.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      uint64_t v56 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v56)
      {
        v49(v52, v2);
        *(double *)&uint64_t v54 = 604800.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      uint64_t v57 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v57)
      {
        v49(v52, v2);
        *(double *)&uint64_t v54 = 86400.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      uint64_t v58 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v58)
      {
        v49(v52, v2);
        *(double *)&uint64_t v54 = 3600.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Field.minute.getter();
      uint64_t v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v59)
      {
        v49(v52, v2);
        *(double *)&uint64_t v54 = 60.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Field.second.getter();
      uint64_t v71 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      v49(v52, v2);
      uint64_t v60 = 1.0;
      if ((v71 & 1) == 0)
      {
        if (one-time initialization token for max != -1) {
          swift_once();
        }
        uint64_t v60 = *(double *)&static Calendar.Component.Magnitude.max;
      }
LABEL_32:
      uint64_t v61 = v180;
      v44(v180, (uint64_t)v188, v2);
      static Date.ComponentsFormatStyle.Style.wide.getter();
      uint64_t v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v62)
      {
        v49(v61, v2);
        *(double *)&uint64_t v63 = 31536000.0;
LABEL_44:
        uint64_t v69 = *(double *)&v63;
        uint64_t v52 = v181;
        goto LABEL_45;
      }
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      uint64_t v64 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v64)
      {
        v49(v61, v2);
        *(double *)&uint64_t v63 = 2592000.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      uint64_t v65 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v65)
      {
        v49(v61, v2);
        *(double *)&uint64_t v63 = 604800.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      uint64_t v66 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v66)
      {
        v49(v61, v2);
        *(double *)&uint64_t v63 = 86400.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      uint64_t v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v67)
      {
        v49(v61, v2);
        *(double *)&uint64_t v63 = 3600.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Field.minute.getter();
      uint64_t v68 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      if (v68)
      {
        v49(v61, v2);
        *(double *)&uint64_t v63 = 60.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Field.second.getter();
      uint64_t v72 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49(v30, v2);
      v49(v61, v2);
      uint64_t v69 = 1.0;
      uint64_t v52 = v181;
      if ((v72 & 1) == 0)
      {
        if (one-time initialization token for max != -1) {
          swift_once();
        }
        uint64_t v69 = *(double *)&static Calendar.Component.Magnitude.max;
      }
LABEL_45:
      uint64_t v70 = v69 >= v60;
      v49(v188, v2);
      v49(v184, v2);
      if ((((v48 < v47) ^ v70) & 1) == 0) {
        break;
      }
      uint64_t v41 = v195 + 1;
      v51 += v202;
      if (v199 == (void (*)(char *, uint64_t, uint64_t))(v195 + 1))
      {
        uint64_t v31 = (Swift::Int)v199;
        uint64_t v41 = (Swift::Int)v199;
        uint64_t v38 = v187;
        uint64_t v40 = v183;
        goto LABEL_59;
      }
    }
    uint64_t v38 = v187;
    uint64_t v41 = v195;
    uint64_t v40 = v183;
    uint64_t v31 = (Swift::Int)v199;
LABEL_59:
    Swift::Int v73 = v178;
    if (v48 < v47)
    {
      if (v41 < v40) {
        goto LABEL_209;
      }
      if (v40 < v41)
      {
        CFIndex v187 = v38;
        Swift::Int v74 = 0;
        uint64_t v75 = v202;
        uint64_t v76 = v202 * (v41 - 1);
        uint64_t v77 = v41 * v202;
        uint64_t v78 = v40 * v202;
        char v195 = v41;
        do
        {
          if (v40 != v41 + v74 - 1)
          {
            if (!v198) {
              goto LABEL_214;
            }
            Swift::Int v79 = v198 + v78;
            uint64_t v80 = v198 + v76;
            uint64_t v197 = *v200;
            ((void (*)(char *, uint64_t, uint64_t))v197)(v182, v198 + v78, v2);
            if (v78 < v76 || v79 >= v198 + v77)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v78 != v76)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            ((void (*)(uint64_t, char *, uint64_t))v197)(v80, v182, v2);
            uint64_t v41 = v195;
            uint64_t v75 = v202;
          }
          ++v40;
          --v74;
          v76 -= v75;
          v77 -= v75;
          v78 += v75;
        }
        while (v40 < v41 + v74);
        uint64_t v38 = v187;
        Swift::Int v73 = v178;
        uint64_t v40 = v183;
        uint64_t v31 = (Swift::Int)v199;
      }
    }
LABEL_73:
    if (v41 >= v31) {
      goto LABEL_124;
    }
    if (__OFSUB__(v41, v40)) {
      goto LABEL_207;
    }
    if (v41 - v40 >= v73) {
      goto LABEL_124;
    }
    if (__OFADD__(v40, v73)) {
      goto LABEL_210;
    }
    if (v40 + v73 >= v31) {
      uint64_t v81 = v31;
    }
    else {
      uint64_t v81 = v40 + v73;
    }
    if (v81 >= v40)
    {
      if (v41 == v81) {
        goto LABEL_124;
      }
      CFIndex v187 = v38;
      Swift::Int v82 = *(void *)(v186 + 72);
      uint64_t v199 = *(void (**)(char *, uint64_t, uint64_t))(v186 + 16);
      uint64_t v202 = v82 * (v41 - 1);
      double v192 = v82;
      Swift::Int v83 = v41 * v82;
      uint64_t v84 = v191;
      uint64_t v179 = v81;
      while (2)
      {
        uint64_t v86 = 0;
        uint64_t v87 = v40;
        char v195 = v41;
        double v193 = v83;
        while (2)
        {
          unint64_t v88 = *v203;
          int v198 = v83 + v86;
          uint64_t v89 = v83 + v86 + v88;
          uint64_t v90 = v201;
          char v91 = v199;
          v199(v201, v89, v2);
          uint64_t v197 = v202 + v86;
          v91(v205, v202 + v86 + v88, v2);
          v91(v84, (uint64_t)v90, v2);
          static Date.ComponentsFormatStyle.Style.wide.getter();
          _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
          LOBYTE(v88) = dispatch thunk of static Equatable.== infix(_:_:)();
          int v92 = *v194;
          (*v194)(v30, v2);
          if (v88)
          {
            v92(v84, v2);
            long long v93 = 31536000.0;
          }
          else
          {
            static Date.ComponentsFormatStyle.Style.narrow.getter();
            uint64_t v94 = dispatch thunk of static Equatable.== infix(_:_:)();
            v92(v30, v2);
            if (v94)
            {
              v92(v84, v2);
              long long v93 = 2592000.0;
            }
            else
            {
              static Date.ComponentsFormatStyle.Style.abbreviated.getter();
              uint64_t v95 = dispatch thunk of static Equatable.== infix(_:_:)();
              v92(v30, v2);
              if (v95)
              {
                v92(v84, v2);
                long long v93 = 604800.0;
              }
              else
              {
                static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
                char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
                v92(v30, v2);
                if (v96)
                {
                  v92(v84, v2);
                  long long v93 = 86400.0;
                }
                else
                {
                  static Date.ComponentsFormatStyle.Style.spellOut.getter();
                  uint64_t v97 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v92(v30, v2);
                  if (v97)
                  {
                    v92(v84, v2);
                    long long v93 = 3600.0;
                  }
                  else
                  {
                    static Date.ComponentsFormatStyle.Field.minute.getter();
                    char v98 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v92(v30, v2);
                    if (v98)
                    {
                      v92(v84, v2);
                      long long v93 = 60.0;
                    }
                    else
                    {
                      static Date.ComponentsFormatStyle.Field.second.getter();
                      int v99 = dispatch thunk of static Equatable.== infix(_:_:)();
                      v92(v30, v2);
                      v92(v84, v2);
                      long long v93 = 1.0;
                      if ((v99 & 1) == 0)
                      {
                        if (one-time initialization token for max != -1) {
                          swift_once();
                        }
                        long long v93 = *(double *)&static Calendar.Component.Magnitude.max;
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v100 = v190;
          v199(v190, (uint64_t)v205, v2);
          static Date.ComponentsFormatStyle.Style.wide.getter();
          uint64_t v101 = dispatch thunk of static Equatable.== infix(_:_:)();
          v92(v30, v2);
          if (v101)
          {
            v92(v100, v2);
            *(double *)&id v102 = 31536000.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Style.narrow.getter();
          uint64_t v103 = dispatch thunk of static Equatable.== infix(_:_:)();
          v92(v30, v2);
          if (v103)
          {
            v92(v100, v2);
            *(double *)&id v102 = 2592000.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Style.abbreviated.getter();
          uint64_t v104 = dispatch thunk of static Equatable.== infix(_:_:)();
          v92(v30, v2);
          if (v104)
          {
            v92(v100, v2);
            *(double *)&id v102 = 604800.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
          uint64_t v105 = dispatch thunk of static Equatable.== infix(_:_:)();
          v92(v30, v2);
          if (v105)
          {
            v92(v100, v2);
            *(double *)&id v102 = 86400.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Style.spellOut.getter();
          uint64_t v106 = dispatch thunk of static Equatable.== infix(_:_:)();
          v92(v30, v2);
          if (v106)
          {
            v92(v100, v2);
            *(double *)&id v102 = 3600.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Field.minute.getter();
          char v107 = dispatch thunk of static Equatable.== infix(_:_:)();
          v92(v30, v2);
          if (v107)
          {
            v92(v100, v2);
            *(double *)&id v102 = 60.0;
LABEL_115:
            char v108 = *(double *)&v102;
            uint64_t v84 = v191;
          }
          else
          {
            static Date.ComponentsFormatStyle.Field.second.getter();
            char v112 = dispatch thunk of static Equatable.== infix(_:_:)();
            v92(v30, v2);
            v92(v100, v2);
            char v108 = 1.0;
            uint64_t v84 = v191;
            if ((v112 & 1) == 0)
            {
              if (one-time initialization token for max != -1) {
                swift_once();
              }
              char v108 = *(double *)&static Calendar.Component.Magnitude.max;
            }
          }
          v92(v205, v2);
          v92(v201, v2);
          if (v108 < v93)
          {
            double v109 = *v203;
            Swift::Int v83 = v193;
            if (!*v203) {
              goto LABEL_212;
            }
            uint64_t v110 = v109 + v202 + v86;
            Swift::Int v111 = (void (*)(uint64_t, char *, uint64_t))*v200;
            ((void (*)(char *, uint64_t, uint64_t))*v200)(v196, v109 + v193 + v86, v2);
            swift_arrayInitWithTakeFrontToBack();
            v111(v110, v196, v2);
            v86 -= v192;
            ++v87;
            uint64_t v85 = v195;
            if (v195 == v87) {
              goto LABEL_84;
            }
            continue;
          }
          break;
        }
        uint64_t v85 = v195;
        Swift::Int v83 = v193;
LABEL_84:
        uint64_t v41 = v85 + 1;
        v202 += v192;
        v83 += v192;
        uint64_t v40 = v183;
        if (v41 != v179) {
          continue;
        }
        break;
      }
      uint64_t v41 = v179;
      uint64_t v38 = v187;
LABEL_124:
      if (v41 < v40) {
        goto LABEL_202;
      }
      char v195 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v38 + 2) + 1, 1, v38);
      }
      unint64_t v114 = *((void *)v38 + 2);
      int v113 = *((void *)v38 + 3);
      uint64_t v39 = v114 + 1;
      uint64_t v37 = v195;
      if (v114 >= v113 >> 1)
      {
        long long v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v113 > 1), v114 + 1, 1, v38);
        uint64_t v37 = v195;
        uint64_t v38 = v164;
      }
      *((void *)v38 + 2) = v39;
      uint64_t v202 = (uint64_t)(v38 + 32);
      uint64_t v115 = &v38[16 * v114 + 32];
      *(void *)uint64_t v115 = v40;
      *((void *)v115 + 1) = v37;
      CFIndex v187 = v38;
      if (!v114)
      {
        uint64_t v39 = 1;
LABEL_15:
        uint64_t v31 = v203[1];
        if (v37 >= v31) {
          goto LABEL_175;
        }
        continue;
      }
      char v116 = v202;
LABEL_131:
      int v117 = v39 - 1;
      if (v39 >= 4)
      {
        uint64_t v122 = v116 + 16 * v39;
        uint64_t v123 = *(void *)(v122 - 64);
        int v124 = *(void *)(v122 - 56);
        uint64_t v128 = __OFSUB__(v124, v123);
        unint64_t v125 = v124 - v123;
        if (v128) {
          goto LABEL_191;
        }
        uint64_t v127 = *(void *)(v122 - 48);
        double v126 = *(void *)(v122 - 40);
        uint64_t v128 = __OFSUB__(v126, v127);
        uint64_t v120 = v126 - v127;
        char v121 = v128;
        if (v128) {
          goto LABEL_192;
        }
        uint64_t v129 = v39 - 2;
        int v130 = (uint64_t *)(v116 + 16 * (v39 - 2));
        uint64_t v132 = *v130;
        char v131 = v130[1];
        uint64_t v128 = __OFSUB__(v131, v132);
        uint64_t v133 = v131 - v132;
        if (v128) {
          goto LABEL_194;
        }
        uint64_t v128 = __OFADD__(v120, v133);
        uint64_t v134 = v120 + v133;
        if (v128) {
          goto LABEL_197;
        }
        if (v134 >= v125)
        {
          uint64_t v152 = (uint64_t *)(v116 + 16 * v117);
          uint64_t v154 = *v152;
          char v153 = v152[1];
          uint64_t v128 = __OFSUB__(v153, v154);
          CFIndex v155 = v153 - v154;
          if (v128) {
            goto LABEL_201;
          }
          char v145 = v120 < v155;
        }
        else
        {
LABEL_144:
          if (v121) {
            goto LABEL_193;
          }
          uint64_t v129 = v39 - 2;
          char v135 = (uint64_t *)(v116 + 16 * (v39 - 2));
          Swift::Int v137 = *v135;
          uint64_t v136 = v135[1];
          uint64_t v138 = __OFSUB__(v136, v137);
          uint64_t v139 = v136 - v137;
          uint64_t v140 = v138;
          if (v138) {
            goto LABEL_196;
          }
          uint64_t v141 = (uint64_t *)(v116 + 16 * v117);
          uint64_t v143 = *v141;
          int v142 = v141[1];
          uint64_t v128 = __OFSUB__(v142, v143);
          uint64_t v144 = v142 - v143;
          if (v128) {
            goto LABEL_199;
          }
          if (__OFADD__(v139, v144)) {
            goto LABEL_200;
          }
          if (v139 + v144 < v120) {
            goto LABEL_156;
          }
          char v145 = v120 < v144;
        }
        if (v145) {
          int v117 = v129;
        }
      }
      else
      {
        if (v39 == 3)
        {
          uint64_t v119 = *((void *)v38 + 4);
          long long v118 = *((void *)v38 + 5);
          uint64_t v128 = __OFSUB__(v118, v119);
          uint64_t v120 = v118 - v119;
          char v121 = v128;
          goto LABEL_144;
        }
        int v146 = *((void *)v38 + 4);
        Swift::Int v147 = *((void *)v38 + 5);
        uint64_t v128 = __OFSUB__(v147, v146);
        uint64_t v139 = v147 - v146;
        uint64_t v140 = v128;
LABEL_156:
        if (v140) {
          goto LABEL_195;
        }
        uint64_t v148 = (uint64_t *)(v116 + 16 * v117);
        uint64_t v150 = *v148;
        uint64_t v149 = v148[1];
        uint64_t v128 = __OFSUB__(v149, v150);
        uint64_t v151 = v149 - v150;
        if (v128) {
          goto LABEL_198;
        }
        if (v151 < v139) {
          goto LABEL_15;
        }
      }
      uint64_t v156 = v117 - 1;
      if (v117 - 1 >= v39)
      {
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
        break;
      }
      if (!*v203) {
        goto LABEL_213;
      }
      uint64_t v157 = (uint64_t *)(v116 + 16 * v156);
      int64_t v158 = v116;
      double v159 = *v157;
      uint64_t v160 = (void *)(v158 + 16 * v117);
      unint64_t v161 = v160[1];
      uint64_t v162 = v189;
      specialized _merge<A>(low:mid:high:buffer:by:)(*v203 + *(void *)(v186 + 72) * *v157, *v203 + *(void *)(v186 + 72) * *v160, *v203 + *(void *)(v186 + 72) * v161, v185);
      uint64_t v189 = v162;
      if (v162) {
        goto LABEL_186;
      }
      if (v161 < v159) {
        goto LABEL_188;
      }
      uint64_t v38 = v187;
      if (v117 > *((void *)v187 + 2)) {
        goto LABEL_189;
      }
      *uint64_t v157 = v159;
      char v116 = v202;
      *(void *)(v202 + 16 * v156 + 8) = v161;
      char v163 = *((void *)v38 + 2);
      if (v117 >= v163) {
        goto LABEL_190;
      }
      uint64_t v39 = v163 - 1;
      memmove(v160, v160 + 2, 16 * (v163 - 1 - v117));
      *((void *)v38 + 2) = v163 - 1;
      uint64_t v37 = v195;
      if (v163 <= 2) {
        goto LABEL_15;
      }
      goto LABEL_131;
    }
    break;
  }
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v131 = a4;
  uint64_t v120 = a1;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v112[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  uint64_t v122 = &v112[-v12];
  uint64_t v119 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v119);
  long long v118 = &v112[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v154 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = &v112[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v18);
  uint64_t v140 = &v112[-v19];
  uint64_t v137 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x270FA5388](v137);
  unint64_t v125 = &v112[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v21);
  uint64_t v134 = &v112[-v22];
  MEMORY[0x270FA5388](v23);
  uint64_t v136 = &v112[-v24];
  MEMORY[0x270FA5388](v25);
  uint64_t v138 = &v112[-v26];
  MEMORY[0x270FA5388](v27);
  char v135 = &v112[-v29];
  uint64_t v113 = a2;
  if (a3 == a2) {
    return;
  }
  uint64_t v30 = (uint64_t)v17;
  uint64_t v133 = (void *)(v8 + 8);
  uint64_t v132 = (void (**)(uint64_t, uint64_t))(v15 + 8);
  uint64_t v124 = *(void *)(v28 + 72);
  uint64_t v123 = v10;
  uint64_t v139 = v17;
LABEL_6:
  uint64_t v114 = a3;
  uint64_t v31 = a3;
  uint64_t v32 = v140;
  while (1)
  {
    uint64_t v33 = v31 - 1;
    uint64_t v34 = *v131;
    uint64_t v35 = v124;
    uint64_t v127 = v124 * v31;
    uint64_t v36 = v135;
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v34 + v124 * v31, (uint64_t)v135, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    uint64_t v128 = v33;
    uint64_t v126 = v35 * v33;
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v34 + v35 * v33, (uint64_t)v138, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0((uint64_t)v36, (uint64_t)v136, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload) {
      break;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v38 = v118;
      outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v136, (uint64_t)v118, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      char v39 = v38[16];
      int v40 = *((_DWORD *)v38 + 10);
      long long v147 = *(_OWORD *)v38;
      char v148 = v39;
      long long v149 = *(_OWORD *)(v38 + 24);
      int v150 = v40;
      Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)&v38[*(int *)(v119 + 24)], (uint64_t)v32);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v38, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    }
    else
    {
      uint64_t v54 = (void *)*((void *)v136 + 3);
      uint64_t v55 = *((void *)v136 + 4);
      char v56 = v136[40];
      uint64_t v57 = *((void *)v136 + 6);
      uint64_t v58 = *((void *)v136 + 7);
      int v59 = *((_DWORD *)v136 + 16);
      uint64_t v60 = *((void *)v136 + 9);
      uint64_t v61 = *((void *)v136 + 10);
      uint64_t v62 = *((void *)v136 + 11);
      outlined copy of Text.Layout.Line.Line(v54, v55, v56);
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      swift_bridgeObjectRetain();
      RangeSet.init()();
      *(void *)&long long v147 = v54;
      *((void *)&v147 + 1) = v55;
      char v148 = v56;
      *(void *)&long long v149 = v57;
      *((void *)&v149 + 1) = v58;
      int v150 = v59;
      uint64_t v151 = v60;
      uint64_t v152 = v61;
      uint64_t v153 = v62;
      id v141 = v54;
      uint64_t v142 = v55;
      char v143 = v56;
      uint64_t v144 = v57;
      uint64_t v145 = v58;
      int v146 = v59;
      Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v141, (uint64_t)v140);
      outlined consume of Text.Layout.Line.Line(v54, v55, v56);
      swift_bridgeObjectRelease();
      uint64_t v63 = v55;
      uint64_t v30 = (uint64_t)v139;
      char v64 = v56;
      uint64_t v10 = v123;
      outlined consume of Text.Layout.Line.Line(v54, v63, v64);
      swift_bridgeObjectRelease();
    }
    uint64_t v65 = v122;
LABEL_28:
    RangeSet.ranges.getter();
    uint64_t v66 = lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
    char v67 = dispatch thunk of Collection.isEmpty.getter();
    if (v67)
    {
      uint64_t v68 = 0;
    }
    else
    {
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
      dispatch thunk of BidirectionalCollection.index(before:)();
      uint64_t v69 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v68 = *(void *)(v70 + 8);
      v69(&v147, 0);
    }
    LOBYTE(v147) = v67 & 1;
    uint64_t v71 = (void (*)(unsigned char *, uint64_t))*v133;
    ((void (*)(unsigned char *, uint64_t))*v133)(v65, v7);
    char v72 = v147;
    Swift::Int v73 = *v132;
    (*v132)((uint64_t)v140, v154);
    if (v72)
    {
LABEL_4:
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v138, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v135, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
LABEL_5:
      a3 = v114 + 1;
      if (v114 + 1 == v113) {
        return;
      }
      goto LABEL_6;
    }
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0((uint64_t)v138, (uint64_t)v134, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int v74 = swift_getEnumCaseMultiPayload();
    int v130 = v71;
    uint64_t v129 = v73;
    if (!v74)
    {
      uint64_t v78 = *(void *)v134;
      uint64_t v79 = *((void *)v134 + 1);
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      RangeSet.init()();
      uint64_t v80 = *(void *)(v78 + 16);
      if (v80)
      {
        uint64_t v121 = v68;
        uint64_t v117 = v66;
        swift_bridgeObjectRetain();
        uint64_t v115 = v79;
        swift_bridgeObjectRetain();
        uint64_t v116 = v78;
        uint64_t v81 = (char *)(v78 + 48);
        while (1)
        {
          Swift::Int v82 = (void *)*((void *)v81 - 2);
          uint64_t v83 = *((void *)v81 - 1);
          char v84 = *v81;
          if (*v81)
          {
            outlined copy of Text.Layout.Line.Line(*((void **)v81 - 2), *((void *)v81 - 1), 1);
            id location = objc_msgSend(v82, sel_characterRange);
            CFIndex v87 = (CFIndex)location + v86;
            if (__OFADD__(location, v86)) {
              goto LABEL_63;
            }
          }
          else
          {
            outlined copy of Text.Layout.Line.Line(*((void **)v81 - 2), *((void *)v81 - 1), 0);
            outlined copy of Text.Layout.Line.Line(v82, v83, 0);
            unint64_t v88 = v82;
            CFRange StringRange = CTLineGetStringRange(v88);
            id location = (id)StringRange.location;

            uint64_t v30 = (uint64_t)v139;
            outlined consume of Text.Layout.Line.Line(v82, v83, 0);
            CFIndex v87 = StringRange.location + StringRange.length;
            if (__OFADD__(StringRange.location, StringRange.length)) {
              goto LABEL_63;
            }
          }
          if (v87 < (uint64_t)location) {
            goto LABEL_64;
          }
          id v141 = location;
          uint64_t v142 = v87;
          if (__OFSUB__(v87, location)) {
            goto LABEL_65;
          }
          if ((id)v87 != location)
          {
            uint64_t v90 = (void (*)(long long *, void))RangeSet._ranges.modify();
            RangeSet.Ranges._insert(contentsOf:)();
            v90(&v147, 0);
          }
          v81 += 48;
          outlined consume of Text.Layout.Line.Line(v82, v83, v84);
          if (!--v80)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t v10 = v123;
            uint64_t v68 = v121;
            goto LABEL_51;
          }
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    if (v74 != 1)
    {
      char v91 = (void *)*((void *)v134 + 3);
      uint64_t v92 = *((void *)v134 + 4);
      char v93 = v134[40];
      uint64_t v94 = *((void *)v134 + 6);
      uint64_t v95 = *((void *)v134 + 7);
      int v96 = *((_DWORD *)v134 + 16);
      uint64_t v97 = *((void *)v134 + 9);
      uint64_t v98 = *((void *)v134 + 10);
      uint64_t v121 = v68;
      uint64_t v99 = *((void *)v134 + 11);
      outlined copy of Text.Layout.Line.Line(v91, v92, v93);
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      swift_bridgeObjectRetain();
      RangeSet.init()();
      *(void *)&long long v147 = v91;
      *((void *)&v147 + 1) = v92;
      char v148 = v93;
      *(void *)&long long v149 = v94;
      *((void *)&v149 + 1) = v95;
      int v150 = v96;
      uint64_t v151 = v97;
      uint64_t v152 = v98;
      uint64_t v153 = v99;
      id v141 = v91;
      uint64_t v142 = v92;
      char v143 = v93;
      uint64_t v144 = v94;
      uint64_t v145 = v95;
      int v146 = v96;
      Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v141, (uint64_t)v139);
      outlined consume of Text.Layout.Line.Line(v91, v92, v93);
      swift_bridgeObjectRelease();
      uint64_t v100 = v92;
      uint64_t v30 = (uint64_t)v139;
      char v101 = v93;
      uint64_t v10 = v123;
      outlined consume of Text.Layout.Line.Line(v91, v100, v101);
      uint64_t v68 = v121;
LABEL_50:
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    uint64_t v75 = v118;
    outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v134, (uint64_t)v118, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    char v76 = v75[16];
    int v77 = *((_DWORD *)v75 + 10);
    long long v147 = *(_OWORD *)v75;
    char v148 = v76;
    long long v149 = *(_OWORD *)(v75 + 24);
    int v150 = v77;
    Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)&v75[*(int *)(v119 + 24)], v30);
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v75, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
LABEL_51:
    RangeSet.ranges.getter();
    char v102 = dispatch thunk of Collection.isEmpty.getter();
    if (v102)
    {
      uint64_t v103 = 0;
    }
    else
    {
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
      dispatch thunk of BidirectionalCollection.index(before:)();
      uint64_t v104 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v103 = *(void *)(v105 + 8);
      v104(&v147, 0);
    }
    LOBYTE(v147) = v102 & 1;
    v130(v10, v7);
    char v106 = v147;
    v129(v30, v154);
    if (v106) {
      goto LABEL_4;
    }
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v138, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v135, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (v68 < v103)
    {
      uint64_t v107 = *v131;
      if (!*v131) {
        goto LABEL_66;
      }
      uint64_t v108 = v127;
      unint64_t v109 = v107 + v127;
      uint64_t v110 = v126;
      uint64_t v111 = v107 + v126;
      outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(v107 + v127, (uint64_t)v125, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if (v108 < v110 || v109 >= v111 + v124) {
        swift_arrayInitWithTakeFrontToBack();
      }
      outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v125, v111, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      uint64_t v31 = v128;
      uint64_t v32 = v140;
      if (v128 != v120) {
        continue;
      }
    }
    goto LABEL_5;
  }
  uint64_t v41 = *(void *)v136;
  uint64_t v42 = (void (*)(uint64_t, uint64_t))*((void *)v136 + 1);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  RangeSet.init()();
  uint64_t v43 = *(void *)(v41 + 16);
  if (!v43)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v65 = v122;
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t v129 = v42;
  swift_bridgeObjectRetain();
  int v130 = (void (*)(unsigned char *, uint64_t))v41;
  uint64_t v44 = (char *)(v41 + 48);
  while (1)
  {
    uint64_t v46 = (void *)*((void *)v44 - 2);
    uint64_t v45 = *((void *)v44 - 1);
    char v47 = *v44;
    if ((*v44 & 1) == 0) {
      break;
    }
    outlined copy of Text.Layout.Line.Line(*((void **)v44 - 2), *((void *)v44 - 1), 1);
    id v48 = objc_msgSend(v46, sel_characterRange);
    CFIndex v50 = (CFIndex)v48 + v49;
    if (__OFADD__(v48, v49)) {
      goto LABEL_60;
    }
LABEL_20:
    if (v50 < (uint64_t)v48) {
      goto LABEL_61;
    }
    id v141 = v48;
    uint64_t v142 = v50;
    if (__OFSUB__(v50, v48)) {
      goto LABEL_62;
    }
    if ((id)v50 != v48)
    {
      uint64_t v53 = (void (*)(long long *, void))RangeSet._ranges.modify();
      RangeSet.Ranges._insert(contentsOf:)();
      v53(&v147, 0);
    }
    v44 += 48;
    outlined consume of Text.Layout.Line.Line(v46, v45, v47);
    if (!--v43)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v10 = v123;
      uint64_t v65 = v122;
      uint64_t v30 = (uint64_t)v139;
      goto LABEL_28;
    }
  }
  outlined copy of Text.Layout.Line.Line(*((void **)v44 - 2), *((void *)v44 - 1), 0);
  outlined copy of Text.Layout.Line.Line(v46, v45, 0);
  uint64_t v51 = v46;
  CFRange v52 = CTLineGetStringRange(v51);
  id v48 = (id)v52.location;

  outlined consume of Text.Layout.Line.Line(v46, v45, 0);
  CFIndex v50 = v52.location + v52.length;
  if (!__OFADD__(v52.location, v52.length)) {
    goto LABEL_20;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char v31;
  void (*v32)(char *, uint64_t);
  double v33;
  char *v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  double v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (**v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;

  uint64_t v66 = a4;
  char v56 = a1;
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  MEMORY[0x270FA5388](v6);
  uint64_t v63 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v58 = (char *)&v54 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v54 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v54 - v14;
  MEMORY[0x270FA5388](v16);
  char v72 = (char *)&v54 - v17;
  v20.n128_f64[0] = MEMORY[0x270FA5388](v18);
  uint64_t v70 = (char *)&v54 - v21;
  uint64_t v61 = a3;
  uint64_t v55 = a2;
  if (a3 != a2)
  {
    uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v69 = v19 + 16;
    uint64_t v22 = *(void *)(v19 + 72);
    uint64_t v23 = (void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v62 = (void (**)(char *, uint64_t, uint64_t))(v19 + 32);
    uint64_t v71 = v22 * (v61 - 1);
    int v59 = v22;
    uint64_t v24 = v22 * v61;
    uint64_t v57 = v15;
LABEL_5:
    Swift::Int v73 = 0;
    char v67 = v56;
    uint64_t v60 = v24;
    while (1)
    {
      uint64_t v25 = *v66;
      uint64_t v26 = v15;
      uint64_t v27 = v73;
      uint64_t v65 = v24 + v73;
      uint64_t v28 = v24 + v73 + v25;
      uint64_t v29 = v70;
      uint64_t v30 = v68;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v68)(v70, v28, v6, v20);
      char v64 = v71 + v27;
      v30(v72, v71 + v27 + v25, v6);
      v30(v26, (uint64_t)v29, v6);
      static Date.ComponentsFormatStyle.Style.wide.getter();
      _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      uint64_t v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v32 = *v23;
      (*v23)(v12, v6);
      if (v31)
      {
        v32(v26, v6);
        uint64_t v33 = 31536000.0;
        uint64_t v34 = v58;
        uint64_t v24 = v60;
        goto LABEL_20;
      }
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      uint64_t v24 = v60;
      if (v35) {
        break;
      }
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      uint64_t v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v37)
      {
        v32(v26, v6);
        uint64_t v36 = 0x4122750000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      uint64_t v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v38)
      {
        v32(v26, v6);
        uint64_t v36 = 0x40F5180000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v39)
      {
        v32(v26, v6);
        uint64_t v36 = 0x40AC200000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Field.minute.getter();
      int v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v40)
      {
        v32(v26, v6);
        uint64_t v36 = 0x404E000000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Field.second.getter();
      CFRange v52 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      v32(v26, v6);
      uint64_t v33 = 1.0;
      uint64_t v34 = v58;
      if ((v52 & 1) == 0)
      {
        if (one-time initialization token for max != -1)
        {
          swift_once();
          uint64_t v34 = v58;
        }
        uint64_t v33 = *(double *)&static Calendar.Component.Magnitude.max;
      }
LABEL_20:
      v68(v34, (uint64_t)v72, v6);
      static Date.ComponentsFormatStyle.Style.wide.getter();
      uint64_t v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v41)
      {
        v32(v34, v6);
        uint64_t v42 = 0x417E133800000000;
LABEL_32:
        id v48 = *(double *)&v42;
        uint64_t v15 = v57;
        goto LABEL_33;
      }
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      uint64_t v43 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v43)
      {
        v32(v34, v6);
        uint64_t v42 = 0x4143C68000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      uint64_t v44 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v44)
      {
        v32(v34, v6);
        uint64_t v42 = 0x4122750000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      uint64_t v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v45)
      {
        v32(v34, v6);
        uint64_t v42 = 0x40F5180000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      uint64_t v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v46)
      {
        v32(v34, v6);
        uint64_t v42 = 0x40AC200000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Field.minute.getter();
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      if (v47)
      {
        v32(v34, v6);
        uint64_t v42 = 0x404E000000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Field.second.getter();
      uint64_t v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32(v12, v6);
      v32(v34, v6);
      id v48 = 1.0;
      uint64_t v15 = v57;
      if ((v53 & 1) == 0)
      {
        if (one-time initialization token for max != -1) {
          swift_once();
        }
        id v48 = *(double *)&static Calendar.Component.Magnitude.max;
      }
LABEL_33:
      v32(v72, v6);
      v32(v70, v6);
      if (v48 >= v33) {
        goto LABEL_4;
      }
      uint64_t v49 = *v66;
      if (!*v66)
      {
        __break(1u);
        return;
      }
      CFIndex v50 = (char *)(v49 + v71 + v73);
      uint64_t v51 = *v62;
      (*v62)(v63, v49 + v24 + v73, v6);
      swift_arrayInitWithTakeFrontToBack();
      v51(v50, (uint64_t)v63, v6);
      v73 -= v59;
      if (v61 == ++v67)
      {
LABEL_4:
        v71 += v59;
        v24 += v59;
        if (++v61 == v55) {
          return;
        }
        goto LABEL_5;
      }
    }
    v32(v26, v6);
    uint64_t v36 = 0x4143C68000000000;
LABEL_19:
    uint64_t v33 = *(double *)&v36;
    uint64_t v34 = v58;
    goto LABEL_20;
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v186 = a3;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v167 = (char *)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v165 - v12;
  MEMORY[0x270FA5388](v14);
  int v166 = (char *)&v165 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v172 = (void (*)(char *, uint64_t))((char *)&v165 - v17);
  uint64_t v174 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v174);
  uint64_t v173 = (uint64_t)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v188 = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  unint64_t v171 = (unint64_t)&v165 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v170 = (uint64_t)&v165 - v23;
  MEMORY[0x270FA5388](v24);
  unint64_t v175 = (unint64_t)&v165 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v181 = (char *)&v165 - v27;
  uint64_t v187 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x270FA5388](v187);
  objc_super v169 = (long long *)((char *)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v29);
  uint64_t v180 = (long long *)((char *)&v165 - v30);
  MEMORY[0x270FA5388](v31);
  uint64_t v184 = (void (**)(char *, uint64_t))((char *)&v165 - v32);
  MEMORY[0x270FA5388](v33);
  uint64_t v179 = (uint64_t)&v165 - v34;
  MEMORY[0x270FA5388](v35);
  id v168 = (char *)&v165 - v36;
  MEMORY[0x270FA5388](v37);
  int v178 = (long long *)((char *)&v165 - v38);
  MEMORY[0x270FA5388](v39);
  uint64_t v183 = (uint64_t)&v165 - v40;
  MEMORY[0x270FA5388](v41);
  unint64_t v177 = (unint64_t)&v165 - v42;
  uint64_t v182 = *(void *)(v43 + 72);
  if (!v182)
  {
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  if (a2 - a1 == 0x8000000000000000 && v182 == -1) {
    goto LABEL_105;
  }
  int64_t v44 = v186 - a2;
  if (v186 - a2 == 0x8000000000000000 && v182 == -1) {
    goto LABEL_106;
  }
  uint64_t v45 = (uint64_t)(a2 - a1) / v182;
  unint64_t v212 = a1;
  unint64_t v203 = a4;
  uint64_t v46 = v44 / v182;
  uint64_t v176 = v8;
  if (v45 >= v44 / v182)
  {
    if ((v46 & 0x8000000000000000) == 0)
    {
      unint64_t v177 = a1;
      uint64_t v48 = v46 * v182;
      if (a4 < a2 || a2 + v48 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v102 = a4 + v48;
      unint64_t v202 = a4 + v48;
      unint64_t v212 = a2;
      if (v48 >= 1 && v177 < a2)
      {
        uint64_t v104 = -v182;
        uint64_t v181 = (char *)(v20 + 8);
        uint64_t v182 = v9 + 8;
        unint64_t v175 = a4;
        id v168 = v13;
        uint64_t v183 = v104;
        do
        {
          uint64_t v105 = v179;
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v102 + v104, v179, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          uint64_t v106 = a2 + v104;
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v106, (uint64_t)v184, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v105, (uint64_t)v180, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          int v178 = (long long *)v106;
          if (EnumCaseMultiPayload)
          {
            if (EnumCaseMultiPayload == 1)
            {
              uint64_t v108 = v173;
              outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v180, v173, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
              char v109 = *(unsigned char *)(v108 + 16);
              int v110 = *(_DWORD *)(v108 + 40);
              long long v195 = *(_OWORD *)v108;
              char v196 = v109;
              long long v197 = *(_OWORD *)(v108 + 24);
              int v198 = v110;
              uint64_t v111 = v170;
              Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v108 + *(int *)(v174 + 24)), v170);
              _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v108, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
            }
            else
            {
              unint64_t v185 = a2;
              uint64_t v113 = (void *)*((void *)v180 + 3);
              uint64_t v114 = *((void *)v180 + 4);
              char v115 = *((unsigned char *)v180 + 40);
              uint64_t v116 = *((void *)v180 + 6);
              uint64_t v117 = *((void *)v180 + 7);
              int v118 = *((_DWORD *)v180 + 16);
              uint64_t v119 = *((void *)v180 + 9);
              uint64_t v120 = *((void *)v180 + 10);
              uint64_t v121 = *((void *)v180 + 11);
              outlined copy of Text.Layout.Line.Line(v113, v114, v115);
              lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
              swift_bridgeObjectRetain();
              uint64_t v111 = v170;
              RangeSet.init()();
              *(void *)&long long v195 = v113;
              *((void *)&v195 + 1) = v114;
              char v196 = v115;
              *(void *)&long long v197 = v116;
              *((void *)&v197 + 1) = v117;
              int v198 = v118;
              uint64_t v199 = v119;
              uint64_t v200 = v120;
              uint64_t v201 = v121;
              uint64_t v189 = v113;
              uint64_t v190 = v114;
              char v191 = v115;
              uint64_t v192 = v116;
              uint64_t v193 = v117;
              int v194 = v118;
              Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v189, v111);
              outlined consume of Text.Layout.Line.Line(v113, v114, v115);
              swift_bridgeObjectRelease();
              uint64_t v122 = v114;
              a2 = v185;
              char v123 = v115;
              uint64_t v13 = v168;
              outlined consume of Text.Layout.Line.Line(v113, v122, v123);
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            long long v112 = v180[1];
            long long v208 = *v180;
            long long v209 = v112;
            long long v210 = v180[2];
            uint64_t v211 = *((void *)v180 + 6);
            uint64_t v111 = v170;
            Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
            outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v208);
          }
          RangeSet.ranges.getter();
          lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
          char v124 = dispatch thunk of Collection.isEmpty.getter();
          if (v124)
          {
            unint64_t v125 = 0;
          }
          else
          {
            dispatch thunk of Collection.endIndex.getter();
            lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
            dispatch thunk of BidirectionalCollection.index(before:)();
            uint64_t v126 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
            unint64_t v125 = *(char **)(v127 + 8);
            v126(&v195, 0);
          }
          LOBYTE(v195) = v124 & 1;
          uint64_t v128 = *(void (**)(char *, uint64_t))v182;
          (*(void (**)(char *, uint64_t))v182)(v13, v8);
          char v129 = v195;
          int v130 = *(void (**)(unint64_t, uint64_t))v181;
          (*(void (**)(uint64_t, uint64_t))v181)(v111, v188);
          if (v129)
          {
            uint64_t v131 = (uint64_t)v13;
            BOOL v132 = 0;
            uint64_t v133 = v176;
            unint64_t v134 = v186;
          }
          else
          {
            uint64_t v172 = v128;
            _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0((uint64_t)v184, (uint64_t)v169, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            int v135 = swift_getEnumCaseMultiPayload();
            uint64_t v136 = v167;
            unint64_t v134 = v186;
            int v166 = v125;
            if (v135)
            {
              if (v135 == 1)
              {
                uint64_t v137 = v173;
                outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v169, v173, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
                char v138 = *(unsigned char *)(v137 + 16);
                int v139 = *(_DWORD *)(v137 + 40);
                long long v195 = *(_OWORD *)v137;
                char v196 = v138;
                long long v197 = *(_OWORD *)(v137 + 24);
                int v198 = v139;
                Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v137 + *(int *)(v174 + 24)), v171);
                _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v137, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
              }
              else
              {
                unint64_t v185 = a2;
                id v141 = (void *)*((void *)v169 + 3);
                uint64_t v142 = *((void *)v169 + 4);
                char v143 = *((unsigned char *)v169 + 40);
                uint64_t v144 = *((void *)v169 + 6);
                uint64_t v145 = *((void *)v169 + 7);
                int v146 = *((_DWORD *)v169 + 16);
                uint64_t v147 = *((void *)v169 + 9);
                uint64_t v148 = *((void *)v169 + 10);
                uint64_t v149 = *((void *)v169 + 11);
                outlined copy of Text.Layout.Line.Line(v141, v142, v143);
                lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
                swift_bridgeObjectRetain();
                uint64_t v150 = v171;
                RangeSet.init()();
                *(void *)&long long v195 = v141;
                *((void *)&v195 + 1) = v142;
                char v196 = v143;
                *(void *)&long long v197 = v144;
                *((void *)&v197 + 1) = v145;
                int v198 = v146;
                uint64_t v199 = v147;
                uint64_t v200 = v148;
                uint64_t v201 = v149;
                uint64_t v189 = v141;
                uint64_t v190 = v142;
                char v191 = v143;
                uint64_t v192 = v144;
                uint64_t v193 = v145;
                int v194 = v146;
                Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v189, v150);
                outlined consume of Text.Layout.Line.Line(v141, v142, v143);
                swift_bridgeObjectRelease();
                uint64_t v151 = v142;
                a2 = v185;
                unint64_t v134 = v186;
                outlined consume of Text.Layout.Line.Line(v141, v151, v143);
                swift_bridgeObjectRelease();
              }
              uint64_t v136 = v167;
            }
            else
            {
              long long v140 = v169[1];
              long long v204 = *v169;
              long long v205 = v140;
              long long v206 = v169[2];
              uint64_t v207 = *((void *)v169 + 6);
              Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
              outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v204);
            }
            RangeSet.ranges.getter();
            uint64_t v152 = v136;
            uint64_t v153 = v176;
            char v154 = dispatch thunk of Collection.isEmpty.getter();
            if (v154)
            {
              uint64_t v155 = 0;
            }
            else
            {
              dispatch thunk of Collection.endIndex.getter();
              lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
              dispatch thunk of BidirectionalCollection.index(before:)();
              uint64_t v156 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
              uint64_t v155 = *(void *)(v157 + 8);
              v156(&v195, 0);
            }
            LOBYTE(v195) = v154 & 1;
            v172(v152, v153);
            char v158 = v195;
            v130(v171, v188);
            BOOL v132 = (v158 & 1) == 0 && (uint64_t)v166 < v155;
            uint64_t v133 = v176;
            uint64_t v131 = (uint64_t)v168;
          }
          uint64_t v104 = v183;
          unint64_t v159 = v134 + v183;
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v184, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v179, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          if (v132)
          {
            if (v134 < a2 || v159 >= a2)
            {
              unint64_t v161 = (unint64_t)v178;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v104 = v183;
              uint64_t v8 = v133;
              unint64_t v162 = v175;
            }
            else
            {
              BOOL v160 = v134 == a2;
              uint64_t v104 = v183;
              uint64_t v8 = v133;
              unint64_t v161 = (unint64_t)v178;
              unint64_t v162 = v175;
              if (!v160) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v212 += v104;
            uint64_t v13 = (char *)v131;
          }
          else
          {
            unint64_t v163 = v202;
            v202 += v104;
            if (v134 < v163 || v159 >= v163)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v161 = a2;
              uint64_t v8 = v133;
            }
            else
            {
              uint64_t v8 = v133;
              if (v134 != v163) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v161 = a2;
            }
            uint64_t v13 = (char *)v131;
            unint64_t v162 = v175;
          }
          unint64_t v102 = v202;
          if (v202 <= v162) {
            break;
          }
          a2 = v161;
          unint64_t v186 = v159;
        }
        while (v161 > v177);
      }
LABEL_103:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v212, &v203, (uint64_t *)&v202);
      return 1;
    }
  }
  else if ((v45 & 0x8000000000000000) == 0)
  {
    uint64_t v47 = v45 * v182;
    if (a4 < a1 || a1 + v47 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v171 = a4 + v47;
    unint64_t v202 = a4 + v47;
    if (v47 >= 1 && a2 < v186)
    {
      uint64_t v184 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v180 = (long long *)(v20 + 8);
      while (1)
      {
        uint64_t v50 = v177;
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(a2, v177, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(a4, v183, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v50, (uint64_t)v178, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        int v51 = swift_getEnumCaseMultiPayload();
        if (v51)
        {
          uint64_t v52 = (uint64_t)v181;
          if (v51 == 1)
          {
            uint64_t v53 = v173;
            outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v178, v173, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
            char v54 = *(unsigned char *)(v53 + 16);
            int v55 = *(_DWORD *)(v53 + 40);
            long long v195 = *(_OWORD *)v53;
            char v196 = v54;
            long long v197 = *(_OWORD *)(v53 + 24);
            int v198 = v55;
            Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v53 + *(int *)(v174 + 24)), v52);
            _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v53, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          }
          else
          {
            uint64_t v57 = (void *)*((void *)v178 + 3);
            uint64_t v58 = *((void *)v178 + 4);
            char v59 = *((unsigned char *)v178 + 40);
            uint64_t v60 = *((void *)v178 + 6);
            uint64_t v61 = *((void *)v178 + 7);
            int v62 = *((_DWORD *)v178 + 16);
            uint64_t v63 = *((void *)v178 + 9);
            uint64_t v64 = *((void *)v178 + 10);
            uint64_t v65 = *((void *)v178 + 11);
            outlined copy of Text.Layout.Line.Line(v57, v58, v59);
            lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
            swift_bridgeObjectRetain();
            RangeSet.init()();
            *(void *)&long long v195 = v57;
            *((void *)&v195 + 1) = v58;
            char v196 = v59;
            *(void *)&long long v197 = v60;
            *((void *)&v197 + 1) = v61;
            int v198 = v62;
            uint64_t v199 = v63;
            uint64_t v200 = v64;
            uint64_t v201 = v65;
            uint64_t v189 = v57;
            uint64_t v190 = v58;
            char v191 = v59;
            uint64_t v192 = v60;
            uint64_t v193 = v61;
            int v194 = v62;
            Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v189, v52);
            outlined consume of Text.Layout.Line.Line(v57, v58, v59);
            swift_bridgeObjectRelease();
            outlined consume of Text.Layout.Line.Line(v57, v58, v59);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          long long v56 = v178[1];
          long long v208 = *v178;
          long long v209 = v56;
          long long v210 = v178[2];
          uint64_t v211 = *((void *)v178 + 6);
          Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
          outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v208);
        }
        uint64_t v66 = (char *)v172;
        uint64_t v67 = v175;
        RangeSet.ranges.getter();
        lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
        char v68 = dispatch thunk of Collection.isEmpty.getter();
        unint64_t v185 = a2;
        if (v68)
        {
          uint64_t v179 = 0;
        }
        else
        {
          dispatch thunk of Collection.endIndex.getter();
          lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
          dispatch thunk of BidirectionalCollection.index(before:)();
          uint64_t v69 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v179 = *(void *)(v70 + 8);
          v69(&v195, 0);
        }
        LOBYTE(v195) = v68 & 1;
        uint64_t v71 = *v184;
        (*v184)(v66, v8);
        char v72 = v195;
        Swift::Int v73 = *(void (**)(uint64_t, uint64_t))v180;
        (*(void (**)(char *, uint64_t))v180)(v181, v188);
        if (v72) {
          break;
        }
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v183, (uint64_t)v168, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        int v74 = swift_getEnumCaseMultiPayload();
        if (v74)
        {
          if (v74 == 1)
          {
            uint64_t v75 = v173;
            outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v168, v173, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
            char v76 = *(unsigned char *)(v75 + 16);
            int v77 = *(_DWORD *)(v75 + 40);
            long long v195 = *(_OWORD *)v75;
            char v196 = v76;
            long long v197 = *(_OWORD *)(v75 + 24);
            int v198 = v77;
            Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v75 + *(int *)(v174 + 24)), v67);
            _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v75, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          }
          else
          {
            uint64_t v79 = (void *)*((void *)v168 + 3);
            uint64_t v80 = *((void *)v168 + 4);
            char v81 = v168[40];
            uint64_t v82 = *((void *)v168 + 6);
            uint64_t v83 = *((void *)v168 + 7);
            int v84 = *((_DWORD *)v168 + 16);
            uint64_t v85 = *((void *)v168 + 9);
            uint64_t v86 = *((void *)v168 + 10);
            uint64_t v87 = *((void *)v168 + 11);
            outlined copy of Text.Layout.Line.Line(v79, v80, v81);
            lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
            swift_bridgeObjectRetain();
            RangeSet.init()();
            *(void *)&long long v195 = v79;
            *((void *)&v195 + 1) = v80;
            char v196 = v81;
            *(void *)&long long v197 = v82;
            *((void *)&v197 + 1) = v83;
            int v198 = v84;
            uint64_t v199 = v85;
            uint64_t v200 = v86;
            uint64_t v201 = v87;
            uint64_t v189 = v79;
            uint64_t v190 = v80;
            char v191 = v81;
            uint64_t v192 = v82;
            uint64_t v193 = v83;
            int v194 = v84;
            Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v189, v175);
            outlined consume of Text.Layout.Line.Line(v79, v80, v81);
            swift_bridgeObjectRelease();
            uint64_t v88 = v80;
            char v89 = v81;
            uint64_t v67 = v175;
            uint64_t v8 = v176;
            outlined consume of Text.Layout.Line.Line(v79, v88, v89);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          long long v78 = *((_OWORD *)v168 + 1);
          long long v204 = *(_OWORD *)v168;
          long long v205 = v78;
          long long v206 = *((_OWORD *)v168 + 2);
          uint64_t v207 = *((void *)v168 + 6);
          Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
          outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v204);
        }
        uint64_t v90 = v166;
        RangeSet.ranges.getter();
        char v91 = dispatch thunk of Collection.isEmpty.getter();
        uint64_t v92 = v90;
        if (v91)
        {
          uint64_t v93 = 0;
        }
        else
        {
          dispatch thunk of Collection.endIndex.getter();
          lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, (uint64_t)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (void (*)(uint64_t, uint64_t, void))type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges);
          dispatch thunk of BidirectionalCollection.index(before:)();
          uint64_t v94 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v93 = *(void *)(v95 + 8);
          v94(&v195, 0);
        }
        LOBYTE(v195) = v91 & 1;
        v71(v92, v8);
        char v96 = v195;
        v73(v67, v188);
        if (v96) {
          break;
        }
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v183, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v177, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        if (v179 >= v93) {
          goto LABEL_42;
        }
        unint64_t v97 = v212;
        unint64_t v99 = v186;
        unint64_t v101 = v185 + v182;
        if (v212 < v185 || v212 >= v101)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v212 == v185)
        {
          unint64_t v97 = v185;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_48:
        unint64_t v212 = v97 + v182;
        a4 = v203;
        if (v203 < v171)
        {
          a2 = v101;
          if (v101 < v99) {
            continue;
          }
        }
        goto LABEL_103;
      }
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v183, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v177, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
LABEL_42:
      unint64_t v97 = v212;
      unint64_t v98 = v203 + v182;
      unint64_t v100 = v185;
      unint64_t v99 = v186;
      if (v212 < v203 || v212 >= v98)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v212 != v203)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v203 = v98;
      unint64_t v101 = v100;
      goto LABEL_48;
    }
    goto LABEL_103;
  }
LABEL_107:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v22)(char *, unint64_t, uint64_t);
  void (**v23)(char *, uint64_t);
  char *v24;
  char *v25;
  double v26;
  double v27;
  void (*v28)(char *, uint64_t);
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v34;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  unint64_t v44;
  char *v45;
  double v46;
  double v47;
  void (*v48)(char *, uint64_t);
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  void (**v56)(char *, uint64_t);
  void (*v57)(char *, unint64_t, uint64_t);
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  double v63;
  double v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;

  uint64_t v8 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v62 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v61 = (char *)&v54 - v12;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_68;
  }
  uint64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_69;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  uint64_t v67 = a1;
  uint64_t v66 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = a3;
      uint64_t v20 = v17 * v14;
      if (a4 < a2 || a2 + v20 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v34 = a4 + v20;
      uint64_t v65 = a4 + v20;
      uint64_t v67 = a2;
      if (v20 >= 1 && a1 < a2)
      {
        uint64_t v36 = v19;
        uint64_t v37 = -v14;
        uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
        uint64_t v60 = v9 + 16;
        long long v56 = (void (**)(char *, uint64_t))(v9 + 8);
        uint64_t v57 = v38;
        int v55 = a4;
        uint64_t v58 = a1;
        uint64_t v39 = v61;
        do
        {
          char v59 = v36 + v37;
          uint64_t v40 = v8;
          uint64_t v41 = v36;
          uint64_t v42 = v8;
          uint64_t v43 = v57;
          v57(v39, v34 + v37, v40);
          int64_t v44 = a2 + v37;
          uint64_t v45 = v62;
          v43(v62, a2 + v37, v42);
          uint64_t v8 = v42;
          Date.ComponentsFormatStyle.Field.magnitude.getter(&v64);
          uint64_t v46 = v64;
          Date.ComponentsFormatStyle.Field.magnitude.getter(&v63);
          uint64_t v47 = v63;
          uint64_t v48 = *v56;
          (*v56)(v45, v42);
          v48(v39, v42);
          if (v47 >= v46)
          {
            uint64_t v52 = v65;
            v65 += v37;
            uint64_t v36 = v59;
            if (v41 < v52 || v59 >= v52)
            {
              swift_arrayInitWithTakeFrontToBack();
              int64_t v44 = a2;
              uint64_t v50 = v55;
              int v51 = v58;
            }
            else
            {
              int v51 = v58;
              if (v41 != v52) {
                swift_arrayInitWithTakeBackToFront();
              }
              int64_t v44 = a2;
              uint64_t v50 = v55;
            }
          }
          else
          {
            uint64_t v36 = v59;
            if (v41 < a2 || v59 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v50 = v55;
              int v51 = v58;
            }
            else
            {
              uint64_t v49 = v41 == a2;
              uint64_t v50 = v55;
              int v51 = v58;
              if (!v49) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v67 += v37;
          }
          uint64_t v34 = v65;
          if (v65 <= v50) {
            break;
          }
          a2 = v44;
        }
        while (v44 > v51);
      }
      goto LABEL_66;
    }
  }
  else
  {
    char v59 = a3;
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v14;
      if (a4 < a1 || a1 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a1)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v58 = a4 + v18;
      uint64_t v65 = a4 + v18;
      if (v18 >= 1 && a2 < v59)
      {
        uint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
        uint64_t v60 = v9 + 16;
        uint64_t v23 = (void (**)(char *, uint64_t))(v9 + 8);
        uint64_t v24 = v61;
        do
        {
          v22(v24, a2, v8);
          uint64_t v25 = v62;
          v22(v62, a4, v8);
          Date.ComponentsFormatStyle.Field.magnitude.getter(&v64);
          uint64_t v26 = v64;
          Date.ComponentsFormatStyle.Field.magnitude.getter(&v63);
          uint64_t v27 = v63;
          uint64_t v28 = *v23;
          (*v23)(v25, v8);
          v28(v24, v8);
          uint64_t v29 = v67;
          if (v27 >= v26)
          {
            uint64_t v32 = v66 + v14;
            if (v67 < v66 || v67 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v67 != v66)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v66 = v32;
            uint64_t v30 = a2;
          }
          else
          {
            uint64_t v30 = a2 + v14;
            if (v67 < a2 || v67 >= v30)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v67 == a2)
            {
              uint64_t v29 = a2;
            }
            else
            {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          uint64_t v67 = v29 + v14;
          a4 = v66;
          if (v66 >= v58) {
            break;
          }
          a2 = v30;
        }
        while (v30 < v59);
      }
LABEL_66:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v67, &v66, (uint64_t *)&v65);
      return 1;
    }
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_7SwiftUI4TextVAGE6EffectO18SegmentInteractionVAC33_18FF04020434AC91D85E42E330E464BELLVs5NeverOTg503_s7d3UI4f5VAAE6g3O18hi198V12displacement15segmentCategory5range4time7context5layerAG21SelectionDisplacementVSo019NSTextLayoutManagereI0V_SnyAC0Q0V14CharacterIndexVGAA4TimeVAE11BaseContextVAA0C11RenderLayerCtFAG7Element33_18jklmnO13BELLVSiXEfU0_AMTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Text.Effect.SegmentInteraction.Element();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (!v11) {
    return v12;
  }
  v22[1] = v3;
  uint64_t v27 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
  uint64_t v12 = v27;
  uint64_t v13 = (unint64_t *)(a1 + 32);
  uint64_t v14 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t result = v14 - 8;
  uint64_t v24 = a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v25 = v16;
  uint64_t v23 = a3 + 32;
  unint64_t v26 = *(void *)(a2 + 16);
  uint64_t v17 = *(void *)(a3 + 16);
  while (1)
  {
    unint64_t v19 = *v13++;
    uint64_t v18 = v19;
    if (v19 >= v26) {
      break;
    }
    uint64_t result = _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v24 + *(void *)(v25 + 72) * v18, (uint64_t)v10, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (v18 >= v17) {
      goto LABEL_10;
    }
    *(void *)&v10[*(int *)(v7 + 20)] = v18;
    *(_OWORD *)&v10[*(int *)(v7 + 24)] = *(_OWORD *)(v23 + 16 * v18);
    uint64_t v27 = v12;
    unint64_t v21 = *(void *)(v12 + 16);
    unint64_t v20 = *(void *)(v12 + 24);
    if (v21 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      uint64_t v12 = v27;
    }
    *(void *)(v12 + 16) = v21 + 1;
    uint64_t result = outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v21, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
    if (!--v11) {
      return v12;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.SegmentInteraction.matches(range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v72 + 1) = a2;
  *(void *)&long long v72 = a1;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v71 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v54 - v6;
  uint64_t v56 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v56);
  uint64_t v55 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v73 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v67 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v66 = (uint64_t)&v54 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v57 = (char *)&v54 - v15;
  uint64_t v65 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  MEMORY[0x270FA5388](v65);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v54 - v20;
  uint64_t v22 = *(char **)(a3 + 16);
  if (v22)
  {
    uint64_t v64 = v7;
    uint64_t v23 = a3 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    int v62 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
    uint64_t v61 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v60 = (void (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v63 = (char **)(v10 + 8);
    uint64_t v58 = *(void *)(v19 + 72);
    uint64_t v54 = a3;
    swift_bridgeObjectRetain();
    uint64_t v24 = v22 - 1;
    uint64_t v25 = v57;
    char v59 = v21;
    while (1)
    {
      uint64_t v69 = v24;
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(v23, (uint64_t)v21, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0((uint64_t)v21, (uint64_t)v17, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v70 = v23;
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v27 = v55;
          outlined init with take of Text.Effect.RenderSegmentation.StaticRuns((uint64_t)v17, v55, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          char v28 = *(unsigned char *)(v27 + 16);
          int v29 = *(_DWORD *)(v27 + 40);
          long long v79 = *(_OWORD *)v27;
          char v80 = v28;
          long long v81 = *(_OWORD *)(v27 + 24);
          int v82 = v29;
          uint64_t v30 = v66;
          Text.Layout.Line.characterRanges(runIndices:)((uint64_t *)(v27 + *(int *)(v56 + 24)), v66);
          _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(v27, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          uint64_t v33 = (void *)*((void *)v17 + 3);
          uint64_t v32 = *((void *)v17 + 4);
          char v34 = v17[40];
          uint64_t v35 = *((void *)v17 + 6);
          uint64_t v36 = *((void *)v17 + 7);
          int v37 = *((_DWORD *)v17 + 16);
          uint64_t v38 = *((void *)v17 + 9);
          uint64_t v39 = *((void *)v17 + 10);
          uint64_t v40 = *((void *)v17 + 11);
          outlined copy of Text.Layout.Line.Line(v33, v32, v34);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          swift_bridgeObjectRetain();
          uint64_t v30 = v66;
          RangeSet.init()();
          *(void *)&long long v79 = v33;
          *((void *)&v79 + 1) = v32;
          char v80 = v34;
          *(void *)&long long v81 = v35;
          *((void *)&v81 + 1) = v36;
          int v82 = v37;
          uint64_t v83 = v38;
          uint64_t v84 = v39;
          uint64_t v85 = v40;
          v74[0] = v33;
          v74[1] = v32;
          char v75 = v34;
          uint64_t v76 = v35;
          uint64_t v77 = v36;
          int v78 = v37;
          Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)v74, v30);
          outlined consume of Text.Layout.Line.Line(v33, v32, v34);
          swift_bridgeObjectRelease();
          outlined consume of Text.Layout.Line.Line(v33, v32, v34);
          uint64_t v25 = v57;
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        long long v31 = *((_OWORD *)v17 + 1);
        v86[0] = *(_OWORD *)v17;
        v86[1] = v31;
        v86[2] = *((_OWORD *)v17 + 2);
        uint64_t v87 = *((void *)v17 + 6);
        uint64_t v30 = v66;
        Text.Effect.RenderSegmentation.StaticLines.characterRanges.getter();
        outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v86);
      }
      uint64_t v41 = v73;
      (*v62)(v25, v30, v73);
      long long v79 = v72;
      uint64_t v42 = v64;
      uint64_t v43 = RangeSet.ranges.getter();
      MEMORY[0x270FA5388](v43);
      *(&v54 - 2) = (uint64_t)&v79;
      char v44 = specialized Sequence.contains(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in RangeSet.overlaps(_:), (uint64_t)(&v54 - 4));
      uint64_t v45 = *v61;
      (*v61)(v42, v71);
      uint64_t v46 = v67;
      (*v60)(v67, v25, v41);
      if (v44) {
        break;
      }
      long long v79 = v72;
      uint64_t v47 = v73;
      uint64_t v48 = v46;
      uint64_t v49 = RangeSet.ranges.getter();
      char v68 = &v54;
      MEMORY[0x270FA5388](v49);
      *(&v54 - 2) = (uint64_t)&v79;
      LOBYTE(v22) = specialized Sequence.contains(where:)((uint64_t (*)(void *))_ss8RangeSetV7SwiftUIE8containsySbSnyxGFSbAEXEfU_AC4TextV6LayoutV14CharacterIndexV_TG5TA_0, (uint64_t)(&v54 - 4));
      v45(v42, v71);
      uint64_t v50 = *v63;
      ((void (*)(char *, uint64_t))*v63)(v25, v47);
      uint64_t v51 = v47;
      unint64_t v21 = v59;
      ((void (*)(char *, uint64_t))v50)(v48, v51);
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v21, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if ((v22 & 1) == 0)
      {
        uint64_t v24 = v69 - 1;
        uint64_t v23 = v70 + v58;
        if (v69) {
          continue;
        }
      }
      goto LABEL_13;
    }
    uint64_t v22 = *v63;
    uint64_t v52 = v73;
    ((void (*)(char *, uint64_t))*v63)(v25, v73);
    ((void (*)(char *, uint64_t))v22)(v46, v52);
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)v21, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    LOBYTE(v22) = 1;
LABEL_13:
    swift_bridgeObjectRelease();
  }
  return v22 & 1;
}

void type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    unint64_t v7 = a3(a1, &type metadata for Text.Layout.CharacterIndex, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t partial apply for specialized closure #1 in RangeSet.overlaps(_:)(uint64_t *a1)
{
  return (unint64_t)specialized closure #1 in RangeSet.overlaps(_:)(a1, *(uint64_t **)(v1 + 16)) & 1;
}

BOOL _ss8RangeSetV7SwiftUIE8containsySbSnyxGFSbAEXEfU_AC4TextV6LayoutV14CharacterIndexV_TG5TA_0(void *a1)
{
  return specialized closure #1 in RangeSet.contains(_:)(a1, *(void **)(v1 + 16));
}

uint64_t _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Text.Effect.SegmentInteraction.Element()
{
  uint64_t result = type metadata singleton initialization cache for Text.Effect.SegmentInteraction.Element;
  if (!type metadata singleton initialization cache for Text.Effect.SegmentInteraction.Element) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _ss8RangeSetV7SwiftUISxRzSZ6StrideRpzrlE13IndexSequenceV8IteratorVySi__GWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(255, a2, MEMORY[0x263F8ED78]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:)()
{
  return implicit closure #1 in Text.Effect.SegmentInteraction.Element.displacement(for:type:time:context:layer:)();
}

void type metadata accessor for Text.Effect.SegmentInteraction.Element?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_245B99044()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined init with take of Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

char *initializeBufferWithCopyOfBuffer for Text.Effect.SegmentInteraction.Element(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      uint64_t v25 = a2[3];
      uint64_t v26 = (uint64_t)a2[4];
      char v27 = *((unsigned char *)a2 + 40);
      outlined copy of Text.Layout.Line.Line(v25, v26, v27);
      *((void *)a1 + 3) = v25;
      *((void *)a1 + 4) = v26;
      a1[40] = v27;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *((void *)a1 + 11) = a2[11];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = (uint64_t)*a2;
        uint64_t v9 = (uint64_t)a2[1];
        char v10 = *((unsigned char *)a2 + 16);
        outlined copy of Text.Layout.Line.Line(*a2, v9, v10);
        *(void *)a1 = v8;
        *((void *)a1 + 1) = v9;
        a1[16] = v10;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        uint64_t v11 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
        uint64_t v12 = v11[6];
        uint64_t v13 = &a1[v12];
        uint64_t v14 = (uint64_t)a2 + v12;
        type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
        *(void *)&a1[v11[7]] = *(char **)((char *)a2 + v11[7]);
        uint64_t v16 = v11[8];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = (_OWORD *)((char *)a2 + v16);
        long long v19 = v18[1];
        *(_OWORD *)uint64_t v17 = *v18;
        *((_OWORD *)v17 + 1) = v19;
        uint64_t v20 = v11[9];
        unint64_t v21 = &a1[v20];
        uint64_t v22 = (_OWORD *)((char *)a2 + v20);
        long long v23 = v22[1];
        *(_OWORD *)unint64_t v21 = *v22;
        *((_OWORD *)v21 + 1) = v23;
LABEL_9:
        swift_storeEnumTagMultiPayload();
        uint64_t v29 = *(int *)(a3 + 24);
        *(void *)&a1[*(int *)(a3 + 20)] = *(char **)((char *)a2 + *(int *)(a3 + 20));
        *(_OWORD *)&a1[v29] = *(_OWORD *)((char *)a2 + v29);
        return a1;
      }
      char v28 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v28;
      *((void *)a1 + 2) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  uint64_t v24 = *a2;
  *(void *)a1 = *a2;
  a1 = &v24[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

uint64_t destroy for Text.Effect.SegmentInteraction.Element(uint64_t a1)
{
  type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    outlined consume of Text.Layout.Line.Line(*(void **)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
LABEL_6:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v3 = a1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t initializeWithCopy for Text.Effect.SegmentInteraction.Element(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    long long v23 = (void *)a2[3];
    uint64_t v24 = a2[4];
    char v25 = *((unsigned char *)a2 + 40);
    outlined copy of Text.Layout.Line.Line(v23, v24, v25);
    *(void *)(a1 + 24) = v23;
    *(void *)(a1 + 32) = v24;
    *(unsigned char *)(a1 + 40) = v25;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(void *)(a1 + 88) = a2[11];
LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v26 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v26;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  char v9 = *((unsigned char *)a2 + 16);
  outlined copy of Text.Layout.Line.Line((void *)*a2, v8, v9);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  char v10 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  uint64_t v11 = v10[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  *(void *)(a1 + v10[7]) = *(uint64_t *)((char *)a2 + v10[7]);
  uint64_t v15 = v10[8];
  uint64_t v16 = (_OWORD *)(a1 + v15);
  uint64_t v17 = (_OWORD *)((char *)a2 + v15);
  long long v18 = v17[1];
  _OWORD *v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = v10[9];
  uint64_t v20 = (_OWORD *)(a1 + v19);
  unint64_t v21 = (_OWORD *)((char *)a2 + v19);
  long long v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
LABEL_7:
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v27) = *(_OWORD *)((char *)a2 + v27);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.SegmentInteraction.Element(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)a1 != a2)
  {
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1(a1, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      long long v23 = (void *)a2[3];
      uint64_t v24 = a2[4];
      char v25 = *((unsigned char *)a2 + 40);
      outlined copy of Text.Layout.Line.Line(v23, v24, v25);
      *(void *)(a1 + 24) = v23;
      *(void *)(a1 + 32) = v24;
      *(unsigned char *)(a1 + 40) = v25;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(void *)(a1 + 88) = a2[11];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v7 = *a2;
        uint64_t v8 = a2[1];
        char v9 = *((unsigned char *)a2 + 16);
        outlined copy of Text.Layout.Line.Line((void *)*a2, v8, v9);
        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v8;
        *(unsigned char *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        char v10 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
        uint64_t v11 = v10[6];
        uint64_t v12 = a1 + v11;
        uint64_t v13 = (uint64_t)a2 + v11;
        type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        *(void *)(a1 + v10[7]) = *(uint64_t *)((char *)a2 + v10[7]);
        uint64_t v15 = v10[8];
        uint64_t v16 = (_OWORD *)(a1 + v15);
        uint64_t v17 = (_OWORD *)((char *)a2 + v15);
        long long v18 = v17[1];
        _OWORD *v16 = *v17;
        v16[1] = v18;
        uint64_t v19 = v10[9];
        uint64_t v20 = (_OWORD *)(a1 + v19);
        unint64_t v21 = (_OWORD *)((char *)a2 + v19);
        long long v22 = v21[1];
        *uint64_t v20 = *v21;
        v20[1] = v22;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = a2[2];
      long long v26 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 24) = v26;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
LABEL_9:
  *(void *)(a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v27 = *(int *)(a3 + 24);
  char v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)((char *)a2 + v27);
  *char v28 = *v29;
  v28[1] = v29[1];
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.SegmentInteraction.Element(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
    a1[3] = a2[3];
    uint64_t v8 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
    uint64_t v9 = v8[6];
    char v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
    uint64_t v13 = v8[8];
    uint64_t v14 = (_OWORD *)((char *)a1 + v13);
    uint64_t v15 = (_OWORD *)((char *)a2 + v13);
    long long v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = v8[9];
    long long v18 = (_OWORD *)((char *)a1 + v17);
    uint64_t v19 = (_OWORD *)((char *)a2 + v17);
    long long v20 = v19[1];
    *long long v18 = *v19;
    v18[1] = v20;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v21 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
  return a1;
}

_OWORD *assignWithTake for Text.Effect.SegmentInteraction.Element(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOhTm_1((uint64_t)a1, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    uint64_t v6 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
      a1[3] = a2[3];
      uint64_t v8 = (int *)type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
      uint64_t v9 = v8[6];
      char v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
      uint64_t v13 = v8[8];
      uint64_t v14 = (_OWORD *)((char *)a1 + v13);
      uint64_t v15 = (_OWORD *)((char *)a2 + v13);
      long long v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v8[9];
      long long v18 = (_OWORD *)((char *)a1 + v17);
      uint64_t v19 = (_OWORD *)((char *)a2 + v17);
      long long v20 = v19[1];
      *long long v18 = *v19;
      v18[1] = v20;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v21 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.SegmentInteraction.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245B99B6C);
}

uint64_t sub_245B99B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.SegmentInteraction.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245B99BEC);
}

uint64_t sub_245B99BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Text.Effect.SegmentInteraction.Element()
{
  uint64_t result = type metadata accessor for Text.Effect.RenderSegmentation.Segment(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t closure #1 in RangeSet.overlaps(_:)specialized partial apply(uint64_t *a1)
{
  return partial apply for specialized closure #1 in RangeSet.overlaps(_:)(a1) & 1;
}

uint64_t static ShapeStyledLeafView.animatesSize.getter()
{
  return 1;
}

uint64_t protocol witness for ContentResponder.contains(points:size:) in conformance Image.Resolved@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  return specialized ShapeStyledLeafView.contains(points:size:)(a1, a2, a3, a4, a5);
}

uint64_t specialized ShapeStyledLeafView.contains(points:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>, CGFloat a5@<D0>, CGFloat a6@<D1>)
{
  uint64_t v9 = (CGFloat *)result;
  if (a3)
  {
    uint64_t v11 = *(double (**)(uint64_t))(*(void *)a3 + 112);
    uint64_t v12 = swift_retain();
    double v13 = v11(v12);
    double v17 = CGRect.outset(by:)(v13, v14, v15, v16, 0.0, 0.0, a5, a6);
    CGFloat v19 = v18;
    a5 = v20;
    a6 = v21;
    uint64_t result = swift_release();
    if (!v9) {
      goto LABEL_14;
    }
  }
  else
  {
    double v17 = 0.0;
    CGFloat v19 = 0.0;
    if (!result) {
      goto LABEL_14;
    }
  }
  if (a2)
  {
    CGFloat v24 = *v9;
    CGFloat v23 = v9[1];
    long long v22 = v9 + 3;
    swift_retain();
    swift_retain();
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    for (uint64_t i = 16 * a2 - 16; ; i -= 16)
    {
      v31.origin.CGFloat x = v17;
      v31.origin.CGFloat y = v19;
      v31.size.CGFloat width = a5;
      v31.size.CGFloat height = a6;
      v30.CGFloat x = v24;
      v30.CGFloat y = v23;
      BOOL v28 = CGRectContainsPoint(v31, v30);
      if (v25 < 0x40)
      {
        uint64_t v29 = 1 << v25;
        if (v28)
        {
LABEL_9:
          v26 |= v29;
          if (!i) {
            goto LABEL_15;
          }
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v29 = 0;
        if (v28) {
          goto LABEL_9;
        }
      }
      v26 &= ~v29;
      if (!i)
      {
LABEL_15:
        swift_release();
        uint64_t result = swift_release();
        goto LABEL_16;
      }
LABEL_13:
      CGFloat v24 = *(v22 - 1);
      CGFloat v23 = *v22;
      v22 += 2;
      ++v25;
    }
  }
LABEL_14:
  uint64_t v26 = 0;
LABEL_16:
  *a4 = v26;
  return result;
}

uint64_t specialized ShapeStyledLeafView.contains(points:size:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  uint64_t v11 = (double *)*((void *)v5 + 18);
  outlined init with take of SymbolVariants.Shape?((uint64_t)v5 + 153, (uint64_t)&v43, &lazy cache variable for type metadata for SymbolVariants.Shape?, (uint64_t)&type metadata for SymbolVariants.Shape);
  outlined init with take of SymbolVariants.Shape?((uint64_t)&v43, (uint64_t)&v44, &lazy cache variable for type metadata for SymbolVariants.Shape?, (uint64_t)&type metadata for SymbolVariants.Shape);
  if (v44 == 3 || v11 == 0)
  {
    long long v13 = v5[5];
    v40[0] = v5[4];
    v40[1] = v13;
    int v41 = *((_DWORD *)v5 + 24);
    long long v14 = v5[1];
    long long v36 = *v5;
    long long v37 = v14;
    long long v15 = v5[3];
    long long v38 = v5[2];
    long long v39 = v15;
    outlined init with take of SymbolVariants.Shape?((uint64_t)v40, (uint64_t)v42, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo);
    uint64_t result = outlined init with take of SymbolVariants.Shape?((uint64_t)v42, (uint64_t)v45, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo);
    CGFloat v17 = 0.0;
    CGFloat v18 = 0.0;
    if (v45[32] == 2)
    {
      a4 = 0.0;
      if (v11)
      {
        CGFloat v17 = v11[6];
        CGFloat v18 = v11[7];
      }
      if (*(double *)&v37 != 0.0)
      {
        double v34 = *((double *)&v37 + 1);
        double v35 = *(double *)&v38;
        switch(BYTE8(v38))
        {
          case 4:
          case 5:
          case 6:
          case 7:
            double v35 = *((double *)&v37 + 1);
            double v34 = *(double *)&v38;
            break;
          default:
            break;
        }
        a4 = 1.0 / *(double *)&v37 * v34;
        a5 = 1.0 / *(double *)&v37 * v35;
        if (!a1) {
          goto LABEL_36;
        }
LABEL_12:
        if (a2)
        {
          CGFloat v21 = *a1;
          CGFloat v20 = a1[1];
          CGFloat v19 = a1 + 3;
          outlined retain of GraphicsImage((uint64_t)&v36);
          unint64_t v22 = 0;
          uint64_t v23 = 0;
          for (uint64_t i = 16 * a2 - 16; ; i -= 16)
          {
            v47.origin.CGFloat x = v17;
            v47.origin.CGFloat y = v18;
            v47.size.CGFloat width = a4;
            v47.size.CGFloat height = a5;
            v46.CGFloat x = v21;
            v46.CGFloat y = v20;
            BOOL v25 = CGRectContainsPoint(v47, v46);
            if (v22 < 0x40)
            {
              uint64_t v26 = 1 << v22;
              if (!v25)
              {
LABEL_14:
                v23 &= ~v26;
                if (!i) {
                  goto LABEL_21;
                }
                goto LABEL_15;
              }
            }
            else
            {
              uint64_t v26 = 0;
              if (!v25) {
                goto LABEL_14;
              }
            }
            v23 |= v26;
            if (!i)
            {
LABEL_21:
              uint64_t result = outlined release of GraphicsImage((uint64_t)&v36);
              *a3 = v23;
              return result;
            }
LABEL_15:
            CGFloat v21 = *(v19 - 1);
            CGFloat v20 = *v19;
            v19 += 2;
            ++v22;
          }
        }
LABEL_36:
        *a3 = 0;
        return result;
      }
      a5 = 0.0;
    }
    if (!a1) {
      goto LABEL_36;
    }
    goto LABEL_12;
  }
  uint64_t v27 = *((unsigned int *)v5 + 39);
  unsigned __int8 v28 = *((unsigned char *)v5 + 160);
  double v29 = v11[8] * (a4 / v11[4]);
  double v30 = v11[9] * (a5 / v11[5]);
  v45[0] = v44;
  LOBYTE(v36) = v28;
  SymbolVariants.Shape.path(in:cornerRadius:)(v27 | ((unint64_t)v28 << 32), (uint64_t)&v36, 0.0, 0.0, v29, v30);
  if (!a1 || !a2)
  {
LABEL_32:
    uint64_t result = outlined release of Path((uint64_t)&v36);
    goto LABEL_36;
  }
  BOOL v31 = 0;
  uint64_t v32 = a1 + 1;
  uint64_t v33 = 16 * a2 - 16;
  while (v31)
  {
    if (!v33) {
      goto LABEL_31;
    }
    BOOL v31 = 1;
LABEL_26:
    v32 += 2;
    v33 -= 16;
  }
  v48.origin.CGFloat x = 0.0;
  v48.origin.CGFloat y = 0.0;
  v48.size.CGFloat width = v29;
  v48.size.CGFloat height = v30;
  BOOL v31 = CGRectContainsPoint(v48, *(CGPoint *)(v32 - 1));
  if (v33) {
    goto LABEL_26;
  }
  if (!v31) {
    goto LABEL_32;
  }
LABEL_31:
  Path.contains(points:eoFill:origin:)((uint64_t)a1, a2, a3, 0.0, 0.0);
  return outlined release of Path((uint64_t)&v36);
}

void ShapeStyledLeafView.contains(points:size:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4) & 1) == 0) {
    goto LABEL_5;
  }
  double v12 = (*(double (**)(unint64_t *, uint64_t, uint64_t, double, double))(a4 + 56))(&v68, a3, a4, a6, a7);
  double v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v19 = (void *)v68;
  uint64_t v20 = v69;
  uint64_t v21 = v70;
  uint64_t v22 = v71;
  unsigned __int8 v24 = v72;
  uint64_t v23 = v73;
  unint64_t v25 = v74;
  uint64_t v26 = v75;
  unsigned int v27 = v80;
  uint64_t v28 = v79;
  uint64_t v65 = v77;
  uint64_t v66 = v78;
  if ((v80 & 0xE00000) != 0x800000)
  {
    uint64_t v29 = v76;
    goto LABEL_8;
  }
  if (v69 | v68 | v70 | v71 | v72 | v73 | v74 | v75 | v76 | v77 | v78 | v79)
  {
    uint64_t v29 = v76;
    goto LABEL_8;
  }
  uint64_t v29 = v76;
  if (v80 == 0x800000)
  {
LABEL_5:
    double v12 = (*(double (**)(unint64_t *, uint64_t, uint64_t, double, double))(a4 + 40))(&v68, a3, a4, a6, a7);
    double v14 = v30;
    CGFloat v16 = v31;
    CGFloat v18 = v32;
    CGFloat v19 = (void *)v68;
    uint64_t v20 = v69;
    uint64_t v21 = v70;
    uint64_t v22 = v71;
    unsigned __int8 v24 = v72;
    uint64_t v23 = v73;
    unint64_t v25 = v74;
    uint64_t v26 = v75;
    uint64_t v29 = v76;
    uint64_t v65 = v77;
    uint64_t v66 = v78;
    uint64_t v28 = v79;
    unsigned int v27 = v80;
  }
LABEL_8:
  uint64_t v64 = v26;
  if ((v27 & 0xE00000) == 0)
  {
    uint64_t v43 = v28;
    unint64_t v44 = v25;
    uint64_t v45 = v23;
    unint64_t v68 = (unint64_t)v19;
    uint64_t v69 = v20;
    uint64_t v70 = v21;
    uint64_t v71 = v22;
    LOBYTE(v72) = v24;
    if (!a1 || !a2) {
      goto LABEL_33;
    }
    uint64_t v57 = v29;
    uint64_t v58 = a5;
    uint64_t v46 = v20;
    CGRect v47 = v19;
    uint64_t v48 = v21;
    uint64_t v49 = v46;
    uint64_t v55 = v48;
    outlined copy of Path.Storage((uint64_t)v19, v46, v48, v22, v24);
    BOOL v50 = 0;
    uint64_t v51 = a1 + 8;
    for (uint64_t i = 16 * a2 - 16; ; i -= 16)
    {
      if (v50)
      {
        if (!i) {
          goto LABEL_31;
        }
        BOOL v50 = 1;
      }
      else
      {
        v82.origin.CGFloat x = v12;
        v82.origin.CGFloat y = v14;
        v82.size.CGFloat width = v16;
        v82.size.CGFloat height = v18;
        BOOL v50 = CGRectContainsPoint(v82, *(CGPoint *)(v51 - 8));
        if (!i)
        {
          if (v50)
          {
LABEL_31:
            Path.contains(points:eoFill:origin:)(a1, a2, v58, v12, v14);
            outlined consume of _ShapeStyle_RenderedShape.Shape(v47, v49, v55, v22, v24, v45, v44, v64, v57, v65, v66, v43, v27);
            outlined consume of _ShapeStyle_RenderedShape.Shape(v47, v49, v55, v22, v24, v45, v44, v64, v57, v65, v66, v43, v27);
            return;
          }
          CGFloat v19 = v47;
          uint64_t v53 = v47;
          uint64_t v20 = v49;
          uint64_t v54 = v49;
          uint64_t v21 = v55;
          outlined consume of _ShapeStyle_RenderedShape.Shape(v53, v54, v55, v22, v24, v45, v44, v64, v57, v65, v66, v43, v27);
          uint64_t v29 = v57;
          a5 = v58;
LABEL_33:
          outlined consume of _ShapeStyle_RenderedShape.Shape(v19, v20, v21, v22, v24, v45, v44, v64, v29, v65, v66, v43, v27);
          *a5 = 0;
          return;
        }
      }
      v51 += 16;
    }
  }
  uint64_t v59 = v28;
  unint64_t v60 = v25;
  uint64_t v61 = v23;
  unsigned __int8 v62 = v24;
  if (!a1 || !a2)
  {
    uint64_t v33 = v22;
    uint64_t v34 = v21;
    uint64_t v35 = v20;
    long long v36 = v19;
    uint64_t v38 = 0;
    goto LABEL_29;
  }
  uint64_t v56 = v29;
  uint64_t v33 = v22;
  uint64_t v34 = v21;
  uint64_t v35 = v20;
  long long v36 = v19;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = a1 + 8;
  for (uint64_t j = 16 * a2 - 16; ; j -= 16)
  {
    v81.origin.CGFloat x = v12;
    v81.origin.CGFloat y = v14;
    v81.size.CGFloat width = v16;
    v81.size.CGFloat height = v18;
    BOOL v41 = CGRectContainsPoint(v81, *(CGPoint *)(v39 - 8));
    if (v37 < 0x40) {
      break;
    }
    uint64_t v42 = 0;
    if (!v41) {
      goto LABEL_17;
    }
LABEL_14:
    v38 |= v42;
    if (!j) {
      goto LABEL_28;
    }
LABEL_18:
    v39 += 16;
    ++v37;
  }
  uint64_t v42 = 1 << v37;
  if (v41) {
    goto LABEL_14;
  }
LABEL_17:
  v38 &= ~v42;
  if (j) {
    goto LABEL_18;
  }
LABEL_28:
  uint64_t v29 = v56;
LABEL_29:
  outlined consume of _ShapeStyle_RenderedShape.Shape(v36, v35, v34, v33, v62, v61, v60, v64, v29, v65, v66, v59, v27);
  *a5 = v38;
}

double protocol witness for ContentResponder.contentPath(size:) in conformance Image.Resolved@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  long long v5 = v3[9];
  long long v22 = v3[8];
  long long v23 = v5;
  v24[0] = v3[10];
  *(_DWORD *)((char *)v24 + 15) = *(_DWORD *)((char *)v3 + 175);
  long long v6 = v3[5];
  long long v18 = v3[4];
  long long v19 = v6;
  long long v7 = v3[7];
  long long v20 = v3[6];
  long long v21 = v7;
  long long v8 = v3[1];
  long long v14 = *v3;
  long long v15 = v8;
  long long v9 = v3[3];
  long long v16 = v3[2];
  long long v17 = v9;
  specialized ShapeStyledLeafView.contentPath(size:)((uint64_t)v12, a2, a3);
  double result = *(double *)v12;
  long long v11 = v12[1];
  *(_OWORD *)a1 = v12[0];
  *(_OWORD *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 32) = v13;
  return result;
}

void ShapeStyledLeafView.contentPath(size:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = (*(double (**)(CGAffineTransform *, uint64_t))(a2 + 40))(&v41, a1);
  uint64_t v8 = *(void *)&v4;
  uint64_t v9 = *(void *)&v5;
  uint64_t v10 = *(void *)&v41.a;
  uint64_t v11 = *(void *)&v41.b;
  uint64_t v12 = *(void *)&v41.c;
  uint64_t v13 = *(void *)&v41.d;
  unsigned __int8 tx_low = LOBYTE(v41.tx);
  uint64_t v15 = v43;
  uint64_t v16 = v45;
  if ((v48 & 0xE00000) != 0)
  {
    uint64_t v17 = v6;
    uint64_t v18 = v7;
    uint64_t v36 = *(void *)&v41.ty;
    uint64_t v38 = v43;
    unint64_t v39 = v42;
    unsigned __int8 v32 = LOBYTE(v41.tx);
    uint64_t v19 = v44;
    uint64_t v20 = v46;
    uint64_t v21 = v47;
    unsigned int v22 = v48;
    BOOL IsNull = CGRectIsNull(*(CGRect *)&v4);
    outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v10, v11, v12, v13, v32, v36, v39, v38, v19, v16, v20, v21, v22);
    if (IsNull) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v8;
    }
    if (IsNull) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v9;
    }
    if (IsNull) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v17;
    }
    if (IsNull) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v18;
    }
    if (IsNull) {
      unsigned __int8 tx_low = 6;
    }
    else {
      unsigned __int8 tx_low = 0;
    }
  }
  else
  {
    CGFloat a = v41.a;
    CGFloat b = v41.b;
    CGFloat c = v41.c;
    CGFloat d = v41.d;
    char v55 = LOBYTE(v41.tx);
    if (v4 != 0.0 || v5 != 0.0)
    {
      uint64_t v31 = v44;
      uint64_t v37 = *(void *)&v41.ty;
      unint64_t v40 = v42;
      uint64_t v35 = v46;
      uint64_t v23 = v47;
      uint64_t v26 = v47;
      unsigned int v24 = v48;
      CGAffineTransformMakeTranslation(&v41, v4, v5);
      outlined copy of Path.Storage(v10, v11, v12, v13, tx_low);
      Path.applying(_:)(&v41.a, (uint64_t)v49);
      uint64_t v33 = v49[0];
      uint64_t v29 = v49[2];
      uint64_t v30 = v49[1];
      uint64_t v28 = v49[3];
      unsigned __int8 v27 = v50;
      outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v10, v11, v12, v13, tx_low, v37, v40, v15, v31, v16, v35, v23, v24);
      outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v10, v11, v12, v13, tx_low, v37, v40, v15, v31, v16, v35, v26, v25);
      uint64_t v10 = v33;
      uint64_t v12 = v29;
      uint64_t v11 = v30;
      uint64_t v13 = v28;
      unsigned __int8 tx_low = v27;
    }
  }
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v11;
  *(void *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v13;
  *(unsigned char *)(a3 + 32) = tx_low;
}

uint64_t static ShapeStyledLeafView.hasBackground.getter()
{
  return 0;
}

double ShapeStyledLeafView.backgroundShape(in:)(uint64_t a1)
{
  return 0.0;
}

{
  double result;

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  double result = 0.0;
  *(_DWORD *)(a1 + 96) = 0x800000;
  return result;
}

uint64_t ShapeStyledLeafView<>.mustUpdate(data:position:)()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t static ShapeStyledLeafView<>.makeLeafView(view:inputs:styles:interpolatorGroup:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 20);
  unsigned int v20 = *a1;
  *(void *)&long long v13 = v7;
  DWORD2(v13) = v8;
  uint64_t v14 = v9;
  long long v11 = *(_OWORD *)(a2 + 5);
  long long v15 = *(_OWORD *)(a2 + 3);
  long long v16 = v11;
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v18 = a2[9];
  int v19 = v10;
  return static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(&v20, &v13, a3, a4, a5, a5, a6, a7);
}

uint64_t closure #3 in ShapeStyledDisplayList.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11 = *(void *)(a2 - 8);
  double v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v11 + 16))(v14, v12);
  double v15 = (*(double (**)(double *, uint64_t, uint64_t, double, double))(a3 + 56))(a4, a2, a3, a5, a6);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  a4[13] = v15;
  *((void *)a4 + 14) = v17;
  *((void *)a4 + 15) = v19;
  *((void *)a4 + 16) = v21;
  return result;
}

uint64_t ShapeStyledResponderData.contains(points:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v18 = *(void *)(v6 + *(int *)(a3 + 36));
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 64))(&v18, v12, v13);
  if (result)
  {
    *a4 = 0;
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(v13 + 8) + 8);
    v15.n128_f64[0] = a5;
    v16.n128_f64[0] = a6;
    return v17(a1, a2, v12, v15, v16);
  }
  return result;
}

uint64_t ShapeStyledResponderData.contentPath(size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(void *)&v14[0] = *(void *)(v4 + *(int *)(a1 + 36));
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v9 + 64))(v14, v8, v9);
  if (result)
  {
    long long v11 = 0uLL;
    char v12 = 6;
    long long v13 = 0uLL;
  }
  else
  {
    uint64_t result = (uint64_t)(*(void *(**)(_OWORD *__return_ptr, uint64_t, double, double))(*(void *)(v9 + 8)
                                                                                               + 16))(v14, v8, a3, a4);
    long long v11 = v14[0];
    long long v13 = v14[1];
    char v12 = v15;
  }
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v13;
  *(unsigned char *)(a2 + 32) = v12;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:) in conformance ShapeStyledResponderData<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  ShapeStyledResponderData.contentPath(size:)(a1, (uint64_t)v7, a3, a4);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v8;
  return result;
}

double protocol witness for ShapeStyledLeafView.backgroundShape(in:) in conformance StyledTextContentView(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  double result = 0.0;
  *(_DWORD *)(a1 + 96) = 0x800000;
  return result;
}

BOOL protocol witness for ShapeStyledLeafView.isClear(styles:) in conformance StyledTextContentView(uint64_t *a1)
{
  return specialized ShapeStyledLeafView.isClear(styles:)(*a1);
}

uint64_t protocol witness for ContentResponder.contains(points:size:) in conformance StyledTextContentView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  return specialized ShapeStyledLeafView.contains(points:size:)(a1, a2, *(void *)(v5 + 8), a3, a4, a5);
}

BOOL protocol witness for ContentResponder.contentPath(size:) in conformance StyledTextContentView@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  uint64_t v7 = *(void *)(v3 + 8);
  if (v7)
  {
    char v8 = *(double (**)(uint64_t))(*(void *)v7 + 112);
    uint64_t v9 = swift_retain();
    double v10 = v8(v9);
    double v14 = CGRect.outset(by:)(v10, v11, v12, v13, 0.0, 0.0, a2, a3);
    double v16 = v15;
    a2 = v17;
    a3 = v18;
    swift_release();
  }
  else
  {
    double v14 = 0.0;
    double v16 = 0.0;
  }
  v25.origin.CGFloat x = v14;
  v25.origin.CGFloat y = v16;
  v25.size.CGFloat width = a2;
  v25.size.CGFloat height = a3;
  BOOL result = CGRectIsNull(v25);
  if (result) {
    double v20 = 0.0;
  }
  else {
    double v20 = v14;
  }
  if (result) {
    double v21 = 0.0;
  }
  else {
    double v21 = v16;
  }
  if (result) {
    double v22 = 0.0;
  }
  else {
    double v22 = a2;
  }
  if (result) {
    double v23 = 0.0;
  }
  else {
    double v23 = a3;
  }
  *(double *)a1 = v20;
  *(double *)(a1 + 8) = v21;
  if (result) {
    char v24 = 6;
  }
  else {
    char v24 = 0;
  }
  *(double *)(a1 + 16) = v22;
  *(double *)(a1 + 24) = v23;
  *(unsigned char *)(a1 + 32) = v24;
  return result;
}

void protocol witness for ContentResponder.contains(points:size:) in conformance _BackgroundStyleModifier<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _BackgroundStyleModifier<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ShapeStyledLeafView.contentPath(size:)(a1, (uint64_t)&protocol witness table for _BackgroundStyleModifier<A>, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

void protocol witness for ContentResponder.contains(points:size:) in conformance _BackgroundShapeModifier<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _BackgroundShapeModifier<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ShapeStyledLeafView.contentPath(size:)(a1, (uint64_t)&protocol witness table for _BackgroundShapeModifier<A, B>, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

void protocol witness for ContentResponder.contains(points:size:) in conformance _ShapeView<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _ShapeView<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ShapeStyledLeafView.contentPath(size:)(a1, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

void protocol witness for ContentResponder.contains(points:size:) in conformance AnimatedShape<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
}

double protocol witness for ContentResponder.contentPath(size:) in conformance AnimatedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ShapeStyledLeafView.contentPath(size:)(a1, (uint64_t)&protocol witness table for AnimatedShape<A>, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

BOOL specialized ShapeStyledLeafView.isClear(styles:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = *a1;
  char v5 = 0;
  Swift::Bool v2 = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  Swift::Bool v3 = 0;
  if (v2)
  {
    uint64_t v6 = v1;
    char v5 = 1;
    return _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  }
  return v3;
}

BOOL specialized ShapeStyledLeafView.isClear(styles:)(uint64_t a1)
{
  uint64_t v6 = a1;
  char v5 = 0;
  Swift::Bool v2 = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  Swift::Bool v3 = 0;
  if (v2)
  {
    uint64_t v6 = a1;
    char v5 = 1;
    return _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  }
  return v3;
}

uint64_t dispatch thunk of static ShapeStyledLeafView.animatesSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ShapeStyledLeafView.mustUpdate(data:position:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ShapeStyledLeafView.shape(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of static ShapeStyledLeafView.hasBackground.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ShapeStyledLeafView.backgroundShape(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ShapeStyledLeafView.isClear(styles:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ShapeStyledResponderData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t assignWithCopy for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithCopy for ShapeStyledResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ShapeStyledResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShapeStyledDisplayList(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 1;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 49) & ~v6)) & 0xFFFFFFFFFFFFFFFELL) + 2 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    double v12 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    double v13 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *double v12 = *v13;
    double v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    double v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *double v14 = *v15;
    double v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    double v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v16 = *v17;
    double v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *double v18 = *v19;
    double v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    double v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *double v20 = *v21;
    double v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    double v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *double v22 = *v23;
    char v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    CGRect v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *char v24 = *v25;
    uint64_t v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned __int8 v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v26 = *v27;
    uint64_t v28 = (_DWORD *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v29 = (_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v28 = *v29;
    unint64_t v30 = ((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v31 = ((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)unint64_t v30 = *(_DWORD *)v31;
    *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
    uint64_t v32 = (v30 + v6 + 5) & ~v6;
    uint64_t v33 = (v31 + v6 + 5) & ~v6;
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v34(v32, v33, AssociatedTypeWitness);
    *(_WORD *)((v7 + v32) & 0xFFFFFFFFFFFFFFFELL) = *(_WORD *)((v7 + v33) & 0xFFFFFFFFFFFFFFFELL);
  }
  return a1;
}

void *assignWithCopy for ShapeStyledDisplayList(void *a1, void *a2)
{
  unint64_t v3 = (unint64_t)a2 + 11;
  *a1 = *a2;
  unint64_t v4 = (unint64_t)a1 + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  double v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v11 = *v12;
  double v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v13 = *v14;
  double v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v15 = *v16;
  double v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v17 = *v18;
  uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = v24 + 24;
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = (v26 + 5 + v21) & ~v26;
  uint64_t v28 = (v26 + 5 + v22) & ~v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24))(v27, v28, AssociatedTypeWitness);
  *(_WORD *)((*(void *)(v25 + 40) + 1 + v27) & 0xFFFFFFFFFFFFFFFELL) = *(_WORD *)((*(void *)(v25 + 40) + 1 + v28) & 0xFFFFFFFFFFFFFFFELL);
  return a1;
}

void *initializeWithTake for ShapeStyledDisplayList(void *a1, void *a2)
{
  *a1 = *a2;
  unint64_t v3 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  double v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v11 = *v12;
  double v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v13 = *v14;
  double v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v15 = *v16;
  double v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v17 = *v18;
  uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = v24 + 32;
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = (v26 + 5 + v21) & ~v26;
  uint64_t v28 = (v26 + 5 + v22) & ~v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v27, v28, AssociatedTypeWitness);
  *(_WORD *)((*(void *)(v25 + 32) + 1 + v27) & 0xFFFFFFFFFFFFFFFELL) = *(_WORD *)((*(void *)(v25 + 32) + 1 + v28) & 0xFFFFFFFFFFFFFFFELL);
  return a1;
}

void *assignWithTake for ShapeStyledDisplayList(void *a1, void *a2)
{
  unint64_t v3 = (unint64_t)a2 + 11;
  *a1 = *a2;
  unint64_t v4 = (unint64_t)a1 + 11;
  swift_release();
  *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  double v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v11 = *v12;
  double v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v13 = *v14;
  double v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v15 = *v16;
  double v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v17 = *v18;
  uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = v24 + 40;
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = (v26 + 5 + v21) & ~v26;
  uint64_t v28 = (v26 + 5 + v22) & ~v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40))(v27, v28, AssociatedTypeWitness);
  *(_WORD *)((*(void *)(v25 + 24) + 1 + v27) & 0xFFFFFFFFFFFFFFFELL) = *(_WORD *)((*(void *)(v25 + 24) + 1 + v28) & 0xFFFFFFFFFFFFFFFELL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeStyledDisplayList(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v7) {
    goto LABEL_23;
  }
  unint64_t v10 = ((v9 + ((v8 + 49) & ~v8) + 1) & 0xFFFFFFFFFFFFFFFELL) + 2;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      if (v6 > 0x7FFFFFFE)
      {
        double v17 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v17(((((((((((((((((((((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                + 7) & 0xFFFFFFFFFFFFFFFCLL)
                              + 7) & 0xFFFFFFFFFFFFFFFCLL)
                            + 7) & 0xFFFFFFFFFFFFFFFCLL)
                          + 7) & 0xFFFFFFFFFFFFFFFCLL)
                        + 7) & 0xFFFFFFFFFFFFFFFCLL)
                      + 7) & 0xFFFFFFFFFFFFFFFCLL)
                    + 7) & 0xFFFFFFFFFFFFFFFCLL)
                  + v8
                  + 5) & ~v8);
      }
      else
      {
        uint64_t v16 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v16) = -1;
        }
        if ((v16 + 1) >= 2) {
          return v16;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 <= 3) {
      LODWORD(v10) = *a1;
    }
    else {
      LODWORD(v10) = *(_DWORD *)a1;
    }
  }
  return v7 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for ShapeStyledDisplayList(_WORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((*(void *)(v6 + 64) + ((v8 + 49) & ~v8) + 1) & 0xFFFFFFFFFFFFFFFELL) + 2;
  if (a3 <= v9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (((*(_DWORD *)(v6 + 64) + ((v8 + 49) & ~v8) + 1) & 0xFFFFFFFE) != 0xFFFFFFFE)
      {
        bzero(a1, v10);
        *a1 = v12 & ~(-1 << (8 * v10));
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v13;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v13;
        return;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_37:
      __break(1u);
      JUMPOUT(0x245B9C074);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          int v15 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v15(((((((((((((((((((((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ v8+ 5) & ~v8, a2);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)a1 = 0;
          *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)a1 = a2;
        }
      }
      return;
  }
}

uint64_t outlined init with take of SymbolVariants.Shape?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Attribute<DisplayList>(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW29VXEfU_AA14LinearGradientV_TG5AF01_yZ0VyAF14LinearGradientVGAF01_Y6InputsVTf1cn_nTm(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v6)
  {
    int64_t v26 = v6;
    uint64_t v34 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    int64_t v11 = v26;
    uint64_t v12 = 0;
    uint64_t result = v34;
    uint64_t v27 = a1 + 32;
    do
    {
      int v13 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v14 = v13[1];
      uint64_t v28 = *v13;
      uint64_t v29 = result;
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v16 = v14 + 40;
        uint64_t v17 = v15;
        do
        {
          (*(void (**)(void))(*(void *)v16 + 16))();
          v16 += 32;
          --v17;
        }
        while (v17);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        swift_bridgeObjectRetain();
        double v18 = (uint64_t *)(v14 + 48);
        do
        {
          uint64_t v19 = *(v18 - 1);
          uint64_t v20 = *v18;
          v18 += 4;
          int v31 = a2;
          (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v19 + 8))(&v32, &v31, v20, a3, a5);
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease_n();
        uint64_t v21 = v32;
        uint64_t v22 = v33;
        int64_t v11 = v26;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease_n();
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      uint64_t result = v29;
      uint64_t v34 = v29;
      unint64_t v24 = *(void *)(v29 + 16);
      unint64_t v23 = *(void *)(v29 + 24);
      if (v24 >= v23 >> 1)
      {
        uint64_t v30 = v22;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v22 = v30;
        int64_t v11 = v26;
        uint64_t result = v34;
      }
      ++v12;
      *(void *)(result + 16) = v24 + 1;
      uint64_t v25 = (void *)(result + 24 * v24);
      v25[4] = v28;
      v25[5] = v21;
      v25[6] = v22;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW51VXEfU_AA16SingleTapGestureVyAA13TappableEventVG_TG5AF01_yZ0VyAF16SingleTapGestureVyAF13TappableEventVGGAF01_Y6InputsVTf1cn_n(uint64_t a1, int a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v8 = 0;
    uint64_t v4 = v32;
    int64_t v25 = v3;
    uint64_t v26 = a1 + 32;
    do
    {
      unsigned int v9 = (uint64_t *)(v26 + 16 * v8);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      uint64_t v12 = *(void *)(v10 + 16);
      if (v12)
      {
        uint64_t v27 = *v9;
        swift_bridgeObjectRetain_n();
        uint64_t v13 = v10 + 40;
        uint64_t v14 = v12;
        do
        {
          (*(void (**)(void))(*(void *)v13 + 16))();
          v13 += 32;
          --v14;
        }
        while (v14);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        outlined copy of DynamicPropertyCache.Fields.Layout();
        type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
        uint64_t v16 = v15;
        uint64_t v17 = (uint64_t *)(v10 + 48);
        do
        {
          uint64_t v18 = *(v17 - 1);
          uint64_t v19 = *v17;
          v17 += 4;
          int v29 = a2;
          (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v18 + 8))(&v30, &v29, v19, a3, v16);
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease_n();
        uint64_t v12 = v30;
        uint64_t v20 = v31;
        int64_t v3 = v25;
        uint64_t v11 = v27;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease_n();
        uint64_t v20 = 0;
      }
      uint64_t v32 = v4;
      unint64_t v22 = *(void *)(v4 + 16);
      unint64_t v21 = *(void *)(v4 + 24);
      if (v22 >= v21 >> 1)
      {
        uint64_t v28 = v20;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        uint64_t v20 = v28;
        uint64_t v4 = v32;
      }
      ++v8;
      *(void *)(v4 + 16) = v22 + 1;
      unint64_t v23 = (void *)(v4 + 24 * v22);
      v23[4] = v11;
      void v23[5] = v12;
      v23[6] = v20;
    }
    while (v8 != v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW65VXEfU_AA13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLV_TG5AF01_yZ0VyAF13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLVGAF01_Y6InputsVTf1cn_nTm(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v6)
  {
    int64_t v26 = v6;
    uint64_t v34 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    int64_t v11 = v26;
    uint64_t v12 = 0;
    uint64_t result = v34;
    uint64_t v27 = a1 + 32;
    do
    {
      uint64_t v13 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v14 = v13[1];
      uint64_t v28 = *v13;
      uint64_t v29 = result;
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v16 = v14 + 40;
        uint64_t v17 = v15;
        do
        {
          (*(void (**)(void))(*(void *)v16 + 16))();
          v16 += 32;
          --v17;
        }
        while (v17);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        outlined copy of DynamicPropertyCache.Fields.Layout();
        uint64_t v18 = (uint64_t *)(v14 + 48);
        do
        {
          uint64_t v19 = *(v18 - 1);
          uint64_t v20 = *v18;
          v18 += 4;
          int v31 = a2;
          (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v19 + 8))(&v32, &v31, v20, a3, a5);
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease_n();
        uint64_t v21 = v32;
        uint64_t v22 = v33;
        int64_t v11 = v26;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease_n();
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      uint64_t result = v29;
      uint64_t v34 = v29;
      unint64_t v24 = *(void *)(v29 + 16);
      unint64_t v23 = *(void *)(v29 + 24);
      if (v24 >= v23 >> 1)
      {
        uint64_t v30 = v22;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v22 = v30;
        int64_t v11 = v26;
        uint64_t result = v34;
      }
      ++v12;
      *(void *)(result + 16) = v24 + 1;
      int64_t v25 = (void *)(result + 24 * v24);
      v25[4] = v28;
      v25[5] = v21;
      v25[6] = v22;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMonochromeEffect(int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void specialized BodyAccessor.makeBody(container:inputs:fields:)()
{
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x800000024621DDC0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  return specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a1, a2, a3, a4, a5, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, a6);
}

{
  return specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a1, a2, a3, a4, a5, (uint64_t)&type metadata for CombinedContentShape, a6);
}

{
  return specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a1, a2, a3, a4, a5, (uint64_t)&type metadata for SummarySymbol, a6);
}

{
  return specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a1, a2, a3, a4, a5, (uint64_t)&type metadata for DistanceGesture, a6);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  int v18;
  uint64_t v19;
  double v20;

  uint64_t v19 = 0;
  uint64_t v20 = 0.0;
  if (a3)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW51VXEfU_AA16SingleTapGestureVyAA13TappableEventVG_TG5AF01_yZ0VyAF16SingleTapGestureVyAF13TappableEventVGGAF01_Y6InputsVTf1cn_n(a2, a4, a5);
      type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
      project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a1, &v19, v16, 0);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
      uint64_t v12 = v11;
      uint64_t v13 = (uint64_t *)(a1 + 48);
      do
      {
        uint64_t v14 = *(v13 - 1);
        uint64_t v15 = *v13;
        v13 += 4;
        uint64_t v18 = a4;
        (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v14 + 8))(&v19, &v18, v15, a5, v12);
        --v10;
      }
      while (v10);
    }
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a6 = v19;
  uint64_t result = v20;
  a6[1] = v20;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VariableBlurEffect(int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMultiplyEffect@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static EnvironmentalModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMultiplyEffect(int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalModifier._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t dispatch thunk of EnvironmentalModifier.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static EnvironmentalModifier._requiresMainThread.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static EnvironmentalModifier._tracksEnvironmentDependencies.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

void type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<VariableBlurEffect>, (uint64_t)&type metadata for VariableBlurEffect, (uint64_t)&protocol witness table for VariableBlurEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<VariableBlurEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<VariableBlurEffect>, (uint64_t)&type metadata for VariableBlurEffect, (uint64_t)&protocol witness table for VariableBlurEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<VariableBlurEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<VariableBlurEffect>, (uint64_t)&type metadata for VariableBlurEffect, (uint64_t)&protocol witness table for VariableBlurEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<VariableBlurEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<VariableBlurEffect>, AsyncThreadFlags>);
    }
  }
}

void _s7SwiftUI15ModifiedContentVyACyACyACyAA014_ViewModifier_D0VyAA015SafeAreaPaddingF0VGAA06_InseteF0VyACyAA5ColorVAA12_FrameLayoutVGGGAPGAPGAPGMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for DynamicBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ModifierBodyAccessor<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifierBodyAccessor);
    lazy protocol witness table accessor for type ModifierBodyAccessor<SafeAreaPaddingModifier> and conformance ModifierBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifierBodyAccessor<SafeAreaPaddingModifier> and conformance ModifierBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifierBodyAccessor<SafeAreaPaddingModifier> and conformance ModifierBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ModifierBodyAccessor<SafeAreaPaddingModifier> and conformance ModifierBodyAccessor<A>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ModifierBodyAccessor<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifierBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifierBodyAccessor<SafeAreaPaddingModifier> and conformance ModifierBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ModifierBodyAccessor<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifierBodyAccessor);
    lazy protocol witness table accessor for type ModifierBodyAccessor<SafeAreaPaddingModifier> and conformance ModifierBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ModifierBodyAccessor<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifierBodyAccessor);
    lazy protocol witness table accessor for type ModifierBodyAccessor<SafeAreaPaddingModifier> and conformance ModifierBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ModifierBodyAccessor<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifierBodyAccessor);
    lazy protocol witness table accessor for type ModifierBodyAccessor<SafeAreaPaddingModifier> and conformance ModifierBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMultiplyEffect>, (uint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)&protocol witness table for _ColorMultiplyEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMultiplyEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView()
{
  unint64_t result = lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView;
  if (!lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_TestApp.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView, (uint64_t)&type metadata for _TestApp.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_TestApp.RootView> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<MeshGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape._Inset>, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)&protocol witness table for ContainerRelativeShape._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<ContainerRelativeShape>, (uint64_t)&type metadata for ContainerRelativeShape, (uint64_t)&protocol witness table for ContainerRelativeShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<ContainerRelativeShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle._Inset>, (uint64_t)&type metadata for Circle._Inset, (uint64_t)&protocol witness table for Circle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse._Inset>, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t)&protocol witness table for Ellipse._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule._Inset>, (uint64_t)&type metadata for Capsule._Inset, (uint64_t)&protocol witness table for Capsule._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle._Inset>, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)&protocol witness table for UnevenRoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle._Inset>, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)&protocol witness table for RoundedRectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle._Inset>, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t)&protocol witness table for Rectangle._Inset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle._Inset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Circle>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Circle>, (uint64_t)&type metadata for Circle, (uint64_t)&protocol witness table for Circle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Circle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Ellipse>, (uint64_t)&type metadata for Ellipse, (uint64_t)&protocol witness table for Ellipse, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Ellipse> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Capsule>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Capsule>, (uint64_t)&type metadata for Capsule, (uint64_t)&protocol witness table for Capsule, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Capsule> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<UnevenRoundedRectangle>, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)&protocol witness table for UnevenRoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<UnevenRoundedRectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RoundedRectangle>, (uint64_t)&type metadata for RoundedRectangle, (uint64_t)&protocol witness table for RoundedRectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RoundedRectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle>, (uint64_t)&type metadata for Rectangle, (uint64_t)&protocol witness table for Rectangle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Path>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Path>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Path>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Path>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Path>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Path>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Path>, (uint64_t)&type metadata for Path, (uint64_t)&protocol witness table for Path, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Path> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AnyShape>, (uint64_t)&type metadata for AnyShape, (uint64_t)&protocol witness table for AnyShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AnyShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol()
{
  unint64_t result = lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol;
  if (!lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>)
  {
    type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText()
{
  unint64_t result = lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText;
  if (!lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>)
  {
    type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>(255, &lazy cache variable for type metadata for ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingText and conformance _IntelligenceSupport.AnimatingText, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<_IntelligenceSupport.AnimatingText> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ShadowEffect>, (uint64_t)&type metadata for _ShadowEffect, (uint64_t)&protocol witness table for _ShadowEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ShadowEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for EnvironmentalBodyAccessor<_ColorMonochromeEffect>, (uint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)&protocol witness table for _ColorMonochromeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalBodyAccessor);
    lazy protocol witness table accessor for type EnvironmentalBodyAccessor<_ColorMonochromeEffect> and conformance EnvironmentalBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<AngularGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<EllipticalGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<RadialGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>);
    }
  }
}

uint64_t assignWithCopy for EnvironmentalBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for EnvironmentalBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t dispatch thunk of StyledFormatStyle.makePlatformAttributes(resolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t specialized static Array<A>.== infix(_:_:)(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0])
  {
    if (!v2 || a1 == a2)
    {
      char v17 = 1;
    }
    else
    {
      uint64_t v3 = v2 - 1;
      unint64_t v4 = a1 + 5;
      uint64_t v5 = a2 + 5;
      do
      {
        int8x16_t v6 = v4[-2];
        v24[0] = v4[-3];
        v24[1] = v6;
        int8x16_t v7 = *v4;
        _OWORD v24[2] = v4[-1];
        v24[3] = v7;
        int8x16_t v8 = v4[2];
        int8x16_t v9 = v4[3];
        v24[4] = v4[1];
        v24[5] = v8;
        v24[6] = v9;
        int8x16_t v10 = v5[-2];
        v21[0] = v5[-3];
        v21[1] = v10;
        int8x16_t v11 = *v5;
        v21[2] = v5[-1];
        v21[3] = v11;
        int8x16_t v12 = v5[2];
        int8x16_t v13 = v5[3];
        void v21[4] = v5[1];
        v21[5] = v12;
        char v14 = v4[4].i8[4];
        int v25 = v4[4].i32[0];
        char v26 = v14;
        __int32 v15 = v5[4].i32[0];
        __int8 v16 = v5[4].i8[4];
        v21[6] = v13;
        __int32 v22 = v15;
        __int8 v23 = v16;
        char v17 = specialized static GraphicsFilter.== infix(_:_:)((uint64_t)v24, v21);
        BOOL v19 = v3-- != 0;
        if ((v17 & 1) == 0) {
          break;
        }
        unint64_t v4 = (int8x16_t *)((char *)v4 + 120);
        uint64_t v5 = (int8x16_t *)((char *)v5 + 120);
      }
      while (v19);
    }
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

unsigned __int16 specialized static Array<A>.== infix(_:_:)@<H0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0])
  {
    if (v2)
    {
      if (a1 != a2)
      {
        unsigned __int16 result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(a1[2], a2[2])), 0xFuLL)));
        if (result)
        {
          unint64_t v4 = a1 + 3;
          uint64_t v5 = a2 + 3;
          uint64_t v6 = v2 - 1;
          do
          {
            if (!v6) {
              break;
            }
            float32x4_t v7 = *v4++;
            float32x4_t v8 = v7;
            float32x4_t v9 = *v5++;
            unsigned __int16 result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v8, v9)), 0xFuLL)));
            --v6;
          }
          while ((result & 1) != 0);
        }
      }
    }
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t v2 = a1[2];
  if (*(void *)&v2 != *(void *)&a2[2]) {
    return 0;
  }
  if (!*(void *)&v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 4;
  unint64_t v4 = a2 + 4;
  uint64_t v5 = *(void *)&v2 - 1;
  do
  {
    int32x2_t v6 = *v3++;
    int32x2_t v7 = v6;
    int32x2_t v8 = *v4++;
    int32x2_t v9 = vceq_s32(v7, v8);
    BOOL v11 = v5-- != 0;
  }
  while ((v9.i8[0] & v9.i8[4] & 1) != 0 && v11);
  return v9.i8[0] & v9.i8[4] & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2 = a1[2];
  if (*(void *)&v2 != *(void *)&a2[2]) {
    return 0;
  }
  if (!*(void *)&v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 4;
  unint64_t v4 = a2 + 4;
  uint64_t v5 = *(void *)&v2 - 1;
  do
  {
    float32x2_t v6 = *v3++;
    float32x2_t v7 = v6;
    float32x2_t v8 = *v4++;
    int32x2_t v9 = vceq_f32(v7, v8);
    BOOL v11 = v5-- != 0;
  }
  while ((v9.i8[0] & v9.i8[4] & 1) != 0 && v11);
  return v9.i8[0] & v9.i8[4] & 1;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v28) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)MEMORY[0x24C523D60](0, v3))
  {
    BOOL v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)MEMORY[0x24C523D60](0, a2);
LABEL_22:
    int8x16_t v13 = v12;
    type metadata accessor for CGColorRef(0);
    _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    char v14 = static _CFObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v29 = v7;
      uint64_t v16 = 0;
      uint64_t v7 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v17 = (id)MEMORY[0x24C523D60](v16 + 1, v3);
        }
        else {
          id v17 = *(id *)(v3 + 40 + 8 * v16);
        }
        uint64_t v18 = v17;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v19 = (id)MEMORY[0x24C523D60](v16 + 1, a2);
        }
        else
        {
          if (v5 >= *(void *)(v29 + 16)) {
            goto LABEL_54;
          }
          id v19 = *(id *)(a2 + 40 + 8 * v16);
        }
        uint64_t v20 = v19;
        unint64_t v5 = static _CFObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v7 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v22 = *(void *)(v7 + 16);
      if (v22 <= 1) {
        unint64_t v22 = 1;
      }
      unint64_t v23 = v22 - 1;
      unint64_t v24 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v23) {
          goto LABEL_53;
        }
        char v26 = *v24++;
        int v25 = v26;
        uint64_t v27 = *(void **)v7;
        v7 += 8;
        a2 = v25;
        uint64_t v3 = v27;
        unint64_t v5 = static _CFObject.== infix(_:_:)();

        if (v5)
        {
          --v23;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for NSNumber);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for CAMediaTimingFunction);
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  unint64_t v6 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 == v28) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v7) = 0;
    return (id)(v7 & 1);
  }
  if (v7 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v7) {
    goto LABEL_38;
  }
  uint64_t v8 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v5 < 0) {
    uint64_t v8 = v5;
  }
  if (!v6) {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v11;
  }
  if (v8 == v10)
  {
LABEL_38:
    LOBYTE(v7) = 1;
    return (id)(v7 & 1);
  }
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v29 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v5 + 32); ; id result = (id)MEMORY[0x24C523D60](0, v5))
  {
    int8x16_t v13 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v14 = (id)MEMORY[0x24C523D60](0, a2);
LABEL_22:
    unint64_t v15 = v14;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)a3);
    a3 = static NSObject.== infix(_:_:)();

    if ((a3 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v16 = v7 - 1;
    if (v7 == 1) {
      return (id)(v7 & 1);
    }
    if (((a2 | v5) & 0xC000000000000001) != 0)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v7 - 2;
      while (v16 != v17)
      {
        unint64_t v7 = v17 + 1;
        if (v29) {
          id v19 = (id)MEMORY[0x24C523D60](v17 + 1, v5);
        }
        else {
          id v19 = *(id *)(v5 + 40 + 8 * v17);
        }
        a3 = (uint64_t)v19;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)MEMORY[0x24C523D60](v17 + 1, a2);
        }
        else
        {
          if (v7 >= *(void *)(v9 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v17);
        }
        uint64_t v21 = v20;
        unint64_t v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) != 0 && v18 != v17++) {
          continue;
        }
        return (id)(v7 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v9 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      a3 = v23 - 1;
      unint64_t v24 = (void **)(v5 + 40);
      uint64_t v9 = a2 + 40;
      while (v16)
      {
        if (!a3) {
          goto LABEL_53;
        }
        char v26 = *v24++;
        int v25 = v26;
        uint64_t v27 = *(void **)v9;
        v9 += 8;
        a2 = v25;
        uint64_t v5 = v27;
        unint64_t v7 = static NSObject.== infix(_:_:)();

        if (v7)
        {
          --a3;
          if (--v16) {
            continue;
          }
        }
        return (id)(v7 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v9 + 16))
  {
    id v14 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || (void *)result == a2) {
    return 1;
  }
  uint64_t v3 = *(void *)(result + 32);
  uint64_t v4 = a2[4];
  if (__OFSUB__(v4, v3))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 != v3) {
    return 0;
  }
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = a2[5];
  if (!__OFSUB__(v6, v5))
  {
    if (v6 == v5)
    {
      uint64_t v7 = v2 - 1;
      if (!v7) {
        return 1;
      }
      uint64_t v8 = a2 + 7;
      uint64_t v9 = (void *)(result + 56);
      id result = 1;
      while (1)
      {
        uint64_t v10 = *(v9 - 1);
        uint64_t v11 = *(v8 - 1);
        if (__OFSUB__(v11, v10)) {
          break;
        }
        if (v11 != v10) {
          return 0;
        }
        if (__OFSUB__(*v8, *v9)) {
          goto LABEL_19;
        }
        if (*v8 != *v9) {
          return 0;
        }
        v8 += 2;
        v9 += 2;
        if (!--v7) {
          return result;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    return 0;
  }
LABEL_21:
  __break(1u);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  uint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v4 = a3 & 1;
  if ((a3 & 1) == 0)
  {
    v6[0] = a1;
    v6[1] = a2;
    closure #1 in ResolvedGradient.Stop.encode(to:)((float *)v6, a4);
  }
  return v4;
}

uint64_t Gradient.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(a2, v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  char v9 = static ResolvedGradient.ColorSpace.default;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = v9;
  return result;
}

uint64_t Gradient.fallbackColor.getter(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

BOOL ResolvedGradient.isClear.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = (float *)(*(void *)v0 + 44);
    uint64_t v3 = 1;
    BOOL v4 = 1;
    do
    {
      if (v4)
      {
        BOOL result = *v2 == 0.0;
        BOOL v4 = *v2 == 0.0;
        if (v1 == v3) {
          return result;
        }
      }
      else
      {
        BOOL result = 0;
        BOOL v4 = 0;
        if (v1 == v3) {
          return result;
        }
      }
      v2 += 12;
    }
    while (!__OFADD__(v3++, 1));
    __break(1u);
  }
  return 1;
}

BOOL ResolvedGradient.isOpaque.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = (float *)(*(void *)v0 + 44);
    uint64_t v3 = 1;
    BOOL v4 = 1;
    do
    {
      if (v4)
      {
        BOOL v4 = *v2 == 1.0;
        BOOL result = v4;
        if (v1 == v3) {
          return result;
        }
      }
      else
      {
        BOOL v4 = 0;
        BOOL result = 0;
        if (v1 == v3) {
          return result;
        }
      }
      v2 += 12;
    }
    while (!__OFADD__(v3++, 1));
    __break(1u);
  }
  return 0;
}

uint64_t ResolvedGradient.animatableData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v5) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v9 = v3;
    char v10 = v4;
    swift_bridgeObjectRetain();
    v13.stops._rawValue = &v9;
    uint64_t result = (unint64_t)ResolvedGradientVector.init(_:)(v13);
    uint64_t v8 = v11;
    char v7 = v12;
    goto LABEL_10;
  }
  uint64_t result = dyld_program_sdk_at_least();
  if (result) {
    goto LABEL_9;
  }
LABEL_7:
  char v7 = 0;
  uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_10:
  *(void *)a1 = v8;
  *(unsigned char *)(a1 + 8) = v7;
  return result;
}

uint64_t ResolvedGradient.animatableData.setter(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  char v29 = *((unsigned char *)a1 + 8);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v4 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      return swift_bridgeObjectRelease();
    }
  }
  else if (static Semantics.forced < v4)
  {
    return swift_bridgeObjectRelease();
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v6 + 16));
  }
  else
  {
    *uint64_t v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v6 + 24) >> 1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, (uint64_t)&type metadata for ResolvedGradient.Stop);
    swift_bridgeObjectRelease();
  }
  unint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = (void *)*v2;
  uint64_t v9 = (void *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v8;
  if (!v9 || v7 > v8[3] >> 1)
  {
    if (v8[2] <= v7) {
      int64_t v10 = v7;
    }
    else {
      int64_t v10 = v8[2];
    }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9, v10, 0, v8);
  }
  *uint64_t v2 = v8;
  uint64_t v11 = *(void *)(v3 + 16);
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  char v12 = (unsigned char *)(v3 + 72);
  do
  {
    uint64_t v13 = *((void *)v12 - 3);
    uint64_t v14 = *((void *)v12 - 2);
    uint64_t v15 = *((void *)v12 - 1);
    char v16 = *v12;
    char v31 = v29;
    long long v30 = *(_OWORD *)(v12 - 40);
    float v17 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)&v30);
    int v19 = v18;
    int v21 = v20;
    int v23 = v22;
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v8;
    if ((v24 & 1) == 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      *uint64_t v2 = v8;
    }
    unint64_t v26 = v8[2];
    unint64_t v25 = v8[3];
    if (v26 >= v25 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v8);
    }
    void v8[2] = v26 + 1;
    uint64_t v27 = (float *)&v8[6 * v26];
    v27[8] = v17;
    *((_DWORD *)v27 + 9) = v19;
    *((_DWORD *)v27 + 10) = v21;
    *((_DWORD *)v27 + 11) = v23;
    *((void *)v27 + 6) = v13;
    *((void *)v27 + 7) = v14;
    *((void *)v27 + 8) = v15;
    *((unsigned char *)v27 + 72) = v16;
    *uint64_t v2 = v8;
    v12 += 48;
    --v11;
  }
  while (v11);
  return swift_bridgeObjectRelease_n();
}

SwiftUI::ResolvedGradient __swiftcall ResolvedGradient.init()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for default != -1) {
    uint64_t v3 = (void *)swift_once();
  }
  char v2 = static ResolvedGradient.ColorSpace.default;
  *(void *)uint64_t v1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(v1 + 8) = v2;
  result.stops._rawValue = v3;
  result.colorSpace = v4;
  return result;
}

uint64_t protocol witness for GradientProvider.resolve(in:) in conformance Gradient@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(v4, v5, v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  char v9 = static ResolvedGradient.ColorSpace.default;
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v9;
  return result;
}

uint64_t Gradient.constantColor.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 == 1) {
    return swift_retain();
  }
  if (!v1)
  {
    if (one-time initialization token for clear != -1) {
      swift_once();
    }
    return swift_retain();
  }
  return 0;
}

uint64_t Gradient.Stop.color.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Gradient.Stop.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Gradient.Stop.location.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*Gradient.Stop.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Gradient.Stop.resolve(in:)(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  long long v9 = *a1;
  *(float *)a3 = (*(float (**)(long long *))(*(void *)a2 + 104))(&v9);
  *(_DWORD *)(a3 + 4) = v6;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v8;
  *(double *)(a3 + 16) = a4;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 1;
}

BOOL static Gradient.Stop.== infix(_:_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return (a1 == a2 || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a2) & 1) != 0) && a3 == a4;
}

uint64_t Gradient.stops.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Gradient.stops.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ResolvedGradient __swiftcall ResolvedGradient.init(stops:colorSpace:)(Swift::OpaquePointer stops, SwiftUI::ResolvedGradient::ColorSpace colorSpace)
{
  char v3 = *(unsigned char *)colorSpace;
  *(Swift::OpaquePointer *)uint64_t v2 = stops;
  *(unsigned char *)(v2 + 8) = v3;
  result.stops = stops;
  result.colorSpace = colorSpace;
  return result;
}

void Gradient.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      Swift::UInt64 v6 = *v5;
      int v7 = *(void (**)(uint64_t))(*(void *)*(v5 - 1) + 136);
      swift_retain();
      v7(a1);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v8 = v6;
      }
      else {
        Swift::UInt64 v8 = 0;
      }
      Hasher._combine(_:)(v8);
      swift_release();
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

Swift::Int Gradient.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, a1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Gradient()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Gradient(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Gradient()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void Gradient.Stop.hash(into:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = *(void (**)(uint64_t))(*(void *)a2 + 136);
  swift_retain();
  v5(a1);
  swift_release();
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
}

Swift::Int Gradient.Stop.hashValue.getter(uint64_t a1, double a2)
{
  Hasher.init(_seed:)();
  Swift::UInt v4 = *(void (**)(unsigned char *))(*(void *)a1 + 136);
  swift_retain();
  v4(v7);
  swift_release();
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Gradient.Stop()
{
  return Gradient.Stop.hashValue.getter(*(void *)v0, *(double *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance Gradient.Stop(uint64_t a1)
{
  Swift::UInt64 v3 = v1[1];
  Swift::UInt v4 = *(void (**)(uint64_t))(*(void *)*v1 + 136);
  swift_retain();
  v4(a1);
  swift_release();
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v3;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Gradient.Stop()
{
  uint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Swift::UInt64 v3 = *(void (**)(unsigned char *))(*(void *)v1 + 136);
  swift_retain();
  v3(v6);
  swift_release();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t Gradient._apply(to:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  specialized Paint._apply(to:)(a1);

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance Gradient(uint64_t a1)
{
  swift_bridgeObjectRetain();
  specialized Paint._apply(to:)(a1);

  return swift_bridgeObjectRelease();
}

uint64_t Gradient.reversed.getter(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    Swift::UInt64 v4 = (double *)(a1 + 16 * v1 + 24);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      double v6 = *v4;
      unint64_t v7 = *(void *)(v11 + 16);
      unint64_t v8 = *(void *)(v11 + 24);
      swift_retain();
      if (v7 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v7 + 1, 1);
      }
      *(void *)(v11 + 16) = v7 + 1;
      unint64_t v9 = v11 + 16 * v7;
      *(void *)(v9 + 32) = v5;
      *(double *)(v9 + 40) = 1.0 - v6;
      v4 -= 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }

  return specialized Gradient.init(stops:)(v2);
}

float ResolvedGradient.Stop.color.getter()
{
  return *(float *)v0;
}

void ResolvedGradient.Stop.color.setter(float a1, float a2, float a3, float a4)
{
  float *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  _OWORD v4[3] = a4;
}

uint64_t (*ResolvedGradient.Stop.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ResolvedGradient.Stop.location.getter()
{
  return *(double *)(v0 + 16);
}

void ResolvedGradient.Stop.location.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*ResolvedGradient.Stop.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 ResolvedGradient.Stop.interpolation.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ResolvedGradient.Stop.interpolation.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  *(unsigned char *)(v1 + 40) = v2;
  return result;
}

uint64_t (*ResolvedGradient.Stop.interpolation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static ResolvedGradient.Stop.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static ResolvedGradient.Stop.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResolvedGradient.Stop(uint64_t a1, uint64_t a2)
{
  return specialized static ResolvedGradient.Stop.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static ResolvedGradient.ColorSpace.default.getter@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ResolvedGradient.ColorSpace.default;
  return result;
}

SwiftUI::ResolvedGradient::ColorSpace_optional __swiftcall ResolvedGradient.ColorSpace.init(rawValue:)(SwiftUI::ResolvedGradient::ColorSpace_optional rawValue)
{
  SwiftUI::ResolvedGradient::ColorSpace value = rawValue.value;
  if (rawValue.value >= SwiftUI_ResolvedGradient_ColorSpace_unknownDefault) {
    SwiftUI::ResolvedGradient::ColorSpace value = SwiftUI_ResolvedGradient_ColorSpace_unknownDefault;
  }
  *uint64_t v1 = value;
  return rawValue;
}

uint64_t ResolvedGradient.ColorSpace.rawValue.getter()
{
  return *v0;
}

SwiftUI::ResolvedGradient::ColorSpace_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ResolvedGradient.ColorSpace(Swift::UInt8 *a1)
{
  return ResolvedGradient.ColorSpace.init(rawValue:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvedGradient.ColorSpace()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvedGradient.ColorSpace()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t ResolvedGradient.stops.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResolvedGradient.stops.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ResolvedGradient.stops.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ResolvedGradient.colorSpace.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *ResolvedGradient.colorSpace.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ResolvedGradient.colorSpace.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvedGradient.hasInterpolations.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    char v2 = 0;
    Swift::UInt64 v3 = (unsigned char *)(*(void *)v0 + 72);
    do
    {
      if (v2) {
        char v2 = 1;
      }
      else {
        char v2 = *v3 ^ 1;
      }
      v3 += 48;
      --v1;
    }
    while (v1);
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t ResolvedGradient.interpolationsCount.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  for (uint64_t i = (unsigned char *)(*(void *)v0 + 72); ; i += 48)
  {
    uint64_t v4 = (*i & 1) == 0;
    BOOL v5 = __OFADD__(result, v4);
    result += v4;
    if (v5) {
      break;
    }
    if (!--v1) {
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ResolvedGradient.multiplyOpacity(by:)(Swift::Float by)
{
  char v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_17:
    }
      char v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unint64_t v5 = v2[2];
    unint64_t v6 = v3 - 1;
    if (v5 < v3 - 1) {
      unint64_t v6 = v2[2];
    }
    if (v6 >= 2)
    {
      unint64_t v8 = v6 + 1;
      uint64_t v9 = v8 & 1;
      if ((v8 & 1) == 0) {
        uint64_t v9 = 2;
      }
      unint64_t v7 = v8 - v9;
      int64_t v10 = (float *)v2 + 23;
      unint64_t v11 = v7;
      do
      {
        float v12 = *v10 * by;
        *(v10 - 12) = *(v10 - 12) * by;
        *int64_t v10 = v12;
        v10 += 24;
        v11 -= 2;
      }
      while (v11);
    }
    else
    {
      unint64_t v7 = 0;
    }
    uint64_t v13 = 48 * v7 + 44;
    do
    {
      if (v7 >= v5)
      {
        __break(1u);
        goto LABEL_17;
      }
      ++v7;
      *(float *)((char *)v2 + v13) = *(float *)((char *)v2 + v13) * by;
      v13 += 48;
    }
    while (v3 != v7);
    *(void *)uint64_t v1 = v2;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResolvedGradient(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & (v2 == v3);
}

void ResolvedGradient.encode(to:)(void *a1)
{
  int v2 = v1;
  Swift::UInt v4 = v2[8];
  uint64_t v5 = *(void *)(*(void *)v2 + 16);
  if (!v5)
  {
LABEL_165:
    if (v4)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v4);
    }
    return;
  }
  Swift::UInt v97 = v2[8];
  uint64_t v6 = swift_bridgeObjectRetain() + 36;
  while (1)
  {
    float v8 = *(float *)(v6 - 4);
    float v7 = *(float *)v6;
    float v10 = *(float *)(v6 + 4);
    float v9 = *(float *)(v6 + 8);
    double v11 = *(double *)(v6 + 12);
    uint64_t v12 = *(void *)(v6 + 20);
    uint64_t v98 = *(void *)(v6 + 28);
    char v13 = *(unsigned char *)(v6 + 36);
    int64_t v14 = a1[1];
    int64_t v15 = a1[2];
    if (v14 >= v15)
    {
      int64_t v75 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_181;
      }
      if (v15 < v75)
      {
        uint64_t v76 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v75);
      }
      else
      {
        a1[1] = v75;
        uint64_t v76 = (unsigned char *)(*a1 + v14);
      }
      *uint64_t v76 = 10;
      int64_t v16 = a1[1];
    }
    else
    {
      *(unsigned char *)(*a1 + v14) = 10;
      int64_t v16 = v14 + 1;
      a1[1] = v14 + 1;
    }
    float v17 = (void *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v19 = v17[2];
    unint64_t v18 = v17[3];
    if (v19 >= v18 >> 1) {
      float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
    }
    void v17[2] = v19 + 1;
    v17[v19 + 4] = v16;
    a1[3] = v17;
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    a1[1] = v20;
    int64_t v21 = a1[2];
    if (v20 >= v21)
    {
      int64_t v77 = v16 + 2;
      if (__OFADD__(v20, 1)) {
        goto LABEL_182;
      }
      if (v21 < v77)
      {
        uint64_t v78 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v77);
      }
      else
      {
        a1[1] = v77;
        uint64_t v78 = (unsigned char *)(*a1 + v20);
      }
      *uint64_t v78 = 10;
      uint64_t v22 = a1[1];
    }
    else
    {
      *(unsigned char *)(*a1 + v20) = 10;
      uint64_t v22 = v16 + 2;
      a1[1] = v20 + 1;
    }
    int v23 = (void *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    }
    unint64_t v25 = v23[2];
    unint64_t v24 = v23[3];
    if (v25 >= v24 >> 1) {
      int v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
    }
    v23[2] = v25 + 1;
    v23[v25 + 4] = v22;
    a1[3] = v23;
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_169;
    }
    a1[1] = v26;
    if (v8 == 0.0)
    {
      if (v7 == 0.0) {
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v27 = a1[2];
      if (v26 >= v27)
      {
        int64_t v81 = v22 + 2;
        if (__OFADD__(v26, 1)) {
          goto LABEL_184;
        }
        if (v27 < v81)
        {
          CGRect v82 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v81);
        }
        else
        {
          a1[1] = v81;
          CGRect v82 = (unsigned char *)(*a1 + v26);
        }
        *CGRect v82 = 13;
        uint64_t v28 = a1[1];
        int64_t v29 = v28 + 4;
        if (__OFADD__(v28, 4)) {
          goto LABEL_171;
        }
      }
      else
      {
        *(unsigned char *)(*a1 + v26) = 13;
        uint64_t v28 = v22 + 2;
        a1[1] = v22 + 2;
        int64_t v29 = v22 + 6;
        if (__OFADD__(v22 + 2, 4)) {
          goto LABEL_171;
        }
      }
      if (a1[2] < v29)
      {
        long long v30 = (float *)ProtobufEncoder.growBufferSlow(to:)(v29);
      }
      else
      {
        a1[1] = v29;
        long long v30 = (float *)(*a1 + v28);
      }
      *long long v30 = v8;
      if (v7 == 0.0)
      {
LABEL_22:
        if (v10 == 0.0) {
          goto LABEL_23;
        }
        goto LABEL_35;
      }
    }
    int64_t v31 = a1[1];
    int64_t v32 = a1[2];
    if (v31 >= v32)
    {
      int64_t v83 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        goto LABEL_185;
      }
      if (v32 < v83)
      {
        uint64_t v84 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v83);
      }
      else
      {
        a1[1] = v83;
        uint64_t v84 = (unsigned char *)(*a1 + v31);
      }
      *uint64_t v84 = 21;
      int64_t v33 = a1[1];
      int64_t v34 = v33 + 4;
      if (__OFADD__(v33, 4)) {
        goto LABEL_172;
      }
    }
    else
    {
      *(unsigned char *)(*a1 + v31) = 21;
      int64_t v33 = v31 + 1;
      a1[1] = v33;
      int64_t v34 = v33 + 4;
      if (__OFADD__(v33, 4)) {
        goto LABEL_172;
      }
    }
    if (a1[2] < v34)
    {
      uint64_t v35 = (float *)ProtobufEncoder.growBufferSlow(to:)(v34);
    }
    else
    {
      a1[1] = v34;
      uint64_t v35 = (float *)(*a1 + v33);
    }
    *uint64_t v35 = v7;
    if (v10 == 0.0)
    {
LABEL_23:
      if (v9 == 1.0) {
        goto LABEL_45;
      }
LABEL_40:
      int64_t v41 = a1[1];
      int64_t v42 = a1[2];
      if (v41 >= v42)
      {
        int64_t v87 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          goto LABEL_187;
        }
        if (v42 < v87)
        {
          uint64_t v88 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v87);
        }
        else
        {
          a1[1] = v87;
          uint64_t v88 = (unsigned char *)(*a1 + v41);
        }
        unsigned char *v88 = 37;
        int64_t v43 = a1[1];
        int64_t v44 = v43 + 4;
        if (__OFADD__(v43, 4)) {
          goto LABEL_174;
        }
      }
      else
      {
        *(unsigned char *)(*a1 + v41) = 37;
        int64_t v43 = v41 + 1;
        a1[1] = v43;
        int64_t v44 = v43 + 4;
        if (__OFADD__(v43, 4)) {
          goto LABEL_174;
        }
      }
      if (a1[2] < v44)
      {
        uint64_t v45 = (float *)ProtobufEncoder.growBufferSlow(to:)(v44);
      }
      else
      {
        a1[1] = v44;
        uint64_t v45 = (float *)(*a1 + v43);
      }
      *uint64_t v45 = v9;
      goto LABEL_45;
    }
LABEL_35:
    int64_t v36 = a1[1];
    int64_t v37 = a1[2];
    if (v36 >= v37)
    {
      int64_t v85 = v36 + 1;
      if (__OFADD__(v36, 1)) {
        goto LABEL_186;
      }
      if (v37 < v85)
      {
        uint64_t v86 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v85);
      }
      else
      {
        a1[1] = v85;
        uint64_t v86 = (unsigned char *)(*a1 + v36);
      }
      *uint64_t v86 = 29;
      int64_t v38 = a1[1];
      int64_t v39 = v38 + 4;
      if (__OFADD__(v38, 4)) {
        goto LABEL_173;
      }
    }
    else
    {
      *(unsigned char *)(*a1 + v36) = 29;
      int64_t v38 = v36 + 1;
      a1[1] = v38;
      int64_t v39 = v38 + 4;
      if (__OFADD__(v38, 4)) {
        goto LABEL_173;
      }
    }
    if (a1[2] < v39)
    {
      unint64_t v40 = (float *)ProtobufEncoder.growBufferSlow(to:)(v39);
    }
    else
    {
      a1[1] = v39;
      unint64_t v40 = (float *)(*a1 + v38);
    }
    *unint64_t v40 = v10;
    if (v9 != 1.0) {
      goto LABEL_40;
    }
LABEL_45:
    ProtobufEncoder.endLengthDelimited()();
    if (v11 != 0.0)
    {
      double v46 = fabs(v11);
      if (v46 >= 65536.0) {
        Swift::UInt v47 = 17;
      }
      else {
        Swift::UInt v47 = 21;
      }
      ProtobufEncoder.encodeVarint(_:)(v47);
      if (v46 >= 65536.0)
      {
        uint64_t v51 = a1[1];
        int64_t v52 = v51 + 8;
        if (__OFADD__(v51, 8)) {
          goto LABEL_178;
        }
        if (a1[2] < v52)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v52) = v11;
        }
        else
        {
          a1[1] = v52;
          *(double *)(*a1 + v51) = v11;
        }
      }
      else
      {
        uint64_t v48 = a1[1];
        int64_t v49 = v48 + 4;
        if (__OFADD__(v48, 4)) {
          goto LABEL_177;
        }
        float v50 = v11;
        if (a1[2] < v49)
        {
          *(float *)ProtobufEncoder.growBufferSlow(to:)(v49) = v50;
        }
        else
        {
          a1[1] = v49;
          *(float *)(*a1 + v48) = v50;
        }
      }
    }
    if ((v13 & 1) == 0)
    {
      int64_t v53 = a1[1];
      int64_t v54 = a1[2];
      if (v53 >= v54)
      {
        int64_t v79 = v53 + 1;
        if (__OFADD__(v53, 1)) {
          goto LABEL_183;
        }
        if (v54 < v79)
        {
          unsigned int v80 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v79);
        }
        else
        {
          a1[1] = v79;
          unsigned int v80 = (unsigned char *)(*a1 + v53);
        }
        *unsigned int v80 = 26;
        int64_t v55 = a1[1];
      }
      else
      {
        *(unsigned char *)(*a1 + v53) = 26;
        int64_t v55 = v53 + 1;
        a1[1] = v53 + 1;
      }
      uint64_t v56 = (void *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
      }
      unint64_t v58 = v56[2];
      unint64_t v57 = v56[3];
      if (v58 >= v57 >> 1) {
        uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v58 + 1, 1, v56);
      }
      v56[2] = v58 + 1;
      v56[v58 + 4] = v55;
      a1[3] = v56;
      int64_t v59 = v55 + 1;
      if (__OFADD__(v55, 1)) {
        goto LABEL_170;
      }
      a1[1] = v59;
      if ((v12 & 0x7FFFFFFF) != 0)
      {
        int64_t v60 = a1[2];
        if (v59 >= v60)
        {
          int64_t v89 = v55 + 2;
          if (__OFADD__(v59, 1)) {
            goto LABEL_188;
          }
          if (v60 < v89)
          {
            uint64_t v90 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v89);
          }
          else
          {
            a1[1] = v89;
            uint64_t v90 = (unsigned char *)(*a1 + v59);
          }
          *uint64_t v90 = 13;
          uint64_t v61 = a1[1];
          int64_t v62 = v61 + 4;
          if (__OFADD__(v61, 4)) {
            goto LABEL_175;
          }
        }
        else
        {
          *(unsigned char *)(*a1 + v59) = 13;
          uint64_t v61 = v55 + 2;
          a1[1] = v55 + 2;
          int64_t v62 = v55 + 6;
          if (__OFADD__(v55 + 2, 4)) {
            goto LABEL_175;
          }
        }
        if (a1[2] < v62)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v62) = v12;
        }
        else
        {
          a1[1] = v62;
          *(_DWORD *)(*a1 + v61) = v12;
        }
      }
      if ((v12 & 0x7FFFFFFF00000000) != 0)
      {
        int64_t v63 = a1[1];
        int64_t v64 = a1[2];
        if (v63 >= v64)
        {
          int64_t v91 = v63 + 1;
          if (__OFADD__(v63, 1)) {
            goto LABEL_189;
          }
          if (v64 < v91)
          {
            uint64_t v92 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v91);
          }
          else
          {
            a1[1] = v91;
            uint64_t v92 = (unsigned char *)(*a1 + v63);
          }
          *uint64_t v92 = 21;
          int64_t v65 = a1[1];
          int64_t v66 = v65 + 4;
          if (__OFADD__(v65, 4)) {
            goto LABEL_176;
          }
        }
        else
        {
          *(unsigned char *)(*a1 + v63) = 21;
          int64_t v65 = v63 + 1;
          a1[1] = v65;
          int64_t v66 = v65 + 4;
          if (__OFADD__(v65, 4)) {
            goto LABEL_176;
          }
        }
        if (a1[2] < v66)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v66) = HIDWORD(v12);
        }
        else
        {
          a1[1] = v66;
          *(_DWORD *)(*a1 + v65) = HIDWORD(v12);
        }
      }
      if (*(float *)&v98 != 1.0)
      {
        int64_t v67 = a1[1];
        int64_t v68 = a1[2];
        if (v67 >= v68)
        {
          int64_t v93 = v67 + 1;
          if (__OFADD__(v67, 1)) {
            goto LABEL_190;
          }
          if (v68 < v93)
          {
            uint64_t v94 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v93);
          }
          else
          {
            a1[1] = v93;
            uint64_t v94 = (unsigned char *)(*a1 + v67);
          }
          *uint64_t v94 = 29;
          int64_t v69 = a1[1];
          int64_t v70 = v69 + 4;
          if (__OFADD__(v69, 4)) {
            goto LABEL_179;
          }
        }
        else
        {
          *(unsigned char *)(*a1 + v67) = 29;
          int64_t v69 = v67 + 1;
          a1[1] = v69;
          int64_t v70 = v69 + 4;
          if (__OFADD__(v69, 4)) {
            goto LABEL_179;
          }
        }
        if (a1[2] < v70)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v70) = v98;
        }
        else
        {
          a1[1] = v70;
          *(_DWORD *)(*a1 + v69) = v98;
        }
      }
      if (*((float *)&v98 + 1) != 1.0)
      {
        int64_t v71 = a1[1];
        int64_t v72 = a1[2];
        if (v71 >= v72)
        {
          int64_t v95 = v71 + 1;
          if (__OFADD__(v71, 1)) {
            goto LABEL_191;
          }
          if (v72 < v95)
          {
            char v96 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v95);
          }
          else
          {
            a1[1] = v95;
            char v96 = (unsigned char *)(*a1 + v71);
          }
          *char v96 = 37;
          int64_t v73 = a1[1];
          int64_t v74 = v73 + 4;
          if (__OFADD__(v73, 4)) {
            goto LABEL_180;
          }
        }
        else
        {
          *(unsigned char *)(*a1 + v71) = 37;
          int64_t v73 = v71 + 1;
          a1[1] = v73;
          int64_t v74 = v73 + 4;
          if (__OFADD__(v73, 4)) {
            goto LABEL_180;
          }
        }
        if (a1[2] < v74)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v74) = HIDWORD(v98);
        }
        else
        {
          a1[1] = v74;
          *(_DWORD *)(*a1 + v73) = HIDWORD(v98);
        }
      }
      ProtobufEncoder.endLengthDelimited()();
    }
    ProtobufEncoder.endLengthDelimited()();
    v6 += 48;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      Swift::UInt v4 = v97;
      goto LABEL_165;
    }
  }
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
}

unint64_t ResolvedGradient.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v4 = (void *)result;
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  char v5 = static ResolvedGradient.ColorSpace.default;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  float v8 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v6 >= v7)
    {
      _OWORD v4[3] = 0;
      *(void *)a2 = v8;
      *(unsigned char *)(a2 + 8) = v5;
      return result;
    }
    uint64_t result = v4[3];
    if (result)
    {
      unint64_t v10 = v4[4];
      if (v6 < v10) {
        goto LABEL_14;
      }
      if (v10 < v6) {
        goto LABEL_57;
      }
      _OWORD v4[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (result < 8)
    {
LABEL_57:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_14:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_57;
        }
        uint64_t v26 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        if (v26 < 0) {
          goto LABEL_63;
        }
        unint64_t v27 = v4[1] + v26;
        if (v7 < v27) {
          goto LABEL_57;
        }
        _OWORD v4[3] = 16;
        v4[4] = v27;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      if (result == 2) {
        char v28 = 2;
      }
      else {
        char v28 = result == 1;
      }
      if (result <= 0xFF) {
        char v5 = v28;
      }
      else {
        char v5 = 0;
      }
      goto LABEL_6;
    }
    if (result >> 3 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          goto LABEL_6;
        case 1uLL:
          unint64_t v9 = v4[1] + 8;
          if (v7 < v9) {
            goto LABEL_57;
          }
          goto LABEL_5;
        case 2uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_64;
          }
          unint64_t v9 = v4[1] + result;
          if (v7 < v9) {
            goto LABEL_57;
          }
LABEL_5:
          v4[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = v4[1] + 4;
          if (v7 < v9) {
            goto LABEL_57;
          }
          goto LABEL_5;
        default:
          goto LABEL_57;
      }
      goto LABEL_6;
    }
    if ((result & 7) != 2) {
      goto LABEL_57;
    }
    double v11 = (void *)v4[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    }
    unint64_t v13 = v11[2];
    unint64_t v12 = v11[3];
    if (v13 >= v12 >> 1) {
      double v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
    }
    v11[2] = v13 + 1;
    v11[v13 + 4] = v7;
    v4[5] = v11;
    uint64_t v14 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (v14 < 0) {
      break;
    }
    unint64_t v15 = v4[1] + v14;
    if (v7 < v15) {
      goto LABEL_57;
    }
    v4[2] = v15;
    ResolvedGradient.Stop.init(from:)((unint64_t)v4, (uint64_t)&v35);
    int64_t v16 = (void *)v4[5];
    if (!v16[2]) {
      goto LABEL_61;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v17 = v16[2];
      if (!v17) {
        goto LABEL_62;
      }
    }
    else
    {
      int64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      uint64_t v17 = v16[2];
      if (!v17) {
        goto LABEL_62;
      }
    }
    uint64_t v18 = v17 - 1;
    uint64_t v19 = v16[v18 + 4];
    v16[2] = v18;
    v4[5] = v16;
    v4[2] = v19;
    long long v34 = v35;
    uint64_t v20 = v36;
    uint64_t v21 = v37;
    uint64_t v22 = v38;
    char v23 = v39;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      float v8 = (void *)result;
    }
    unint64_t v3 = v8[2];
    unint64_t v24 = v8[3];
    if (v3 >= v24 >> 1)
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v3 + 1, 1, v8);
      float v8 = (void *)result;
    }
    void v8[2] = v3 + 1;
    unint64_t v25 = &v8[6 * v3];
    *((_OWORD *)v25 + 2) = v34;
    v25[6] = v20;
    v25[7] = v21;
    v25[8] = v22;
    *((unsigned char *)v25 + 72) = v23;
LABEL_6:
    unint64_t v6 = v4[1];
    unint64_t v7 = v4[2];
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  __break(1u);
  int64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
  uint64_t v32 = v31[2];
  if (!v32)
  {
    __break(1u);
    JUMPOUT(0x245BAF12CLL);
  }
  uint64_t v29 = v32 - 1;
  uint64_t v30 = v31[v29 + 4];
  _OWORD v31[2] = v29;
  v4[5] = v31;
  v4[2] = v30;
  return swift_bridgeObjectRelease();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ResolvedGradient(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ResolvedGradient@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvedGradient.init(from:)(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvedGradient@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized CodableByProtobuf.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvedGradient(void *a1)
{
  return specialized CodableByProtobuf.encode(to:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t ResolvedGradient.Stop.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  float v5 = *(float *)v3;
  float v6 = *(float *)(v3 + 4);
  float v7 = *(float *)(v3 + 8);
  float v8 = *(float *)(v3 + 12);
  double v9 = *(double *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  uint64_t v11 = *(void *)(v3 + 32);
  char v12 = *(unsigned char *)(v3 + 40);
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t result = specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8);
  if (!v2)
  {
    if (v9 != 0.0)
    {
      double v14 = fabs(v9);
      if (v14 >= 65536.0) {
        Swift::UInt v15 = 17;
      }
      else {
        Swift::UInt v15 = 21;
      }
      ProtobufEncoder.encodeVarint(_:)(v15);
      if (v14 >= 65536.0)
      {
        uint64_t v18 = a1[1];
        int64_t v19 = v18 + 8;
        if (__OFADD__(v18, 8))
        {
          __break(1u);
        }
        else if (a1[2] >= v19)
        {
          a1[1] = v19;
          *(double *)(*a1 + v18) = v9;
          return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(v10, v11, v12, a1);
        }
        *(double *)ProtobufEncoder.growBufferSlow(to:)(v19) = v9;
        return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(v10, v11, v12, a1);
      }
      uint64_t v16 = a1[1];
      int64_t v17 = v16 + 4;
      if (__OFADD__(v16, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v14 = v9;
        if (a1[2] >= v17)
        {
          a1[1] = v17;
          *(_DWORD *)(*a1 + v16) = LODWORD(v14);
          return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(v10, v11, v12, a1);
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17) = LODWORD(v14);
    }
    return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI20BezierTimingFunctionVySfG_s5NeverOytTB503_s7c68UI16ResolvedGradientV4StopV6encode2toyAA15ProtobufEncoderVz_tKFyAA20efG10VySfGXEfU_AD0qR0VTf1cn_n(v10, v11, v12, a1);
  }
  return result;
}

uint64_t closure #1 in ResolvedGradient.Stop.encode(to:)(float *a1, void *a2)
{
  float v4 = *a1;
  float v3 = a1[1];
  float v6 = a1[2];
  float v5 = a1[3];
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  uint64_t v7 = a2[1];
  float v8 = (void *)a2[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a2[3] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    float v8 = (void *)isUniquelyReferenced_nonNull_native;
    a2[3] = isUniquelyReferenced_nonNull_native;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    float v8 = (void *)isUniquelyReferenced_nonNull_native;
  }
  void v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  a2[3] = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    *(float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v4;
    if (v3 == 0.0) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  a2[1] = v7 + 1;
  if (v4 == 0.0) {
    goto LABEL_10;
  }
  ProtobufEncoder.encodeVarint(_:)(0xDuLL);
  uint64_t v12 = a2[1];
  int64_t isUniquelyReferenced_nonNull_native = v12 + 4;
  if (__OFADD__(v12, 4)) {
    goto LABEL_24;
  }
  if (a2[2] < isUniquelyReferenced_nonNull_native) {
    goto LABEL_25;
  }
  a2[1] = isUniquelyReferenced_nonNull_native;
  *(float *)(*a2 + v12) = v4;
LABEL_10:
  if (v3 == 0.0) {
    goto LABEL_14;
  }
LABEL_11:
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  uint64_t v13 = a2[1];
  int64_t v14 = v13 + 4;
  if (__OFADD__(v13, 4))
  {
    __break(1u);
  }
  else if (a2[2] >= v14)
  {
    a2[1] = v14;
    *(float *)(*a2 + v13) = v3;
    goto LABEL_14;
  }
  *(float *)ProtobufEncoder.growBufferSlow(to:)(v14) = v3;
LABEL_14:
  if (v6 == 1.0) {
    goto LABEL_18;
  }
  ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
  uint64_t v15 = a2[1];
  int64_t v16 = v15 + 4;
  if (__OFADD__(v15, 4))
  {
    __break(1u);
LABEL_30:
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v16) = v6;
    if (v5 == 1.0) {
      return ProtobufEncoder.endLengthDelimited()();
    }
LABEL_19:
    ProtobufEncoder.encodeVarint(_:)(0x25uLL);
    uint64_t v17 = a2[1];
    int64_t v18 = v17 + 4;
    if (__OFADD__(v17, 4))
    {
      __break(1u);
    }
    else if (a2[2] >= v18)
    {
      a2[1] = v18;
      *(float *)(*a2 + v17) = v5;
      return ProtobufEncoder.endLengthDelimited()();
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v18) = v5;
    return ProtobufEncoder.endLengthDelimited()();
  }
  if (a2[2] < v16) {
    goto LABEL_30;
  }
  a2[1] = v16;
  *(float *)(*a2 + v15) = v6;
LABEL_18:
  if (v5 != 1.0) {
    goto LABEL_19;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

unint64_t ResolvedGradient.Stop.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  float v3 = (void *)result;
  char v5 = 1;
  char v48 = 1;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  long long v8 = 0uLL;
  int v9 = 0;
  double v10 = 0.0;
  if (v6 < v7)
  {
    int v11 = 0;
    int v12 = 0;
    float v13 = 0.0;
    while (1)
    {
      uint64_t result = v3[3];
      long long v45 = v8;
      if (result)
      {
        unint64_t v15 = v3[4];
        if (v6 < v15) {
          goto LABEL_14;
        }
        if (v15 < v6) {
          goto LABEL_65;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      long long v8 = v45;
      if (result <= 7) {
        goto LABEL_65;
      }
LABEL_14:
      unint64_t v16 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) != 2) {
          goto LABEL_65;
        }
        uint64_t v29 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        }
        unint64_t v31 = v29[2];
        unint64_t v30 = v29[3];
        if (v31 >= v30 >> 1) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
        }
        v29[2] = v31 + 1;
        v29[v31 + 4] = v7;
        v3[5] = v29;
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_73;
        }
        unint64_t v32 = v3[1] + result;
        if (v7 < v32) {
          goto LABEL_65;
        }
        v3[2] = v32;
        closure #1 in ResolvedGradient.Stop.init(from:)((unint64_t)v3, (uint64_t)&v46);
        int64_t v33 = (void *)v3[5];
        if (!v33[2]) {
          goto LABEL_75;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v34 = v33[2];
          if (!v34) {
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
          int64_t v33 = (void *)result;
          uint64_t v34 = *(void *)(result + 16);
          if (!v34)
          {
LABEL_64:
            __break(1u);
LABEL_65:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
        }
        uint64_t v35 = v34 - 1;
        uint64_t v36 = v33[v35 + 4];
        _OWORD v33[2] = v35;
        v3[5] = v33;
        v3[2] = v36;
        long long v8 = v46;
        char v48 = v47;
      }
      else if (v16 == 2)
      {
        unint64_t v37 = result & 7;
        if (v37 == 5)
        {
          char v39 = (float *)v3[1];
          if (v7 < (unint64_t)(v39 + 1)) {
            goto LABEL_65;
          }
          float v40 = *v39;
          v3[1] = v39 + 1;
          double v10 = v40;
          long long v8 = v45;
        }
        else
        {
          if (v37 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            long long v8 = v45;
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_77;
            }
            uint64_t v38 = (double *)v3[1];
            if (v7 < (unint64_t)v38 + result) {
              goto LABEL_65;
            }
            v3[3] = 17;
            v3[4] = (char *)v38 + result;
          }
          else
          {
            if (v37 != 1) {
              goto LABEL_65;
            }
            uint64_t v38 = (double *)v3[1];
          }
          if (v7 < (unint64_t)(v38 + 1)) {
            goto LABEL_65;
          }
          double v10 = *v38;
          v3[1] = v38 + 1;
        }
      }
      else if (v16 == 1)
      {
        if ((result & 7) != 2) {
          goto LABEL_65;
        }
        uint64_t v17 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        }
        unint64_t v19 = v17[2];
        unint64_t v18 = v17[3];
        if (v19 >= v18 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
        }
        void v17[2] = v19 + 1;
        v17[v19 + 4] = v7;
        v3[5] = v17;
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          __break(1u);
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
          int64_t v41 = (void *)result;
          uint64_t v42 = *(void *)(result + 16);
          if (!v42)
          {
            __break(1u);
            int64_t v41 = (void *)v3[5];
            if (v41[2])
            {
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if (result)
              {
                uint64_t v42 = v41[2];
                if (v42) {
                  goto LABEL_71;
                }
LABEL_82:
                __break(1u);
                JUMPOUT(0x245BAFA8CLL);
              }
            }
            else
            {
              __break(1u);
            }
            uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v41);
            int64_t v41 = (void *)result;
            uint64_t v42 = *(void *)(result + 16);
            if (!v42) {
              goto LABEL_82;
            }
          }
LABEL_71:
          uint64_t v43 = v42 - 1;
          uint64_t v44 = v41[v43 + 4];
          v41[2] = v43;
          v3[5] = v41;
          v3[2] = v44;
          return result;
        }
        unint64_t v20 = v3[1] + result;
        if (v7 < v20) {
          goto LABEL_65;
        }
        v3[2] = v20;
        float v21 = specialized Color.Resolved.init(from:)(v3);
        unint64_t v25 = (void *)v3[5];
        if (!v25[2]) {
          goto LABEL_74;
        }
        float v13 = v21;
        int v12 = v22;
        int v11 = v23;
        int v9 = v24;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
          unint64_t v25 = (void *)result;
        }
        uint64_t v26 = v25[2];
        long long v8 = v45;
        if (!v26) {
          goto LABEL_76;
        }
        uint64_t v27 = v26 - 1;
        uint64_t v28 = v25[v27 + 4];
        v25[2] = v27;
        v3[5] = v25;
        v3[2] = v28;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            long long v8 = v45;
            break;
          case 1uLL:
            unint64_t v14 = v3[1] + 8;
            if (v7 < v14) {
              goto LABEL_65;
            }
            goto LABEL_6;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            long long v8 = v45;
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_78;
            }
            unint64_t v14 = v3[1] + result;
            if (v7 < v14) {
              goto LABEL_65;
            }
LABEL_6:
            v3[1] = v14;
            break;
          case 5uLL:
            unint64_t v14 = v3[1] + 4;
            if (v7 >= v14) {
              goto LABEL_6;
            }
            goto LABEL_65;
          default:
            goto LABEL_65;
        }
      }
      unint64_t v6 = v3[1];
      unint64_t v7 = v3[2];
      if (v6 >= v7)
      {
        char v5 = v48;
        goto LABEL_4;
      }
    }
  }
  int v11 = 0;
  int v12 = 0;
  float v13 = 0.0;
LABEL_4:
  v3[3] = 0;
  *(float *)a2 = v13;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v9;
  *(double *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 40) = v5;
  return result;
}

unint64_t closure #1 in ResolvedGradient.Stop.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  float v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 1065353216;
    unsigned int v10 = 1065353216;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v11 = v3[4];
        if (v5 < v11) {
          goto LABEL_9;
        }
        if (v11 < v5) {
          goto LABEL_60;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_60:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_9:
      switch(result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              JUMPOUT(0x245BAFDE4);
            }
            int v12 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v12 + result) {
              goto LABEL_60;
            }
            v3[3] = 13;
            v3[4] = (char *)v12 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_60;
            }
            int v12 = (unsigned int *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v12 + 1);
          if (v6 < (unint64_t)(v12 + 1)) {
            goto LABEL_60;
          }
          unsigned int v8 = *v12;
          break;
        case 2uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_63;
            }
            float v13 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v13 + result) {
              goto LABEL_60;
            }
            v3[3] = 21;
            v3[4] = (char *)v13 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_60;
            }
            float v13 = (unsigned int *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v13 + 1);
          if (v6 < (unint64_t)(v13 + 1)) {
            goto LABEL_60;
          }
          uint64_t v7 = *v13;
          break;
        case 3uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_64;
            }
            unint64_t v14 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v14 + result) {
              goto LABEL_60;
            }
            v3[3] = 29;
            v3[4] = (char *)v14 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_60;
            }
            unint64_t v14 = (unsigned int *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v14 + 1);
          if (v6 < (unint64_t)(v14 + 1)) {
            goto LABEL_60;
          }
          unsigned int v10 = *v14;
          break;
        case 4uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_65;
            }
            unint64_t v15 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v15 + result) {
              goto LABEL_60;
            }
            v3[3] = 37;
            v3[4] = (char *)v15 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_60;
            }
            unint64_t v15 = (unsigned int *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v15 + 1);
          if (v6 < (unint64_t)(v15 + 1)) {
            goto LABEL_60;
          }
          uint64_t v9 = *v15;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v5 = v3[1];
              goto LABEL_56;
            case 1uLL:
              unint64_t v5 = v3[1] + 8;
              goto LABEL_54;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_66;
              }
              unint64_t v5 = v3[1] + result;
LABEL_54:
              if (v6 >= v5) {
                goto LABEL_55;
              }
              goto LABEL_60;
            case 5uLL:
              unint64_t v5 = v3[1] + 4;
              goto LABEL_54;
            default:
              goto LABEL_60;
          }
      }
LABEL_55:
      v3[1] = v5;
LABEL_56:
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_59;
      }
    }
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = 1065353216;
  unsigned int v10 = 1065353216;
LABEL_59:
  v3[3] = 0;
  *(void *)a2 = v8 | (unint64_t)(v7 << 32);
  *(void *)(a2 + 8) = v10 | (unint64_t)(v9 << 32);
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ResolvedGradient.Stop(void *a1)
{
  return ResolvedGradient.Stop.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ResolvedGradient.Stop@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvedGradient.Stop.init(from:)(a1, a2);
}

SwiftUI::ResolvedGradientVector __swiftcall ResolvedGradientVector.init()()
{
  *(void *)uint64_t v0 = MEMORY[0x263F8EE78];
  *(unsigned char *)(v0 + 8) = 0;
  return result;
}

void (*ResolvedGradient.animatableData.modify(void *a1))(uint64_t a1, char a2)
{
  float v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  char v5 = *((unsigned char *)v1 + 8);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v6) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v10 = v4;
    char v11 = v5;
    swift_bridgeObjectRetain();
    v14.stops._rawValue = &v10;
    ResolvedGradientVector.init(_:)(v14);
    uint64_t v8 = v12;
    char v7 = v13;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v7 = 0;
  uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_10:
  v3[3] = v8;
  *((unsigned char *)v3 + 32) = v7;
  return ResolvedGradient.animatableData.modify;
}

void ResolvedGradient.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(*(void *)a1 + 32);
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  char v5 = v3;
  if (a2)
  {
    swift_bridgeObjectRetain();
    ResolvedGradient.animatableData.setter(&v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    ResolvedGradient.animatableData.setter(&v4);
  }

  free(v2);
}

void (*protocol witness for Animatable.animatableData.modify in conformance ResolvedGradient(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ResolvedGradient.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void static ResolvedGradientVector.zero.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t static ResolvedGradientVector.+= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return static ResolvedGradientVector.+= infix(_:_:)(1.0, a1, a2);
}

uint64_t ResolvedGradientVector.add(_:scaledBy:)(uint64_t result, double a2)
{
  char v3 = *(float32x4_t **)result;
  int64_t v4 = *(void *)(*(void *)result + 16);
  if (!v4) {
    return result;
  }
  char v6 = *(unsigned char *)(result + 8);
  char v7 = *(float32x4_t **)v2;
  uint64_t v8 = *(void *)(*(void *)v2 + 16);
  if (!v8)
  {
    if (a2 == 1.0)
    {
      swift_bridgeObjectRetain();
      SwiftUI::ResolvedGradientVector result = swift_bridgeObjectRelease();
      char v47 = v67;
      *int64_t v67 = v3;
    }
    else
    {
      SwiftUI::ResolvedGradientVector result = swift_isUniquelyReferenced_nonNull_native();
      if (!result || v4 > (unint64_t)v7[1].i64[1] >> 1)
      {
        SwiftUI::ResolvedGradientVector result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)result, v4, 0, v7);
        char v7 = (float32x4_t *)result;
      }
      char v47 = v67;
      *int64_t v67 = v7;
      uint64_t v48 = v3[1].i64[0];
      if (v48)
      {
        float v49 = a2;
        float v69 = v49;
        unint64_t v50 = v7[1].u64[0];
        swift_bridgeObjectRetain();
        float v51 = v69;
        uint64_t v52 = 0;
        uint64_t v53 = 3 * v50;
        do
        {
          float32x4_t v54 = v3[v52 + 2];
          uint64_t v55 = v3[v52 + 3].i64[0];
          unint64_t v56 = v7[1].u64[1];
          if (v50 >= v56 >> 1)
          {
            float32x4_t v66 = v3[v52 + 2];
            unint64_t v58 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v50 + 1, 1, v7);
            float32x4_t v54 = v66;
            float v51 = v69;
            char v7 = v58;
          }
          v7[1].i64[0] = v50 + 1;
          unint64_t v57 = &v7[v53 + v52];
          v57[2] = vmulq_n_f32(v54, v51);
          v57[3].i64[0] = v55;
          v57[3].i64[1] = 0;
          v57[4].i64[0] = 0;
          v57[4].i8[8] = 1;
          v52 += 3;
          ++v50;
          --v48;
        }
        while (v48);
        SwiftUI::ResolvedGradientVector result = swift_bridgeObjectRelease();
        char v47 = v67;
        *int64_t v67 = v7;
      }
    }
    *((unsigned char *)v47 + 8) = v6;
    return result;
  }
  v70.i8[0] = *(unsigned char *)(result + 8);
  ResolvedGradientVector.setColorSpace(_:)((unsigned __int8 *)&v70);
  if (v8 != v4
    || (unint64_t v9 = *(void *)v2,
        SwiftUI::ResolvedGradientVector result = specialized Sequence.reduce<A>(_:_:)(1, 0, *(void *)(*(void *)v2 + 16), v2, (uint64_t)v3),
        (result & 1) == 0))
  {
    if (v4 <= (unint64_t)v8) {
      int64_t v25 = v8;
    }
    else {
      int64_t v25 = v4;
    }
    uint64_t v26 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0, MEMORY[0x263F8EE78]);
    unint64_t v9 = 0;
    unint64_t v27 = 0;
    int32x2_t v68 = (int32x2_t)&v3[3];
    uint64_t v28 = v3 + 2;
    float v29 = a2;
    unint64_t v11 = 48;
    unint64_t v30 = v67;
    float v65 = v29;
    if (v8 <= 0) {
      goto LABEL_30;
    }
    while (1)
    {
      if (v27 >= (*v30)[1].i64[0]) {
        goto LABEL_59;
      }
      double v31 = *(double *)(*v30)[3 * v27 + 3].i64;
      if ((uint64_t)v9 >= v4) {
        break;
      }
      while (1)
      {
        if (v9 >= v3[1].i64[0]) {
          goto LABEL_60;
        }
        double v32 = *(double *)(*(void *)&v68 + 48 * v9);
        BOOL v33 = v31 < v32;
        if (v31 != v32)
        {
LABEL_26:
          if (v33)
          {
            if (v27 >= (*v30)[1].i64[0]) {
              goto LABEL_61;
            }
            uint64_t v34 = (uint64_t)&(*v30)[3 * v27];
            uint64_t v35 = *(void *)(v34 + 48);
            char v36 = *(unsigned char *)(v34 + 72);
            ++v27;
            float32x4_t v61 = *(float32x4_t *)(v34 + 32);
            float32x4_t v63 = *(float32x4_t *)(v34 + 56);
            mix #1 (stops:count:at:location:) in ResolvedGradientVector.add(_:scaledBy:)(v3, v4, v9, (uint64_t)&v70, v31);
            float32x4_t v38 = v61;
            float32x4_t v37 = v63;
            float v29 = v65;
            uint64_t v28 = v3 + 2;
            unint64_t v30 = v67;
            float32x4_t v39 = v70;
          }
          else
          {
            if (v9 >= v3[1].i64[0]) {
              goto LABEL_62;
            }
            uint64_t v41 = 3 * v9++;
            float32x4_t v59 = v28[v41];
            mix #1 (stops:count:at:location:) in ResolvedGradientVector.add(_:scaledBy:)(*v30, v8, v27, (uint64_t)&v70, v32);
            float32x4_t v39 = v59;
            float v29 = v65;
            uint64_t v28 = v3 + 2;
            unint64_t v30 = v67;
            float32x4_t v38 = v70;
            uint64_t v35 = v71;
            float32x4_t v37 = v72;
            char v36 = v73;
          }
          goto LABEL_38;
        }
LABEL_33:
        if (v27 >= (*v30)[1].i64[0])
        {
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
          while (2)
          {
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            SwiftUI::ResolvedGradientVector result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
            unint64_t v9 = result;
LABEL_8:
            uint64_t v12 = 0;
            unint64_t v13 = 0;
            unint64_t v14 = *(void *)(v9 + 16);
            float32x2_t v15 = (float32x2_t)vdupq_lane_s32(v68, 0).u64[0];
LABEL_12:
            if (v13 >= v14) {
              continue;
            }
            break;
          }
          unint64_t v21 = v9 + v12 * 16;
          *(float32x4_t *)(v9 + v12 * 16 + 32) = vaddq_f32(*(float32x4_t *)(v9 + v12 * 16 + 32), vmulq_n_f32(v3[v12 + 2], *(float *)v68.i32));
          if (*(unsigned char *)(v9 + v12 * 16 + 72) == 1)
          {
            float32x2_t v22 = (float32x2_t)0x3F80000000000000;
            float32x2_t v23 = (float32x2_t)0x3F80000000000000;
            if (v3[v12 + 4].i8[8])
            {
LABEL_11:
              ++v13;
              v12 += 3;
              if (v11 == v13)
              {
                *int64_t v67 = (float32x4_t *)v9;
                return result;
              }
              goto LABEL_12;
            }
LABEL_9:
            int64x2_t v16 = *(int64x2_t *)((char *)&v3[v12 + 3] + 8);
            float32x2_t v17 = (float32x2_t)vmovn_s64(v16);
            float32x2_t v18 = (float32x2_t)vshrn_n_s64(v16, 0x20uLL);
          }
          else
          {
            int64x2_t v24 = *(int64x2_t *)(v21 + 56);
            float32x2_t v23 = (float32x2_t)vmovn_s64(v24);
            float32x2_t v22 = (float32x2_t)vshrn_n_s64(v24, 0x20uLL);
            float32x2_t v18 = (float32x2_t)0x3F80000000000000;
            float32x2_t v17 = (float32x2_t)0x3F80000000000000;
            if ((v3[v12 + 4].i8[8] & 1) == 0) {
              goto LABEL_9;
            }
          }
          float32x2_t v19 = vadd_f32(vmul_f32(v23, v15), v17);
          v20.i64[0] = v19.u32[0];
          v20.i64[1] = v19.u32[1];
          *(int8x16_t *)(v21 + 56) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32(vmul_f32(v22, v15), v18), 0x20uLL), v20);
          *(unsigned char *)(v21 + 72) = 0;
          goto LABEL_11;
        }
        if (v9 >= v3[1].i64[0]) {
          goto LABEL_58;
        }
        uint64_t v40 = (uint64_t)&(*v30)[3 * v27++];
        char v36 = *(unsigned char *)(v40 + 72);
        float32x4_t v37 = *(float32x4_t *)(v40 + 56);
        uint64_t v35 = *(void *)(v40 + 48);
        float32x4_t v38 = *(float32x4_t *)(v40 + 32);
        float32x4_t v39 = v28[3 * v9++];
LABEL_38:
        unint64_t v43 = v26[1].u64[0];
        unint64_t v42 = v26[1].u64[1];
        if (v43 >= v42 >> 1)
        {
          float32x4_t v62 = v38;
          float32x4_t v64 = v37;
          float32x4_t v60 = v39;
          long long v45 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v26);
          float32x4_t v39 = v60;
          float32x4_t v38 = v62;
          float32x4_t v37 = v64;
          float v29 = v65;
          uint64_t v28 = v3 + 2;
          unint64_t v30 = v67;
          uint64_t v26 = v45;
        }
        v26[1].i64[0] = v43 + 1;
        uint64_t v44 = &v26[3 * v43];
        v44[2] = vaddq_f32(vmulq_n_f32(v39, v29), v38);
        v44[3].i64[0] = v35;
        *(float32x4_t *)((char *)v44 + 56) = v37;
        v44[4].i8[8] = v36;
        if ((uint64_t)v27 < v8) {
          break;
        }
LABEL_30:
        if ((uint64_t)v9 >= v4)
        {
          long long v46 = v30;
          SwiftUI::ResolvedGradientVector result = swift_bridgeObjectRelease();
          *long long v46 = v26;
          return result;
        }
        double v31 = INFINITY;
      }
    }
    double v32 = INFINITY;
    BOOL v33 = v31 < INFINITY;
    if (v31 != INFINITY) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }
  unint64_t v11 = *(void *)(v9 + 16);
  if (v11)
  {
    if (v11 > v3[1].i64[0]) {
      goto LABEL_64;
    }
    *(float *)v10.i32 = a2;
    int32x2_t v68 = v10;
    SwiftUI::ResolvedGradientVector result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      goto LABEL_65;
    }
    goto LABEL_8;
  }
  return result;
}

uint64_t static ResolvedGradientVector.-= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return static ResolvedGradientVector.+= infix(_:_:)(-1.0, a1, a2);
}

uint64_t static ResolvedGradientVector.+= infix(_:_:)(double a1, uint64_t a2, uint64_t *a3)
{
  char v3 = *((unsigned char *)a3 + 8);
  uint64_t v5 = *a3;
  char v6 = v3;
  return ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v5, a1);
}

void ResolvedGradientVector.setColorSpace(_:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  if (v1[8] != v2)
  {
    char v3 = *(void **)v1;
    uint64_t v4 = *(void *)(*(void *)v1 + 16);
    if (v4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_13:
      }
        char v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      unint64_t v5 = 0;
      unint64_t v6 = v3[2];
      uint64_t v7 = 4;
      do
      {
        if (v5 >= v6)
        {
          __break(1u);
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
        long long v13 = *(_OWORD *)&v3[v7];
        *(float *)v8.i32 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)&v13);
        ResolvedGradient.ColorSpace.convertIn(_:)((float *)&v13, v8, v9, v10, v11, v12);
        unint64_t v6 = v3[2];
        if (v5 >= v6) {
          goto LABEL_12;
        }
        ++v5;
        *(_OWORD *)&v3[v7] = v13;
        v7 += 6;
      }
      while (v4 != v5);
      *(void *)uint64_t v1 = v3;
    }
    v1[8] = v2;
  }
}

float32x4_t *mix #1 (stops:count:at:location:) in ResolvedGradientVector.add(_:scaledBy:)@<X0>(float32x4_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unint64_t v5 = a3 - 1;
  if (a3 < 1)
  {
    if (!result[1].i64[0])
    {
      __break(1u);
      goto LABEL_14;
    }
    float32x4_t v11 = result[2];
LABEL_12:
    *(float32x4_t *)a4 = v11;
    *(double *)(a4 + 16) = a5;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(unsigned char *)(a4 + 40) = 1;
    return result;
  }
  if (a3 < a2)
  {
    unint64_t v6 = result[1].u64[0];
    if (v5 < v6)
    {
      if (v6 > a3)
      {
        uint64_t v7 = (uint64_t)&result[3 * v5 + 2];
        double v8 = *(double *)(v7 + 16);
        uint64_t v9 = (uint64_t)&result[3 * a3 + 2];
        double v10 = *(double *)(v9 + 16);
        float32x4_t v11 = *(float32x4_t *)v7;
        if (v8 != v10)
        {
          float v12 = (a5 - v8) / (v10 - v8);
          float32x4_t v11 = vaddq_f32(vmulq_n_f32(v11, 1.0 - v12), vmulq_n_f32(*(float32x4_t *)v9, v12));
        }
        goto LABEL_12;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v13 = a2 - 1;
  if (a2 - 1 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v13 < result[1].i64[0])
  {
    float32x4_t v11 = result[3 * v13 + 2];
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ResolvedGradientVector.scale(by:)(Swift::Double by)
{
  int v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  if (v3)
  {
    float v4 = by;
    float v8 = v4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      int v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unint64_t v5 = 0;
    unint64_t v6 = v2[2];
    uint64_t v7 = 4;
    do
    {
      if (v5 >= v6)
      {
        __break(1u);
        goto LABEL_9;
      }
      ++v5;
      *(float32x4_t *)&v2[v7] = vmulq_n_f32(*(float32x4_t *)&v2[v7], v8);
      v7 += 6;
    }
    while (v3 != v5);
    *(void *)uint64_t v1 = v2;
  }
}

double ResolvedGradientVector.magnitudeSquared.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (!v1) {
    return 0.0;
  }
  int v2 = (float *)(*(void *)v0 + 44);
  double result = 0.0;
  do
  {
    double result = result
           + (float)((float)((float)((float)(*(v2 - 3) * *(v2 - 3)) + (float)(*(v2 - 2) * *(v2 - 2)))
                           + (float)(*(v2 - 1) * *(v2 - 1)))
                   + (float)(*v2 * *v2));
    v2 += 12;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t static ResolvedGradientVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ResolvedGradientVector.+ infix(_:_:)(a1, a2, a3, 1.0);
}

uint64_t static ResolvedGradientVector.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ResolvedGradientVector.+ infix(_:_:)(a1, a2, a3, -1.0);
}

uint64_t static ResolvedGradientVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  *(void *)a3 = *(void *)a1;
  *(unsigned char *)(a3 + 8) = v5;
  uint64_t v9 = v6;
  char v10 = v7;
  swift_bridgeObjectRetain();
  return ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v9, a4);
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance ResolvedGradientVector(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ResolvedGradientVector@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ResolvedGradientVector.+ infix(_:_:)(a1, a2, a3, 1.0);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance ResolvedGradientVector(uint64_t a1, uint64_t *a2)
{
  return static ResolvedGradientVector.+= infix(_:_:)(1.0, a1, a2);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance ResolvedGradientVector@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ResolvedGradientVector.+ infix(_:_:)(a1, a2, a3, -1.0);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance ResolvedGradientVector(uint64_t a1, uint64_t *a2)
{
  return static ResolvedGradientVector.+= infix(_:_:)(-1.0, a1, a2);
}

void specialized static Dictionary.Keys.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v4 = a1 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    int64_t v15 = v9;
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      if (!*(void *)(a2 + 16)) {
        goto LABEL_30;
      }
      goto LABEL_7;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v16 >= v8) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v15 + 2;
      if (v15 + 2 >= v8) {
        goto LABEL_30;
      }
      unint64_t v17 = *(void *)(v4 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v15 + 3;
        if (v15 + 3 >= v8) {
          goto LABEL_30;
        }
        unint64_t v17 = *(void *)(v4 + 8 * v9);
        if (!v17)
        {
          int64_t v9 = v15 + 4;
          if (v15 + 4 >= v8) {
            goto LABEL_30;
          }
          unint64_t v17 = *(void *)(v4 + 8 * v9);
          if (!v17)
          {
            int64_t v9 = v15 + 5;
            if (v15 + 5 >= v8) {
              goto LABEL_30;
            }
            unint64_t v17 = *(void *)(v4 + 8 * v9);
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v9 << 6);
    if (!*(void *)(a2 + 16))
    {
LABEL_30:
      outlined consume of Set<EventID>.Iterator._Variant();
      return;
    }
LABEL_7:
    id v12 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
    specialized __RawDictionaryStorage.find<A>(_:)(v12);
    char v14 = v13;

    if ((v14 & 1) == 0) {
      goto LABEL_30;
    }
  }
  int64_t v18 = v15 + 6;
  if (v15 + 6 >= v8) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v15 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_26;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = a3;
    int64_t v4 = a2;
    uint64_t v5 = a1;
    if (!(*v3 >> 62))
    {
      unint64_t v9 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v9 >= a2) {
        goto LABEL_4;
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)v9 < v4) {
    goto LABEL_39;
  }
LABEL_4:
  uint64_t v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v7 = v8 >> 62;
  if (!(v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v11 = v10 - v6;
    if (!__OFSUB__(v10, v6)) {
      goto LABEL_7;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + v32;
    if (!__OFADD__(v12, v32)) {
      goto LABEL_9;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v11 = v10 - v6;
  if (__OFSUB__(v10, v6)) {
    goto LABEL_43;
  }
LABEL_7:
  unint64_t v9 = *v3;
  uint64_t v32 = v11;
  if (*v3 >> 62) {
    goto LABEL_44;
  }
  uint64_t v12 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = v12 + v11;
  if (__OFADD__(v12, v11)) {
    goto LABEL_46;
  }
LABEL_9:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  unint64_t v30 = v7;
  unint64_t v31 = v8;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
    uint64_t v12 = 1;
  }
  if (v9 >> 62) {
    goto LABEL_47;
  }
  uint64_t v16 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v16 <= v13) {
    uint64_t v16 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = MEMORY[0x24C523D70](v12, v16, 1, v9);
  swift_bridgeObjectRelease();
  *uint64_t v3 = v9;
  uint64_t v15 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  uint64_t v17 = v15 + 32 + 8 * v5;
  type metadata accessor for TextAttributeModifierBase();
  swift_arrayDestroy();
  uint64_t v18 = v32;
  if (!v32) {
    goto LABEL_29;
  }
  if (!(v9 >> 62))
  {
    uint64_t v19 = *(void *)(v15 + 16);
    uint64_t v20 = v19 - v4;
    if (!__OFSUB__(v19, v4)) {
      goto LABEL_22;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = v32;
  uint64_t v20 = v28 - v4;
  if (__OFSUB__(v28, v4)) {
    goto LABEL_50;
  }
LABEL_22:
  if (v20 < 0)
  {
LABEL_55:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v21 = (char *)(v17 + 8 * v10);
  float32x2_t v22 = (char *)(v15 + 32 + 8 * v4);
  if (v21 != v22 || v21 >= &v22[8 * v20])
  {
    memmove(v21, v22, 8 * v20);
    uint64_t v18 = v32;
  }
  if (v9 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v24 = v29 + v32;
    if (!__OFADD__(v29, v32)) {
      goto LABEL_28;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v23 = *(void *)(v15 + 16);
  uint64_t v24 = v23 + v18;
  if (__OFADD__(v23, v18)) {
    goto LABEL_53;
  }
LABEL_28:
  *(void *)(v15 + 16) = v24;
LABEL_29:
  if (v10 >= 1)
  {
    if (v30)
    {
      unint64_t v25 = swift_bridgeObjectRetain();
      uint64_t v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v25);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v26 + 4), v26[2], v10);
      swift_release();
      goto LABEL_34;
    }
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) == v10)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_54;
  }
LABEL_34:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v7 = a1;
    unint64_t v6 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 < v5) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v6 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v6 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v6;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = MEMORY[0x24C523D70](v10, v14, 1, v6);
  swift_bridgeObjectRelease();
  unint64_t *v4 = v6;
  uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v15 = (void *)(v13 + 32 + 8 * v7);
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for AXCustomContent);
  swift_arrayDestroy();
  if (v8)
  {
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v17 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_21:
        if (v17 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v18 = (char *)(v15 + 1);
        uint64_t v19 = (char *)(v13 + 32 + 8 * v5);
        if (v15 + 1 != (void *)v19 || v18 >= &v19[8 * v17]) {
          memmove(v18, v19, 8 * v17);
        }
        if (!(v6 >> 62))
        {
          uint64_t v20 = *(void *)(v13 + 16);
          uint64_t v21 = v20 + v8;
          if (!__OFADD__(v20, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v21;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v21 = v25 + v8;
        if (!__OFADD__(v25, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = v16 - v5;
      if (!__OFSUB__(v16, v5)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  void *v15 = v3;

  return specialized Array._endMutation()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = a6;
    uint64_t v11 = a5;
    uint64_t v8 = a2;
    uint64_t v9 = a1;
    unint64_t v10 = *v6;
    if (!(*v6 >> 62))
    {
      if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v30 < v8) {
    goto LABEL_36;
  }
LABEL_4:
  uint64_t v12 = v8 - v9;
  if (__OFSUB__(v8, v9))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v13 = (v7 >> 1) - v11;
  if (__OFSUB__(v7 >> 1, v11))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v14 = v13 - v12;
  if (__OFSUB__(v13, v12))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v16 = v31 + v35;
    if (!__OFADD__(v31, v35)) {
      goto LABEL_9;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  unint64_t v10 = *v6;
  uint64_t v34 = (v7 >> 1) - v11;
  uint64_t v35 = v13 - v12;
  if (*v6 >> 62) {
    goto LABEL_40;
  }
  uint64_t v15 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v16 = v15 + v14;
  if (__OFADD__(v15, v14)) {
    goto LABEL_42;
  }
LABEL_9:
  unint64_t v10 = *v6;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v6 = v10;
  uint64_t v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    uint64_t v18 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v16 <= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
    uint64_t v11 = 1;
  }
  if (v10 >> 62) {
    goto LABEL_43;
  }
  uint64_t v19 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v19 <= v16) {
    uint64_t v19 = v16;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = MEMORY[0x24C523D70](v11, v19, 1, v10);
  swift_bridgeObjectRelease();
  unint64_t *v6 = v10;
  uint64_t v18 = v10 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  uint64_t v20 = v18 + 32 + 8 * v9;
  type metadata accessor for DynamicContainer.ItemInfo();
  swift_arrayDestroy();
  uint64_t v21 = v34;
  uint64_t v22 = v35;
  if (v35)
  {
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v21 = v34;
      uint64_t v22 = v35;
      uint64_t v24 = v32 - v8;
      if (!__OFSUB__(v32, v8))
      {
LABEL_22:
        if (v24 < 0)
        {
LABEL_50:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v25 = (char *)(v20 + 8 * v21);
        uint64_t v26 = (char *)(v18 + 32 + 8 * v8);
        if (v25 != v26 || v25 >= &v26[8 * v24])
        {
          memmove(v25, v26, 8 * v24);
          uint64_t v21 = v34;
          uint64_t v22 = v35;
        }
        if (!(v10 >> 62))
        {
          uint64_t v27 = *(void *)(v18 + 16);
          uint64_t v28 = v27 + v22;
          if (!__OFADD__(v27, v22))
          {
LABEL_28:
            *(void *)(v18 + 16) = v28;
            goto LABEL_29;
          }
          goto LABEL_49;
        }
LABEL_47:
        swift_bridgeObjectRetain();
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v21 = v34;
        uint64_t v28 = v33 + v35;
        if (!__OFADD__(v33, v35)) {
          goto LABEL_28;
        }
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v23 = *(void *)(v18 + 16);
      uint64_t v24 = v23 - v8;
      if (!__OFSUB__(v23, v8)) {
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_47;
  }
LABEL_29:
  if (v21 >= 1) {
    swift_arrayInitWithCopy();
  }
  swift_unknownObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for TextAttributeModifierBase();
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized static ResolvedGradient.Stop.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)a1, *(float32x4_t *)a2)), 0xFuLL))) & 1) != 0
    && *(double *)(a1 + 16) == *(double *)(a2 + 16))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      if (*(unsigned char *)(a2 + 40)) {
        return 1;
      }
    }
    else if ((*(unsigned char *)(a2 + 40) & 1) == 0)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      BOOL v6 = *(float *)&v5 == COERCE_FLOAT(*(void *)(a2 + 24))
        && *((float *)&v5 + 1) == COERCE_FLOAT(HIDWORD(*(void *)(a2 + 24)));
      BOOL v7 = v6 && *(float *)&v4 == COERCE_FLOAT(*(void *)(a2 + 32));
      if (v7 && *((float *)&v4 + 1) == COERCE_FLOAT(HIDWORD(*(void *)(a2 + 32)))) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL specialized Sequence.reduce<A>(_:_:)(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    return result;
  }
  if (a3 >= a2)
  {
    if (a2 < a3)
    {
      uint64_t v5 = 48 * a2 + 48;
      uint64_t v6 = a3 - 1;
      unint64_t v7 = a2;
      while (1)
      {
        if (result)
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_16;
          }
          if (v7 >= *(void *)(*(void *)a4 + 16)) {
            goto LABEL_17;
          }
          if (v7 >= *(void *)(a5 + 16)) {
            goto LABEL_18;
          }
          uint64_t result = *(double *)(*(void *)a4 + v5) == *(double *)(a5 + v5);
          if (v6 == v7) {
            return result;
          }
        }
        else
        {
          uint64_t result = 0;
          if (v6 == v7) {
            return result;
          }
        }
        uint64_t v8 = v7 + 1;
        if ((uint64_t)(v7 + 1) >= a2)
        {
          v5 += 48;
          ++v7;
          if (v8 < a3) {
            continue;
          }
        }
        break;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16 < v3) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v17 + v29;
    if (!__OFADD__(v17, v29)) {
      goto LABEL_8;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    uint64_t v13 = 1;
    goto LABEL_22;
  }
  unint64_t v7 = *v4;
  uint64_t v29 = v5 - v3;
  uint64_t v30 = v5;
  if (*v4 >> 62) {
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 - v8;
  if (__OFADD__(v10, v9)) {
    goto LABEL_20;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v7;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v14 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
      uint64_t v15 = v6;
      goto LABEL_27;
    }
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v15 = v6;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v18 <= v11) {
    uint64_t v18 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x24C523D70](v13, v18, 1, v7);
  swift_bridgeObjectRelease();
  unint64_t *v4 = v7;
  uint64_t v14 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_27:
  uint64_t v19 = (char *)(v14 + 32 + 8 * v30);
  type metadata accessor for CAPresentationModifier(0, v15);
  swift_arrayDestroy();
  uint64_t v20 = v29;
  if (v29)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v20 = v29;
      uint64_t v22 = v27 - v3;
      if (!__OFSUB__(v27, v3))
      {
LABEL_30:
        if (v22 < 0)
        {
LABEL_47:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v23 = (char *)(v14 + 32 + 8 * v3);
        if (v30 != v3 || v19 >= &v23[8 * v22])
        {
          memmove(v19, v23, 8 * v22);
          uint64_t v20 = v29;
        }
        if (!(v7 >> 62))
        {
          uint64_t v24 = *(void *)(v14 + 16);
          uint64_t v25 = v24 + v20;
          if (!__OFADD__(v24, v20))
          {
LABEL_36:
            *(void *)(v14 + 16) = v25;
            goto LABEL_37;
          }
          goto LABEL_46;
        }
LABEL_44:
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v25 = v28 + v29;
        if (!__OFADD__(v28, v29)) {
          goto LABEL_36;
        }
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v21 = *(void *)(v14 + 16);
      uint64_t v22 = v21 - v3;
      if (!__OFSUB__(v21, v3)) {
        goto LABEL_30;
      }
    }
    __break(1u);
    goto LABEL_44;
  }
LABEL_37:

  return specialized Array._endMutation()();
}

unint64_t lazy protocol witness table accessor for type Gradient.Stop and conformance Gradient.Stop()
{
  unint64_t result = lazy protocol witness table cache variable for type Gradient.Stop and conformance Gradient.Stop;
  if (!lazy protocol witness table cache variable for type Gradient.Stop and conformance Gradient.Stop)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient.Stop and conformance Gradient.Stop);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedGradient.ColorSpace and conformance ResolvedGradient.ColorSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradient.ColorSpace and conformance ResolvedGradient.ColorSpace;
  if (!lazy protocol witness table cache variable for type ResolvedGradient.ColorSpace and conformance ResolvedGradient.ColorSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient.ColorSpace and conformance ResolvedGradient.ColorSpace);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedGradient(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
  unint64_t result = lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedGradientVector(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245BB24CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = ResolvedGradient.animatableData.getter((uint64_t)&v4);
  char v3 = v5;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_245BB2520(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  swift_bridgeObjectRetain();
  return ResolvedGradient.animatableData.setter(&v3);
}

void *assignWithCopy for Gradient.Stop(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for Gradient.Stop(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t assignWithTake for ResolvedGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedGradient()
{
  return &type metadata for ResolvedGradient;
}

ValueMetadata *type metadata accessor for ResolvedGradient.Stop()
{
  return &type metadata for ResolvedGradient.Stop;
}

unsigned char *storeEnumTagSinglePayload for ResolvedGradient.ColorSpace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BB2730);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedGradient.ColorSpace()
{
  return &type metadata for ResolvedGradient.ColorSpace;
}

ValueMetadata *type metadata accessor for ResolvedGradient.ColorSpace.InterpolatableColor()
{
  return &type metadata for ResolvedGradient.ColorSpace.InterpolatableColor;
}

uint64_t assignWithCopy for ResolvedGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedGradientVector()
{
  return &type metadata for ResolvedGradientVector;
}

ValueMetadata *type metadata accessor for ResolvedGradientVector.Stop()
{
  return &type metadata for ResolvedGradientVector.Stop;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *v5;
  uint64_t v8 = *(void *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = a1 - a2;
  if (__OFSUB__(0, v10))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFADD__(v8, v11))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v8 - v10 > *(void *)(v7 + 24) >> 1) {
    uint64_t v7 = a3();
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, a4, a5);
  uint64_t result = swift_arrayDestroy();
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(v7 + 16);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_23;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = (const void *)(v7 + 32 + 32 * a2);
    if (a1 != a2 || v7 + 32 + 32 * a1 >= (unint64_t)v18 + 32 * v17) {
      uint64_t result = (uint64_t)memmove((void *)(v7 + 32 + 32 * a1), v18, 32 * v17);
    }
    uint64_t v19 = *(void *)(v7 + 16);
    BOOL v16 = __OFADD__(v19, v11);
    uint64_t v20 = v19 - v10;
    if (!v16)
    {
      *(void *)(v7 + 16) = v20;
LABEL_17:
      uint64_t *v5 = v7;
      return result;
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = *v6;
  int64_t v9 = *((void *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v15 > *((void *)v8 + 3) >> 1)
  {
    if (v9 <= v15) {
      int64_t v18 = v9 + v14;
    }
    else {
      int64_t v18 = v9;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v18, 1, v8);
    uint64_t v8 = result;
  }
  uint64_t v19 = &v8[4 * a1 + 32];
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v20 = *((void *)v8 + 2);
  BOOL v21 = __OFSUB__(v20, a2);
  uint64_t v22 = v20 - a2;
  if (v21) {
    goto LABEL_30;
  }
  if (v22 < 0)
  {
LABEL_32:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = &v19[4 * v13];
  uint64_t v23 = &v8[4 * a2 + 32];
  if (result != v23 || result >= &v23[4 * v22]) {
    uint64_t result = (char *)memmove(result, v23, 4 * v22);
  }
  uint64_t v24 = *((void *)v8 + 2);
  BOOL v21 = __OFADD__(v24, v14);
  uint64_t v25 = v24 + v14;
  if (v21)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *((void *)v8 + 2) = v25;
LABEL_21:
  if (v13 >= 1) {
    uint64_t result = (char *)memcpy(v19, (const void *)(a4 + 4 * a5), 4 * v13);
  }
  unint64_t *v6 = v8;
  return result;
}

uint64_t outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  unsigned int v4 = *(void **)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 136);
  unint64_t v9 = *(void *)(a1 + 144);
  outlined consume of Text.Effect.Composition.Operation(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  outlined consume of Text.Effect.Composition.Operation(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

void type metadata accessor for AnimatorState<Double>.Fork(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for AnimatorState.Fork();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined init with copy of AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AccessibilityCustomContentEntry(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of Shader.Argument.Storage(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 4:
    case 6:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 5:
    case 7:
      uint64_t result = swift_retain();
      break;
    case 8:
      uint64_t result = outlined copy of Data._Representation(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of Shader.Argument.Storage(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 4:
    case 6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
    case 7:
      uint64_t result = swift_release();
      break;
    case 8:
      uint64_t result = outlined consume of Data._Representation(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AnimatorState<CGFloat>.Fork(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for AnimatorState.Fork();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined copy of Material.Layer.Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Material.Layer.Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<CGPoint>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

BOOL static Color.Resolved.== infix(_:_:)(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  BOOL v8 = a1 == a5;
  if (a2 != a6) {
    BOOL v8 = 0;
  }
  if (a3 != a7) {
    BOOL v8 = 0;
  }
  return a4 == a8 && v8;
}

float Color.Resolved.animatableData.getter(float a1, float a2, float a3, float a4)
{
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    *(float *)v8.i32 = a1;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v11, v8, a2, LODWORD(a3), a4, v9);
    a1 = v11;
  }
  return a1 * 128.0;
}

void Color.Resolved.animatableData.setter(float a1, float a2, float a3, float a4)
{
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  float v9 = a1 * 0.0078125;
  float v10 = a2 * 0.0078125;
  float v11 = a3 * 0.0078125;
  float v12 = a4 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    char v17 = 2;
    v16[0] = v9;
    v16[1] = v10;
    v16[2] = v11;
    v16[3] = v12;
    float v9 = ResolvedGradient.ColorSpace.convertOut(_:)(v16);
    float v10 = v13;
    float v11 = v14;
    float v12 = v15;
  }
  float *v4 = v9;
  v4[1] = v10;
  v4[2] = v11;
  _OWORD v4[3] = v12;
}

void Color.Resolved.linearRed.setter(float a1)
{
  *char v1 = a1;
}

uint64_t (*Color.Resolved.linearRed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float Color.Resolved.linearGreen.getter(double a1, float a2)
{
  return a2;
}

void Color.Resolved.linearGreen.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*Color.Resolved.linearGreen.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float Color.Resolved.linearBlue.getter(double a1, double a2, float a3)
{
  return a3;
}

void Color.Resolved.linearBlue.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*Color.Resolved.linearBlue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float Color.Resolved.opacity.getter(double a1, double a2, double a3, float a4)
{
  return a4;
}

void Color.Resolved.opacity.setter(float a1)
{
  *(float *)(v1 + 12) = a1;
}

uint64_t (*Color.Resolved.opacity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float Color.Resolved.multiplyingOpacity(by:)(double a1, float a2)
{
  return a2;
}

void Color.Resolved.over(_:)(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  float v16 = -a1;
  if (a1 > 0.0) {
    float v16 = a1;
  }
  if (v16 <= 0.0031308)
  {
    float v17 = v16 * 12.92;
  }
  else
  {
    float v17 = 1.0;
    if (v16 != 1.0) {
      float v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
    }
  }
  if (a1 <= 0.0) {
    float v18 = -v17;
  }
  else {
    float v18 = v17;
  }
  float v19 = -a2;
  if (a2 > 0.0) {
    float v19 = a2;
  }
  if (v19 <= 0.0031308)
  {
    float v20 = v19 * 12.92;
  }
  else
  {
    float v20 = 1.0;
    if (v19 != 1.0) {
      float v20 = (float)(powf(v19, 0.41667) * 1.055) + -0.055;
    }
  }
  if (a2 <= 0.0) {
    float v21 = -v20;
  }
  else {
    float v21 = v20;
  }
  float v22 = -a3;
  if (a3 > 0.0) {
    float v22 = a3;
  }
  if (v22 <= 0.0031308)
  {
    float v23 = v22 * 12.92;
  }
  else
  {
    float v23 = 1.0;
    if (v22 != 1.0) {
      float v23 = (float)(powf(v22, 0.41667) * 1.055) + -0.055;
    }
  }
  if (a3 <= 0.0) {
    float v24 = -v23;
  }
  else {
    float v24 = v23;
  }
  float v25 = -a5;
  if (a5 > 0.0) {
    float v25 = a5;
  }
  if (v25 <= 0.0031308)
  {
    float v26 = v25 * 12.92;
  }
  else
  {
    float v26 = 1.0;
    if (v25 != 1.0) {
      float v26 = (float)(powf(v25, 0.41667) * 1.055) + -0.055;
    }
  }
  if (a5 <= 0.0) {
    float v27 = -v26;
  }
  else {
    float v27 = v26;
  }
  float v28 = -a6;
  if (a6 > 0.0) {
    float v28 = a6;
  }
  if (v28 <= 0.0031308)
  {
    float v29 = v28 * 12.92;
  }
  else
  {
    float v29 = 1.0;
    if (v28 != 1.0) {
      float v29 = (float)(powf(v28, 0.41667) * 1.055) + -0.055;
    }
  }
  if (a6 <= 0.0) {
    float v30 = -v29;
  }
  else {
    float v30 = v29;
  }
  float v31 = -a7;
  if (a7 > 0.0) {
    float v31 = a7;
  }
  if (v31 <= 0.0031308)
  {
    float v32 = v31 * 12.92;
  }
  else
  {
    float v32 = 1.0;
    if (v31 != 1.0) {
      float v32 = (float)(powf(v31, 0.41667) * 1.055) + -0.055;
    }
  }
  float v33 = (float)((float)(1.0 - a8) * a4) + a8;
  if (v33 != 0.0)
  {
    if (a7 <= 0.0) {
      float v32 = -v32;
    }
    char v34 = 0;
    specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v34, (float)((float)((float)(1.0 - a8) * (float)(v18 * a4)) + (float)(v27 * a8)) / v33, (float)((float)((float)(1.0 - a8) * (float)(v21 * a4)) + (float)(v30 * a8)) / v33, (float)((float)((float)(1.0 - a8) * (float)(v24 * a4)) + (float)(v32 * a8)) / v33);
  }
}

void Color.Resolved.red.getter(float a1)
{
  float v2 = -a1;
  if (a1 > 0.0) {
    float v2 = a1;
  }
  if (v2 > 0.0031308 && v2 != 1.0) {
    powf(v2, 0.41667);
  }
}

void Color.Resolved.green.getter(double a1, float a2)
{
  float v2 = -a2;
  if (a2 > 0.0) {
    float v2 = a2;
  }
  if (v2 > 0.0031308 && v2 != 1.0) {
    powf(v2, 0.41667);
  }
}

void Color.Resolved.blue.getter(double a1, double a2, float a3)
{
  float v3 = -a3;
  if (a3 > 0.0) {
    float v3 = a3;
  }
  if (v3 > 0.0031308 && v3 != 1.0) {
    powf(v3, 0.41667);
  }
}

Swift::Int Color.Resolved.hashValue.getter(float a1, float a2, float a3, float a4)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.Resolved()
{
  float v1 = *v0;
  float v2 = v0[1];
  float v3 = v0[2];
  float v4 = v0[3];
  Hasher.init(_seed:)();
  Color.Resolved.hash(into:)(v1, v2, v3, v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.Resolved()
{
  Color.Resolved.hash(into:)(*v0, v0[1], v0[2], v0[3]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.Resolved()
{
  float v1 = *v0;
  float v2 = v0[1];
  float v3 = v0[2];
  float v4 = v0[3];
  Hasher.init(_seed:)();
  Color.Resolved.hash(into:)(v1, v2, v3, v4);
  return Hasher._finalize()();
}

float Color.ResolvedVibrant.scale.getter()
{
  return *(float *)v0;
}

void Color.ResolvedVibrant.scale.setter(float a1)
{
  *float v1 = a1;
}

uint64_t (*Color.ResolvedVibrant.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float Color.ResolvedVibrant.bias.getter()
{
  return *(float *)(v0 + 4);
}

void Color.ResolvedVibrant.bias.setter(float a1, float a2, float a3)
{
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = a3;
}

uint64_t (*Color.ResolvedVibrant.bias.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Color.ResolvedVibrant.colorMatrix.getter@<D0>(uint64_t a1@<X8>)
{
  int v2 = *v1;
  int v3 = v1[1];
  int v4 = v1[2];
  int v5 = v1[3];
  *(_DWORD *)a1 = *v1;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = v2;
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 36) = v4;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = v5;
  double result = 0.0;
  *(_OWORD *)(a1 + 60) = xmmword_2461C6A90;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

void Color.Resolved.description.getter(float a1, float a2, float a3, float a4)
{
  float v8 = -a1;
  if (a1 > 0.0) {
    float v8 = a1;
  }
  if (v8 <= 0.0031308)
  {
    float v9 = v8 * 12.92;
  }
  else
  {
    float v9 = 1.0;
    if (v8 != 1.0) {
      float v9 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
    }
  }
  float v10 = -v9;
  if (a1 > 0.0) {
    float v10 = v9;
  }
  float v11 = (float)(v10 * 255.0) + 0.5;
  if ((~LODWORD(v11) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v11 <= -9.2234e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v11 >= 9.2234e18)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  float v12 = -a2;
  if (a2 > 0.0) {
    float v12 = a2;
  }
  if (v12 <= 0.0031308)
  {
    float v13 = v12 * 12.92;
  }
  else
  {
    float v13 = 1.0;
    if (v12 != 1.0) {
      float v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
    }
  }
  float v14 = -v13;
  if (a2 > 0.0) {
    float v14 = v13;
  }
  float v15 = (float)(v14 * 255.0) + 0.5;
  if ((~LODWORD(v15) & 0x7F800000) == 0) {
    goto LABEL_43;
  }
  if (v15 <= -9.2234e18)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v15 >= 9.2234e18)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  float v16 = -a3;
  if (a3 > 0.0) {
    float v16 = a3;
  }
  if (v16 <= 0.0031308)
  {
    float v17 = v16 * 12.92;
  }
  else
  {
    float v17 = 1.0;
    if (v16 != 1.0) {
      float v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
    }
  }
  float v18 = -v17;
  if (a3 > 0.0) {
    float v18 = v17;
  }
  float v19 = (float)(v18 * 255.0) + 0.5;
  if (v19 <= -9.2234e18) {
    goto LABEL_46;
  }
  if (v19 >= 9.2234e18)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  float v20 = (float)(a4 * 255.0) + 0.5;
  if ((~LODWORD(v20) & 0x7F800000) == 0 || (LODWORD(v19) & 0x7F800000) == 0x7F800000) {
    goto LABEL_48;
  }
  if (v20 <= -9.2234e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v20 >= 9.2234e18)
  {
LABEL_50:
    __break(1u);
    return;
  }
  uint64_t v21 = (uint64_t)v19;
  uint64_t v22 = (uint64_t)v20;
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_2461C6AA0;
  uint64_t v24 = MEMORY[0x263F8D6C8];
  uint64_t v25 = MEMORY[0x263F8D750];
  *(void *)(v23 + 56) = MEMORY[0x263F8D6C8];
  *(void *)(v23 + 64) = v25;
  *(void *)(v23 + 32) = (uint64_t)v11;
  *(void *)(v23 + 96) = v24;
  *(void *)(v23 + 104) = v25;
  *(void *)(v23 + 72) = (uint64_t)v15;
  *(void *)(v23 + 136) = v24;
  *(void *)(v23 + 144) = v25;
  *(void *)(v23 + 112) = v21;
  *(void *)(v23 + 176) = v24;
  *(void *)(v23 + 184) = v25;
  *(void *)(v23 + 152) = v22;

  String.init(format:_:)();
}

void protocol witness for CustomStringConvertible.description.getter in conformance Color.Resolved()
{
  Color.Resolved.description.getter(*v0, v0[1], v0[2], v0[3]);
}

uint64_t static Color.Resolved.legacyInterpolation.getter()
{
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static Color.Resolved.legacyInterpolation;
}

uint64_t static Color.Resolved.legacyInterpolation.setter(char a1)
{
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static Color.Resolved.legacyInterpolation = a1 & 1;
  return result;
}

uint64_t (*static Color.Resolved.legacyInterpolation.modify())()
{
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void (*Color.Resolved.animatableData.modify(float32x4_t **a1))(float32x4_t **a1, char a2)
{
  int v3 = (float32x4_t *)malloc(0x30uLL);
  *a1 = v3;
  v3[1].i64[1] = (uint64_t)v1;
  int8x16_t v8 = *v1;
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v5 = (float32x4_t)v8;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v9.f32, v8, *(float *)&v8.i32[1], v8.u32[2], *(float *)&v8.i32[3], v4);
    float32x4_t v5 = v9;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  v3[2] = vmulq_f32(v5, v6);
  return Color.Resolved.animatableData.modify;
}

void Color.Resolved.animatableData.modify(float32x4_t **a1, char a2)
{
  int v2 = *a1;
  v3.i64[0] = 0x3C0000003C000000;
  v3.i64[1] = 0x3C0000003C000000;
  float32x4_t v4 = vmulq_f32((*a1)[2], v3);
  if (a2)
  {
    if (static Color.Resolved.legacyInterpolation)
    {
      __int32 v5 = v4.i32[1];
      __int32 v7 = v4.i32[3];
      __int32 v6 = v4.i32[2];
    }
    else
    {
      float32x4_t v12 = v4;
      v4.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v12.f32);
    }
    float v11 = (_DWORD *)v2[1].i64[1];
    *float v11 = v4.i32[0];
    v11[1] = v5;
    v11[2] = v6;
    v11[3] = v7;
  }
  else
  {
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      float32x4_t v12 = v4;
      v4.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v12.f32);
      v4.i32[1] = v8;
      v4.i64[1] = __PAIR64__(v10, v9);
    }
    *(float32x4_t *)v2[1].i64[1] = v4;
  }

  free(v2);
}

void protocol witness for Animatable.animatableData.getter in conformance Color.Resolved(uint64_t a1@<X8>)
{
  *(float *)a1 = Color.Resolved.animatableData.getter(*v1, v1[1], v1[2], v1[3]);
  *(_DWORD *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

void protocol witness for Animatable.animatableData.setter in conformance Color.Resolved(float *a1)
{
}

void (*protocol witness for Animatable.animatableData.modify in conformance Color.Resolved(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = Color.Resolved.animatableData.getter(*v1, v1[1], v1[2], v1[3]);
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 20) = v5;
  return protocol witness for Animatable.animatableData.modify in conformance Color.Resolved;
}

void protocol witness for Animatable.animatableData.modify in conformance Color.Resolved(float *a1)
{
}

float Color.ResolvedVibrant.animatableData.getter()
{
  return *v0 * 128.0;
}

float Color.ResolvedVibrant.animatableData.setter(float a1, float a2, float a3, float a4)
{
  float *v4 = a1 * 0.0078125;
  v4[1] = a2 * 0.0078125;
  float result = a4 * 0.0078125;
  v4[2] = a3 * 0.0078125;
  _OWORD v4[3] = a4 * 0.0078125;
  return result;
}

float32x4_t (*Color.ResolvedVibrant.animatableData.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  v2.i64[0] = 0x4300000043000000;
  v2.i64[1] = 0x4300000043000000;
  *(float32x4_t *)(a1 + 8) = vmulq_f32(*v1, v2);
  return Color.ResolvedVibrant.animatableData.modify;
}

float32x4_t Color.ResolvedVibrant.animatableData.modify(uint64_t a1)
{
  v1.i64[0] = 0x3C0000003C000000;
  v1.i64[1] = 0x3C0000003C000000;
  float32x4_t result = vmulq_f32(*(float32x4_t *)(a1 + 8), v1);
  *(float32x4_t *)*(void *)a1 = result;
  return result;
}

float32x4_t protocol witness for Animatable.animatableData.getter in conformance Color.ResolvedVibrant@<Q0>(float32x4_t *a1@<X8>)
{
  v2.i64[0] = 0x4300000043000000;
  v2.i64[1] = 0x4300000043000000;
  float32x4_t result = vmulq_f32(*v1, v2);
  *a1 = result;
  return result;
}

float32x4_t protocol witness for Animatable.animatableData.setter in conformance Color.ResolvedVibrant(float32x4_t *a1)
{
  v2.i64[0] = 0x3C0000003C000000;
  v2.i64[1] = 0x3C0000003C000000;
  float32x4_t result = vmulq_f32(*a1, v2);
  *float32x4_t v1 = result;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance Color.ResolvedVibrant(void *a1))(void *a1)
{
  float32x4_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Color.ResolvedVibrant.animatableData.modify((uint64_t)v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

double static Color.Resolved.clear.getter()
{
  return 0.0;
}

double static Color.Resolved.black.getter()
{
  return 0.0;
}

double one-time initialization function for gray_75()
{
  double result = 0.0000415144676;
  static Color.Resolved.gray_75 = xmmword_2461C6AB0;
  return result;
}

float static Color.Resolved.gray_75.getter()
{
  if (one-time initialization token for gray_75 != -1) {
    swift_once();
  }
  return *(float *)&static Color.Resolved.gray_75;
}

double one-time initialization function for gray_50()
{
  double result = 0.0000000253116105;
  static Color.Resolved.gray_50 = xmmword_2461C6AC0;
  return result;
}

float static Color.Resolved.gray_50.getter()
{
  if (one-time initialization token for gray_50 != -1) {
    swift_once();
  }
  return *(float *)&static Color.Resolved.gray_50;
}

double one-time initialization function for gray_25()
{
  double result = 2.32894051e-13;
  static Color.Resolved.gray_25 = xmmword_2461C6AD0;
  return result;
}

float static Color.Resolved.gray_25.getter()
{
  if (one-time initialization token for gray_25 != -1) {
    swift_once();
  }
  return *(float *)&static Color.Resolved.gray_25;
}

float static Color.Resolved.white.getter()
{
  return 1.0;
}

float static Color.Resolved.red.getter()
{
  return 1.0;
}

double static Color.Resolved.blue.getter()
{
  return 0.0;
}

double static Color.Resolved.green.getter()
{
  return 0.0;
}

void Color.Resolved.init(white:opacity:)(float a1)
{
  float v2 = -a1;
  if (a1 <= 0.0) {
    float v3 = v2;
  }
  else {
    float v3 = a1;
  }
  if (v3 > 0.04045 && v3 != 1.0) {
    powf((float)(v3 * 0.94787) + 0.052133, 2.4);
  }
}

void Color.Resolved.red.setter(float a1)
{
  float v3 = -a1;
  if (a1 <= 0.0) {
    float v4 = v3;
  }
  else {
    float v4 = a1;
  }
  if (v4 <= 0.04045)
  {
    float v5 = v4 * 0.077399;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
    }
  }
  if (a1 <= 0.0) {
    float v5 = -v5;
  }
  *float32x4_t v1 = v5;
}

void (*Color.Resolved.red.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  float v3 = *v1;
  float v4 = -*v1;
  if (*v1 > 0.0) {
    float v4 = *v1;
  }
  if (v4 <= 0.0031308)
  {
    float v5 = v4 * 12.92;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
    }
  }
  float v6 = -v5;
  if (v3 > 0.0) {
    float v6 = v5;
  }
  *(float *)(a1 + 8) = v6;
  return Color.Resolved.red.modify;
}

void Color.Resolved.red.modify(uint64_t a1)
{
  float v2 = *(float *)(a1 + 8);
  if (v2 <= 0.0) {
    float v3 = -v2;
  }
  else {
    float v3 = *(float *)(a1 + 8);
  }
  if (v3 <= 0.04045)
  {
    float v4 = v3 * 0.077399;
  }
  else
  {
    float v4 = 1.0;
    if (v3 != 1.0) {
      float v4 = powf((float)(v3 * 0.94787) + 0.052133, 2.4);
    }
  }
  if (v2 <= 0.0) {
    float v4 = -v4;
  }
  **(float **)a1 = v4;
}

void Color.Resolved.green.setter(float a1)
{
  float v3 = -a1;
  if (a1 <= 0.0) {
    float v4 = v3;
  }
  else {
    float v4 = a1;
  }
  if (v4 <= 0.04045)
  {
    float v5 = v4 * 0.077399;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
    }
  }
  if (a1 <= 0.0) {
    float v5 = -v5;
  }
  *(float *)(v1 + 4) = v5;
}

void (*Color.Resolved.green.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  float v3 = *(float *)(v1 + 4);
  float v4 = -v3;
  if (v3 > 0.0) {
    float v4 = *(float *)(v1 + 4);
  }
  if (v4 <= 0.0031308)
  {
    float v5 = v4 * 12.92;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
    }
  }
  float v6 = -v5;
  if (v3 > 0.0) {
    float v6 = v5;
  }
  *(float *)(a1 + 8) = v6;
  return Color.Resolved.green.modify;
}

void Color.Resolved.green.modify(float *a1)
{
  float v2 = a1[2];
  if (v2 <= 0.0) {
    float v3 = -v2;
  }
  else {
    float v3 = a1[2];
  }
  if (v3 <= 0.04045)
  {
    float v4 = v3 * 0.077399;
  }
  else
  {
    float v4 = 1.0;
    if (v3 != 1.0) {
      float v4 = powf((float)(v3 * 0.94787) + 0.052133, 2.4);
    }
  }
  if (v2 <= 0.0) {
    float v4 = -v4;
  }
  *(float *)(*(void *)a1 + 4) = v4;
}

void Color.Resolved.blue.setter(float a1)
{
  float v3 = -a1;
  if (a1 <= 0.0) {
    float v4 = v3;
  }
  else {
    float v4 = a1;
  }
  if (v4 <= 0.04045)
  {
    float v5 = v4 * 0.077399;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
    }
  }
  if (a1 <= 0.0) {
    float v5 = -v5;
  }
  *(float *)(v1 + 8) = v5;
}

void (*Color.Resolved.blue.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  float v3 = *(float *)(v1 + 8);
  float v4 = -v3;
  if (v3 > 0.0) {
    float v4 = *(float *)(v1 + 8);
  }
  if (v4 <= 0.0031308)
  {
    float v5 = v4 * 12.92;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
    }
  }
  float v6 = -v5;
  if (v3 > 0.0) {
    float v6 = v5;
  }
  *(float *)(a1 + 8) = v6;
  return Color.Resolved.blue.modify;
}

void Color.Resolved.blue.modify(float *a1)
{
  float v2 = a1[2];
  if (v2 <= 0.0) {
    float v3 = -v2;
  }
  else {
    float v3 = a1[2];
  }
  if (v3 <= 0.04045)
  {
    float v4 = v3 * 0.077399;
  }
  else
  {
    float v4 = 1.0;
    if (v3 != 1.0) {
      float v4 = powf((float)(v3 * 0.94787) + 0.052133, 2.4);
    }
  }
  if (v2 <= 0.0) {
    float v4 = -v4;
  }
  *(float *)(*(void *)a1 + 8) = v4;
}

void Color.Resolved.white.getter(float a1, float a2, float a3)
{
  float v3 = (float)((float)(a1 * 0.2126) + (float)(a2 * 0.7152)) + (float)(a3 * 0.0722);
  float v4 = -v3;
  if (v3 > 0.0) {
    float v4 = v3;
  }
  if (v4 > 0.0031308 && v4 != 1.0) {
    powf(v4, 0.41667);
  }
}

float Color.Resolved.linearWhite.getter(float a1, float a2, float a3)
{
  return (float)((float)(a1 * 0.2126) + (float)(a2 * 0.7152)) + (float)(a3 * 0.0722);
}

float Color.Resolved.init(linearDisplayP3Red:green:blue:opacity:)(float a1, float a2)
{
  return (float)(a1 * 1.2249) + (float)(a2 * -0.2247);
}

float Color.Resolved.linearDisplayP3Components.getter(float a1, float a2)
{
  return (float)(a1 * 0.8225) + (float)(a2 * 0.1774);
}

void Color.Resolved.displayP3Components.getter(float a1, float a2, float a3)
{
  float v3 = (float)(a1 * 0.8225) + (float)(a2 * 0.1774);
  float v4 = (float)(a1 * 0.0332) + (float)(a2 * 0.9669);
  float v5 = (float)(a1 * 0.0171) + (float)(a2 * 0.0724);
  float v6 = a3 * 0.9108;
  float v7 = -v3;
  if (v3 > 0.0) {
    float v7 = v3;
  }
  if (v7 > 0.0031308 && v7 != 1.0) {
    powf(v7, 0.41667);
  }
  float v8 = v5 + v6;
  float v9 = -v4;
  if (v4 > 0.0) {
    float v9 = v4;
  }
  if (v9 > 0.0031308 && v9 != 1.0) {
    powf(v9, 0.41667);
  }
  float v10 = -v8;
  if (v8 > 0.0) {
    float v10 = v8;
  }
  if (v10 > 0.0031308 && v10 != 1.0) {
    powf(v10, 0.41667);
  }
}

uint64_t Color.Resolved.encode(to:)(void *a1, float a2, float a3, float a4)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  float v8 = -a2;
  if (a2 > 0.0) {
    float v8 = a2;
  }
  if (v8 > 0.0031308 && v8 != 1.0) {
    powf(v8, 0.41667);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v4)
  {
    float v9 = -a3;
    if (a3 > 0.0) {
      float v9 = a3;
    }
    if (v9 > 0.0031308 && v9 != 1.0) {
      powf(v9, 0.41667);
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    float v10 = -a4;
    if (a4 > 0.0) {
      float v10 = a4;
    }
    if (v10 > 0.0031308 && v10 != 1.0) {
      powf(v10, 0.41667);
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

float Color.Resolved.init(from:)(void *a1)
{
  return specialized Color.Resolved.init(from:)(a1);
}

{
  return specialized Color.Resolved.init(from:)(a1);
}

void protocol witness for Decodable.init(from:) in conformance Color.Resolved(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = specialized Color.Resolved.init(from:)(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Color.Resolved(void *a1)
{
  return Color.Resolved.encode(to:)(a1, *v1, v1[1], v1[2]);
}

float *Color.Resolved.encode(to:)(float *result, float a2, float a3, float a4, float a5)
{
  float v8 = result;
  if (a2 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    uint64_t v10 = *((void *)v8 + 1);
    double result = (float *)(v10 + 4);
    if (__OFADD__(v10, 4))
    {
      __break(1u);
    }
    else if (*((void *)v8 + 2) >= (uint64_t)result)
    {
      *((void *)v8 + 1) = result;
      *(float *)(*(void *)v8 + v10) = a2;
      goto LABEL_5;
    }
    double result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *double result = a2;
    if (a3 == 0.0) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
LABEL_5:
  if (a3 == 0.0) {
    goto LABEL_9;
  }
LABEL_6:
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  uint64_t v11 = *((void *)v8 + 1);
  double result = (float *)(v11 + 4);
  if (__OFADD__(v11, 4))
  {
    __break(1u);
  }
  else if (*((void *)v8 + 2) >= (uint64_t)result)
  {
    *((void *)v8 + 1) = result;
    *(float *)(*(void *)v8 + v11) = a3;
    goto LABEL_9;
  }
  double result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *double result = a3;
LABEL_9:
  if (a4 == 0.0) {
    goto LABEL_13;
  }
  ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
  uint64_t v12 = *((void *)v8 + 1);
  double result = (float *)(v12 + 4);
  if (__OFADD__(v12, 4))
  {
    __break(1u);
  }
  else if (*((void *)v8 + 2) >= (uint64_t)result)
  {
    *((void *)v8 + 1) = result;
    *(float *)(*(void *)v8 + v12) = a4;
    goto LABEL_13;
  }
  double result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *double result = a4;
LABEL_13:
  if (a5 == 1.0) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x25uLL);
  uint64_t v13 = *((void *)v8 + 1);
  double result = (float *)(v13 + 4);
  if (__OFADD__(v13, 4))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (*((void *)v8 + 2) < (uint64_t)result)
  {
LABEL_26:
    double result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *double result = a5;
    return result;
  }
  *((void *)v8 + 1) = result;
  *(float *)(*(void *)v8 + v13) = a5;
  return result;
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Color.Resolved(float *a1)
{
  return Color.Resolved.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance Color.Resolved(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = specialized Color.Resolved.init(from:)(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
  }
}

float specialized Color.Resolved.init(from:)(void *a1)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  if (v3 < v4)
  {
    float v5 = 0.0;
    while (1)
    {
      unint64_t v6 = a1[3];
      if (v6)
      {
        unint64_t v7 = a1[4];
        if (v3 < v7) {
          goto LABEL_9;
        }
        if (v7 < v3) {
          goto LABEL_60;
        }
        a1[3] = 0;
      }
      unint64_t v6 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        return v5;
      }
      if (v6 <= 7)
      {
LABEL_60:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return v5;
      }
LABEL_9:
      switch(v6 >> 3)
      {
        case 1uLL:
          if ((v6 & 7) == 2)
          {
            uint64_t v12 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v5;
            }
            if (v12 < 0)
            {
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              JUMPOUT(0x245BB8794);
            }
            float v8 = (float *)a1[1];
            if (v4 < (unint64_t)v8 + v12) {
              goto LABEL_60;
            }
            a1[3] = 13;
            a1[4] = (char *)v8 + v12;
          }
          else
          {
            if ((v6 & 7) != 5) {
              goto LABEL_60;
            }
            float v8 = (float *)a1[1];
          }
          unint64_t v3 = (unint64_t)(v8 + 1);
          if (v4 < (unint64_t)(v8 + 1)) {
            goto LABEL_60;
          }
          float v5 = *v8;
          break;
        case 2uLL:
          if ((v6 & 7) == 2)
          {
            uint64_t v13 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v5;
            }
            if (v13 < 0) {
              goto LABEL_63;
            }
            uint64_t v9 = a1[1];
            if (v4 < v9 + v13) {
              goto LABEL_60;
            }
            a1[3] = 21;
            a1[4] = v9 + v13;
          }
          else
          {
            if ((v6 & 7) != 5) {
              goto LABEL_60;
            }
            uint64_t v9 = a1[1];
          }
          unint64_t v3 = v9 + 4;
          if (v4 < v9 + 4) {
            goto LABEL_60;
          }
          break;
        case 3uLL:
          if ((v6 & 7) == 2)
          {
            uint64_t v14 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v5;
            }
            if (v14 < 0) {
              goto LABEL_64;
            }
            uint64_t v10 = a1[1];
            if (v4 < v10 + v14) {
              goto LABEL_60;
            }
            a1[3] = 29;
            a1[4] = v10 + v14;
          }
          else
          {
            if ((v6 & 7) != 5) {
              goto LABEL_60;
            }
            uint64_t v10 = a1[1];
          }
          unint64_t v3 = v10 + 4;
          if (v4 < v10 + 4) {
            goto LABEL_60;
          }
          break;
        case 4uLL:
          if ((v6 & 7) == 2)
          {
            uint64_t v15 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v5;
            }
            if (v15 < 0) {
              goto LABEL_65;
            }
            uint64_t v11 = a1[1];
            if (v4 < v11 + v15) {
              goto LABEL_60;
            }
            a1[3] = 37;
            a1[4] = v11 + v15;
          }
          else
          {
            if ((v6 & 7) != 5) {
              goto LABEL_60;
            }
            uint64_t v11 = a1[1];
          }
          unint64_t v3 = v11 + 4;
          if (v4 < v11 + 4) {
            goto LABEL_60;
          }
          break;
        default:
          switch(v6 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1) {
                return v5;
              }
              unint64_t v3 = a1[1];
              goto LABEL_56;
            case 1uLL:
              unint64_t v3 = a1[1] + 8;
              goto LABEL_54;
            case 2uLL:
              uint64_t v16 = ProtobufDecoder.decodeVarint()();
              if (v1) {
                return v5;
              }
              if (v16 < 0) {
                goto LABEL_66;
              }
              unint64_t v3 = a1[1] + v16;
LABEL_54:
              if (v4 >= v3) {
                goto LABEL_55;
              }
              goto LABEL_60;
            case 5uLL:
              unint64_t v3 = a1[1] + 4;
              goto LABEL_54;
            default:
              goto LABEL_60;
          }
      }
LABEL_55:
      a1[1] = v3;
LABEL_56:
      unint64_t v4 = a1[2];
      if (v3 >= v4) {
        goto LABEL_59;
      }
    }
  }
  float v5 = 0.0;
LABEL_59:
  a1[3] = 0;
  return v5;
}

{
  uint64_t v1;
  float v2;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  unsigned char v11[24];
  uint64_t v12;
  char v13;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    float v5 = v4;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    unint64_t v7 = v6;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v9 = v8;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v13 = 0;
    uint64_t v2 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v13, v5, v7, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

void sub_245BB8958(float *a1@<X0>, uint64_t a2@<X8>)
{
  *(float *)a2 = Color.Resolved.animatableData.getter(*a1, a1[1], a1[2], a1[3]);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
}

void sub_245BB898C(float *a1)
{
}

float32x4_t sub_245BB89B8@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  v2.i64[0] = 0x4300000043000000;
  v2.i64[1] = 0x4300000043000000;
  float32x4_t result = vmulq_f32(*a1, v2);
  *a2 = result;
  return result;
}

float32x4_t sub_245BB89CC(float32x4_t *a1, float32x4_t *a2)
{
  v2.i64[0] = 0x3C0000003C000000;
  v2.i64[1] = 0x3C0000003C000000;
  float32x4_t result = vmulq_f32(*a1, v2);
  *a2 = result;
  return result;
}

void sub_245BB89E0(float *a1@<X0>, float *a2@<X8>)
{
  float v3 = *a1;
  float v4 = -*a1;
  if (*a1 > 0.0) {
    float v4 = *a1;
  }
  if (v4 <= 0.0031308)
  {
    float v5 = v4 * 12.92;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
    }
  }
  float v6 = -v5;
  if (v3 > 0.0) {
    float v6 = v5;
  }
  *a2 = v6;
}

void sub_245BB8A8C(float *a1)
{
}

void sub_245BB8AB4(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3 = *(float *)(a1 + 4);
  float v4 = -v3;
  if (v3 > 0.0) {
    float v4 = *(float *)(a1 + 4);
  }
  if (v4 <= 0.0031308)
  {
    float v5 = v4 * 12.92;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
    }
  }
  float v6 = -v5;
  if (v3 > 0.0) {
    float v6 = v5;
  }
  *a2 = v6;
}

void sub_245BB8B60(float *a1)
{
}

void sub_245BB8B88(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3 = *(float *)(a1 + 8);
  float v4 = -v3;
  if (v3 > 0.0) {
    float v4 = *(float *)(a1 + 8);
  }
  if (v4 <= 0.0031308)
  {
    float v5 = v4 * 12.92;
  }
  else
  {
    float v5 = 1.0;
    if (v4 != 1.0) {
      float v5 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
    }
  }
  float v6 = -v5;
  if (v3 > 0.0) {
    float v6 = v5;
  }
  *a2 = v6;
}

void sub_245BB8C34(float *a1)
{
}

ValueMetadata *type metadata accessor for Color.ResolvedVibrant()
{
  return &type metadata for Color.ResolvedVibrant;
}

uint64_t static Signpost.kdebug(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 18) = 2;
  return result;
}

__n128 Signpost.published.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  unsigned __int8 v3 = v1[1].n128_u8[1];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u8[1] = v3;
  a1[1].n128_u8[2] = 3;
  return result;
}

void static Signpost.render.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 3;
}

double static Signpost.postUpdateActions.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 2;
  *(_OWORD *)a1 = xmmword_2461BAA80;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 3;
  return result;
}

double static Signpost.renderUpdate.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 3;
  *(_OWORD *)a1 = xmmword_2461C6CA0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 3;
  return result;
}

double static Signpost.renderFlattened.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 4;
  *(_OWORD *)a1 = xmmword_2461C6CB0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 3;
  return result;
}

double static Signpost.bodyInvoke.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 5;
  *(_OWORD *)a1 = xmmword_2461C6CC0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 3;
  return result;
}

void static Signpost.os_log(_:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  *(_WORD *)(a4 + 17) = 513;
}

void static Signpost.linkCreate.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = "LinkCreate";
  *(void *)(a1 + 8) = 10;
  *(_WORD *)(a1 + 16) = 258;
  *(unsigned char *)(a1 + 18) = 3;
}

void static Signpost.linkUpdate.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = "LinkUpdate";
  *(void *)(a1 + 8) = 10;
  *(_WORD *)(a1 + 16) = 258;
  *(unsigned char *)(a1 + 18) = 3;
}

void static Signpost.linkDestroy.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = "LinkDestroy";
  *(void *)(a1 + 8) = 11;
  *(_WORD *)(a1 + 16) = 258;
  *(unsigned char *)(a1 + 18) = 3;
}

double static Signpost.viewHost.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 9;
  *(_OWORD *)a1 = xmmword_2461C6CD0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 3;
  return result;
}

void static Signpost.platformView.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = "ViewMapping";
  *(void *)(a1 + 8) = 11;
  *(_WORD *)(a1 + 16) = 258;
  *(unsigned char *)(a1 + 18) = 3;
}

void static Signpost.animationState.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = "AnimationState";
  *(void *)(a1 + 8) = 14;
  *(_WORD *)(a1 + 16) = 258;
  *(unsigned char *)(a1 + 18) = 3;
}

void static Signpost.eventHandling.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = "EventHandling";
  *(void *)(a1 + 8) = 13;
  *(_WORD *)(a1 + 16) = 258;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t one-time initialization function for _signpostLog()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  _signpostLog = result;
  return result;
}

uint64_t one-time initialization function for archiving(uint64_t a1)
{
  return one-time initialization function for archiving(a1, static Signpost.archiving, &one-time initialization token for archiving, (uint64_t)static Log.archiving);
}

{
  return one-time initialization function for propertyChangeLog(a1, static Log.archiving);
}

uint64_t static Signpost.archiving.getter@<X0>(uint64_t a1@<X8>)
{
  return static Signpost.archiving.getter(&one-time initialization token for archiving, (uint64_t)static Signpost.archiving, a1);
}

uint64_t one-time initialization function for metadataExtraction(uint64_t a1)
{
  return one-time initialization function for archiving(a1, static Signpost.metadataExtraction, &one-time initialization token for metadataExtraction, (uint64_t)static Log.metadataExtraction);
}

{
  return one-time initialization function for propertyChangeLog(a1, static Log.metadataExtraction);
}

uint64_t one-time initialization function for archiving(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  return OSSignposter.init(logger:)();
}

uint64_t static Signpost.metadataExtraction.getter@<X0>(uint64_t a1@<X8>)
{
  return static Signpost.archiving.getter(&one-time initialization token for metadataExtraction, (uint64_t)static Signpost.metadataExtraction, a1);
}

uint64_t static Signpost.archiving.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OSSignposter();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

const char *one-time initialization function for moduleName()
{
  uint64_t result = specialized static Tracing.libraryName(defining:)();
  static Signpost.moduleName = (uint64_t)result;
  *(void *)algn_268EF8908 = v1;
  return result;
}

uint64_t static Signpost.moduleName.getter()
{
  if (one-time initialization token for moduleName != -1) {
    swift_once();
  }
  uint64_t v0 = static Signpost.moduleName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static Signpost.kdebug(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 18) = 2;
  return result;
}

__n128 Signpost.disabled.getter@<Q0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  unsigned __int8 v3 = v1[1].n128_u8[1];
  __n128 result = *v1;
  *(__n128 *)a1 = *v1;
  *(unsigned char *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 17) = v3;
  return result;
}

__n128 Signpost.verbose.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  unsigned __int8 v3 = v1[1].n128_u8[1];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u8[1] = v3;
  a1[1].n128_u8[2] = 1;
  return result;
}

uint64_t Signpost.traceInterval<A>(object:_:closure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  int v25 = a4;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v6;
  uint64_t v14 = v6[1];
  char v15 = *((unsigned char *)v6 + 16);
  char v16 = *((unsigned char *)v6 + 17);
  LOBYTE(v11) = *((unsigned char *)v6 + 18);
  uint64_t v35 = *v6;
  uint64_t v36 = v14;
  char v37 = v15;
  char v38 = v16;
  char v39 = v11;
  if ((Signpost.isEnabled.getter() & 1) == 0) {
    return a5();
  }
  uint64_t v22 = a6;
  if (a1)
  {
    uint64_t v17 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v17 != -1) {
      swift_once();
    }
    id v18 = (id)_signpostLog;
    OSSignpostID.init(log:object:)();
  }
  else
  {
    static OSSignpostID.exclusive.getter();
  }
  char v20 = static os_signpost_type_t.begin.getter();
  if (one-time initialization token for _signpostLog == -1)
  {
    if (v16) {
      goto LABEL_10;
    }
LABEL_14:
    OSSignpostID.rawValue.getter();
    uint64_t v21 = kdebug_trace();
    goto LABEL_15;
  }
  swift_once();
  if ((v16 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  if ((v25 & 0x100) != 0)
  {
    uint64_t v21 = os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    char v34 = v20;
    uint64_t v32 = _signpostLog;
    float v33 = &dword_245728000;
    uint64_t v35 = v13;
    uint64_t v36 = v14;
    char v37 = v15;
    uint64_t v29 = v23;
    uint64_t v30 = v24;
    char v31 = v25;
    uint64_t v28 = MEMORY[0x263F8EE78];
    uint64_t v21 = specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
  }
LABEL_15:
  ((void (*)(uint64_t))a5)(v21);
  static os_signpost_type_t.end.getter();
  if (v16)
  {
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    OSSignpostID.rawValue.getter();
    kdebug_trace();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v12, v27);
}

void Signpost.traceEvent(type:object:_:_:)(char a1, void (**a2)(char *, uint64_t, uint64_t), _OWORD *a3, uint64_t a4, int a5, uint64_t (*a6)(uint64_t))
{
  LODWORD(v41) = a5;
  *(void *)&long long v40 = a4;
  LOBYTE(v10) = a1;
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v38 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v39 = (char *)&v35 - v15;
  if (*((unsigned char *)v6 + 18) != 3) {
    return;
  }
  long long v16 = *v6;
  int v36 = *((unsigned __int8 *)v6 + 16);
  LODWORD(v17) = *((unsigned __int8 *)v6 + 17);
  long long v37 = v16;
  if (v17)
  {
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      if (one-time initialization token for _signpostLog != -1) {
        goto LABEL_39;
      }
      goto LABEL_5;
    }
    return;
  }
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    return;
  }
  do
  {
    uint64_t v35 = a3;
    if (a2)
    {
      a3 = &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>;
      uint64_t v18 = one-time initialization token for _signpostLog;
      swift_unknownObjectRetain();
      if (v18 != -1) {
        swift_once();
      }
      id v19 = (id)_signpostLog;
      uint64_t v20 = OSSignpostID.init(log:object:)();
    }
    else
    {
      a3 = &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>;
      uint64_t v20 = static OSSignpostID.exclusive.getter();
    }
    uint64_t v21 = a6(v20);
    if (one-time initialization token for _signpostLog == -1)
    {
      uint64_t v22 = v35;
      if (v17) {
        goto LABEL_15;
      }
    }
    else
    {
      swift_once();
      uint64_t v22 = v35;
      if (v17)
      {
LABEL_15:
        char v51 = v10;
        uint64_t v49 = _signpostLog;
        unint64_t v50 = &dword_245728000;
        long long v42 = v37;
        char v43 = v36;
        uint64_t v23 = v39;
        long long v46 = v22;
        uint64_t v47 = v40;
        char v48 = v41;
        uint64_t v45 = v21;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v11);
        swift_bridgeObjectRelease();
        return;
      }
    }
    uint64_t v24 = (4 * v37) | v10 | 0x14110000u;
    uint64_t v25 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v13, v39, v11);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v41 = v26;
    unint64_t v10 = 0;
    a6 = (uint64_t (*)(uint64_t))(v21 + 32);
    a2 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
    long long v40 = xmmword_2461BE2B0;
    while (1)
    {
      uint64_t inited = swift_initStackObject();
      uint64_t v17 = inited;
      *(_OWORD *)(inited + 16) = v40;
      uint64_t v28 = (_OWORD *)(inited + 32);
      unint64_t v29 = *(void *)(v21 + 16);
      if (v10 == v29)
      {
        *(void *)(inited + 64) = 0;
        *uint64_t v28 = 0u;
        *(_OWORD *)(inited + 48) = 0u;
        goto LABEL_22;
      }
      if (v10 >= v29) {
        break;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)a6 + 40 * v10++, (uint64_t)v28);
LABEL_22:
      uint64_t v30 = (_OWORD *)(v17 + 72);
      unint64_t v31 = *(void *)(v21 + 16);
      if (v10 == v31)
      {
        *(void *)(v17 + 104) = 0;
        *uint64_t v30 = 0u;
        *(_OWORD *)(v17 + 88) = 0u;
      }
      else
      {
        if (v10 >= v31) {
          goto LABEL_37;
        }
        outlined init with copy of AnyTrackedValue((uint64_t)a6 + 40 * v10++, (uint64_t)v30);
      }
      a3 = (_OWORD *)(v17 + 112);
      unint64_t v32 = *(void *)(v21 + 16);
      if (v10 == v32)
      {
        *(void *)(v17 + 144) = 0;
        *a3 = 0u;
        *(_OWORD *)(v17 + 128) = 0u;
      }
      else
      {
        if (v10 >= v32) {
          goto LABEL_38;
        }
        outlined init with copy of AnyTrackedValue((uint64_t)a6 + 40 * v10++, v17 + 112);
      }
      specialized withKDebugValues(_:_:closure:)(v24, v17, v24, (uint64_t)v13);
      outlined init with copy of CVarArg?(v17 + 112, (uint64_t)&v42);
      swift_bridgeObjectRelease();
      if (!v44)
      {
        swift_bridgeObjectRelease();
        char v34 = *(void (**)(char *, uint64_t))(v38 + 8);
        v34(v39, v11);
        _ss7CVarArg_pSgWOhTm_0((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        v34(v13, v11);
        return;
      }
      _ss7CVarArg_pSgWOhTm_0((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
      if (one-time initialization token for continuation != -1) {
        swift_once();
      }
      uint64_t v33 = __swift_project_value_buffer(v11, (uint64_t)static OSSignpostID.continuation);
      (*a2)(v13, v33, v11);
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_once();
LABEL_5:
    ;
  }
  while ((OS_os_log.signpostsEnabled.getter() & 1) != 0);
}

uint64_t closure #1 in Signpost._primitive(_:log:signpostID:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a3, v5, v7);
  OSSignpostID.rawValue.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  unint64_t v11 = *(void *)(a1 + 16);
  if (!v11)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v11 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v11 >= 3) {
    return kdebug_trace();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized withKDebugValues(_:_:closure:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  int64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    unsigned int v34 = a3;
    long long v40 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v9 = a2 + 32;
    do
    {
      outlined init with copy of CVarArg?(v9, (uint64_t)v39);
      outlined init with copy of CVarArg?((uint64_t)v39, (uint64_t)v37);
      uint64_t v10 = v38;
      if (v38)
      {
        __swift_project_boxed_opaque_existential_1(v37, v38);
        uint64_t v11 = CVarArg.kdebugValue(_:)(a1, v10);
        uint64_t v13 = v12;
        uint64_t v15 = v14;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        if (v13)
        {
          uint64_t v16 = swift_allocObject();
          *(void *)(v16 + 16) = v13;
          *(void *)(v16 + 24) = v15;
          uint64_t v17 = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v16 = 0;
        }
        uint64_t v18 = MEMORY[0x263F8E9C8];
      }
      else
      {
        uint64_t v18 = MEMORY[0x263F8E9C8];
        _ss7CVarArg_pSgWOhTm_0((uint64_t)v37, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        uint64_t v11 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 1;
      }
      _ss7CVarArg_pSgWOhTm_0((uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v18);
      id v19 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1);
        id v19 = v40;
      }
      unint64_t v21 = v19[2];
      unint64_t v20 = v19[3];
      int64_t v22 = v21 + 1;
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        id v19 = v40;
      }
      v19[2] = v22;
      uint64_t v23 = &v19[3 * v21];
      v23[4] = v11;
      void v23[5] = v17;
      v23[6] = v16;
      v9 += 40;
      --v6;
    }
    while (v6);
    uint64_t v4 = a4;
    uint64_t v5 = v34;
  }
  else
  {
    int64_t v22 = *(void *)(MEMORY[0x263F8EE78] + 16);
    id v19 = (void *)MEMORY[0x263F8EE78];
    if (!v22) {
      goto LABEL_23;
    }
  }
  v39[0] = v7;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
  uint64_t v7 = v39[0];
  uint64_t v24 = v19 + 5;
  do
  {
    if (*v24 == 1) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *(v24 - 1);
    }
    v39[0] = v7;
    unint64_t v27 = *(void *)(v7 + 16);
    unint64_t v26 = *(void *)(v7 + 24);
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      uint64_t v7 = v39[0];
    }
    *(void *)(v7 + 16) = v27 + 1;
    *(void *)(v7 + 8 * v27 + 32) = v25;
    v24 += 3;
    --v22;
  }
  while (v22);
LABEL_23:
  closure #1 in Signpost._primitive(_:log:signpostID:_:_:)(v7, v5, v4);
  swift_bridgeObjectRelease();
  uint64_t v28 = v19[2];
  if (v28)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = v19 + 6; ; i += 3)
    {
      uint64_t v31 = *(i - 2);
      unint64_t v32 = (void (*)(uint64_t))*(i - 1);
      if (v32)
      {
        if (v32 == (void (*)(uint64_t))1) {
          goto LABEL_26;
        }
        uint64_t v30 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(i - 1));
        v32(v30);
      }
      _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v31, (uint64_t)v32);
LABEL_26:
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

void type metadata accessor for _KDebuggableCVarArg?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t static Signpost.prefetchMakeView<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static Signpost.prefetchMakeView<A>(_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(char *, uint64_t);
  uint64_t v8;
  void v10[3];
  void (*v11)(uint64_t);

  v10[2] = a2;
  uint64_t v11 = a1;
  v10[1] = a3;
  unsigned __int8 v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v8 = v7(v6, v3);
  v11(v8);
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  return v7(v6, v3);
}

uint64_t static Signpost.prefetchOutputs<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static Signpost.prefetchMakeView<A>(_:)(a1, a2, a3);
}

uint64_t static Signpost.prefetchNotifyMaxItems()()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  unsigned __int8 v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t static Signpost.prefetchNotifyStartIndex(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  type metadata accessor for _KDebuggableCVarArg?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x263F8D6C8];
  *(_OWORD *)(v6 + 16) = xmmword_2461B9DC0;
  uint64_t v8 = MEMORY[0x263F8D750];
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 64) = v8;
  *(void *)(v6 + 32) = a1;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t CVarArg.kdebugValue(_:)(uint64_t a1, uint64_t a2)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v10((char *)v43 - v11, v2, a2, v9);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _KDebuggableCVarArg);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v44, (uint64_t)&v47);
    uint64_t v12 = __swift_project_boxed_opaque_existential_1(&v47, v50);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (one-time initialization token for moduleName != -1) {
      swift_once();
    }
    BOOL v15 = v13 == static Signpost.moduleName && v14 == *(void *)algn_268EF8908;
    if (v15 || (uint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v16 & 1) != 0))
    {
      uint64_t v17 = 0;
    }
    else
    {
      MEMORY[0x270FA5388](v16);
      LODWORD(v43[-2]) = v4;
      if ((v14 & 0x1000000000000000) != 0 || !(v14 & 0x2000000000000000 | v13 & 0x1000000000000000))
      {
        type metadata accessor for (arg: UInt64, destructor: (())?)();
        _StringGuts._slowWithCString<A>(_:)();
        uint64_t v28 = (uint64_t (*)())*((void *)&v44 + 1);
        uint64_t v17 = v44;
        uint64_t v30 = v45;
        if (!*((void *)&v44 + 1)) {
          goto LABEL_37;
        }
      }
      else
      {
        MEMORY[0x270FA5388](v24);
        v43[-2] = closure #1 in String.kdebugValue(_:)partial apply;
        v43[-1] = &v43[-4];
        if ((v14 & 0x2000000000000000) != 0)
        {
          v43[1] = v13;
          void v43[2] = v14 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v17 = kdebug_trace_string();
          uint64_t v38 = swift_allocObject();
          *(_DWORD *)(v38 + 16) = v4;
          *(void *)(v38 + 24) = v17;
          uint64_t v30 = swift_allocObject();
          *(void *)(v30 + 16) = closure #1 in closure #1 in String.kdebugValue(_:)partial apply;
          *(void *)(v30 + 24) = v38;
          uint64_t v28 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
        }
        else
        {
          if ((v13 & 0x1000000000000000) != 0)
          {
            uint64_t v25 = (v14 & 0xFFFFFFFFFFFFFFFLL) + 32;
            uint64_t v26 = v13 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v25 = _StringObject.sharedUTF8.getter();
          }
          uint64_t v17 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt64V3arg_yycSg10destructort_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6H28V3arg_yycSg10destructort_TG5SRyAGGAlM_xRi_zRi0_zlyytIsegr_SgAOtsAD_pIgyrzo_Tf1cn_n(v25, v26, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
          uint64_t v28 = v27;
          uint64_t v30 = v29;
          *(void *)&long long v44 = v17;
          if (!v27) {
            goto LABEL_37;
          }
        }
      }
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v28;
      *(void *)(v39 + 24) = v30;
    }
LABEL_37:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
    return v17;
  }
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  _ss7CVarArg_pSgWOhTm_0((uint64_t)&v44, &lazy cache variable for type metadata for _KDebuggableCVarArg?, &lazy cache variable for type metadata for _KDebuggableCVarArg, (uint64_t)&protocol descriptor for _KDebuggableCVarArg);
  uint64_t v18 = dispatch thunk of CVarArg._cVarArgEncoding.getter();
  if (*(void *)(v18 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, uint64_t))v10)(v7, v2, a2);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v21 = v20;
    if (one-time initialization token for moduleName != -1) {
      swift_once();
    }
    BOOL v22 = v19 == static Signpost.moduleName && v21 == *(void *)algn_268EF8908;
    if (v22 || (uint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v23 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    MEMORY[0x270FA5388](v23);
    LODWORD(v43[-2]) = v4;
    if ((v21 & 0x1000000000000000) != 0 || !(v21 & 0x2000000000000000 | v19 & 0x1000000000000000))
    {
      type metadata accessor for (arg: UInt64, destructor: (())?)();
      _StringGuts._slowWithCString<A>(_:)();
      uint64_t v17 = v47;
      uint64_t v35 = v48;
      uint64_t v37 = v49;
      if (!v48) {
        goto LABEL_12;
      }
    }
    else
    {
      MEMORY[0x270FA5388](v31);
      v43[-2] = partial apply for closure #1 in String.kdebugValue(_:);
      v43[-1] = &v43[-4];
      if ((v21 & 0x2000000000000000) != 0)
      {
        *(void *)&long long v44 = v19;
        *((void *)&v44 + 1) = v21 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v17 = kdebug_trace_string();
        uint64_t v41 = swift_allocObject();
        *(_DWORD *)(v41 + 16) = v4;
        *(void *)(v41 + 24) = v17;
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = partial apply for closure #1 in closure #1 in String.kdebugValue(_:);
        *(void *)(v37 + 24) = v41;
        uint64_t v35 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      }
      else
      {
        if ((v19 & 0x1000000000000000) != 0)
        {
          uint64_t v32 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v33 = v19 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v32 = _StringObject.sharedUTF8.getter();
        }
        uint64_t v17 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt64V3arg_yycSg10destructort_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6H28V3arg_yycSg10destructort_TG5SRyAGGAlM_xRi_zRi0_zlyytIsegr_SgAOtsAD_pIgyrzo_Tf1cn_n(v32, v33, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
        uint64_t v35 = v34;
        uint64_t v37 = v36;
        uint64_t v47 = v17;
        if (!v34) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v35;
    *(void *)(v42 + 24) = v37;
    swift_bridgeObjectRelease();
    return v17;
  }
  uint64_t v17 = *(void *)(v18 + 32);
LABEL_12:
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t closure #1 in String.kdebugValue(_:)@<X0>(int a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = kdebug_trace_string();
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = closure #1 in closure #1 in String.kdebugValue(_:)partial apply;
  *(void *)(result + 24) = v5;
  *a2 = v4;
  a2[1] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[2] = result;
  return result;
}

uint64_t one-time initialization function for continuation()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  __swift_allocate_value_buffer(v0, static OSSignpostID.continuation);
  __swift_project_value_buffer(v0, (uint64_t)static OSSignpostID.continuation);
  return OSSignpostID.init(_:)();
}

unint64_t instantiation function for generic protocol witness table for String(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(a1 + 8) = result;
  return result;
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Signpost(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 19) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 19) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Signpost()
{
  return &type metadata for Signpost;
}

unsigned char *storeEnumTagSinglePayload for Signpost.Stability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BBAD34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Signpost.Stability()
{
  return &unk_26FA7FD88;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Signpost.Style(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Signpost.Style(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t destructiveInjectEnumTag for Signpost.Style(uint64_t result, char a2)
{
  *(unsigned char *)(result + 17) = a2 & 1;
  return result;
}

void *type metadata accessor for Signpost.Style()
{
  return &unk_26FA7FCF8;
}

unint64_t lazy protocol witness table accessor for type Signpost.Stability and conformance Signpost.Stability()
{
  unint64_t result = lazy protocol witness table cache variable for type Signpost.Stability and conformance Signpost.Stability;
  if (!lazy protocol witness table cache variable for type Signpost.Stability and conformance Signpost.Stability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signpost.Stability and conformance Signpost.Stability);
  }
  return result;
}

uint64_t partial apply for closure #1 in String.kdebugValue(_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in String.kdebugValue(_:)(*(_DWORD *)(v1 + 16), a1);
}

uint64_t sub_245BBAEA4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s6UInt64V3arg_yycSg10destructort_Tg507_sSRys4f5VGxs5e30_pIgyrzo_ACxsAD_pIegyrzr_lTRs6H28V3arg_yycSg10destructort_TG5SRyAGGAlM_xRi_zRi0_zlyytIsegr_SgAOtsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

double partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<D0>(uint64_t a1@<X8>)
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  double result;
  uint64_t v5;
  long long v6;
  uint64_t v7;

  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v6);
  if (!v2)
  {
    uint64_t v5 = v7;
    uint64_t result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 16) = v5;
  }
  return result;
}

uint64_t sub_245BBAF40()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in String.kdebugValue(_:)()
{
  return kdebug_trace_string();
}

uint64_t sub_245BBAFB0()
{
  return swift_deallocObject();
}

uint64_t sub_245BBAFC0()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t closure #1 in String.kdebugValue(_:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in String.kdebugValue(_:)(a1);
}

uint64_t Text.textVariant<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a6 + 8))(a5, a6);
  v14[0] = a1;
  v14[1] = a2;
  char v15 = a3 & 1;
  uint64_t v16 = a4;
  uint64_t v12 = type metadata accessor for _TextVariantPreference();
  return _TextVariantPreference.body<A>(_:)((uint64_t)v14, v12, (uint64_t)&type metadata for Text, (uint64_t)&protocol witness table for Text, a7);
}

uint64_t _TextVariantPreference.body<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  uint64_t v33 = a5;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  double v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = type metadata accessor for _ConditionalContent();
  uint64_t v32 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  BOOL v22 = (char *)&v28 - v21;
  if (*(ValueMetadata **)(v30 + 16) == &type metadata for SizeDependentTextVariant)
  {
    View.modifier<A>(_:)(v20, a3, &type metadata for VariantThatFitsModifier);
    uint64_t v34 = a4;
    uint64_t v35 = &protocol witness table for VariantThatFitsModifier;
    uint64_t WitnessTable = swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v15, v13, WitnessTable);
    uint64_t v31 = v19;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v29 + 8);
    v25(v15, v13);
    static ViewBuilder.buildExpression<A>(_:)(v18, v13, WitnessTable);
    v25(v18, v13);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v15, v13, (uint64_t)v22);
    v25(v15, v13);
    uint64_t v19 = v31;
  }
  else
  {
    static ViewBuilder.buildExpression<A>(_:)(v31, a3, a4);
    static ViewBuilder.buildExpression<A>(_:)(v12, a3, a4);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    v23(v12, a3);
    uint64_t v40 = a4;
    uint64_t v41 = &protocol witness table for VariantThatFitsModifier;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v9, a3, (uint64_t)v22);
    v23(v9, a3);
  }
  uint64_t v38 = a4;
  uint64_t v39 = &protocol witness table for VariantThatFitsModifier;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = a4;
  uint64_t v26 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22, v19, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v22, v19);
}

uint64_t type metadata accessor for _TextVariantPreference()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TextSizeVariant.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t TextSizeVariant.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*TextSizeVariant.rawValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::TextSizeVariant __swiftcall TextSizeVariant.init(rawValue:)(SwiftUI::TextSizeVariant rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static TextSizeVariant.regular.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static TextSizeVariant.compact.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static TextSizeVariant.small.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static TextSizeVariant.tiny.getter(void *a1@<X8>)
{
  *a1 = 3;
}

BOOL static TextSizeVariant.< infix(_:_:)(void *a1, void *a2)
{
  return *a2 < *a1;
}

void TextSizeVariant.nextUp.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = v2 - 1;
    if (!__OFSUB__(v2, 1)) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t v3 = 0;
LABEL_6:
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v2 == 0;
}

void TextSizeVariant.nextDown.getter(void *a1@<X8>)
{
  if (__OFADD__(*v1, 1)) {
    __break(1u);
  }
  else {
    *a1 = *v1 + 1;
  }
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance TextSizeVariant(void *a1, void *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance TextSizeVariant(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance TextSizeVariant(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance TextSizeVariant(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t TextSizeVariant.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TextSizeVariant.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TextSizeVariant@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TextSizeVariant(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t dispatch thunk of TextVariantPreference._preference.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for FixedTextVariant()
{
  return &type metadata for FixedTextVariant;
}

ValueMetadata *type metadata accessor for SizeDependentTextVariant()
{
  return &type metadata for SizeDependentTextVariant;
}

uint64_t type metadata completion function for SizeFittingTextCache()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t StickyTextSizeFittingLogic.suggestedVariant(for:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + 41)) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  double v4 = *(double *)(v2 + 32);
  char v5 = *(unsigned char *)(v2 + 1);
  double v6 = *(double *)(result + 16);
  if (*(unsigned char *)v2)
  {
    if (*(unsigned char *)(v2 + 1)) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  double v7 = *(double *)result;
  double v8 = *(double *)(v2 + 16);
  if (*(unsigned char *)(result + 8)) {
    double v7 = INFINITY;
  }
  if (*(unsigned char *)(v2 + 24)) {
    double v8 = INFINITY;
  }
  if (v7 > v8) {
    char v5 = 1;
  }
  if (v5)
  {
    if (v7 <= v8) {
      goto LABEL_13;
    }
LABEL_19:
    uint64_t v3 = 0;
    char v9 = 1;
    goto LABEL_20;
  }
LABEL_14:
  if (*(unsigned char *)(result + 24)) {
    double v6 = INFINITY;
  }
  if (*(unsigned char *)(v2 + 40)) {
    double v4 = INFINITY;
  }
  if (v6 > v4) {
    goto LABEL_19;
  }
LABEL_13:
  char v9 = 0;
LABEL_20:
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v9;
  return result;
}

uint64_t _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)(uint64_t a1, char a2, char a3)
{
  double v4 = *(double *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  double v6 = *(double *)(v3 + 16);
  if (a2)
  {
    if (a3) {
      return 1;
    }
    goto LABEL_11;
  }
  double v8 = *(double *)v3;
  double v9 = *(double *)a1;
  if (*(unsigned char *)(v3 + 8)) {
    double v8 = INFINITY;
  }
  if (*(unsigned char *)(a1 + 8)) {
    double v9 = INFINITY;
  }
  uint64_t result = v8 <= v9;
  if (v8 <= v9 && (a3 & 1) == 0)
  {
LABEL_11:
    if (*(unsigned char *)(v3 + 24)) {
      double v6 = INFINITY;
    }
    if (v5) {
      double v4 = INFINITY;
    }
    return v6 <= v4;
  }
  return result;
}

Swift::Void __swiftcall StickyTextSizeFittingLogic.onInvalidation(of:)(SwiftUI::TextSizeVariant of)
{
  if ((*(unsigned char *)(v1 + 41) & 1) == 0 && *(void *)of.rawValue == *(void *)(v1 + 8))
  {
    *(unsigned char *)(v1 + 40) = 0;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(unsigned char *)(v1 + 41) = 1;
  }
}

uint64_t SizeFittingTextCache.CacheEntry.init(resolver:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SizeFittingTextCache.CacheEntry();
  uint64_t v7 = a3 + *(int *)(v6 + 52);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for SizeFittingTextCacheValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(unsigned char *)(a3 + *(int *)(v6 + 56)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v9 = v8;
  uint64_t v27 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a5;
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[2];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v19 = *(int *)(v18 + 48);
  uint64_t v20 = SizeFittingTextCache.CacheEntry.result(for:)((char *)&v22 - v16, a1, (uint64_t)a6);
  v17[v19] = v20 & 1;
  if (v20) {
    v23(v20);
  }
  v26(v17);
  $defer #1 <A, B><A1>() in SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(v9, (uint64_t)v17, v13, a6[3], v27, v12, a6[5]);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, TupleTypeMetadata2);
}

uint64_t SizeFittingTextCache.CacheEntry.result(for:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v26 = a1;
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t v25 = v6;
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for SizeFittingTextCacheValue();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v21 - v15;
  uint64_t v17 = v3 + *(int *)(a3 + 52);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v17, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v18 = v24;
  }
  else
  {
    uint64_t v23 = v8;
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v22(v16, v11, v7);
    uint64_t v18 = v24;
    if (((*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 32))(v24, *(unsigned __int8 *)(v3 + *(int *)(a3 + 56)), v25, v5) & 1) == 0)
    {
      v22(v26, v16, v7);
      uint64_t v19 = 0;
      uint64_t v8 = v23;
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v7);
    uint64_t v8 = v23;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v18, v25, v5);
  uint64_t v19 = 1;
LABEL_7:
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v17, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v17, v26, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v7);
  *(unsigned char *)(v3 + *(int *)(a3 + 56)) = 0;
  return v19;
}

uint64_t $defer #1 <A, B><A1>() in SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for SizeFittingTextCacheValue();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  v15.n128_f64[0] = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v21 - v16;
  uint64_t v18 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))((char *)&v21 - v16, a2, v12, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, v12);
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v19 = type metadata accessor for SizeFittingTextCache.CacheEntry();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 40))(v22 + *(int *)(v19 + 52), v17, v13);
}

uint64_t SizeFittingTextCache.CacheEntry.narrowerVariant.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  double v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, void, double))(*(void *)(v9 + 32) + 48))(v5, *(void *)(v9 + 32), v6);
  uint64_t result = SizeFittingTextCache.CacheEntry.init(resolver:)((uint64_t)v8, v5, a2);
  *(unsigned char *)(a2 + *(int *)(a1 + 56)) = *(unsigned char *)(v2 + *(int *)(a1 + 56));
  return result;
}

uint64_t specialized SizeFittingTextCache.input.setter(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v20 = a1[6];
  uint64_t v21 = a1[3];
  if (a2)
  {
    uint64_t v8 = v2 + 5;
    swift_beginAccess();
    uint64_t v9 = *(void *)(v2[5] + 16);
    if (v9)
    {
      swift_beginAccess();
      unint64_t v10 = *v8;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v8 = v10;
      uint64_t v19 = v4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_10:
      }
        unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      for (unint64_t i = 0; i != v9; ++i)
      {
        *uint64_t v8 = v10;
        if (i >= *(void *)(v10 + 16))
        {
          __break(1u);
          goto LABEL_10;
        }
        type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
        *(unsigned char *)(v10
                 + ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80))
                 + *(void *)(*(void *)(v13 - 8) + 72) * i
                 + *(int *)(v13 + 56)) = 1;
        unint64_t v10 = *v8;
      }
      swift_endAccess();
      uint64_t v4 = v19;
    }
  }
  swift_beginAccess();
  uint64_t v14 = v2[12];
  uint64_t v15 = v2[13];
  uint64_t v16 = v2[14];
  uint64_t v17 = v2[15];
  v2[12] = v3;
  v2[13] = v4;
  v2[14] = v5;
  v2[15] = v21;
  v2[16] = v6;
  v2[17] = v7;
  v2[18] = v20;
  outlined consume of Text?(v14, v15, v16, v17);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized SizeFittingTextCache.input.setter(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for (value: ResolvableStringResolutionContext, changed: Bool)();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v25[-v13];
  outlined init with take of ResolvableStringResolutionContext(a1, (uint64_t)&v25[-v13]);
  v14[*(int *)(v9 + 48)] = a2;
  uint64_t v15 = *(int *)(v9 + 48);
  outlined init with copy of ResolvedTextHelper((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  v11[v15] = a2;
  outlined destroy of ResolvedTextHelper.NextUpdate((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  if (a2)
  {
    uint64_t v16 = (void **)(v2 + 5);
    swift_beginAccess();
    uint64_t v17 = *(void *)(v2[5] + 16);
    if (v17)
    {
      swift_beginAccess();
      uint64_t v18 = *v16;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char *v16 = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_10:
      }
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      unint64_t v20 = 0;
      uint64_t v21 = 13;
      do
      {
        char *v16 = v18;
        if (v20 >= v18[2])
        {
          __break(1u);
          goto LABEL_10;
        }
        ++v20;
        LOBYTE(v18[v21]) = 1;
        uint64_t v18 = *v16;
        v21 += 10;
      }
      while (v17 != v20);
      swift_endAccess();
    }
  }
  uint64_t v22 = *(int *)(v9 + 48);
  outlined init with take of ResolvableStringResolutionContext((uint64_t)v14, (uint64_t)v11);
  v11[v22] = a2 & 1;
  outlined init with take of ResolvableStringResolutionContext((uint64_t)v11, (uint64_t)v7);
  uint64_t v23 = (uint64_t)v2 + *(void *)(*v2 + 144);
  swift_beginAccess();
  outlined assign with take of ResolvableStringResolutionContext((uint64_t)v7, v23);
  return swift_endAccess();
}

uint64_t specialized SizeFittingTextCache.withValue<A>(for:compute:)(void *a1, char a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v11 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = a2 & 1;
  LOBYTE(v32[0]) = v14;
  char v35 = a4 & 1;
  specialized SizeFittingTextCache.suggestedVariant(for:)((uint64_t)a1, v14, a3, a4 & 1, (uint64_t)&v33);
  if (v34)
  {
    swift_beginAccess();
    swift_retain();
    LOBYTE(v32[0]) = v14;
    char v35 = a4 & 1;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(a1, v14, *(double *)&a3, a4 & 1, a5 + 2, (uint64_t)a5, (uint64_t)a1, v14, (uint64_t *)v32, a3, a4 & 1, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t (*)(uint64_t, uint64_t (*)(void, void), void, double))specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t *)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
    swift_endAccess();
    unint64_t v15 = v32[0];
  }
  else
  {
    unint64_t v15 = v33;
    v32[0] = v33;
  }
  uint64_t v16 = (uint64_t)a5 + *(void *)(*a5 + 144);
  swift_beginAccess();
  outlined init with copy of ResolvedTextHelper(v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  swift_beginAccess();
  uint64_t v17 = (void *)a5[5];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  a5[5] = v17;
  if (result)
  {
    if ((v15 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  uint64_t v17 = (void *)result;
  a5[5] = result;
  if ((v15 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if (v15 >= v17[2])
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v19 = &v17[10 * v15];
  unint64_t v20 = v19 + 4;
  uint64_t v21 = v19[9];
  uint64_t v23 = v19[11];
  uint64_t v22 = v19[12];
  if (v21 && *((unsigned char *)v19 + 104) != 1)
  {
    uint64_t v25 = v19[9];
    uint64_t v27 = v19[10];
    uint64_t v24 = (uint64_t)v13;
  }
  else
  {
    uint64_t v24 = (uint64_t)v13;
    uint64_t v25 = DynamicTextView.DynamicTextHelper.value(for:)((uint64_t)v13);
    uint64_t v27 = v26;
    v31[0] = v28;
    v31[1] = v5;
    uint64_t v30 = v29;
    outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v21);
    uint64_t v22 = v30;
    uint64_t v23 = v31[0];
  }
  *((unsigned char *)v20 + 72) = 0;
  v20[5] = v25;
  v20[6] = v27;
  v20[7] = v23;
  v20[8] = v22;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined destroy of ResolvedTextHelper.NextUpdate(v24, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  swift_endAccess();
  outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v25);
  return v25;
}

uint64_t SizeFittingTextCache.withValue<A>(for:compute:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v28 = a4;
  uint64_t v30 = a3;
  uint64_t v29 = a2;
  uint64_t v31 = a5;
  uint64_t v9 = *v6;
  uint64_t v10 = *(void *)(*v6 + 96);
  uint64_t v11 = *(void *)(*v6 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v15 = (char *)&v27 - v14;
  char v16 = *((unsigned char *)a1 + 8);
  uint64_t v17 = a1[2];
  char v18 = *((unsigned char *)a1 + 24);
  uint64_t v41 = *a1;
  LOBYTE(v42) = v16;
  uint64_t v43 = v17;
  LOBYTE(v44) = v18;
  SizeFittingTextCache.sizeVariant(for:)((uint64_t)&v41, v45);
  Swift::Int v27 = v45[0];
  uint64_t v19 = (uint64_t)v6 + *(void *)(*v6 + 144);
  swift_beginAccess();
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v32 = AssociatedTypeWitness;
  v20(v15, v19, AssociatedTypeWitness);
  uint64_t v34 = v11;
  uint64_t v35 = *(void *)(v9 + 88);
  uint64_t v21 = v35;
  uint64_t v36 = a4;
  uint64_t v37 = v10;
  uint64_t v38 = *(void *)(v9 + 104);
  uint64_t v22 = v38;
  uint64_t v39 = v29;
  uint64_t v40 = v30;
  swift_beginAccess();
  uint64_t v41 = v11;
  uint64_t v42 = v21;
  uint64_t v43 = v10;
  uint64_t v44 = v22;
  uint64_t v23 = (void *)type metadata accessor for SizeFittingTextCache.CacheEntry();
  uint64_t v24 = type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  Array._checkSubscript_mutating(_:)(v27);
  SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)((uint64_t)v15, (void (*)(uint64_t))_ViewInputs.base.modify, 0, (void (*)(char *))partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)v33, v23, v28, v31);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v32);
  _ViewInputs.base.modify(v24, v25);
  return swift_endAccess();
}

uint64_t specialized SizeFittingTextCache.withResolver<A>(for:compute:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v24 = a7;
  uint64_t v25 = a6;
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  unint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13 - 8);
  char v16 = (char *)&v24 - v15;
  unint64_t v17 = a2 & 1;
  LOBYTE(v26[0]) = v17;
  unsigned __int8 v18 = a4 & 1;
  char v29 = a4 & 1;
  specialized SizeFittingTextCache.suggestedVariant(for:)((uint64_t)a1, v17, a3, a4 & 1, (uint64_t)&v27);
  if (v28)
  {
    a4 = a5 + 16;
    swift_beginAccess();
    swift_retain();
    LOBYTE(v26[0]) = v17;
    char v29 = v18;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(a1, v17, *(double *)&a3, v18, (void *)(a5 + 16), a5, (uint64_t)a1, v17, (uint64_t *)v26, a3, v18, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t (*)(uint64_t, uint64_t (*)(void, void), void, double))specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t *)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
    swift_endAccess();
    unint64_t v19 = v26[0];
  }
  else
  {
    unint64_t v19 = v27;
    v26[0] = v27;
  }
  unint64_t v20 = (unint64_t *)(a5 + 40);
  swift_beginAccess();
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v21 = *(void *)(a5 + 40);
  if (v19 >= *(void *)(v21 + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    a4 = specialized _ArrayBuffer._consumeAndCreateNew()(a4);
    *unint64_t v20 = a4;
    goto LABEL_8;
  }
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v14 = *(void *)(v14 + 72) * v19;
  outlined init with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(v21 + v17 + v14, (uint64_t)v16);
  closure #2 in SizeFittingTextFilter.updateValue()((uint64_t)v16, v25);
  if (!v7) {
    goto LABEL_10;
  }
  swift_beginAccess();
  a4 = *v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v20 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (v19 < *(void *)(a4 + 16))
  {
LABEL_13:
    outlined assign with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v16, a4 + v17 + v14);
    swift_endAccess();
    return outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v16);
  }
  __break(1u);
LABEL_10:
  swift_beginAccess();
  a4 = *v20;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v20 = a4;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(a4);
    a4 = result;
    *unint64_t v20 = result;
  }
  if (v19 < *(void *)(a4 + 16)) {
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized SizeFittingTextCache.withResolver<A>(for:compute:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v14 = v10;
  uint64_t v18 = a3;
  unint64_t v19 = (void *)a1;
  uint64_t v20 = a2 & 1;
  LOBYTE(v37[0]) = a2 & 1;
  uint64_t v21 = (void *)(a4 & 1);
  char v40 = a4 & 1;
  specialized SizeFittingTextCache.suggestedVariant(for:)(a1, a2 & 1, a3, a4 & 1, (uint64_t)&v38);
  if (v39)
  {
    uint64_t v11 = a5 + 16;
    swift_beginAccess();
    swift_retain();
    LOBYTE(v37[0]) = v20;
    char v40 = (char)v21;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(v19, v20, *(double *)&v18, v21, (void *)(a5 + 16), a5, (uint64_t)v19, v20, (uint64_t *)v37, v18, v21, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t (*)(uint64_t, uint64_t (*)(void, void), void, double))specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t *)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
    swift_endAccess();
    unint64_t v22 = v37[0];
  }
  else
  {
    unint64_t v22 = v38;
  }
  uint64_t v23 = (uint64_t *)(a5 + 40);
  swift_beginAccess();
  if ((v22 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v24 = *(void *)(a5 + 40);
  if (v22 >= *(void *)(v24 + 16))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v21);
    uint64_t v21 = (void *)result;
    *uint64_t v23 = result;
    goto LABEL_11;
  }
  uint64_t v33 = 10 * v22;
  uint64_t v25 = v24 + 80 * v22;
  unint64_t v19 = *(void **)(v25 + 32);
  uint64_t v12 = *(void *)(v25 + 40);
  uint64_t v13 = *(void *)(v25 + 48);
  uint64_t v27 = *(void *)(v25 + 56);
  uint64_t v26 = *(void *)(v25 + 64);
  uint64_t v20 = *(void *)(v25 + 72);
  uint64_t v18 = *(void *)(v25 + 80);
  uint64_t v11 = *(void *)(v25 + 88);
  uint64_t v14 = *(void *)(v25 + 96);
  int v41 = *(unsigned __int8 *)(v25 + 104);
  double v28 = a9;
  if ((~*(void *)&a9 & 0x7FF0000000000000) == 0 && (*(void *)&a9 & 0xFFFFFFFFFFFFFLL) != 0) {
    double v28 = 0.0;
  }
  double v29 = a10;
  if ((~*(void *)&a10 & 0x7FF0000000000000) == 0 && (*(void *)&a10 & 0xFFFFFFFFFFFFFLL) != 0) {
    double v29 = 0.0;
  }
  uint64_t v34 = v26;
  *(void *)(a6 + 56) = v26;
  *(double *)(a6 + 64) = v28;
  *(void *)(a6 + 72) = ((~*(void *)&a9 & 0x7FF0000000000000) == 0) & ((*(void *)&a9 & 0xFFFFFFFFFFFFFLL) != 0);
  *(double *)(a6 + 80) = v29;
  *(_WORD *)(a6 + 88) = (~*(void *)&a10 & 0x7FF0000000000000) == 0 && (*(void *)&a10 & 0xFFFFFFFFFFFFFLL) != 0;
  swift_beginAccess();
  uint64_t v21 = (void *)*v23;
  swift_retain();
  swift_retain();
  outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v20);
  swift_retain();
  uint64_t v35 = v27;
  swift_retain();
  outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v20);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v23 = (uint64_t)v21;
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
LABEL_11:
  if (v22 >= v21[2])
  {
    __break(1u);
  }
  else
  {
    uint64_t v31 = &v21[v33];
    uint64_t v32 = v21[v33 + 9];
    v31[4] = v19;
    v31[5] = v12;
    v31[6] = v13;
    v31[7] = v35;
    v31[8] = v34;
    v31[9] = v20;
    v31[10] = v18;
    v31[11] = v11;
    v31[12] = v14;
    *((unsigned char *)v31 + 104) = v41;
    swift_endAccess();
    swift_release();
    swift_release();
    outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v32);
    swift_release();
    swift_release();
    outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v20);
    return swift_release();
  }
  return result;
}

uint64_t SizeFittingTextCache.sizeVariant(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double v3 = *(double *)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  double v8 = *(double *)a1;
  char v9 = v4;
  double v10 = v5;
  char v11 = v6;
  uint64_t result = SizeFittingTextCache.suggestedVariant(for:)((uint64_t)&v8, (uint64_t)&v12);
  if (v13)
  {
    MEMORY[0x270FA5388](result);
    swift_beginAccess();
    LOBYTE(v12) = v4;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(v3, v4, v5, v6, (unint64_t (*)(uint64_t *__return_ptr, uint64_t *, unint64_t))partial apply for closure #1 in SizeFittingTextCache.sizeVariant(for:), a2);
    return swift_endAccess();
  }
  else
  {
    *a2 = v12;
  }
  return result;
}

uint64_t closure #1 in SizeFittingTextCache.sizeVariant(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v35 = a7;
  char v11 = (void *)*a2;
  Swift::Int v12 = *(void *)a1;
  if (*(unsigned char *)(a1 + 8)) {
    Swift::Int v13 = 0;
  }
  else {
    Swift::Int v13 = *(void *)a1;
  }
  uint64_t v14 = v13;
  v49[0] = v13;
  Swift::Int v39 = v11[10];
  Swift::Int v41 = v39;
  Swift::Int v38 = v11[11];
  Swift::Int v42 = v38;
  Swift::Int v37 = v11[12];
  Swift::Int v43 = v37;
  Swift::Int v36 = v11[13];
  Swift::Int v44 = v36;
  uint64_t v45 = a3;
  char v46 = a4 & 1;
  uint64_t v47 = a5;
  char v48 = a6 & 1;
  uint64_t result = SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v49, (uint64_t)_ViewInputs.base.modify, 0, (uint64_t)partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v40, MEMORY[0x263F8D4F8], (uint64_t)v50);
  if (v50[0] == 1)
  {
    if (v14 < 1)
    {
      *uint64_t v35 = v14;
    }
    else
    {
      do
      {
        Swift::Int v17 = v12 - 1;
        v49[0] = v12 - 1;
        MEMORY[0x270FA5388](result);
        Swift::Int v27 = v39;
        Swift::Int v28 = v38;
        Swift::Int v29 = v37;
        Swift::Int v30 = v36;
        uint64_t v31 = a3;
        char v32 = a4 & 1;
        uint64_t v33 = a5;
        char v34 = a6 & 1;
        uint64_t result = SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v49, (uint64_t)_ViewInputs.base.modify, 0, (uint64_t)partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v26, MEMORY[0x263F8D4F8], (uint64_t)v50);
        if (v50[0] != 1) {
          break;
        }
        --v12;
      }
      while (v17);
      *uint64_t v35 = v12;
    }
    return result;
  }
  Swift::Int v18 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  unint64_t v19 = v35;
  uint64_t v51 = v14 + 1;
  if (specialized getter of narrowerVariantsMightExist #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)(&v51, (uint64_t)a2))
  {
    uint64_t v20 = swift_beginAccess();
    do
    {
      v49[0] = v18;
      MEMORY[0x270FA5388](v20);
      Swift::Int v27 = v39;
      Swift::Int v28 = v38;
      Swift::Int v29 = v37;
      Swift::Int v30 = v36;
      uint64_t v31 = a3;
      char v32 = a4 & 1;
      uint64_t v33 = a5;
      char v34 = a6 & 1;
      uint64_t result = SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v49, (uint64_t)_ViewInputs.base.modify, 0, (uint64_t)partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v26, MEMORY[0x263F8D4F8], (uint64_t)v50);
      if (v50[0]) {
        break;
      }
      Swift::Int v18 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        goto LABEL_21;
      }
      ++v51;
      uint64_t v20 = specialized getter of narrowerVariantsMightExist #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)(&v51, (uint64_t)a2);
    }
    while ((v20 & 1) != 0);
  }
  swift_beginAccess();
  uint64_t v21 = v51;
  swift_beginAccess();
  uint64_t v22 = a2[5];
  swift_bridgeObjectRetain();
  v49[0] = v39;
  v49[1] = v38;
  v49[2] = v37;
  v49[3] = v36;
  uint64_t v23 = type metadata accessor for SizeFittingTextCache.CacheEntry();
  uint64_t v24 = MEMORY[0x24C522E60](v22, v23);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v25 = v24 - 1;
  if (__OFSUB__(v24, 1)) {
    goto LABEL_22;
  }
  if (v25 >= v21) {
    uint64_t v25 = v21;
  }
  *unint64_t v19 = v25;
  return result;
}

BOOL specialized SizeFittingTextCacheValue.fits(_:)(unint64_t a1, char a2, unint64_t a3, char a4, __n128 a5, __n128 a6)
{
  uint64_t v8 = a2 & 1;
  unsigned __int8 v9 = a4 & 1;
  double v10 = *(unsigned char **)v6;
  uint64_t v11 = *(void *)(v6 + 24);
  double v40 = *(double *)(v6 + 8);
  int v37 = a4 & 1;
  unsigned int v38 = a2 & 1;
  uint64_t v39 = *(void *)(v6 + 16);
  if (v11)
  {
    double v48 = *(double *)v6;
    Swift::Int v13 = *(void (**)(unint64_t, uint64_t, unint64_t, void, double *))(*(void *)v11 + 104);
    swift_retain();
    swift_retain();
    LOBYTE(v56[0]) = v8;
    LOBYTE(v53) = v9;
    uint64_t v15 = v8;
    double v16 = *(double *)&a1;
    v13(a1, v15, a3, v9, &v48);
    memset(v56, 0, sizeof(v56));
    char v57 = 1;
    (*(void (**)(_OWORD *__return_ptr, _OWORD *))(*(void *)v10 + 256))(v43, v56);
    swift_release();
    swift_release();
    if ((v45 & 1) == 0) {
      goto LABEL_3;
    }
    return 0;
  }
  if (a2)
  {
    if (a4)
    {
      swift_beginAccess();
      return 1;
    }
    a5.n128_u64[0] = 0x7FF0000000000000;
  }
  else
  {
    a5.n128_u64[0] = a1;
    if (a4)
    {
      double v16 = *(double *)&a1;
      a6.n128_u64[0] = 0x7FF0000000000000;
      goto LABEL_17;
    }
  }
  double v16 = *(double *)&a1;
  a6.n128_u64[0] = a3;
LABEL_17:
  memset(v43, 0, sizeof(v43));
  char v44 = 1;
  (*(void (**)(uint64_t *__return_ptr, _OWORD *, __n128, __n128))(*(void *)v10 + 256))(v46, v43, a5, a6);
  if (v47) {
    return 0;
  }
LABEL_3:
  swift_beginAccess();
  if ((v10[97] & 1) == 0)
  {
    if ((a2 & 1) == 0)
    {
      double v24 = v16;
      if (v39)
      {
        double v48 = v40;
        uint64_t v25 = *(double (**)(void, uint64_t, unint64_t, void, double *))(*(void *)v39 + 104);
        swift_retain();
        swift_retain();
        LOBYTE(v53) = 1;
        char v26 = a4;
        double v17 = *(double *)&a3;
        double v27 = v25(0, 1, a3, a4 & 1, &v48);
        swift_release();
        swift_release();
      }
      else
      {
        double v48 = 0.0;
        char v49 = 1;
        double v17 = *(double *)&a3;
        unint64_t v50 = a3;
        char v26 = a4;
        char v51 = a4 & 1;
        double v27 = (*(double (**)(double *))(**(void **)&v40 + 224))(&v48);
      }
      int v30 = v37;
      if (v27 > v16)
      {
        uint64_t v29 = 0;
        v22.n128_f64[0] = v27 + -1.0;
        double v19 = v27 + -1.0;
        double v31 = v17;
        double v32 = v27 + -1.0;
        goto LABEL_28;
      }
    }
    return 1;
  }
  if (a4) {
    return 1;
  }
  double v17 = *(double *)&a3;
  if (v39)
  {
    double v48 = v40;
    Swift::Int v18 = *(void (**)(void))(*(void *)v39 + 104);
    swift_retain();
    swift_retain();
    LOBYTE(v53) = a2 & 1;
    v18(*(void *)&v16);
    double v19 = v16;
    double v21 = v20;
    swift_release();
    swift_release();
  }
  else
  {
    double v19 = v16;
    double v48 = v16;
    char v49 = a2 & 1;
    unint64_t v50 = 0;
    char v51 = 1;
    (*(void (**)(double *))(**(void **)&v40 + 224))(&v48);
    double v21 = v23.n128_f64[0];
  }
  uint64_t v29 = v38;
  if (v21 <= *(double *)&a3) {
    return 1;
  }
  int v30 = 0;
  double v31 = v21 + -1.0;
  double v24 = v19;
  if (a2) {
    double v32 = INFINITY;
  }
  else {
    double v32 = v19;
  }
  v22.n128_f64[0] = v19;
  char v26 = a4;
LABEL_28:
  v23.n128_f64[0] = v31;
  double v33 = INFINITY;
  if ((a2 & 1) == 0) {
    double v33 = v24;
  }
  if (v32 <= v33)
  {
    double v34 = v17;
    double v35 = v30 ? INFINITY : v31;
    if (v26) {
      double v34 = INFINITY;
    }
    if (v35 <= v34) {
      return 1;
    }
  }
  if (v11)
  {
    double v48 = *(double *)&v10;
    Swift::Int v36 = *(void (**)(void, uint64_t, void, void, double *))(*(void *)v11 + 104);
    swift_retain();
    swift_retain();
    LOBYTE(v53) = v29;
    v36(*(void *)&v19, v29, *(void *)&v31, v30, &v48);
    long long v53 = 0u;
    long long v54 = 0u;
    char v55 = 1;
    (*(void (**)(double *__return_ptr, long long *))(*(void *)v10 + 256))(&v48, &v53);
    swift_release();
    swift_release();
  }
  else
  {
    if (v29)
    {
      if (v30) {
        return 1;
      }
      v22.n128_u64[0] = 0x7FF0000000000000;
    }
    else if (v30)
    {
      v23.n128_u64[0] = 0x7FF0000000000000;
    }
    long long v53 = 0u;
    long long v54 = 0u;
    char v55 = 1;
    (*(void (**)(double *__return_ptr, long long *, __n128, __n128))(*(void *)v10 + 256))(&v48, &v53, v22, v23);
  }
  return !(v52 & 1);
}

uint64_t SizeFittingTextCacheValue.fits(_:)(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  double v6 = *(double *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  double v8 = *(double *)(a1 + 16);
  int v9 = *(unsigned __int8 *)(a1 + 24);
  double v22 = *(double *)a1;
  char v23 = v7 & 1;
  double v24 = v8;
  char v25 = v9;
  if (SizeFittingTextCacheValue.truncates(in:)((uint64_t)&v22, a2, a3, a4))
  {
    char v10 = 0;
    return v10 & 1;
  }
  double v11 = v6;
  uint64_t v12 = *v4;
  swift_beginAccess();
  if (*(unsigned char *)(v12 + 97))
  {
    char v10 = 1;
    if (v9) {
      return v10 & 1;
    }
    double v22 = v11;
    char v23 = v7 & 1;
    double v24 = 0.0;
    char v25 = 1;
    v13.n128_f64[0] = (*(double (**)(double *, uint64_t, void))(*(void *)(a2 + 24) + 48))(&v22, 1, *(void *)(a2 + 16));
    if (v13.n128_f64[0] <= v8) {
      return v10 & 1;
    }
    int v15 = 0;
    v13.n128_f64[0] = v13.n128_f64[0] + -1.0;
    if (v7) {
      double v16 = INFINITY;
    }
    else {
      double v16 = v11;
    }
    char v17 = v7;
    v14.n128_f64[0] = v11;
  }
  else
  {
    char v10 = 1;
    if (v7) {
      return v10 & 1;
    }
    double v22 = 0.0;
    char v23 = 1;
    double v24 = v8;
    char v25 = v9;
    v13.n128_f64[0] = (*(double (**)(double *, void, void))(*(void *)(a2 + 24) + 48))(&v22, 0, *(void *)(a2 + 16));
    if (v13.n128_f64[0] <= v11) {
      return v10 & 1;
    }
    char v17 = 0;
    v14.n128_f64[0] = v13.n128_f64[0] + -1.0;
    int v15 = v9;
    v13.n128_f64[0] = v8;
    double v16 = v14.n128_f64[0];
  }
  double v18 = INFINITY;
  if ((v7 & 1) == 0) {
    double v18 = v11;
  }
  if (v16 > v18) {
    goto LABEL_22;
  }
  double v19 = INFINITY;
  double v20 = v15 ? INFINITY : v13.n128_f64[0];
  if (!v9) {
    double v19 = v8;
  }
  if (v20 > v19)
  {
LABEL_22:
    double v22 = v14.n128_f64[0];
    char v23 = v17 & 1;
    double v24 = v13.n128_f64[0];
    char v25 = v15;
    char v10 = SizeFittingTextCacheValue.truncates(in:)((uint64_t)&v22, a2, v13, v14) ^ 1;
  }
  return v10 & 1;
}

uint64_t specialized getter of narrowerVariantsMightExist #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)(uint64_t *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = *a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  uint64_t v6 = type metadata accessor for SizeFittingTextCache.CacheEntry();
  uint64_t v7 = MEMORY[0x24C522E60](v5, v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    if (v4 >= v7 - 1) {
      char v9 = *(unsigned char *)(a2 + 32) ^ 1;
    }
    else {
      char v9 = 1;
    }
    return v9 & 1;
  }
  return result;
}

void *specialized ClosestFitCache.callAsFunction(for:makeValue:)@<X0>(void *a1@<X0>, int a2@<W1>, double a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, unsigned __int8 a11)
{
  return specialized ClosestFitCache.callAsFunction(for:makeValue:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t (*)(uint64_t, uint64_t (*)(void, void), void, double))specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t *)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
}

void *specialized ClosestFitCache.callAsFunction(for:makeValue:)@<X0>(void *result@<X0>, int a2@<W1>, double a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t (*)(void, void), void, double), uint64_t a14, uint64_t *a15)
{
  int v60 = a8;
  uint64_t v58 = a6;
  uint64_t v59 = a7;
  uint64_t v17 = a5[1];
  unint64_t v18 = *(void *)(v17 + 16);
  long long v53 = a5;
  long long v54 = a5 + 1;
  int v52 = a4;
  char v57 = (void *)v17;
  double v51 = a3;
  int v50 = a2;
  char v49 = result;
  if (!v18)
  {
    uint64_t v31 = 0;
    unint64_t v56 = 0;
LABEL_41:
    int v55 = 1;
LABEL_44:
    unint64_t v32 = a11;
    double v33 = MEMORY[0x270FA5388](result);
    uint64_t v34 = a13(v31, _ViewInputs.base.modify, 0, v33);
    if (v34)
    {
      if (v31 < 1) {
        goto LABEL_63;
      }
      double v48 = a9;
      do
      {
        int v15 = &v47;
        uint64_t v35 = v31 - 1;
        double v36 = MEMORY[0x270FA5388](v34);
        uint64_t v34 = ((uint64_t (*)(uint64_t, uint64_t (*)(void, void), void, uint64_t, double))a13)(v31 - 1, _ViewInputs.base.modify, 0, a14, v36);
        if ((v34 & 1) == 0) {
          break;
        }
        --v31;
      }
      while (v35);
    }
    else
    {
      if (__OFADD__(v31++, 1))
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      double v48 = a9;
      uint64_t v61 = v31;
      uint64_t v38 = v58;
      uint64_t v39 = v58 + 40;
      swift_beginAccess();
      if (v31 < *(void *)(*(void *)(v58 + 40) + 16) - 1 || (*(unsigned char *)(v58 + 32) & 1) == 0)
      {
        a9 = a15;
        uint64_t v40 = swift_beginAccess();
        int v15 = &v47;
        v41.n128_f64[0] = MEMORY[0x270FA5388](v40);
        uint64_t v42 = v31;
        while ((((uint64_t (*)(uint64_t, uint64_t (*)(void, void), void, uint64_t *, __n128))a13)(v42, _ViewInputs.base.modify, 0, a15, v41) & 1) == 0)
        {
          uint64_t v43 = v61 + 1;
          if (__OFADD__(v61, 1))
          {
            __break(1u);
            goto LABEL_83;
          }
          ++v61;
          if (v43 >= *(void *)(*(void *)v39 + 16) - 1 && (*(unsigned char *)(v38 + 32) & 1) != 0) {
            break;
          }
          int v15 = &v47;
          v41.n128_f64[0] = MEMORY[0x270FA5388](v43);
        }
      }
      swift_beginAccess();
      if (*(void *)(*(void *)v39 + 16) - 1 >= v61) {
        uint64_t v31 = v61;
      }
      else {
        uint64_t v31 = *(void *)(*(void *)v39 + 16) - 1;
      }
    }
    a9 = v48;
LABEL_63:
    unint64_t v32 = (unint64_t)v57;
    if (v55)
    {
      int v15 = (uint64_t *)v57[2];
      goto LABEL_71;
    }
    if ((v56 & 0x8000000000000000) == 0)
    {
      int v15 = (uint64_t *)v57[2];
      if (v56 < (unint64_t)v15)
      {
        if (v31 == v57[5 * v56 + 8])
        {
          if (v56) {
            specialized MutableCollection.swapAt(_:_:)(v56, v56 - 1);
          }
          *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
          goto LABEL_81;
        }
LABEL_71:
        if ((uint64_t)v15 < *v53)
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_73:
            unint64_t v45 = *(void *)(v32 + 16);
            unint64_t v44 = *(void *)(v32 + 24);
            if (v45 >= v44 >> 1) {
              unint64_t v32 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, (void *)v32);
            }
            *(void *)(v32 + 16) = v45 + 1;
            char v46 = (void *)(v32 + 40 * v45);
            goto LABEL_80;
          }
LABEL_86:
          unint64_t v32 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v15 + 1, 1, (void *)v32);
          goto LABEL_73;
        }
        *(double *)&uint64_t result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
        if (result)
        {
          if (v15) {
            goto LABEL_78;
          }
        }
        else
        {
          *(double *)&uint64_t result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()((void *)v32));
          unint64_t v32 = (unint64_t)result;
          if (v15)
          {
LABEL_78:
            if ((unint64_t)v15 <= *(void *)(v32 + 16))
            {
              char v46 = (void *)(v32 + 40 * ((void)v15 - 1));
LABEL_80:
              v46[4] = v49;
              *((unsigned char *)v46 + 40) = v50 & 1;
              *((double *)v46 + 6) = v51;
              *((unsigned char *)v46 + 56) = v52 & 1;
              uint64_t v46[8] = v31;
              *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
              unint64_t *v54 = v32;
LABEL_81:
              *a9 = v31;
              return result;
            }
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
        }
        __break(1u);
        goto LABEL_89;
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  double v21 = INFINITY;
  if (a2) {
    double v22 = INFINITY;
  }
  else {
    double v22 = *(double *)&result;
  }
  if (a4) {
    double v23 = INFINITY;
  }
  else {
    double v23 = a3;
  }
  double v24 = (double *)(v17 + 56);
  char v25 = 1;
  do
  {
    if (*((unsigned char *)v24 - 16)) {
      double v26 = INFINITY;
    }
    else {
      double v26 = *(v24 - 3);
    }
    if (v26 <= v22)
    {
      double v27 = INFINITY;
      if (!*(unsigned char *)v24) {
        double v27 = *(v24 - 1);
      }
      if (v27 <= v23)
      {
        double v28 = v22 - v26;
        if (v23 - v27 < v22 - v26) {
          double v28 = v23 - v27;
        }
        BOOL v29 = v27 == INFINITY && v26 == INFINITY;
        double v30 = v29 ? 0.0 : v28;
        if (v30 < v21)
        {
          if (*(unsigned char *)(v24 - 2))
          {
            if ((a2 & 1) == 0) {
              goto LABEL_10;
            }
          }
          else
          {
            char v25 = 0;
            if ((a2 & 1) != 0 || *(v24 - 3) != *(double *)&result) {
              goto LABEL_11;
            }
          }
          if (*(unsigned char *)v24)
          {
            if (a4) {
              goto LABEL_37;
            }
LABEL_10:
            char v25 = 0;
LABEL_11:
            double v21 = v30;
            unint64_t v19 = v20;
            goto LABEL_12;
          }
          char v25 = 0;
          if (a4) {
            goto LABEL_11;
          }
          double v21 = v30;
          unint64_t v19 = v20;
          if (*(v24 - 1) == a3)
          {
LABEL_37:
            unint64_t v19 = v20;
            goto LABEL_42;
          }
        }
      }
    }
LABEL_12:
    ++v20;
    v24 += 5;
  }
  while (v18 != v20);
  if (v25)
  {
    unint64_t v56 = v19;
    uint64_t v31 = 0;
    goto LABEL_41;
  }
LABEL_42:
  if (v19 < v18)
  {
    int v55 = 0;
    unint64_t v56 = v19;
    uint64_t v31 = *(void *)(v17 + 32 + 40 * v19 + 32);
    goto LABEL_44;
  }
LABEL_90:
  __break(1u);
  return result;
}

unint64_t specialized ClosestFitCache.callAsFunction(for:makeValue:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, unint64_t (*a5)(uint64_t *__return_ptr, uint64_t *, unint64_t)@<X4>, void *a6@<X8>)
{
  char v9 = (void *)v6;
  uint64_t v12 = (void *)(v6 + 8);
  __n128 v13 = *(void **)(v6 + 8);
  unint64_t v14 = v13[2];
  if (!v14)
  {
LABEL_39:
    uint64_t v37 = 0;
    char v38 = 1;
    unint64_t result = (unint64_t)((unint64_t (*)(uint64_t *__return_ptr, uint64_t *))a5)(&v39, &v37);
    if (v7) {
      return result;
    }
    unint64_t v6 = v13[2];
    goto LABEL_41;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  double v17 = INFINITY;
  if (a2) {
    double v18 = INFINITY;
  }
  else {
    double v18 = a1;
  }
  if (a4) {
    double v19 = INFINITY;
  }
  else {
    double v19 = a3;
  }
  unint64_t v20 = (double *)(v13 + 7);
  char v21 = 1;
  do
  {
    if (*((unsigned char *)v20 - 16)) {
      double v22 = INFINITY;
    }
    else {
      double v22 = *(v20 - 3);
    }
    if (v22 <= v18)
    {
      double v23 = INFINITY;
      if (!*(unsigned char *)v20) {
        double v23 = *(v20 - 1);
      }
      if (v23 <= v19)
      {
        double v24 = v18 - v22;
        if (v19 - v23 < v18 - v22) {
          double v24 = v19 - v23;
        }
        BOOL v25 = v23 == INFINITY && v22 == INFINITY;
        double v26 = v25 ? 0.0 : v24;
        if (v26 < v17)
        {
          if (*(unsigned char *)(v20 - 2))
          {
            if ((a2 & 1) == 0) {
              goto LABEL_10;
            }
          }
          else
          {
            char v21 = 0;
            if ((a2 & 1) != 0 || *(v20 - 3) != a1) {
              goto LABEL_11;
            }
          }
          if (*(unsigned char *)v20)
          {
            if (a4) {
              goto LABEL_46;
            }
LABEL_10:
            char v21 = 0;
LABEL_11:
            double v17 = v26;
            unint64_t v15 = v16;
            goto LABEL_12;
          }
          char v21 = 0;
          if (a4) {
            goto LABEL_11;
          }
          double v17 = v26;
          unint64_t v15 = v16;
          if (*(v20 - 1) == a3) {
            goto LABEL_46;
          }
        }
      }
    }
LABEL_12:
    ++v16;
    v20 += 5;
  }
  while (v14 != v16);
  unint64_t v16 = v15;
  if (v21) {
    goto LABEL_39;
  }
LABEL_46:
  if (v16 >= v14)
  {
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v31 = (uint64_t)&v13[5 * v16 + 4];
  uint64_t v33 = *(void *)(v31 + 32);
  unint64_t v32 = (uint64_t *)(v31 + 32);
  uint64_t v37 = v33;
  char v38 = 0;
  unint64_t result = a5(&v39, &v37, v15);
  if (v7) {
    return result;
  }
  unint64_t v6 = v13[2];
  if (v16 >= v6)
  {
LABEL_64:
    __break(1u);
    return result;
  }
  uint64_t v8 = *v32;
  if (v39 != v8)
  {
LABEL_41:
    if ((int64_t)v6 < *v9)
    {
      uint64_t v8 = v39;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_43:
        unint64_t v29 = v13[2];
        unint64_t v28 = v13[3];
        if (v29 >= v28 >> 1)
        {
          unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v13);
          __n128 v13 = (void *)result;
        }
        v13[2] = v29 + 1;
        double v30 = (double *)&v13[5 * v29];
        v30[4] = a1;
        *((unsigned char *)v30 + 40) = a2 & 1;
        v30[6] = a3;
        *((unsigned char *)v30 + 56) = a4 & 1;
        goto LABEL_56;
      }
LABEL_60:
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, v13);
      __n128 v13 = (void *)result;
      goto LABEL_43;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if (v6) {
        goto LABEL_54;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
      __n128 v13 = (void *)result;
      if (v6)
      {
LABEL_54:
        if (v6 <= v13[2])
        {
          double v30 = (double *)&v13[5 * v6 - 5];
          v30[4] = a1;
          *((unsigned char *)v30 + 40) = a2 & 1;
          v30[6] = a3;
          *((unsigned char *)v30 + 56) = a4 & 1;
          uint64_t v8 = v39;
LABEL_56:
          *((void *)v30 + 8) = v8;
          *uint64_t v12 = v13;
          goto LABEL_57;
        }
        goto LABEL_63;
      }
    }
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v16) {
    unint64_t result = specialized MutableCollection.swapAt(_:_:)(v16, v16 - 1);
  }
LABEL_57:
  *a6 = v8;
  return result;
}

uint64_t SizeFittingTextCache.suggestedVariant(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v19)(Swift::Int *__return_ptr, Swift::Int *, uint64_t, uint64_t);
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t result;
  Swift::Int v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  Swift::Int v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  void v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t);
  void (*v47)(Swift::Int *__return_ptr, Swift::Int *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  void *v50;
  void (*v51)(char *, double);
  char *v52;
  void *v53;
  int v54;
  uint64_t v55;
  int v56;
  Swift::Int v57;
  uint64_t v58;
  Swift::Int v59;
  char v60;
  Swift::Int v61;
  char v62;
  Swift::Int v63;
  char v64;
  uint64_t v65;
  char v66;

  double v3 = v2;
  uint64_t v58 = a2;
  uint64_t v4 = (void *)*v2;
  long long v53 = v4;
  uint64_t v5 = v4[11];
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  char v9 = (char *)v41 - v8;
  Swift::Int v11 = *(void *)v10;
  int v12 = *(unsigned __int8 *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  int v14 = *(unsigned __int8 *)(v10 + 24);
  unint64_t v15 = (char *)v3 + v4[17];
  uint64_t v16 = v6 + 16;
  double v51 = *(void (**)(char *, double))(v6 + 16);
  int v52 = v15;
  v51((char *)v41 - v8, v7);
  char v57 = v11;
  float32x4_t v63 = v11;
  unint64_t v56 = v12;
  float32x4_t v64 = v12;
  int v55 = v13;
  float v65 = v13;
  long long v54 = v14;
  float32x4_t v66 = v14;
  uint64_t v17 = v5;
  uint64_t v18 = v4[13];
  double v19 = *(void (**)(Swift::Int *__return_ptr, Swift::Int *, uint64_t, uint64_t))(v18 + 8);
  v19(&v61, &v63, v17, v18);
  double v22 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  char v21 = v6 + 8;
  unint64_t v20 = v22;
  unint64_t result = v22(v9, v17);
  double v24 = v61;
  if (v62)
  {
    BOOL v25 = 1;
LABEL_9:
    uint64_t v39 = v58;
    goto LABEL_10;
  }
  char v46 = v20;
  uint64_t v47 = v19;
  double v48 = v9;
  unint64_t v45 = v21;
  unint64_t v44 = v16;
  char v49 = v18 + 8;
  double v26 = swift_allocObject();
  int v50 = v41;
  *(unsigned char *)(v26 + 16) = 0;
  float32x4_t v63 = v24;
  MEMORY[0x270FA5388](v26);
  double v27 = v53;
  unint64_t v28 = v53[10];
  v41[-8] = v28;
  v41[-7] = v17;
  unint64_t v29 = v27[12];
  v41[-6] = v29;
  v41[-5] = v18;
  v41[-4] = v57;
  LOBYTE(v41[-3]) = v56;
  v41[-2] = v55;
  LOBYTE(v41[-1]) = v54;
  swift_retain();
  double v30 = v18;
  SizeFittingTextCache.withValue<A>(for:onChange:compute:)(&v63, (uint64_t)partial apply for closure #1 in SizeFittingTextCache.suggestedVariant(for:), v26, (uint64_t)partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)&v41[-10], MEMORY[0x263F8D4F8], (uint64_t)&v61);
  swift_release();
  uint64_t v31 = v61;
  swift_beginAccess();
  if (*(unsigned char *)(v26 + 16) != 1)
  {
    unint64_t result = swift_release();
    if (!v31) {
      double v24 = 0;
    }
    BOOL v25 = v31 ^ 1;
    goto LABEL_9;
  }
  v41[1] = 0;
  uint64_t v42 = v29;
  uint64_t v43 = v28;
  int v50 = v3;
  long long v53 = (void *)v24;
  unint64_t v32 = v48;
  ((void (*)(char *, char *, uint64_t))v51)(v48, v52, v17);
  uint64_t v33 = v57;
  float32x4_t v63 = v57;
  uint64_t v34 = v56;
  float32x4_t v64 = v56;
  float v65 = v55;
  uint64_t v35 = v54;
  float32x4_t v66 = v54;
  double v36 = v30;
  v47(&v59, &v63, v17, v30);
  uint64_t v37 = v46(v32, v17);
  char v38 = v59;
  if (v60)
  {
    unint64_t result = swift_release();
    BOOL v25 = 1;
    double v24 = v38;
    goto LABEL_9;
  }
  uint64_t v39 = v58;
  if ((void *)v59 == v53)
  {
    unint64_t result = swift_release();
    BOOL v25 = 0;
    double v24 = v38;
  }
  else
  {
    float32x4_t v63 = v59;
    MEMORY[0x270FA5388](v37);
    v41[-8] = v43;
    v41[-7] = v17;
    v41[-6] = v42;
    v41[-5] = v36;
    v41[-4] = v33;
    LOBYTE(v41[-3]) = v34;
    v41[-2] = v40;
    LOBYTE(v41[-1]) = v35;
    SizeFittingTextCache.withValue<A>(for:onChange:compute:)(&v63, (uint64_t)_ViewInputs.base.modify, 0, (uint64_t)partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)&v41[-10], MEMORY[0x263F8D4F8], (uint64_t)&v59);
    unint64_t result = swift_release();
    if ((_BYTE)v59) {
      double v24 = v38;
    }
    else {
      double v24 = 0;
    }
    BOOL v25 = v59 ^ 1;
  }
LABEL_10:
  *(void *)uint64_t v39 = v24;
  *(unsigned char *)(v39 + 8) = v25;
  return result;
}

uint64_t specialized closure #1 in SizeFittingTextCache.suggestedVariant(for:)(unsigned char *a1)
{
  uint64_t result = swift_beginAccess();
  *a1 = 1;
  return result;
}

uint64_t closure #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, unsigned char *a5@<X8>)
{
  uint64_t v10 = a1;
  char v11 = a2 & 1;
  uint64_t v12 = a3;
  char v13 = a4 & 1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for SizeFittingTextCacheValue();
  uint64_t result = SizeFittingTextCacheValue.fits(_:)((uint64_t)&v10, v6, v7, v8);
  *a5 = result & 1;
  return result;
}

uint64_t specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(uint64_t *__return_ptr, long long *), uint64_t a5)
{
  void (*v109)(uint64_t *__return_ptr, long long *);
  uint64_t v110;
  char *v111;
  char *v112;
  _OWORD *v113;
  void (*v114)(void);
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  long long v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  long long v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[7];
  long long v137;
  uint64_t v138;
  void *v139;
  void v140[3];
  uint64_t v141[7];
  uint64_t v142[3];
  uint64_t v143[3];
  int v144;
  uint64_t v145;

  char v109 = a4;
  uint64_t v6 = v5;
  uint64_t v108 = a5;
  uint64_t v114 = a2;
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  uint64_t v10 = *(void *)(v9 - 8);
  int v118 = v9;
  uint64_t v119 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v105 - v14;
  MEMORY[0x270FA5388](v16);
  int v135 = (uint64_t)&v105 - v17;
  uint64_t v18 = (unint64_t *)(v6 + 40);
  swift_beginAccess();
  uint64_t v19 = *(void *)(*(void *)(v6 + 40) + 16);
  int v130 = v6;
  BOOL v132 = a3;
  uint64_t v116 = (uint64_t *)(v6 + 40);
  uint64_t v117 = a1;
  if (v19 > a1)
  {
    swift_beginAccess();
    a1 = *(void *)(v6 + 96);
    uint64_t v20 = *(void *)(v6 + 104);
    uint64_t v21 = *(void *)(v6 + 112);
    uint64_t v22 = *(void *)(v6 + 120);
    double v23 = (void *)v6;
    uint64_t v24 = *(void *)(v6 + 128);
    uint64_t v12 = (char *)v23[18];
    *(void *)&uint64_t v131 = v23[17];
    swift_beginAccess();
    uint64_t v18 = (unint64_t *)v23[5];
    uint64_t v133 = a1;
    unint64_t v134 = v20;
    uint64_t v128 = v21;
    char v129 = v22;
    outlined copy of Text?(a1, v20, v21, v22);
    unint64_t v15 = v12;
    swift_retain();
    swift_retain();
    swift_retain();
    int v135 = v24;
    uint64_t v6 = v131;
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void v23[5] = v18;
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t v26 = v117;
      if ((v117 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
LABEL_52:
      uint64_t v18 = (unint64_t *)specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)v18);
      void *v116 = (uint64_t)v18;
      unint64_t v26 = v117;
      if ((v117 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v18[2] > v26)
        {
          uint64_t v27 = (uint64_t)v15;
          unint64_t v28 = (unint64_t)v18
              + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))
              + *(void *)(v119 + 72) * v26;
          v136[0] = v133;
          v136[1] = v134;
          char v30 = v128;
          uint64_t v29 = v129;
          v136[2] = v128;
          v136[3] = v129;
          v136[4] = v135;
          v136[5] = v6;
          v136[6] = v27;
          if (specialized SizeFittingTextCache.CacheEntry.result(for:)(&v137, v136))
          {
            uint64_t v31 = v130;
            if ((*(unsigned char *)(v130 + 89) & 1) == 0)
            {
              unint64_t v32 = (_OWORD *)(v130 + 56);
              if (*(void *)(v130 + 56) == v117)
              {
                *(unsigned char *)(v130 + 88) = 0;
                *unint64_t v32 = 0u;
                *(_OWORD *)(v31 + 72) = 0u;
                *(unsigned char *)(v31 + 89) = 1;
              }
            }
            v114();
          }
          uint64_t v33 = v110;
          v109(v142, &v137);
          if (v33)
          {
            uint64_t v127 = v137;
            uint64_t v34 = v138;
            uint64_t v35 = (uint64_t)v139;
            double v36 = (uint64_t *)(v28 + *(int *)(v118 + 52));
            outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*v36);
            *(_OWORD *)double v36 = v127;
            v36[2] = v34;
            v36[3] = v35;
          }
          else
          {
            LOBYTE(v34) = v142[0];
            uint64_t v127 = v137;
            uint64_t v83 = v138;
            uint64_t v126 = (uint64_t)v139;
            uint64_t v84 = (uint64_t *)(v28 + *(int *)(v118 + 52));
            outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*v84);
            *(_OWORD *)uint64_t v84 = v127;
            uint64_t v85 = v126;
            v84[2] = v83;
            v84[3] = v85;
          }
          outlined consume of Text?(v133, v134, v30, v29);
          swift_release();
          swift_release();
          swift_release();
LABEL_49:
          swift_endAccess();
          swift_release();
          swift_release();
          return v34 & 1;
        }
        goto LABEL_54;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
    a1 = result;
    void *v116 = result;
    unint64_t v94 = v131;
    if (!(void)v131) {
      goto LABEL_56;
    }
    goto LABEL_39;
  }
  uint64_t v105 = v6 + 96;
  swift_beginAccess();
  if ((*(unsigned char *)(v6 + 32) & 1) == 0)
  {
    long long v112 = v12;
    uint64_t v113 = (_OWORD *)(v135 + 48);
    uint64_t v106 = v6 + 56;
    uint64_t v107 = v140;
    uint64_t v111 = v15;
    do
    {
      unint64_t v37 = *v18;
      unint64_t v38 = *(void *)(*v18 + 16);
      if (v38 > a1) {
        break;
      }
      if (!v38)
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      uint64_t v121 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
      a1 = *(void *)(v119 + 72);
      outlined init with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(v37 + v121 + a1 * (v38 - 1), (uint64_t)v15);
      uint64_t v39 = v135;
      outlined init with copy of ResolvedTextHelper((uint64_t)v15, v135, type metadata accessor for ResolvedTextHelper);
      uint64_t v40 = type metadata accessor for ResolvedTextHelper(0);
      uint64_t v41 = *(int *)(v40 + 60);
      uint64_t v42 = *(void *)(v39 + v41);
      BOOL v43 = __OFADD__(v42, 1);
      uint64_t v44 = v42 + 1;
      if (v43) {
        goto LABEL_51;
      }
      uint64_t v45 = v40;
      char v115 = v38;
      uint64_t v120 = a1;
      char v46 = (uint64_t *)v135;
      *(void *)(v135 + v41) = v44;
      PropertyList.Tracker.reset()();
      outlined consume of Text?(v46[6], v46[7], v46[8], v46[9]);
      uint64_t v47 = v113;
      *uint64_t v113 = 0u;
      v47[1] = 0u;
      double v48 = (uint64_t *)((char *)v46 + *(int *)(v45 + 56));
      outlined destroy of ResolvedTextHelper.NextUpdate((uint64_t)v48, type metadata accessor for ResolvedTextHelper.NextUpdate);
      *double v48 = 0;
      type metadata accessor for ResolvedTextHelper.NextUpdate(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v49 = v118;
      int v50 = (char *)v46 + *(int *)(v118 + 52);
      *(_OWORD *)int v50 = 0u;
      *((_OWORD *)v50 + 1) = 0u;
      uint64_t v51 = *(int *)(v49 + 56);
      char v52 = v15[v51];
      uint64_t v128 = v51;
      *((unsigned char *)v46 + v51) = v52;
      outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v15);
      uint64_t v54 = *(void *)(v6 + 96);
      uint64_t v53 = *(void *)(v6 + 104);
      uint64_t v56 = *(void *)(v6 + 112);
      int v55 = *(void **)(v6 + 120);
      uint64_t v57 = *(void *)(v6 + 128);
      uint64_t v58 = *(void *)(v6 + 136);
      uint64_t v59 = v46;
      uint64_t v60 = *(void *)(v6 + 144);
      *(void *)&uint64_t v137 = v54;
      *((void *)&v137 + 1) = v53;
      char v138 = v56;
      int v139 = v55;
      uint64_t v133 = v57;
      v140[0] = v57;
      v140[1] = v58;
      v140[2] = v60;
      uint64_t v62 = *(void *)v50;
      uint64_t v61 = *((void *)v50 + 1);
      uint64_t v126 = v58;
      *(void *)&uint64_t v127 = v61;
      unint64_t v134 = *((void *)v50 + 2);
      uint64_t v63 = *((void *)v50 + 3);
      char v129 = v60;
      char v124 = (void *)v53;
      unint64_t v125 = v54;
      uint64_t v122 = v62;
      char v123 = v55;
      *(void *)&uint64_t v131 = v63;
      if (v62)
      {
        uint64_t v144 = *((unsigned __int8 *)v59 + v128);
        swift_retain();
        swift_retain();
        outlined copy of Text?(v54, v53, v56, (uint64_t)v55);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v64 = v62;
        uint64_t v65 = v127;
        outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v64);
        char v66 = v56;
        if (!specialized ResolvedTextHelper.shouldUpdate(for:inputChanged:)(v54, v53, v56, (uint64_t)v55, v107, v144))
        {
          uint64_t v76 = v122;
          uint64_t v77 = v134;
          uint64_t v74 = v131;
          outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v122);
          *(void *)int v50 = v76;
          *((void *)v50 + 1) = v65;
          *((void *)v50 + 2) = v77;
          *((void *)v50 + 3) = v74;
          *(unsigned char *)(v135 + v128) = 0;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v75 = v76;
          goto LABEL_28;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v54 = v125;
        uint64_t v58 = v126;
        int v55 = v123;
        int64_t v67 = v124;
        uint64_t v68 = v133;
      }
      else
      {
        swift_retain();
        swift_retain();
        int64_t v67 = (void *)v53;
        outlined copy of Text?(v54, v53, v56, (uint64_t)v55);
        swift_retain();
        uint64_t v68 = v133;
        swift_retain();
        swift_retain();
      }
      v143[0] = v68;
      v143[1] = v58;
      uint64_t result = (uint64_t)ResolvedTextHelper.resolve(_:with:sizeFitting:)(v54, v67, v56, v55, v143, 1);
      if (!result) {
        goto LABEL_58;
      }
      uint64_t v65 = result;
      outlined copy of Text?(v54, (uint64_t)v67, v56, (uint64_t)v55);
      uint64_t v70 = v129;
      swift_retain();
      swift_retain();
      outlined consume of Text?(v54, (uint64_t)v67, v56, (uint64_t)v55);
      outlined copy of Text?(v54, (uint64_t)v67, v56, (uint64_t)v55);
      swift_retain();
      outlined consume of Text?(v54, (uint64_t)v67, v56, (uint64_t)v55);
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v122);
      *(void *)int v50 = v65;
      *((void *)v50 + 1) = v65;
      *((void *)v50 + 2) = v70;
      *((void *)v50 + 3) = v70;
      *(unsigned char *)(v135 + v128) = 0;
      char v66 = v56;
      if ((*(unsigned char *)(v130 + 89) & 1) == 0 && v115 == *(void *)v106)
      {
        uint64_t v71 = (_OWORD *)v106;
        *(unsigned char *)(v106 + 32) = 0;
        *uint64_t v71 = 0u;
        v71[1] = 0u;
        *(unsigned char *)(v130 + 89) = 1;
      }
      swift_retain_n();
      uint64_t v72 = v129;
      uint64_t v73 = swift_retain_n();
      ((void (*)(uint64_t))v114)(v73);
      uint64_t v74 = v72;
      unint64_t v134 = v72;
      uint64_t v75 = v65;
LABEL_28:
      LODWORD(v131) = *(unsigned __int16 *)(v75 + 260);
      swift_release();
      uint64_t v78 = v134;
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Text?(v125, (uint64_t)v124, v66, (uint64_t)v123);
      swift_release();
      uint64_t v6 = v130;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      *(void *)int v50 = v75;
      *((void *)v50 + 1) = v65;
      *((void *)v50 + 2) = v78;
      *((void *)v50 + 3) = v74;
      if ((v131 & 0x100) == 0)
      {
        outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(v135);
        *(unsigned char *)(v6 + 32) = 1;
        break;
      }
      uint64_t v12 = v112;
      outlined init with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(v135, (uint64_t)v112);
      uint64_t v18 = (unint64_t *)v116;
      swift_beginAccess();
      unint64_t v79 = *v18;
      char v80 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v18 = v79;
      if ((v80 & 1) == 0)
      {
        unint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v79 + 16) + 1, 1, v79);
        *uint64_t v18 = v79;
      }
      unint64_t v15 = v111;
      unint64_t v82 = *(void *)(v79 + 16);
      unint64_t v81 = *(void *)(v79 + 24);
      if (v82 >= v81 >> 1)
      {
        unint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1, v79);
        *uint64_t v18 = v79;
      }
      *(void *)(v79 + 16) = v82 + 1;
      outlined init with take of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry((uint64_t)v12, v79 + v121 + v82 * v120);
      swift_endAccess();
      outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(v135);
      a1 = v117;
    }
    while ((*(unsigned char *)(v6 + 32) & 1) == 0);
  }
  *(void *)&uint64_t v131 = *(void *)(*(void *)(v6 + 40) + 16);
  swift_beginAccess();
  uint64_t v86 = *(void *)(v6 + 96);
  uint64_t v87 = *(void *)(v6 + 104);
  uint64_t v88 = *(void *)(v6 + 112);
  uint64_t v89 = *(void *)(v6 + 120);
  uint64_t v90 = (void *)v6;
  int64_t v91 = *(unint64_t **)(v6 + 128);
  uint64_t v92 = (char *)v90[18];
  char v129 = v90[17];
  swift_beginAccess();
  a1 = v90[5];
  swift_retain();
  swift_retain();
  uint64_t v133 = v86;
  unint64_t v134 = v87;
  uint64_t v93 = v87;
  int v135 = v88;
  unint64_t v15 = (char *)v89;
  outlined copy of Text?(v86, v93, v88, v89);
  uint64_t v12 = v92;
  swift_retain();
  uint64_t v18 = v91;
  uint64_t v6 = v129;
  swift_retain();
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  v90[5] = a1;
  if ((result & 1) == 0) {
    goto LABEL_55;
  }
  unint64_t v94 = v131;
  if (!(void)v131)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
LABEL_39:
  if (v94 <= *(void *)(a1 + 16))
  {
    unint64_t v95 = v94 - 1;
    unint64_t v96 = a1
        + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))
        + *(void *)(v119 + 72) * (v94 - 1);
    v141[0] = v133;
    v141[1] = v134;
    v141[2] = v135;
    v141[3] = (uint64_t)v15;
    v141[4] = (uint64_t)v18;
    v141[5] = v6;
    v141[6] = (uint64_t)v12;
    if (specialized SizeFittingTextCache.CacheEntry.result(for:)(&v137, v141))
    {
      uint64_t v97 = v130;
      if ((*(unsigned char *)(v130 + 89) & 1) == 0)
      {
        uint64_t v98 = (_OWORD *)(v130 + 56);
        if (v95 == *(void *)(v130 + 56))
        {
          *(unsigned char *)(v130 + 88) = 0;
          *uint64_t v98 = 0u;
          *(_OWORD *)(v97 + 72) = 0u;
          *(unsigned char *)(v97 + 89) = 1;
        }
      }
      v114();
    }
    uint64_t v99 = v110;
    v109(&v145, &v137);
    if (v99)
    {
      uint64_t v131 = v137;
      uint64_t v34 = v138;
      uint64_t v100 = (uint64_t)v139;
      unint64_t v101 = (uint64_t *)(v96 + *(int *)(v118 + 52));
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*v101);
      *(_OWORD *)unint64_t v101 = v131;
      v101[2] = v34;
      v101[3] = v100;
    }
    else
    {
      LOBYTE(v34) = v145;
      uint64_t v131 = v137;
      uint64_t v102 = v138;
      uint64_t v128 = (uint64_t)v139;
      uint64_t v103 = (uint64_t *)(v96 + *(int *)(v118 + 52));
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*v103);
      *(_OWORD *)uint64_t v103 = v131;
      uint64_t v104 = v128;
      v103[2] = v102;
      v103[3] = v104;
    }
    outlined consume of Text?(v133, v134, v135, (uint64_t)v15);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_49;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(unint64_t a1, void (*a2)(uint64_t), uint64_t a3, char *a4, uint64_t a5)
{
  void (*v97)(uint64_t *__return_ptr, unsigned char *);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char **v101;
  uint64_t v102;
  unint64_t v103;
  void (*v104)(uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t *v109;
  long long v110;
  unsigned char v111[24];
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t v119[3];
  uint64_t v120;

  uint64_t v7 = v5;
  uint64_t v104 = a2;
  uint64_t v12 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x270FA5388](v12 - 8);
  *(void *)&int v110 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v100 = (uint64_t)&v96 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v96 - v17;
  uint64_t v19 = (uint64_t *)(v7 + 40);
  swift_beginAccess();
  BOOL v20 = *(void *)(*(void *)(v7 + 40) + 16) <= (uint64_t)a1;
  uint64_t v106 = v7;
  uint64_t v105 = a3;
  uint64_t v103 = a1;
  uint64_t v98 = v6;
  uint64_t v97 = (void (*)(uint64_t *__return_ptr, unsigned char *))a4;
  uint64_t v96 = a5;
  if (!v20)
  {
    uint64_t v21 = v7 + *(void *)(*(void *)v7 + 144);
    swift_beginAccess();
    outlined init with copy of ResolvedTextHelper(v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
    swift_beginAccess();
    uint64_t v22 = *(void *)(v7 + 40);
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v7 + 40) = v22;
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
LABEL_55:
      uint64_t v22 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v22);
      *uint64_t v19 = v22;
      if ((a1 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (*(void *)(v22 + 16) > a1)
        {
          uint64_t v24 = v22 + 80 * a1;
          uint64_t v25 = v24 + 32;
          uint64_t v27 = *(void *)(v24 + 72);
          uint64_t v26 = *(void *)(v24 + 80);
          uint64_t v28 = *(void *)(v24 + 88);
          uint64_t v29 = *(void *)(v24 + 96);
          uint64_t v108 = v18;
          if (v27 && *(unsigned char *)(v24 + 104) != 1)
          {
            int v37 = 0;
            uint64_t v30 = v27;
            uint64_t v32 = v26;
          }
          else
          {
            uint64_t v30 = DynamicTextView.DynamicTextHelper.value(for:)((uint64_t)v18);
            uint64_t v32 = v31;
            uint64_t v34 = v33;
            uint64_t v36 = v35;
            outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v27);
            int v37 = 1;
            uint64_t v29 = v36;
            uint64_t v7 = v106;
            uint64_t v28 = v34;
          }
          *(void *)(v25 + 40) = v30;
          *(void *)(v25 + 48) = v32;
          *(void *)(v25 + 56) = v28;
          *(void *)(v25 + 64) = v29;
          *(unsigned char *)(v25 + 72) = 0;
          *(void *)uint64_t v111 = v30;
          *(void *)&v111[8] = v32;
          *(void *)&v111[16] = v28;
          long long v112 = v29;
          if (v37)
          {
            uint64_t v66 = (uint64_t)v108;
            if ((*(unsigned char *)(v7 + 89) & 1) == 0 && *(void *)(v7 + 56) == v103)
            {
              *(unsigned char *)(v7 + 88) = 0;
              *(_OWORD *)(v7 + 56) = 0u;
              *(_OWORD *)(v7 + 72) = 0u;
              *(unsigned char *)(v7 + 89) = 1;
            }
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v67 = swift_retain();
            v104(v67);
          }
          else
          {
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v66 = (uint64_t)v108;
          }
          uint64_t v68 = v98;
          v97(v119, v111);
          if (v68)
          {
            int v110 = *(_OWORD *)v111;
            uint64_t v69 = *(void *)&v111[16];
            uint64_t v70 = v112;
            outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*(void *)(v25 + 40));
            *(_OWORD *)(v25 + 40) = v110;
            *(void *)(v25 + 56) = v69;
            *(void *)(v25 + 64) = v70;
          }
          else
          {
            LOBYTE(v69) = v119[0];
            int v110 = *(_OWORD *)v111;
            uint64_t v71 = *(void *)&v111[16];
            uint64_t v72 = v112;
            outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*(void *)(v25 + 40));
            *(_OWORD *)(v25 + 40) = v110;
            *(void *)(v25 + 56) = v71;
            *(void *)(v25 + 64) = v72;
          }
          outlined destroy of ResolvedTextHelper.NextUpdate(v66, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
LABEL_52:
          swift_endAccess();
          swift_release();
          swift_release();
          return v69 & 1;
        }
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v102 = v7 + *(void *)(*(void *)v7 + 144);
  swift_beginAccess();
  if ((*(unsigned char *)(v7 + 32) & 1) == 0)
  {
    unint64_t v101 = &v114;
    uint64_t v99 = v7 + 56;
    uint64_t v22 = 80;
    char v109 = (uint64_t *)(v7 + 40);
    do
    {
      unint64_t v38 = *(void *)(*v19 + 16);
      if (v38 > a1) {
        break;
      }
      if (!v38)
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      uint64_t v39 = *v19 + 80 * v38;
      uint64_t v40 = *(void *)(v39 - 16);
      BOOL v41 = __OFADD__(v40, 1);
      uint64_t v42 = v40 + 1;
      if (v41) {
        goto LABEL_54;
      }
      uint64_t v43 = v39 - 48;
      unsigned __int8 v44 = *(unsigned char *)(v43 + 72);
      *(void *)uint64_t v111 = *(void *)v43;
      *(_OWORD *)&v111[8] = *(_OWORD *)(v43 + 8);
      long long v112 = 0;
      uint64_t v113 = v42;
      uint64_t v45 = v101;
      *(_OWORD *)unint64_t v101 = 0u;
      *((_OWORD *)v45 + 1) = 0u;
      int v118 = v44;
      uint64_t v46 = v110;
      outlined init with copy of ResolvedTextHelper(v102, v110, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = (char *)DynamicTextView.DynamicTextHelper.value(for:)(v46);
      uint64_t v48 = v47;
      uint64_t v50 = v49;
      uint64_t v52 = v51;
      uint64_t v114 = v18;
      char v115 = v47;
      uint64_t v116 = v49;
      uint64_t v117 = v51;
      int v118 = 0;
      if ((*(unsigned char *)(v7 + 89) & 1) == 0 && v38 == *(void *)v99)
      {
        uint64_t v53 = (_OWORD *)v99;
        *(unsigned char *)(v99 + 32) = 0;
        *uint64_t v53 = 0u;
        v53[1] = 0u;
        *(unsigned char *)(v7 + 89) = 1;
      }
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v54 = swift_retain();
      v104(v54);
      __int16 v55 = *((_WORD *)v18 + 130);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v114 = v18;
      char v115 = v48;
      uint64_t v116 = v50;
      uint64_t v117 = v52;
      outlined destroy of ResolvedTextHelper.NextUpdate(v110, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      swift_release();
      swift_release();
      a4 = *(char **)v111;
      if ((v55 & 0x100) == 0)
      {
        swift_release();
        swift_release();
        outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?((uint64_t)v18);
        *(unsigned char *)(v7 + 32) = 1;
        uint64_t v19 = v109;
        break;
      }
      uint64_t v56 = *(void *)&v111[8];
      uint64_t v57 = *(void *)&v111[16];
      uint64_t v58 = v112;
      uint64_t v107 = v113;
      LODWORD(v108) = v118;
      uint64_t v59 = v109;
      swift_beginAccess();
      uint64_t v60 = (void *)*v59;
      swift_retain();
      swift_retain();
      outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?((uint64_t)v18);
      char v61 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t *v59 = (uint64_t)v60;
      if ((v61 & 1) == 0)
      {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
        *char v109 = (uint64_t)v60;
      }
      unint64_t v63 = v60[2];
      unint64_t v62 = v60[3];
      if (v63 >= v62 >> 1)
      {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v60);
        *char v109 = (uint64_t)v60;
      }
      void v60[2] = v63 + 1;
      uint64_t v64 = &v60[10 * v63];
      uint64_t v22 = 80;
      v64[4] = a4;
      v64[5] = v56;
      v64[6] = v57;
      uint64_t v65 = v107;
      v64[7] = v58;
      v64[8] = v65;
      v64[9] = v18;
      v64[10] = v48;
      v64[11] = v50;
      v64[12] = v52;
      *((unsigned char *)v64 + 104) = (_BYTE)v108;
      swift_endAccess();
      swift_release();
      swift_release();
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?((uint64_t)v18);
      uint64_t v7 = v106;
      a1 = v103;
      uint64_t v19 = v109;
    }
    while ((*(unsigned char *)(v106 + 32) & 1) == 0);
  }
  a4 = *(char **)(*(void *)(v7 + 40) + 16);
  uint64_t v73 = v102;
  swift_beginAccess();
  outlined init with copy of ResolvedTextHelper(v73, v100, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  swift_beginAccess();
  uint64_t v22 = *(void *)(v7 + 40);
  swift_retain();
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v7 + 40) = v22;
  if ((result & 1) == 0)
  {
LABEL_58:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v22);
    uint64_t v22 = result;
    *uint64_t v19 = result;
    if (!a4) {
      goto LABEL_59;
    }
    goto LABEL_37;
  }
  if (!a4)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_37:
  if ((unint64_t)a4 <= *(void *)(v22 + 16))
  {
    *(void *)&int v110 = a4 - 1;
    uint64_t v75 = v22 + 80 * (void)(a4 - 1);
    uint64_t v76 = v75 + 32;
    uint64_t v78 = *(void *)(v75 + 72);
    uint64_t v77 = *(void *)(v75 + 80);
    uint64_t v79 = *(void *)(v75 + 88);
    uint64_t v80 = *(void *)(v75 + 96);
    if (v78 && *(unsigned char *)(v75 + 104) != 1)
    {
      int v88 = 0;
      uint64_t v81 = v78;
      uint64_t v83 = v77;
    }
    else
    {
      uint64_t v81 = DynamicTextView.DynamicTextHelper.value(for:)(v100);
      uint64_t v83 = v82;
      uint64_t v85 = v84;
      uint64_t v87 = v86;
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v78);
      int v88 = 1;
      uint64_t v80 = v87;
      uint64_t v79 = v85;
    }
    *(void *)(v76 + 40) = v81;
    *(void *)(v76 + 48) = v83;
    *(void *)(v76 + 56) = v79;
    *(void *)(v76 + 64) = v80;
    *(unsigned char *)(v76 + 72) = 0;
    *(void *)uint64_t v111 = v81;
    *(void *)&v111[8] = v83;
    *(void *)&v111[16] = v79;
    long long v112 = v80;
    if (v88)
    {
      uint64_t v89 = v106;
      if ((*(unsigned char *)(v106 + 89) & 1) == 0)
      {
        uint64_t v90 = (_OWORD *)(v106 + 56);
        if ((void)v110 == *(void *)(v106 + 56))
        {
          *(unsigned char *)(v106 + 88) = 0;
          *uint64_t v90 = 0u;
          *(_OWORD *)(v89 + 72) = 0u;
          *(unsigned char *)(v89 + 89) = 1;
        }
      }
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v91 = swift_retain();
      v104(v91);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
    uint64_t v92 = v98;
    v97(&v120, v111);
    if (v92)
    {
      int v110 = *(_OWORD *)v111;
      uint64_t v69 = *(void *)&v111[16];
      uint64_t v93 = v112;
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*(void *)(v76 + 40));
      *(_OWORD *)(v76 + 40) = v110;
      *(void *)(v76 + 56) = v69;
      *(void *)(v76 + 64) = v93;
    }
    else
    {
      LOBYTE(v69) = v120;
      int v110 = *(_OWORD *)v111;
      uint64_t v94 = *(void *)&v111[16];
      uint64_t v95 = v112;
      outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*(void *)(v76 + 40));
      *(_OWORD *)(v76 + 40) = v110;
      *(void *)(v76 + 56) = v94;
      *(void *)(v76 + 64) = v95;
    }
    outlined destroy of ResolvedTextHelper.NextUpdate(v100, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
    goto LABEL_52;
  }
LABEL_60:
  __break(1u);
  return result;
}

uint64_t SizeFittingTextCache.withValue<A>(for:onChange:compute:)@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __n128 v8 = v7;
  uint64_t v72 = a5;
  uint64_t v71 = a4;
  uint64_t v89 = (uint64_t *)a2;
  uint64_t v90 = a3;
  uint64_t v73 = a7;
  uint64_t v11 = *(void *)v8;
  uint64_t v12 = *(void *)(*(void *)v8 + 96);
  uint64_t v13 = *(void *)(*(void *)v8 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v95 = (uint64_t (*)())((char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v70 = (uint64_t)&v69 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v86 = (uint64_t (*)())((char *)&v69 - v20);
  uint64_t v21 = *(void *)(v11 + 88);
  uint64_t v22 = *(void *)(v11 + 104);
  uint64_t v91 = v13;
  v98[6] = v13;
  v98[7] = v21;
  uint64_t v87 = v21;
  uint64_t v92 = v12;
  v98[8] = v12;
  v98[9] = v22;
  uint64_t v88 = v22;
  uint64_t v23 = type metadata accessor for SizeFittingTextCache.CacheEntry();
  uint64_t v74 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v85 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v69 - v26;
  Swift::Int v28 = *a1;
  swift_beginAccess();
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v93 = (void *)v23;
  uint64_t v30 = MEMORY[0x24C522E60](v29, v23);
  Swift::Int v31 = v28;
  swift_bridgeObjectRelease();
  uint64_t v94 = v8 + 40;
  if (v28 < v30)
  {
    uint64_t v32 = &v8[*(void *)(*(void *)v8 + 144)];
    swift_beginAccess();
    (*(void (**)(uint64_t (*)(), unsigned char *, uint64_t))(v15 + 16))(v95, v32, AssociatedTypeWitness);
    v98[0] = v31;
    uint64_t v86 = onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v98, (uint64_t)v8, (uint64_t)v89, v90, a6);
    uint64_t v89 = &v69;
    uint64_t v90 = v33;
    MEMORY[0x270FA5388](v86);
    uint64_t v34 = v87;
    *(&v69 - 8) = v91;
    *(&v69 - 7) = v34;
    uint64_t v35 = v92;
    *(&v69 - 6) = a6;
    *(&v69 - 5) = v35;
    uint64_t v36 = v71;
    *(&v69 - 4) = v88;
    *(&v69 - 3) = v36;
    *(&v69 - 2) = v72;
    swift_beginAccess();
    int v37 = v93;
    uint64_t v92 = type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    Array._checkSubscript_mutating(_:)(v31);
    SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)((uint64_t)v95, (void (*)(uint64_t))v86, v90, (void (*)(char *))partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)(&v69 - 10), v37, a6, v73);
    (*(void (**)(uint64_t (*)(), uint64_t))(v15 + 8))(v95, AssociatedTypeWitness);
    _ViewInputs.base.modify(v92, v38);
LABEL_14:
    swift_endAccess();
    return swift_release();
  }
  uint64_t v84 = &v8[*(void *)(*(void *)v8 + 144)];
  swift_beginAccess();
  char v39 = v8[32];
  uint64_t v40 = (uint64_t)v8;
  uint64_t v96 = AssociatedTypeWitness;
  if (v39)
  {
    BOOL v41 = v93;
  }
  else
  {
    uint64_t v81 = v27;
    uint64_t v80 = v74 + 8;
    uint64_t v79 = (void (**)(uint64_t (*)(), unsigned char *, uint64_t))(v15 + 16);
    uint64_t v78 = (void (**)(void))(v15 + 8);
    uint64_t v75 = (void (**)(char *, uint64_t, void *))(v74 + 16);
    BOOL v41 = v93;
    uint64_t v83 = v15;
    Swift::Int v76 = v31;
    uint64_t v82 = a6;
    uint64_t v77 = v8;
    uint64_t v42 = v93;
    uint64_t v43 = (uint64_t (**)())(v74 + 8);
    do
    {
      getter of currentVariant #1 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v40, v98);
      if (v98[0] >= v31) {
        break;
      }
      uint64_t result = getter of currentVariant #1 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v40, v98);
      uint64_t v45 = v98[0] + 1;
      if (__OFADD__(v98[0], 1))
      {
        __break(1u);
        goto LABEL_16;
      }
      getter of currentVariant #1 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v40, v98);
      swift_bridgeObjectRetain();
      uint64_t v46 = v85;
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v47 = (uint64_t)v81;
      SizeFittingTextCache.CacheEntry.narrowerVariant.getter((uint64_t)v42, (uint64_t)v81);
      uint64_t v95 = *v43;
      ((void (*)(char *, void *))v95)(v46, v42);
      uint64_t v48 = (void (*)(uint64_t))v86;
      (*v79)(v86, v84, v96);
      v98[0] = v45;
      uint64_t v49 = onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v98, v40, (uint64_t)v89, v90, a6);
      uint64_t v51 = v50;
      MEMORY[0x270FA5388](v49);
      uint64_t v52 = v87;
      *(&v69 - 6) = v91;
      *(&v69 - 5) = v52;
      uint64_t v53 = v92;
      *(&v69 - 4) = a6;
      *(&v69 - 3) = v53;
      *(&v69 - 2) = v88;
      uint64_t v54 = v99;
      SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)((uint64_t)v48, v55, v51, (void (*)(char *))partial apply for closure #2 in SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)(&v69 - 8), v42, MEMORY[0x263F8D4F8], (uint64_t)v98);
      uint64_t v56 = v48;
      uint64_t v57 = v96;
      (*v78)(v56);
      swift_release();
      uint64_t v99 = v54;
      if ((v98[0] & 1) == 0)
      {
        ((void (*)(uint64_t, void *))v95)(v47, v42);
        uint64_t v40 = (uint64_t)v77;
        v77[32] = 1;
        uint64_t v15 = v83;
        a6 = v82;
        BOOL v41 = v42;
        uint64_t AssociatedTypeWitness = v57;
        break;
      }
      (*v75)(v46, v47, v42);
      swift_beginAccess();
      type metadata accessor for Array();
      Array.append(_:)();
      swift_endAccess();
      ((void (*)(uint64_t, void *))v95)(v47, v42);
      uint64_t v40 = (uint64_t)v77;
      uint64_t v15 = v83;
      a6 = v82;
      BOOL v41 = v42;
      Swift::Int v31 = v76;
      uint64_t AssociatedTypeWitness = v57;
    }
    while (v77[32] != 1);
  }
  uint64_t v58 = v40;
  uint64_t v59 = swift_bridgeObjectRetain();
  uint64_t v60 = MEMORY[0x24C522E60](v59, v41);
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v60, 1))
  {
    char v61 = v84;
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v15 + 16))(v70, v61, AssociatedTypeWitness);
    v97[0] = v60 - 1;
    uint64_t v95 = onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v97, v58, (uint64_t)v89, v90, a6);
    uint64_t v89 = &v69;
    uint64_t v90 = v62;
    MEMORY[0x270FA5388](v95);
    uint64_t v63 = v87;
    *(&v69 - 8) = v91;
    *(&v69 - 7) = v63;
    uint64_t v64 = v92;
    *(&v69 - 6) = a6;
    *(&v69 - 5) = v64;
    uint64_t v65 = v71;
    *(&v69 - 4) = v88;
    *(&v69 - 3) = v65;
    *(&v69 - 2) = v72;
    swift_beginAccess();
    uint64_t v66 = type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    Array._checkSubscript_mutating(_:)(v60 - 1);
    uint64_t v67 = v70;
    SizeFittingTextCache.CacheEntry.withValue<A>(for:onChange:execute:)(v70, (void (*)(uint64_t))v95, v90, (void (*)(char *))partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)(&v69 - 10), v41, a6, v73);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v67, v96);
    _ViewInputs.base.modify(v66, v68);
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t (*onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9 = *a1;
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a5;
  v10[3] = a2;
  v10[4] = v9;
  v10[5] = a3;
  v10[6] = a4;
  swift_retain();
  swift_retain();
  return partial apply for closure #1 in onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:);
}

uint64_t getter of currentVariant #1 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  uint64_t v5 = type metadata accessor for SizeFittingTextCache.CacheEntry();
  uint64_t v6 = MEMORY[0x24C522E60](v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v6, 1)) {
    __break(1u);
  }
  else {
    *a2 = v6 - 1;
  }
  return result;
}

uint64_t *SizeFittingTextCache.deinit()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  return v0;
}

uint64_t SizeFittingTextCache.__deallocating_deinit()
{
  SizeFittingTextCache.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SizeFittingTextCache()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text>();
    lazy protocol witness table accessor for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text>)
  {
    type metadata accessor for ModifiedContent<Text, VariantThatFitsModifier>();
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Text, VariantThatFitsModifier>, Text>);
    }
  }
}

void type metadata accessor for ModifiedContent<Text, VariantThatFitsModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Text, VariantThatFitsModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, VariantThatFitsModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Text, VariantThatFitsModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, VariantThatFitsModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for VariantThatFitsModifier()
{
  return &type metadata for VariantThatFitsModifier;
}

uint64_t type metadata completion function for SizeFittingTextCache.CacheEntry()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for SizeFittingTextCacheValue();
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for SizeFittingTextCache.CacheEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = v11 + 8;
  size_t v13 = ((*(void *)(v9 + 64) + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v14 = (v11 | 7) + v7;
  uint64_t v15 = v11 | 7 | *(_DWORD *)(v6 + 80);
  if (v15 == 7
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) == 0
    && ((v13 + (v14 & ~(v11 | 7))) | 1) <= 0x18)
  {
    uint64_t v32 = AssociatedTypeWitness;
    uint64_t v19 = ~(v11 | 7);
    uint64_t v30 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7;
    uint64_t v31 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v20 = (void *)(((unint64_t)a1 + v14) & v19);
    uint64_t v21 = (uint64_t *)(((unint64_t)a2 + v14) & v19);
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v24 = v32;
      int v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)v21 + v12) & v31, v10, v32);
      uint64_t v23 = v31;
      if (v25)
      {
LABEL_14:
        memcpy(v20, v21, v13);
LABEL_17:
        *((unsigned char *)v20 + v13) = *((unsigned char *)v21 + v13);
        return a1;
      }
    }
    else
    {
      uint64_t v22 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF) {
        LODWORD(v22) = -1;
      }
      uint64_t v23 = v31;
      uint64_t v24 = v32;
      if (v22 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v20 = *v21;
    unint64_t v26 = ((unint64_t)v20 + v12) & v23;
    unint64_t v27 = ((unint64_t)v21 + v12) & v23;
    Swift::Int v28 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    v28(v26, v27, v24);
    *(void *)((v30 + v26) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v30 + v27) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    goto LABEL_17;
  }
  uint64_t v18 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
  swift_retain();
  return a1;
}

uint64_t destroy for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  __n128 v8 = (uint64_t *)((v4 + a1 + (v7 | 7)) & ~(v7 | 7));
  uint64_t v9 = ~v7;
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v8 + v7 + 8) & v9);
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v10 = *v8;
  if ((unint64_t)*v8 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  uint64_t result = (v10 + 1);
  if (v10 == -1)
  {
LABEL_7:
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v8 + v7 + 8) & v9, AssociatedTypeWitness);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (uint64_t *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = ~v9;
  uint64_t v14 = v9 + 8;
  uint64_t v15 = *(void *)(v8 + 64) + 7;
  unint64_t v16 = (v15 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v17 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v17) = -1;
    }
    size_t v18 = v16 + 8;
    if (v17 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v11 = *v12;
    unint64_t v19 = ((unint64_t)v11 + v14) & v13;
    unint64_t v20 = ((unint64_t)v12 + v14) & v13;
    uint64_t v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v21(v19, v20, AssociatedTypeWitness);
    *(void *)((v15 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + v20) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    goto LABEL_8;
  }
  size_t v18 = v16 + 8;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v12 + v14) & v13)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v11, v12, v18);
LABEL_8:
  *((unsigned char *)v11 + v18) = *((unsigned char *)v12 + v18);
  return a1;
}

uint64_t assignWithCopy for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  uint64_t v16 = *(void *)(v8 + 64) + 7;
  size_t v17 = ((v16 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 & 0x80000000) != 0)
  {
    unint64_t v32 = ((v16 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
    unint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v31 = v20(((unint64_t)v11 + v15) & v14, v13, AssociatedTypeWitness);
    int v19 = v20(((unint64_t)v12 + v15) & v14, v13, AssociatedTypeWitness);
    size_t v17 = v32;
    if (!v31)
    {
LABEL_5:
      if (!v19)
      {
        *uint64_t v11 = *v12;
        swift_retain();
        swift_release();
        unint64_t v25 = ((unint64_t)v11 + v15) & v14;
        unint64_t v26 = (unint64_t)v12 + v15;
        size_t v27 = v17;
        unint64_t v28 = v26 & v14;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(v25, v26 & v14, AssociatedTypeWitness);
        unint64_t v29 = v16 + v28;
        size_t v17 = v27;
        *(void *)((v16 + v25) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v29 & 0xFFFFFFFFFFFFFFF8);
        swift_retain();
        swift_release();
        goto LABEL_12;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, AssociatedTypeWitness);
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v18) = -1;
    }
    int v19 = v18 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v19)
  {
    *uint64_t v11 = *v12;
    unint64_t v21 = ((unint64_t)v11 + v15) & v14;
    size_t v33 = v17;
    unint64_t v22 = ((unint64_t)v12 + v15) & v14;
    uint64_t v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v23(v21, v22, AssociatedTypeWitness);
    unint64_t v24 = v16 + v22;
    size_t v17 = v33;
    *(void *)((v16 + v21) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v24 & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v17);
LABEL_12:
  *((unsigned char *)v11 + v17) = *((unsigned char *)v12 + v17);
  return a1;
}

uint64_t initializeWithTake for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (uint64_t *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = ~v9;
  uint64_t v14 = v9 + 8;
  uint64_t v15 = *(void *)(v8 + 64) + 7;
  unint64_t v16 = (v15 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v17 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v17) = -1;
    }
    size_t v18 = v16 + 8;
    if (v17 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v11 = *v12;
    unint64_t v19 = ((unint64_t)v11 + v14) & v13;
    unint64_t v20 = ((unint64_t)v12 + v14) & v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v19, v20, AssociatedTypeWitness);
    *(void *)((v15 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + v20) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_8;
  }
  size_t v18 = v16 + 8;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v12 + v14) & v13)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v11, v12, v18);
LABEL_8:
  *((unsigned char *)v11 + v18) = *((unsigned char *)v12 + v18);
  return a1;
}

uint64_t assignWithTake for SizeFittingTextCache.CacheEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  uint64_t v16 = *(void *)(v8 + 64) + 7;
  size_t v17 = ((v16 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 & 0x80000000) != 0)
  {
    unint64_t v27 = ((v16 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
    unint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v26 = v20(((unint64_t)v11 + v15) & v14, v13, AssociatedTypeWitness);
    int v19 = v20(((unint64_t)v12 + v15) & v14, v13, AssociatedTypeWitness);
    size_t v17 = v27;
    if (!v26)
    {
LABEL_5:
      if (!v19)
      {
        *uint64_t v11 = *v12;
        swift_release();
        unint64_t v23 = ((unint64_t)v11 + v15) & v14;
        unint64_t v24 = ((unint64_t)v12 + v15) & v14;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(v23, v24, AssociatedTypeWitness);
        *(void *)((v16 + v23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v16 + v24) & 0xFFFFFFFFFFFFFFF8);
        swift_release();
        goto LABEL_12;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, AssociatedTypeWitness);
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v18) = -1;
    }
    int v19 = v18 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v19)
  {
    *uint64_t v11 = *v12;
    unint64_t v21 = ((unint64_t)v11 + v15) & v14;
    unint64_t v22 = ((unint64_t)v12 + v15) & v14;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v21, v22, AssociatedTypeWitness);
    *(void *)((v16 + v21) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v16 + v22) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v17);
LABEL_12:
  *((unsigned char *)v11 + v17) = *((unsigned char *)v12 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeFittingTextCache.CacheEntry(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF) {
    int v12 = 0x7FFFFFFF;
  }
  else {
    int v12 = *(_DWORD *)(v9 + 84);
  }
  unsigned int v13 = v12 - 1;
  if (v12 - 1 <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = v12 - 1;
  }
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v16 = v15 | 7;
  uint64_t v17 = v15 + 8;
  uint64_t v18 = (v15 | 7) + *(void *)(v6 + 64);
  if (a2 <= v14) {
    goto LABEL_28;
  }
  unint64_t v19 = (v18 & ~v16)
      + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + (v17 & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v23 = (a2 - v14 + ~(-1 << v20)) >> v20;
    if (v23 > 0xFFFE)
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v23 > 0xFE)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (!v23)
    {
LABEL_28:
      if (v7 >= v13)
      {
        uint64_t v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
        return v30(a1, v7, v5);
      }
      else
      {
        unint64_t v27 = (uint64_t *)(((unint64_t)a1 + v18) & ~v16);
        if ((v11 & 0x80000000) != 0)
        {
          unsigned int v29 = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v27 + v17) & ~v15);
        }
        else
        {
          uint64_t v28 = *v27;
          if ((unint64_t)*v27 >= 0xFFFFFFFF) {
            LODWORD(v28) = -1;
          }
          unsigned int v29 = v28 + 1;
        }
        if (v29 >= 2) {
          return v29 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_28;
  }
LABEL_18:
  int v24 = (v21 - 1) << v20;
  if (v19 <= 3)
  {
    int v25 = v19;
  }
  else
  {
    int v24 = 0;
    int v25 = 4;
  }
  switch(v25)
  {
    case 2:
      int v26 = *a1;
      break;
    case 3:
      int v26 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
      break;
    case 4:
      int v26 = *(_DWORD *)a1;
      break;
    default:
      int v26 = *(unsigned __int8 *)a1;
      break;
  }
  return v14 + (v26 | v24) + 1;
}

void storeEnumTagSinglePayload for SizeFittingTextCache.CacheEntry(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  unsigned int v14 = v13 - 1;
  if (v13 - 1 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v13 - 1;
  }
  uint64_t v16 = v12 + 8;
  size_t v17 = ((*(void *)(v10 + 64) + ((v12 + 8) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v18 = (v12 | 7) + *(void *)(v8 + 64);
  uint64_t v19 = (v17 + (v18 & ~(v12 | 7))) | 1;
  if (a3 <= v15)
  {
    int v20 = 0;
  }
  else if (v19 <= 3)
  {
    unsigned int v25 = (a3 - v15 + ~(-1 << (8 * v19))) >> (8 * v19);
    if (v25 > 0xFFFE)
    {
      int v20 = 4;
    }
    else if (v25 >= 0xFF)
    {
      int v20 = 2;
    }
    else
    {
      int v20 = v25 != 0;
    }
  }
  else
  {
    int v20 = 1;
  }
  if (v15 < a2)
  {
    unsigned int v21 = ~v15 + a2;
    if (v19 < 4)
    {
      int v22 = (v21 >> (8 * v19)) + 1;
      bzero(a1, (v17 + (v18 & ~(v12 | 7))) | 1);
      *a1 = v21 & ~(-1 << (8 * v19));
    }
    else
    {
      bzero(a1, (v17 + (v18 & ~(v12 | 7))) | 1);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v19] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v22;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)&a1[v19] = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~(v12 | 7);
  uint64_t v24 = ~v12;
  switch(v20)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x245BC2CBCLL);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v9 >= v14)
        {
          uint64_t v28 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
          v28(a1, a2, v9, v7);
        }
        else
        {
          int v26 = (void *)((unint64_t)&a1[v18] & v23);
          if (v14 >= a2 && (int)a2 + 1 <= v13)
          {
            if (a2 != -1)
            {
              if ((v11 & 0x80000000) != 0)
              {
                uint64_t v30 = *(void (**)(unint64_t, void))(v10 + 56);
                v30(((unint64_t)v26 + v16) & v24, (a2 + 1));
              }
              else
              {
                if (a2 + 1 < 0) {
                  uint64_t v29 = (a2 - 0x7FFFFFFF);
                }
                else {
                  uint64_t v29 = a2;
                }
                void *v26 = v29;
              }
            }
          }
          else if (v17)
          {
            int v27 = a2 - v13;
            bzero(v26, v17);
            *(_DWORD *)int v26 = v27;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for SizeFittingTextCache.CacheEntry()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for SizeFittingTextCacheValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for SizeFittingTextCacheValue()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SizeFittingTextCacheValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    unsigned int v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
    *(void *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for SizeFittingTextCacheValue(uint64_t a1, uint64_t a2)
{
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

void *initializeWithCopy for SizeFittingTextCacheValue(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(void *)(v4 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  swift_retain();
  v5(v8, v9, v4);
  *(void *)((*(void *)(v6 + 48) + 7 + v8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v6 + 48) + 7 + v9) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

void *assignWithCopy for SizeFittingTextCacheValue(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  *(void *)((*(void *)(v7 + 40) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 40) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for SizeFittingTextCacheValue(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  *(void *)((*(void *)(v5 + 32) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for SizeFittingTextCacheValue(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  *(void *)((*(void *)(v7 + 24) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 24) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeFittingTextCacheValue(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 8) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245BC33B0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
  }
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for SizeFittingTextCacheValue(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
              int v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v18 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245BC35B4);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

void *assignWithTake for ClosestFitCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ClosestFitCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SizeFittingTextCacheValue.truncates(in:)(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  uint64_t v9 = *(uint64_t *)((char *)v4 + *(int *)(a2 + 40));
  if (!v9)
  {
    uint64_t v12 = *v4;
    if (v6)
    {
      if (*(unsigned char *)(a1 + 24)) {
        return 0;
      }
      a3.n128_u64[0] = 0x7FF0000000000000;
    }
    else
    {
      a3.n128_u64[0] = *(void *)a1;
      if (*(unsigned char *)(a1 + 24))
      {
        a4.n128_u64[0] = 0x7FF0000000000000;
LABEL_10:
        long long v16 = 0u;
        long long v17 = 0u;
        char v18 = 1;
        (*(void (**)(void *__return_ptr, long long *, __n128, __n128))(*(void *)v12 + 256))(v14, &v16, a3, a4);
        return v15;
      }
    }
    a4.n128_u64[0] = *(void *)(a1 + 16);
    goto LABEL_10;
  }
  v14[0] = *v4;
  uint64_t v10 = v14[0];
  unsigned int v11 = *(void (**)(unint64_t, uint64_t, uint64_t, void, void *))(*(void *)v9 + 104);
  swift_retain();
  swift_retain();
  LOBYTE(v16) = v6;
  v11(v5, v6, v7, v8, v14);
  long long v16 = 0u;
  long long v17 = 0u;
  char v18 = 1;
  (*(void (**)(void *__return_ptr, long long *))(*(void *)v10 + 256))(v14, &v16);
  swift_release();
  swift_release();
  return v15;
}

BOOL protocol witness for SizeFittingTextResolver.shouldUpdate(for:inputChanged:) in conformance ResolvedTextHelper(uint64_t *a1, char a2)
{
  return specialized ResolvedTextHelper.shouldUpdate(for:inputChanged:)(*a1, a1[1], a1[2], a1[3], a1 + 4, a2);
}

uint64_t protocol witness for SizeFittingTextResolver.value(for:) in conformance ResolvedTextHelper@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 48);
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t result = (uint64_t)ResolvedTextHelper.resolve(_:with:sizeFitting:)(v3, v4, v5, v6, (uint64_t *)&v10, 1);
  if (result)
  {
    uint64_t v9 = result;
    swift_retain();
    outlined copy of Text?(v3, (uint64_t)v4, v5, (uint64_t)v6);
    swift_retain();
    outlined consume of Text?(v3, (uint64_t)v4, v5, (uint64_t)v6);
    outlined copy of Text?(v3, (uint64_t)v4, v5, (uint64_t)v6);
    swift_retain();
    uint64_t result = outlined consume of Text?(v3, (uint64_t)v4, v5, (uint64_t)v6);
    *a2 = v9;
    a2[1] = v9;
    a2[2] = v7;
    a2[3] = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SizeFittingTextResolver.narrowerVariant.getter in conformance ResolvedTextHelper@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = outlined init with copy of ResolvedTextHelper(v2, (uint64_t)a2, type metadata accessor for ResolvedTextHelper);
  uint64_t v6 = *(int *)(a1 + 60);
  uint64_t v7 = *(uint64_t *)((char *)a2 + v6);
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    *(uint64_t *)((char *)a2 + v6) = v9;
    PropertyList.Tracker.reset()();
    outlined consume of Text?(a2[6], a2[7], a2[8], a2[9]);
    *((_OWORD *)a2 + 3) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    long long v10 = (uint64_t *)((char *)a2 + *(int *)(a1 + 56));
    outlined destroy of ResolvedTextHelper.NextUpdate((uint64_t)v10, type metadata accessor for ResolvedTextHelper.NextUpdate);
    *long long v10 = 0;
    type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsModifier(uint64_t a1, uint64_t *a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, 1, (uint64_t)&v4);
  return swift_release();
}

_UNKNOWN **associated type witness table accessor for SizeFittingTextResolver.Engine : LayoutEngine in ResolvedTextHelper()
{
  return &protocol witness table for StyledTextLayoutEngine;
}

Swift::Void __swiftcall SizeFittingTextFilter.updateValue()()
{
  uint64_t v53[3] = *MEMORY[0x263EF8340];
  unint64_t v1 = *(void **)(v0 + 16);
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)(Value + 16);
  uint64_t v4 = *(void *)(Value + 24);
  BOOL v5 = (~v3 & 0x7FF0000000000000) == 0;
  BOOL v6 = (v3 & 0xFFFFFFFFFFFFFLL) != 0;
  BOOL v7 = v5 && v6;
  if (v5 && v6) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(void **)(Value + 16);
  }
  BOOL v9 = (~v4 & 0x7FF0000000000000) == 0;
  BOOL v10 = (v4 & 0xFFFFFFFFFFFFFLL) != 0;
  BOOL v11 = v9 && v10;
  if (v9 && v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(Value + 24);
  }
  swift_retain();
  LOBYTE(v53[0]) = v7;
  unsigned __int8 v13 = v11;
  char v52 = v13;
  specialized SizeFittingTextCache.suggestedVariant(for:)((uint64_t)v8, v7, v12, v13, (uint64_t)&v49);
  if (v50)
  {
    swift_beginAccess();
    swift_retain();
    LOBYTE(v53[0]) = v7;
    char v52 = v13;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(v8, v7, *(double *)&v12, v13, v1 + 2, (uint64_t)v1, (uint64_t)v8, v7, v53, v12, v13, (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t (*)(uint64_t, uint64_t (*)(void, void), void, double))specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:), (uint64_t)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t *)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:));
    swift_endAccess();
    unint64_t v14 = v53[0];
  }
  else
  {
    unint64_t v14 = v49;
    v53[0] = v49;
  }
  swift_beginAccess();
  uint64_t v15 = v1[12];
  uint64_t v16 = v1[13];
  uint64_t v18 = v1[14];
  uint64_t v17 = v1[15];
  uint64_t v19 = v1[16];
  uint64_t v20 = v1[17];
  uint64_t v21 = v1[18];
  swift_beginAccess();
  unint64_t v22 = v1[5];
  char v46 = v18;
  outlined copy of Text?(v15, v16, v18, v17);
  uint64_t v45 = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[5] = v22;
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((v14 & 0x8000000000000000) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
  v1[5] = v22;
  if ((v14 & 0x8000000000000000) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if (v14 >= *(void *)(v22 + 16)) {
    goto LABEL_22;
  }
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  uint64_t v25 = v24 - 8;
  unint64_t v26 = v22
      + ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80));
  uint64_t v27 = *(void *)(*(void *)(v24 - 8) + 72);
  v48[0] = v15;
  v48[1] = v16;
  unint64_t v28 = v26 + v27 * v14;
  v48[2] = v18;
  double v48[3] = v17;
  v48[4] = v19;
  v48[5] = v20;
  v48[6] = v45;
  specialized SizeFittingTextCache.CacheEntry.result(for:)(&v49, v48);
  uint64_t v29 = v49;
  long long v44 = v50;
  uint64_t v43 = v51;
  unint64_t v30 = v28 + *(int *)(v25 + 60);
  uint64_t v31 = *(void *)v30;
  swift_retain();
  outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v31);
  *(void *)unint64_t v30 = v29;
  *(_OWORD *)(v30 + 8) = v44;
  *(void *)(v30 + 24) = v43;
  outlined consume of Text?(v15, v16, v46, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_endAccess();
  swift_release();
  uint64_t v49 = v29;
  type metadata accessor for ResolvedStyledText();
  AGGraphSetOutputValue();
  swift_release();
  uint64_t v32 = AGGraphGetValue();
  uint64_t v33 = *(void *)(v32 + 16);
  uint64_t v34 = *(void *)(v32 + 24);
  BOOL v35 = (~v33 & 0x7FF0000000000000) == 0;
  BOOL v36 = (v33 & 0xFFFFFFFFFFFFFLL) != 0;
  BOOL v37 = v35 && v36;
  if (v35 && v36) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = *(void **)(v32 + 16);
  }
  BOOL v39 = (~v34 & 0x7FF0000000000000) == 0;
  BOOL v40 = (v34 & 0xFFFFFFFFFFFFFLL) != 0;
  BOOL v41 = v39 && v40;
  if (v39 && v40) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = *(void *)(v32 + 24);
  }
  swift_retain();
  LOBYTE(v49) = v37;
  char v52 = v41;
  specialized SizeFittingTextCache.withResolver<A>(for:compute:)(v38, v37, v42, v41, (uint64_t)v1, v47, v41);
  swift_release();
}

uint64_t closure #2 in SizeFittingTextFilter.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  BOOL v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x270FA5388](Update);
  BOOL v9 = (uint64_t *)((char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for ResolvedTextHelper(0);
  BOOL v11 = (double *)(a1 + *(int *)(v10 + 56));
  outlined init with copy of ResolvedTextHelper((uint64_t)v11, (uint64_t)v9, type metadata accessor for ResolvedTextHelper.NextUpdate);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      goto LABEL_9;
    }
    outlined destroy of ResolvedTextHelper.NextUpdate((uint64_t)v11, type metadata accessor for ResolvedTextHelper.NextUpdate);
    double v13 = *(double *)v9;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    char v15 = *((unsigned char *)v9 + *(int *)(v14 + 64));
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, (char *)v9 + *(int *)(v14 + 48), v3);
    double v29 = v13;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v29, (uint64_t)v6, v15, v28);
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    double v16 = v28[0];
    *BOOL v11 = v28[0];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    double v16 = *(double *)v9;
  }
  if (*(double *)AGGraphGetValue() < v16)
  {
    uint64_t v17 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    double v18 = *(double *)(v17 + 376);
    if (v16 < v18) {
      double v18 = v16;
    }
    *(double *)(v17 + 376) = v18;
    swift_release();
  }
LABEL_9:
  uint64_t v19 = *(void *)(v27 + 16);
  uint64_t v20 = *(void *)(a1 + *(int *)(v10 + 60));
  uint64_t result = AGGraphGetValue();
  uint64_t v22 = *(void *)(result + 16);
  uint64_t v23 = *(void *)(result + 24);
  uint64_t v24 = ((~v22 & 0x7FF0000000000000) == 0) & ((v22 & 0xFFFFFFFFFFFFFLL) != 0);
  if ((~v22 & 0x7FF0000000000000) == 0 && (v22 & 0xFFFFFFFFFFFFFLL) != 0) {
    uint64_t v22 = 0;
  }
  BOOL v25 = (~v23 & 0x7FF0000000000000) == 0;
  BOOL v26 = (v23 & 0xFFFFFFFFFFFFFLL) != 0;
  *(void *)(v19 + 56) = v20;
  *(void *)(v19 + 64) = v22;
  if (v25 && v26) {
    uint64_t v23 = 0;
  }
  *(void *)(v19 + 72) = v24;
  *(void *)(v19 + 80) = v23;
  *(unsigned char *)(v19 + 88) = v25 && v26;
  *(unsigned char *)(v19 + 89) = 0;
  return result;
}

Swift::Void __swiftcall SizeFittingTextLayoutComputer.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t Value = AGGraphGetValue();
  uint64_t v19 = v3;
  uint64_t v4 = *(void *)Value;
  uint64_t v5 = *(void *)(Value + 8);
  uint64_t v6 = *(unsigned __int8 *)(Value + 16);
  uint64_t v7 = *(void *)(Value + 24);
  uint64_t v8 = (uint64_t *)AGGraphGetValue();
  char v10 = v9;
  uint64_t v11 = *v8;
  uint64_t v12 = v8[1];
  uint64_t v13 = *(void *)(v1 + 16);
  type metadata accessor for TextRendererBoxBase();
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v15 = *WeakValue;
    swift_retain();
  }
  else
  {
    uint64_t v15 = 0;
  }
  outlined copy of Text.Storage(v4, v5, v6);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Text.Storage(v4, v5, v6);
  v22[0] = v4;
  v22[1] = v5;
  void v22[2] = v6;
  v22[3] = v7;
  v22[4] = v11;
  v22[5] = v12;
  v22[6] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  specialized SizeFittingTextCache.input.setter(v22, (v19 | v10) & 1);
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v19 = (uint64_t)&v19;
    int v20 = CurrentAttribute;
    uint64_t v21 = v13;
    MEMORY[0x270FA5388](CurrentAttribute);
    v18[2] = &v20;
    MEMORY[0x270FA5388](v17);
    swift_retain();
    specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v18, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
    swift_release();
    swift_release();
    outlined consume of Text.Storage(v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t SizeFittingTextLayoutComputer.Engine.layoutPriority()()
{
  uint64_t result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

uint64_t closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  char v11 = 1;
  uint64_t v12 = 0;
  char v13 = 1;
  v9[2] = a4;
  v9[3] = a5;
  v9[4] = a6;
  v9[5] = a7;
  uint64_t result = SizeFittingTextCache.withValue<A>(for:compute:)(&v10, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority(), (uint64_t)v9, MEMORY[0x263F8D538], (uint64_t)&v14);
  *(void *)a1 = v14;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

void closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(double *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  *a1 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()()
{
  uint64_t result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

uint64_t closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = 0;
  char v12 = 1;
  uint64_t v13 = 0;
  char v14 = 1;
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a6;
  v10[5] = a7;
  uint64_t result = SizeFittingTextCache.withValue<A>(for:compute:)(&v11, a8, (uint64_t)v10, MEMORY[0x263F8D4F8], (uint64_t)&v15);
  *a1 = v15;
  return result;
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t SizeFittingTextLayoutComputer.Engine.spacing()()
{
  uint64_t result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

uint64_t closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  char v10 = 1;
  uint64_t v11 = 0;
  char v12 = 1;
  void v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  _OWORD v8[5] = a6;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)(&v9, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.spacing(), (uint64_t)v8, (uint64_t)&type metadata for Spacing, (uint64_t)&v13);
  swift_release();
  *a1 = v13;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)()
{
  uint64_t result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

double closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = a3;
  char v19 = a4 & 1;
  uint64_t v20 = a5;
  char v21 = a6 & 1;
  void v14[2] = a7;
  v14[3] = a8;
  v14[4] = a9;
  v14[5] = a10;
  v14[6] = a3;
  char v15 = a4 & 1;
  uint64_t v16 = a5;
  char v17 = a6 & 1;
  type metadata accessor for CGSize(0);
  uint64_t v12 = v11;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)(&v18, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:), (uint64_t)v14, v12, (uint64_t)&v22);
  swift_release();
  double result = *(double *)&v22;
  *(_OWORD *)a1 = v22;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1;
  char v10 = a2 & 1;
  uint64_t v11 = a3;
  char v12 = a4 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  *(double *)a5 = (*(double (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  *(void *)(a5 + 8) = v8;
}

uint64_t SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)()
{
  uint64_t result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

uint64_t closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, char a7, uint64_t a8, long long a9, uint64_t a10)
{
  uint64_t v20 = a3;
  char v21 = a4 & 1;
  uint64_t v22 = a5;
  char v23 = a6 & 1;
  _OWORD v12[2] = a8;
  long long v13 = a9;
  uint64_t v14 = a10;
  uint64_t v15 = a3;
  char v16 = a4 & 1;
  uint64_t v17 = a5;
  char v18 = a6 & 1;
  char v19 = a7 & 1;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)(&v20, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:), (uint64_t)v12, MEMORY[0x263F8EF38], (uint64_t)&v24);
  uint64_t result = swift_release();
  *(void *)a1 = v24;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

void closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, char a5@<W5>, double *a6@<X8>)
{
  uint64_t v7 = a5 & 1;
  uint64_t v10 = a1;
  char v11 = a2 & 1;
  uint64_t v12 = a3;
  char v13 = a4 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  *a6 = (*(double (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v10, v7, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)()
{
  AGGraphWithUpdate();
  uint64_t result = 0;
  __break(1u);
  return result;
}

uint64_t closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)(void *a1, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double v17 = a2;
  char v18 = 0;
  double v19 = a3;
  char v20 = 0;
  v16[2] = a9;
  v16[3] = a10;
  float v16[4] = a11;
  v16[5] = a12;
  *(double *)&v16[6] = a2;
  *(double *)&v16[7] = a3;
  *(double *)&v16[8] = a4;
  *(double *)&v16[9] = a5;
  *(double *)&v16[10] = a6;
  *(double *)&v16[11] = a7;
  _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_0(0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]);
  uint64_t v14 = v13;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)((uint64_t *)&v17, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:), (uint64_t)v16, v14, (uint64_t)&v21);
  swift_release();
  *a1 = v21;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)uint64_t v13 = a2;
  *(double *)&v13[1] = a3;
  *(double *)&v13[2] = a4;
  *(double *)&v13[3] = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 56))(v13, AssociatedTypeWitness, AssociatedConformanceWitness, a6, a7);
  *a1 = result;
  return result;
}

uint64_t SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)()
{
  return 0;
}

uint64_t closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17 = a2;
  char v18 = 0;
  double v19 = a3;
  char v20 = 0;
  v16[2] = a8;
  v16[3] = a9;
  float v16[4] = a10;
  v16[5] = a11;
  v16[6] = a7;
  *(double *)&v16[7] = a2;
  *(double *)&v16[8] = a3;
  *(double *)&v16[9] = a4;
  *(double *)&v16[10] = a5;
  _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
  uint64_t v13 = v12;
  swift_retain();
  SizeFittingTextCache.withValue<A>(for:compute:)((uint64_t *)&v17, (uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:), (uint64_t)v16, v13, (uint64_t)&v21);
  uint64_t result = swift_release();
  char v15 = v22;
  *(void *)a1 = v21;
  *(unsigned char *)(a1 + 8) = v15;
  return result;
}

uint64_t closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(double *)uint64_t v12 = a3;
  *(double *)&v12[1] = a4;
  *(double *)&_OWORD v12[2] = a5;
  *(double *)&void v12[3] = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(a1, v12, AssociatedTypeWitness, AssociatedConformanceWitness);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v11 & 1;
  return result;
}

uint64_t SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0;
  LOBYTE(v13) = 1;
  uint64_t v14 = 0;
  char v15 = 1;
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a6;
  SizeFittingTextCache.withValue<A>(for:compute:)(&v12, (uint64_t)partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter, (uint64_t)v11, MEMORY[0x263F8D310], (uint64_t)v16);
  uint64_t v6 = v16[0];
  uint64_t v7 = (void *)v16[1];
  uint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t v12 = 0xD00000000000001ELL;
  unint64_t v13 = 0x800000024621BDD0;
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v12;
}

uint64_t closure #1 in SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SizeFittingTextCacheValue();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v5) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = 0xE000000000000000;
  if (v5) {
    unint64_t v7 = v5;
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for LayoutEngine.layoutPriority() in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return SizeFittingTextLayoutComputer.Engine.layoutPriority()();
}

uint64_t protocol witness for LayoutEngine.ignoresAutomaticPadding() in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return protocol witness for LayoutEngine.ignoresAutomaticPadding() in conformance SizeFittingTextLayoutComputer.Engine<A, B>();
}

{
  return SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()() & 1;
}

uint64_t protocol witness for LayoutEngine.requiresSpacingProjection() in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return protocol witness for LayoutEngine.ignoresAutomaticPadding() in conformance SizeFittingTextLayoutComputer.Engine<A, B>();
}

uint64_t protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)();
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance SizeFittingTextLayoutComputer.Engine<A, B>()
{
  return SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)();
}

uint64_t protocol witness for LayoutEngine.debugContentDescription.getter in conformance SizeFittingTextLayoutComputer.Engine<A, B>(uint64_t *a1)
{
  return SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(*v1, *((void *)v1 + 1), a1[2], a1[3], a1[4], a1[5]);
}

uint64_t specialized SizeFittingTextFilter.init(size:text:environment:time:referenceDate:includeDefaultAttributes:allowsKeyColors:archiveOptions:features:attachmentsAsAuxiliaryMetadata:idiom:)(unsigned int a1, uint64_t a2, int a3, int a4, unint64_t a5, int a6, unsigned int a7, __int16 *a8, __int16 *a9, char a10, long long *a11)
{
  int v37 = a6;
  *(void *)&long long v38 = __PAIR64__(a1, a7);
  int v12 = a5;
  int v39 = a3;
  *((void *)&v38 + 1) = a2;
  unint64_t v14 = HIDWORD(a5);
  uint64_t v15 = type metadata accessor for ResolvedTextHelper(0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v19 = *a8;
  __int16 v20 = *a9;
  *(void *)&v18[*(int *)(v16 + 64)] = 0;
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  long long v36 = *a11;
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)char v18 = a4;
  *((_DWORD *)v18 + 1) = v12;
  *((_DWORD *)v18 + 2) = v14;
  v18[12] = v37;
  v18[13] = v38;
  *((_WORD *)v18 + 7) = v19;
  *((_WORD *)v18 + 8) = v20;
  v18[18] = a10;
  *(_OWORD *)(v18 + 24) = v36;
  type metadata accessor for PropertyList.Tracker();
  uint64_t v21 = swift_allocObject();
  _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  uint64_t v23 = MEMORY[0x263F8EE80];
  uint64_t v24 = MEMORY[0x263F8EE78];
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v23;
  *(void *)(v22 + 48) = v24;
  *(unsigned char *)(v22 + 56) = 0;
  *(void *)(v21 + 16) = v22;
  *((void *)v18 + 5) = v21;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  *(void *)&v18[*(int *)(v16 + 68)] = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  BOOL v25 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  BOOL v26 = static CoreGlue2.shared;
  v25(&v40);

  uint64_t v27 = v40;
  uint64_t v28 = v41;
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, &lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 10;
  *(void *)(v29 + 24) = v24;
  *(unsigned char *)(v29 + 32) = 0;
  type metadata accessor for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>();
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  uint64_t v31 = v30 - 8;
  unint64_t v32 = (*(unsigned __int8 *)(*(void *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v30 - 8) + 80);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_2461B9DC0;
  outlined init with copy of ResolvedTextHelper((uint64_t)v18, v33 + v32, type metadata accessor for ResolvedTextHelper);
  uint64_t v34 = (_OWORD *)(v33 + v32 + *(int *)(v31 + 60));
  *uint64_t v34 = 0u;
  v34[1] = 0u;
  *(unsigned char *)(v33 + v32 + *(int *)(v31 + 64)) = 0;
  outlined destroy of ResolvedTextHelper.NextUpdate((uint64_t)v18, type metadata accessor for ResolvedTextHelper);
  *(void *)(v29 + 40) = v33;
  *(_WORD *)(v29 + 48) = 0;
  *(_OWORD *)(v29 + 56) = 0u;
  *(_OWORD *)(v29 + 72) = 0u;
  *(_WORD *)(v29 + 88) = 256;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(void *)(v29 + 128) = v27;
  *(void *)(v29 + 136) = v28;
  *(void *)(v29 + 144) = 0;
  return v38 >> 32;
}

BOOL specialized ResolvedTextHelper.shouldUpdate(for:inputChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v64 = v14;
  uint64_t v65 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x270FA5388](Update);
  __int16 v20 = (double *)((char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a6 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v21 = *a5;
  uint64_t v22 = v7[9];
  if (v22)
  {
    if (!a4) {
      return 1;
    }
    uint64_t v24 = v7[6];
    uint64_t v23 = v7[7];
    uint64_t v25 = v7[8];
    uint64_t v63 = v23;
    if (v25)
    {
      char v26 = a3;
      if (a3)
      {
        uint64_t v59 = v21;
        uint64_t v27 = *(uint64_t (**)(uint64_t))(*(void *)v24 + 96);
        uint64_t v57 = *(void *)v24 + 96;
        uint64_t v58 = v27;
        uint64_t v61 = a3;
        uint64_t v62 = v24;
        char v28 = v25;
        outlined copy of Text?(v24, v23, v25, v22);
        uint64_t v29 = v63;
        outlined copy of Text?(v62, v63, v28, v22);
        uint64_t v30 = a1;
        char v31 = v28;
        uint64_t v32 = a2;
        uint64_t v33 = v30;
        outlined copy of Text?(v30, v32, v61, a4);
        outlined copy of Text.Storage(v62, v29, 1);
        outlined copy of Text.Storage(v33, v32, 1);
        uint64_t v34 = v62;
        LODWORD(v58) = v58(v33);
        outlined consume of Text.Storage(v33, v32, 1);
        outlined consume of Text.Storage(v34, v63, 1);
        char v35 = 1;
LABEL_15:
        if (v58)
        {
LABEL_16:
          LODWORD(v58) = v31 & 1;
          LODWORD(v57) = v61 & 1;
          LODWORD(v61) = specialized static Array<A>.== infix(_:_:)(v22, a4);
          outlined consume of Text.Storage(v33, v32, v57);
          swift_bridgeObjectRelease();
          uint64_t v43 = v63;
          outlined consume of Text?(v34, v63, v31, v22);
          outlined consume of Text.Storage(v34, v43, (char)v58);
          swift_bridgeObjectRelease();
          uint64_t v21 = v59;
          if (v61) {
            goto LABEL_17;
          }
          return 1;
        }
LABEL_24:
        outlined consume of Text.Storage(v33, v32, v35);
        swift_bridgeObjectRelease();
        uint64_t v55 = v63;
        outlined consume of Text?(v34, v63, v31, v22);
        outlined consume of Text.Storage(v34, v55, v31 & 1);
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    else
    {
      char v26 = a3;
      if ((a3 & 1) == 0)
      {
        uint64_t v59 = v21;
        uint64_t v60 = a2;
        uint64_t v41 = a2;
        uint64_t v61 = a3;
        if (v24 == a1 && v23 == a2)
        {
          uint64_t v33 = a1;
          uint64_t v42 = a1;
          char v31 = v25;
          uint64_t v34 = v24;
          outlined copy of Text?(v42, v41, v31, v22);
          outlined copy of Text?(v33, v60, v31, v22);
          outlined copy of Text?(v33, v60, a3, a4);
          uint64_t v32 = v60;
          goto LABEL_16;
        }
        uint64_t v62 = v24;
        uint64_t v33 = a1;
        LODWORD(v58) = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v31 = v25;
        uint64_t v34 = v62;
        outlined copy of Text?(v62, v63, v31, v22);
        outlined copy of Text?(v34, v63, v31, v22);
        outlined copy of Text?(v33, v60, a3, a4);
        char v35 = 0;
        uint64_t v32 = v60;
        goto LABEL_15;
      }
    }
    char v36 = v25;
    BOOL v37 = (v25 & 1) == 0;
    uint64_t v34 = v24;
    uint64_t v38 = v23;
    char v39 = v26;
    outlined copy of Text?(v24, v23, v36, v22);
    outlined copy of Text?(v34, v38, v36, v22);
    uint64_t v40 = a1;
    char v31 = v36;
    uint64_t v32 = a2;
    uint64_t v33 = v40;
    outlined copy of Text?(v40, v32, v39, a4);
    char v35 = v37;
    goto LABEL_24;
  }
  if (a4) {
    return 1;
  }
LABEL_17:
  uint64_t v44 = v21;
  swift_retain();
  char v45 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v44);
  swift_release();
  if (v45) {
    return 1;
  }
LABEL_18:
  char v46 = (double *)((char *)v7 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56));
  outlined init with copy of ResolvedTextHelper((uint64_t)v46, (uint64_t)v20, type metadata accessor for ResolvedTextHelper.NextUpdate);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    double v53 = *v20;
    return *(double *)AGGraphGetValue() >= v53;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined destroy of ResolvedTextHelper.NextUpdate((uint64_t)v46, type metadata accessor for ResolvedTextHelper.NextUpdate);
    double v48 = *v20;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    char v50 = *((unsigned char *)v20 + *(int *)(v49 + 64));
    uint64_t v51 = v64;
    uint64_t v52 = v65;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v17, (char *)v20 + *(int *)(v49 + 48), v64);
    double v66 = v48;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v66, (uint64_t)v17, v50, &v67);
    swift_release();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v51);
    double v53 = v67;
    *char v46 = v67;
    swift_storeEnumTagMultiPayload();
    return *(double *)AGGraphGetValue() >= v53;
  }
  return 0;
}

uint64_t outlined init with copy of ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)()
{
  if (!lazy cache variable for type metadata for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText))
  {
    MEMORY[0x270FA5388](0);
    type metadata accessor for Date();
    type metadata accessor for ResolvedStyledText();
    TupleTypeMetadatCGFloat a = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText));
    }
  }
}

uint64_t partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)()
{
  return partial apply for closure #3 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t partial apply for closure #2 in SizeFittingTextCache.withValue<A>(for:onChange:compute:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(*(void *)result + 261) & 1;
  return result;
}

uint64_t sub_245BC5FE4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in onChange #1 <A, B><A1>(for:) in SizeFittingTextCache.withValue<A>(for:onChange:compute:)()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 40);
  uint64_t v2 = **(void **)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v3 = (*(uint64_t (**)(uint64_t *, void))(*(void *)(v2 + 104) + 16))(&v5, *(void *)(v2 + 88));
  return v1(v3);
}

uint64_t sub_245BC60C4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SizeFittingTextCache.suggestedVariant(for:)()
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v0 + 16) = 1;
  return result;
}

uint64_t partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:)@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for closure #2 in SizeFittingTextCache.suggestedVariant(for:)(a1);
}

{
  uint64_t v1;

  return closure #1 in closure #1 in SizeFittingTextCache.sizeVariant(for:)(*(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), a1);
}

uint64_t partial apply for closure #1 in SizeFittingTextCache.sizeVariant(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in SizeFittingTextCache.sizeVariant(for:)(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48), a2);
}

uint64_t outlined init with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1)
{
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(a1);
}

uint64_t outlined assign with copy of SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    v8[0] = type metadata accessor for ResolvedTextHelper(255);
    v8[1] = &type metadata for StickyTextSizeFittingLogic;
    void v8[2] = &protocol witness table for ResolvedTextHelper;
    v8[3] = &protocol witness table for StickyTextSizeFittingLogic;
    unint64_t v6 = a3(a1, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>)
  {
    type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry(255, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>);
    }
  }
}

uint64_t outlined destroy of ResolvedTextHelper.NextUpdate(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StickyTextSizeFittingLogic(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[42]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StickyTextSizeFittingLogic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StickyTextSizeFittingLogic()
{
  return &type metadata for StickyTextSizeFittingLogic;
}

uint64_t assignWithCopy for SizeFittingTextLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SizeFittingTextLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for SizeFittingTextLayoutComputer.Engine()
{
  return swift_getGenericMetadata();
}

uint64_t assignWithCopy for SizeFittingTextLayoutComputer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SizeFittingTextLayoutComputer()
{
  return &type metadata for SizeFittingTextLayoutComputer;
}

uint64_t initializeBufferWithCopyOfBuffer for SizeFittingTextFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SizeFittingTextFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SizeFittingTextFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SizeFittingTextFilter()
{
  return &type metadata for SizeFittingTextFilter;
}

ValueMetadata *type metadata accessor for VariantThatFitsFlag()
{
  return &type metadata for VariantThatFitsFlag;
}

ValueMetadata *type metadata accessor for EnvironmentValues.TextSizeVariantKey()
{
  return &type metadata for EnvironmentValues.TextSizeVariantKey;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in VariantThatFitsFlag()
{
  return &protocol witness table for VariantThatFitsFlag;
}

unint64_t instantiation function for generic protocol witness table for SizeFittingTextFilter(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SizeFittingTextFilter and conformance SizeFittingTextFilter();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeFittingTextFilter and conformance SizeFittingTextFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type SizeFittingTextFilter and conformance SizeFittingTextFilter;
  if (!lazy protocol witness table cache variable for type SizeFittingTextFilter and conformance SizeFittingTextFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingTextFilter and conformance SizeFittingTextFilter);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SizeFittingTextLayoutComputer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer;
  if (!lazy protocol witness table cache variable for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer);
  }
  return result;
}

void type metadata accessor for (value: ResolvableStringResolutionContext, changed: Bool)()
{
  if (!lazy cache variable for type metadata for (value: ResolvableStringResolutionContext, changed: Bool))
  {
    type metadata accessor for ResolvableStringResolutionContext();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: ResolvableStringResolutionContext, changed: Bool));
    }
  }
}

uint64_t outlined assign with take of ResolvableStringResolutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvableStringResolutionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)()
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)(*(void *)(v0 + 48), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(void *)(v0 + 56), *(void *)(v0 + 96), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.explicitAlignment(_:at:)(*(void *)(v1 + 48), a1, *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80));
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)()
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)(*(void **)(v0 + 48), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104), *(void *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.childGeometries(at:origin:)(a1, v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)()
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88), *(unsigned char *)(v0 + 89), *(void *)(v0 + 16), *(_OWORD *)(v0 + 24), *(void *)(v0 + 40));
}

void partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(double *a1@<X8>)
{
  closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.lengthThatFits(_:in:)(*(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), *(unsigned char *)(v1 + 73), a1);
}

double partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)()
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1@<X8>)
{
  closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.sizeThatFits(_:)(*(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), a1);
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()()
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()(*(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()()
{
  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.spacing()();
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()()
{
  return partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()((uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection());
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()(a1);
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()()
{
  return partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()((uint64_t)partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding());
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.requiresSpacingProjection()(uint64_t a1)
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()(*(unsigned char **)(v1 + 48), *(unsigned int *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.ignoresAutomaticPadding()(a1);
}

uint64_t partial apply for closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()()
{
  return closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(*(void *)(v0 + 48), *(unsigned int *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void partial apply for closure #1 in closure #1 in SizeFittingTextLayoutComputer.Engine.layoutPriority()(double *a1@<X8>)
{
}

uint64_t closure #2 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  __int16 v20 = (char *)&v24 - v19;
  v21(v18);
  static KeyframesBuilder.buildExpression<A>(_:)(v16, a5, a8, a12);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v16, a8);
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v20, a5, a8, a12);
  v22(v20, a8);
  static KeyframesBuilder.buildFinalResult<A>(_:)(v16, a5, a8, a12);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, a8);
}

uint64_t View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v28 = a9;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  int v23 = a2;
  uint64_t v22 = a1;
  uint64_t v33 = a13;
  uint64_t v29 = a7;
  uint64_t v30 = type metadata accessor for KeyframeAnimator();
  uint64_t v31 = a12;
  uint64_t v32 = &protocol witness table for KeyframeAnimator<A, B, C>;
  uint64_t v16 = type metadata accessor for CustomModifier();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v21 - v18;
  closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(v22, v23, v24, v25, v26, v27, v29, a8, (uint64_t)&v21 - v18, a10, a11, a12, a13, a14);
  View.modifier<A>(_:)(v19, a7, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v45 = a9;
  uint64_t v46 = a4;
  int v44 = a2;
  uint64_t v37 = a1;
  uint64_t v39 = a12;
  uint64_t v40 = a3;
  uint64_t v16 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v36 = v18;
  uint64_t v47 = v19;
  uint64_t v48 = a11;
  uint64_t v49 = a10;
  uint64_t v50 = a14;
  uint64_t v51 = a13;
  uint64_t v20 = type metadata accessor for KeyframeAnimator();
  uint64_t v41 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x270FA5388](v23);
  uint64_t v38 = (char *)&v35 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, v37, a8, v24);
  uint64_t v26 = (void *)swift_allocObject();
  void v26[2] = a7;
  unint64_t v26[3] = a8;
  v26[4] = a10;
  v26[5] = a11;
  uint64_t v28 = v39;
  uint64_t v27 = v40;
  v26[6] = v39;
  v26[7] = a13;
  v26[8] = a14;
  v26[9] = v27;
  v26[10] = v46;
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = a7;
  _OWORD v29[3] = a8;
  _OWORD v29[4] = a10;
  v29[5] = a11;
  v29[6] = v28;
  v29[7] = a13;
  uint64_t v30 = v42;
  uint64_t v31 = v43;
  v29[8] = a14;
  v29[9] = v30;
  v29[10] = v31;
  KeyframeAnimator.init(initialValue:repeating:content:keyframes:)((uint64_t)v36, v44, (uint64_t)partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:), (uint64_t)v26, (uint64_t)partial apply for closure #2 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:), (uint64_t)v29, a8, (uint64_t)v22);
  uint64_t v32 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v22, v20, &protocol witness table for KeyframeAnimator<A, B, C>);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v41 + 8);
  swift_retain();
  swift_retain();
  v33(v22, v20);
  static ViewBuilder.buildExpression<A>(_:)(v32, v20, &protocol witness table for KeyframeAnimator<A, B, C>);
  return ((uint64_t (*)(char *, uint64_t))v33)(v32, v20);
}

uint64_t closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v23 - v17;
  uint64_t v20 = PlaceholderContentView.init()(v19, v16);
  a2(v20, a1);
  static ViewBuilder.buildExpression<A>(_:)(v14, a6, a9);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v14, a6);
  static ViewBuilder.buildExpression<A>(_:)(v18, a6, a9);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, a6);
}

uint64_t closure #2 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v22 - v17;
  v19(v16);
  static KeyframesBuilder.buildExpression<A>(_:)(v14, a5, a7, a10);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, a7);
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v18, a5, a7, a10);
  v20(v18, a7);
  static KeyframesBuilder.buildFinalResult<A>(_:)(v14, a5, a7, a10);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, a7);
}

int *KeyframeAnimator.init(initialValue:repeating:content:keyframes:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8, a1, a7);
  unint64_t result = (int *)type metadata accessor for KeyframeAnimator();
  uint64_t v15 = (void *)(a8 + result[15]);
  void *v15 = a5;
  v15[1] = a6;
  double v16 = (void *)(a8 + result[17]);
  void *v16 = a3;
  v16[1] = a4;
  *(void *)(a8 + result[16]) = ((a2 & 1) == 0) | 0x8000000000000000;
  return result;
}

BOOL KeyframeTrackState.isInitial.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x270FA5388](a1);
  int v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2) {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  }
  return EnumCaseMultiPayload == 2;
}

uint64_t KeyframeTrackState.updateAnimation(time:)(double *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for KeyframeTrackState.RepeatingState();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v53 - v7;
  uint64_t v9 = type metadata accessor for KeyframeTimeline();
  uint64_t v54 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v53 - v13;
  uint64_t v15 = *(void *)(a2 - 8);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (void *)((char *)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v20 = *a1;
  uint64_t v21 = *(void (**)(uint64_t *, void *, uint64_t, double))(v15 + 16);
  uint64_t v57 = v2;
  v21(v19, v2, a2, v17);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v56 = v5;
    uint64_t v28 = v54;
    uint64_t v30 = *v19;
    uint64_t v29 = v19[1];
    if ((v29 & 0x8000000000000000) == 0)
    {
LABEL_19:
      swift_release();
      return swift_release();
    }
    uint64_t v31 = *(void (**)(void *, uint64_t))(v15 + 8);
    swift_retain();
    uint64_t v55 = v30;
    swift_retain();
    v31(v57, a2);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v53[1] = v29 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v33 = swift_projectBox();
    uint64_t v34 = v33 + *(int *)(TupleTypeMetadata2 + 48);
    double v35 = *(double *)v34;
    char v36 = *(unsigned char *)(v34 + 8);
    uint64_t v37 = v28;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
    v38(v14, v33, v9);
    if ((v36 & 1) == 0)
    {
      if (v20 <= v35)
      {
        v38(v11, (uint64_t)v14, v9);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v9);
        char v48 = 0;
        goto LABEL_17;
      }
      double v35 = v20;
    }
    v38(v11, (uint64_t)v14, v9);
    double v39 = v20 - v35;
    double v40 = KeyframeTimeline.duration.getter();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
    v41(v11, v9);
    if (v40 < v39)
    {
      unint64_t v42 = swift_allocBox();
      KeyframeTimeline.value(progress:)(v9, v43, 1.0);
      v41(v14, v9);
      swift_release();
LABEL_18:
      uint64_t v52 = v57;
      *uint64_t v57 = v55;
      v52[1] = v42;
      swift_retain();
      swift_storeEnumTagMultiPayload();
      swift_release();
      goto LABEL_19;
    }
    char v48 = 1;
LABEL_17:
    uint64_t v49 = swift_allocBox();
    uint64_t v51 = v50 + *(int *)(TupleTypeMetadata2 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v50, v14, v9);
    *(double *)uint64_t v51 = v35;
    *(unsigned char *)(v51 + 8) = v48;
    swift_release();
    unint64_t v42 = v49 | 0x8000000000000000;
    goto LABEL_18;
  }
  if (result == 1)
  {
    uint64_t v24 = v55;
    uint64_t v23 = v56;
    uint64_t v25 = *(void (**)(char *, uint64_t *, uint64_t))(v55 + 32);
    v25(v8, v19, v56);
    uint64_t v26 = &v8[*(int *)(v23 + 44)];
    uint64_t v27 = *((void *)v26 + 1);
    if (v27 < 0)
    {
      double v44 = *(double *)v26;
      uint64_t v45 = *((void *)v26 + 2);
      uint64_t v46 = (char *)v57;
      (*(void (**)(void *, uint64_t))(v15 + 8))(v57, a2);
      if (v27)
      {
        unint64_t v47 = 0x8000000000000001;
      }
      else if (v20 <= v44)
      {
        unint64_t v47 = 0x8000000000000000;
      }
      else
      {
        unint64_t v47 = 0x8000000000000001;
        double v44 = v20;
      }
      *(double *)uint64_t v26 = v44;
      *((void *)v26 + 1) = v47;
      *((void *)v26 + 2) = v45;
      v25(v46, (uint64_t *)v8, v23);
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v8, v23);
    }
  }
  return result;
}

uint64_t KeyframeTrackState.EventDrivenState.update(at:trigger:initialValue:path:)(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v81 = a4;
  uint64_t v82 = a5;
  uint64_t v74 = a3;
  uint64_t v80 = a6;
  uint64_t v10 = *(void *)(a6 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v78 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v77 = (uint64_t)&v71 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v71 = (uint64_t)&v71 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v79 = (uint64_t)&v71 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v73 = (char *)&v71 - v20;
  uint64_t v21 = type metadata accessor for KeyframeTimeline();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v76 = (uint64_t)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v75 = (char *)&v71 - v25;
  MEMORY[0x270FA5388](v26);
  TupleTypeMetadata2 = (uint64_t)&v71 - v28;
  uint64_t v29 = *a2;
  if (v29 != *v7)
  {
    double v30 = *a1;
    uint64_t v31 = v7;
    uint64_t v32 = v27;
    uint64_t v33 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 80);
    uint64_t v34 = swift_retain();
    char v35 = v33(v34);
    uint64_t v36 = v32;
    uint64_t v7 = v31;
    uint64_t v37 = v10;
    uint64_t v38 = v22;
    uint64_t v39 = v11;
    char v40 = v35;
    swift_release();
    if ((v40 & 1) == 0)
    {
      uint64_t v41 = v7[1];
      if (v41 < 0)
      {
        uint64_t v53 = v41 & 0x7FFFFFFFFFFFFFFFLL;
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        uint64_t v73 = (char *)v53;
        uint64_t v54 = swift_projectBox() + *(int *)(TupleTypeMetadata2 + 48);
        double v55 = *(double *)v54;
        LODWORD(v74) = *(unsigned __int8 *)(v54 + 8);
        (*(void (**)(void))(v38 + 16))();
        double v56 = v30 - v55;
        swift_retain();
        double v57 = KeyframeTimeline.duration.getter();
        if (v57 < v56) {
          double v56 = v57;
        }
        uint64_t v58 = v79;
        KeyframeTimeline.value(time:)(v36, v79, v56);
        uint64_t v59 = v71;
        KeyframeTimeline.velocity(time:)(v36, v71, v56);
        uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
        v60(v77, v58, v37);
        uint64_t v61 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v60)(v78, v59, v37);
        MEMORY[0x270FA5388](v61);
        uint64_t v62 = *(void *)(v80 + 24);
        uint64_t v63 = *(void *)(v80 + 32);
        *(&v71 - 6) = v37;
        *(&v71 - 5) = v62;
        uint64_t v64 = v81;
        *(&v71 - 4) = v63;
        *(&v71 - 3) = v64;
        *(&v71 - 2) = v82;
        *(&v71 - 1) = v58;
        KeyframeTimeline.init<A>(initialValue:initialVelocity:content:)(v77, v78, (void (*)(void))partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:), (uint64_t)(&v71 - 8), v37, v62, v63, v76);
        uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v65(v59, v37);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v75, v36);
        uint64_t v66 = TupleTypeMetadata2;
        uint64_t v50 = swift_allocBox();
        uint64_t v68 = v67;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v67, v76, v36);
        v65(v79, v37);
        uint64_t v69 = v68 + *(int *)(v66 + 48);
        *(double *)uint64_t v69 = v30;
        *(unsigned char *)(v69 + 8) = v74;
        swift_release();
      }
      else
      {
        uint64_t v43 = (uint64_t)v73;
        uint64_t v42 = v74;
        uint64_t v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v73, v74, v37);
        MEMORY[0x270FA5388](v44);
        uint64_t v45 = *(void *)(v80 + 24);
        uint64_t v46 = *(void *)(v80 + 32);
        *(&v71 - 6) = v37;
        *(&v71 - 5) = v45;
        uint64_t v47 = v81;
        *(&v71 - 4) = v46;
        *(&v71 - 3) = v47;
        *(&v71 - 2) = v82;
        *(&v71 - 1) = v42;
        uint64_t v48 = TupleTypeMetadata2;
        KeyframeTimeline.init<A>(initialValue:content:)(v43, (void (*)(void))partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:), (uint64_t)(&v71 - 8), v37, v45, v46, TupleTypeMetadata2);
        uint64_t v49 = swift_getTupleTypeMetadata2();
        uint64_t v50 = swift_allocBox();
        uint64_t v52 = v51 + *(int *)(v49 + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v51, v48, v36);
        *(double *)uint64_t v52 = v30;
        *(unsigned char *)(v52 + 8) = 0;
      }
      swift_release();
      v7[1] = v50 | 0x8000000000000000;
    }
  }
  swift_retain();
  uint64_t result = swift_release();
  void *v7 = v29;
  return result;
}

uint64_t KeyframeTrackState.RepeatingState.value(at:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *(int *)(a2 + 44);
  double v7 = *(double *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  type metadata accessor for KeyframeTrackState.RepeatingState.Mode();
  if (v8 < 0)
  {
    double v10 = *a1 - v7;
    if ((v8 & 1) == 0) {
      double v10 = 0.0;
    }
    double v9 = *(double *)(v6 + 16) + v10;
  }
  else
  {
    double v9 = v7;
  }
  uint64_t v11 = type metadata accessor for KeyframeTimeline();
  double v12 = KeyframeTimeline.duration.getter();
  double v13 = fmod(v9, v12);

  return KeyframeTimeline.value(time:)(v11, a3, v13);
}

double *KeyframeTrackState.RepeatingState.update(at:paused:)(double *result, char a2, uint64_t a3)
{
  double v4 = *result;
  uint64_t v5 = v3 + *(int *)(a3 + 44);
  double v6 = *(double *)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  if (v7 < 0)
  {
    if (a2)
    {
      double v8 = *(double *)(v5 + 16);
      uint64_t result = (double *)type metadata accessor for KeyframeTrackState.RepeatingState.Mode();
      double v9 = v4 - v6;
      if ((v7 & 1) == 0) {
        double v9 = 0.0;
      }
      *(double *)uint64_t v5 = v8 + v9;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
  }
  else if ((a2 & 1) == 0)
  {
    *(double *)uint64_t v5 = v4;
    *(void *)(v5 + 8) = 0x8000000000000000;
    *(double *)(v5 + 16) = v6;
  }
  return result;
}

__n128 KeyframeTrackState.RepeatingState.init(timeline:mode:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v9 = *a2;
  unint64_t v5 = a2[1].n128_u64[0];
  uint64_t v6 = type metadata accessor for KeyframeTimeline();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = (__n128 *)(a3 + *(int *)(type metadata accessor for KeyframeTrackState.RepeatingState() + 44));
  __n128 result = v9;
  __n128 *v7 = v9;
  v7[1].n128_u64[0] = v5;
  return result;
}

uint64_t closure #1 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v20 - v14;
  v17(v16, v13);
  static KeyframesBuilder.buildExpression<A>(_:)(v11, a4, a5, a6);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, a5);
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v15, a4, a5, a6);
  v18(v15, a5);
  static KeyframesBuilder.buildFinalResult<A>(_:)(v11, a4, a5, a6);
  return ((uint64_t (*)(char *, uint64_t))v18)(v11, a5);
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyframeAnimator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    double v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    double v13 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v15 = *(void *)v14;
    v14 += 15;
    swift_retain();
    outlined copy of _SymbolEffect.Trigger(v15);
    *double v13 = v15;
    uint64_t v16 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
    void *v16 = *(void *)(v14 & 0xFFFFFFFFFFFFFFF8);
    v16[1] = v17;
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  double v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  *(_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  _OWORD *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v10 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *v10;
  *uint64_t v10 = *(void *)v9;
  outlined consume of _SymbolEffect.Trigger(v11);
  *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeAnimator(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245BC8A04);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for KeyframeAnimator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245BC8C14);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_245BC8C3C()
{
  return swift_getWitnessTable();
}

uint64_t sub_245BC8CE4()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for PlaybackMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined copy of _SymbolEffect.Trigger(*a2);
  *a1 = v3;
  return a1;
}

uint64_t destroy for PlaybackMode(uint64_t *a1)
{
  return outlined consume of _SymbolEffect.Trigger(*a1);
}

uint64_t *assignWithCopy for PlaybackMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined copy of _SymbolEffect.Trigger(*a2);
  uint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of _SymbolEffect.Trigger(v4);
  return a1;
}

uint64_t *assignWithTake for PlaybackMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of _SymbolEffect.Trigger(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackMode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 63);
  }
  unsigned int v3 = (*(void *)a1 & 6 | ((*(void *)a1 >> 58) >> 5) & 0xFFFFFFC7 | (8
                                                                                     * (((*(void *)a1 >> 58) >> 2) & 7))) ^ 0x3F;
  if (v3 >= 0x3E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PlaybackMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(void *)__n128 result = a2 - 63;
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x1F | (32 * (-a2 & 0x3F));
      *(void *)__n128 result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PlaybackMode(void *a1)
{
  return *a1 >> 63;
}

void *destructiveProjectEnumData for PlaybackMode(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for PlaybackMode(uint64_t *result, uint64_t a2)
{
  *__n128 result = *result & 0xFFFFFFFFFFFFFF9 | (a2 << 63);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatorAttribute(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5 & 0xF8 | 7;
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(v4 + 64) + 7;
  if ((((v8 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
    unint64_t v9 = 16;
  }
  else {
    unint64_t v9 = (((v8 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  if ((v5 & 0x1000F8) != 0 || (v9 | 1) + (((v5 & 0xF8) + 27) & ~v6) > 0x18)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v6 + 16) & v7));
  }
  else
  {
    int v13 = *(_DWORD *)a2;
    unint64_t v12 = (unint64_t)a2 + 7;
    *(_DWORD *)a1 = v13;
    int v14 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v14 = *(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    int v15 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v16 = (_DWORD *)(((v12 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v15 = *v16;
    int v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v17 = *v18;
    uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v19 = *v20;
    uint64_t v21 = (void *)(((unint64_t)v19 + 11) & v7);
    uint64_t v22 = (void *)(((unint64_t)v20 + 11) & v7);
    unsigned int v23 = *((unsigned __int8 *)v22 + v9);
    if ((v9 & 0xFFFFFFF8) != 0 && v23 >= 2) {
      unsigned int v23 = *(_DWORD *)v22 + 2;
    }
    if (v23 == 1)
    {
      unint64_t v25 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      (*(void (**)(void *, void *))(v4 + 16))(v21, v22);
      *(void *)(((unint64_t)v21 + v8) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + v8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v26 = (char *)v21 + v25;
      long long v27 = *(_OWORD *)((char *)v22 + v25);
      *((void *)v26 + 2) = *(void *)((char *)v22 + v25 + 16);
      *(_OWORD *)uint64_t v26 = v27;
      *((unsigned char *)v21 + v9) = 1;
      swift_bridgeObjectRetain();
      return v3;
    }
    if (v23)
    {
      memcpy(v21, v22, v9 | 1);
      return v3;
    }
    *uint64_t v21 = *v22;
    v21[1] = v22[1];
    *((unsigned char *)v21 + v9) = 0;
    swift_retain();
  }
  swift_retain();
  return v3;
}

_DWORD *assignWithCopy for AnimatorAttribute(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v8 = *v7;
  unint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v10 = *v9;
  uint64_t v11 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v12 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v11 = *v12;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  uint64_t v16 = v15 + 11;
  unint64_t v17 = (unint64_t)v11 + v15 + 11;
  unint64_t v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = v17 & v18;
  unint64_t v20 = (unint64_t)v12 + v16;
  unint64_t v21 = v20 & v18;
  if ((v17 & v18) != (v20 & v18))
  {
    uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v23 = *(void *)(v14 + 64);
    unint64_t v24 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (((v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
      unint64_t v25 = 16;
    }
    else {
      unint64_t v25 = ((v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v26 = *(unsigned __int8 *)(v19 + v25);
    if (v26 >= 2 && (v25 & 0xFFFFFFF8) != 0) {
      unsigned int v26 = *(_DWORD *)v19 + 2;
    }
    if (v26 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v19, v13);
      swift_bridgeObjectRelease();
    }
    else if (!v26)
    {
      swift_release();
      swift_release();
    }
    unsigned int v28 = *(unsigned __int8 *)(v21 + v25);
    if ((v25 & 0xFFFFFFF8) != 0 && v28 >= 2) {
      unsigned int v28 = *(_DWORD *)v21 + 2;
    }
    if (v28 == 1)
    {
      unint64_t v30 = v24 + 8;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 16))(v19, v21, v13);
      *(void *)(((v19 | 7) + v23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v21 | 7) + v23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v31 = (char *)(v30 + v19);
      long long v32 = *(_OWORD *)(v30 + v21);
      *((void *)v31 + 2) = *(void *)(v30 + v21 + 16);
      *(_OWORD *)uint64_t v31 = v32;
      *(unsigned char *)(v19 + v25) = 1;
      swift_bridgeObjectRetain();
    }
    else if (v28)
    {
      memcpy((void *)v19, (const void *)v21, v25 | 1);
    }
    else
    {
      *(void *)unint64_t v19 = *(void *)v21;
      *(void *)(v19 + 8) = *(void *)(v21 + 8);
      *(unsigned char *)(v19 + v25) = 0;
      swift_retain();
      swift_retain();
    }
  }
  return a1;
}

_DWORD *initializeWithTake for AnimatorAttribute(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v7 = *v8;
  unint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v9 = *v10;
  uint64_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v11 = *v12;
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  uint64_t v15 = v14 + 11;
  unint64_t v16 = (unint64_t)v11 + v14 + 11;
  unint64_t v17 = ~v14 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (_OWORD *)(v16 & v17);
  unint64_t v19 = (_DWORD *)(((unint64_t)v12 + v15) & v17);
  uint64_t v20 = *(void *)(v13 + 64) + 7;
  if ((((v20 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
    unint64_t v21 = 16;
  }
  else {
    unint64_t v21 = (((v20 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v22 = *((unsigned __int8 *)v19 + v21);
  if (v22 >= 2 && (v21 & 0xFFFFFFF8) != 0) {
    unsigned int v22 = *v19 + 2;
  }
  if (v22 == 1)
  {
    unint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(_OWORD *, _DWORD *))(v13 + 32))(v18, v19);
    *(void *)(((unint64_t)v18 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v19 + v20) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v25 = (char *)v18 + v24;
    long long v26 = *(_OWORD *)((char *)v19 + v24);
    *((void *)v25 + 2) = *(void *)((char *)v19 + v24 + 16);
    *(_OWORD *)unint64_t v25 = v26;
    *((unsigned char *)v18 + v21) = 1;
  }
  else if (v22)
  {
    memcpy(v18, v19, v21 | 1);
  }
  else
  {
    *unint64_t v18 = *(_OWORD *)v19;
    *((unsigned char *)v18 + v21) = 0;
  }
  return a1;
}

_DWORD *assignWithTake for AnimatorAttribute(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v8 = *v7;
  unint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v10 = *v9;
  uint64_t v11 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v12 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v11 = *v12;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  uint64_t v16 = v15 + 11;
  unint64_t v17 = (unint64_t)v11 + v15 + 11;
  unint64_t v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = v17 & v18;
  unint64_t v20 = (unint64_t)v12 + v16;
  unint64_t v21 = v20 & v18;
  if ((v17 & v18) != (v20 & v18))
  {
    uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v23 = *(void *)(v14 + 64);
    unint64_t v24 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (((v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
      unint64_t v25 = 16;
    }
    else {
      unint64_t v25 = ((v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v26 = *(unsigned __int8 *)(v19 + v25);
    if (v26 >= 2 && (v25 & 0xFFFFFFF8) != 0) {
      unsigned int v26 = *(_DWORD *)v19 + 2;
    }
    if (v26 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v19, v13);
      swift_bridgeObjectRelease();
    }
    else if (!v26)
    {
      swift_release();
      swift_release();
    }
    unsigned int v28 = *(unsigned __int8 *)(v21 + v25);
    if ((v25 & 0xFFFFFFF8) != 0 && v28 >= 2) {
      unsigned int v28 = *(_DWORD *)v21 + 2;
    }
    if (v28 == 1)
    {
      unint64_t v30 = v24 + 8;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 32))(v19, v21, v13);
      *(void *)(((v19 | 7) + v23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v21 | 7) + v23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v31 = (char *)(v30 + v19);
      long long v32 = *(_OWORD *)(v30 + v21);
      *((void *)v31 + 2) = *(void *)(v30 + v21 + 16);
      *(_OWORD *)uint64_t v31 = v32;
      *(unsigned char *)(v19 + v25) = 1;
    }
    else if (v28)
    {
      memcpy((void *)v19, (const void *)v21, v25 | 1);
    }
    else
    {
      *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
      *(unsigned char *)(v19 + v25) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatorAttribute(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = ((((*(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v4 <= 0x10) {
    unint64_t v4 = 16;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  uint64_t v6 = v5 | 7;
  if (a2 < 0xFE) {
    goto LABEL_24;
  }
  uint64_t v7 = (((v5 + 27) & ~v6) + v4) | 1;
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v11 < 2)
    {
LABEL_24:
      unsigned int v15 = *(unsigned __int8 *)((((((((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                 + v6
                                 + 4) & ~v6)
                               + v4);
      if (v15 >= 3) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_24;
  }
LABEL_14:
  int v12 = (v9 - 1) << v8;
  if (v7 <= 3)
  {
    int v13 = v7;
  }
  else
  {
    int v12 = 0;
    int v13 = 4;
  }
  switch(v13)
  {
    case 2:
      int v14 = *a1;
      break;
    case 3:
      int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
      break;
    case 4:
      int v14 = *(_DWORD *)a1;
      break;
    default:
      int v14 = *(unsigned __int8 *)a1;
      break;
  }
  return (v14 | v12) + 254;
}

void storeEnumTagSinglePayload for AnimatorAttribute(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = ((((*(void *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v6 <= 0x10) {
    unint64_t v6 = 16;
  }
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v8 = v7 | 7;
  size_t v9 = (((v7 + 27) & ~(v7 | 7)) + v6) | 1;
  if (a3 < 0xFE)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v11 = a2 - 254;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      bzero(a1, v9);
      *a1 = v11 & ~(-1 << (8 * v9));
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_29:
        __break(1u);
        JUMPOUT(0x245BC9B04);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_22;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_21;
      case 3:
        goto LABEL_29;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_22;
      default:
LABEL_21:
        if (a2) {
LABEL_22:
        }
          *(unsigned char *)(((((((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + v8
                     + 4) & ~v8)
                   + v6) = -(char)a2;
        break;
    }
  }
}

void *initializeBufferWithCopyOfBuffer for KeyframeTrackState(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  unint64_t v4 = __dst;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
    unint64_t v8 = 16;
  }
  else {
    unint64_t v8 = ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  int v9 = *(_DWORD *)(v5 + 80);
  if ((v9 & 0x1000F8) != 0 || (v8 | 1) > 0x18)
  {
    uint64_t v11 = *(void *)__src;
    void *v4 = *(void *)__src;
    unint64_t v4 = (void *)(v11 + ((unsigned __int16)((v9 & 0xF8) + 23) & (unsigned __int16)~(v9 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v12 = __src[v8];
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)__src + 2;
    }
    if (v12 == 1)
    {
      unint64_t v14 = v7 + 8;
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v15 = ((unint64_t)v4 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = (unint64_t)&__src[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      long long v17 = *(_OWORD *)v16;
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = v17;
      *((unsigned char *)v4 + v8) = 1;
      swift_bridgeObjectRetain();
      return v4;
    }
    if (v12)
    {
      memcpy(__dst, __src, v8 | 1);
      return v4;
    }
    uint64_t v13 = *((void *)__src + 1);
    *__dst = *(void *)__src;
    __dst[1] = v13;
    *((unsigned char *)__dst + v8) = 0;
    swift_retain();
  }
  swift_retain();
  return v4;
}

unsigned __int8 *assignWithCopy for KeyframeTrackState(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
      unint64_t v9 = 16;
    }
    else {
      unint64_t v9 = ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v10 = __dst[v9];
    if (v10 >= 2 && (v9 & 0xFFFFFFF8) != 0) {
      unsigned int v10 = *(_DWORD *)__dst + 2;
    }
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_bridgeObjectRelease();
    }
    else if (!v10)
    {
      swift_release();
      swift_release();
    }
    unsigned int v12 = __src[v9];
    if ((v9 & 0xFFFFFFF8) != 0 && v12 >= 2) {
      unsigned int v12 = *(_DWORD *)__src + 2;
    }
    if (v12 == 1)
    {
      unint64_t v14 = v8 + 8;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *(void *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v15 = (unint64_t)&__dst[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = (unint64_t)&__src[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      long long v17 = *(_OWORD *)v16;
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = v17;
      __dst[v9] = 1;
      swift_bridgeObjectRetain();
    }
    else if (v12)
    {
      memcpy(__dst, __src, v9 | 1);
    }
    else
    {
      *(void *)__dst = *(void *)__src;
      *((void *)__dst + 1) = *((void *)__src + 1);
      __dst[v9] = 0;
      swift_retain();
      swift_retain();
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for KeyframeTrackState(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
    unint64_t v7 = 16;
  }
  else {
    unint64_t v7 = ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v8 = __src[v7];
  if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0) {
    unsigned int v8 = *(_DWORD *)__src + 2;
  }
  if (v8 == 1)
  {
    unint64_t v10 = v6 + 8;
    (*(void (**)(unsigned char *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst, __src);
    *(void *)((unint64_t)&__dst[v5 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v5 + 7] & 0xFFFFFFFFFFFFFFF8);
    unint64_t v11 = (unint64_t)&__dst[v10 + 7] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = (unint64_t)&__src[v10 + 7] & 0xFFFFFFFFFFFFFFF8;
    long long v13 = *(_OWORD *)v12;
    *(void *)(v11 + 16) = *(void *)(v12 + 16);
    *(_OWORD *)unint64_t v11 = v13;
    __dst[v7] = 1;
  }
  else if (v8)
  {
    memcpy(__dst, __src, v7 | 1);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    __dst[v7] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for KeyframeTrackState(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
      unint64_t v9 = 16;
    }
    else {
      unint64_t v9 = ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v10 = __dst[v9];
    if (v10 >= 2 && (v9 & 0xFFFFFFF8) != 0) {
      unsigned int v10 = *(_DWORD *)__dst + 2;
    }
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_bridgeObjectRelease();
    }
    else if (!v10)
    {
      swift_release();
      swift_release();
    }
    unsigned int v12 = __src[v9];
    if ((v9 & 0xFFFFFFF8) != 0 && v12 >= 2) {
      unsigned int v12 = *(_DWORD *)__src + 2;
    }
    if (v12 == 1)
    {
      unint64_t v14 = v8 + 8;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *(void *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v15 = (unint64_t)&__dst[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = (unint64_t)&__src[v14 + 7] & 0xFFFFFFFFFFFFFFF8;
      long long v17 = *(_OWORD *)v16;
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = v17;
      __dst[v9] = 1;
    }
    else if (v12)
    {
      memcpy(__dst, __src, v9 | 1);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[v9] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackState(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v3 <= 0x10) {
    unint64_t v3 = 16;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_20;
  }
  uint64_t v4 = v3 | 1;
  char v5 = 8 * (v3 | 1);
  if ((v3 | 1) <= 3)
  {
    unsigned int v6 = (a2 + ~(-1 << v5) - 253) >> v5;
    if (v6 > 0xFFFE)
    {
      int v7 = *(_DWORD *)&a1[v4];
      if (!v7) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (v6 > 0xFE)
    {
      int v7 = *(unsigned __int16 *)&a1[v4];
      if (!*(_WORD *)&a1[v4]) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (!v6) {
      goto LABEL_20;
    }
  }
  int v7 = a1[v4];
  if (!a1[v4])
  {
LABEL_20:
    unsigned int v11 = a1[v3];
    if (v11 >= 3) {
      return (v11 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
LABEL_13:
  int v9 = (v7 - 1) << v5;
  if (v4 >= 4) {
    int v9 = 0;
  }
  if (v4 == 1) {
    int v10 = *a1;
  }
  else {
    int v10 = *(_DWORD *)a1;
  }
  return (v10 | v9) + 254;
}

void storeEnumTagSinglePayload for KeyframeTrackState(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 | 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = (a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6);
    if (v10 > 0xFFFE)
    {
      int v7 = 4;
    }
    else if (v10 >= 0xFF)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 != 0;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 <= 0xFD)
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_23;
      case 3:
        goto LABEL_31;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (a2) {
LABEL_24:
        }
          a1[v5] = -(char)a2;
        break;
    }
    return;
  }
  unsigned int v8 = a2 - 254;
  if (v6 < 4)
  {
    int v9 = (v8 >> (8 * v6)) + 1;
    v8 &= ~(-1 << (8 * v6));
    bzero(a1, v6);
    if (v6 == 1)
    {
      *a1 = v8;
      goto LABEL_20;
    }
  }
  else
  {
    bzero(a1, v5 | 1);
    int v9 = 1;
  }
  *(_DWORD *)a1 = v8;
LABEL_20:
  switch(v7)
  {
    case 1:
      a1[v6] = v9;
      break;
    case 2:
      *(_WORD *)&a1[v6] = v9;
      break;
    case 3:
LABEL_31:
      __break(1u);
      JUMPOUT(0x245BCA478);
    case 4:
      *(_DWORD *)&a1[v6] = v9;
      break;
    default:
      return;
  }
}

uint64_t getEnumTag for KeyframeTrackState(_DWORD *a1, uint64_t a2)
{
  unint64_t v2 = ((((*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  uint64_t v3 = v2 & 0xFFFFFFF8;
  uint64_t v4 = *((unsigned __int8 *)a1 + v2);
  if (v4 >= 2 && v3 != 0) {
    return (*a1 + 2);
  }
  return v4;
}

void destructiveInjectEnumTag for KeyframeTrackState(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v4 <= 0x10) {
    size_t v4 = 16;
  }
  if (a2 > 1)
  {
    if (v4) {
      char v5 = 2;
    }
    else {
      char v5 = a2;
    }
    if (v4) {
      unsigned int v6 = a2 - 2;
    }
    else {
      unsigned int v6 = 0;
    }
    a1[v4] = v5;
    bzero(a1, v4);
    *(_DWORD *)a1 = v6;
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyframeTrackState.RepeatingState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  size_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0
    || ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    uint64_t v10 = *a2;
    uint64_t *v4 = *a2;
    size_t v4 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unint64_t v11 = v7 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v12 = ((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v13 = *(_OWORD *)v12;
    unint64_t v14 = ((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v14 + 16) = *(void *)(v12 + 16);
    *(_OWORD *)unint64_t v14 = v13;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t initializeWithCopy for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  *(void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v8 = a1 + v7 + 7;
  unint64_t v9 = (a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v9 + 16);
  long long v11 = *(_OWORD *)v9;
  unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v12 = v11;
  *(void *)(v12 + 16) = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  *(void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v8 = a1 + v7 + 7;
  unint64_t v9 = (a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)v9;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = v10;
  return a1;
}

uint64_t initializeWithTake for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  *(void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v8 = a1 + v7 + 7;
  unint64_t v9 = (a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v9 + 16);
  long long v11 = *(_OWORD *)v9;
  unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v12 = v11;
  *(void *)(v12 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for KeyframeTrackState.RepeatingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  *(void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v8 = a1 + v7 + 7;
  unint64_t v9 = (a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)v9;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackState.RepeatingState(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245BCAAD4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for KeyframeTrackState.RepeatingState(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *unint64_t v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245BCACD8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t initializeWithTake for CustomModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for CustomModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CustomModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245BCB1CCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  void (*v16)(void);
  uint64_t vars8;

  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245FD8CECLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  void (*v16)(void);
  uint64_t vars8;

  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460BD8B4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)()
{
  return closure #1 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)(v0[5], v0[6], v0[7], v0[2], v0[3], v0[4]);
}

uint64_t type metadata accessor for KeyframeTrackState.RepeatingState.Mode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static PlaybackMode.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 < 0)
  {
    if (v3 < 0)
    {
      outlined consume of _SymbolEffect.Trigger(*a1);
      outlined consume of _SymbolEffect.Trigger(v3);
      char v6 = ((v2 & 1) == 0) ^ v3;
      return v6 & 1;
    }
LABEL_8:
    outlined copy of _SymbolEffect.Trigger(v3);
    outlined consume of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v3);
    char v6 = 0;
    return v6 & 1;
  }
  if (v3 < 0)
  {
    swift_retain();
    goto LABEL_8;
  }
  if (v2 != v3)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 80);
    outlined copy of _SymbolEffect.Trigger(*a2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v3);
    LOBYTE(v4) = v4(v3);
    outlined consume of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v3);
    outlined consume of _SymbolEffect.Trigger(v3);
    outlined consume of _SymbolEffect.Trigger(v2);
    return v4 & 1;
  }
  outlined copy of _SymbolEffect.Trigger(*a1);
  outlined copy of _SymbolEffect.Trigger(v3);
  outlined consume of _SymbolEffect.Trigger(v2);
  outlined consume of _SymbolEffect.Trigger(v3);
  char v6 = 1;
  return v6 & 1;
}

uint64_t sub_245BCB358()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:));
}

uint64_t partial apply for closure #2 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(a1, closure #2 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:));
}

uint64_t partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C>(initialValue:repeating:content:keyframes:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[9], v2[10], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

uint64_t sub_245BCB400()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(a1, closure #2 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:));
}

void *type metadata accessor for AnimationTime()
{
  return &unk_26FA47E98;
}

uint64_t destroy for KeyframeTrackState.EventDrivenState()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for KeyframeTrackState.EventDrivenState(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for KeyframeTrackState.EventDrivenState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for KeyframeTrackState.EventDrivenState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackState.RepeatingState.Mode(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 8) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyframeTrackState.RepeatingState.Mode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 2 * -a2;
      *(void *)(result + 16) = 0;
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for KeyframeTrackState.RepeatingState.Mode(uint64_t a1)
{
  return *(void *)(a1 + 8) >> 63;
}

uint64_t destructiveProjectEnumData for KeyframeTrackState.RepeatingState.Mode(uint64_t result)
{
  *(void *)(result + 8) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for KeyframeTrackState.RepeatingState.Mode(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 1 | (a2 << 63);
  return result;
}

void *initializeBufferWithCopyOfBuffer for KeyframeTrackState.EventDrivenState.Phase(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for KeyframeTrackState.EventDrivenState.Phase()
{
  return swift_release();
}

void *assignWithCopy for KeyframeTrackState.EventDrivenState.Phase(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for KeyframeTrackState.EventDrivenState.Phase(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackState.EventDrivenState.Phase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for KeyframeTrackState.EventDrivenState.Phase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)__n128 result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t *destructiveInjectEnumTag for KeyframeTrackState.EventDrivenState.Phase(uint64_t *result, uint64_t a2)
{
  *__n128 result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

uint64_t type metadata accessor for KeyframeTrackState.EventDrivenState.Phase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _AnyResolvedPaint.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 168) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 184), a1);
  return v2;
}

uint64_t ResolvedPaint.isCALayerCompatible.getter()
{
  return 1;
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance LinearGradient._Paint()
{
  return specialized ProtobufEncoder.encodeMessage<A>(_:)();
}

uint64_t ResolvedPaint.encodePaint(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 72))(&v8, a2, a3);
  if (v9) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 + 24) + 8))(a1, a2);
  }
  else {
    return ProtobufEncoder.messageField<A>(_:_:)(v8, v3, a2, *(void *)(a3 + 24));
  }
}

{
  return ResolvedPaint.encodePaint(to:)(a1, a2, a3);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance RadialGradient._Paint()
{
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v3);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance RadialGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance EllipticalGradient._Paint()
{
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v3);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance EllipticalGradient@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = lazy protocol witness table accessor for type EllipticalGradient and conformance EllipticalGradient();

  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

double static Paint._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 20);
  int v21 = *a1;
  uint64_t v13 = v7;
  int v14 = v8;
  uint64_t v15 = v9;
  long long v11 = *(_OWORD *)(a2 + 5);
  long long v16 = *(_OWORD *)(a2 + 3);
  long long v17 = v11;
  long long v18 = *(_OWORD *)(a2 + 7);
  uint64_t v19 = a2[9];
  int v20 = v10;
  return static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v21, (uint64_t)&v13, a3, a4, *(void *)(a5 + 8), a6, a7);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance AngularGradient._Paint()
{
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  ProtobufEncoder.encodeVarint(_:)(0x22uLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v3);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance AngularGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1);
}

void ResolvedPaint.resolvedGradient.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

{
  ResolvedPaint.resolvedGradient.getter(a1);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance Color.Resolved()
{
  float v1 = *v0;
  float v2 = v0[1];
  float v3 = v0[2];
  float v4 = v0[3];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(v1, v2, v3, v4);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnyLinearGradient@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = lazy protocol witness table accessor for type _AnyLinearGradient and conformance _AnyLinearGradient();

  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance _AnyLinearGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1, (void (*)(void))type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnyRadialGradient@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = lazy protocol witness table accessor for type _AnyRadialGradient and conformance _AnyRadialGradient();

  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance _AnyRadialGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1, (void (*)(void))type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<RadialGradient._Paint>>, &lazy cache variable for type metadata for _AnyResolvedPaint<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnyEllipticalGradient@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = lazy protocol witness table accessor for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient();

  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance _AnyEllipticalGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1, (void (*)(void))type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<EllipticalGradient._Paint>>, &lazy cache variable for type metadata for _AnyResolvedPaint<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnyAngularGradient@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = lazy protocol witness table accessor for type _AnyAngularGradient and conformance _AnyAngularGradient();

  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance _AnyAngularGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1);
}

uint64_t protocol witness for ResolvedPaint.encodePaint(to:) in conformance ImagePaint._Paint()
{
  return specialized ProtobufEncoder.encodeMessage<A>(_:)();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance ImagePaint(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1);
}

uint64_t ResolvedPaint.isClear.getter()
{
  return 0;
}

uint64_t ResolvedPaint.isOpaque.getter()
{
  return 0;
}

double AnyResolvedPaint.protobufPaint.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t AnyResolvedPaint.isClear.getter()
{
  return 0;
}

uint64_t AnyResolvedPaint.isOpaque.getter()
{
  return 0;
}

void AnyResolvedPaint.resolvedGradient.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t AnyResolvedPaint.isCALayerCompatible.getter()
{
  return 0;
}

uint64_t AnyResolvedPaint.isEqual(to:)()
{
  return 0;
}

void AnyResolvedPaint.encode(to:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyResolvedPaint.as<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  type metadata accessor for _AnyResolvedPaint();
  uint64_t v6 = swift_dynamicCastClass();
  uint64_t v7 = v6;
  if (v6) {
    uint64_t v6 = swift_retain();
  }
  v10[5] = v7;
  MEMORY[0x270FA5388](v6);
  v10[2] = a1;
  v10[3] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnyResolvedPaint.as<A>(type:), (uint64_t)v10, MEMORY[0x263F8E628], a1, v8, a3);
  return swift_release();
}

uint64_t static AnyResolvedPaint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a2) & 1;
}

uint64_t AnyResolvedPaint.deinit()
{
  return v0;
}

uint64_t AnyResolvedPaint.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyResolvedPaint(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128))(*a2) & 1;
}

uint64_t _AnyResolvedPaint.paint.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 168) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 184));
}

uint64_t _AnyResolvedPaint.init(_:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 168) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 184), a1);
  return v1;
}

uint64_t _AnyResolvedPaint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  uint64_t v11 = v6;
  char v12 = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)(v5 + 176) + 32))(a1, v10, a3, a4, *(void *)(v5 + 168));
}

uint64_t _AnyResolvedPaint.protobufPaint.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 184);
  uint64_t v3 = *(void *)(*(void *)v1 + 168);
  a1[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(boxed_opaque_existential_1, v2, v3);
}

uint64_t _AnyResolvedPaint.isClear.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 176) + 40))(*(void *)(*(void *)v0 + 168)) & 1;
}

uint64_t _AnyResolvedPaint.resolvedGradient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 176) + 56))(*(void *)(*(void *)v0 + 168));
}

uint64_t _AnyResolvedPaint.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t _AnyResolvedPaint.encode(to:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 176) + 80))(a1, *(void *)(*(void *)v1 + 168));
}

uint64_t _AnyResolvedPaint.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 168) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 184));
}

uint64_t _AnyResolvedPaint.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 168) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 184));
  return v0;
}

uint64_t CodableResolvedPaint.Tag.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::CodableResolvedPaint::Tag __swiftcall CodableResolvedPaint.Tag.init(rawValue:)(SwiftUI::CodableResolvedPaint::Tag rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static CodableResolvedPaint.Tag.color.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static CodableResolvedPaint.Tag.linearGradient.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static CodableResolvedPaint.Tag.radialGradient.getter(void *a1@<X8>)
{
  *a1 = 3;
}

void static CodableResolvedPaint.Tag.angularGradient.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static CodableResolvedPaint.Tag.ellipticalGradient.getter(void *a1@<X8>)
{
  *a1 = 5;
}

void static CodableResolvedPaint.Tag.image.getter(void *a1@<X8>)
{
  *a1 = 6;
}

void static CodableResolvedPaint.Tag.anchorRect.getter(void *a1@<X8>)
{
  *a1 = 7;
}

void static CodableResolvedPaint.Tag.shader.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static CodableResolvedPaint.Tag.meshGradient.getter(void *a1@<X8>)
{
  *a1 = 9;
}

BOOL static CodableResolvedPaint.Tag.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

unint64_t lazy protocol witness table accessor for type EllipticalGradient and conformance EllipticalGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type EllipticalGradient and conformance EllipticalGradient;
  if (!lazy protocol witness table cache variable for type EllipticalGradient and conformance EllipticalGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EllipticalGradient and conformance EllipticalGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyLinearGradient and conformance _AnyLinearGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnyLinearGradient and conformance _AnyLinearGradient;
  if (!lazy protocol witness table cache variable for type _AnyLinearGradient and conformance _AnyLinearGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyLinearGradient and conformance _AnyLinearGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyRadialGradient and conformance _AnyRadialGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnyRadialGradient and conformance _AnyRadialGradient;
  if (!lazy protocol witness table cache variable for type _AnyRadialGradient and conformance _AnyRadialGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyRadialGradient and conformance _AnyRadialGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient;
  if (!lazy protocol witness table cache variable for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyEllipticalGradient and conformance _AnyEllipticalGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyAngularGradient and conformance _AnyAngularGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnyAngularGradient and conformance _AnyAngularGradient;
  if (!lazy protocol witness table cache variable for type _AnyAngularGradient and conformance _AnyAngularGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyAngularGradient and conformance _AnyAngularGradient);
  }
  return result;
}

uint64_t protocol witness for ProtobufTag.init(rawValue:) in conformance CodableResolvedPaint.Tag@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableResolvedPaint.base.getter()
{
  return swift_retain();
}

uint64_t CodableResolvedPaint.base.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CodableResolvedPaint.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableResolvedPaint.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableResolvedPaint.encode(to:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

unint64_t CodableResolvedPaint.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6) {
    goto LABEL_150;
  }
  uint64_t v7 = v2;
  uint64_t v8 = 0;
  while (2)
  {
    unint64_t result = a1[3];
    if (result)
    {
      unint64_t v10 = a1[4];
      if (v5 < v10) {
        goto LABEL_9;
      }
      if (v10 < v5) {
        goto LABEL_152;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v7) {
      return swift_release();
    }
    if (result < 8)
    {
LABEL_152:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_release();
    }
LABEL_9:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        uint64_t v11 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        }
        unint64_t v13 = v11[2];
        unint64_t v12 = v11[3];
        if (v13 >= v12 >> 1) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
        }
        v11[2] = v13 + 1;
        v11[v13 + 4] = v6;
        a1[5] = v11;
        int v14 = a1;
        uint64_t v15 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          return swift_release();
        }
        if (v15 < 0)
        {
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
        }
        else
        {
          unint64_t v16 = a1[1] + v15;
          if (v6 < v16) {
            goto LABEL_152;
          }
          a1[2] = v16;
          float v17 = specialized Color.Resolved.init(from:)(a1);
          int v14 = (void *)a1[5];
          if (v14[2])
          {
            float v21 = v17;
            int v22 = v18;
            int v23 = v19;
            int v24 = v20;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v25 = v14[2];
              if (!v25) {
                goto LABEL_196;
              }
              goto LABEL_21;
            }
            int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            uint64_t v25 = v14[2];
            if (v25)
            {
LABEL_21:
              uint64_t v26 = v25 - 1;
              uint64_t v27 = v14[v26 + 4];
              void v14[2] = v26;
              a1[5] = v14;
              a1[2] = v27;
              type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<Color.Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
              uint64_t v28 = swift_allocObject();
              *(float *)(v28 + 16) = v21;
              *(_DWORD *)(v28 + 20) = v22;
              *(_DWORD *)(v28 + 24) = v23;
              *(_DWORD *)(v28 + 28) = v24;
              goto LABEL_118;
            }
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
            __break(1u);
            uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            uint64_t v107 = v106[2];
            if (v107) {
              goto LABEL_174;
            }
            __break(1u);
            uint64_t v106 = (void *)a1[5];
            if (v106[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v107 = v106[2];
                if (v107) {
                  goto LABEL_174;
                }
LABEL_159:
                __break(1u);
                uint64_t v106 = (void *)a1[5];
                if (v106[2])
                {
                  if (swift_isUniquelyReferenced_nonNull_native())
                  {
                    uint64_t v107 = v106[2];
                    if (v107) {
                      goto LABEL_174;
                    }
LABEL_162:
                    __break(1u);
                    uint64_t v106 = (void *)a1[5];
                    if (v106[2])
                    {
                      if (swift_isUniquelyReferenced_nonNull_native())
                      {
                        uint64_t v107 = v106[2];
                        if (v107) {
                          goto LABEL_174;
                        }
LABEL_165:
                        __break(1u);
                        uint64_t v106 = (void *)a1[5];
                        if (v106[2])
                        {
                          if (swift_isUniquelyReferenced_nonNull_native())
                          {
                            uint64_t v107 = v106[2];
                            if (v107) {
                              goto LABEL_174;
                            }
LABEL_168:
                            __break(1u);
                            uint64_t v106 = (void *)a1[5];
                            if (v106[2])
                            {
                              if (swift_isUniquelyReferenced_nonNull_native())
                              {
                                uint64_t v107 = v106[2];
                                if (!v107) {
                                  goto LABEL_171;
                                }
LABEL_174:
                                uint64_t v108 = v107 - 1;
                                uint64_t v109 = v106[v108 + 4];
                                v106[2] = v108;
                                unint64_t result = swift_release();
                                a1[5] = v106;
                                a1[2] = v109;
                                return result;
                              }
                            }
                            else
                            {
                              __break(1u);
                            }
                            uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                            uint64_t v107 = v106[2];
                            if (v107) {
                              goto LABEL_174;
                            }
LABEL_171:
                            __break(1u);
                            uint64_t v106 = (void *)a1[5];
                            if (v106[2])
                            {
                              if (swift_isUniquelyReferenced_nonNull_native())
                              {
                                uint64_t v107 = v106[2];
                                if (v107) {
                                  goto LABEL_174;
                                }
LABEL_224:
                                __break(1u);
                                __break(1u);
                                uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                                uint64_t v114 = v113[2];
                                if (v114)
                                {
                                  uint64_t v110 = v114 - 1;
                                  uint64_t v111 = v113[v110 + 4];
                                  v113[2] = v110;
                                  unint64_t result = swift_release();
                                }
                                else
                                {
                                  __break(1u);
                                  __break(1u);
                                  uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew()(v113);
                                  uint64_t v115 = v113[2];
                                  if (!v115) {
                                    __break(1u);
                                  }
                                  uint64_t v112 = v115 - 1;
                                  uint64_t v111 = v113[v112 + 4];
                                  v113[2] = v112;
                                  unint64_t result = swift_release_n();
                                }
                                a1[5] = v113;
                                a1[2] = v111;
                                return result;
                              }
                            }
                            else
                            {
                              __break(1u);
                            }
                            uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                            uint64_t v107 = v106[2];
                            if (v107) {
                              goto LABEL_174;
                            }
                            goto LABEL_224;
                          }
                        }
                        else
                        {
                          __break(1u);
                        }
                        uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                        uint64_t v107 = v106[2];
                        if (v107) {
                          goto LABEL_174;
                        }
                        goto LABEL_168;
                      }
                    }
                    else
                    {
                      __break(1u);
                    }
                    uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                    uint64_t v107 = v106[2];
                    if (v107) {
                      goto LABEL_174;
                    }
                    goto LABEL_165;
                  }
                }
                else
                {
                  __break(1u);
                }
                uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
                uint64_t v107 = v106[2];
                if (v107) {
                  goto LABEL_174;
                }
                goto LABEL_162;
              }
            }
            else
            {
              __break(1u);
            }
            uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
            uint64_t v107 = v106[2];
            if (v107) {
              goto LABEL_174;
            }
            goto LABEL_159;
          }
        }
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
        goto LABEL_196;
      case 2uLL:
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        uint64_t v29 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        }
        unint64_t v31 = v29[2];
        unint64_t v30 = v29[3];
        if (v31 >= v30 >> 1) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
        }
        v29[2] = v31 + 1;
        v29[v31 + 4] = v6;
        a1[5] = v29;
        int v14 = a1;
        uint64_t v32 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          return swift_release();
        }
        if (v32 < 0) {
          goto LABEL_181;
        }
        unint64_t v33 = a1[1] + v32;
        if (v6 < v33) {
          goto LABEL_152;
        }
        a1[2] = v33;
        LinearGradient._Paint.init(from:)((unint64_t)a1, &v123);
        int v14 = (void *)a1[5];
        if (!v14[2]) {
          goto LABEL_190;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v34 = v14[2];
          if (!v34) {
            goto LABEL_197;
          }
        }
        else
        {
          int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          uint64_t v34 = v14[2];
          if (!v34) {
            goto LABEL_197;
          }
        }
        uint64_t v35 = v34 - 1;
        uint64_t v36 = v14[v35 + 4];
        void v14[2] = v35;
        a1[5] = v14;
        a1[2] = v36;
        uint64_t v37 = v123;
        char v38 = BYTE8(v123);
        long long v119 = *(_OWORD *)v124;
        uint64_t v40 = *(void *)&v124[24];
        uint64_t v39 = *(void *)&v124[16];
        uint64_t v41 = lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint;
        uint64_t v42 = (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<LinearGradient._Paint>;
        uint64_t v43 = &type metadata for LinearGradient._Paint;
        goto LABEL_73;
      case 3uLL:
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        uint64_t v44 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
        }
        unint64_t v46 = v44[2];
        unint64_t v45 = v44[3];
        if (v46 >= v45 >> 1) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v44);
        }
        v44[2] = v46 + 1;
        v44[v46 + 4] = v6;
        a1[5] = v44;
        int v14 = a1;
        uint64_t v47 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          return swift_release();
        }
        if (v47 < 0) {
          goto LABEL_182;
        }
        unint64_t v48 = a1[1] + v47;
        if (v6 < v48) {
          goto LABEL_152;
        }
        a1[2] = v48;
        RadialGradient._Paint.init(from:)((unint64_t)a1, (uint64_t)&v123);
        int v14 = (void *)a1[5];
        if (!v14[2]) {
          goto LABEL_191;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v49 = v14[2];
          if (!v49) {
            goto LABEL_198;
          }
        }
        else
        {
          int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          uint64_t v49 = v14[2];
          if (!v49) {
            goto LABEL_198;
          }
        }
        uint64_t v50 = v49 - 1;
        uint64_t v51 = v14[v50 + 4];
        void v14[2] = v50;
        a1[5] = v14;
        a1[2] = v51;
        uint64_t v37 = v123;
        char v38 = BYTE8(v123);
        long long v119 = *(_OWORD *)v124;
        uint64_t v40 = *(void *)&v124[24];
        uint64_t v39 = *(void *)&v124[16];
        uint64_t v41 = lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint;
        uint64_t v42 = &lazy cache variable for type metadata for _AnyResolvedPaint<RadialGradient._Paint>;
        uint64_t v43 = &type metadata for RadialGradient._Paint;
        goto LABEL_73;
      case 4uLL:
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        uint64_t v52 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
        }
        unint64_t v54 = v52[2];
        unint64_t v53 = v52[3];
        if (v54 >= v53 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v52);
        }
        v52[2] = v54 + 1;
        v52[v54 + 4] = v6;
        a1[5] = v52;
        int v14 = a1;
        uint64_t v55 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          return swift_release();
        }
        if (v55 < 0) {
          goto LABEL_183;
        }
        unint64_t v56 = a1[1] + v55;
        if (v6 < v56) {
          goto LABEL_152;
        }
        a1[2] = v56;
        AngularGradient._Paint.init(from:)((unint64_t)a1, (uint64_t)&v123);
        int v14 = (void *)a1[5];
        if (!v14[2]) {
          goto LABEL_192;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v57 = v14[2];
          if (!v57) {
            goto LABEL_199;
          }
        }
        else
        {
          int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          uint64_t v57 = v14[2];
          if (!v57) {
            goto LABEL_199;
          }
        }
        uint64_t v58 = v57 - 1;
        uint64_t v59 = v14[v58 + 4];
        void v14[2] = v58;
        a1[5] = v14;
        a1[2] = v59;
        uint64_t v37 = v123;
        char v38 = BYTE8(v123);
        long long v119 = *(_OWORD *)v124;
        uint64_t v40 = *(void *)&v124[24];
        uint64_t v39 = *(void *)&v124[16];
        uint64_t v41 = lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint;
        uint64_t v42 = &lazy cache variable for type metadata for _AnyResolvedPaint<AngularGradient._Paint>;
        uint64_t v43 = &type metadata for AngularGradient._Paint;
        goto LABEL_73;
      case 5uLL:
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        uint64_t v60 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
        }
        unint64_t v62 = v60[2];
        unint64_t v61 = v60[3];
        if (v62 >= v61 >> 1) {
          uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v62 + 1, 1, v60);
        }
        void v60[2] = v62 + 1;
        v60[v62 + 4] = v6;
        a1[5] = v60;
        int v14 = a1;
        uint64_t v63 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          return swift_release();
        }
        if (v63 < 0) {
          goto LABEL_184;
        }
        unint64_t v64 = a1[1] + v63;
        if (v6 < v64) {
          goto LABEL_152;
        }
        a1[2] = v64;
        EllipticalGradient._Paint.init(from:)((unint64_t)a1, (uint64_t)&v123);
        int v14 = (void *)a1[5];
        if (!v14[2]) {
          goto LABEL_193;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v65 = v14[2];
          if (!v65) {
            goto LABEL_200;
          }
        }
        else
        {
          int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          uint64_t v65 = v14[2];
          if (!v65) {
            goto LABEL_200;
          }
        }
        uint64_t v66 = v65 - 1;
        uint64_t v67 = v14[v66 + 4];
        void v14[2] = v66;
        a1[5] = v14;
        a1[2] = v67;
        uint64_t v37 = v123;
        char v38 = BYTE8(v123);
        long long v119 = *(_OWORD *)v124;
        uint64_t v40 = *(void *)&v124[24];
        uint64_t v39 = *(void *)&v124[16];
        uint64_t v41 = lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
        uint64_t v42 = &lazy cache variable for type metadata for _AnyResolvedPaint<EllipticalGradient._Paint>;
        uint64_t v43 = &type metadata for EllipticalGradient._Paint;
LABEL_73:
        type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, v42, (uint64_t (*)(void))v41, (uint64_t)v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v37;
        *(unsigned char *)(v28 + 24) = v38;
        *(_OWORD *)(v28 + 32) = v119;
        *(void *)(v28 + 48) = v39;
        *(void *)(v28 + 56) = v40;
        goto LABEL_118;
      case 6uLL:
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        ProtobufDecoder.beginMessage()();
        if (v7) {
          return swift_release();
        }
        ImagePaint._Paint.init(from:)((id *)a1, (uint64_t)&v123);
        uint64_t v7 = 0;
        int v14 = (void *)a1[5];
        if (!v14[2]) {
          goto LABEL_187;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v68 = v14[2];
          if (!v68) {
            goto LABEL_188;
          }
        }
        else
        {
          int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          uint64_t v68 = v14[2];
          if (!v68) {
            goto LABEL_188;
          }
        }
        uint64_t v69 = v68 - 1;
        uint64_t v70 = v14[v69 + 4];
        void v14[2] = v69;
        a1[5] = v14;
        a1[2] = v70;
        type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<ImagePaint._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint, (uint64_t)&type metadata for ImagePaint._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
        uint64_t v28 = swift_allocObject();
        long long v71 = v129;
        *(_OWORD *)(v28 + 112) = v128;
        *(_OWORD *)(v28 + 128) = v71;
        *(_OWORD *)(v28 + 144) = v130;
        long long v72 = v125;
        *(_OWORD *)(v28 + 48) = *(_OWORD *)&v124[16];
        *(_OWORD *)(v28 + 64) = v72;
        long long v73 = v127;
        *(_OWORD *)(v28 + 80) = v126;
        *(_OWORD *)(v28 + 96) = v73;
        long long v74 = *(_OWORD *)v124;
        *(_OWORD *)(v28 + 16) = v123;
        *(_OWORD *)(v28 + 32) = v74;
        goto LABEL_118;
      case 7uLL:
        if (!v8)
        {
          unint64_t v5 = a1[1];
          unint64_t v6 = a1[2];
          if (v5 >= v6) {
            goto LABEL_150;
          }
          continue;
        }
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        uint64_t v75 = (void *)a1[5];
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75[2] + 1, 1, v75);
        }
        unint64_t v77 = v75[2];
        unint64_t v76 = v75[3];
        if (v77 >= v76 >> 1) {
          uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v76 > 1), v77 + 1, 1, v75);
        }
        v75[2] = v77 + 1;
        v75[v77 + 4] = v6;
        a1[5] = v75;
        int v14 = a1;
        uint64_t v78 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          return swift_release_n();
        }
        if (v78 < 0) {
          goto LABEL_203;
        }
        unint64_t v79 = a1[1] + v78;
        if (v6 >= v79)
        {
          a1[2] = v79;
          long long v123 = 0u;
          *(_OWORD *)char v124 = 0u;
          closure #1 in CGRect.init(from:)((unint64_t)&v123, a1, &v122);
          int v14 = (void *)a1[5];
          if (!v14[2]) {
            goto LABEL_204;
          }
          long long v117 = *(_OWORD *)v124;
          long long v120 = v123;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            uint64_t v80 = v14[2];
            if (v80) {
              goto LABEL_92;
            }
LABEL_149:
            __break(1u);
LABEL_150:
            a1[3] = 0;
            goto LABEL_151;
          }
          uint64_t v80 = v14[2];
          if (!v80) {
            goto LABEL_149;
          }
LABEL_92:
          uint64_t v81 = v80 - 1;
          uint64_t v82 = v14[v81 + 4];
          void v14[2] = v81;
          a1[5] = v14;
          a1[2] = v82;
          long long v123 = v120;
          *(_OWORD *)char v124 = v117;
          *(void *)&v124[16] = 0;
          (*(void (**)(long long *, void *, _UNKNOWN **))(*(void *)v8 + 136))(&v123, &unk_26FA52048, &protocol witness table for Visitor #1 in AnyResolvedPaint.anchorRect(_:));
          uint64_t v28 = *(void *)&v124[16];
          if (!*(void *)&v124[16])
          {
            __break(1u);
            JUMPOUT(0x245BCF2A0);
          }
          unint64_t result = swift_release_n();
LABEL_119:
          uint64_t v8 = v28;
LABEL_120:
          unint64_t v5 = a1[1];
          unint64_t v6 = a1[2];
          if (v5 >= v6)
          {
            a1[3] = 0;
            if (v8)
            {
              *a2 = v8;
              return result;
            }
LABEL_151:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          continue;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_release_n();
      case 8uLL:
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        uint64_t v83 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83);
        }
        unint64_t v85 = v83[2];
        unint64_t v84 = v83[3];
        if (v85 >= v84 >> 1) {
          uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v85 + 1, 1, v83);
        }
        v83[2] = v85 + 1;
        v83[v85 + 4] = v6;
        a1[5] = v83;
        int v14 = a1;
        uint64_t v86 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          return swift_release();
        }
        if (v86 < 0) {
          goto LABEL_185;
        }
        unint64_t v87 = a1[1] + v86;
        if (v6 < v87) {
          goto LABEL_152;
        }
        a1[2] = v87;
        Shader.ResolvedShader.init(from:)(a1, (double *)&v123);
        int v14 = (void *)a1[5];
        if (!v14[2]) {
          goto LABEL_194;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v88 = v14[2];
          if (!v88) {
            goto LABEL_201;
          }
        }
        else
        {
          int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          uint64_t v88 = v14[2];
          if (!v88) {
            goto LABEL_201;
          }
        }
        uint64_t v89 = v88 - 1;
        uint64_t v90 = v14[v89 + 4];
        void v14[2] = v89;
        a1[5] = v14;
        a1[2] = v90;
        long long v92 = v123;
        uint64_t v91 = *(void *)v124;
        int v93 = *(_DWORD *)&v124[8];
        type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v92;
        *(void *)(v28 + 32) = v91;
        *(_DWORD *)(v28 + 40) = v93;
        goto LABEL_118;
      case 9uLL:
        if ((result & 7) != 2) {
          goto LABEL_152;
        }
        uint64_t v94 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v94[2] + 1, 1, v94);
        }
        unint64_t v96 = v94[2];
        unint64_t v95 = v94[3];
        if (v96 >= v95 >> 1) {
          uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v95 > 1), v96 + 1, 1, v94);
        }
        v94[2] = v96 + 1;
        v94[v96 + 4] = v6;
        a1[5] = v94;
        int v14 = a1;
        uint64_t v97 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          return swift_release();
        }
        if (v97 < 0) {
          goto LABEL_186;
        }
        unint64_t v98 = a1[1] + v97;
        if (v6 < v98) {
          goto LABEL_152;
        }
        a1[2] = v98;
        MeshGradient._Paint.init(from:)((uint64_t)a1, (uint64_t)&v123);
        int v14 = (void *)a1[5];
        if (!v14[2]) {
          goto LABEL_195;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v99 = v14[2];
          if (!v99) {
            goto LABEL_202;
          }
        }
        else
        {
          int v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
          uint64_t v99 = v14[2];
          if (!v99) {
            goto LABEL_202;
          }
        }
        uint64_t v100 = v99 - 1;
        uint64_t v101 = v14[v100 + 4];
        void v14[2] = v100;
        a1[5] = v14;
        a1[2] = v101;
        uint64_t v102 = v123;
        char v103 = BYTE8(v123);
        uint64_t v104 = *(void *)v124;
        uint64_t v121 = *(void *)&v124[24];
        uint64_t v118 = v125;
        int v116 = DWORD2(v125);
        type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(0, &lazy cache variable for type metadata for _AnyResolvedPaint<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v102;
        *(unsigned char *)(v28 + 24) = v103;
        *(void *)(v28 + 32) = v104;
        *(_OWORD *)(v28 + 40) = *(_OWORD *)&v124[8];
        *(void *)(v28 + 56) = v121;
        *(void *)(v28 + 64) = v118;
        *(_DWORD *)(v28 + 72) = v116;
LABEL_118:
        unint64_t result = swift_release();
        goto LABEL_119;
      default:
        switch(result & 7)
        {
          case 0uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v7) {
              return swift_release();
            }
            goto LABEL_120;
          case 1uLL:
            unint64_t v105 = a1[1] + 8;
            if (v6 < v105) {
              goto LABEL_152;
            }
            goto LABEL_131;
          case 2uLL:
            int v14 = a1;
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v7) {
              return swift_release();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_205;
            }
            unint64_t v105 = a1[1] + result;
            if (v6 < v105) {
              goto LABEL_152;
            }
LABEL_131:
            a1[1] = v105;
            break;
          case 5uLL:
            unint64_t v105 = a1[1] + 4;
            if (v6 < v105) {
              goto LABEL_152;
            }
            goto LABEL_131;
          default:
            goto LABEL_152;
        }
        goto LABEL_120;
    }
  }
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableResolvedPaint()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableResolvedPaint@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return CodableResolvedPaint.init(from:)(a1, a2);
}

uint64_t visitPaint<A>(_:) in Visitor #1 in AnyResolvedPaint.anchorRect(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AnchoredResolvedPaint();
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v16 - v12;
  swift_getWitnessTable();
  type metadata accessor for _AnyResolvedPaint();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  AnchoredResolvedPaint.init(_:bounds:)((uint64_t)v10, a2, a3, (uint64_t)v13, *(double *)v4, *(double *)(v4 + 8), *(double *)(v4 + 16), *(double *)(v4 + 24));
  uint64_t v14 = _AnyResolvedPaint.__allocating_init(_:)((uint64_t)v13);
  uint64_t result = swift_release();
  *(void *)(v4 + 32) = v14;
  return result;
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance Shader@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = lazy protocol witness table accessor for type Shader and conformance Shader();

  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance Shader(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1);
}

void protocol witness for ResolvedPaint.encodePaint(to:) in conformance Shader.ResolvedShader()
{
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance MeshGradient@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = lazy protocol witness table accessor for type MeshGradient and conformance MeshGradient();

  return static Paint._makeView<A>(view:inputs:)(a1, a2, a5, a3, v12, a4, a6);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance MeshGradient(uint64_t a1)
{
  return specialized Paint._apply(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint;
  if (!lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint;
  if (!lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint;
  if (!lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshGradient._Paint and conformance MeshGradient._Paint);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader()
{
  unint64_t result = lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader;
  if (!lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader;
  if (!lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader;
  if (!lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.ResolvedShader and conformance Shader.ResolvedShader);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Shader and conformance Shader()
{
  unint64_t result = lazy protocol witness table cache variable for type Shader and conformance Shader;
  if (!lazy protocol witness table cache variable for type Shader and conformance Shader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader and conformance Shader);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshGradient and conformance MeshGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshGradient and conformance MeshGradient;
  if (!lazy protocol witness table cache variable for type MeshGradient and conformance MeshGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshGradient and conformance MeshGradient);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableResolvedPaint.Tag(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag;
  if (!lazy protocol witness table cache variable for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableResolvedPaint.Tag and conformance CodableResolvedPaint.Tag);
  }
  return result;
}

uint64_t dispatch thunk of ResolvedPaint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6 = *(unsigned char *)(a1 + 32);
  char v7 = *(unsigned char *)(a4 + 32);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, _OWORD *))(a6 + 32);
  long long v9 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v9;
  char v15 = v6;
  long long v10 = *(_OWORD *)(a4 + 16);
  v12[0] = *(_OWORD *)a4;
  v12[1] = v10;
  char v13 = v7;
  return v8(v14, a2, a3, v12);
}

uint64_t dispatch thunk of ResolvedPaint.isClear.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ResolvedPaint.isOpaque.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ResolvedPaint.resolvedGradient.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ResolvedPaint.isCALayerCompatible.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of static ResolvedPaint.leafProtobufTag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ResolvedPaint.encodePaint(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t method lookup function for AnyResolvedPaint(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyResolvedPaint);
}

uint64_t dispatch thunk of AnyResolvedPaint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = *(unsigned char *)(a1 + 32);
  char v6 = *(unsigned char *)(a4 + 32);
  char v7 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, _OWORD *))(*(void *)v4 + 80);
  long long v8 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v8;
  char v14 = v5;
  long long v9 = *(_OWORD *)(a4 + 16);
  v11[0] = *(_OWORD *)a4;
  v11[1] = v9;
  char v12 = v6;
  return v7(v13, a2, a3, v11);
}

uint64_t dispatch thunk of AnyResolvedPaint.protobufPaint.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of AnyResolvedPaint.isClear.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AnyResolvedPaint.isOpaque.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AnyResolvedPaint.resolvedGradient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AnyResolvedPaint.isCALayerCompatible.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AnyResolvedPaint.isEqual(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AnyResolvedPaint.visit<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AnyResolvedPaint.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t method lookup function for _AnyResolvedPaint(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _AnyResolvedPaint);
}

uint64_t dispatch thunk of _AnyResolvedPaint.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of ResolvedPaintVisitor.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for CodableResolvedPaint()
{
  return &type metadata for CodableResolvedPaint;
}

ValueMetadata *type metadata accessor for CodableResolvedPaint.Tag()
{
  return &type metadata for CodableResolvedPaint.Tag;
}

void *assignWithCopy for Visitor #1 in AnyResolvedPaint.anchorRect(_:)(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Visitor #1 in AnyResolvedPaint.anchorRect(_:)(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Visitor #1 in AnyResolvedPaint.anchorRect(_:)(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Visitor #1 in AnyResolvedPaint.anchorRect(_:)(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

void *type metadata accessor for Visitor #1 in AnyResolvedPaint.anchorRect(_:)()
{
  return &unk_26FA52048;
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<MeshGradient._Paint>>()
{
  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<MeshGradient._Paint>>)
  {
    type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint);
    unint64_t v0 = type metadata accessor for _AnyResolvedPaint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<MeshGradient._Paint>>);
    }
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<Shader.ResolvedShader>>()
{
  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<Shader.ResolvedShader>>)
  {
    type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<Shader.ResolvedShader> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader);
    unint64_t v0 = type metadata accessor for _AnyResolvedPaint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<Shader.ResolvedShader>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<ImagePaint._Paint>>()
{
  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<ImagePaint._Paint>>)
  {
    type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<ImagePaint._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint, (uint64_t)&type metadata for ImagePaint._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<ImagePaint._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<ImagePaint._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint, (uint64_t)&type metadata for ImagePaint._Paint);
    unint64_t v0 = type metadata accessor for _AnyResolvedPaint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<ImagePaint._Paint>>);
    }
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<AngularGradient._Paint>>()
{
  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<AngularGradient._Paint>>)
  {
    type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<AngularGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint);
    unint64_t v0 = type metadata accessor for _AnyResolvedPaint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<AngularGradient._Paint>>);
    }
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<EllipticalGradient._Paint>>()
{
  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<EllipticalGradient._Paint>>)
  {
    type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<EllipticalGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint);
    unint64_t v0 = type metadata accessor for _AnyResolvedPaint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<EllipticalGradient._Paint>>);
    }
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<RadialGradient._Paint>>()
{
  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<RadialGradient._Paint>>)
  {
    type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<RadialGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint);
    unint64_t v0 = type metadata accessor for _AnyResolvedPaint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<RadialGradient._Paint>>);
    }
  }
}

void type metadata accessor for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>()
{
  if (!lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>)
  {
    type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(255, &lazy cache variable for type metadata for AnchoredResolvedPaint<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint);
    lazy protocol witness table accessor for type AnchoredResolvedPaint<MeshGradient._Paint> and conformance AnchoredResolvedPaint<A>(&lazy protocol witness table cache variable for type AnchoredResolvedPaint<LinearGradient._Paint> and conformance AnchoredResolvedPaint<A>, &lazy cache variable for type metadata for AnchoredResolvedPaint<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint);
    unint64_t v0 = type metadata accessor for _AnyResolvedPaint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<AnchoredResolvedPaint<LinearGradient._Paint>>);
    }
  }
}

uint64_t partial apply for closure #1 in AnyResolvedPaint.as<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, *(void *)a1 + *(void *)(**(void **)a1 + 184));
}

uint64_t static IsLeafTraitKey.defaultValue.getter()
{
  return 1;
}

BOOL ViewTraitCollection.isExpandable.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  char v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(1, v1);
  swift_bridgeObjectRelease();
  return (v2 & 1) == 0;
}

uint64_t key path getter for ViewTraitCollection.isExpandable : ViewTraitCollection@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(1, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = (v4 & 1) == 0;
  return result;
}

uint64_t ViewTraitCollection.isExpandable.setter(char a1)
{
  return specialized ViewTraitCollection.subscript.setter((a1 & 1) == 0);
}

uint64_t specialized ViewTraitCollection.subscript.setter(char a1)
{
  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      uint64_t v8 = v18;
      long long v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for CanTransitionTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    char v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      char v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x263F8D4F8], v15, v16);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>);
    uint64_t v18 = v12;
    int v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  _UNKNOWN **v19;

  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      uint64_t v8 = v18;
      long long v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsLeafTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    char v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      char v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x263F8D4F8], v15, v16);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsLeafTraitKey>);
    uint64_t v18 = v12;
    int v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  _UNKNOWN **v19;

  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      uint64_t v8 = v18;
      long long v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsSectionedTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    char v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      char v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x263F8D4F8], v15, v16);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionedTraitKey>);
    uint64_t v18 = v12;
    int v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  _UNKNOWN **v19;

  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      uint64_t v8 = v18;
      long long v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsEmptyViewTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    char v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      char v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x263F8D4F8], v15, v16);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsEmptyViewTraitKey>);
    uint64_t v18 = v12;
    int v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  _UNKNOWN **v19;

  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      uint64_t v8 = v18;
      long long v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsSectionHeaderTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    char v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      char v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x263F8D4F8], v15, v16);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionHeaderTraitKey>);
    uint64_t v18 = v12;
    int v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  _UNKNOWN **v19;

  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      uint64_t v8 = v18;
      long long v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsSectionFooterTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    char v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      char v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x263F8D4F8], v15, v16);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionFooterTraitKey>);
    uint64_t v18 = v12;
    int v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

{
  ValueMetadata **v1;
  ValueMetadata **v2;
  ValueMetadata *v4;
  uint64_t Kind;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unint64_t Description;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  _UNKNOWN **v19;

  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      uint64_t v8 = v18;
      long long v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for IsAuxiliaryContentTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    LOBYTE(v17) = a1 & 1;
    char v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      char v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x263F8D4F8], v15, v16);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsAuxiliaryContentTraitKey>);
    uint64_t v18 = v12;
    int v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v17) = a1 & 1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

uint64_t specialized ViewTraitCollection.subscript.setter(uint64_t a1)
{
  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v17);
      uint64_t v8 = v18;
      long long v9 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v18);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      if (v4 == &type metadata for DepthTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    *(void *)&long long v17 = a1;
    char v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      char v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v16 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14[2] + v6, v15);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v16 + 24))(&v17, MEMORY[0x263F8D6C8], v15, v16);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<DepthTraitKey>);
    uint64_t v18 = v12;
    int v19 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    *(void *)&long long v17 = a1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

uint64_t specialized ViewTraitCollection.subscript.setter(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = v3;
  LOBYTE(v5) = a3;
  uint64_t v8 = *v3;
  KinCGFloat d = v8[1].Kind;
  if (Kind)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      if (v11 >= (*v4)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v4)[2] + v10, (uint64_t)&v24);
      uint64_t v12 = v26;
      char v5 = v27;
      __swift_project_boxed_opaque_existential_1(&v24, v26);
      uint64_t v8 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v5[1])(v12, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      if (v8 == &type metadata for IsExpandedTraitKey) {
        break;
      }
      ++v11;
      v10 += 40;
      if (Kind == v11)
      {
        uint64_t v8 = *v4;
        LOBYTE(v5) = a3;
        goto LABEL_7;
      }
    }
    *(void *)&long long v24 = a1;
    *((void *)&v24 + 1) = a2;
    char v25 = a3;
    long long v17 = *v4;
    outlined copy of Binding<Bool>?(a1, a2);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    ValueMetadata *v4 = v17;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      long long v17 = (ValueMetadata *)result;
      ValueMetadata *v4 = (ValueMetadata *)result;
    }
    if (v11 >= v17[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = (uint64_t)&v17[2] + v10;
      uint64_t v19 = *(uint64_t *)((char *)&v17[3].Description + v10);
      uint64_t v20 = *(uint64_t *)((char *)&v17[4].Kind + v10);
      __swift_mutable_project_boxed_opaque_existential_1(v18, v19);
      float v21 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v20 + 24);
      type metadata accessor for Binding<Bool>?();
      v21(&v24, v22, v19, v20);
      uint64_t result = outlined consume of Binding<Bool>?(a1, a2);
      ValueMetadata *v4 = v17;
    }
  }
  else
  {
LABEL_7:
    outlined copy of Binding<Bool>?(a1, a2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      uint64_t v8 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[1].Kind + 1, 1, v8);
    unint64_t v14 = v8[1].Kind;
    unint64_t Description = (unint64_t)v8[1].Description;
    if (v14 >= Description >> 1) {
      uint64_t v8 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v14 + 1, 1, v8);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsExpandedTraitKey>);
    uint64_t v26 = v15;
    uint64_t v27 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    *(void *)&long long v24 = a1;
    *((void *)&v24 + 1) = a2;
    char v25 = (char)v5;
    v8[1].KinCGFloat d = v14 + 1;
    outlined init with take of ScrollStateRequest(&v24, (uint64_t)&v8[2] + 40 * v14);
    uint64_t result = outlined consume of Binding<Bool>?(a1, a2);
    ValueMetadata *v4 = v8;
  }
  return result;
}

uint64_t specialized ViewTraitCollection.subscript.setter(double a1)
{
  char v2 = v1;
  char v4 = *v1;
  KinCGFloat d = v4[1].Kind;
  if (Kind)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= (*v2)[1].Kind)
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v2)[2] + v6, (uint64_t)&v18);
      uint64_t v8 = v19;
      long long v9 = v20;
      __swift_project_boxed_opaque_existential_1(&v18, v19);
      char v4 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
      if (v4 == &type metadata for ZIndexTraitKey) {
        break;
      }
      ++v7;
      v6 += 40;
      if (Kind == v7)
      {
        char v4 = *v2;
        goto LABEL_7;
      }
    }
    *(double *)&long long v18 = a1;
    unint64_t v14 = *v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *char v2 = v14;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      unint64_t v14 = (ValueMetadata *)result;
      *char v2 = (ValueMetadata *)result;
    }
    if (v7 >= v14[1].Kind)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = (uint64_t)&v14[2] + v6;
      uint64_t v16 = *(uint64_t *)((char *)&v14[3].Description + v6);
      uint64_t v17 = *(uint64_t *)((char *)&v14[4].Kind + v6);
      __swift_mutable_project_boxed_opaque_existential_1(v15, v16);
      uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v17 + 24))(&v18, MEMORY[0x263F8D538], v16, v17);
      *char v2 = v14;
    }
  }
  else
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[1].Kind + 1, 1, v4);
    unint64_t v11 = v4[1].Kind;
    unint64_t Description = (unint64_t)v4[1].Description;
    if (v11 >= Description >> 1) {
      char v4 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v11 + 1, 1, v4);
    }
    type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<ZIndexTraitKey>);
    uint64_t v19 = v12;
    uint64_t v20 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    *(double *)&long long v18 = a1;
    v4[1].KinCGFloat d = v11 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v18, (uint64_t)&v4[2] + 40 * v11);
    *char v2 = v4;
  }
  return result;
}

uint64_t (*ViewTraitCollection.isExpandable.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(1, v3);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = (v4 & 1) == 0;
  return ViewTraitCollection.isExpandable.modify;
}

uint64_t ViewTraitCollection.isExpandable.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter((*(unsigned char *)(a1 + 8) & 1) == 0);
}

uint64_t sub_245BD1AE4(unsigned char *a1)
{
  return specialized ViewTraitCollection.subscript.setter((*a1 & 1) == 0);
}

ValueMetadata *type metadata accessor for IsLeafTraitKey()
{
  return &type metadata for IsLeafTraitKey;
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v11)(uint64_t *__return_ptr);
  void v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    uint64_t v7 = a4 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v7, (uint64_t)v13);
      uint64_t v8 = v14;
      uint64_t v9 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9) == &type metadata for IsExpandedTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    unint64_t v11 = *(void (**)(uint64_t *__return_ptr))(v10 + 16);
    type metadata accessor for Binding<Bool>?();
    v11(&v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return v16;
  }
  else
  {
LABEL_6:
    outlined copy of Binding<Bool>?(a1, a2);
  }
  return a1;
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = *(void *)(a5 + 16);
  if (v9)
  {
    uint64_t v16 = a3;
    int v17 = a4;
    uint64_t v10 = a5 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v10, (uint64_t)v18);
      uint64_t v11 = v19;
      uint64_t v12 = v20;
      __swift_project_boxed_opaque_existential_1(v18, v19);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12) == &type metadata for ArchivedAnimationTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      v10 += 40;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        a4 = v17;
        a3 = v16;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    uint64_t v15 = *(void (**)(void))(v14 + 16);
    _sSiSgMaTm_0(0, &lazy cache variable for type metadata for ArchivedAnimationTraitKey?, (uint64_t)&type metadata for ArchivedAnimationTraitKey, MEMORY[0x263F8D8F0]);
    v15();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
LABEL_6:
    *(void *)a6 = a1;
    *(void *)(a6 + 8) = a2;
    *(void *)(a6 + 16) = a3;
    *(_DWORD *)(a6 + 24) = a4;
    return outlined copy of SafeAreaInsets.OptionalValue?(a1);
  }
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v9)(uint64_t *__return_ptr);
  void v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v5 = a3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v5, (uint64_t)v11);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7) == &type metadata for DynamicViewContentOffsetTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      v5 += 40;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v9 = *(void (**)(uint64_t *__return_ptr))(v8 + 16);
    _sSiSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
    v9(&v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    return v14;
  }
  return a1;
}

uint64_t outlined copy of Binding<Bool>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of Binding<Bool>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for Binding<Bool>?()
{
  if (!lazy cache variable for type metadata for Binding<Bool>?)
  {
    _sSiSgMaTm_0(255, &lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>?);
    }
  }
}

void type metadata accessor for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for ViewTraitCollection.AnyTrait();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  char *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_2461C7BF0[*v0]);
  return Hasher._finalize()();
}

SwiftUI::Axis __swiftcall Axis.init(edge:)(SwiftUI::Edge edge)
{
  return (edge & 1) == 0;
}

BOOL Axis.otherAxis.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Axis.perpendicularEdges.getter(char a1)
{
  return !(a1 & 1) | ((a1 & 1 ^ 3u) << 8);
}

uint64_t Axis.Set.init(_:)(char a1)
{
  return (1 << (a1 & 1));
}

uint64_t static Axis.Set.both.getter()
{
  return 3;
}

BOOL Axis.Set.isOrthogonal(to:)(char a1, char a2)
{
  return (a2 ^ a1) == 3;
}

SwiftUI::Axis_optional __swiftcall Axis.init(rawValue:)(Swift::Int8 rawValue)
{
  if (rawValue == 1) {
    v1.SwiftUI::ResolvedGradient::ColorSpace value = SwiftUI_Axis_vertical;
  }
  else {
    v1.SwiftUI::ResolvedGradient::ColorSpace value = SwiftUI_Axis_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance Axis(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Axis;
}

uint64_t Axis.Alignment.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!(_BYTE)result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void Axis.Alignment.init(rawValue:)(char *a1@<X8>, double a2@<D0>)
{
  if (a2 == 0.0)
  {
    *a1 = 0;
  }
  else
  {
    if (a2 == 1.0) {
      char v2 = 2;
    }
    else {
      char v2 = 3;
    }
    if (a2 == 0.5) {
      char v3 = 1;
    }
    else {
      char v3 = v2;
    }
    *a1 = v3;
  }
}

double Axis.Alignment.rawValue.getter()
{
  return dbl_2461C7C08[*v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Axis.Alignment(char *a1, char *a2)
{
  return dbl_2461C7C08[*a1] == dbl_2461C7C08[*a2];
}

void protocol witness for Hashable.hash(into:) in conformance Axis.Alignment()
{
  Hasher._combine(_:)(qword_2461C7BF0[*v0]);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance Axis.Alignment(double *a1@<X0>, char *a2@<X8>)
{
}

double protocol witness for RawRepresentable.rawValue.getter in conformance Axis.Alignment@<D0>(double *a1@<X8>)
{
  double result = dbl_2461C7C08[*v1];
  *a1 = result;
  return result;
}

uint64_t Axis.description.getter(char a1)
{
  if (a1) {
    return 0x6C61636974726576;
  }
  else {
    return 0x746E6F7A69726F68;
  }
}

unint64_t lazy protocol witness table accessor for type Axis.Set and conformance Axis.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set;
  if (!lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set;
  if (!lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set;
  if (!lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set;
  if (!lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Set and conformance Axis.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Axis and conformance Axis()
{
  unint64_t result = lazy protocol witness table cache variable for type Axis and conformance Axis;
  if (!lazy protocol witness table cache variable for type Axis and conformance Axis)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis and conformance Axis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Axis] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Axis] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Axis] and conformance [A])
  {
    type metadata accessor for [Axis]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Axis] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [Axis]()
{
  if (!lazy cache variable for type metadata for [Axis])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Axis]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Axis.Alignment and conformance Axis.Alignment()
{
  unint64_t result = lazy protocol witness table cache variable for type Axis.Alignment and conformance Axis.Alignment;
  if (!lazy protocol witness table cache variable for type Axis.Alignment and conformance Axis.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Axis.Alignment and conformance Axis.Alignment);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Axis()
{
  if (*v0) {
    return 0x6C61636974726576;
  }
  else {
    return 0x746E6F7A69726F68;
  }
}

unsigned char *storeEnumTagSinglePayload for Axis(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BD2894);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Axis.Alignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BD2988);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Axis.Alignment()
{
  return &type metadata for Axis.Alignment;
}

uint64_t sub_245BD29C4()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for GestureLabelKey()
{
  return &type metadata for GestureLabelKey;
}

double static GestureLabelModifier._makeGesture(modifier:inputs:body:)@<D0>(uint64_t a1@<X1>, void (*a2)(void *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  void v15[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v6;
  uint64_t v7 = *(void *)(a1 + 96);
  int v8 = *(_DWORD *)(a1 + 104);
  long long v18 = *(_OWORD *)(a1 + 108);
  uint64_t v16 = v7;
  int v17 = v8;
  a2(v19, v15);
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    uint64_t v10 = 32;
    while (*(ValueMetadata **)(v7 + v10) != &type metadata for GestureLabelKey)
    {
      v10 += 16;
      if (!--v9) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRetain();
    closure #1 in implicit closure #1 in static GestureLabelModifier._makeGesture(modifier:inputs:body:)(1);
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    LOBYTE(v15[0]) = 0;
    PreferencesOutputs.subscript.setter(OffsetAttribute2, &type metadata for GestureLabelKey, (uint64_t)&protocol witness table for GestureLabelKey);
    swift_bridgeObjectRelease();
  }
LABEL_7:
  uint64_t v12 = v19[1];
  int v13 = v20;
  double result = *(double *)v19;
  *(void *)a3 = v19[0];
  *(void *)(a3 + 8) = v12;
  *(_DWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t closure #1 in implicit closure #1 in static GestureLabelModifier._makeGesture(modifier:inputs:body:)(uint64_t a1)
{
  _OWORD v7[2] = type metadata accessor for GestureLabelModifier();
  type metadata accessor for String?();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v7, v3, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance GestureLabelModifier<A>@<D0>(uint64_t a1@<X1>, void (*a2)(void *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  return static GestureLabelModifier._makeGesture(modifier:inputs:body:)(a1, a2, a3);
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance GestureLabelKey(void *result, void *(*a2)(void *__return_ptr))
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (v3)
  {
    uint64_t v4 = *result;
  }
  else
  {
    double result = a2(v5);
    uint64_t v4 = v5[0];
    uint64_t v3 = v5[1];
  }
  *uint64_t v2 = v4;
  v2[1] = v3;
  return result;
}

void type metadata accessor for String?()
{
  if (!lazy cache variable for type metadata for String?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for String?);
    }
  }
}

__n128 _PaddingLayout.init(edges:insets:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of EdgeInsets?(a2, (uint64_t)v8);
  char v5 = v9;
  __n128 result = (__n128)v8[0];
  long long v7 = v8[1];
  *(unsigned char *)a3 = a1;
  *(__n128 *)(a3 + 8) = result;
  *(_OWORD *)(a3 + 24) = v7;
  *(unsigned char *)(a3 + 40) = v5;
  return result;
}

uint64_t _PaddingLayout.edges.getter()
{
  return *v0;
}

uint64_t _PaddingLayout.edges.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_PaddingLayout.edges.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 _PaddingLayout.insets.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 8);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

uint64_t _PaddingLayout.insets.setter(uint64_t a1)
{
  return outlined init with take of EdgeInsets?(a1, v1 + 8);
}

uint64_t (*_PaddingLayout.insets.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _PaddingLayout.ignoresAutomaticPadding(child:)()
{
  return 1;
}

uint64_t View._tightPadding()(uint64_t a1)
{
  v7[0] = 15;
  __asm { FMOV            V0.2D, #8.0 }
  long long v8 = _Q0;
  long long v9 = _Q0;
  char v10 = 0;
  return View.modifier<A>(_:)(v7, a1, &type metadata for _PaddingLayout);
}

uint64_t sub_245BD2F80()
{
  return swift_getWitnessTable();
}

Swift::Void __swiftcall UpdateCycleDetector.reset()()
{
  *(void *)(v0 + 4) = 0xFFFFFFFFLL;
  *(unsigned char *)(v0 + 12) = 0;
}

Swift::Void __swiftcall ValueCycleDetector.reset()()
{
  *(_DWORD *)(v1 + 4) = -1;
  uint64_t v2 = v1 + *(int *)(v0 + 44);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = type metadata accessor for Stack3();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
  Stack3.init()(v3, v2);
  *(unsigned char *)(v1 + 8) = 0;
}

uint64_t getEnumTagSinglePayload for UpdateCycleDetector(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateCycleDetector(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 13) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateCycleDetector()
{
  return &type metadata for UpdateCycleDetector;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueCycleDetector(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + v7;
  unint64_t v11 = ((v7 + 9) & ~(unint64_t)v7)
      + v9
      + ((v10 + (v10 & ~(unint64_t)v7)) & ~(unint64_t)v7);
  int v12 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *unsigned int v3 = *a2;
    unsigned int v3 = (uint64_t *)(v15 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v8;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unint64_t v17 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v18 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)unint64_t v17 = *(_DWORD *)v18;
    *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
    uint64_t v19 = (void *)((v17 + v8 + 5) & ~v8);
    int v20 = (const void *)((v18 + v8 + 5) & ~v8);
    float v21 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v21((v18 + v8 + 5) & ~v8, 1, v4))
    {
      memcpy(v19, v20, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v19, v20, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v4);
    }
    uint64_t v22 = (void *)(((unint64_t)v19 + v10) & v16);
    int v23 = (const void *)(((unint64_t)v20 + v10) & v16);
    if (v21((unint64_t)v23, 1, v4))
    {
      memcpy(v22, v23, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v22, v23, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v4);
    }
    long long v24 = (void *)(((unint64_t)v22 + v10) & v16);
    char v25 = (const void *)(((unint64_t)v23 + v10) & v16);
    if (v21((unint64_t)v25, 1, v4))
    {
      memcpy(v24, v25, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v24, v25, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for ValueCycleDetector(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(v2 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v4 = ((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v3 + 5;
  uint64_t v5 = ~v3;
  uint64_t v6 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v6(v4 & ~v3, 1, v2)) {
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v4 & ~v3, v2);
  }
  if (*(_DWORD *)(v12 + 84)) {
    uint64_t v7 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v12 + 64) + 1;
  }
  unint64_t v8 = ((v4 | v3) + v7) & v5;
  if (!v6(v8, 1, v2)) {
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v8, v2);
  }
  uint64_t v9 = (v7 + v3 + v8) & v5;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v9, 1, v2);
  if (!result)
  {
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    return v11(v9, v2);
  }
  return result;
}

_DWORD *initializeWithCopy for ValueCycleDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v3 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v3 = *(_DWORD *)v4;
  *(unsigned char *)(v3 + 4) = *(unsigned char *)(v4 + 4);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + 5 + v3;
  uint64_t v9 = ~v7;
  unint64_t v10 = v7 + 5 + v4;
  int v20 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v20(v10 & ~v7, 1, v5))
  {
    int v11 = *(_DWORD *)(v6 + 84);
    size_t v12 = *(void *)(v6 + 64);
    if (v11) {
      size_t v13 = *(void *)(v6 + 64);
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy((void *)(v8 & ~v7), (const void *)(v10 & ~v7), v13);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v8 & ~v7, v10 & ~v7, v5);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
    int v11 = *(_DWORD *)(v6 + 84);
    size_t v12 = *(void *)(v6 + 64);
  }
  if (v11) {
    size_t v14 = v12;
  }
  else {
    size_t v14 = v12 + 1;
  }
  uint64_t v15 = (void *)(((v8 | v7) + v14) & v9);
  uint64_t v16 = (const void *)(((v10 | v7) + v14) & v9);
  if (v20((unint64_t)v16, 1, v5))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  unint64_t v17 = (void *)(((unint64_t)v15 + v14 + v7) & v9);
  unint64_t v18 = (const void *)(((unint64_t)v16 + v14 + v7) & v9);
  if (v20((unint64_t)v18, 1, v5))
  {
    memcpy(v17, v18, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

_DWORD *assignWithCopy for ValueCycleDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v3 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v3 = *(_DWORD *)v4;
  *(unsigned char *)(v3 + 4) = *(unsigned char *)(v4 + 4);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + 5 + v3;
  uint64_t v27 = ~v7;
  unint64_t v9 = v7 + 5 + v4;
  unint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8 & ~v7, 1, v5);
  int v12 = v10(v9 & ~v7, 1, v5);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v8 & ~v7, v9 & ~v7, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(v8 & ~v7, v9 & ~v7, v5);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8 & ~v7, v5);
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  if (v13) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = v14 + 1;
  }
  memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v15);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v16 = *(void *)(v6 + 64);
  }
  else {
    size_t v16 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v17 = (void *)(((v8 | v7) + v16) & v27);
  unint64_t v18 = (const void *)(((v9 | v7) + v16) & v27);
  int v19 = v10((unint64_t)v17, 1, v5);
  int v20 = v10((unint64_t)v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
LABEL_20:
    memcpy(v17, v18, v16);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 24))(v17, v18, v5);
LABEL_21:
  float v21 = (void *)(((unint64_t)v17 + v16 + v7) & v27);
  uint64_t v22 = (const void *)(((unint64_t)v18 + v16 + v7) & v27);
  int v23 = v10((unint64_t)v21, 1, v5);
  int v24 = v10((unint64_t)v22, 1, v5);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 24))(v21, v22, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v21, v5);
    goto LABEL_26;
  }
  if (v24)
  {
LABEL_26:
    memcpy(v21, v22, v16);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v21, v22, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
  return a1;
}

_DWORD *initializeWithTake for ValueCycleDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v3 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v3 = *(_DWORD *)v4;
  *(unsigned char *)(v3 + 4) = *(unsigned char *)(v4 + 4);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + 5 + v3;
  uint64_t v9 = ~v7;
  unint64_t v10 = v7 + 5 + v4;
  int v20 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v20(v10 & ~v7, 1, v5))
  {
    int v11 = *(_DWORD *)(v6 + 84);
    size_t v12 = *(void *)(v6 + 64);
    if (v11) {
      size_t v13 = *(void *)(v6 + 64);
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy((void *)(v8 & ~v7), (const void *)(v10 & ~v7), v13);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v8 & ~v7, v10 & ~v7, v5);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
    int v11 = *(_DWORD *)(v6 + 84);
    size_t v12 = *(void *)(v6 + 64);
  }
  if (v11) {
    size_t v14 = v12;
  }
  else {
    size_t v14 = v12 + 1;
  }
  size_t v15 = (void *)(((v8 | v7) + v14) & v9);
  size_t v16 = (const void *)(((v10 | v7) + v14) & v9);
  if (v20((unint64_t)v16, 1, v5))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  unint64_t v17 = (void *)(((unint64_t)v15 + v14 + v7) & v9);
  unint64_t v18 = (const void *)(((unint64_t)v16 + v14 + v7) & v9);
  if (v20((unint64_t)v18, 1, v5))
  {
    memcpy(v17, v18, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

_DWORD *assignWithTake for ValueCycleDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v3 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v4 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v3 = *(_DWORD *)v4;
  *(unsigned char *)(v3 + 4) = *(unsigned char *)(v4 + 4);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + 5 + v3;
  uint64_t v27 = ~v7;
  unint64_t v9 = v7 + 5 + v4;
  unint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8 & ~v7, 1, v5);
  int v12 = v10(v9 & ~v7, 1, v5);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v8 & ~v7, v9 & ~v7, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(v8 & ~v7, v9 & ~v7, v5);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8 & ~v7, v5);
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  if (v13) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = v14 + 1;
  }
  memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v15);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v16 = *(void *)(v6 + 64);
  }
  else {
    size_t v16 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v17 = (void *)(((v8 | v7) + v16) & v27);
  unint64_t v18 = (const void *)(((v9 | v7) + v16) & v27);
  int v19 = v10((unint64_t)v17, 1, v5);
  int v20 = v10((unint64_t)v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
LABEL_20:
    memcpy(v17, v18, v16);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 40))(v17, v18, v5);
LABEL_21:
  float v21 = (void *)(((unint64_t)v17 + v16 + v7) & v27);
  uint64_t v22 = (const void *)(((unint64_t)v18 + v16 + v7) & v27);
  int v23 = v10((unint64_t)v21, 1, v5);
  int v24 = v10((unint64_t)v22, 1, v5);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 40))(v21, v22, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v21, v5);
    goto LABEL_26;
  }
  if (v24)
  {
LABEL_26:
    memcpy(v21, v22, v16);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v21, v22, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueCycleDetector(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 > v7)
  {
    uint64_t v11 = ((v8 + 9) & ~v8) + v9 + ((v9 + v8 + ((v9 + v8) & ~v8)) & ~v8);
    char v12 = 8 * v11;
    if (v11 > 3) {
      goto LABEL_12;
    }
    unsigned int v14 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v14 >= 2)
    {
LABEL_12:
      int v13 = *((unsigned __int8 *)a1 + v11);
      if (!*((unsigned char *)a1 + v11)) {
        goto LABEL_27;
      }
LABEL_19:
      int v15 = (v13 - 1) << v12;
      if (v11 > 3) {
        int v15 = 0;
      }
      if (v11)
      {
        if (v11 > 3) {
          LODWORD(v11) = 4;
        }
        switch((int)v11)
        {
          case 2:
            LODWORD(v11) = *a1;
            break;
          case 3:
            LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v11) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v11) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v20 = v7 + (v11 | v15);
      return (v20 + 1);
    }
  }
LABEL_27:
  unint64_t v16 = ((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v6 <= 0xFE)
  {
    unsigned int v17 = *(unsigned __int8 *)(v16 + 4);
    if (v17 < 2) {
      return 0;
    }
    int v20 = (v17 + 2147483646) & 0x7FFFFFFF;
    return (v20 + 1);
  }
  unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v16 + v8 + 5) & ~v8);
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ValueCycleDetector(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + v11 + ((v12 + v11) & ~v11)) & ~v11) + v12;
  size_t v14 = v13 + ((v11 + 9) & ~v11);
  BOOL v15 = a3 >= v10;
  unsigned int v16 = a3 - v10;
  if (v16 == 0 || !v15)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v14 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
  if (!HIWORD(v17))
  {
    if (v17 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v17 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v18 = ~v10 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v20 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_57;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x245BD46FCLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        unint64_t v21 = (unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        if (v9 > 0xFE)
        {
          uint64_t v22 = (unsigned char *)((v21 + v11 + 5) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v26 = a2 + 1;
            uint64_t v27 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v27((v21 + v11 + 5) & ~v11, v26);
          }
          else
          {
            if (v13 <= 3) {
              int v23 = ~(-1 << (8 * v13));
            }
            else {
              int v23 = -1;
            }
            if (v13)
            {
              int v24 = v23 & (~v9 + a2);
              if (v13 <= 3) {
                int v25 = v13;
              }
              else {
                int v25 = 4;
              }
              bzero(v22, v13);
              switch(v25)
              {
                case 2:
                  *(_WORD *)uint64_t v22 = v24;
                  break;
                case 3:
                  *(_WORD *)uint64_t v22 = v24;
                  void v22[2] = BYTE2(v24);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v22 = v24;
                  break;
                default:
                  *uint64_t v22 = v24;
                  break;
              }
            }
          }
        }
        else
        {
          *(unsigned char *)(v21 + 4) = a2 + 1;
        }
      }
      return;
  }
}

BOOL static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static StyleContext.accepts<A>(_:at:)(a1, a3);
}

uint64_t static StyleContext.acceptsAny<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1);
  size_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    memcpy((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v11, v12);
  }
  return static StyleContext.acceptsAny<A>(_:)((uint64_t)v13, a2, a5, a3, a6, a4) & 1;
}

{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t Visitor;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned __int8 v17;

  if (!a2) {
    return 0;
  }
  int v8 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  unsigned int v9 = (uint64_t *)(a6 & 0xFFFFFFFFFFFFFFFELL);
  Visitor = type metadata accessor for QueryVisitor();
  uint64_t v11 = a2 - 1;
  do
  {
    size_t v13 = *v8++;
    size_t v12 = v13;
    size_t v14 = *v9++;
    a1 += 8;
    uint64_t v15 = v11;
    unsigned int v17 = 0;
    (*(void (**)(unsigned __int8 *, uint64_t, _UNKNOWN **, uint64_t))(v14 + 24))(&v17, Visitor, &protocol witness table for QueryVisitor<A>, v12);
    uint64_t result = v17;
    if (v17) {
      break;
    }
    uint64_t v11 = v15 - 1;
  }
  while (v15);
  return result;
}

uint64_t static StyleContext.visitStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static StyleContext.visitStyle<A>(_:)(a1, a4, a2, a5, a3);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a2, a2, a4, a3);
}

uint64_t QueryVisitor.visit<A>(_:)(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = *v2 || *(void *)(a2 + 16) == result;
  return result;
}

uint64_t protocol witness for StyleContextVisitor.visit<A>(_:) in conformance QueryVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return QueryVisitor.visit<A>(_:)(a1, a4);
}

uint64_t View.styleContext<A, B>(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for StyleContextWriter();
  ViewModifier.requiring<A>(_:)(a5, v7, v8);
  uint64_t v9 = type metadata accessor for StaticIf();
  return View.modifier<A>(_:)(v9, a3, v9);
}

uint64_t View.styleContext<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  unsigned int v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  uint64_t v11 = type metadata accessor for StyleContextWriter();
  void v15[5] = a5;
  ViewModifier.requiring<A>(_:)(v11, v11, v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a5);
  v15[1] = type metadata accessor for StyleContextAcceptsPredicate();
  v15[2] = v11;
  v15[3] = &type metadata for EmptyModifier;
  v15[4] = &protocol witness table for StyleContextAcceptsPredicate<A>;
  uint64_t v13 = type metadata accessor for StaticIf();
  return View.modifier<A>(_:)(v13, a3, v13);
}

uint64_t View._defaultContext()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for DefaultStyleContextWriter);
}

uint64_t ViewModifier.requiring<A, B>(_:or:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  double v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for StyleContextAcceptsPredicate();
  uint64_t v10 = type metadata accessor for StyleContextAcceptsPredicate();
  static ViewInputPredicate.|| infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  v13[0] = v9;
  v13[1] = v10;
  _OWORD v13[2] = &protocol witness table for StyleContextAcceptsPredicate<A>;
  v13[3] = &protocol witness table for StyleContextAcceptsPredicate<A>;
  uint64_t v11 = type metadata accessor for OrOperationViewInputPredicate();
  return StaticIf<>.init<>(_:then:)(v11, (uint64_t)v8, v11, a2, a3);
}

uint64_t ViewModifier.except<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11 == 1)
  {
    swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x270FA5388](v8);
    uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v12)
    {
      unint64_t v16 = 0;
      if (v12 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v15[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v17 = (long long *)(v13 + 16);
      unsigned int v18 = v15 + 16;
      unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *unsigned int v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v16 != v12)
      {
LABEL_9:
        unint64_t v21 = v12 - v16;
        uint64_t v22 = 8 * v16;
        int v23 = &v15[8 * v16];
        int v24 = (uint64_t *)(v13 + v22);
        do
        {
          uint64_t v25 = *v24++;
          *(void *)int v23 = v25;
          v23 += 8;
          --v21;
        }
        while (v21);
      }
    }
    swift_getTupleTypeMetadata();
  }
  type metadata accessor for StyleContextAcceptsPredicate();
  type metadata accessor for InvertedViewInputPredicate();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, a2);
  return StaticIf<>.init<>(_:then:)((uint64_t)v10, a2, a3);
}

uint64_t StaticIf<>.init<A>(_:then:else:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = a1;
  uint64_t v31 = a8;
  unint64_t v9 = a6;
  unint64_t v13 = a9 & 0xFFFFFFFFFFFFFFFELL;
  if (a6 == 1)
  {
    swift_checkMetadataState();
  }
  else
  {
    v29[1] = v29;
    MEMORY[0x270FA5388](a1);
    uint64_t v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v16 = 0;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v15[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v17 = (long long *)(v13 + 16);
      unsigned int v18 = v15 + 16;
      unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *unsigned int v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v16 != v9)
      {
LABEL_9:
        unint64_t v21 = v9 - v16;
        uint64_t v22 = 8 * v16;
        int v23 = &v15[8 * v16];
        int v24 = (uint64_t *)(v13 + v22);
        do
        {
          uint64_t v25 = *v24++;
          *(void *)int v23 = v25;
          v23 += 8;
          --v21;
        }
        while (v21);
      }
    }
    swift_getTupleTypeMetadata();
  }
  uint64_t v26 = type metadata accessor for StyleContextAcceptsPredicate();
  uint64_t result = StaticIf<>.init(_:then:else:)(v26, a2, a3, a4);
  if (v9)
  {
    uint64_t v28 = v30 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(v13 - 8 + 8 * v9) - 8) + 8))(*(void *)(v28 + 8 * v9));
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t StaticIf<>.init<A>(_:then:)(uint64_t a1, void (*a2)(void), uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a4;
  unint64_t v10 = a6 & 0xFFFFFFFFFFFFFFFELL;
  if (a4 == 1)
  {
    swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v13 = 0;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v12[-v10] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v13 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v14 = (long long *)(v10 + 16);
      uint64_t v15 = v12 + 16;
      unint64_t v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        _OWORD *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != v6)
      {
LABEL_9:
        unint64_t v18 = v6 - v13;
        uint64_t v19 = 8 * v13;
        long long v20 = &v12[8 * v13];
        unint64_t v21 = (uint64_t *)(v10 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)long long v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    swift_getTupleTypeMetadata();
  }
  uint64_t v23 = type metadata accessor for StyleContextAcceptsPredicate();
  uint64_t result = StaticIf<>.init(_:then:else:)(v23, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))_ViewInputs.base.modify);
  if (v6)
  {
    uint64_t v25 = a1 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(v10 - 8 + 8 * v6) - 8) + 8))(*(void *)(v25 + 8 * v6));
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t StaticIf<>.init<A>(any:then:else:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = type metadata accessor for StyleContextAcceptsAnyPredicate();
  for (uint64_t result = StaticIf<>.init(_:then:else:)(v13, a2, a3, a4); a6; --a6)
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)((a9 & 0xFFFFFFFFFFFFFFFELL) - 8 + 8 * a6) - 8)
                                               + 8))(*(void *)(a1 - 8 + 8 * a6));
  return result;
}

uint64_t StaticIf<>.init<A>(any:then:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for StyleContextAcceptsAnyPredicate();
  uint64_t result = StaticIf<>.init(_:then:else:)(v11, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))_ViewInputs.base.modify);
  if (a4)
  {
    unint64_t v13 = (a6 & 0xFFFFFFFFFFFFFFFELL) - 8;
    uint64_t v14 = a1 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(v13 + 8 * a4) - 8) + 8))(*(void *)(v14 + 8 * a4));
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t static StyleContextWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2)
{
  return specialized static StyleContextWriter._makeInputs(modifier:inputs:)(a2);
}

uint64_t static DefaultStyleContextWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v3 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, *((uint64_t *)&v3 + 1));
  return swift_release();
}

Swift::Void __swiftcall _GraphInputs.resetStyleContext()()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v1 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v1, *((uint64_t *)&v1 + 1));
  swift_release();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DefaultStyleContextWriter(uint64_t a1, uint64_t *a2)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v3 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, *((uint64_t *)&v3 + 1));
  return swift_release();
}

double static StyleContextInput.defaultValue.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static StyleContextInput.defaultValue;
  *a1 = static StyleContextInput.defaultValue;
  return result;
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance StyleContextInput@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static StyleContextInput.defaultValue;
  *a1 = static StyleContextInput.defaultValue;
  return result;
}

uint64_t static StyleContextAcceptsAnyPredicate.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  unint64_t v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v7 = 8 * a2;
  if (a2 == 1)
  {
    MetatypeMetadatCGFloat a = swift_getMetatypeMetadata();
    uint64_t v9 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if (a2)
    {
      unint64_t v10 = v6;
      uint64_t v11 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v12 = a2;
      do
      {
        ++v10;
        *v11++ = swift_getMetatypeMetadata();
        --v12;
      }
      while (v12);
    }
    MetatypeMetadatCGFloat a = swift_getTupleTypeMetadata();
    uint64_t v9 = MetatypeMetadata;
  }
  MEMORY[0x270FA5388](MetatypeMetadata);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized find<A>(_:key:)(v15);
  if (v16)
  {
    long long v17 = (long long *)(v16 + 72);
    unint64_t v18 = (uint64_t *)(v16 + 80);
  }
  else
  {
    long long v17 = &static StyleContextInput.defaultValue;
    unint64_t v18 = (uint64_t *)&static StyleContextInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v19 = *v18;
  uint64_t v20 = *(void *)v17;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v21 = swift_release_n();
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  MEMORY[0x270FA5388](v21);
  if (a2)
  {
    uint64_t v22 = (int *)(v9 + 32);
    uint64_t v23 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v24 = a2;
    do
    {
      if (a2 == 1) {
        int v25 = 0;
      }
      else {
        int v25 = *v22;
      }
      uint64_t v26 = *v6++;
      *(void *)&v14[v25] = v26;
      *v23++ = &v14[v25];
      v22 += 4;
      --v24;
    }
    while (v24);
  }
  return AnyStyleContextType.acceptsAny<each A>(_:)((void **)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0)), a2, v28, v29) & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance StyleContextAcceptsAnyPredicate<Pack{repeat A}>(uint64_t *a1, uint64_t *a2)
{
  return static StyleContextAcceptsAnyPredicate.evaluate(inputs:)(a1, a2[2], a2[3], a2[4]);
}

uint64_t _GraphInputs.isDefaultStyleContext.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    long long v3 = (long long *)(v2 + 72);
    uint64_t v4 = (uint64_t *)(v2 + 80);
  }
  else
  {
    uint64_t v4 = (uint64_t *)&static StyleContextInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    long long v3 = &static StyleContextInput.defaultValue;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v5 + 8))(static StyleContextInput.defaultValue, *((void *)&static StyleContextInput.defaultValue + 1), v6, v5) & 1;
}

uint64_t _GraphInputs.accepts<each A>(_:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v21 = *(void *)v2;
  int v22 = v3;
  uint64_t v23 = v4;
  long long v24 = *(_OWORD *)(v2 + 24);
  uint64_t v25 = v5;
  if (a2 != 1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      if (v6 < 4) {
        goto LABEL_8;
      }
      if ((unint64_t)&v9[-v7] < 0x20) {
        goto LABEL_8;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v11 = (long long *)(v7 + 16);
      uint64_t v12 = v9 + 16;
      unint64_t v13 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v10 != v6)
      {
LABEL_8:
        unint64_t v15 = v6 - v10;
        uint64_t v16 = 8 * v10;
        long long v17 = &v9[8 * v10];
        unint64_t v18 = (uint64_t *)(v7 + v16);
        do
        {
          uint64_t v19 = *v18++;
          *(void *)long long v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    swift_getTupleTypeMetadata();
  }
  return static StyleContextAcceptsPredicate.evaluate(inputs:)(&v21) & 1;
}

Swift::Void __swiftcall _GraphInputs.printStyleContext()()
{
  uint64_t v1 = *v0;
  type metadata accessor for _ContiguousArrayStorage<Any>();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  *(void *)(v2 + 56) = &type metadata for AnyStyleContextType;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized find<A>(_:key:)(v1);
  if (v3)
  {
    uint64_t v4 = (long long *)(v3 + 72);
    uint64_t v5 = (uint64_t *)(v3 + 80);
  }
  else
  {
    uint64_t v4 = &static StyleContextInput.defaultValue;
    uint64_t v5 = (uint64_t *)&static StyleContextInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v6 = *v5;
  *(void *)(v2 + 32) = *(void *)v4;
  *(void *)(v2 + 40) = v6;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  print(_:separator:terminator:)();

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _ViewListCountInputs.resetStyleContext()()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v1 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v1, *((uint64_t *)&v1 + 1));
  swift_release();
}

uint64_t static TupleStyleContext.acceptsAny<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v15[4] = *MEMORY[0x263EF8340];
  specialized static TupleDescriptor.tupleDescription(_:)(a3, v15);
  uint64_t v9 = *(void *)(v15[0] + 16);
  if (v9)
  {
    unint64_t v10 = (uint64_t *)(v15[0] + 48);
    do
    {
      uint64_t v12 = *(v10 - 1);
      uint64_t v11 = *v10;
      v15[0] = a2;
      v15[1] = a3;
      v15[2] = a4;
      v15[3] = a5;
      uint64_t Visitor = type metadata accessor for TupleStyleContext.QueryVisitor();
      TupleStyleContext.QueryVisitor.visit<A>(_:)(v12, Visitor, v12, v11);
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static TupleStyleContext.visitStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized static TupleDescriptor.tupleDescription(_:)(a2, &v10);
  uint64_t v6 = *(void *)(v10 + 16);
  if (v6)
  {
    uint64_t v7 = *(void (**)(void, void, void, uint64_t, uint64_t))(a4 + 8);
    uint64_t v8 = (void *)(v10 + 48);
    do
    {
      v7(*(v8 - 1), *(v8 - 1), *v8, a3, a4);
      v8 += 3;
      --v6;
    }
    while (v6);
  }

  return swift_bridgeObjectRelease();
}

uint64_t TupleStyleContext.QueryVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7 == 1)
  {
    MetatypeMetadatCGFloat a = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if (v7)
    {
      unint64_t v10 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v11 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v12 = v7;
      do
      {
        v10 += 8;
        *v11++ = swift_getMetatypeMetadata();
        --v12;
      }
      while (v12);
    }
    MetatypeMetadatCGFloat a = swift_getTupleTypeMetadata();
  }
  MEMORY[0x270FA5388](MetatypeMetadata);
  if (*v4)
  {
    uint64_t result = 1;
  }
  else
  {
    v18.n128_f64[0] = MEMORY[0x270FA5388](v13);
    if (v7)
    {
      uint64_t v19 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v20 = (int *)(v15 + 32);
      uint64_t v21 = (uint64_t *)((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v22 = v7;
      do
      {
        if (v7 == 1) {
          int v23 = 0;
        }
        else {
          int v23 = *v20;
        }
        uint64_t v24 = *v19++;
        *(void *)(v17 + v23) = v24;
        *v21++ = v17 + v23;
        v20 += 4;
        --v22;
      }
      while (v22);
    }
    uint64_t result = (*(uint64_t (**)(__n128))(a4 + 16))(v18);
  }
  unsigned char *v4 = result & 1;
  return result;
}

uint64_t protocol witness for StyleContextVisitor.visit<A>(_:) in conformance TupleStyleContext<A>.QueryVisitor<Pack{repeat A1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleStyleContext.QueryVisitor.visit<A>(_:)(a1, a4, a2, a3);
}

uint64_t protocol witness for StyleContextVisitor.visit<A>(_:) in conformance TupleStyleContext<A>.QueryAtIndexVisitor<A1>()
{
  return TupleStyleContext.QueryAtIndexVisitor.visit<A>(_:)();
}

uint64_t protocol witness for StyleContextVisitor.visit<A>(_:) in conformance TupleStyleContext<A>.ContextAcceptsVisitor<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleStyleContext.ContextAcceptsVisitor.visit<A>(_:)(a1, a4);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance TupleStyleContext<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static TupleStyleContext.acceptsAny<A>(_:)(a1, a2, *(void *)(a5 + 16), a3, a4);
}

uint64_t protocol witness for static StyleContext.visitStyle<A>(_:) in conformance TupleStyleContext<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TupleStyleContext.visitStyle<A>(_:)(a1, *(void *)(a4 + 16), a2, a3);
}

uint64_t static StyleContextDescriptor.typeCache.getter()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static StyleContextDescriptor.typeCache.setter(void *a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static StyleContextDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static StyleContextDescriptor.typeCache.modify())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance StyleContextDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance StyleContextDescriptor(void *a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static StyleContextDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance StyleContextDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t type metadata accessor for QueryVisitor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for StyleContextAcceptsAnyPredicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TupleStyleContext.QueryVisitor()
{
  return swift_getGenericMetadata();
}

uint64_t dispatch thunk of static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static StyleContext.acceptsAny<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of static StyleContext.visitStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

ValueMetadata *type metadata accessor for WindowRootContext()
{
  return &type metadata for WindowRootContext;
}

ValueMetadata *type metadata accessor for DocumentStyleContext()
{
  return &type metadata for DocumentStyleContext;
}

ValueMetadata *type metadata accessor for ControlGroupStyleContext()
{
  return &type metadata for ControlGroupStyleContext;
}

ValueMetadata *type metadata accessor for DialogActionStyleContext()
{
  return &type metadata for DialogActionStyleContext;
}

ValueMetadata *type metadata accessor for HostingConfigurationContext()
{
  return &type metadata for HostingConfigurationContext;
}

ValueMetadata *type metadata accessor for MultimodalListContext()
{
  return &type metadata for MultimodalListContext;
}

ValueMetadata *type metadata accessor for NoStyleContext()
{
  return &type metadata for NoStyleContext;
}

ValueMetadata *type metadata accessor for SectionHeaderStyleContext()
{
  return &type metadata for SectionHeaderStyleContext;
}

ValueMetadata *type metadata accessor for SheetToolbarStyleContext()
{
  return &type metadata for SheetToolbarStyleContext;
}

ValueMetadata *type metadata accessor for InspectorStyleContext()
{
  return &type metadata for InspectorStyleContext;
}

ValueMetadata *type metadata accessor for MenuBarExtraWindowStyleContext()
{
  return &type metadata for MenuBarExtraWindowStyleContext;
}

ValueMetadata *type metadata accessor for DefaultStyleContextWriter()
{
  return &type metadata for DefaultStyleContextWriter;
}

ValueMetadata *type metadata accessor for StyleContextInput()
{
  return &type metadata for StyleContextInput;
}

uint64_t dispatch thunk of StyleContextVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for StyleContextDescriptor()
{
  return &type metadata for StyleContextDescriptor;
}

uint64_t sub_245BD6730()
{
  return swift_getWitnessTable();
}

uint64_t sub_245BD67A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_245BD686C()
{
  return swift_getWitnessTable();
}

uint64_t sub_245BD695C()
{
  return swift_getWitnessTable();
}

uint64_t sub_245BD69C0()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for TupleStyleContext.QueryAtIndexVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for TupleStyleContext.QueryAtIndexVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for TupleStyleContext.QueryVisitor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BD6BE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t TupleView.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TupleView.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*TupleView.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t type metadata accessor for TupleView.MakeUnary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TupleView.MakeUnary.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v14)(void *__return_ptr, int *, uint64_t *);
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  int v29;
  int v30;
  void v31[2];
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;

  uint64_t v5 = v4;
  uint64_t v65 = *MEMORY[0x263EF8340];
  LODWORD(v49) = *(_DWORD *)v4;
  type metadata accessor for TupleView();
  type metadata accessor for _GraphValue();
  _GraphValue.unsafeBitCast<A>(to:)(&v32);
  uint64_t v29 = v32;
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v22 = *(_DWORD *)(v5 + 36);
  int v23 = *(_DWORD *)(v5 + 32);
  uint64_t v27 = *(_DWORD *)(v5 + 40);
  uint64_t v24 = *(_DWORD *)(v5 + 44);
  uint64_t v25 = *(_DWORD *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  int v10 = *(_DWORD *)(v5 + 68);
  uint64_t v20 = *(_DWORD *)(v5 + 72);
  uint64_t v21 = *(_DWORD *)(v5 + 64);
  int v11 = *(_DWORD *)(v5 + 80);
  int v12 = *(_DWORD *)(v5 + 84);
  __n128 v18 = *(_DWORD *)(v5 + 88);
  uint64_t v19 = *(_DWORD *)(v5 + 76);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v49 = v6;
  uint64_t v51 = v7;
  uint64_t v50 = v25;
  uint64_t v52 = v23;
  unint64_t v53 = v22;
  uint64_t v55 = v24;
  unint64_t v56 = v8;
  uint64_t v57 = v9;
  uint64_t v58 = v21;
  uint64_t v59 = v10;
  uint64_t v60 = v20;
  unint64_t v61 = v19;
  unint64_t v62 = v11;
  uint64_t v63 = v12;
  unint64_t v64 = v18;
  uint64_t v30 = v29;
  unint64_t v33 = v6;
  uint64_t v34 = v25;
  uint64_t v35 = v7;
  uint64_t v36 = v23;
  uint64_t v37 = v22;
  char v38 = 0;
  uint64_t v39 = v24;
  uint64_t v40 = v8;
  uint64_t v41 = v9;
  uint64_t v42 = v21;
  uint64_t v43 = v10;
  uint64_t v44 = v20;
  unint64_t v45 = v19;
  unint64_t v46 = v11;
  uint64_t v47 = v12;
  unint64_t v48 = v18;
  long long v14 = *(void (**)(void *__return_ptr, int *, uint64_t *))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v31, &v30, &v33);
  unint64_t v54 = v27;
  if (v26)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v31, (uint64_t)&v49);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v15 = v31[0];
  uint64_t v16 = v31[1];
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v5 + 96) = v15;
  *(void *)(v5 + 104) = v16;
  return result;
}

uint64_t protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance TupleView<A>.MakeUnary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleView.MakeUnary.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t destroy for TupleView.CountViews()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleView.CountViews(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleView.CountViews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithTake for TupleView.CountViews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleView.CountViews(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleView.CountViews(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for TupleView.MakeList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleView.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleView.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for TupleView.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleView.MakeList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleView.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for TupleView.MakeUnary()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleView.MakeUnary(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleView.MakeUnary(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  return a1;
}

uint64_t assignWithTake for TupleView.MakeUnary(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleView.MakeUnary(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleView.MakeUnary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void ResolvedShadowStyle.init(nsShadow:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  double Offset = CoreShadowGetOffset();
  double v6 = v5;
  double BlurRadius = CoreShadowGetBlurRadius(a1);
  id v8 = (id)CoreShadowGetPlatformColor(a1, 0);
  if (Offset < 0.0 || v6 < 0.0 || BlurRadius < 0.0)
  {

    goto LABEL_8;
  }
  if (!v8)
  {
LABEL_8:

    goto LABEL_9;
  }
  id v9 = v8;
  unint64_t v10 = specialized Color.Resolved.init(platformColor:)(v9);
  uint64_t v12 = v11;
  char v14 = v13;

  if ((v14 & 1) == 0)
  {
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(double *)(a2 + 16) = BlurRadius;
    *(double *)(a2 + 24) = Offset;
    *(double *)(a2 + 32) = v6;
    *(_WORD *)(a2 + 44) = 0;
    *(_DWORD *)(a2 + 40) = 1056964608;
    return;
  }
LABEL_9:
  *(_OWORD *)(a2 + 29) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)(a2 + 45) = 1;
}

void Dictionary<>.setShadow(shadowStyle:)(uint64_t a1)
{
  double v1 = *(double *)(a1 + 16);
  double v2 = *(double *)(a1 + 24);
  double v3 = *(double *)(a1 + 32);
  long long v4 = specialized static CoreColor.platformColor(resolvedColor:)(*(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  if (v4)
  {
    unint64_t v10 = v4;
    id v5 = CoreMakeNSShadow(v4, v2, v3, v1);
    if (v5)
    {
      double v6 = v5;
      if (one-time initialization token for kitShadow != -1) {
        swift_once();
      }
      long long v7 = (void *)static NSAttributedStringKey.kitShadow;
      v11[3] = type metadata accessor for NSObject();
      v11[0] = v6;
      id v8 = v7;
      id v9 = v6;
      specialized Dictionary.subscript.setter((uint64_t)v11, v8);
    }
    else
    {
    }
  }
}

id Dictionary<>.setShadow(customStyleIndex:)(uint64_t a1)
{
  id result = CoreMakeNSShadowWithCustomStyleIndex(0, (double)a1);
  if (result)
  {
    id v2 = result;
    if (one-time initialization token for kitShadow != -1) {
      swift_once();
    }
    double v3 = (void *)static NSAttributedStringKey.kitShadow;
    _OWORD v4[3] = type metadata accessor for NSObject();
    v4[0] = v2;
    return (id)specialized Dictionary.subscript.setter((uint64_t)v4, v3);
  }
  return result;
}

void _BlendModeEffect.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_BlendModeEffect.blendMode.setter(unsigned char *result)
{
  *double v1 = *result;
  return result;
}

uint64_t (*_BlendModeEffect.blendMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_BlendModeEffect __swiftcall _BlendModeEffect.init(blendMode:)(SwiftUI::_BlendModeEffect blendMode)
{
  *double v1 = *(unsigned char *)blendMode.blendMode;
  return blendMode;
}

char *_BlendModeEffect.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  char v5 = *v1;
  id result = GraphicsBlendMode.init(_:)(&v5, (uint64_t)&v6);
  int v4 = v7;
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 12) = 5;
  return result;
}

BOOL static _BlendModeEffect.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

char *protocol witness for _RendererEffect.effectValue(size:) in conformance _BlendModeEffect@<X0>(uint64_t a1@<X8>)
{
  char v5 = *v1;
  id result = GraphicsBlendMode.init(_:)(&v5, (uint64_t)&v6);
  int v4 = v7;
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 12) = 5;
  return result;
}

uint64_t _ExtendedBlendModeEffect.blendMode.setter(uint64_t result)
{
  *double v1 = result;
  return result;
}

uint64_t (*_ExtendedBlendModeEffect.blendMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ExtendedBlendModeEffect.effectValue(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 5;
  return result;
}

BOOL static _ExtendedBlendModeEffect.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _ExtendedBlendModeEffect(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 5;
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance GraphicsBlendModeEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  int v3 = *(unsigned __int8 *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = 5;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

uint64_t View.blendMode(_:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for _BlendModeEffect);
}

uint64_t VisualEffect.blendMode(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v8 = *a1;
  lazy protocol witness table accessor for type _BlendModeEffect and conformance _BlendModeEffect();
  return VisualEffect.rendererEffect<A>(_:)((uint64_t)&v8, a2, (uint64_t)&type metadata for _BlendModeEffect, a3, a4);
}

uint64_t View.extendedBlendMode(_:)(int a1, uint64_t a2)
{
  int v3 = a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for _ExtendedBlendModeEffect);
}

uint64_t View.graphicsBlendMode(_:)(uint64_t *a1, uint64_t a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *a1;
  char v5 = v2;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for GraphicsBlendModeEffect);
}

unint64_t lazy protocol witness table accessor for type _BlendModeEffect and conformance _BlendModeEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect;
  if (!lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect;
  if (!lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BlendModeEffect and conformance _BlendModeEffect);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _BlendModeEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _BlendModeEffect and conformance _BlendModeEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ExtendedBlendModeEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect;
  if (!lazy protocol witness table cache variable for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ExtendedBlendModeEffect and conformance _ExtendedBlendModeEffect);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for _BlendModeEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    *unint64_t result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BD8030);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 20;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExtendedBlendModeEffect()
{
  return &type metadata for _ExtendedBlendModeEffect;
}

uint64_t sub_245BD8068()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_245BD807C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for RendererVisualEffect<_BlendModeEffect>()
{
  if (!lazy cache variable for type metadata for RendererVisualEffect<_BlendModeEffect>)
  {
    lazy protocol witness table accessor for type _BlendModeEffect and conformance _BlendModeEffect();
    unint64_t v0 = type metadata accessor for RendererVisualEffect();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RendererVisualEffect<_BlendModeEffect>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>;
  if (!lazy protocol witness table cache variable for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>)
  {
    type metadata accessor for RendererVisualEffect<_BlendModeEffect>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RendererVisualEffect<_BlendModeEffect> and conformance RendererVisualEffect<A>);
  }
  return result;
}

uint64_t sub_245BD81A0()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_245BD81B4()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t initializeBufferWithCopyOfBuffer for GraphicsBlendModeEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsBlendMode(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for GraphicsBlendModeEffect(uint64_t a1)
{
  return outlined consume of GraphicsBlendMode(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for GraphicsBlendModeEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsBlendMode(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of GraphicsBlendMode(v5, v6);
  return a1;
}

uint64_t assignWithTake for GraphicsBlendModeEffect(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of GraphicsBlendMode(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for GraphicsBlendModeEffect()
{
  return &type metadata for GraphicsBlendModeEffect;
}

unint64_t instantiation function for generic protocol witness table for GraphicsBlendModeEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect;
  if (!lazy protocol witness table cache variable for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsBlendModeEffect and conformance GraphicsBlendModeEffect);
  }
  return result;
}

double _Placement.init(proposedSize:at:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7 = *a1;
  char v8 = *((unsigned char *)a1 + 8);
  uint64_t v9 = a1[2];
  char v10 = *((unsigned char *)a1 + 24);
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v10;
  double result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a2 + 32) = static UnitPoint.topLeading;
  *(double *)(a2 + 48) = a3;
  *(double *)(a2 + 56) = a4;
  return result;
}

void _Placement.proposedSize.setter(double a1, double a2)
{
  *(double *)uint64_t v2 = a1;
  *(unsigned char *)(v2 + 8) = 0;
  *(double *)(v2 + 16) = a2;
  *(unsigned char *)(v2 + 24) = 0;
}

void *(*_Placement.proposedSize.modify(uint64_t a1))(void *result)
{
  *(void *)(a1 + 16) = v1;
  double v2 = *(double *)v1;
  double v3 = *(double *)(v1 + 16);
  if (*(unsigned char *)(v1 + 8)) {
    double v2 = 10.0;
  }
  if (*(unsigned char *)(v1 + 24)) {
    double v3 = 10.0;
  }
  *(double *)a1 = v2;
  *(double *)(a1 + 8) = v3;
  return _Placement.proposedSize.modify;
}

void *_Placement.proposedSize.modify(void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  *(void *)uint64_t v1 = *result;
  *(unsigned char *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 24) = 0;
  return result;
}

void _Placement.proposedSize_.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
}

uint64_t _Placement.proposedSize_.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  char v4 = *(unsigned char *)(result + 24);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 24) = v4;
  return result;
}

uint64_t (*_Placement.proposedSize_.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Placement.anchor.getter()
{
  return *(double *)(v0 + 32);
}

void _Placement.anchor.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*_Placement.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _Placement.anchorPosition.setter(double a1, double a2)
{
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

void _Placement.init(proposedSize:anchoring:at:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a5;
  *(double *)(a1 + 48) = a6;
  *(double *)(a1 + 56) = a7;
}

double _Placement.init(proposedSize:aligning:in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = 0;
  double result = a5 * a7;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a5;
  *(double *)(a1 + 48) = a4 * a6;
  *(double *)(a1 + 56) = a5 * a7;
  return result;
}

BOOL specialized static _Placement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 32);
  double v2 = *(double *)(a1 + 40);
  char v4 = *(unsigned char *)(a2 + 8);
  double v6 = *(double *)(a2 + 32);
  double v5 = *(double *)(a2 + 40);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
    if (v3 != v6 || v2 != v5) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 24)) {
      return 0;
    }
    BOOL v8 = *(double *)(a1 + 16) == *(double *)(a2 + 16) && v3 == v6;
    if (!v8 || v2 != v5) {
      return 0;
    }
  }
  return *(double *)(a1 + 56) == *(double *)(a2 + 56) && *(double *)(a1 + 48) == *(double *)(a2 + 48);
}

uint64_t sub_245BD85DC@<X0>(uint64_t result@<X0>, double *a2@<X8>)
{
  double v2 = *(double *)result;
  double v3 = *(double *)(result + 16);
  if (*(unsigned char *)(result + 8)) {
    double v2 = 10.0;
  }
  if (*(unsigned char *)(result + 24)) {
    double v3 = 10.0;
  }
  *a2 = v2;
  a2[1] = v3;
  return result;
}

void *sub_245BD8608(void *result, uint64_t a2)
{
  uint64_t v2 = result[1];
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v2;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

ValueMetadata *type metadata accessor for _Placement()
{
  return &type metadata for _Placement;
}

__n128 _ColorMatrixEffect.matrix.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  __n128 result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ColorMatrixEffect.matrix.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v2;
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(__n128 *)(v1 + 16) = result;
  return result;
}

uint64_t (*_ColorMatrixEffect.matrix.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void __swiftcall _ColorMatrixEffect.init(matrix:)(SwiftUI::_ColorMatrixEffect *__return_ptr retstr, SwiftUI::_ColorMatrix *matrix)
{
  long long v2 = *(_OWORD *)&matrix->m33;
  *(_OWORD *)&retstr->matrix.m24 = *(_OWORD *)&matrix->m24;
  *(_OWORD *)&retstr->matrix.m33 = v2;
  *(_OWORD *)&retstr->matrix.m42 = *(_OWORD *)&matrix->m42;
  long long v3 = *(_OWORD *)&matrix->m15;
  *(_OWORD *)&retstr->matrix.m11 = *(_OWORD *)&matrix->m11;
  *(_OWORD *)&retstr->matrix.m15 = v3;
}

double _ColorMatrixEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = _ColorMatrixEffect.effectValue(size:)(0, a1).n128_u64[0];
  return result;
}

uint64_t sub_245BD86AC()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMatrixEffect@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMatrixEffect(0, a1).n128_u64[0];
  return result;
}

__n128 _PremultipliedColorMatrixEffect.matrix.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  __n128 result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _PremultipliedColorMatrixEffect.matrix.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v2;
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(__n128 *)(v1 + 16) = result;
  return result;
}

uint64_t (*_PremultipliedColorMatrixEffect.matrix.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _PremultipliedColorMatrixEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = _ColorMatrixEffect.effectValue(size:)(1, a1).n128_u64[0];
  return result;
}

__n128 _ColorMatrixEffect.effectValue(size:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v5 + 32) = v6;
  long long v7 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v5 + 64) = v7;
  __n128 result = *(__n128 *)(v2 + 64);
  *(__n128 *)(v5 + 80) = result;
  *(void *)(v5 + 96) = a1;
  *(unsigned char *)(v5 + 132) = 4;
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 9;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ColorMatrixEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ColorMatrixEffect and conformance _ColorMatrixEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ColorMatrixEffect and conformance _ColorMatrixEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ColorMatrixEffect and conformance _ColorMatrixEffect;
  if (!lazy protocol witness table cache variable for type _ColorMatrixEffect and conformance _ColorMatrixEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ColorMatrixEffect and conformance _ColorMatrixEffect);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _PremultipliedColorMatrixEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect;
  if (!lazy protocol witness table cache variable for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PremultipliedColorMatrixEffect and conformance _PremultipliedColorMatrixEffect);
  }
  return result;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _PremultipliedColorMatrixEffect@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMatrixEffect(1, a1).n128_u64[0];
  return result;
}

__n128 protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMatrixEffect@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  long long v11 = v2[1];
  long long v12 = *v2;
  __n128 v9 = (__n128)v2[3];
  long long v10 = v2[2];
  uint64_t v6 = *((void *)v2 + 8);
  uint64_t v5 = *((void *)v2 + 9);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = v12;
  *(_OWORD *)(v7 + 32) = v11;
  __n128 result = v9;
  *(_OWORD *)(v7 + 48) = v10;
  *(__n128 *)(v7 + 64) = v9;
  *(void *)(v7 + 80) = v6;
  *(void *)(v7 + 88) = v5;
  *(void *)(v7 + 96) = a1;
  *(unsigned char *)(v7 + 132) = 4;
  *(void *)a2 = v7;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 9;
  return result;
}

uint64_t getEnumTagSinglePayload for _ColorMatrixEffect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ColorMatrixEffect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _PremultipliedColorMatrixEffect()
{
  return &type metadata for _PremultipliedColorMatrixEffect;
}

uint64_t sub_245BD8A00()
{
  return swift_getWitnessTable();
}

BOOL specialized ShapeStyledLeafView.contentPath(size:)@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  long long v7 = v3[5];
  v23[0] = v3[4];
  v23[1] = v7;
  int v24 = *((_DWORD *)v3 + 24);
  long long v8 = v3[1];
  long long v19 = *v3;
  long long v20 = v8;
  long long v9 = v3[3];
  long long v21 = v3[2];
  long long v22 = v9;
  long long v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  outlined init with take of Image.ResizingInfo?((uint64_t)v23, (uint64_t)v25, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo, MEMORY[0x263F8D8F0]);
  outlined init with take of Image.ResizingInfo?((uint64_t)v25, (uint64_t)v26, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo, v10);
  CGFloat v11 = 0.0;
  CGFloat v12 = 0.0;
  CGFloat v13 = 0.0;
  if (v26[32] == 2)
  {
    outlined init with take of Image.ResizingInfo?((uint64_t)(v3 + 9), (uint64_t)v18, &lazy cache variable for type metadata for IndirectOptional<Image.LayoutMetrics>, (uint64_t)&type metadata for Image.LayoutMetrics, (uint64_t (*)(void, uint64_t))type metadata accessor for IndirectOptional);
    outlined init with take of Image.ResizingInfo?((uint64_t)v18, (uint64_t)&v27, &lazy cache variable for type metadata for IndirectOptional<Image.LayoutMetrics>, (uint64_t)&type metadata for Image.LayoutMetrics, (uint64_t (*)(void, uint64_t))type metadata accessor for IndirectOptional);
    a2 = 0.0;
    if (v27)
    {
      CGFloat v12 = *(double *)(v27 + 48);
      CGFloat v13 = *(double *)(v27 + 56);
    }
    if (*(double *)&v20 == 0.0)
    {
      a3 = 0.0;
    }
    else
    {
      double v14 = *((double *)&v20 + 1);
      double v15 = *(double *)&v21;
      switch(BYTE8(v21))
      {
        case 4:
        case 5:
        case 6:
        case 7:
          double v15 = *((double *)&v20 + 1);
          double v14 = *(double *)&v21;
          break;
        default:
          break;
      }
      a2 = 1.0 / *(double *)&v20 * v14;
      a3 = 1.0 / *(double *)&v20 * v15;
    }
  }
  v28.origin.CGFloat x = v12;
  v28.origin.CGFloat y = v13;
  v28.size.CGFloat width = a2;
  v28.size.CGFloat height = a3;
  BOOL result = CGRectIsNull(v28);
  if (result)
  {
    char v17 = 6;
    CGFloat v13 = 0.0;
    a2 = 0.0;
    a3 = 0.0;
  }
  else
  {
    char v17 = 0;
    CGFloat v11 = v12;
  }
  *(CGFloat *)a1 = v11;
  *(CGFloat *)(a1 + 8) = v13;
  *(CGFloat *)(a1 + 16) = a2;
  *(CGFloat *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 32) = v17;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance Image.Resolved@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  uint64_t v6 = *a1;
  long long v7 = v4[9];
  long long v24 = v4[8];
  long long v25 = v7;
  v26[0] = v4[10];
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)v4 + 175);
  long long v8 = v4[5];
  long long v20 = v4[4];
  long long v21 = v8;
  long long v9 = v4[7];
  long long v22 = v4[6];
  long long v23 = v9;
  long long v10 = v4[1];
  long long v16 = *v4;
  long long v17 = v10;
  long long v11 = v4[3];
  long long v18 = v4[2];
  long long v19 = v11;
  specialized ContentResponder.contentPath(size:kind:)(v6, (uint64_t)v14, a3, a4);
  double result = *(double *)v14;
  long long v13 = v14[1];
  *(_OWORD *)a2 = v14[0];
  *(_OWORD *)(a2 + 16) = v13;
  *(unsigned char *)(a2 + 32) = v15;
  return result;
}

uint64_t specialized ContentResponder.contentPath(size:kind:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  if (a1 != 1)
  {
    if (one-time initialization token for v3 != -1) {
      swift_once();
    }
    unsigned int v8 = static Semantics.v3;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    uint64_t result = swift_beginAccess();
    if (byte_26B0F44FC)
    {
      uint64_t result = dyld_program_sdk_at_least();
      if (result)
      {
LABEL_8:
        char v10 = 6;
        CGFloat v11 = 0.0;
        goto LABEL_20;
      }
    }
    else if (static Semantics.forced >= v8)
    {
      goto LABEL_8;
    }
  }
  long long v12 = v4[5];
  v25[0] = v4[4];
  v25[1] = v12;
  int v26 = *((_DWORD *)v4 + 24);
  long long v13 = v4[1];
  long long v21 = *v4;
  long long v22 = v13;
  long long v14 = v4[3];
  long long v23 = v4[2];
  long long v24 = v14;
  char v15 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  outlined init with take of Image.ResizingInfo?((uint64_t)v25, (uint64_t)v27, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo, MEMORY[0x263F8D8F0]);
  outlined init with take of Image.ResizingInfo?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for Image.ResizingInfo?, (uint64_t)&type metadata for Image.ResizingInfo, v15);
  CGFloat v11 = 0.0;
  CGFloat v16 = 0.0;
  CGFloat v17 = 0.0;
  if (v28[32] == 2)
  {
    outlined init with take of Image.ResizingInfo?((uint64_t)(v4 + 9), (uint64_t)v20, &lazy cache variable for type metadata for IndirectOptional<Image.LayoutMetrics>, (uint64_t)&type metadata for Image.LayoutMetrics, (uint64_t (*)(void, uint64_t))type metadata accessor for IndirectOptional);
    outlined init with take of Image.ResizingInfo?((uint64_t)v20, (uint64_t)&v29, &lazy cache variable for type metadata for IndirectOptional<Image.LayoutMetrics>, (uint64_t)&type metadata for Image.LayoutMetrics, (uint64_t (*)(void, uint64_t))type metadata accessor for IndirectOptional);
    a3 = 0.0;
    if (v29)
    {
      CGFloat v16 = *(double *)(v29 + 48);
      CGFloat v17 = *(double *)(v29 + 56);
    }
    if (*(double *)&v22 == 0.0)
    {
      a4 = 0.0;
    }
    else
    {
      double v18 = *((double *)&v22 + 1);
      double v19 = *(double *)&v23;
      switch(BYTE8(v23))
      {
        case 4:
        case 5:
        case 6:
        case 7:
          double v19 = *((double *)&v22 + 1);
          double v18 = *(double *)&v23;
          break;
        default:
          break;
      }
      a3 = 1.0 / *(double *)&v22 * v18;
      a4 = 1.0 / *(double *)&v22 * v19;
    }
  }
  v30.origin.CGFloat x = v16;
  v30.origin.CGFloat y = v17;
  v30.size.CGFloat width = a3;
  v30.size.CGFloat height = a4;
  uint64_t result = CGRectIsNull(v30);
  if ((result & 1) == 0)
  {
    char v10 = 0;
    CGFloat v11 = v16;
    goto LABEL_22;
  }
  char v10 = 6;
LABEL_20:
  CGFloat v17 = 0.0;
  a3 = 0.0;
  a4 = 0.0;
LABEL_22:
  *(CGFloat *)a2 = v11;
  *(CGFloat *)(a2 + 8) = v17;
  *(CGFloat *)(a2 + 16) = a3;
  *(CGFloat *)(a2 + 24) = a4;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

{
  unsigned int v7;
  uint64_t result;
  char v9;
  double v10;
  double v11;
  CGRect v12;

  if (a1 != 1)
  {
    if (one-time initialization token for v3 != -1) {
      swift_once();
    }
    long long v7 = static Semantics.v3;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    uint64_t result = swift_beginAccess();
    if (byte_26B0F44FC)
    {
      uint64_t result = dyld_program_sdk_at_least();
      if (result)
      {
LABEL_8:
        long long v9 = 6;
        char v10 = 0.0;
        CGFloat v11 = 0.0;
        goto LABEL_19;
      }
    }
    else if (static Semantics.forced >= v7)
    {
      goto LABEL_8;
    }
  }
  v12.origin.CGFloat x = 0.0;
  v12.origin.CGFloat y = 0.0;
  v12.size.CGFloat width = a3;
  v12.size.CGFloat height = a4;
  uint64_t result = CGRectIsNull(v12);
  if (result) {
    char v10 = 0.0;
  }
  else {
    char v10 = a3;
  }
  if (result) {
    CGFloat v11 = 0.0;
  }
  else {
    CGFloat v11 = a4;
  }
  if (result) {
    long long v9 = 6;
  }
  else {
    long long v9 = 0;
  }
LABEL_19:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = v10;
  *(double *)(a2 + 24) = v11;
  *(unsigned char *)(a2 + 32) = v9;
  return result;
}

uint64_t specialized ContentResponder.contentPath(size:kind:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  if (a1 != 1)
  {
    if (one-time initialization token for v3 != -1) {
      swift_once();
    }
    unsigned int v9 = static Semantics.v3;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    uint64_t result = swift_beginAccess();
    if (byte_26B0F44FC)
    {
      uint64_t result = dyld_program_sdk_at_least();
      if (result)
      {
LABEL_8:
        char v11 = 6;
        double v12 = 0.0;
        double v13 = 0.0;
        double v14 = 0.0;
        double v15 = 0.0;
        goto LABEL_28;
      }
    }
    else if (static Semantics.forced >= v9)
    {
      goto LABEL_8;
    }
  }
  if (a2)
  {
    CGFloat v16 = *(double (**)(uint64_t))(*(void *)a2 + 112);
    uint64_t v17 = swift_retain();
    double v18 = v16(v17);
    double v22 = CGRect.outset(by:)(v18, v19, v20, v21, 0.0, 0.0, a4, a5);
    double v24 = v23;
    a4 = v25;
    a5 = v26;
    swift_release();
  }
  else
  {
    double v22 = 0.0;
    double v24 = 0.0;
  }
  v27.origin.CGFloat x = v22;
  v27.origin.CGFloat y = v24;
  v27.size.CGFloat width = a4;
  v27.size.CGFloat height = a5;
  uint64_t result = CGRectIsNull(v27);
  if (result) {
    double v12 = 0.0;
  }
  else {
    double v12 = v22;
  }
  if (result) {
    double v13 = 0.0;
  }
  else {
    double v13 = v24;
  }
  if (result) {
    double v14 = 0.0;
  }
  else {
    double v14 = a4;
  }
  if (result) {
    double v15 = 0.0;
  }
  else {
    double v15 = a5;
  }
  if (result) {
    char v11 = 6;
  }
  else {
    char v11 = 0;
  }
LABEL_28:
  *(double *)a3 = v12;
  *(double *)(a3 + 8) = v13;
  *(double *)(a3 + 16) = v14;
  *(double *)(a3 + 24) = v15;
  *(unsigned char *)(a3 + 32) = v11;
  return result;
}

uint64_t ContentResponder.contentPath(size:kind:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  if (*a1 == 1) {
    goto LABEL_10;
  }
  if (one-time initialization token for v3 != -1) {
    swift_once();
  }
  unsigned int v11 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced >= v11) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t result = (uint64_t)(*(void *(**)(_OWORD *__return_ptr, uint64_t, uint64_t, double, double))(a3 + 16))(v16, a2, a3, a5, a6);
    long long v13 = v16[0];
    long long v15 = v16[1];
    char v14 = v17;
    goto LABEL_11;
  }
  uint64_t result = dyld_program_sdk_at_least();
  if ((result & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  long long v13 = 0uLL;
  char v14 = 6;
  long long v15 = 0uLL;
LABEL_11:
  *(_OWORD *)a4 = v13;
  *(_OWORD *)(a4 + 16) = v15;
  *(unsigned char *)(a4 + 32) = v14;
  return result;
}

uint64_t ContentResponder.contains(points:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  return ContentResponder.contains(points:size:)(a1, a2, a3, a4, a5);
}

uint64_t ContentResponder.contains(points:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5 = 0;
  if (result && a2)
  {
    unint64_t v6 = 0;
    long long v7 = (double *)(result + 8);
    for (uint64_t i = 16 * a2; i; i -= 16)
    {
      double v10 = *(v7 - 1);
      if (v10 >= 0.0 && ((double v11 = *v7, *v7 >= 0.0) ? (v12 = v10 < a4) : (v12 = 0), v12))
      {
        if (v6 < 0x40)
        {
          uint64_t v13 = 1 << v6;
          uint64_t v9 = 1 << v6;
          if (v11 < a5)
          {
LABEL_19:
            v5 |= v13;
            goto LABEL_8;
          }
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v9 = 0;
          if (v11 < a5) {
            goto LABEL_19;
          }
        }
      }
      else if (v6 >= 0x40)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = 1 << v6;
      }
      v5 &= ~v9;
LABEL_8:
      v7 += 2;
      ++v6;
    }
  }
  *a3 = v5;
  return result;
}

BOOL ContentResponder.contentPath(size:)@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  v10.origin.CGFloat x = 0.0;
  v10.origin.CGFloat y = 0.0;
  v10.size.CGFloat width = a2;
  v10.size.CGFloat height = a3;
  BOOL result = CGRectIsNull(v10);
  CGFloat v7 = a2;
  CGFloat v8 = a3;
  if (result)
  {
    CGFloat v7 = 0.0;
    CGFloat v8 = 0.0;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (result) {
    char v9 = 6;
  }
  else {
    char v9 = 0;
  }
  *(CGFloat *)(a1 + 16) = v7;
  *(CGFloat *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

{
  BOOL result;
  CGFloat v7;
  CGFloat v8;
  char v9;
  CGRect v10;

  v10.origin.CGFloat x = 0.0;
  v10.origin.CGFloat y = 0.0;
  v10.size.CGFloat width = a2;
  v10.size.CGFloat height = a3;
  BOOL result = CGRectIsNull(v10);
  CGFloat v7 = a2;
  CGFloat v8 = a3;
  if (result)
  {
    CGFloat v7 = 0.0;
    CGFloat v8 = 0.0;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (result) {
    char v9 = 6;
  }
  else {
    char v9 = 0;
  }
  *(CGFloat *)(a1 + 16) = v7;
  *(CGFloat *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

char *LeafResponderFilter.responder.getter()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(char **)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for LeafViewResponder();
    uint64_t v1 = LeafViewResponder.__allocating_init()();
    *(void *)(v2 + 16) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

Swift::Void __swiftcall LeafResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v24 = *(void *)(v2 - 8);
  uint64_t v3 = v24;
  ((void (*)())MEMORY[0x270FA5388])();
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LeafResponderFilter.responder.getter();
  uint64_t Value = AGGraphGetValue();
  char v8 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, v2);
  int v23 = v8 & 1;
  char v9 = (long long *)AGGraphGetValue();
  int v22 = v10 & 1;
  long long v11 = v9[1];
  v26[0] = *v9;
  v26[1] = v11;
  BOOL v12 = (float64x2_t *)AGGraphGetValue();
  int v14 = v13 & 1;
  float64x2_t v25 = *v12;
  uint64_t v15 = AGGraphGetValue();
  int v17 = v16 & 1;
  uint64_t v27 = *(void *)v15;
  long long v28 = *(_OWORD *)(v15 + 8);
  long long v29 = *(_OWORD *)(v15 + 24);
  swift_retain();
  double v18 = LeafResponderFilter.responder.getter();
  v21[1] = v1;
  uint64_t v19 = type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)v5, v23, v26, v22, &v25, v14, &v27, v17, (uint64_t)v18, v19);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v2);
  type metadata accessor for [ViewResponder](0);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_2461BE2A0;
    *(void *)(v20 + 32) = LeafResponderFilter.responder.getter();
    uint64_t v27 = v20;
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

uint64_t LeafViewResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ContentResponderHelper();
  return ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)(a1, a2 | ((HIDWORD(a2) & 1) << 32), MEMORY[0x263F8EE78], v6, a3);
}

uint64_t ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v23 = a1;
  unint64_t v24 = a2;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v22 - v12;
  uint64_t v14 = *(void *)(v9 - 8);
  double v16 = MEMORY[0x270FA5388](v15);
  double v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v5 + *(int *)(a4 + 36), v10, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = a3;
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, v9);
    MEMORY[0x270FA5388](v20);
    uint64_t v21 = *(void *)(a4 + 24);
    *(&v22 - 6) = v9;
    *(&v22 - 5) = v21;
    *(&v22 - 4) = v23;
    *(&v22 - 3) = a3;
    *(&v22 - 2) = v5;
    *(&v22 - 1) = (uint64_t)v18;
    ViewResponder.ContainsPointsCache.fetch(key:_:)(v24 | ((HIDWORD(v24) & 1) << 32), (void (*)(void *__return_ptr))partial apply for closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:), a5);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v9);
  }
}

uint64_t LeafViewResponder.addContentPath(to:kind:in:observer:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *a2;
  uint64_t v9 = type metadata accessor for ContentResponderHelper();
  return ContentResponderHelper.addContentPath(to:kind:in:observer:)(a1, &v11, a3, a4, a5, v9);
}

uint64_t ContentResponderHelper.addContentPath(to:kind:in:observer:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7 = v6;
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  uint64_t v12 = *(void *)(a6 + 16);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  double v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void *)(v12 - 8);
  v19.n128_f64[0] = MEMORY[0x270FA5388](v18);
  unint64_t v33 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *a2;
  if (a4)
  {
    *(void *)&v37[0] = a4;
    *((void *)&v37[0] + 1) = a5;
    closure #1 in ContentResponderHelper.addContentPath(to:kind:in:observer:)((uint64_t *)v37, (uint64_t)v7);
  }
  (*(void (**)(char *, char *, uint64_t, __n128))(v14 + 16))(v16, (char *)v7 + *(int *)(a6 + 36), v13, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  uint64_t v23 = v33;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v33, v16, v12);
  double v24 = *v7;
  double v25 = v7[1];
  *(void *)&v37[0] = v21;
  (*(void (**)(void *__return_ptr, _OWORD *, uint64_t, double, double))(*(void *)(a6 + 24) + 24))(v34, v37, v12, v24, v25);
  uint64_t v26 = Path.isEmpty.getter();
  if (v26)
  {
    uint64_t v27 = v34;
  }
  else
  {
    long long v28 = (char *)v7 + *(int *)(a6 + 40);
    long long v29 = *((_OWORD *)v28 + 1);
    v37[0] = *(_OWORD *)v28;
    v37[1] = v29;
    uint64_t v38 = *((void *)v28 + 4);
    MEMORY[0x270FA5388](v26);
    *(&v30 - 2) = v31;
    *(&v30 - 1) = (uint64_t)v37;
    outlined retain of ViewTransform((uint64_t)v37);
    Path.mapPoints(_:)((void (*)(void **))partial apply for closure #1 in Path.convert(to:transform:), (uint64_t)v35);
    outlined release of Path((uint64_t)v34, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    outlined release of ViewTransform((uint64_t)v37);
    outlined init with take of Path.Storage((uint64_t)v35, (uint64_t)v36);
    outlined release of Path((uint64_t)v36, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    Path.formTrivialUnion(_:)((uint64_t)v35);
    outlined release of Path((uint64_t)v35, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    uint64_t v27 = v35;
  }
  outlined release of Path((uint64_t)v27, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v12);
}

unint64_t LeafViewResponder.descriptionName.getter()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 2629694;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 8745;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  return 0xD000000000000012;
}

Swift::Void __swiftcall LeafViewResponder.extendPrintTree(string:)(Swift::String *string)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = type metadata accessor for ContentResponderHelper();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  char v7 = (char *)v16 - v6;
  (*(void (**)(char *, char *, uint64_t, double))(v4 + 16))((char *)v16 - v6, &v1[*(void *)(v2 + 240)], v3, v5);
  double v8 = ContentResponderHelper.globalPosition.getter(v3);
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 91;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 4202589;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  *(double *)double v16 = v8;
  v16[1] = v10;
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
}

double ContentResponderHelper.globalPosition.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  double v3 = *(double *)v2;
  long long v4 = *(_OWORD *)(v2 + 1);
  double v5 = *((double *)v2 + 3);
  double v6 = *((double *)v2 + 4);
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  char v16 = 2;
  char v17 = 2;
  if (v3 == 0.0 && v5 == 0.0 && v6 == 0.0)
  {
    double v7 = 0.0;
  }
  else
  {
    v13[0] = 0;
    v13[1] = 0;
    double v9 = v3;
    long long v10 = v4;
    double v11 = v5;
    double v12 = v6;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v14, &v9, (uint64_t)v13);
    double v7 = *(double *)v13;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v14);
  swift_release();
  return v7;
}

uint64_t LeafViewResponder.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 240);
  uint64_t v2 = type metadata accessor for ContentResponderHelper();
  double v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

double ContentResponderHelper.size.getter()
{
  return *(double *)v0;
}

void ContentResponderHelper.size.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*ContentResponderHelper.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentResponderHelper.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Optional();
  double v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t ContentResponderHelper.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Optional();
  double v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*ContentResponderHelper.data.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentResponderHelper.transform.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 40);
  *(void *)a2 = *(void *)v3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 24);
  return swift_retain();
}

__n128 ContentResponderHelper.transform.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  __n128 v8 = *(__n128 *)(a1 + 1);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = v2 + *(int *)(a2 + 40);
  swift_release();
  *(void *)uint64_t v6 = v3;
  __n128 result = v8;
  *(__n128 *)(v6 + 8) = v8;
  *(void *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v5;
  return result;
}

uint64_t (*ContentResponderHelper.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ContentResponderHelper.bounds.getter(uint64_t a1)
{
  return ContentResponderHelper.globalPosition.getter(a1);
}

uint64_t closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)@<X0>(uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  v19[3] = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)(isStackAllocationSafe + 16);
  if (v8)
  {
    if (v8 >> 59) {
      __break(1u);
    }
    uint64_t v12 = isStackAllocationSafe;
    if ((uint64_t)(16 * v8) > 1024)
    {
      uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if (!isStackAllocationSafe)
      {
        char v17 = (void *)swift_slowAlloc();
        closure #1 in closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)(v17, v8, v12, a3, a2, a4, a5, a6);
        JUMPOUT(0x24C527CC0);
      }
    }
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t result = closure #1 in closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)((char *)v19 - v13, v8, v12, a3, a2, a4, a5, v19);
    uint64_t v15 = v19[1];
    uint64_t v16 = v19[2];
    *a6 = v19[0];
    a6[1] = v15;
    a6[2] = v16;
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = a2;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t closure #1 in closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)@<X0>(void *__dst@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>)
{
  uint64_t v12 = a2;
  uint64_t v13 = __dst;
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a3, __dst, a2);
  uint64_t v31 = v13;
  uint64_t v32 = v12;
  uint64_t v15 = (char *)a4 + *(int *)(type metadata accessor for ContentResponderHelper() + 40);
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *((void *)v15 + 1);
  uint64_t v18 = *((void *)v15 + 2);
  double v19 = *((double *)v15 + 3);
  double v20 = *((double *)v15 + 4);
  uint64_t v23 = 1;
  long long v24 = 0u;
  long long v25 = 0u;
  char v26 = 2;
  memset(v27, 0, sizeof(v27));
  uint64_t v28 = 0;
  char v29 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v23, (uint64_t)v30);
  v30[41] = 4;
  swift_retain();
  outlined destroy of CoordinateSpace((uint64_t)&v23);
  if (v16 || v19 != 0.0)
  {
    if (v12)
    {
LABEL_10:
      uint64_t v23 = v16;
      *(void *)&long long v24 = v17;
      *((void *)&v24 + 1) = v18;
      *(double *)&long long v25 = v19;
      *((double *)&v25 + 1) = v20;
      specialized ViewTransform.convert(_:_:)((uint64_t)v27, (double *)&v23, (uint64_t)&v31);
      uint64_t v13 = v31;
      uint64_t v12 = v32;
    }
  }
  else if (v20 != 0.0 && v12 != 0)
  {
    goto LABEL_10;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v27);
  swift_release();
  (*(void (**)(_OWORD *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double, double))(a7 + 8))(v27, v13, v12, a6, a7, *a4, a4[1]);
  *a8 = *(void *)&v27[0];
  a8[1] = 0x3FF0000000000000;
  a8[2] = a5;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in ContentResponderHelper.addContentPath(to:kind:in:observer:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for ContentResponderHelper() + 44);
  uint64_t v6 = *(void *)(a2 + v5);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v9 = MEMORY[0x24C527E00](v8);
      if (v9)
      {
        uint64_t v10 = v9;
        swift_unknownObjectRelease();
        if (v10 == v3) {
          return swift_bridgeObjectRelease();
        }
      }
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  v16[1] = v4;
  swift_unknownObjectWeakInit();
  uint64_t v12 = *(void **)(a2 + v5);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + v5) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, (unint64_t)v12);
    *(void *)(a2 + v5) = v12;
  }
  unint64_t v15 = v12[2];
  unint64_t v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, (unint64_t)v12);
    *(void *)(a2 + v5) = v12;
  }
  _OWORD v12[2] = v15 + 1;
  return outlined init with take of ContentPathObservers.Observer((uint64_t)v16, (uint64_t)&v12[2 * v15 + 4]);
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance StyledTextContentView@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  specialized ContentResponder.contentPath(size:kind:)(*a1, *(void *)(v4 + 8), (uint64_t)v8, a3, a4);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 32) = v9;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance ColorView@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  specialized ContentResponder.contentPath(size:kind:)(*a1, (uint64_t)v7, a3, a4);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v8;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance _ShapeView<A, B>@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  ContentResponder.contentPath(size:kind:)(a1, a2, a3, (uint64_t)v9, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a4 = v9[0];
  *(_OWORD *)(a4 + 16) = v8;
  *(unsigned char *)(a4 + 32) = v10;
  return result;
}

uint64_t partial apply for closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)@<X0>(void *a1@<X8>)
{
  return closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)(*(void *)(v1 + 32), *(void *)(v1 + 40), *(double **)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in Path.convert(to:transform:)(uint64_t a1)
{
  return closure #1 in Path.convert(to:transform:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t dispatch thunk of ContentResponder.contains(points:size:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ContentResponder.contentPath(size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ContentResponder.contentPath(size:kind:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for TrivialContentResponder()
{
  return &type metadata for TrivialContentResponder;
}

uint64_t assignWithCopy for LeafResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LeafResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContentResponderHelper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  size_t v11 = v10 + 7;
  unint64_t v12 = ((((((v10 + 7 + ((v7 + 16) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  int v13 = v7 & 0x100000;
  if (v8 > 7 || v13 != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v16 + ((v8 & 0xF8 ^ 0x1F8) & v9));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v17 = (void *)(((unint64_t)a1 + v8 + 16) & ~v8);
    uint64_t v18 = (const void *)(((unint64_t)a2 + v8 + 16) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v8 + 16) & ~v8, 1, v4))
    {
      memcpy(v17, v18, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v4);
    }
    unint64_t v19 = ((unint64_t)v17 + v11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = ((unint64_t)v18 + v11) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v19 = *(void *)v20;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(v20 + 24);
    uint64_t v21 = (void *)((v19 + 47) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)((v20 + 47) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    int v25 = *(_DWORD *)v24;
    *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
    *(_DWORD *)unint64_t v23 = v25;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    *(void *)(v23 + 16) = *(void *)(v24 + 16);
    *(void *)(v23 + 24) = *(void *)(v24 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

_OWORD *initializeWithCopy for ContentResponderHelper(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    int v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  unint64_t v15 = ((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
  uint64_t v17 = (void *)((v15 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)((v16 + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v17 = *v18;
  unint64_t v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  int v21 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  *(_DWORD *)unint64_t v19 = v21;
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  *(void *)(v19 + 24) = *(void *)(v20 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ContentResponderHelper(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  uint64_t v8 = (void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v16 = (void *)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  swift_retain();
  swift_release();
  v16[1] = v17[1];
  void v16[2] = v17[2];
  v16[3] = v17[3];
  float v16[4] = v17[4];
  uint64_t v18 = (void *)(((unint64_t)v16 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = ((unint64_t)v17 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  v19 += 15;
  *uint64_t v18 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v21 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  int v22 = *(_DWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v21 + 4) = *(unsigned char *)((v19 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)unint64_t v21 = v22;
  *(void *)(v21 + 8) = *(void *)((v19 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v21 + 16) = *(void *)((v19 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v21 + 24) = *(void *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ContentResponderHelper(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    size_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  unint64_t v15 = ((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)v16;
  long long v18 = *(_OWORD *)(v16 + 16);
  *(void *)(v15 + 32) = *(void *)(v16 + 32);
  *(_OWORD *)unint64_t v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  unint64_t v19 = (void *)((v15 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)((v16 + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v19 = *v20;
  unint64_t v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v23 = v22[1];
  *unint64_t v21 = *v22;
  v21[1] = v23;
  return a1;
}

_OWORD *assignWithTake for ContentResponderHelper(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  uint64_t v8 = (void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v16 = (void *)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = (void *)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  swift_release();
  v16[1] = v17[1];
  void v16[2] = v17[2];
  v16[3] = v17[3];
  float v16[4] = v17[4];
  long long v18 = (void *)(((unint64_t)v16 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = ((unint64_t)v17 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  v19 += 15;
  *long long v18 = v20;
  swift_bridgeObjectRelease();
  unint64_t v21 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  int v22 = *(_DWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v21 + 4) = *(unsigned char *)((v19 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)unint64_t v21 = v22;
  *(void *)(v21 + 8) = *(void *)((v19 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v21 + 16) = *(void *)((v19 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v21 + 24) = *(void *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentResponderHelper(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + 7;
  if (v8 < a2)
  {
    unint64_t v12 = ((((((v11 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 32;
    unsigned int v13 = a2 - v8;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245BDB814);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v14)
        {
          int v19 = 0;
          LODWORD(v14) = *a1;
        }
        return v8 + (v14 | v19) + 1;
      default:
        break;
    }
  }
  uint64_t v20 = ((unint64_t)a1 + v9 + 16) & ~v9;
  if (v7 < 0x7FFFFFFF)
  {
    unint64_t v22 = *(void *)((((v11 + v20) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }
  else
  {
    unsigned int v21 = (*(uint64_t (**)(uint64_t))(v5 + 48))(v20);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for ContentResponderHelper(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((((((v12 + 7 + ((v11 + 16) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((((((v12 + 7 + ((v11 + 16) & ~v11)) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((((v12 + 7 + ((v11 + 16) & ~v11)) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((((((v12 + 7 + ((v11 + 16) & ~v11)) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x245BDBAE0);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        unint64_t v19 = (unint64_t)&a1[v11 + 16] & ~v11;
        if (v9 < 0x7FFFFFFF)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v23 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v23 = a2 - 1;
          }
          *(void *)((((v12 + 7 + v19) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) = v23;
        }
        else if (v9 >= a2)
        {
          uint64_t v24 = a2 + 1;
          int v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          unint64_t v26 = (unint64_t)&a1[v11 + 16] & ~v11;
          v25(v26, v24);
        }
        else
        {
          if (v12 <= 3) {
            int v20 = ~(-1 << (8 * v12));
          }
          else {
            int v20 = -1;
          }
          if (v12)
          {
            int v21 = v20 & (~v9 + a2);
            if (v12 <= 3) {
              int v22 = v12;
            }
            else {
              int v22 = 4;
            }
            bzero((void *)((unint64_t)&a1[v11 + 16] & ~v11), v12);
            switch(v22)
            {
              case 2:
                *(_WORD *)unint64_t v19 = v21;
                break;
              case 3:
                *(_WORD *)unint64_t v19 = v21;
                *(unsigned char *)(v19 + 2) = BYTE2(v21);
                break;
              case 4:
                *(_DWORD *)unint64_t v19 = v21;
                break;
              default:
                *(unsigned char *)unint64_t v19 = v21;
                break;
            }
          }
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for ContentPathObservers()
{
  return &type metadata for ContentPathObservers;
}

uint64_t assignWithCopy for ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for ContentPathObservers.Observer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentPathObservers.Observer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentPathObservers.Observer()
{
  return &type metadata for ContentPathObservers.Observer;
}

void type metadata accessor for (CGFloat, CGFloat)()
{
  if (!lazy cache variable for type metadata for (CGFloat, CGFloat))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CGFloat, CGFloat));
    }
  }
}

uint64_t outlined init with take of Image.ResizingInfo?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with take of ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t outlined init with copy of ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

id DisplayList.ViewUpdater.Platform.viewLayer(_:)(void *a1)
{
  int v2 = (void *)CoreViewLayer(*v1 & 3, a1);

  return v2;
}

void specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)(uint64_t a1, _DWORD *a2, void *a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 > 0x10 || ((1 << v3) & 0x15F01) == 0) {
    return;
  }
  uint64_t v6 = *(void **)a1;
  int v65 = *a2 & 3;
  id v7 = (id)CoreViewSubviews(v65, *(void **)(a1 + 16));
  unint64_t v8 = (unint64_t)objc_msgSend(v7, sel_count);
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v9 = v8;
  unint64_t v64 = v6;
  unsigned int v66 = v3;
  if (v8)
  {
    uint64_t v10 = 0;
    unint64_t v67 = v8;
    id v69 = v7;
    do
    {
      id v20 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, v10, v64);
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v20);
      if (v22)
      {
        unint64_t v23 = v21;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v25 = a3[2];
        uint64_t v85 = v25;
        a3[2] = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v25 = v85;
        }
        uint64_t v26 = *(void *)(v25 + 56) + 20 * v23;
        unint64_t v28 = *(void *)v26;
        unint64_t v27 = *(void *)(v26 + 8);
        char v29 = *(unsigned char *)(v26 + 16);
        specialized _NativeDictionary._delete(at:)(v23, v25);
        a3[2] = v25;
        swift_bridgeObjectRelease();
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27, v29);
        if (v31)
        {
          unint64_t v32 = v30;
          char v33 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v34 = a3[1];
          uint64_t v85 = v34;
          a3[1] = 0x8000000000000000;
          if ((v33 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v34 = v85;
          }
          uint64_t v11 = *(void *)(v34 + 56) + 120 * v32;
          uint64_t v12 = *(void *)v11;
          size_t v13 = *(void **)(v11 + 8);
          uint64_t v14 = *(void *)(v11 + 16);
          long long v75 = *(_OWORD *)(v11 + 24);
          uint64_t v15 = *(void *)(v11 + 40);
          uint64_t v16 = *(void *)(v11 + 48);
          __int16 v17 = *(_WORD *)(v11 + 56);
          uint64_t v18 = *(void *)(v11 + 64);
          uint64_t v73 = *(void *)(v11 + 72);
          int v81 = *(_DWORD *)(v11 + 100);
          __int16 v83 = *(_WORD *)(v11 + 96);
          char v77 = *(unsigned char *)(v11 + 105);
          char v79 = *(unsigned char *)(v11 + 104);
          uint64_t v19 = *(void *)(v11 + 112);
          long long v71 = *(_OWORD *)(v11 + 80);
          specialized _NativeDictionary._delete(at:)(v32, v34);
          a3[1] = v34;
          swift_bridgeObjectRelease();
          v100[0] = *a3;
          uint64_t v85 = v12;
          uint64_t v86 = v13;
          uint64_t v87 = v14;
          long long v88 = v75;
          uint64_t v89 = v15;
          uint64_t v90 = v16;
          __int16 v91 = v17;
          uint64_t v92 = v18;
          uint64_t v93 = v73;
          long long v94 = v71;
          __int16 v95 = v83;
          int v96 = v81;
          char v97 = v79;
          char v98 = v77;
          uint64_t v99 = v19;
          specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)(&v85, v100, a3);
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
          unint64_t v9 = v67;
          id v7 = v69;
        }
      }
      ++v10;
      CoreViewRemoveFromSuperview(*(_DWORD *)a3 & 3, v20);
      swift_unknownObjectRelease();
    }
    while (v9 != v10);
  }

  if (v66 == 12)
  {
    id v35 = (id)CoreViewMaskView(v65, v64);
    if (v35)
    {
      id v84 = (id)CoreViewSubviews(v65, v35);
      unint64_t v36 = (unint64_t)objc_msgSend(v84, sel_count);
      if ((v36 & 0x8000000000000000) == 0)
      {
        unint64_t v37 = v36;
        if (v36)
        {
          uint64_t v38 = 0;
          uint64_t v39 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          unint64_t v68 = v36;
          do
          {
            id v49 = objc_msgSend(v84, (SEL)v39[146], v38, v64);
            unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v49);
            if (v51)
            {
              unint64_t v52 = v50;
              char v53 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v54 = a3[2];
              uint64_t v85 = v54;
              a3[2] = 0x8000000000000000;
              if ((v53 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v54 = v85;
              }
              uint64_t v55 = *(void *)(v54 + 56) + 20 * v52;
              unint64_t v56 = *(void *)v55;
              unint64_t v57 = *(void *)(v55 + 8);
              char v58 = *(unsigned char *)(v55 + 16);
              specialized _NativeDictionary._delete(at:)(v52, v54);
              a3[2] = v54;
              swift_bridgeObjectRelease();
              unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v57, v58);
              if (v60)
              {
                unint64_t v61 = v59;
                char v62 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v63 = a3[1];
                uint64_t v85 = v63;
                a3[1] = 0x8000000000000000;
                if ((v62 & 1) == 0)
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v63 = v85;
                }
                uint64_t v40 = *(void *)(v63 + 56) + 120 * v61;
                uint64_t v41 = *(void *)v40;
                uint64_t v42 = *(void **)(v40 + 8);
                uint64_t v43 = *(void *)(v40 + 16);
                long long v74 = *(_OWORD *)(v40 + 24);
                uint64_t v44 = *(void *)(v40 + 40);
                uint64_t v45 = *(void *)(v40 + 48);
                __int16 v46 = *(_WORD *)(v40 + 56);
                uint64_t v47 = *(void *)(v40 + 72);
                uint64_t v72 = *(void *)(v40 + 64);
                int v80 = *(_DWORD *)(v40 + 100);
                __int16 v82 = *(_WORD *)(v40 + 96);
                char v78 = *(unsigned char *)(v40 + 104);
                char v76 = *(unsigned char *)(v40 + 105);
                uint64_t v48 = *(void *)(v40 + 112);
                long long v70 = *(_OWORD *)(v40 + 80);
                specialized _NativeDictionary._delete(at:)(v61, v63);
                a3[1] = v63;
                swift_bridgeObjectRelease();
                v100[0] = *a3;
                uint64_t v85 = v41;
                uint64_t v86 = v42;
                uint64_t v87 = v43;
                long long v88 = v74;
                uint64_t v89 = v44;
                uint64_t v90 = v45;
                __int16 v91 = v46;
                uint64_t v92 = v72;
                uint64_t v93 = v47;
                long long v94 = v70;
                __int16 v95 = v82;
                int v96 = v80;
                char v97 = v78;
                char v98 = v76;
                uint64_t v99 = v48;
                specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)(&v85, v100, a3);
                swift_unknownObjectRelease();

                swift_unknownObjectRelease();
                unint64_t v37 = v68;
                uint64_t v39 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
              }
            }
            ++v38;
            CoreViewRemoveFromSuperview(*(_DWORD *)a3 & 3, v49);
            swift_unknownObjectRelease();
          }
          while (v37 != v38);
        }
        swift_unknownObjectRelease();

        return;
      }
LABEL_34:
      __break(1u);
      JUMPOUT(0x245BDC478);
    }
  }
}

id updateContent(shapeLayer:path:origin:paint:paintBounds:style:contentsScale:)(char *a1, uint64_t a2, uint64_t a3, __int16 a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v21 = &a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path];
  uint64_t v22 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path];
  uint64_t v23 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 8];
  uint64_t v24 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 16];
  uint64_t v25 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 24];
  long long v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)a2;
  *((_OWORD *)v21 + 1) = v26;
  unsigned __int8 v27 = v21[32];
  unsigned char v21[32] = *(unsigned char *)(a2 + 32);
  outlined init with take of Path.Storage(a2, (uint64_t)v32);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v32, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  outlined consume of Path.Storage(v22, v23, v24, v25, v27);
  unint64_t v28 = (double *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin];
  *unint64_t v28 = a5;
  v28[1] = a6;
  *(void *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paint] = a3;
  swift_release();
  char v29 = (double *)&a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds];
  *char v29 = a7;
  v29[1] = a8;
  void v29[2] = a9;
  _OWORD v29[3] = a10;
  unint64_t v30 = &a1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_fillStyle];
  *unint64_t v30 = a4 & 1;
  v30[1] = HIBYTE(a4) & 1;
  swift_retain();
  objc_msgSend(a1, sel_setContentsScale_, a11);
  return objc_msgSend(a1, sel_setNeedsDisplay);
}

uint64_t ShapeLayerAsyncHelper.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  CGFloat v291 = *(double *)&a1;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = &v251[-v8];
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v290 = &v251[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  uint64_t v293 = &v251[-v14];
  uint64_t v15 = *(void *)(v3 + 16);
  swift_retain();
  id v292 = a3;
  AnyResolvedPaint.as<A>(type:)(a2, (uint64_t)a3, (uint64_t)v9);
  swift_release();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v293, v9, a2);
  uint64_t v261 = (void ***)v3;
  uint64_t v17 = *(void *)(v3 + 8);
  uint64_t v257 = v17 + 16;
  long long v18 = *(_OWORD *)(v17 + 16);
  long long v19 = *(_OWORD *)(v17 + 32);
  char v259 = (CGFloat *)v17;
  char v346 = *(unsigned char *)(v17 + 48);
  v345[0] = v18;
  v345[1] = v19;
  outlined init with take of Path.Storage((uint64_t)v345, (uint64_t)v347);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v347, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v345, (uint64_t)&v296);
  uint64_t v274 = *(void *)&v296.b;
  double c = v296.c;
  double d = v296.d;
  tCGFloat x = v296.tx;
  double v271 = *(double *)&v298;
  tCGFloat y = v296.ty;
  uint64_t v278 = v299;
  uint64_t v269 = *(void *)&v296.a;
  double v270 = *(double *)&v300;
  *(void *)&double v266 = v301;
  double v267 = *(double *)&v297;
  uint64_t v258 = v15 + 16;
  long long v20 = *(_OWORD *)(v15 + 32);
  v343[0] = *(_OWORD *)(v15 + 16);
  v343[1] = v20;
  uint64_t v260 = v15;
  char v344 = *(unsigned char *)(v15 + 48);
  outlined init with take of Path.Storage((uint64_t)v343, (uint64_t)v348);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v348, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v343, (uint64_t)&v296);
  CGFloat a = v296.a;
  double v285 = v296.c;
  double v21 = v296.tx;
  CGFloat b = v296.b;
  double v288 = v296.d;
  CGFloat v286 = v296.ty;
  unint64_t v265 = v297;
  uint64_t v22 = v299;
  double v289 = *(double *)&v298;
  uint64_t v23 = v300;
  int v24 = v301;
  uint64_t v268 = v10;
  uint64_t v25 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16);
  uint64_t v26 = (uint64_t)v290;
  v25(v290, *(unsigned char **)&v291, a2);
  PaintType.init<A>(_:)(v26, a2, (uint64_t)&v296);
  CGFloat v273 = v296.a;
  CGFloat v291 = v296.b;
  CGFloat v280 = v296.c;
  CGFloat v281 = v296.d;
  CGFloat v282 = v296.tx;
  CGFloat v283 = v296.ty;
  LODWORD(v279) = v297;
  v25((unsigned char *)v26, v293, a2);
  CGFloat v27 = tx;
  uint64_t v290 = (unsigned char *)a2;
  PaintType.init<A>(_:)(v26, a2, (uint64_t)&v296);
  double v28 = v285;
  CGFloat v30 = v296.a;
  CGFloat v29 = v296.b;
  CGFloat v32 = v296.c;
  CGFloat v31 = v296.d;
  CGFloat v34 = v296.tx;
  CGFloat v33 = v296.ty;
  LODWORD(v292) = v297;
  v302[0] = v269;
  v302[1] = v274;
  *(double *)&v302[2] = c;
  *(double *)&v302[3] = d;
  *(CGFloat *)&v302[4] = v27;
  *(CGFloat *)&v302[5] = ty;
  *(double *)&v302[6] = v267;
  *(double *)&v302[7] = v271;
  v302[8] = v278;
  *(double *)&v302[9] = v270;
  char v303 = LOBYTE(v266);
  uint64_t v304 = *(void *)&a;
  uint64_t v305 = *(void *)&b;
  double v306 = v285;
  double v307 = v288;
  uint64_t v263 = v22;
  double v264 = v21;
  double v308 = v21;
  unint64_t v35 = v265;
  uint64_t v309 = *(void *)&v286;
  unint64_t v310 = v265;
  uint64_t v311 = *(void *)&v289;
  uint64_t v312 = v22;
  double v262 = *(double *)&v23;
  uint64_t v313 = v23;
  char v314 = v24;
  switch(*(void *)&v266)
  {
    case 1:
      char v51 = (unsigned char *)v268;
      if (v24 == 1)
      {
        CGFloat v71 = v296.ty;
        uint64_t v255 = *(void *)&v296.d;
        uint64_t v256 = *(void *)&v296.b;
        uint64_t v258 = *(void *)&v296.a;
        unsigned __int8 v72 = v292;
        if ((LODWORD(v286) ^ LODWORD(ty)))
        {
          uint64_t v74 = *(void *)&v273;
          uint64_t v75 = *(void *)&v291;
          uint64_t v76 = *(void *)&v280;
          uint64_t v77 = *(void *)&v281;
          uint64_t v78 = *(void *)&v282;
          uint64_t v79 = *(void *)&v283;
          unsigned __int8 v73 = v279;
        }
        else
        {
          unint64_t v52 = *(Class **)&v291;
          unsigned __int8 v73 = v279;
          if (!v279)
          {
            if (!v292)
            {
              uint64_t v253 = *(void *)&v296.tx;
              uint64_t v254 = *(void *)&v296.ty;
              double v49 = v267;
              double v42 = *(double *)&v265;
              uint64_t v125 = *(void *)&v273;
              LODWORD(v38) = HIDWORD(v258);
              float v41 = *(float *)&v258;
              LODWORD(v40) = v256;
              char v58 = v261;
              unint64_t v37 = *v261;
              LODWORD(v50) = HIDWORD(v256);
              uint64_t v62 = (uint64_t)v293;
              if (*(float *)&v258 == *(float *)&v273
                && *((float *)&v258 + 1) == *((float *)&v273 + 1)
                && *(float *)&v256 == *(float *)&v291
                && *((float *)&v256 + 1) == *((float *)&v291 + 1))
              {
                goto LABEL_62;
              }
              double v266 = v296.c;
              if (one-time initialization token for cache != -1) {
                goto LABEL_121;
              }
              goto LABEL_61;
            }
            unsigned __int8 v73 = 0;
          }
          uint64_t v74 = *(void *)&v273;
          uint64_t v75 = *(void *)&v291;
          uint64_t v76 = *(void *)&v280;
          uint64_t v77 = *(void *)&v281;
          uint64_t v78 = *(void *)&v282;
          uint64_t v79 = *(void *)&v283;
        }
        outlined consume of PaintType(v74, v75, v76, v77, v78, v79, v73);
        uint64_t v102 = v258;
        uint64_t v105 = v255;
        uint64_t v103 = v256;
        uint64_t v104 = *(void *)&v32;
        uint64_t v106 = *(void *)&v34;
        uint64_t v107 = *(void *)&v71;
        unsigned __int8 v108 = v72;
      }
      else
      {
        CGFloat v98 = v296.tx;
        CGFloat v99 = v296.b;
        CGFloat v100 = v296.ty;
        CGFloat v101 = v296.d;
        outlined consume of PaintType(*(uint64_t *)&v273, *(uint64_t *)&v291, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, v279);
        uint64_t v102 = *(void *)&v30;
        uint64_t v103 = *(void *)&v99;
        uint64_t v104 = *(void *)&v32;
        uint64_t v105 = *(void *)&v101;
        uint64_t v106 = *(void *)&v98;
        uint64_t v107 = *(void *)&v100;
        unsigned __int8 v108 = v292;
      }
      outlined consume of PaintType(v102, v103, v104, v105, v106, v107, v108);
      outlined release of (ShapeType, ShapeType)((uint64_t)v302);
      return (*((uint64_t (**)(unsigned char *, unsigned char *))v51 + 1))(v293, v290);
    case 2:
      double v266 = v296.c;
      uint64_t v80 = v268;
      if (v24 != 2)
      {
        CGFloat v109 = v296.tx;
        CGFloat v110 = v296.b;
        CGFloat v111 = v296.ty;
        CGFloat v112 = v296.d;
        outlined consume of PaintType(*(uint64_t *)&v273, *(uint64_t *)&v291, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, v279);
        uint64_t v113 = *(void *)&v30;
        uint64_t v114 = *(void *)&v110;
        uint64_t v115 = *(void *)&v266;
        uint64_t v116 = *(void *)&v112;
        uint64_t v117 = *(void *)&v109;
        uint64_t v118 = *(void *)&v111;
LABEL_45:
        outlined consume of PaintType(v113, v114, v115, v116, v117, v118, v292);
        outlined release of (ShapeType, ShapeType)((uint64_t)v302);
        return (*(uint64_t (**)(unsigned char *, unsigned char *))(v80 + 8))(v293, v290);
      }
      uint64_t v81 = *(void *)&v296.ty;
      uint64_t v258 = *(void *)&v296.a;
      uint64_t v256 = *(void *)&v296.b;
      v349[0] = v269;
      v349[1] = v274;
      *(double *)&v349[2] = c;
      *(double *)&v349[3] = d;
      char v350 = LOBYTE(v27);
      *(CGFloat *)&long long v340 = a;
      *((CGFloat *)&v340 + 1) = b;
      *(double *)&long long v341 = v285;
      *((double *)&v341 + 1) = v288;
      char v342 = LOBYTE(v264);
      if (v265 != *(void *)&v267)
      {
        long long v123 = *(void (**)(unsigned char *, unsigned char *))(v268 + 8);
        uint64_t v124 = *(void *)&v296.d;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v123(v293, v290);
        outlined consume of PaintType(*(uint64_t *)&v273, *(uint64_t *)&v291, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, v279);
        outlined consume of PaintType(v258, v256, *(uint64_t *)&v266, v124, *(uint64_t *)&v34, v81, v292);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined release of (ShapeType, ShapeType)((uint64_t)v302);
      }
      unsigned __int8 v82 = v279;
      unsigned __int8 v83 = v292;
      if (v279)
      {
LABEL_30:
        uint64_t v84 = *(void *)&v296.d;
        outlined consume of PaintType(*(uint64_t *)&v273, *(uint64_t *)&v291, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, v82);
        outlined consume of PaintType(v258, v256, *(uint64_t *)&v266, v84, *(uint64_t *)&v34, v81, v83);
        (*(void (**)(unsigned char *, unsigned char *))(v80 + 8))(v293, v290);
        return outlined release of (ShapeType, ShapeType)((uint64_t)v302);
      }
      if (v292)
      {
        unsigned __int8 v82 = 0;
        goto LABEL_30;
      }
      uint64_t v253 = *(void *)&v296.tx;
      uint64_t v254 = *(void *)&v296.ty;
      uint64_t v255 = *(void *)&v296.d;
      float v134 = *(float *)&v273;
      uint64_t v135 = v258;
      uint64_t v136 = v256;
      uint64_t v137 = **v261;
      id v292 = (*v261)[1];
      uint64_t v138 = *(void *)&v288;
      uint64_t v139 = *(void *)&v267;
      uint64_t v140 = *(void *)&v286;
      uint64_t v141 = v269;
      uint64_t v142 = *(void *)&b;
      uint64_t v143 = *(void *)&a;
      type metadata accessor for ColorShapeLayer();
      unint64_t v265 = (unint64_t)v137;
      uint64_t v279 = (objc_class *)swift_dynamicCastClassUnconditional();
      LOBYTE(v137) = LOBYTE(v264);
      outlined copy of ShapeType(v143, v142, *(uint64_t *)&v28, v138, LOBYTE(v264), v140, v139, *(uint64_t *)&v289, v263, *(uint64_t *)&v262, 2);
      uint64_t v144 = v274;
      uint64_t v145 = *(void *)&c;
      uint64_t v146 = *(void *)&d;
      outlined copy of ShapeType(v141, v274, *(uint64_t *)&c, *(uint64_t *)&d, LOBYTE(v27), *(uint64_t *)&ty, v139, *(uint64_t *)&v271, v278, *(uint64_t *)&v270, 2);
      outlined copy of Path.Storage(v141, v144, v145, v146, LOBYTE(v27));
      outlined copy of Path.Storage(v143, *(uint64_t *)&b, *(uint64_t *)&v28, *(uint64_t *)&v288, v137);
      if (*(float *)&v135 == v134
        && *((float *)&v135 + 1) == *((float *)&v273 + 1)
        && *(float *)&v136 == *(float *)&v291
        && *((float *)&v136 + 1) == *((float *)&v291 + 1))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v147 = (id)v265;
      }
      else
      {
        uint64_t v153 = one-time initialization token for cache;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v154 = (id)v265;
        if (v153 != -1) {
          swift_once();
        }
        uint64_t v155 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v135, *((float *)&v135 + 1), *(float *)&v136, *((float *)&v136 + 1));
        v156._uint64_t countAndFlagsBits = 0x6F43656B6F727473;
        v156._object = (void *)0xEB00000000726F6CLL;
        v355.super.Class isa = v279;
        *(void *)&v355._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v155, v156, v355, v157);
      }
      double v158 = v259[7];
      double v159 = v259[8];
      uint64_t v160 = *(void *)&v266;
      if (v158 == 0.0 && v159 == 0.0)
      {
        uint64_t v161 = v269;
        uint64_t v163 = v274;
        double v162 = c;
        double v164 = d;
        outlined copy of Path.Storage(v269, v274, *(uint64_t *)&c, *(uint64_t *)&d, LOBYTE(v27));
        uint64_t v165 = *(CGFloat **)&v162;
        uint64_t v166 = v161;
        int v167 = LODWORD(v27);
      }
      else
      {
        CGAffineTransformMakeTranslation(&v296, -v158, -v159);
        Path.applying(_:)(&v296.a, (uint64_t)&v317);
        uint64_t v166 = v317;
        uint64_t v163 = v318;
        uint64_t v165 = v319;
        double v164 = v320;
        int v167 = v321;
      }
      *(void *)&long long v337 = v166;
      *((void *)&v337 + 1) = v163;
      char v259 = v165;
      *(void *)&long long v338 = v165;
      uint64_t v257 = *(void *)&v164;
      *((double *)&v338 + 1) = v164;
      int v252 = v167;
      char v339 = v167;
      double v168 = *(double *)(v260 + 56);
      double v169 = *(double *)(v260 + 64);
      if (v168 == 0.0 && v169 == 0.0)
      {
        uint64_t v170 = *(void *)&a;
        uint64_t v171 = *(void *)&v285;
        uint64_t v173 = *(void *)&b;
        uint64_t v172 = *(void *)&v288;
        unsigned __int8 v174 = LOBYTE(v264);
        outlined copy of Path.Storage(*(uint64_t *)&a, *(uint64_t *)&b, *(uint64_t *)&v285, *(uint64_t *)&v288, LOBYTE(v264));
      }
      else
      {
        CGAffineTransformMakeTranslation(&v294, -v168, -v169);
        Path.applying(_:)(&v294.a, (uint64_t)&v322);
        uint64_t v170 = v322;
        uint64_t v173 = v323;
        uint64_t v171 = v324;
        uint64_t v172 = v325;
        unsigned __int8 v174 = v326;
      }
      uint64_t v175 = v160;
      double v176 = v286;
      double v177 = ty;
      uint64_t v327 = v170;
      uint64_t v328 = v173;
      uint64_t v329 = v171;
      uint64_t v330 = v172;
      unsigned __int8 v331 = v174;
      uint64_t v332 = v170;
      uint64_t v333 = v173;
      uint64_t v334 = v171;
      uint64_t v335 = v172;
      unsigned __int8 v336 = v174;
      if ((specialized static Path.Storage.== infix(_:_:)((uint64_t)&v332, (uint64_t)&v337) & 1) == 0)
      {
        uint64_t v178 = v163;
        CGPathRef v179 = Path.cgPath.getter();
        v180._uint64_t countAndFlagsBits = 1752457584;
        v180._object = (void *)0xE400000000000000;
        v356.super.Class isa = v279;
        *(void *)&v356._attr.refcount = 0;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v179, v180, v356, v181);

        uint64_t v163 = v178;
        uint64_t v175 = *(void *)&v266;
      }
      double v182 = v289;
      double v183 = v271;
      outlined consume of Path.Storage(v170, v173, v171, v172, v174);
      outlined consume of Path.Storage(v166, v163, (uint64_t)v259, v257, v252);
      if (v176 != v177)
      {
        id v184 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v176);
        v185._uint64_t countAndFlagsBits = 0x74646957656E696CLL;
        v185._object = (void *)0xE900000000000068;
        v357.super.Class isa = v279;
        *(void *)&v357._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v184, v185, v357, v186);

        uint64_t v175 = *(void *)&v266;
      }
      double v187 = v262;
      double v188 = v270;
      uint64_t v189 = v254;
      unsigned __int8 v190 = LOBYTE(tx);
      unsigned __int8 v191 = LOBYTE(v264);
      if (v182 != v183)
      {
        id v192 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v182);
        v193._uint64_t countAndFlagsBits = 0x6D694C726574696DLL;
        v193._object = (void *)0xEA00000000007469;
        v358.super.Class isa = v279;
        *(void *)&v358._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v192, v193, v358, v194);

        uint64_t v175 = *(void *)&v266;
      }
      if (v187 != v188)
      {
        id v195 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v187);
        v196._uint64_t countAndFlagsBits = 0x68736144656E696CLL;
        v196._object = (void *)0xED00006573616850;
        v359.super.Class isa = v279;
        *(void *)&v359._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v195, v196, v359, v197);

        uint64_t v175 = *(void *)&v266;
      }
      if (!specialized static Array<A>.== infix(_:_:)(v263, v278))
      {
        id v200 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF980]), sel_init);
        uint64_t v201 = v263;
        uint64_t v202 = *(void *)(v263 + 16);
        if (v202)
        {
          swift_bridgeObjectRetain();
          uint64_t v203 = 0;
          do
          {
            double v204 = *(double *)(v201 + 8 * v203++ + 32);
            id v205 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v204);
            objc_msgSend(v200, sel_addObject_, v205);
          }
          while (v202 != v203);
          swift_bridgeObjectRelease();
          uint64_t v189 = v254;
          unsigned __int8 v190 = LOBYTE(tx);
          unsigned __int8 v191 = LOBYTE(v264);
        }
        v206._uint64_t countAndFlagsBits = 0x68736144656E696CLL;
        v206._object = (void *)0xEF6E726574746150;
        v198.super.Class isa = v279;
        *(void *)&v198._attr.refcount = 0;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v200, v206, v198, v199);

        uint64_t v175 = *(void *)&v266;
      }
      uint64_t v207 = *(void *)&a;
      double v208 = v285;
      uint64_t v210 = *(void *)&b;
      uint64_t v209 = *(void *)&v288;
      outlined consume of Path.Storage(*(uint64_t *)&a, *(uint64_t *)&b, *(uint64_t *)&v285, *(uint64_t *)&v288, v191);
      uint64_t v211 = v268;
      uint64_t v212 = v263;
      outlined consume of Path.Storage(v269, v274, *(uint64_t *)&c, *(uint64_t *)&d, v190);
      outlined consume of PaintType(*(uint64_t *)&v273, *(uint64_t *)&v291, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, 0);
      outlined consume of PaintType(v258, v256, v175, v255, v253, v189, 0);
      outlined release of (ShapeType, ShapeType)((uint64_t)v302);
      uint64_t v213 = *(void *)&v208;
      uint64_t v214 = *(void *)&v267;
      outlined consume of ShapeType(v207, v210, v213, v209, LOBYTE(v264), *(uint64_t *)&v286, *(uint64_t *)&v267, *(uint64_t *)&v289, v212, *(uint64_t *)&v262, 2);
      outlined consume of ShapeType(v269, v274, *(uint64_t *)&c, *(uint64_t *)&d, v190, *(uint64_t *)&ty, v214, *(uint64_t *)&v271, v278, *(uint64_t *)&v270, 2);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(unsigned char *, unsigned char *))(v211 + 8))(v293, v290);
      char v58 = v261;
      goto LABEL_118;
    case 3:
      double v266 = v296.c;
      uint64_t v80 = v268;
      if (*(void *)&c | v274 | v269 | *(void *)&d | *(void *)&v27 | *(void *)&ty | *(void *)&v267 | *(void *)&v271 | v278 | *(void *)&v270)
      {
        uint64_t v85 = *(void *)&v296.a;
        uint64_t v256 = *(void *)&v296.b;
        if (v24 != 3
          || *(void *)&a != 1
          || *(void *)&v285 | *(void *)&b | *(void *)&v288 | *(void *)&v264 | *(void *)&v286 | v265 | *(void *)&v289 | v263 | *(void *)&v262)
        {
          uint64_t v88 = *(void *)&v273;
          CGFloat v89 = v296.ty;
          uint64_t v90 = *(void *)&v291;
          uint64_t v91 = *(void *)&v280;
          uint64_t v92 = *(void *)&v281;
          CGFloat v93 = v296.d;
          uint64_t v94 = *(void *)&v282;
          uint64_t v95 = *(void *)&v283;
          unsigned __int8 v87 = v279;
          goto LABEL_44;
        }
        uint64_t v86 = *(void *)&v291;
        unsigned __int8 v87 = v279;
        if (v279)
        {
LABEL_38:
          uint64_t v88 = *(void *)&v273;
          CGFloat v89 = v296.ty;
          uint64_t v90 = *(void *)&v291;
          uint64_t v91 = *(void *)&v280;
          uint64_t v92 = *(void *)&v281;
          CGFloat v93 = v296.d;
          uint64_t v94 = *(void *)&v282;
          uint64_t v95 = *(void *)&v283;
LABEL_44:
          outlined consume of PaintType(v88, v90, v91, v92, v94, v95, v87);
          uint64_t v113 = v85;
          uint64_t v114 = v256;
          uint64_t v115 = *(void *)&v266;
          uint64_t v116 = *(void *)&v93;
          uint64_t v117 = *(void *)&v34;
          uint64_t v118 = *(void *)&v89;
          goto LABEL_45;
        }
        if (v292)
        {
          unsigned __int8 v87 = 0;
          goto LABEL_38;
        }
        uint64_t v253 = *(void *)&v296.tx;
        uint64_t v254 = *(void *)&v296.ty;
        uint64_t v255 = *(void *)&v296.d;
        float v148 = *((float *)&v273 + 1);
        float v149 = *(float *)&v273;
        uint64_t v150 = v256;
        char v58 = v261;
        uint64_t v151 = **v261;
        double v289 = *((double *)*v261 + 1);
        type metadata accessor for ColorShapeLayer();
        double v288 = COERCE_DOUBLE(swift_dynamicCastClassUnconditional());
        if (*(float *)&v85 == v149
          && *((float *)&v85 + 1) == v148
          && *(float *)&v150 == *(float *)&v86
          && *((float *)&v150 + 1) == *((float *)&v86 + 1))
        {
          id v152 = v151;
        }
        else
        {
          uint64_t v223 = one-time initialization token for cache;
          id v224 = v151;
          if (v223 != -1) {
            swift_once();
          }
          uint64_t v225 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v85, *((float *)&v85 + 1), *(float *)&v150, *((float *)&v150 + 1));
          v226._object = (void *)0xE900000000000072;
          v226._uint64_t countAndFlagsBits = 0x6F6C6F436C6C6966;
          *(double *)&v362.super.Class isa = v288;
          *(void *)&v362._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v225, v226, v362, v227);
        }
        long long v228 = *(_OWORD *)(v257 + 16);
        long long v340 = *(_OWORD *)v257;
        long long v341 = v228;
        int v229 = *(unsigned __int8 *)(v257 + 32);
        char v342 = *(unsigned char *)(v257 + 32);
        uint64_t v231 = *((uint64_t *)&v340 + 1);
        uint64_t v230 = v340;
        uint64_t v232 = *((void *)&v228 + 1);
        uint64_t v233 = *(uint64_t *)&v228;
        double v234 = v259[7];
        double v235 = v259[8];
        if (v234 == 0.0 && v235 == 0.0)
        {
          outlined copy of Path.Storage(v340, *((uint64_t *)&v340 + 1), v341, *((uint64_t *)&v341 + 1), v229);
          uint64_t v236 = v232;
        }
        else
        {
          CGAffineTransformMakeTranslation(&v296, -v234, -v235);
          outlined copy of Path.Storage(v230, v231, v233, v232, v229);
          Path.applying(_:)(&v296.a, (uint64_t)v315);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v340, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          uint64_t v230 = v315[0];
          uint64_t v231 = v315[1];
          uint64_t v233 = v315[2];
          uint64_t v236 = v315[3];
          int v229 = v316;
        }
        id v292 = v151;
        CGFloat v286 = *(double *)&v231;
        CGFloat b = *(double *)&v230;
        uint64_t v332 = v230;
        uint64_t v333 = v231;
        CGFloat a = *(double *)&v236;
        double v285 = *(double *)&v233;
        uint64_t v334 = v233;
        uint64_t v335 = v236;
        unsigned __int8 v336 = v229;
        long long v237 = *(_OWORD *)v258;
        long long v238 = *(_OWORD *)(v258 + 16);
        char v339 = *(unsigned char *)(v258 + 32);
        double v239 = *(double *)(v260 + 56);
        double v240 = *(double *)(v260 + 64);
        long long v337 = v237;
        long long v338 = v238;
        if (v239 == 0.0 && v240 == 0.0)
        {
          unsigned __int8 v241 = *(unsigned char *)(v260 + 48);
          uint64_t v243 = *(void *)(v260 + 32);
          uint64_t v242 = *(void *)(v260 + 40);
          uint64_t v245 = *(void *)(v260 + 16);
          uint64_t v244 = *(void *)(v260 + 24);
          outlined init with take of Path.Storage((uint64_t)&v337, (uint64_t)&v294);
          CFIndex v246 = outlined copy of Path.Storage;
          uint64_t v247 = &v294;
        }
        else
        {
          CGAffineTransformMakeTranslation(&v294, -v239, -v240);
          outlined init with take of Path.Storage((uint64_t)&v337, (uint64_t)v349);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v349, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          Path.applying(_:)(&v294.a, (uint64_t)&v317);
          uint64_t v245 = v317;
          uint64_t v244 = v318;
          uint64_t v243 = (uint64_t)v319;
          uint64_t v242 = *(void *)&v320;
          unsigned __int8 v241 = v321;
          CFIndex v246 = outlined consume of Path.Storage;
          uint64_t v247 = (CGAffineTransform *)&v337;
        }
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v247, (void (*)(void, void, void, void, void))v246);
        uint64_t v322 = v245;
        uint64_t v323 = v244;
        uint64_t v324 = v243;
        uint64_t v325 = v242;
        unsigned __int8 v326 = v241;
        uint64_t v327 = v245;
        uint64_t v328 = v244;
        uint64_t v329 = v243;
        uint64_t v330 = v242;
        unsigned __int8 v331 = v241;
        if ((specialized static Path.Storage.== infix(_:_:)((uint64_t)&v327, (uint64_t)&v332) & 1) == 0)
        {
          LODWORD(v279) = v229;
          CGPathRef v248 = Path.cgPath.getter();
          v249._uint64_t countAndFlagsBits = 1752457584;
          v249._object = (void *)0xE400000000000000;
          *(double *)&v363.super.Class isa = v288;
          *(void *)&v363._attr.refcount = 0;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v248, v249, v363, v250);
          LOBYTE(v229) = (_BYTE)v279;

          char v58 = v261;
        }
        outlined consume of PaintType(*(uint64_t *)&v273, v86, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, 0);
        outlined consume of PaintType(v85, v256, *(uint64_t *)&v266, v255, v253, v254, 0);
        outlined release of (ShapeType, ShapeType)((uint64_t)v302);
        outlined consume of Path.Storage(v245, v244, v243, v242, v241);
        outlined consume of Path.Storage(*(uint64_t *)&b, *(uint64_t *)&v286, *(uint64_t *)&v285, *(uint64_t *)&a, v229);

        uint64_t result = (*(uint64_t (**)(unsigned char *, unsigned char *))(v268 + 8))(v293, v290);
        goto LABEL_118;
      }
      uint64_t v119 = *(void *)&v296.tx;
      uint64_t v120 = *(void *)&v296.b;
      uint64_t v121 = *(void *)&v296.ty;
      uint64_t v122 = *(void *)&v296.d;
      (*(void (**)(unsigned char *, unsigned char *))(v268 + 8))(v293, v290);
      outlined consume of PaintType(*(uint64_t *)&v273, *(uint64_t *)&v291, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, v279);
      outlined consume of PaintType(*(uint64_t *)&v30, v120, *(uint64_t *)&v266, v122, v119, v121, v292);
      if (v24 == 3
        && !(*(void *)&v285 | *(void *)&b | *(void *)&a | *(void *)&v288 | *(void *)&v264 | *(void *)&v286 | v35 | *(void *)&v289 | v263 | *(void *)&v262))
      {
        uint64_t result = outlined release of (ShapeType, ShapeType)((uint64_t)v302);
        char v58 = v261;
        goto LABEL_118;
      }
      return outlined release of (ShapeType, ShapeType)((uint64_t)v302);
    default:
      uint64_t v36 = *(void *)&v296.ty;
      unint64_t v37 = (void **)v268;
      if (v24 || ((LODWORD(v286) ^ LODWORD(ty)) & 1) != 0)
      {
        uint64_t v96 = *(void *)&v296.b;
        uint64_t v97 = *(void *)&v296.d;
        outlined consume of PaintType(*(uint64_t *)&v273, *(uint64_t *)&v291, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, v279);
        outlined consume of PaintType(*(uint64_t *)&v30, v96, *(uint64_t *)&v32, v97, *(uint64_t *)&v34, v36, v292);
        goto LABEL_40;
      }
      CGFloat v38 = c;
      CGFloat v27 = v296.c;
      uint64_t v39 = *v261;
      CGFloat v40 = d;
      float v41 = *(float *)&v285;
      double v42 = v288;
      uint64_t v43 = *(void *)&v273;
      v296.CGFloat a = v273;
      v296.CGFloat b = v291;
      v296.double c = v280;
      v296.double d = v281;
      v296.tCGFloat x = v282;
      v296.tCGFloat y = v283;
      LOBYTE(v297) = (_BYTE)v279;
      v294.CGFloat a = v30;
      v294.CGFloat b = v29;
      v294.double c = v32;
      v294.double d = v31;
      v294.tCGFloat x = v34;
      v294.tCGFloat y = v33;
      unsigned __int8 v44 = v292;
      char v295 = (char)v292;
      uint64_t v45 = *(void *)&v29;
      double v289 = *(double *)&v39;
      uint64_t v46 = *(void *)&v31;
      char v47 = updateContentAsync(layer:oldSize:newSize:oldPaintType:newPaintType:old:new:)((uint64_t)v39, (uint64_t)&v296, (uint64_t)&v294, v259, v260, c, d, v285, v288);
      uint64_t v48 = v46;
      LOBYTE(v46) = v47;
      outlined consume of PaintType(*(uint64_t *)&v30, v45, *(uint64_t *)&v27, v48, *(uint64_t *)&v34, v36, v44);
      outlined consume of PaintType(v43, *(uint64_t *)&v291, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, v279);
      if ((v46 & 1) == 0)
      {
LABEL_40:
        outlined release of (ShapeType, ShapeType)((uint64_t)v302);
        return ((uint64_t (*)(unsigned char *, unsigned char *))v37[1])(v293, v290);
      }
      double v49 = tx;
      double v50 = v264;
      char v51 = v293;
      unint64_t v52 = *(Class **)&v289;
      if (v264 != tx)
      {
        id v53 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v264);
        v351.super.Class isa = *v52;
        v54._uint64_t countAndFlagsBits = 0x615272656E726F63;
        v54._object = (void *)0xEC00000073756964;
        *(void *)&v351._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v53, v54, v351, v55);
      }
      Class v56 = *v52;
      type metadata accessor for UnclippedGradientLayer();
      uint64_t v57 = swift_dynamicCastClass();
      char v58 = v261;
      if (v57)
      {
        unint64_t v59 = v56;
        id v60 = [(objc_class *)v59 sublayers];
        if (!v60)
        {
          __break(1u);
          JUMPOUT(0x245BDDFE4);
        }
        unint64_t v61 = v60;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
        uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v62 & 0xC000000000000001) != 0)
        {
          uint64_t v63 = (objc_class *)MEMORY[0x24C523D60](0, v62);
        }
        else
        {
          if (!*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_121:
            swift_once();
LABEL_61:
            long long v126 = (void *)specialized ObjectCache.subscript.getter(v41, *(float *)&v38, *(float *)&v40, *(float *)&v50);
            v354.super.Class isa = (Class)*v37;
            v127._uint64_t countAndFlagsBits = 0x6F43726564726F62;
            v127._object = (void *)0xEB00000000726F6CLL;
            *(void *)&v354._attr.refcount = 1;
            DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v126, v127, v354, v128);

            CGFloat v32 = v266;
            uint64_t v125 = *(void *)&v273;
LABEL_62:
            double v129 = v264;
            double v130 = v27;
            if (v42 == v49)
            {
              outlined consume of PaintType(v125, (uint64_t)v52, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, 0);
              uint64_t v131 = v258;
              uint64_t v132 = v256;
              uint64_t v133 = *(void *)&v32;
            }
            else
            {
              uint64_t v215 = v62;
              uint64_t v216 = *(void *)&v32;
              id v217 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v42);
              v360.super.Class isa = (Class)*v37;
              v218._uint64_t countAndFlagsBits = 0x6957726564726F62;
              v218._object = (void *)0xEB00000000687464;
              *(void *)&v360._attr.refcount = 1;
              DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v217, v218, v360, v219);

              outlined consume of PaintType(v125, (uint64_t)v52, *(uint64_t *)&v280, *(uint64_t *)&v281, *(uint64_t *)&v282, *(uint64_t *)&v283, 0);
              uint64_t v131 = v258;
              uint64_t v132 = v256;
              uint64_t v133 = v216;
              uint64_t v62 = v215;
            }
            outlined consume of PaintType(v131, v132, v133, v255, v253, v254, 0);
            if (v129 != v130)
            {
              id v220 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v129);
              v361.super.Class isa = (Class)*v37;
              v221._uint64_t countAndFlagsBits = 0x615272656E726F63;
              v221._object = (void *)0xEC00000073756964;
              *(void *)&v361._attr.refcount = 1;
              DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v220, v221, v361, v222);
            }
            outlined release of (ShapeType, ShapeType)((uint64_t)v302);
            uint64_t result = (*((uint64_t (**)(uint64_t, unsigned char *))v51 + 1))(v62, v290);
            goto LABEL_118;
          }
          uint64_t v63 = (objc_class *)*(id *)(v62 + 32);
        }
        unint64_t v64 = v63;

        swift_bridgeObjectRelease();
        if (v50 != v49)
        {
          id v65 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v50);
          v66._uint64_t countAndFlagsBits = 0x615272656E726F63;
          v66._object = (void *)0xEC00000073756964;
          v352.super.Class isa = v64;
          *(void *)&v352._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v65, v66, v352, v67);
        }
        v364.origin.CGFloat x = 0.0;
        v364.origin.CGFloat y = 0.0;
        v365.origin.CGFloat x = 0.0;
        v365.origin.CGFloat y = 0.0;
        v364.size.CGFloat width = v28;
        v364.size.CGFloat height = v42;
        v365.size.CGFloat width = v38;
        v365.size.CGFloat height = v40;
        if (!CGRectEqualToRect(v364, v365))
        {
          id v68 = objc_msgSend(self, sel_valueWithRect_, 0.0, 0.0, v28, v42);
          v69._uint64_t countAndFlagsBits = 0x73646E756F62;
          v69._object = (void *)0xE600000000000000;
          v353.super.Class isa = v64;
          *(void *)&v353._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v68, v69, v353, v70);
        }
        outlined release of (ShapeType, ShapeType)((uint64_t)v302);
      }
      else
      {
        outlined release of (ShapeType, ShapeType)((uint64_t)v302);
      }
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))v37[1])(v51, v290);
LABEL_118:
      *((unsigned char *)v58 + 24) = 1;
      return result;
  }
}

uint64_t updateContentAsync(layer:oldSize:newSize:oldPaintType:newPaintType:old:new:)(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat *a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9 = *(uint64_t *)(a2 + 16);
  uint64_t v10 = *(uint64_t *)(a2 + 24);
  uint64_t v176 = *(void *)(a2 + 32);
  uint64_t v177 = *(void *)(a2 + 40);
  uint64_t v178 = *(void *)a2;
  unsigned __int8 v11 = *(unsigned char *)(a2 + 48);
  uint64_t v13 = *(void *)a3;
  uint64_t v12 = *(void *)(a3 + 8);
  double v15 = *(double *)(a3 + 16);
  uint64_t v14 = *(uint64_t *)(a3 + 24);
  uint64_t v16 = *(void *)(a3 + 32);
  uint64_t v174 = *(void *)(a2 + 8);
  uint64_t v175 = *(void *)(a3 + 40);
  int v17 = *(unsigned __int8 *)(a3 + 48);
  double v19 = a9;
  double v20 = a8;
  double v21 = a7;
  uint64_t v23 = a1;
  switch(v11)
  {
    case 1u:
      if (v17 != 1) {
        goto LABEL_27;
      }
      CGFloat v32 = *(void **)a1;
      uint64_t v150 = *(void *)(a1 + 8);
      char v147 = *(unsigned char *)(a1 + 16);
      char v143 = *(unsigned char *)(a1 + 17);
      uint64_t v24 = *(void *)(a1 + 24);
      char v139 = *(unsigned char *)(a1 + 32);
      long long v33 = *(_OWORD *)(a5 + 112);
      long long v193 = *(_OWORD *)(a5 + 96);
      long long v194 = v33;
      char v195 = *(unsigned char *)(a5 + 128);
      long long v34 = *(_OWORD *)(a5 + 48);
      *(_OWORD *)&v189[32] = *(_OWORD *)(a5 + 32);
      long long v190 = v34;
      long long v35 = *(_OWORD *)(a5 + 80);
      long long v191 = *(_OWORD *)(a5 + 64);
      long long v192 = v35;
      long long v36 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)uint64_t v189 = *(_OWORD *)a5;
      *(_OWORD *)&v189[16] = v36;
      unint64_t v37 = *(void **)v189;
      uint64_t v164 = v13;
      uint64_t v173 = v12;
      *(double *)&uint64_t v23 = v15;
      outlined copy of PaintType(v13, v12, *(uint64_t *)&v15, v14, v16, v175, 1u);
      uint64_t v13 = v9;
      outlined copy of PaintType(v178, v174, v9, v10, v176, v177, 1u);
      double v160 = v21;
      double v168 = a6;
      if (v195 == 1)
      {
        CGFloat v38 = (objc_class *)*(id *)v189;
        *(double *)&uint64_t v9 = v15;
LABEL_34:
        uint64_t v138 = v38;
        Class v183 = v38;
        uint64_t v184 = v150;
        char v185 = v147;
        char v186 = v143;
        uint64_t v187 = v24;
        char v188 = v139;
        *(void *)&long long v196 = v13;
        *((void *)&v196 + 1) = v10;
        uint64_t v197 = v176;
        uint64_t v198 = v177;
        char v199 = 0;
        *(void *)&long long v200 = v9;
        *((void *)&v200 + 1) = v14;
        uint64_t v201 = v16;
        uint64_t v202 = v175;
        char v203 = 0;
        uint64_t v181 = v178;
        char v182 = v174;
        uint64_t v179 = v164;
        char v180 = v173;
        CGFloat v85 = a4[10];
        CGFloat v86 = a4[11];
        CGFloat v87 = a4[12];
        CGFloat v88 = a4[13];
        long long v157 = *(_OWORD *)(a5 + 80);
        CGFloat v89 = *(double *)(a5 + 96);
        CGFloat v90 = *(double *)(a5 + 104);
        outlined copy of PaintType(v164, v173, v9, v14, v16, v175, 1u);
        outlined copy of PaintType(v178, v174, v13, v10, v176, v177, 1u);
        uint64_t v91 = v10;
        char v29 = specialized static GradientLayer.updateAsync(layer:oldSize:newSize:oldFunction:newFunction:oldGradient:newGradient:oldBounds:newBounds:)(&v183, &v196, &v200, (uint64_t)&v181, (uint64_t)&v179, v168, v160, v20, v19, v85, v86, v87, v88, *(CGFloat *)&v157, *((CGFloat *)&v157 + 1), v89, v90);
        outlined consume of PaintType(v178, v174, v13, v91, v176, v177, 1u);
        outlined consume of PaintType(v164, v173, v9, v14, v16, v175, 1u);
        outlined consume of PaintType(v164, v173, v9, v14, v16, v175, 1u);
        uint64_t v93 = v177;
        uint64_t v92 = v178;
        uint64_t v94 = v174;
        uint64_t v95 = v13;
        uint64_t v96 = v91;
        uint64_t v97 = v176;
        unsigned __int8 v98 = 1;
LABEL_47:
        outlined consume of PaintType(v92, v94, v95, v96, v97, v93, v98);

        return v29 & 1;
      }
      double v15 = COERCE_DOUBLE(v32);
      outlined retain of ShapeLayerHelper((uint64_t)v189);
      id v81 = objc_msgSend(v37, sel_sublayers);
      if (v81)
      {
        unsigned __int8 v82 = v81;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
        uint64_t v83 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v9 = v23;
        if ((v83 & 0xC000000000000001) != 0)
        {
          uint64_t v84 = (objc_class *)MEMORY[0x24C523D60](0, v83);
          goto LABEL_33;
        }
        if (*(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v84 = (objc_class *)*(id *)(v83 + 32);
LABEL_33:
          CGFloat v38 = v84;
          swift_bridgeObjectRelease();
          outlined release of ShapeLayerHelper((uint64_t)v189);

          goto LABEL_34;
        }
        __break(1u);
        goto LABEL_61;
      }
      __break(1u);
      goto LABEL_66;
    case 2u:
      if (v17 != 2) {
        goto LABEL_27;
      }
      uint64_t v39 = *(void **)a1;
      uint64_t v151 = *(void *)(a1 + 8);
      char v148 = *(unsigned char *)(a1 + 16);
      char v144 = *(unsigned char *)(a1 + 17);
      uint64_t v24 = *(void *)(a1 + 24);
      char v140 = *(unsigned char *)(a1 + 32);
      long long v40 = *(_OWORD *)(a5 + 112);
      long long v193 = *(_OWORD *)(a5 + 96);
      long long v194 = v40;
      char v195 = *(unsigned char *)(a5 + 128);
      long long v41 = *(_OWORD *)(a5 + 48);
      *(_OWORD *)&v189[32] = *(_OWORD *)(a5 + 32);
      long long v190 = v41;
      long long v42 = *(_OWORD *)(a5 + 80);
      long long v191 = *(_OWORD *)(a5 + 64);
      long long v192 = v42;
      long long v43 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)uint64_t v189 = *(_OWORD *)a5;
      *(_OWORD *)&v189[16] = v43;
      unsigned __int8 v44 = *(void **)v189;
      uint64_t v165 = v13;
      uint64_t v173 = v12;
      *(double *)&uint64_t v23 = v15;
      outlined copy of PaintType(v13, v12, *(uint64_t *)&v15, v14, v16, v175, 2u);
      uint64_t v13 = v9;
      outlined copy of PaintType(v178, v174, v9, v10, v176, v177, 2u);
      double v161 = v21;
      double v169 = a6;
      if (v195 == 1)
      {
        uint64_t v45 = (objc_class *)*(id *)v189;
        *(double *)&uint64_t v9 = v15;
        goto LABEL_40;
      }
      double v15 = COERCE_DOUBLE(v39);
      outlined retain of ShapeLayerHelper((uint64_t)v189);
      id v99 = objc_msgSend(v44, sel_sublayers);
      if (v99)
      {
        CGFloat v100 = v99;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
        uint64_t v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v9 = v23;
        if ((v101 & 0xC000000000000001) != 0)
        {
          uint64_t v102 = (objc_class *)MEMORY[0x24C523D60](0, v101);
        }
        else
        {
          if (!*(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          uint64_t v102 = (objc_class *)*(id *)(v101 + 32);
        }
        uint64_t v45 = v102;
        swift_bridgeObjectRelease();
        outlined release of ShapeLayerHelper((uint64_t)v189);

LABEL_40:
        uint64_t v138 = v45;
        Class v183 = v45;
        uint64_t v184 = v151;
        char v185 = v148;
        char v186 = v144;
        uint64_t v187 = v24;
        char v188 = v140;
        *(void *)&long long v196 = v13;
        *((void *)&v196 + 1) = v10;
        uint64_t v197 = v176;
        uint64_t v198 = v177;
        char v199 = 1;
        *(void *)&long long v200 = v9;
        *((void *)&v200 + 1) = v14;
        uint64_t v201 = v16;
        uint64_t v202 = v175;
        char v203 = 1;
        uint64_t v181 = v178;
        char v182 = v174;
        uint64_t v179 = v165;
        char v180 = v173;
        CGFloat v103 = a4[10];
        CGFloat v104 = a4[11];
        CGFloat v105 = a4[12];
        CGFloat v106 = a4[13];
        long long v158 = *(_OWORD *)(a5 + 80);
        CGFloat v107 = *(double *)(a5 + 96);
        CGFloat v108 = *(double *)(a5 + 104);
        outlined copy of PaintType(v165, v173, v9, v14, v16, v175, 2u);
        outlined copy of PaintType(v178, v174, v13, v10, v176, v177, 2u);
        uint64_t v109 = v10;
        char v29 = specialized static GradientLayer.updateAsync(layer:oldSize:newSize:oldFunction:newFunction:oldGradient:newGradient:oldBounds:newBounds:)(&v183, &v196, &v200, (uint64_t)&v181, (uint64_t)&v179, v169, v161, v20, v19, v103, v104, v105, v106, *(CGFloat *)&v158, *((CGFloat *)&v158 + 1), v107, v108);
        outlined consume of PaintType(v178, v174, v13, v109, v176, v177, 2u);
        outlined consume of PaintType(v165, v173, v9, v14, v16, v175, 2u);
        outlined consume of PaintType(v165, v173, v9, v14, v16, v175, 2u);
        uint64_t v93 = v177;
        uint64_t v92 = v178;
        uint64_t v94 = v174;
        uint64_t v95 = v13;
        uint64_t v96 = v109;
        uint64_t v97 = v176;
        unsigned __int8 v98 = 2;
        goto LABEL_47;
      }
LABEL_66:
      __break(1u);
      goto LABEL_67;
    case 3u:
      if (v17 != 3) {
        goto LABEL_27;
      }
      uint64_t v46 = *(void **)a1;
      uint64_t v152 = *(void *)(a1 + 8);
      char v149 = *(unsigned char *)(a1 + 16);
      char v145 = *(unsigned char *)(a1 + 17);
      uint64_t v24 = *(void *)(a1 + 24);
      char v141 = *(unsigned char *)(a1 + 32);
      long long v47 = *(_OWORD *)(a5 + 112);
      long long v193 = *(_OWORD *)(a5 + 96);
      long long v194 = v47;
      char v195 = *(unsigned char *)(a5 + 128);
      long long v48 = *(_OWORD *)(a5 + 48);
      *(_OWORD *)&v189[32] = *(_OWORD *)(a5 + 32);
      long long v190 = v48;
      long long v49 = *(_OWORD *)(a5 + 80);
      long long v191 = *(_OWORD *)(a5 + 64);
      long long v192 = v49;
      long long v50 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)uint64_t v189 = *(_OWORD *)a5;
      *(_OWORD *)&v189[16] = v50;
      char v51 = *(void **)v189;
      uint64_t v166 = v13;
      uint64_t v173 = v12;
      *(double *)&uint64_t v23 = v15;
      outlined copy of PaintType(v13, v12, *(uint64_t *)&v15, v14, v16, v175, 3u);
      uint64_t v13 = v9;
      outlined copy of PaintType(v178, v174, v9, v10, v176, v177, 3u);
      double v162 = v21;
      double v170 = a6;
      if (v195 == 1)
      {
        unint64_t v52 = (objc_class *)*(id *)v189;
        *(double *)&uint64_t v9 = v15;
        goto LABEL_46;
      }
      double v15 = COERCE_DOUBLE(v46);
      outlined retain of ShapeLayerHelper((uint64_t)v189);
      id v110 = objc_msgSend(v51, sel_sublayers);
      if (v110)
      {
        CGFloat v111 = v110;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
        uint64_t v112 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v9 = v23;
        if ((v112 & 0xC000000000000001) != 0)
        {
          uint64_t v113 = (objc_class *)MEMORY[0x24C523D60](0, v112);
        }
        else
        {
          if (!*(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_62:
            __break(1u);
            goto LABEL_63;
          }
          uint64_t v113 = (objc_class *)*(id *)(v112 + 32);
        }
        unint64_t v52 = v113;
        swift_bridgeObjectRelease();
        outlined release of ShapeLayerHelper((uint64_t)v189);

LABEL_46:
        uint64_t v138 = v52;
        Class v183 = v52;
        uint64_t v184 = v152;
        char v185 = v149;
        char v186 = v145;
        uint64_t v187 = v24;
        char v188 = v141;
        *(void *)&long long v196 = v13;
        *((void *)&v196 + 1) = v10;
        uint64_t v197 = v176;
        uint64_t v198 = v177;
        char v199 = 2;
        *(void *)&long long v200 = v9;
        *((void *)&v200 + 1) = v14;
        uint64_t v201 = v16;
        uint64_t v202 = v175;
        char v203 = 2;
        uint64_t v181 = v178;
        char v182 = v174;
        uint64_t v179 = v166;
        char v180 = v173;
        CGFloat v114 = a4[10];
        CGFloat v115 = a4[11];
        CGFloat v116 = a4[12];
        CGFloat v117 = a4[13];
        long long v159 = *(_OWORD *)(a5 + 80);
        CGFloat v118 = *(double *)(a5 + 96);
        CGFloat v119 = *(double *)(a5 + 104);
        outlined copy of PaintType(v166, v173, v9, v14, v16, v175, 3u);
        outlined copy of PaintType(v178, v174, v13, v10, v176, v177, 3u);
        uint64_t v120 = v10;
        char v29 = specialized static GradientLayer.updateAsync(layer:oldSize:newSize:oldFunction:newFunction:oldGradient:newGradient:oldBounds:newBounds:)(&v183, &v196, &v200, (uint64_t)&v181, (uint64_t)&v179, v170, v162, v20, v19, v114, v115, v116, v117, *(CGFloat *)&v159, *((CGFloat *)&v159 + 1), v118, v119);
        outlined consume of PaintType(v178, v174, v13, v120, v176, v177, 3u);
        outlined consume of PaintType(v166, v173, v9, v14, v16, v175, 3u);
        outlined consume of PaintType(v166, v173, v9, v14, v16, v175, 3u);
        uint64_t v93 = v177;
        uint64_t v92 = v178;
        uint64_t v94 = v174;
        uint64_t v95 = v13;
        uint64_t v96 = v120;
        uint64_t v97 = v176;
        unsigned __int8 v98 = 3;
        goto LABEL_47;
      }
LABEL_67:
      __break(1u);
      goto LABEL_68;
    case 4u:
      if (v17 != 4)
      {
LABEL_27:
        uint64_t v79 = *(void *)(a3 + 8);
        swift_bridgeObjectRetain();
        uint64_t v12 = v79;
LABEL_28:
        uint64_t v80 = v12;
        outlined copy of PaintType(v13, v12, *(uint64_t *)&v15, v14, v16, v175, v17);
        outlined consume of PaintType(v178, v174, v9, v10, v176, v177, v11);
        outlined consume of PaintType(v13, v80, *(uint64_t *)&v15, v14, v16, v175, v17);
        char v29 = 0;
        return v29 & 1;
      }
      *(SwiftUI::Angle *)&v53.radians = *(SwiftUI::Angle *)(a3 + 32);
      double v54 = a4[10];
      double v55 = a4[11];
      double v56 = a4[12];
      double v57 = a4[13];
      *(void *)&long long v200 = *(void *)a2;
      BYTE8(v200) = v174;
      *(double *)&unint64_t v58 = v54 + v56 * *(double *)&v9;
      *(double *)&unint64_t v59 = v55 + v57 * *(double *)&v10;
      uint64_t v60 = v12;
      outlined copy of PaintType(v178, v174, v9, v10, v176, v177, 4u);
      uint64_t v172 = *(void *)&v15;
      uint64_t v137 = v16;
      uint64_t v61 = v16;
      uint64_t v16 = v10;
      outlined copy of PaintType(v13, v60, *(uint64_t *)&v15, v14, v61, v175, 4u);
      outlined copy of PaintType(v178, v174, v9, v10, v176, v177, 4u);
      v204.stops._rawuint64_t Value = &v200;
      ConicGradient.init(gradient:center:startAngle:endAngle:)((SwiftUI::ConicGradient *)v189, v204, (CGPoint)__PAIR128__(v59, v58), (SwiftUI::Angle)v176, (SwiftUI::Angle)v177);
      uint64_t v62 = *(void *)v189;
      char v136 = v189[8];
      uint64_t v135 = *(void *)&v189[32];
      double v63 = *(double *)(a5 + 80);
      double v64 = *(double *)(a5 + 88);
      double v65 = *(double *)(a5 + 96);
      double v66 = *(double *)(a5 + 104);
      *(void *)&long long v200 = v13;
      uint64_t v173 = v60;
      BYTE8(v200) = v60;
      *(double *)&unint64_t v67 = v63 + v65 * v15;
      *(double *)&unint64_t v68 = v64 + v66 * *(double *)&v14;
      uint64_t v167 = v13;
      swift_bridgeObjectRetain();
      v205.stops._rawuint64_t Value = &v200;
      ConicGradient.init(gradient:center:startAngle:endAngle:)((SwiftUI::ConicGradient *)v189, v205, (CGPoint)__PAIR128__(v68, v67), v53, (SwiftUI::Angle)v175);
      uint64_t v69 = *(void *)v189;
      char v134 = v189[8];
      Class v70 = *(Class *)v23;
      uint64_t v133 = *(void *)(v23 + 8);
      char v131 = *(unsigned char *)(v23 + 17);
      char v132 = *(unsigned char *)(v23 + 16);
      uint64_t v24 = *(void *)(v23 + 24);
      uint64_t v23 = *(unsigned __int8 *)(v23 + 32);
      long long v71 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)uint64_t v189 = *(_OWORD *)a5;
      *(_OWORD *)&v189[16] = v71;
      long long v72 = *(_OWORD *)(a5 + 96);
      long long v73 = *(_OWORD *)(a5 + 112);
      char v195 = *(unsigned char *)(a5 + 128);
      uint64_t v129 = v69;
      uint64_t v130 = *(void *)&v189[32];
      uint64_t v74 = *(void **)v189;
      long long v193 = v72;
      long long v194 = v73;
      long long v75 = *(_OWORD *)(a5 + 48);
      *(_OWORD *)&v189[32] = *(_OWORD *)(a5 + 32);
      long long v190 = v75;
      long long v76 = *(_OWORD *)(a5 + 80);
      long long v191 = *(_OWORD *)(a5 + 64);
      long long v192 = v76;
      uint64_t v77 = v9;
      uint64_t v13 = v62;
      if (v195 == 1)
      {
        uint64_t v78 = (objc_class *)*(id *)v189;
        uint64_t v9 = v137;
        double v19 = a8;
        double v21 = a9;
        double v20 = a6;
LABEL_53:
        Class v183 = v78;
        uint64_t v184 = v133;
        char v185 = v132;
        char v186 = v131;
        uint64_t v187 = v24;
        char v188 = v23;
        uint64_t v125 = v77;
        *(void *)&long long v196 = v77;
        *((void *)&v196 + 1) = v16;
        uint64_t v197 = v135;
        uint64_t v198 = 0;
        char v199 = 3;
        *(double *)&long long v200 = v15;
        *((void *)&v200 + 1) = v14;
        uint64_t v201 = v130;
        uint64_t v202 = 0;
        char v203 = 3;
        uint64_t v181 = v13;
        char v182 = v136;
        uint64_t v179 = v129;
        char v180 = v134;
        char v29 = specialized static GradientLayer.updateAsync(layer:oldSize:newSize:oldFunction:newFunction:oldGradient:newGradient:oldBounds:newBounds:)(&v183, &v196, &v200, (uint64_t)&v181, (uint64_t)&v179, v20, a7, v19, v21, a4[10], a4[11], a4[12], a4[13], *(CGFloat *)(a5 + 80), *(CGFloat *)(a5 + 88), *(CGFloat *)(a5 + 96), *(CGFloat *)(a5 + 104));
        outlined consume of PaintType(v178, v174, v125, v16, v176, v177, 4u);
        outlined consume of PaintType(v167, v173, *(uint64_t *)&v15, v14, v9, v175, 4u);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v29 & 1;
      }
      Swift::Bool v128 = v70;
      outlined retain of ShapeLayerHelper((uint64_t)v189);
      id v121 = objc_msgSend(v74, sel_sublayers);
      double v19 = a8;
      double v21 = a9;
      double v20 = a6;
      if (!v121)
      {
LABEL_68:
        __break(1u);
        JUMPOUT(0x245BDEF8CLL);
      }
      uint64_t v122 = v121;
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
      uint64_t v123 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v9 = v137;
      if ((v123 & 0xC000000000000001) != 0)
      {
        uint64_t v124 = (objc_class *)MEMORY[0x24C523D60](0, v123);
        goto LABEL_52;
      }
      if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v124 = (objc_class *)*(id *)(v123 + 32);
LABEL_52:
        uint64_t v78 = v124;
        swift_bridgeObjectRelease();
        outlined release of ShapeLayerHelper((uint64_t)v189);

        goto LABEL_53;
      }
LABEL_63:
      __break(1u);
LABEL_64:
      swift_once();
LABEL_14:
      double v28 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v24, *(float *)&v21, *(float *)&v19, *(float *)&v20);
      v206.super.Class isa = *(Class *)v23;
      char v29 = 1;
      v30._uint64_t countAndFlagsBits = 0x756F72676B636162;
      v30._object = (void *)0xEF726F6C6F43646ELL;
      *(void *)&v206._attr.refcount = 1;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v28, v30, v206, v31);

      outlined consume of PaintType(v178, v174, v9, *(uint64_t *)&v15, v176, v177, 0);
      outlined consume of PaintType(v13, v173, v172, v14, v16, v175, 0);
      return v29 & 1;
    case 5u:
      goto LABEL_28;
    default:
      if (*(unsigned char *)(a3 + 48)) {
        goto LABEL_28;
      }
      LODWORD(v21) = HIDWORD(*(void *)a3);
      LODWORD(v24) = *(void *)a3;
      LODWORD(v20) = HIDWORD(*(void *)(a3 + 8));
      LODWORD(v19) = *(void *)(a3 + 8);
      if (*(float *)&v13 == *(float *)&v178
        && *((float *)&v13 + 1) == *((float *)&v178 + 1)
        && *(float *)&v12 == *(float *)&v174
        && *((float *)&v12 + 1) == *((float *)&v174 + 1))
      {
        uint64_t v126 = *(void *)(a3 + 8);
        outlined consume of PaintType(v178, v174, v9, v10, v176, v177, 0);
        outlined consume of PaintType(v13, v126, *(uint64_t *)&v15, v14, v16, v175, 0);
        char v29 = 1;
        return v29 & 1;
      }
      uint64_t v172 = *(void *)(a3 + 16);
      uint64_t v173 = *(void *)(a3 + 8);
      double v15 = *(double *)(a2 + 24);
      if (one-time initialization token for cache != -1) {
        goto LABEL_64;
      }
      goto LABEL_14;
  }
}

void updateShadow(platform:layer:shadow:paintOpacity:path:offset:)(uint64_t *a1, id a2, uint64_t *a3, uint64_t a4, float a5, double a6, double a7)
{
  uint64_t v8 = *a1;
  char v9 = *((unsigned char *)a3 + 45);
  if (v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    long long v14 = 0uLL;
  }
  else
  {
    unint64_t v13 = *((unsigned int *)a3 + 10) | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32);
    uint64_t v16 = a3[1];
    uint64_t v25 = a3[4];
    uint64_t v26 = *a1;
    long long v24 = *((_OWORD *)a3 + 1);
    uint64_t v23 = *a3;
    if (a6 == 0.0 && a7 == 0.0)
    {
      uint64_t v17 = *(void *)a4;
      uint64_t v18 = *(void *)(a4 + 8);
      uint64_t v19 = *(void *)(a4 + 16);
      uint64_t v20 = *(void *)(a4 + 24);
      unsigned __int8 v21 = *(unsigned char *)(a4 + 32);
      outlined init with take of Path.Storage(a4, (uint64_t)&v41);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v41, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    }
    else
    {
      CGAffineTransformMakeTranslation(&v41, -a6, -a7);
      Path.applying(_:)(&v41.a, (uint64_t)v34);
      uint64_t v17 = v34[0];
      uint64_t v18 = v34[1];
      uint64_t v19 = v34[2];
      uint64_t v20 = v34[3];
      unsigned __int8 v21 = v35;
    }
    uint64_t v36 = v17;
    uint64_t v37 = v18;
    uint64_t v38 = v19;
    uint64_t v39 = v20;
    unsigned __int8 v40 = v21;
    CGPathRef v22 = Path.cgPath.getter();
    objc_msgSend(a2, sel_setShadowPath_, v22);
    outlined consume of Path.Storage(v17, v18, v19, v20, v21);

    unint64_t v11 = v16 | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v16 + 1) * a5) << 32);
    uint64_t v12 = v25;
    uint64_t v8 = v26;
    long long v14 = v24;
    uint64_t v10 = v23;
  }
  uint64_t v33 = v8;
  v27[0] = v10;
  v27[1] = v11;
  long long v28 = v14;
  uint64_t v29 = v12;
  char v31 = BYTE4(v13);
  int v30 = v13;
  char v32 = v9;
  DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)v27, a2);
}

void updateShadow(platform:gradientLayer:shadow:opaque:)(uint64_t *a1, id a2, long long *a3, char a4)
{
  uint64_t v5 = *a1;
  long long v6 = *a3;
  long long v7 = a3[1];
  uint64_t v8 = *((void *)a3 + 4);
  uint64_t v9 = *((unsigned __int8 *)a3 + 44);
  uint64_t v10 = *((unsigned int *)a3 + 10);
  char v11 = *((unsigned char *)a3 + 45);
  if (v11) {
    goto LABEL_7;
  }
  long long v19 = a3[1];
  long long v20 = *a3;
  id v13 = objc_msgSend(a2, sel_sublayers);
  if (v13)
  {
    long long v14 = v13;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v15 & 0xC000000000000001) != 0)
    {
      id v16 = (id)MEMORY[0x24C523D60](0, v15);
      goto LABEL_6;
    }
    if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v16 = *(id *)(v15 + 32);
LABEL_6:
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      objc_msgSend(a2, sel_setShadowPathIsBounds_, a4 & 1);
      objc_msgSend(v17, sel_cornerRadius);
      objc_msgSend(a2, sel_setCornerRadius_);
      id v18 = objc_msgSend(v17, sel_cornerCurve);
      objc_msgSend(a2, sel_setCornerCurve_, v18);

      long long v7 = v19;
      long long v6 = v20;
LABEL_7:
      uint64_t v26 = v5;
      v21[0] = v6;
      v21[1] = v7;
      uint64_t v22 = v8;
      char v24 = (v10 | (unint64_t)(v9 << 32)) >> 32;
      int v23 = v10;
      char v25 = v11;
      DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)v21, a2);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

BOOL PaintType.isOpaque.getter()
{
  uint64_t v1 = *(void *)v0;
  BOOL result = 0;
  switch(*((unsigned char *)v0 + 48))
  {
    case 1:
      uint64_t v3 = *(void *)(v1 + 16);
      if (!v3) {
        return 0;
      }
      uint64_t v4 = (float *)(v1 + 44);
      uint64_t v5 = 1;
      LOBYTE(result) = 1;
      do
      {
        if (result)
        {
          BOOL result = *v4 == 1.0;
          if (v3 == v5) {
            return result;
          }
        }
        else
        {
          BOOL result = 0;
          if (v3 == v5) {
            return result;
          }
        }
        v4 += 12;
        BOOL v6 = __OFADD__(v5++, 1);
      }
      while (!v6);
      __break(1u);
      goto LABEL_33;
    case 2:
      uint64_t v7 = *(void *)(v1 + 16);
      if (!v7) {
        return 0;
      }
      uint64_t v8 = (float *)(v1 + 44);
      uint64_t v9 = 1;
      LOBYTE(result) = 1;
      do
      {
        if (result)
        {
          BOOL result = *v8 == 1.0;
          if (v7 == v9) {
            return result;
          }
        }
        else
        {
          BOOL result = 0;
          if (v7 == v9) {
            return result;
          }
        }
        v8 += 12;
        BOOL v6 = __OFADD__(v9++, 1);
      }
      while (!v6);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    case 3:
      uint64_t v10 = *(void *)(v1 + 16);
      if (!v10) {
        return 0;
      }
      char v11 = (float *)(v1 + 44);
      uint64_t v12 = 1;
      LOBYTE(result) = 1;
      do
      {
        if (result)
        {
          BOOL result = *v11 == 1.0;
          if (v10 == v12) {
            return result;
          }
        }
        else
        {
          BOOL result = 0;
          if (v10 == v12) {
            return result;
          }
        }
        v11 += 12;
        BOOL v6 = __OFADD__(v12++, 1);
      }
      while (!v6);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    case 4:
      uint64_t v13 = *(void *)(v1 + 16);
      if (v13)
      {
        long long v14 = (float *)(v1 + 44);
        uint64_t v15 = 1;
        LOBYTE(result) = 1;
        while (1)
        {
          if (result)
          {
            BOOL result = *v14 == 1.0;
            if (v13 == v15) {
              return result;
            }
          }
          else
          {
            BOOL result = 0;
            if (v13 == v15) {
              return result;
            }
          }
          v14 += 12;
          BOOL v6 = __OFADD__(v15++, 1);
          if (v6)
          {
LABEL_35:
            __break(1u);
            JUMPOUT(0x245BDF4D8);
          }
        }
      }
      return 0;
    case 5:
      return result;
    default:
      return v0[3] == 1.0;
  }
}

uint64_t ShapeLayerAsyncShadowHelper.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v199 = a1;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v169 - v8;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v198 = (char *)&v169 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v169 - v14;
  uint64_t v200 = a3;
  AnyResolvedPaint.as<A>(type:)(a2, a3, (uint64_t)v9);
  id v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v201 = a2;
  if (v16(v9, 1, a2) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  id v18 = v15;
  uint64_t v19 = v201;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v9, v201);
  uint64_t v20 = *(void *)(v3 + 8);
  long long v21 = *(_OWORD *)(v20 + 16);
  long long v22 = *(_OWORD *)(v20 + 32);
  uint64_t v172 = v20;
  char v231 = *(unsigned char *)(v20 + 48);
  v230[0] = v21;
  v230[1] = v22;
  outlined init with take of Path.Storage((uint64_t)v230, (uint64_t)v232);
  uint64_t v23 = v10;
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v232, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v230, (uint64_t)&v208);
  uint64_t v190 = *((void *)&v208 + 1);
  uint64_t v191 = v208;
  uint64_t v188 = *((void *)&v209 + 1);
  uint64_t v189 = v209;
  uint64_t v186 = v211;
  uint64_t v187 = v210;
  uint64_t v184 = v213;
  uint64_t v185 = v212;
  uint64_t v182 = v215;
  uint64_t v183 = v214;
  int v181 = v216;
  uint64_t v171 = v3;
  uint64_t v24 = *(void *)(v3 + 16);
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v26 = *(_OWORD *)(v24 + 32);
  char v229 = *(unsigned char *)(v24 + 48);
  v228[0] = v25;
  v228[1] = v26;
  outlined init with take of Path.Storage((uint64_t)v228, (uint64_t)v233);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v233, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v228, (uint64_t)&v208);
  long long v193 = v208;
  long long v194 = v209;
  uint64_t v195 = v210;
  uint64_t v196 = v211;
  uint64_t v27 = v213;
  uint64_t v197 = v212;
  uint64_t v192 = v214;
  uint64_t v180 = v215;
  int v28 = v216;
  uint64_t v177 = v23;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v30 = (uint64_t)v198;
  v29(v198, v199, v19);
  PaintType.init<A>(_:)(v30, v19, (uint64_t)&v208);
  uint64_t v178 = v18;
  uint64_t v173 = *((void *)&v208 + 1);
  uint64_t v179 = v208;
  long long v174 = v209;
  uint64_t v175 = v210;
  uint64_t v176 = v211;
  uint64_t v199 = v212;
  v29((char *)v30, (uint64_t)v18, v19);
  PaintType.init<A>(_:)(v30, v19, (uint64_t)&v208);
  int v31 = v28;
  uint64_t v33 = v182;
  uint64_t v32 = v183;
  uint64_t v34 = v190;
  uint64_t v35 = v191;
  uint64_t v37 = v188;
  uint64_t v36 = v189;
  uint64_t v39 = v186;
  unsigned __int8 v38 = v187;
  uint64_t v41 = v184;
  uint64_t v40 = v185;
  long long v42 = v208;
  uint64_t v43 = *((void *)&v209 + 1);
  uint64_t v44 = v209;
  uint64_t v46 = v210;
  uint64_t v45 = v211;
  int v47 = v212;
  v217[0] = v191;
  v217[1] = v190;
  v217[2] = v189;
  v217[3] = v188;
  v217[4] = v187;
  v217[5] = v186;
  v217[6] = v185;
  v217[7] = v184;
  v217[8] = v183;
  v217[9] = v182;
  char v218 = v181;
  uint64_t v48 = v192;
  long long v219 = v193;
  long long v220 = v194;
  uint64_t v221 = v195;
  uint64_t v49 = v180;
  uint64_t v222 = v196;
  uint64_t v223 = v197;
  uint64_t v200 = v27;
  uint64_t v224 = v27;
  uint64_t v225 = v192;
  uint64_t v226 = v180;
  char v227 = v31;
  if (v181)
  {
    long long v50 = v208;
    if (v181 == 3 && !(v190 | v191 | v189 | v188 | v187 | v186 | v185 | v184 | v183 | v182))
    {
      int v62 = v31;
      (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v201);
      outlined consume of PaintType(v179, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, v199);
      outlined consume of PaintType(v50, *((uint64_t *)&v50 + 1), v44, v43, v46, v45, v47);
      if (v62 == 3
        && !(*((void *)&v193 + 1) | (unint64_t)v193 | (unint64_t)v194 | *((void *)&v194 + 1) | v195 | v196 | v197 | v200 | v192 | v49))
      {
        uint64_t result = outlined release of (ShapeType, ShapeType)((uint64_t)v217);
        uint64_t v64 = v171;
        goto LABEL_111;
      }
      return outlined release of (ShapeType, ShapeType)((uint64_t)v217);
    }
    outlined consume of PaintType(v179, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, v199);
    uint64_t v52 = *((void *)&v50 + 1);
    uint64_t v51 = v50;
LABEL_59:
    outlined consume of PaintType(v51, v52, v44, v43, v46, v45, v47);
    outlined release of (ShapeType, ShapeType)((uint64_t)v217);
    return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v178, v201);
  }
  if (v31)
  {
    uint64_t v53 = v208;
    uint64_t v54 = v179;
    uint64_t v55 = *((void *)&v208 + 1);
    uint64_t v56 = v173;
    uint64_t v58 = *((void *)&v174 + 1);
    uint64_t v57 = v174;
    uint64_t v59 = v175;
    uint64_t v60 = v176;
    unsigned __int8 v61 = v199;
LABEL_58:
    outlined consume of PaintType(v54, v56, v57, v58, v59, v60, v61);
    uint64_t v51 = v53;
    uint64_t v52 = v55;
    goto LABEL_59;
  }
  LOBYTE(v63) = v199;
  switch(v199)
  {
    case 1:
      if (v212 != 1) {
        goto LABEL_57;
      }
      uint64_t v199 = v209;
      uint64_t v44 = v179;
      uint64_t v78 = *(void *)(v179 + 16);
      if (!v78)
      {
        int v63 = 0;
        id v81 = v178;
        uint64_t v82 = v24;
LABEL_62:
        uint64_t v96 = *(void *)(v208 + 16);
        uint64_t v198 = (char *)v211;
        uint64_t v169 = *((void *)&v209 + 1);
        uint64_t v170 = v210;
        if (v96)
        {
          uint64_t v97 = (float *)(v208 + 44);
          uint64_t v98 = 1;
          BOOL v99 = 1;
          while (1)
          {
            if (v99)
            {
              BOOL v99 = *v97 == 1.0;
              if (v96 == v98)
              {
                uint64_t v100 = *((void *)&v208 + 1);
                uint64_t v101 = v208;
                if (((v63 ^ (*v97 == 1.0)) & 1) == 0) {
                  goto LABEL_103;
                }
                goto LABEL_70;
              }
            }
            else
            {
              if (v96 == v98) {
                break;
              }
              BOOL v99 = 0;
            }
            v97 += 12;
            BOOL v83 = __OFADD__(v98++, 1);
            if (v83)
            {
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
              JUMPOUT(0x245BE04F0);
            }
          }
        }
        uint64_t v100 = *((void *)&v208 + 1);
        uint64_t v101 = v208;
        if ((v63 & 1) == 0)
        {
LABEL_103:
          uint64_t v127 = *(void *)(v172 + 104);
          int v128 = *(_DWORD *)(v172 + 112);
          unsigned __int8 v129 = *(unsigned char *)(v172 + 116);
          long long v130 = *(_OWORD *)(v172 + 88);
          long long v208 = *(_OWORD *)(v172 + 72);
          long long v209 = v130;
          uint64_t v210 = v127;
          WORD2(v211) = v129;
          LODWORD(v211) = v128;
          uint64_t v131 = *(void *)(v82 + 104);
          int v132 = *(_DWORD *)(v82 + 112);
          char v133 = *(unsigned char *)(v82 + 116);
          long long v134 = *(_OWORD *)(v82 + 88);
          long long v202 = *(_OWORD *)(v82 + 72);
          long long v203 = v134;
          uint64_t v204 = v131;
          char v206 = v133;
          int v205 = v132;
          char v207 = 0;
          uint64_t v135 = v183;
          uint64_t v136 = v182;
          char v137 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v208, (double *)&v202);
          outlined consume of PaintType(v44, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, 1u);
          uint64_t v138 = v101;
          uint64_t v139 = v100;
          uint64_t v141 = (uint64_t)v198;
          uint64_t v140 = v199;
          uint64_t v142 = v169;
          uint64_t v143 = v170;
          unsigned __int8 v144 = 1;
          goto LABEL_110;
        }
LABEL_70:
        outlined consume of ShapeType(v191, v190, v189, v188, v187, v186, v185, v184, v183, v182, 0);
        outlined consume of ShapeType(v193, *((uint64_t *)&v193 + 1), v194, *((uint64_t *)&v194 + 1), v195, v196, v197, v200, v48, v49, 0);
        outlined consume of PaintType(v44, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, 1u);
        uint64_t v102 = v101;
        uint64_t v103 = v100;
        uint64_t v105 = (uint64_t)v198;
        uint64_t v104 = v199;
        uint64_t v106 = v169;
        uint64_t v107 = v170;
        unsigned __int8 v108 = 1;
LABEL_101:
        outlined consume of PaintType(v102, v103, v104, v106, v107, v105, v108);
        outlined release of (ShapeType, ShapeType)((uint64_t)v217);
        return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v81, v201);
      }
      uint64_t v79 = (float *)(v179 + 44);
      uint64_t v80 = 1;
      LOBYTE(v63) = 1;
      id v81 = v178;
      uint64_t v82 = v24;
      do
      {
        int v63 = (v63 & 1) != 0 && *v79 == 1.0;
        if (v78 == v80) {
          goto LABEL_62;
        }
        v79 += 12;
        BOOL v83 = __OFADD__(v80++, 1);
      }
      while (!v83);
      __break(1u);
LABEL_27:
      if (v47 != 2) {
        goto LABEL_57;
      }
      uint64_t v199 = v44;
      uint64_t v44 = v179;
      uint64_t v84 = *(void *)(v179 + 16);
      if (!v84)
      {
        int v63 = 0;
        id v81 = v178;
        uint64_t v87 = v24;
LABEL_72:
        uint64_t v109 = *(void *)(v42 + 16);
        uint64_t v198 = (char *)v45;
        uint64_t v169 = v43;
        uint64_t v170 = v46;
        if (v109)
        {
          id v110 = (float *)(v42 + 44);
          uint64_t v111 = 1;
          BOOL v112 = 1;
          while (1)
          {
            if (v112)
            {
              BOOL v112 = *v110 == 1.0;
              if (v109 == v111)
              {
                uint64_t v113 = *((void *)&v42 + 1);
                uint64_t v114 = v42;
                if (((v63 ^ (*v110 == 1.0)) & 1) == 0) {
                  goto LABEL_105;
                }
                goto LABEL_80;
              }
            }
            else
            {
              if (v109 == v111) {
                break;
              }
              BOOL v112 = 0;
            }
            v110 += 12;
            BOOL v83 = __OFADD__(v111++, 1);
            if (v83) {
              goto LABEL_113;
            }
          }
        }
        uint64_t v113 = *((void *)&v42 + 1);
        uint64_t v114 = v42;
        if ((v63 & 1) == 0)
        {
LABEL_105:
          uint64_t v145 = *(void *)(v172 + 104);
          int v146 = *(_DWORD *)(v172 + 112);
          unsigned __int8 v147 = *(unsigned char *)(v172 + 116);
          long long v148 = *(_OWORD *)(v172 + 88);
          long long v208 = *(_OWORD *)(v172 + 72);
          long long v209 = v148;
          uint64_t v210 = v145;
          WORD2(v211) = v147;
          LODWORD(v211) = v146;
          uint64_t v149 = *(void *)(v87 + 104);
          int v150 = *(_DWORD *)(v87 + 112);
          char v151 = *(unsigned char *)(v87 + 116);
          long long v152 = *(_OWORD *)(v87 + 88);
          long long v202 = *(_OWORD *)(v87 + 72);
          long long v203 = v152;
          uint64_t v204 = v149;
          char v206 = v151;
          int v205 = v150;
          char v207 = 0;
          uint64_t v135 = v32;
          uint64_t v136 = v33;
          char v137 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v208, (double *)&v202);
          outlined consume of PaintType(v44, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, 2u);
          uint64_t v138 = v114;
          uint64_t v139 = v113;
          uint64_t v141 = (uint64_t)v198;
          uint64_t v140 = v199;
          uint64_t v142 = v169;
          uint64_t v143 = v170;
          unsigned __int8 v144 = 2;
          goto LABEL_110;
        }
LABEL_80:
        outlined consume of ShapeType(v35, v34, v36, v37, v38, v39, v40, v41, v32, v33, 0);
        outlined consume of ShapeType(v193, *((uint64_t *)&v193 + 1), v194, *((uint64_t *)&v194 + 1), v195, v196, v197, v200, v48, v49, 0);
        outlined consume of PaintType(v44, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, 2u);
        uint64_t v102 = v114;
        uint64_t v103 = v113;
        uint64_t v105 = (uint64_t)v198;
        uint64_t v104 = v199;
        uint64_t v106 = v169;
        uint64_t v107 = v170;
        unsigned __int8 v108 = 2;
        goto LABEL_101;
      }
      CGFloat v85 = (float *)(v179 + 44);
      uint64_t v86 = 1;
      LOBYTE(v63) = 1;
      id v81 = v178;
      uint64_t v87 = v24;
      do
      {
        int v63 = (v63 & 1) != 0 && *v85 == 1.0;
        if (v84 == v86) {
          goto LABEL_72;
        }
        v85 += 12;
        BOOL v83 = __OFADD__(v86++, 1);
      }
      while (!v83);
      __break(1u);
LABEL_37:
      if (v47 != 3) {
        goto LABEL_57;
      }
      uint64_t v199 = v44;
      uint64_t v44 = v179;
      uint64_t v88 = *(void *)(v179 + 16);
      if (!v88)
      {
        int v63 = 0;
        id v81 = v178;
        uint64_t v91 = v24;
LABEL_82:
        uint64_t v115 = *(void *)(v42 + 16);
        uint64_t v198 = (char *)v45;
        uint64_t v169 = v43;
        uint64_t v170 = v46;
        if (v115)
        {
          CGFloat v116 = (float *)(v42 + 44);
          uint64_t v117 = 1;
          BOOL v118 = 1;
          while (1)
          {
            if (v118)
            {
              BOOL v118 = *v116 == 1.0;
              if (v115 == v117)
              {
                uint64_t v119 = *((void *)&v42 + 1);
                uint64_t v120 = v42;
                if (((v63 ^ (*v116 == 1.0)) & 1) == 0) {
                  goto LABEL_107;
                }
                goto LABEL_90;
              }
            }
            else
            {
              if (v115 == v117) {
                break;
              }
              BOOL v118 = 0;
            }
            v116 += 12;
            BOOL v83 = __OFADD__(v117++, 1);
            if (v83) {
              goto LABEL_114;
            }
          }
        }
        uint64_t v119 = *((void *)&v42 + 1);
        uint64_t v120 = v42;
        if ((v63 & 1) == 0)
        {
LABEL_107:
          uint64_t v153 = *(void *)(v172 + 104);
          int v154 = *(_DWORD *)(v172 + 112);
          unsigned __int8 v155 = *(unsigned char *)(v172 + 116);
          long long v156 = *(_OWORD *)(v172 + 88);
          long long v208 = *(_OWORD *)(v172 + 72);
          long long v209 = v156;
          uint64_t v210 = v153;
          WORD2(v211) = v155;
          LODWORD(v211) = v154;
          uint64_t v157 = *(void *)(v91 + 104);
          int v158 = *(_DWORD *)(v91 + 112);
          char v159 = *(unsigned char *)(v91 + 116);
          long long v160 = *(_OWORD *)(v91 + 88);
          long long v202 = *(_OWORD *)(v91 + 72);
          long long v203 = v160;
          uint64_t v204 = v157;
          char v206 = v159;
          int v205 = v158;
          char v207 = 0;
          uint64_t v135 = v32;
          uint64_t v136 = v33;
          char v137 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v208, (double *)&v202);
          outlined consume of PaintType(v44, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, 3u);
          uint64_t v138 = v120;
          uint64_t v139 = v119;
          uint64_t v141 = (uint64_t)v198;
          uint64_t v140 = v199;
          uint64_t v142 = v169;
          uint64_t v143 = v170;
          unsigned __int8 v144 = 3;
          goto LABEL_110;
        }
LABEL_90:
        outlined consume of ShapeType(v35, v34, v36, v37, v38, v39, v40, v41, v32, v33, 0);
        outlined consume of ShapeType(v193, *((uint64_t *)&v193 + 1), v194, *((uint64_t *)&v194 + 1), v195, v196, v197, v200, v48, v49, 0);
        outlined consume of PaintType(v44, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, 3u);
        uint64_t v102 = v120;
        uint64_t v103 = v119;
        uint64_t v105 = (uint64_t)v198;
        uint64_t v104 = v199;
        uint64_t v106 = v169;
        uint64_t v107 = v170;
        unsigned __int8 v108 = 3;
        goto LABEL_101;
      }
      CGFloat v89 = (float *)(v179 + 44);
      uint64_t v90 = 1;
      LOBYTE(v63) = 1;
      id v81 = v178;
      uint64_t v91 = v24;
      do
      {
        int v63 = (v63 & 1) != 0 && *v89 == 1.0;
        if (v88 == v90) {
          goto LABEL_82;
        }
        v89 += 12;
        BOOL v83 = __OFADD__(v90++, 1);
      }
      while (!v83);
      __break(1u);
LABEL_47:
      if (v47 != 4) {
        goto LABEL_57;
      }
      uint64_t v199 = v44;
      uint64_t v44 = v179;
      uint64_t v92 = *(void *)(v179 + 16);
      if (v92)
      {
        uint64_t v93 = (float *)(v179 + 44);
        uint64_t v94 = 1;
        LOBYTE(v63) = 1;
        id v81 = v178;
        uint64_t v95 = v24;
        do
        {
          int v63 = (v63 & 1) != 0 && *v93 == 1.0;
          if (v92 == v94) {
            goto LABEL_92;
          }
          v93 += 12;
          BOOL v83 = __OFADD__(v94++, 1);
        }
        while (!v83);
        __break(1u);
LABEL_57:
        uint64_t v53 = v42;
        uint64_t v54 = v179;
        uint64_t v55 = *((void *)&v42 + 1);
        uint64_t v56 = v173;
        uint64_t v58 = *((void *)&v174 + 1);
        uint64_t v57 = v174;
        uint64_t v59 = v175;
        uint64_t v60 = v176;
        unsigned __int8 v61 = v63;
        goto LABEL_58;
      }
      int v63 = 0;
      id v81 = v178;
      uint64_t v95 = v24;
LABEL_92:
      uint64_t v121 = *(void *)(v42 + 16);
      uint64_t v198 = (char *)v45;
      uint64_t v169 = v43;
      uint64_t v170 = v46;
      if (!v121)
      {
LABEL_99:
        uint64_t v125 = *((void *)&v42 + 1);
        uint64_t v126 = v42;
        if ((v63 & 1) == 0) {
          goto LABEL_109;
        }
LABEL_100:
        outlined consume of ShapeType(v35, v34, v36, v37, v38, v39, v40, v41, v32, v33, 0);
        outlined consume of ShapeType(v193, *((uint64_t *)&v193 + 1), v194, *((uint64_t *)&v194 + 1), v195, v196, v197, v200, v48, v49, 0);
        outlined consume of PaintType(v44, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, 4u);
        uint64_t v102 = v126;
        uint64_t v103 = v125;
        uint64_t v105 = (uint64_t)v198;
        uint64_t v104 = v199;
        uint64_t v106 = v169;
        uint64_t v107 = v170;
        unsigned __int8 v108 = 4;
        goto LABEL_101;
      }
      uint64_t v122 = (float *)(v42 + 44);
      uint64_t v123 = 1;
      BOOL v124 = 1;
      while (!v124)
      {
        if (v121 == v123) {
          goto LABEL_99;
        }
        BOOL v124 = 0;
LABEL_95:
        v122 += 12;
        BOOL v83 = __OFADD__(v123++, 1);
        if (v83) {
          goto LABEL_115;
        }
      }
      BOOL v124 = *v122 == 1.0;
      if (v121 != v123) {
        goto LABEL_95;
      }
      uint64_t v125 = *((void *)&v42 + 1);
      uint64_t v126 = v42;
      if ((v63 ^ (*v122 == 1.0))) {
        goto LABEL_100;
      }
LABEL_109:
      uint64_t v161 = *(void *)(v172 + 104);
      int v162 = *(_DWORD *)(v172 + 112);
      unsigned __int8 v163 = *(unsigned char *)(v172 + 116);
      long long v164 = *(_OWORD *)(v172 + 88);
      long long v208 = *(_OWORD *)(v172 + 72);
      long long v209 = v164;
      uint64_t v210 = v161;
      WORD2(v211) = v163;
      LODWORD(v211) = v162;
      uint64_t v165 = *(void *)(v95 + 104);
      int v166 = *(_DWORD *)(v95 + 112);
      char v167 = *(unsigned char *)(v95 + 116);
      long long v168 = *(_OWORD *)(v95 + 88);
      long long v202 = *(_OWORD *)(v95 + 72);
      long long v203 = v168;
      uint64_t v204 = v165;
      char v206 = v167;
      int v205 = v166;
      char v207 = 0;
      uint64_t v135 = v32;
      uint64_t v136 = v33;
      char v137 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v208, (double *)&v202);
      outlined consume of PaintType(v44, v173, v174, *((uint64_t *)&v174 + 1), v175, v176, 4u);
      uint64_t v138 = v126;
      uint64_t v139 = v125;
      uint64_t v141 = (uint64_t)v198;
      uint64_t v140 = v199;
      uint64_t v142 = v169;
      uint64_t v143 = v170;
      unsigned __int8 v144 = 4;
LABEL_110:
      outlined consume of PaintType(v138, v139, v140, v142, v143, v141, v144);
      outlined release of (ShapeType, ShapeType)((uint64_t)v217);
      outlined consume of ShapeType(v193, *((uint64_t *)&v193 + 1), v194, *((uint64_t *)&v194 + 1), v195, v196, v197, v200, v48, v49, 0);
      outlined consume of ShapeType(v191, v190, v189, v188, v187, v186, v185, v184, v135, v136, 0);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v81, v201);
      uint64_t v64 = v171;
      if (v137) {
LABEL_111:
      }
        *(unsigned char *)(v64 + 32) = 1;
      return result;
    case 2:
      goto LABEL_27;
    case 3:
      goto LABEL_37;
    case 4:
      goto LABEL_47;
    case 5:
      goto LABEL_57;
    default:
      if ((_BYTE)v212) {
        goto LABEL_57;
      }
      uint64_t v199 = v209;
      uint64_t v64 = v171;
      uint64_t v65 = v173;
      int v66 = *(_DWORD *)(v172 + 80);
      float v67 = *(float *)(v172 + 84);
      uint64_t v68 = *(void *)(v172 + 104);
      int v69 = *(_DWORD *)(v172 + 112);
      unsigned __int8 v70 = *(unsigned char *)(v172 + 116);
      uint64_t v71 = *(void *)(v24 + 72);
      int v72 = *(_DWORD *)(v24 + 80);
      float v73 = *(float *)(v24 + 84);
      uint64_t v74 = *(void *)(v24 + 104);
      int v75 = *(_DWORD *)(v24 + 112);
      char v76 = *(unsigned char *)(v24 + 116);
      *(void *)&long long v208 = *(void *)(v172 + 72);
      DWORD2(v208) = v66;
      *((float *)&v208 + 3) = v67 * *((float *)&v173 + 1);
      long long v209 = *(_OWORD *)(v172 + 88);
      uint64_t v210 = v68;
      WORD2(v211) = v70;
      LODWORD(v211) = v69;
      *(void *)&long long v202 = v71;
      DWORD2(v202) = v72;
      *((float *)&v202 + 3) = v73 * *((float *)&v42 + 3);
      long long v203 = *(_OWORD *)(v24 + 88);
      uint64_t v204 = v74;
      char v206 = v76;
      int v205 = v75;
      char v207 = 0;
      char v77 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v208, (double *)&v202);
      outlined consume of PaintType(v179, v65, v174, *((uint64_t *)&v174 + 1), v175, v176, 0);
      outlined consume of PaintType(v42, *((uint64_t *)&v42 + 1), v199, v43, v46, v45, 0);
      outlined release of (ShapeType, ShapeType)((uint64_t)v217);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v178, v201);
      if (v77) {
        goto LABEL_111;
      }
      return result;
  }
}

uint64_t DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)(uint64_t a1, double *a2)
{
  uint64_t v3 = *((unsigned __int8 *)a2 + 45);
  if ((*(unsigned char *)(a1 + 45) & 1) == 0)
  {
    if ((v3 & 1) != 0 || *(unsigned __int8 *)(a1 + 44) != *((unsigned __int8 *)a2 + 44))
    {
      return 0;
    }
    else
    {
      double v4 = *a2;
      uint64_t v5 = *((void *)a2 + 1);
      double v6 = a2[2];
      double v7 = a2[3];
      double v8 = a2[4];
      double v9 = *(double *)(a1 + 16);
      float v11 = *(float *)a1;
      float v10 = *(float *)(a1 + 4);
      unint64_t v12 = HIDWORD(*(void *)a2);
      float v14 = *(float *)(a1 + 8);
      float v13 = *(float *)(a1 + 12);
      if (v7 != *(double *)(a1 + 24) || v8 != *(double *)(a1 + 32))
      {
        float v15 = *(float *)(a1 + 4);
        id v16 = objc_msgSend(self, sel_valueWithSize_, v7, v8);
        v29.super.Class isa = *v2;
        v17._uint64_t countAndFlagsBits = 0x664F776F64616873;
        v17._object = (void *)0xEC00000074657366;
        *(void *)&v29._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v16, v17, v29, v18);

        float v10 = v15;
      }
      if (v6 != v9)
      {
        float v19 = v10;
        id v20 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v6);
        v30.super.Class isa = *v2;
        v21._uint64_t countAndFlagsBits = 0x6152776F64616873;
        v21._object = (void *)0xEC00000073756964;
        *(void *)&v30._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v20, v21, v30, v22);

        float v10 = v19;
      }
      if (*(float *)&v4 == v11
        && (*(float *)&v12 == v10 ? (BOOL v23 = *(float *)&v5 == v14) : (BOOL v23 = 0),
            v23 ? (BOOL v24 = *((float *)&v5 + 1) == v13) : (BOOL v24 = 0),
            v24))
      {
        return 1;
      }
      else
      {
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        long long v26 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v4, *(float *)&v12, *(float *)&v5, *((float *)&v5 + 1));
        v31.super.Class isa = *v2;
        uint64_t v3 = 1;
        v27._uint64_t countAndFlagsBits = 0x6F43776F64616873;
        v27._object = (void *)0xEB00000000726F6CLL;
        *(void *)&v31._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v26, v27, v31, v28);
      }
    }
  }
  return v3;
}

id PaintShapeLayer.init(layer:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  double v4 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path];
  *(_OWORD *)double v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 6;
  uint64_t v5 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paint] = 0;
  double v6 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds];
  *(_OWORD *)double v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *(_WORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_fillStyle] = 256;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
  v10.receiver = v1;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, sel_initWithLayer_, v7);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

uint64_t PaintShapeLayer.draw(in:)(CGContext *a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = one-time initialization token for shared;
  id v4 = v1;
  if (v3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  double v6 = static CoreGlue2.shared;
  v5(&v9);

  v8[0] = v9;
  v8[1] = v10;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, v8, 0, 1, (uint64_t)v4);

  swift_release();
  return swift_release();
}

void closure #1 in PaintShapeLayer.draw(in:)(uint64_t *a1, uint64_t a2)
{
  id v4 = (double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin);
  GraphicsContext.translateBy(x:y:)(-*(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin), -*(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_origin + 8));
  uint64_t v5 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paint);
  if (v5)
  {
    long long v6 = *(_OWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 16);
    v19[0] = *(_OWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path);
    v19[1] = v6;
    char v20 = *(unsigned char *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_path + 32);
    uint64_t v7 = 256;
    if (!*(unsigned char *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_fillStyle + 1)) {
      uint64_t v7 = 0;
    }
    uint64_t v15 = v7 | *(unsigned __int8 *)(a2
                                  + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_fillStyle);
    long long v16 = 0u;
    long long v17 = 0u;
    char v18 = 0;
    uint64_t v8 = *a1;
    CGFloat v9 = *(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds);
    CGFloat v10 = *(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds + 8);
    CGFloat v11 = *(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds + 16);
    CGFloat v12 = *(double *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_E19F490D25D5E0EC8A24903AF958E34115PaintShapeLayer_paintBounds + 24);
    CGFloat v13 = *v4;
    CGFloat v14 = v4[1];
    swift_retain();
    _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v23.origin.CGFloat x = v9;
    v23.origin.CGFloat y = v10;
    v23.size.CGFloat width = v11;
    v23.size.CGFloat height = v12;
    CGRect v21 = CGRectOffset(v23, v13, v14);
    char v22 = 0;
    (*(void (**)(_OWORD *, uint64_t *, uint64_t, CGRect *))(*(void *)v5 + 80))(v19, &v15, v8, &v21);
    _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v19, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

id UnclippedGradientLayer.init()()
{
  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  id v1 = objc_msgSendSuper2(&v9, sel_init);
  id v2 = objc_allocWithZone((Class)type metadata accessor for GradientLayer());
  id v3 = v1;
  id v4 = objc_msgSend(v2, sel_init);
  objc_msgSend(v4, sel_setAnchorPoint_, 0.0, 0.0);
  objc_msgSend(v4, sel_setNoAnimationDelegate);
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2461BE2A0;
  *(void *)(v5 + 32) = v4;
  specialized Array._endMutation()();
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
  id v6 = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setSublayers_, isa);

  return v3;
}

id @objc ColorShapeLayer.init(layer:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  uint64_t v3 = _bridgeAnythingToObjectiveC<A>(_:)();
  v6.receiver = a1;
  v6.super_class = ObjectType;
  id v4 = objc_msgSendSuper2(&v6, sel_initWithLayer_, v3);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v4;
}

uint64_t type metadata accessor for UnclippedGradientLayer()
{
  return self;
}

uint64_t specialized static ShapeLayerHelper.updateAsync(layer:old:new:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = 0;
  if (*(unsigned __int8 *)(a2 + 112) == a3[112] && ((*(unsigned __int8 *)(a2 + 113) ^ a3[113]) & 1) == 0)
  {
    if (*(unsigned __int8 *)(a2 + 128) == a3[128])
    {
      v6[0] = a1;
      v6[1] = a2;
      void v6[2] = a3;
      unsigned __int8 v7 = 0;
      uint64_t v5 = *(void (**)(void *, void *, _UNKNOWN **))(**(void **)(a2 + 72) + 136);
      swift_retain();
      v5(v6, &unk_26FA64E58, &protocol witness table for ShapeLayerAsyncHelper);
      swift_release();
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t initializeWithCopy for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  char v15 = *(unsigned char *)(a2 + 80);
  outlined copy of ShapeType(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v15;
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v24 = *(void *)(a2 + 64);
  uint64_t v25 = *(void *)(a2 + 72);
  char v26 = *(unsigned char *)(a2 + 80);
  outlined copy of ShapeType(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v24;
  *(void *)(a1 + 72) = v25;
  *(unsigned char *)(a1 + 80) = v26;
  outlined consume of ShapeType(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 80);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  char v15 = *(unsigned char *)(a1 + 80);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v4;
  outlined consume of ShapeType(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 88) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)()
{
  return &type metadata for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:);
}

uint64_t destroy for ShapeLayerHelper(uint64_t a1)
{
  outlined consume of Path.Storage(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));

  return swift_release();
}

uint64_t initializeWithCopy for ShapeLayerHelper(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)a1 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v7 = *((void *)a2 + 4);
  uint64_t v8 = *((void *)a2 + 5);
  unsigned __int8 v9 = *((unsigned char *)a2 + 48);
  id v10 = (id)v4;
  outlined copy of Path.Storage(v5, v6, v7, v8, v9);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  long long v11 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v11;
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShapeLayerHelper(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 48);
  outlined copy of Path.Storage(v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  unsigned __int8 v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v11;
  outlined consume of Path.Storage(v12, v13, v14, v15, v16);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy129_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ShapeLayerHelper(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  unsigned __int8 v10 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v4;
  outlined consume of Path.Storage(v5, v6, v7, v8, v10);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeLayerHelper(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 129)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeLayerHelper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 128) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 129) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 129) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeLayerHelper()
{
  return &type metadata for ShapeLayerHelper;
}

uint64_t destroy for ShapeLayerShadowHelper(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 48);

  return outlined consume of Path.Storage(v2, v3, v4, v5, v6);
}

uint64_t initializeWithCopy for ShapeLayerShadowHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  id v10 = v4;
  outlined copy of Path.Storage(v5, v6, v7, v8, v9);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 101) = *(_OWORD *)(a2 + 101);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  return a1;
}

uint64_t assignWithCopy for ShapeLayerShadowHelper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 48);
  outlined copy of Path.Storage(v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  unsigned __int8 v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v11;
  outlined consume of Path.Storage(v12, v13, v14, v15, v16);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  return a1;
}

__n128 __swift_memcpy118_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 110) = *(void *)((char *)a2 + 110);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ShapeLayerShadowHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  char v6 = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  long long v11 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v11;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v6;
  outlined consume of Path.Storage(v7, v8, v9, v10, v12);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeLayerShadowHelper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 118)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeLayerShadowHelper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 118) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 118) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeLayerShadowHelper()
{
  return &type metadata for ShapeLayerShadowHelper;
}

uint64_t getEnumTagSinglePayload for ShapeLayerAsyncHelper(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeLayerAsyncHelper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ShapeLayerAsyncHelper()
{
  return &unk_26FA64E58;
}

uint64_t initializeWithCopy for ShapeLayerAsyncShadowHelper(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShapeLayerAsyncShadowHelper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ShapeLayerAsyncShadowHelper(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeLayerAsyncShadowHelper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeLayerAsyncShadowHelper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeLayerAsyncShadowHelper()
{
  return &type metadata for ShapeLayerAsyncShadowHelper;
}

uint64_t outlined release of (ShapeType, ShapeType)(uint64_t a1)
{
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 160);
  char v10 = *(unsigned char *)(a1 + 168);
  outlined consume of ShapeType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  outlined consume of ShapeType(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t outlined retain of ShapeLayerHelper(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 48);
  id v7 = *(id *)a1;
  outlined copy of Path.Storage(v2, v3, v4, v5, v6);
  swift_retain();
  return a1;
}

uint64_t destroy for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1)
{
  return outlined consume of ShapeType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
}

uint64_t initializeWithCopy for ShapeType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 80);
  outlined copy of ShapeType(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for ShapeType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  char v25 = *(unsigned char *)(a2 + 80);
  outlined copy of ShapeType(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 80) = v25;
  outlined consume of ShapeType(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ShapeType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v3;
  outlined consume of ShapeType(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ShapeType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 80) <= 2u) {
    return *(unsigned __int8 *)(a1 + 80);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for ShapeType(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 72) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShapeType()
{
  return &type metadata for ShapeType;
}

uint64_t Date.nextDown.getter()
{
  Date.timeIntervalSinceReferenceDate.getter();

  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t max<A>(_:ifPresent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return max<A>(_:ifPresent:)(a1, a2, a3, a4, MEMORY[0x263F8E468], a5);
}

uint64_t Date.nextUp.getter()
{
  Date.timeIntervalSinceReferenceDate.getter();

  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t min<A>(_:ifPresent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return max<A>(_:ifPresent:)(a1, a2, a3, a4, MEMORY[0x263F8E470], a5);
}

uint64_t max<A>(_:ifPresent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, char *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  char v22 = a5;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v21 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a2, v11, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a6, a1, a3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v14, a3);
    v22(a1, v19, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, a3);
  }
}

uint64_t RandomAccessCollection.lowerBound(_:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v9 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v34 = (char *)&v28 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = a5;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result >= 1)
  {
    uint64_t v18 = *(void (**)(void, void, void))(v13 + 16);
    uint64_t v32 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v33 = (void (**)(char *))(v10 + 16);
    uint64_t v30 = v13 + 16;
    CALayer v31 = (void (**)(char *, uint64_t))(v13 + 8);
    CALayer v29 = v18;
    do
    {
      while (1)
      {
        uint64_t v38 = result;
        unint64_t v19 = (unint64_t)result >> 1;
        uint64_t v20 = v18;
        v18(v15, v16, v12);
        uint64_t v39 = v19;
        Collection.formIndex(_:offsetBy:)();
        uint64_t v21 = dispatch thunk of Collection.subscript.read();
        char v22 = v34;
        uint64_t v23 = AssociatedTypeWitness;
        (*v33)(v34);
        ((void (*)(char *, void))v21)(v40, 0);
        LOBYTE(v21) = v36(v22);
        (*v32)(v22, v23);
        uint64_t v24 = v9;
        uint64_t v25 = a3;
        uint64_t v26 = v6;
        Swift::String v27 = *v31;
        if (v21) {
          break;
        }
        v27(v15, v12);
        uint64_t result = v39;
        uint64_t v6 = v26;
        a3 = v25;
        uint64_t v9 = v24;
        uint64_t v18 = v20;
        if (v39 <= 0) {
          return result;
        }
      }
      v27(v16, v12);
      v20(v16, v15, v12);
      dispatch thunk of Collection.formIndex(after:)();
      v27(v15, v12);
      uint64_t result = v38 + ~v39;
      uint64_t v6 = v26;
      a3 = v25;
      uint64_t v9 = v24;
      uint64_t v18 = v29;
    }
    while (result > 0);
  }
  return result;
}

uint64_t EquatableOptionalObject.init(wrappedValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t IndirectOptional.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(double))(v6 + 48))(v7) == 1)
  {
    uint64_t v10 = type metadata accessor for Optional();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    v13(v9, a1, a2);
    uint64_t v12 = swift_allocBox();
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(v14, v9, a2);
  }
  *a3 = v12;
  return result;
}

uint64_t IndirectOptional.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*v2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = swift_projectBox();
    uint64_t v11 = *(void *)(v4 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a2, v5, v4);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v7 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = v4;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }

  return v6(v7, v8, 1, v9);
}

uint64_t IndirectOptional.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4) == 1)
  {
    uint64_t v8 = type metadata accessor for Optional();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    v11(v7, a1, v4);
    uint64_t v10 = swift_allocBox();
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v11)(v12, v7, v4);
  }
  *long long v2 = v10;
  return result;
}

BOOL static EquatableOptionalObject.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*a1 | *a2) == 0;
  }
  else {
    return *a1 == *a2;
  }
}

uint64_t static IndirectOptional<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t v13 = *v12;
  if (!*v11)
  {
    if (!v13)
    {
      char v17 = 1;
      return v17 & 1;
    }
    goto LABEL_5;
  }
  if (!v13)
  {
LABEL_5:
    char v17 = 0;
    return v17 & 1;
  }
  v20[1] = v8;
  uint64_t v14 = swift_projectBox();
  uint64_t v15 = swift_projectBox();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16(v10, v14, a3);
  v16(v6, v15, a3);
  swift_retain();
  swift_retain();
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v6, a3);
  v18(v10, a3);
  swift_release();
  swift_release();
  return v17 & 1;
}

void (*MutableCollection<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  _OWORD v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = type metadata accessor for Slice();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  void v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v16 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return MutableCollection<>.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t a1, char a2)
{
  BOOL v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  unsigned int v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 64);
  uint64_t v5 = *(void **)(*(void *)a1 + 72);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  uint64_t v10 = *(void *)(*(void *)a1 + 56);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void *, void *, void))(v4 + 16))(v3, v7, v2[3]);
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v4 + 8);
    v9(v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    v9(v7, v8);
  }
  else
  {
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v8);
  }
  free(v5);
  free(v7);
  free(v3);

  free(v2);
}

uint64_t MutableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v52 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int v47 = (char *)&v44 - v11;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v44 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v46 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v44 - v22;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = v4;
  uint64_t v50 = v6;
  uint64_t v51 = a2;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v25 = v12;
    uint64_t v26 = v15;
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v28 = v47;
    CALayer v29 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v45 = v23;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v30(v47, v18, AssociatedTypeWitness);
    CALayer v31 = v29;
    v30(v29, v26, AssociatedTypeWitness);
    uint64_t v32 = &v9[*(int *)(v27 + 48)];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v33(v9, v28, AssociatedTypeWitness);
    v33(v32, v31, AssociatedTypeWitness);
    uint64_t v34 = v46;
    v30(v46, v9, AssociatedTypeWitness);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v25 + 8);
    v44(v32, AssociatedTypeWitness);
    uint64_t v35 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    v30(v9, v28, AssociatedTypeWitness);
    v30(v35, v31, AssociatedTypeWitness);
    uint64_t v36 = (void (*)(uint64_t, char *, uint64_t))v30;
    uint64_t v37 = v49;
    v30(&v34[*(int *)(v49 + 36)], v35, AssociatedTypeWitness);
    v44(v9, AssociatedTypeWitness);
    uint64_t v38 = v48;
    uint64_t v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v34, v37);
    uint64_t v40 = v53;
    uint64_t v41 = v51;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    uint64_t v42 = type metadata accessor for Slice();
    uint64_t v43 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v52 + *(int *)(v42 + 40), v40, v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v55, v37);
    v36(v43, v39, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v36)(v43 + *(int *)(v42 + 36), &v39[*(int *)(v37 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Collection<>.commonPrefix<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v136 = a8;
  uint64_t v143 = a5;
  uint64_t v105 = a2;
  uint64_t v109 = a1;
  uint64_t v144 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v104 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v100 = (char *)&v99 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v103 = type metadata accessor for Range();
  uint64_t v102 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  BOOL v99 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v101 = (char *)&v99 - v17;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = AssociatedTypeWitness;
  uint64_t v117 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](v117);
  unsigned __int8 v108 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v121 = (char *)&v99 - v22;
  uint64_t v120 = swift_getAssociatedConformanceWitness();
  uint64_t v118 = type metadata accessor for Range();
  uint64_t v107 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  CGFloat v116 = (char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v106 = (char *)&v99 - v25;
  uint64_t v148 = a4;
  uint64_t v135 = swift_getAssociatedTypeWitness();
  uint64_t v139 = *(char **)(v135 - 8);
  MEMORY[0x270FA5388](v135);
  long long v134 = (char *)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  unsigned __int8 v147 = (char *)&v99 - v28;
  uint64_t v119 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v114 = (char *)&v99 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v142 = (char *)&v99 - v32;
  MEMORY[0x270FA5388](v33);
  int v146 = (char *)&v99 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v145 = (char *)&v99 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v122 = (char *)&v99 - v38;
  uint64_t v125 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v111 = (char *)&v99 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  BOOL v124 = (char *)&v99 - v42;
  MEMORY[0x270FA5388](v43);
  uint64_t v141 = (char *)&v99 - v44;
  MEMORY[0x270FA5388](v45);
  int v47 = (char *)&v99 - v46;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v140 = a3;
  uint64_t v48 = v119;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v49 = *(void (**)(void))(v125 + 16);
  uint64_t v115 = v47;
  uint64_t v110 = v125 + 16;
  uint64_t v123 = v49;
  ((void (*)(char *, char *, uint64_t))v49)(v124, v47, v18);
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v50(v146, v122, v19);
  uint64_t v133 = *(void *)(v120 + 8);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v137 = v50;
  uint64_t v138 = v48 + 16;
  v50(v142, v145, v19);
  if (v51)
  {
    uint64_t v52 = *(char **)(v48 + 8);
LABEL_8:
    int v63 = v123;
    uint64_t v139 = v52;
    ((void (*)(char *, uint64_t))v52)(v142, v19);
  }
  else
  {
    uint64_t v131 = *(void *)(AssociatedConformanceWitness + 8);
    int v132 = (char **)(v48 + 8);
    long long v130 = (void (**)(char *))(v139 + 16);
    unsigned __int8 v129 = (void (**)(char *, uint64_t))(v139 + 8);
    uint64_t v53 = v142;
    uint64_t v128 = v19;
    uint64_t v127 = v18;
    uint64_t v126 = a6;
    uint64_t v54 = v135;
    while (1)
    {
      char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v139 = *v132;
      ((void (*)(char *, uint64_t))v139)(v53, v19);
      if (v55) {
        break;
      }
      uint64_t v56 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v57 = *v130;
      (*v130)(v147);
      v56(v149, 0);
      uint64_t v58 = dispatch thunk of Collection.subscript.read();
      uint64_t v59 = v134;
      v57(v134);
      ((void (*)(char *, void))v58)(v149, 0);
      uint64_t v60 = v147;
      LOBYTE(v58) = dispatch thunk of static Equatable.== infix(_:_:)();
      unsigned __int8 v61 = *v129;
      (*v129)(v59, v54);
      v61(v60, v54);
      if ((v58 & 1) == 0)
      {
        uint64_t v19 = v128;
        uint64_t v18 = v127;
        break;
      }
      dispatch thunk of Collection.formIndex(after:)();
      dispatch thunk of Collection.formIndex(after:)();
      uint64_t v18 = v127;
      char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v53 = v142;
      uint64_t v19 = v128;
      v137(v142, v145, v128);
      if (v62)
      {
        uint64_t v52 = v139;
        goto LABEL_8;
      }
    }
    int v63 = v123;
  }
  uint64_t v64 = v111;
  v63();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v66 = v117;
    unsigned __int8 v147 = &v121[*(int *)(v117 + 48)];
    float v67 = v147;
    v123();
    uint64_t v68 = v125;
    uint64_t v142 = *(char **)(v125 + 32);
    ((void (*)(char *, char *, uint64_t))v142)(v67, v64, v18);
    int v69 = v108;
    unsigned __int8 v70 = &v108[*(int *)(v66 + 48)];
    uint64_t v136 = v70;
    uint64_t v71 = v123;
    ((void (*)(char *, char *, uint64_t))v123)(v108, v121, v18);
    ((void (*)(char *, char *, uint64_t))v71)(v70, v147, v18);
    int v72 = (void (*)(char *, char *, uint64_t))v142;
    ((void (*)(char *, char *, uint64_t))v142)(v116, v69, v18);
    uint64_t v73 = v19;
    uint64_t v74 = *(void (**)(char *, uint64_t))(v68 + 8);
    v74(v136, v18);
    uint64_t v136 = &v69[*(int *)(v117 + 48)];
    int v75 = v136;
    v72(v69, v121, v18);
    v72(v75, v147, v18);
    char v76 = v116;
    v72(&v116[*(int *)(v118 + 36)], v136, v18);
    unsigned __int8 v147 = (char *)v74;
    uint64_t v125 = v68 + 8;
    v74(v69, v18);
    uint64_t v77 = v107;
    uint64_t v78 = v106;
    uint64_t v79 = v118;
    (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v106, v76, v118);
    dispatch thunk of Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
    uint64_t v80 = v137;
    v137(v114, v146, v73);
    id v81 = v122;
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v82 = TupleTypeMetadata2;
      BOOL v83 = v100;
      uint64_t v84 = &v100[*(int *)(TupleTypeMetadata2 + 48)];
      v80(v100, v81, v73);
      uint64_t v85 = v119 + 32;
      uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
      v86(v84, v114, v73);
      uint64_t v87 = *(int *)(v82 + 48);
      uint64_t v88 = v80;
      CGFloat v89 = v104;
      uint64_t v90 = &v104[v87];
      v88(v104, v83, v73);
      v88(v90, v84, v73);
      uint64_t v91 = v99;
      v86(v99, v89, v73);
      uint64_t v148 = v85 - 24;
      uint64_t v92 = (void (*)(char *, uint64_t))v139;
      ((void (*)(char *, uint64_t))v139)(v90, v73);
      uint64_t v93 = &v89[*(int *)(TupleTypeMetadata2 + 48)];
      v86(v89, v83, v73);
      v86(v93, v84, v73);
      uint64_t v94 = v18;
      uint64_t v95 = v103;
      v86(&v91[*(int *)(v103 + 36)], v93, v73);
      v92(v89, v73);
      uint64_t v96 = v102;
      uint64_t v97 = v101;
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v101, v91, v95);
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v95);
      v92(v146, v73);
      uint64_t v98 = v147;
      ((void (*)(char *, uint64_t))v147)(v124, v94);
      v92(v145, v73);
      ((void (*)(char *, uint64_t))v98)(v141, v94);
      v92(v122, v73);
      return ((uint64_t (*)(char *, uint64_t))v98)(v115, v94);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BidirectionalCollection<>.commonSuffix<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v148 = a8;
  uint64_t v160 = a3;
  uint64_t v116 = a2;
  uint64_t v125 = a1;
  uint64_t v147 = a7;
  uint64_t v159 = *(void *)(a7 + 8);
  uint64_t v161 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v115 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v111 = (char *)&v110 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v162 = AssociatedTypeWitness;
  uint64_t v126 = AssociatedConformanceWitness;
  uint64_t v114 = type metadata accessor for Range();
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x270FA5388](v114);
  uint64_t v110 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  BOOL v112 = (char *)&v110 - v18;
  uint64_t v146 = a6;
  uint64_t v19 = *(void *)(a6 + 8);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v121 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](v121);
  BOOL v124 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v119 = (char *)&v110 - v23;
  uint64_t v133 = swift_getAssociatedConformanceWitness();
  uint64_t v157 = v20;
  uint64_t v123 = type metadata accessor for Range();
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v131 = (char *)&v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v120 = (char *)&v110 - v26;
  uint64_t v143 = swift_getAssociatedTypeWitness();
  uint64_t v139 = *(void (***)(char *, uint64_t))(v143 - 8);
  MEMORY[0x270FA5388](v143);
  uint64_t v145 = (char *)&v110 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v144 = (char *)&v110 - v29;
  uint64_t v132 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v30);
  long long v164 = (char *)&v110 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v153 = (char *)&v110 - v33;
  MEMORY[0x270FA5388](v34);
  unsigned __int8 v163 = (char *)&v110 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v110 - v37;
  MEMORY[0x270FA5388](v39);
  int v158 = (char *)&v110 - v40;
  uint64_t v134 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v149 = (char *)&v110 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  long long v130 = (char *)&v110 - v44;
  MEMORY[0x270FA5388](v45);
  int v47 = (char *)&v110 - v46;
  MEMORY[0x270FA5388](v48);
  uint64_t v50 = (char *)&v110 - v49;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v155 = a4;
  long long v156 = v8;
  uint64_t v154 = v19;
  dispatch thunk of Collection.endIndex.getter();
  char v51 = v153;
  uint64_t v52 = v132;
  uint64_t v53 = v157;
  uint64_t v54 = v162;
  dispatch thunk of Collection.endIndex.getter();
  char v55 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
  uint64_t v56 = v130;
  unsigned __int8 v129 = v47;
  uint64_t v118 = v134 + 16;
  uint64_t v117 = v55;
  v55(v130, v47, v53);
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  uint64_t v128 = v38;
  v57(v163, v38, v54);
  uint64_t v58 = *(void *)(v133 + 8);
  uint64_t v59 = v56;
  long long v152 = v50;
  uint64_t v142 = v58;
  LOBYTE(v56) = dispatch thunk of static Equatable.== infix(_:_:)();
  int v150 = v57;
  uint64_t v151 = v52 + 16;
  v57(v51, v158, v54);
  if (v56)
  {
    uint64_t v60 = *(char **)(v52 + 8);
    unsigned __int8 v61 = v129;
LABEL_8:
    long long v164 = v60;
    ((void (*)(char *, uint64_t))v60)(v51, v54);
  }
  else
  {
    char v62 = (char **)(v52 + 8);
    uint64_t v140 = (void (**)(char *))(v139 + 2);
    uint64_t v141 = *(void *)(v126 + 8);
    ++v139;
    char v137 = (void (**)(char *, uint64_t))(v134 + 8);
    uint64_t v136 = (void (**)(char *, char *, uint64_t))(v52 + 32);
    uint64_t v135 = (void (**)(char *, char *, uint64_t))(v134 + 32);
    int v63 = v164;
    uint64_t v138 = (char **)(v52 + 8);
    while (1)
    {
      char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v164 = *v62;
      ((void (*)(char *, uint64_t))v164)(v51, v54);
      if (v64) {
        break;
      }
      dispatch thunk of BidirectionalCollection.index(before:)();
      dispatch thunk of BidirectionalCollection.index(before:)();
      uint64_t v65 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v66 = *v140;
      float v67 = v144;
      uint64_t v68 = v143;
      (*v140)(v144);
      v65(v165, 0);
      uint64_t v69 = dispatch thunk of Collection.subscript.read();
      unsigned __int8 v70 = v145;
      v66(v145);
      ((void (*)(char *, void))v69)(v165, 0);
      LOBYTE(v69) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v71 = *v139;
      (*v139)(v70, v68);
      v71(v67, v68);
      if ((v69 & 1) == 0)
      {
        ((void (*)(char *, uint64_t))v164)(v63, v162);
        uint64_t v53 = v157;
        (*v137)(v149, v157);
        break;
      }
      uint64_t v54 = v162;
      int v72 = v163;
      uint64_t v73 = v164;
      char v62 = v138;
      ((void (*)(char *, uint64_t))v164)(v163, v162);
      uint64_t v53 = v157;
      (*v137)(v59, v157);
      (*v136)(v72, v63, v54);
      (*v135)(v59, v149, v53);
      char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v51 = v153;
      v150(v153, v158, v54);
      if (v74)
      {
        unsigned __int8 v61 = v129;
        uint64_t v60 = v73;
        goto LABEL_8;
      }
    }
    unsigned __int8 v61 = v129;
  }
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v76 = v121;
    uint64_t v77 = v119;
    uint64_t v78 = &v119[*(int *)(v121 + 48)];
    uint64_t v79 = v61;
    uint64_t v80 = v117;
    v117(v119, v59, v53);
    uint64_t v153 = v78;
    v80(v78, v79, v53);
    id v81 = v124;
    uint64_t v82 = &v124[*(int *)(v76 + 48)];
    v80(v124, v77, v53);
    v80(v82, v78, v53);
    uint64_t v83 = v134;
    uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
    v84(v131, v81, v53);
    uint64_t v85 = *(void (**)(char *, uint64_t))(v83 + 8);
    v85(v82, v53);
    uint64_t v86 = &v81[*(int *)(v76 + 48)];
    v84(v81, v77, v53);
    v84(v86, v153, v53);
    uint64_t v87 = v123;
    uint64_t v88 = v131;
    uint64_t v89 = v162;
    v84(&v131[*(int *)(v123 + 36)], v86, v53);
    uint64_t v134 = v83 + 8;
    uint64_t v153 = (char *)v85;
    v85(v81, v53);
    uint64_t v90 = v122;
    uint64_t v91 = v120;
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v120, v88, v87);
    dispatch thunk of Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v87);
    uint64_t v92 = v163;
    uint64_t v93 = v128;
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v94 = TupleTypeMetadata2;
      uint64_t v95 = v132;
      uint64_t v96 = v111;
      uint64_t v97 = &v111[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v98 = v150;
      v150(v111, v92, v89);
      long long v156 = v97;
      v98(v97, v93, v89);
      BOOL v99 = v115;
      uint64_t v100 = &v115[*(int *)(v94 + 48)];
      v98(v115, v96, v89);
      v98(v100, v97, v89);
      uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
      uint64_t v102 = v110;
      v101(v110, v99, v89);
      uint64_t v103 = (void (*)(char *, uint64_t))v164;
      ((void (*)(char *, uint64_t))v164)(v100, v89);
      uint64_t v104 = &v99[*(int *)(TupleTypeMetadata2 + 48)];
      v101(v99, v96, v89);
      v101(v104, v156, v89);
      uint64_t v105 = v53;
      uint64_t v106 = v114;
      v101(&v102[*(int *)(v114 + 36)], v104, v89);
      v103(v99, v89);
      uint64_t v107 = v113;
      unsigned __int8 v108 = v112;
      (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v112, v102, v106);
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v106);
      v103(v163, v89);
      uint64_t v109 = (void (*)(char *, uint64_t))v153;
      ((void (*)(char *, uint64_t))v153)(v130, v105);
      v103(v128, v89);
      v109(v129, v105);
      v103(v158, v89);
      return ((uint64_t (*)(char *, uint64_t))v109)(v152, v105);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Range.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v17 - v9;
  v17[1] = *(void *)(v11 + 24);
  char v12 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, v2, a2);
  v13(v7, a1, a2);
  if (v12) {
    char v14 = dispatch thunk of static Comparable.>= infix(_:_:)();
  }
  else {
    char v14 = 0;
  }
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, a2);
  v15(v10, a2);
  return v14 & 1;
}

uint64_t (*bind<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v10 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v9, a4, v10);
    unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    char v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = a4;
    *((void *)v14 + 3) = a1;
    *((void *)v14 + 4) = a2;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v14[v13], v11, a4);
    uint64_t v15 = partial apply for closure #1 in bind<A>(_:_:);
  }
  else
  {
    uint64_t v15 = 0;
  }
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a1);
  return v15;
}

double Double.quantized.getter(double a1)
{
  return round(a1 * 256.0) * 0.00390625;
}

float Float.quantized.getter(float a1)
{
  return roundf(a1 * 256.0) * 0.0039062;
}

Swift::Float __swiftcall Float.mix(with:by:)(Swift::Float with, Swift::Double by)
{
  float v3 = by;
  return (float)((float)(with - v2) * v3) + v2;
}

double CGFloat.quantized.getter(double a1)
{
  return round(a1 * 256.0) * 0.00390625;
}

double CGFloat.mix(with:by:)(double a1, double a2, double a3)
{
  return (a1 - a3) * a2 + a3;
}

uint64_t FloatingPoint.mappingNaN(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v7 = dispatch thunk of FloatingPoint.isNaN.getter();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);
  if (v7) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v3;
  }

  return v8(a3, v9, a2);
}

uint64_t BinaryFloatingPoint.ensuringNonzeroValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (dispatch thunk of FloatingPoint.isZero.getter()) {
    return dispatch thunk of static FloatingPoint.leastNonzeroMagnitude.getter();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(a2, v2, a1);
}

Swift::Void __swiftcall UInt32.unsafeIncrement()()
{
  ++*v0;
}

uint64_t FixedWidthInteger.init<A>(clamping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v20 = a4;
  v18[2] = a3;
  uint64_t v19 = a1;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v18 - v11;
  MEMORY[0x270FA5388](v13);
  v18[1] = (char *)v18 - v14;
  dispatch thunk of static FixedWidthInteger.min.getter();
  dispatch thunk of FloatingPoint.init<A>(_:)();
  dispatch thunk of static FixedWidthInteger.max.getter();
  dispatch thunk of FloatingPoint.init<A>(_:)();
  uint64_t v15 = v19;
  Comparable.clamp(min:max:)((uint64_t)v12, (uint64_t)v9, a2);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, a2);
  v16(v12, a2);
  dispatch thunk of BinaryInteger.init<A>(_:)();
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v15, a2);
}

double Double.init(_:)()
{
  uint64_t v0 = Duration.components.getter();
  return (double)v1 * 1.0e-18 + (double)v0;
}

uint64_t abs(_:)(uint64_t a1)
{
  static Duration.zero.getter();
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v2 = static Duration.zero.getter();
    return MEMORY[0x24C524FC0](v2);
  }
  return a1;
}

uint64_t Pair.first.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Pair.first.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Pair.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t Pair.second.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*Pair.second.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static Pair.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Pair.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t Pair.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7473726966 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int Pair.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t Pair.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x646E6F636573;
  }
  else {
    return 0x7473726966;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Pair<A, B>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Pair.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Pair<A, B>.CodingKeys()
{
  return Pair.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Pair<A, B>.CodingKeys(uint64_t a1)
{
  Pair.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Pair<A, B>.CodingKeys()
{
  Hasher.init(_seed:)();
  Pair.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Pair<A, B>.CodingKeys()
{
  return Pair.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Pair<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Pair.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Pair<A, B>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Pair<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Pair<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

Swift::Int Pair<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> Pair<A, B>()
{
  return Pair<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> Pair<A, B>()
{
  return Pair<>.hash(into:)();
}

uint64_t Pair<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[4] = a4;
  _OWORD v14[2] = a6;
  uint64_t v7 = *(void *)(a2 + 24);
  v14[0] = a2;
  v14[1] = v7;
  type metadata accessor for Pair.CodingKeys();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  uint64_t v12 = v14[5];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t Pair<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v30 = a6;
  uint64_t v31 = a5;
  uint64_t v35 = a4;
  uint64_t v29 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v33 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v36 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Pair.CodingKeys();
  swift_getWitnessTable();
  uint64_t v38 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v34 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v37 = a2;
  uint64_t v15 = type metadata accessor for Pair();
  uint64_t v28 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v28 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v18 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v19 = v17;
  uint64_t v21 = v32;
  uint64_t v20 = v33;
  char v41 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v39 = v19;
  v22(v19, v36, v37);
  char v40 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v38);
  uint64_t v23 = v15;
  uint64_t v24 = *(int *)(v15 + 36);
  uint64_t v25 = v39;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v39[v24], v20, a3);
  uint64_t v26 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v30, v25, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v25, v23);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Pair<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Pair<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Pair<A, B>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Pair<>.encode(to:)(a1, a2, a3, *(void *)(a3 - 16), a5, *(void *)(a3 - 32));
}

uint64_t ArrayID.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = a1;
  return result;
}

void ArrayID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ArrayID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int ArrayID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t hexFormatted(_:)()
{
  lazy protocol witness table accessor for type Int and conformance Int();
  v0._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t UnsafeMutableBufferProjectionPointer.startIndex.getter()
{
  return 0;
}

uint64_t UnsafeMutableBufferProjectionPointer.endIndex.getter()
{
  return *(void *)(v0 + 8);
}

void UnsafeMutableBufferProjectionPointer.init()(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  *a2 = ~*(unsigned char *)(*(void *)(a1 - 8) + 80) | 0xFFFFFFFFFFFFFF00;
  a2[1] = 0;
}

uint64_t UnsafeMutableBufferProjectionPointer.init(start:count:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t UnsafeMutableBufferProjectionPointer.init(_:_:)@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X2>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *a2;
  if (!a1)
  {
    uint64_t result = swift_release();
    unint64_t v9 = ~*(_DWORD *)(*(void *)(*(void *)(*MEMORY[0x263F8DE50] + v5 + 8) - 8) + 80) | 0xFFFFFFFFFFFFFF00;
    goto LABEL_5;
  }
  uint64_t result = UnsafeBufferPointer.baseAddress.getter();
  if (result)
  {
    uint64_t v7 = (void (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
    unint64_t v9 = v8;
    v7(&v10, 0);
    uint64_t result = swift_release();
LABEL_5:
    *a3 = v9;
    a3[1] = a1;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferProjectionPointer.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72);
  if ((unsigned __int128)(v4 * (__int128)result) >> 64 == (v4 * result) >> 63) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 16))(a3, *v3 + v4 * result);
  }
  __break(1u);
  return result;
}

void *key path getter for UnsafeMutableBufferProjectionPointer.subscript(_:) : <A, B>UnsafeMutableBufferProjectionPointer<A, B>AB@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(*(uint64_t *)((char *)a2 + a3 - 16) - 8) + 72);
  uint64_t v5 = v4 * *a2;
  if ((unsigned __int128)(v4 * (__int128)*a2) >> 64 == v5 >> 63) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(uint64_t *)((char *)a2 + a3 - 8) - 8)
  }
                                                                 + 16))(a4, *result + v5);
  __break(1u);
  return result;
}

uint64_t key path setter for UnsafeMutableBufferProjectionPointer.subscript(_:) : <A, B>UnsafeMutableBufferProjectionPointer<A, B>AB(uint64_t result, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(*(uint64_t *)((char *)a3 + a4 - 16) - 8) + 72);
  uint64_t v5 = v4 * *a3;
  if ((unsigned __int128)(v4 * (__int128)*a3) >> 64 == v5 >> 63) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(uint64_t *)((char *)a3 + a4 - 8) - 8) + 24))(*a2 + v5, result);
  }
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferProjectionPointer.subscript.unsafeAddressor(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72);
  if ((unsigned __int128)(v3 * (__int128)result) >> 64 == (v3 * result) >> 63) {
    return *v2 + v3 * result;
  }
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferProjectionPointer.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 72);
  if ((unsigned __int128)(v4 * (__int128)a2) >> 64 == (v4 * a2) >> 63) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 24) - 8) + 40))(*v3 + v4 * a2, result);
  }
  __break(1u);
  return result;
}

uint64_t (*UnsafeMutableBufferProjectionPointer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(void, void)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 72);
  if ((unsigned __int128)(v3 * (__int128)a2) >> 64 == (v3 * a2) >> 63) {
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return UnsafeMutableBufferProjectionPointer.subscript.setter(a1, *a2, a3);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance UnsafeMutableBufferProjectionPointer<A, B>(void *a1, uint64_t *a2, uint64_t a3))()
{
  char v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = UnsafeMutableBufferProjectionPointer.subscript.modify((uint64_t)v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  return specialized MutableCollection<>.subscript.setter();
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  return MutableCollection<>.partition(by:)();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E060](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance UnsafeMutableBufferProjectionPointer<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UnsafeMutableBufferProjectionPointer.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>(void *a1, uint64_t *a2, uint64_t a3))()
{
  char v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = UnsafeMutableBufferProjectionPointer.subscript.read((uint64_t)v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

uint64_t (*UnsafeMutableBufferProjectionPointer.subscript.read(uint64_t a1, uint64_t a2, uint64_t a3))(void, void)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 72);
  if ((unsigned __int128)(v3 * (__int128)a2) >> 64 == (v3 * a2) >> 63) {
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance UnsafeMutableBufferProjectionPointer<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MutableCollection<>.subscript.getter(a1, a2, WitnessTable, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance UnsafeMutableBufferProjectionPointer<A, B>(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance UnsafeMutableBufferProjectionPointer<A, B>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance UnsafeMutableBufferProjectionPointer<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UnsafeMutableBufferProjectionPointer<A, B>()
{
  swift_getWitnessTable();

  return Collection._copyToContiguousArray()();
}

BOOL Numeric.isNaN.getter()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t Numeric.isFinite.getter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v13 - v8;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, a1);
  v11(v9, a1);
  return v10 & 1;
}

uint64_t Sequence.first<A>(ofType:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v4);
  Sequence.first(where:)();
  int v5 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v5 ^ 1u, 1, a1);
}

uint64_t closure #1 in Sequence.first<A>(ofType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v14 - v10, a1, AssociatedTypeWitness, v9);
  uint64_t v12 = swift_dynamicCast();
  if (v12) {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
  }
  return v12;
}

uint64_t CountingIndexCollection.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t CountingIndexCollection.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)&v22 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v22 - v11;
  dispatch thunk of BidirectionalCollection.index(before:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v12, AssociatedTypeWitness);
  dispatch thunk of Collection.startIndex.getter();
  swift_getAssociatedConformanceWitness();
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v6, AssociatedTypeWitness);
  if (v13)
  {
    v14(v12, AssociatedTypeWitness);
    uint64_t v15 = 0;
LABEL_5:
    uint64_t v20 = v23;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v23, v9, AssociatedTypeWitness);
    uint64_t result = type metadata accessor for CountingIndex();
    uint64_t v21 = v20 + *(int *)(result + 36);
    *(void *)uint64_t v21 = v15;
    *(unsigned char *)(v21 + 8) = v13 & 1;
    return result;
  }
  uint64_t result = type metadata accessor for CountingIndex();
  uint64_t v17 = (uint64_t *)(a1 + *(int *)(result + 36));
  if ((v17[1] & 1) == 0)
  {
    uint64_t v18 = *v17;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v12, AssociatedTypeWitness);
    BOOL v19 = __OFSUB__(v18, 1);
    uint64_t v15 = v18 - 1;
    if (!v19) {
      goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance CountingIndexCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CountingIndexCollection<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, double))CountingIndexCollection.index(before:));
}

uint64_t protocol witness for Collection.subscript.getter in conformance CountingIndexCollection<A>()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance CountingIndexCollection<A>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CountingIndex();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance CountingIndexCollection<A>()
{
  swift_getWitnessTable();

  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CountingIndexCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t CountingIndex.offset.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance CountingIndex<A>()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance CountingIndex<A>()
{
  return MEMORY[0x270F9D4A0]();
}

uint64_t CountingIndex.description.getter(uint64_t a1)
{
  _StringGuts.grow(_:)(23);
  v3._uint64_t countAndFlagsBits = 0x203A6573616228;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4._uint64_t countAndFlagsBits = 0x657366666F207C20;
  v4._object = (void *)0xEB00000000203A74;
  String.append(_:)(v4);
  if (*(unsigned char *)(v1 + *(int *)(a1 + 36) + 8))
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  else
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v6 = BinaryInteger.description.getter();
    unint64_t v5 = v7;
  }
  unint64_t v8 = v5;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t == infix<A, B, C, D>(_:_:)(char *a1, char *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15)
{
  uint64_t v88 = a7;
  uint64_t v89 = a8;
  uint64_t v86 = a5;
  uint64_t v87 = a6;
  uint64_t v83 = a1;
  uint64_t v84 = a4;
  uint64_t v99 = a3;
  uint64_t v82 = a2;
  long long v93 = a13;
  uint64_t v91 = a15;
  uint64_t v92 = a14;
  uint64_t v95 = a12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = swift_getTupleTypeMetadata2();
  uint64_t v98 = swift_getTupleTypeMetadata2();
  uint64_t v90 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v85 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v96 = (char *)&v63 - v19;
  v16 -= 8;
  uint64_t v94 = v16;
  MEMORY[0x270FA5388](v20);
  uint64_t v97 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (void (*)(char *, char *, uint64_t))((char *)&v63 - v23);
  uint64_t v25 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](v26);
  id v81 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29.n128_f64[0] = MEMORY[0x270FA5388](v28);
  unsigned __int8 v70 = (void (*)(void))((char *)&v63 + *(int *)(TupleTypeMetadata2 + 48) - v30);
  uint64_t v31 = v70;
  uint64_t v32 = *(void *)(a9 - 8);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  uint64_t v79 = v32 + 16;
  uint64_t v80 = v33;
  ((void (*)(char *, char *, uint64_t, __n128))v33)((char *)&v63 - v30, v83, a9, v29);
  uint64_t v67 = a10;
  uint64_t v34 = *(void *)(a10 - 8);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  uint64_t v77 = v34 + 16;
  uint64_t v78 = v35;
  v35((char *)v31, (uint64_t)v82, a10);
  uint64_t v36 = *(int *)(v16 + 56);
  uint64_t v68 = v24;
  uint64_t v37 = (char *)v24 + v36;
  uint64_t v65 = (char *)v24 + v36;
  uint64_t v66 = a11;
  uint64_t v38 = *(void *)(a11 - 8);
  uint64_t v76 = *(void (**)(void))(v38 + 16);
  ((void (*)(void, uint64_t, uint64_t))v76)(v24, v99, a11);
  uint64_t v99 = *(void *)(v95 - 8);
  int v75 = *(void (**)(char *, char *))(v99 + 16);
  v75(v37, v84);
  uint64_t v64 = v25;
  uint64_t v84 = &v96[*(int *)(v25 + 56)];
  uint64_t v39 = v84;
  char v40 = *(void (**)(void))(v32 + 32);
  uint64_t v73 = v32 + 32;
  char v74 = v40;
  char v41 = v96;
  uint64_t v63 = a9;
  v40();
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  uint64_t v71 = v34 + 32;
  int v72 = v42;
  uint64_t v43 = v67;
  v42(v39, (char *)v70, v67);
  uint64_t v44 = &v41[*(int *)(v98 + 48)];
  uint64_t v45 = v94;
  uint64_t v82 = &v44[*(int *)(v94 + 56)];
  uint64_t v46 = v82;
  uint64_t v83 = v44;
  int v47 = *(void (**)(void))(v38 + 32);
  uint64_t v69 = v38 + 32;
  unsigned __int8 v70 = v47;
  uint64_t v48 = v66;
  v47();
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
  v99 += 32;
  uint64_t v68 = v49;
  uint64_t v50 = v46;
  uint64_t v51 = v95;
  v49(v50, v65, v95);
  uint64_t v52 = v81;
  uint64_t v53 = &v81[*(int *)(v25 + 56)];
  v80(v81, v86, a9);
  uint64_t v54 = v43;
  v78(v53, v87, v43);
  char v55 = &v97[*(int *)(v45 + 56)];
  v76();
  ((void (*)(char *, uint64_t, uint64_t))v75)(v55, v89, v51);
  uint64_t v56 = v85;
  uint64_t v57 = &v85[*(int *)(v64 + 56)];
  ((void (*)(char *, char *, uint64_t))v74)(v85, v52, v63);
  v72(v57, v53, v54);
  uint64_t v58 = v98;
  uint64_t v59 = &v56[*(int *)(v98 + 48) + *(int *)(v94 + 56)];
  ((void (*)(char *, char *, uint64_t))v70)(&v56[*(int *)(v98 + 48)], v97, v48);
  v68(v59, v55, v51);
  uint64_t v60 = v96;
  LOBYTE(v53) = == infix<A, B, C, D>(_:_:)();
  unsigned __int8 v61 = *(void (**)(char *, uint64_t))(v90 + 8);
  v61(v56, v58);
  v61(v60, v58);
  return v53 & 1;
}

uint64_t Optional.init(if:then:)@<X0>(char a1@<W0>, void (*a2)(void *__return_ptr)@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  if (a1)
  {
    a2(a4);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  unint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);

  return v7(a4, v6, 1, a3);
}

uint64_t IndirectOptional.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = swift_allocBox();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(v7, a1, a2);
  *a3 = v6;
  return result;
}

void IndirectOptional.init(nilLiteral:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t key path setter for IndirectOptional.wrappedValue : <A>IndirectOptional<A>(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  double v3 = MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v9 - v4;
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v9 - v4, a1, v3);
  uint64_t v7 = type metadata accessor for IndirectOptional();
  return IndirectOptional.wrappedValue.setter((uint64_t)v5, v7);
}

void (*IndirectOptional.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  unint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  uint64_t v6 = type metadata accessor for Optional();
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  IndirectOptional.wrappedValue.getter(a2, (uint64_t)v9);
  return IndirectOptional.wrappedValue.modify;
}

void IndirectOptional.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  double v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    IndirectOptional.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    IndirectOptional.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> IndirectOptional<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static IndirectOptional<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

void IndirectOptional<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v2)
  {
    uint64_t v7 = swift_projectBox();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
    Hasher._combine(_:)(1uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int IndirectOptional<A>.hashValue.getter(uint64_t a1)
{
  v4[9] = *v1;
  Hasher.init(_seed:)();
  IndirectOptional<A>.hash(into:)((uint64_t)v4, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> IndirectOptional<A>(uint64_t a1)
{
  return IndirectOptional<A>.hashValue.getter(a1);
}

void protocol witness for Hashable.hash(into:) in conformance <A> IndirectOptional<A>(uint64_t a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> IndirectOptional<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  IndirectOptional<A>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t Cache3.init()@<X0>(uint64_t a1@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v4 = a1 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v5 = a1 + *(int *)(TupleTypeMetadata3 + 64);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
  v7(a1, 1, 1, TupleTypeMetadata2);
  v7(v4, 1, 1, TupleTypeMetadata2);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, TupleTypeMetadata2);
}

uint64_t Cache3.find(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v75 = a1;
  unsigned __int8 v70 = a3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v76 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v5 - 8);
  uint64_t v6 = v80;
  MEMORY[0x270FA5388](v5);
  char v62 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v63 = (char *)&v61 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v66 = (char *)&v61 - v11;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v64 = *(void *)(TupleTypeMetadata3 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata3);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v61 - v16;
  uint64_t v78 = v4;
  uint64_t v77 = *(void *)(v4 - 8);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v67 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(int *)(v21 + 48);
  uint64_t v23 = &v17[v22];
  uint64_t v24 = *(int *)(v21 + 64);
  uint64_t v25 = &v17[v24];
  uint64_t v26 = v3;
  uint64_t v27 = v3 + v22;
  uint64_t v28 = v26 + v24;
  uint64_t v29 = v6 + 16;
  uint64_t v30 = *(void (**)(char *, double))(v6 + 16);
  uint64_t v72 = v29;
  v30(v17, v19);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v23, v27, v5);
  uint64_t v73 = (void (*)(char *, char *, uint64_t))v30;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v25, v28, v5);
  uint64_t v31 = &v14[*(int *)(TupleTypeMetadata3 + 48)];
  uint64_t v65 = TupleTypeMetadata3;
  uint64_t v32 = TupleTypeMetadata2;
  uint64_t v33 = &v14[*(int *)(TupleTypeMetadata3 + 64)];
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
  uint64_t v35 = v17;
  uint64_t v36 = v31;
  v34(v14, v35, v5);
  v34(v36, v23, v5);
  uint64_t v71 = v33;
  uint64_t v81 = v5;
  v34(v33, v25, v5);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48);
  uint64_t v79 = v14;
  int v38 = v37(v14, 1, v32);
  uint64_t v68 = v36;
  if (v38 != 1)
  {
    uint64_t v39 = v66;
    v73(v66, v79, v81);
    char v40 = &v39[*(int *)(v32 + 48)];
    uint64_t v41 = v76;
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(void *)(v41 - 8) + 8))(v39, v41);
    if (v42)
    {
      uint64_t v44 = v77;
      uint64_t v43 = v78;
      uint64_t v45 = v77;
LABEL_11:
      uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      uint64_t v52 = v67;
      v51(v67, v40, v43);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v77 + 8))(v40, v78);
    uint64_t v36 = v68;
  }
  int v46 = v37(v36, 1, v32);
  uint64_t v44 = v77;
  uint64_t v43 = v78;
  if (v46 != 1)
  {
    int v47 = v63;
    v73(v63, v36, v81);
    uint64_t v48 = &v47[*(int *)(v32 + 48)];
    uint64_t v49 = v76;
    char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
    if (v50)
    {
      uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
      uint64_t v52 = v67;
      v51(v67, v48, v43);
LABEL_12:
      uint64_t v57 = v81;
      uint64_t v58 = *(void (**)(char *, uint64_t))(v80 + 8);
      v58(v71, v81);
      v58(v68, v57);
      v58(v79, v57);
      uint64_t v59 = v70;
      v51(v70, v52, v43);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v59, 0, 1, v43);
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v48, v43);
  }
  uint64_t v53 = v71;
  if (v37(v71, 1, v32) != 1)
  {
    uint64_t v54 = v62;
    v73(v62, v53, v81);
    char v40 = &v54[*(int *)(v32 + 48)];
    uint64_t v55 = v76;
    char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v54, v55);
    uint64_t v45 = v44;
    if (v56) {
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v43);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v70, 1, 1, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v79, v65);
}

uint64_t Cache3.put(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v11 = v3 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v12 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v3 + *(int *)(TupleTypeMetadata3 + 64), v11, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v11, v3, v9);
  uint64_t v13 = v3 + *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v3, a1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v13, a2, v6);
  uint64_t v14 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);

  return v14(v3, 0, 1, TupleTypeMetadata2);
}

uint64_t Cache3.get(_:makeValue:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v90 = a4;
  uint64_t v81 = a3;
  uint64_t v82 = a2;
  uint64_t v94 = a1;
  uint64_t v87 = a5;
  uint64_t v6 = *(void *)(a4 + 24);
  uint64_t v93 = *(void *)(a4 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v95 = *(void *)(v7 - 8);
  uint64_t v8 = v95;
  MEMORY[0x270FA5388](v7);
  uint64_t v71 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v72 = (char *)&v70 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v75 = (char *)&v70 - v13;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v73 = *(void *)(TupleTypeMetadata3 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata3);
  uint64_t v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  double v19 = (char *)&v70 - v18;
  uint64_t v92 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v84 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = v6;
  uint64_t v80 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v80 - 8);
  double v22 = MEMORY[0x270FA5388](v80);
  uint64_t v86 = (char *)&v70 - v23;
  uint64_t v24 = *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v25 = &v19[v24];
  uint64_t v26 = *(int *)(TupleTypeMetadata3 + 64);
  uint64_t v27 = &v19[v26];
  uint64_t v28 = v5 + v24;
  uint64_t v29 = v5 + v26;
  uint64_t v30 = *(void (**)(char *, double))(v8 + 16);
  uint64_t v83 = v5;
  v30(v19, v22);
  uint64_t v79 = v28;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v25, v28, v7);
  uint64_t v77 = v29;
  uint64_t v89 = (void (*)(char *, char *, uint64_t))v30;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v27, v29, v7);
  uint64_t v31 = &v16[*(int *)(TupleTypeMetadata3 + 48)];
  uint64_t v74 = TupleTypeMetadata3;
  uint64_t v32 = &v16[*(int *)(TupleTypeMetadata3 + 64)];
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
  uint64_t v34 = v19;
  uint64_t v35 = v7;
  v33(v16, v34, v7);
  v33(v31, v25, v7);
  uint64_t v88 = v32;
  uint64_t v36 = TupleTypeMetadata2;
  v33(v32, v27, v7);
  uint64_t v76 = *(void *)(v36 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
  int v38 = v16;
  int v39 = v37(v16, 1, v36);
  uint64_t v85 = v31;
  if (v39 != 1)
  {
    char v40 = v75;
    v89(v75, v16, v7);
    uint64_t v41 = &v40[*(int *)(v36 + 48)];
    uint64_t v42 = v93;
    char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(void *)(v42 - 8) + 8))(v40, v42);
    if (v43)
    {
      uint64_t v44 = v92;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
      int v46 = v84;
      int v47 = v41;
      uint64_t v48 = v91;
      v45(v84, v47, v91);
LABEL_12:
      uint64_t v60 = v95;
      uint64_t v61 = *(void (**)(char *, uint64_t))(v95 + 8);
      v61(v88, v35);
      v61(v85, v35);
      v61(v38, v35);
      char v62 = v86;
      v45(v86, v46, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v62, 0, 1, v48);
      uint64_t v36 = TupleTypeMetadata2;
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v41, v91);
    uint64_t v36 = TupleTypeMetadata2;
    uint64_t v31 = v85;
  }
  int v49 = v37(v31, 1, v36);
  uint64_t v48 = v91;
  if (v49 != 1)
  {
    char v50 = v31;
    uint64_t v75 = v38;
    uint64_t v51 = v72;
    v89(v72, v50, v7);
    uint64_t v52 = &v51[*(int *)(v36 + 48)];
    uint64_t v53 = v93;
    char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(void *)(v53 - 8) + 8))(v51, v53);
    if (v54)
    {
      uint64_t v44 = v92;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
      int v46 = v84;
      v45(v84, v52, v48);
      int v38 = v75;
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v52, v48);
    uint64_t v36 = TupleTypeMetadata2;
    int v38 = v75;
  }
  uint64_t v55 = v88;
  if (v37(v88, 1, v36) != 1)
  {
    char v56 = v71;
    v89(v71, v55, v7);
    uint64_t v57 = &v56[*(int *)(v36 + 48)];
    uint64_t v58 = v93;
    char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8))(v56, v58);
    if (v59)
    {
      uint64_t v44 = v92;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
      int v46 = v84;
      v45(v84, v57, v48);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v57, v48);
    uint64_t v36 = TupleTypeMetadata2;
  }
  uint64_t v44 = v92;
  char v62 = v86;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v86, 1, 1, v48);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v74);
  uint64_t v60 = v95;
LABEL_15:
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v62, 1, v48) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32))(v87, v62, v48);
  }
  uint64_t v63 = (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v62, v80);
  uint64_t v64 = v87;
  uint64_t v65 = v36;
  v82(v63);
  uint64_t v66 = v79;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 24))(v77, v79, v35);
  uint64_t v67 = v83;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 40))(v66, v83, v35);
  uint64_t v68 = v67 + *(int *)(v65 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 16))(v67, v94);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v68, v64, v48);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(v67, 0, 1, v65);
}

unint64_t specialized Dictionary.optimisticFilter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (*(void *)(a1 + 16) < 0x41uLL)
  {
    uint64_t v65 = a1 + 64;
    uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    unint64_t v8 = v7 & *(void *)(a1 + 64);
    int64_t v63 = (unint64_t)(v6 + 63) >> 6;
    swift_bridgeObjectRetain();
    unint64_t v9 = 0;
    int64_t v10 = 0;
    unint64_t v66 = 0;
    char v60 = 1;
    char v61 = 1;
    uint64_t v68 = v3;
    while (1)
    {
      if (v8)
      {
        unint64_t v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_83:
          unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        if (v13 >= v63) {
          goto LABEL_30;
        }
        unint64_t v14 = *(void *)(v65 + 8 * v13);
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v63) {
            goto LABEL_30;
          }
          unint64_t v14 = *(void *)(v65 + 8 * v10);
          if (!v14)
          {
            int64_t v10 = v13 + 2;
            if (v13 + 2 >= v63) {
              goto LABEL_30;
            }
            unint64_t v14 = *(void *)(v65 + 8 * v10);
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v63)
              {
LABEL_30:
                swift_release();
                if (v60) {
                  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
                }
                if (v61)
                {
                  swift_bridgeObjectRetain();
                  return v3;
                }
                uint64_t v27 = 1 << *(unsigned char *)(v3 + 32);
                uint64_t v28 = -1;
                if (v27 < 64) {
                  uint64_t v28 = ~(-1 << v27);
                }
                unint64_t v29 = v28 & *(void *)(v3 + 64);
                uint64_t v30 = v75;
                uint64_t v31 = v79;
                unint64_t v62 = ((unint64_t)(v27 + 63) >> 6) - 1;
                int64_t v64 = (unint64_t)(v27 + 63) >> 6;
                swift_bridgeObjectRetain();
                unint64_t v32 = 0;
                unint64_t v67 = 0;
                uint64_t v5 = (void *)MEMORY[0x263F8EE80];
                while (2)
                {
                  if (v29)
                  {
                    unint64_t v34 = __clz(__rbit64(v29));
                    v29 &= v29 - 1;
                    unint64_t v35 = v34 | (v67 << 6);
                    goto LABEL_43;
                  }
                  int64_t v40 = v67 + 1;
                  if (__OFADD__(v67, 1)) {
                    goto LABEL_78;
                  }
                  if (v40 < v64)
                  {
                    unint64_t v41 = *(void *)(v65 + 8 * v40);
                    if (v41)
                    {
LABEL_47:
                      unint64_t v29 = (v41 - 1) & v41;
                      unint64_t v35 = __clz(__rbit64(v41)) + (v40 << 6);
                      unint64_t v67 = v40;
LABEL_43:
                      uint64_t v36 = *(void *)(v3 + 56);
                      uint64_t v37 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v35);
                      uint64_t v39 = *v37;
                      uint64_t v38 = v37[1];
                      *(void *)&long long v74 = v39;
                      *((void *)&v74 + 1) = v38;
                      outlined init with copy of AnyTrackedValue(v36 + 40 * v35, (uint64_t)v30);
LABEL_62:
                      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v74, (uint64_t)&v77);
                      Swift::UInt v43 = v77;
                      if (!v77)
                      {
                        swift_release();
                        return (unint64_t)v5;
                      }
                      Swift::UInt v44 = v78;
                      outlined init with take of ScrollStateRequest(v31, (uint64_t)&v74);
                      if (v32 == 0x8000000000000000) {
                        goto LABEL_82;
                      }
                      if (v32 < 0x40 && ((v66 >> v32) & 1) != 0)
                      {
                        uint64_t v45 = v31;
                        int v46 = v30;
                        outlined init with copy of AnyTrackedValue((uint64_t)&v74, (uint64_t)&v72);
                        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v70[0] = v5;
                        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44);
                        uint64_t v50 = v5[2];
                        BOOL v51 = (v48 & 1) == 0;
                        uint64_t v52 = v50 + v51;
                        if (__OFADD__(v50, v51)) {
                          goto LABEL_79;
                        }
                        char v53 = v48;
                        if (v5[3] >= v52)
                        {
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                            specialized _NativeDictionary.copy()();
                          }
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, isUniquelyReferenced_nonNull_native);
                          unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44);
                          if ((v53 & 1) != (v55 & 1)) {
                            goto LABEL_83;
                          }
                          unint64_t v49 = v54;
                        }
                        uint64_t v5 = (void *)v70[0];
                        if (v53)
                        {
                          uint64_t v33 = *(void *)(v70[0] + 56) + 40 * v49;
                          __swift_destroy_boxed_opaque_existential_1(v33);
                          outlined init with take of ScrollStateRequest(&v72, v33);
                        }
                        else
                        {
                          *(void *)(v70[0] + 8 * (v49 >> 6) + 64) |= 1 << v49;
                          char v56 = (Swift::UInt *)(v5[6] + 16 * v49);
                          *char v56 = v43;
                          v56[1] = v44;
                          outlined init with take of ScrollStateRequest(&v72, v5[7] + 40 * v49);
                          uint64_t v57 = v5[2];
                          BOOL v58 = __OFADD__(v57, 1);
                          uint64_t v59 = v57 + 1;
                          if (v58) {
                            goto LABEL_80;
                          }
                          void v5[2] = v59;
                        }
                        swift_bridgeObjectRelease();
                        uint64_t v3 = v68;
                        uint64_t v30 = v46;
                        uint64_t v31 = v45;
                      }
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
                      ++v32;
                      continue;
                    }
                    int64_t v42 = v67 + 2;
                    ++v67;
                    if (v40 + 1 < v64)
                    {
                      unint64_t v41 = *(void *)(v65 + 8 * v42);
                      if (v41)
                      {
LABEL_50:
                        int64_t v40 = v42;
                        goto LABEL_47;
                      }
                      unint64_t v67 = v40 + 1;
                      if (v40 + 2 < v64)
                      {
                        unint64_t v41 = *(void *)(v65 + 8 * (v40 + 2));
                        if (v41)
                        {
                          v40 += 2;
                          goto LABEL_47;
                        }
                        int64_t v42 = v40 + 3;
                        unint64_t v67 = v40 + 2;
                        if (v40 + 3 < v64)
                        {
                          unint64_t v41 = *(void *)(v65 + 8 * v42);
                          if (!v41)
                          {
                            while (1)
                            {
                              int64_t v40 = v42 + 1;
                              if (__OFADD__(v42, 1)) {
                                goto LABEL_81;
                              }
                              if (v40 >= v64)
                              {
                                unint64_t v67 = v62;
                                goto LABEL_61;
                              }
                              unint64_t v41 = *(void *)(v65 + 8 * v40);
                              ++v42;
                              if (v41) {
                                goto LABEL_47;
                              }
                            }
                          }
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                  break;
                }
LABEL_61:
                unint64_t v29 = 0;
                uint64_t v76 = 0;
                memset(v75, 0, sizeof(v75));
                long long v74 = 0u;
                goto LABEL_62;
              }
              unint64_t v14 = *(void *)(v65 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v10 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_77;
                  }
                  if (v10 >= v63) {
                    goto LABEL_30;
                  }
                  unint64_t v14 = *(void *)(v65 + 8 * v10);
                  ++v15;
                  if (v14) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v10 = v15;
            }
          }
        }
LABEL_24:
        unint64_t v8 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      uint64_t v16 = *(void *)(v3 + 56);
      uint64_t v17 = (Swift::UInt *)(*(void *)(v3 + 48) + 16 * v12);
      Swift::UInt v19 = v17[1];
      Swift::UInt v77 = *v17;
      Swift::UInt v18 = v77;
      Swift::UInt v78 = v19;
      outlined init with copy of AnyTrackedValue(v16 + 40 * v12, (uint64_t)v79);
      *(void *)&long long v74 = v18;
      *((void *)&v74 + 1) = v19;
      outlined init with take of ScrollStateRequest(v79, (uint64_t)v75);
      *(void *)&long long v72 = v18;
      *((void *)&v72 + 1) = v19;
      outlined init with copy of AnyTrackedValue((uint64_t)v75, (uint64_t)v73);
      v70[0] = v18;
      v70[1] = v19;
      outlined init with copy of AnyTrackedValue((uint64_t)v73, (uint64_t)v71);
      __swift_project_boxed_opaque_existential_1(v71, v71[3]);
      uint64_t DynamicType = swift_getDynamicType();
      uint64_t v21 = a2;
      outlined init with copy of AnyTrackedValue(a2, (uint64_t)v69);
      __swift_project_boxed_opaque_existential_1(v69, v69[3]);
      uint64_t v22 = swift_getDynamicType();
      uint64_t v23 = v69[4];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
      outlined destroy of (key: EventID, value: EventType)((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
      outlined destroy of (key: EventID, value: EventType)((uint64_t)&v74, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      if (DynamicType == v24)
      {
        if ((v9 & 0x8000000000000000) != 0) {
          goto LABEL_82;
        }
        char v60 = 0;
        uint64_t v25 = 1 << v9;
        if (v9 >= 0x40) {
          uint64_t v25 = 0;
        }
        v66 |= v25;
      }
      else
      {
        char v61 = 0;
      }
      uint64_t v3 = v68;
      a2 = v21;
      ++v9;
    }
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = (void *)specialized _NativeDictionary.filter(_:)(v4, a2);
  swift_bridgeObjectRelease();
  return (unint64_t)v5;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt *v17;
  Swift::UInt v18;
  Swift::UInt v19;
  uint64_t (*v20)(unsigned char *);
  uint64_t v21;
  unint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  unsigned char *v40;
  char isUniquelyReferenced_nonNull_native;
  char v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  Swift::UInt *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  void v61[2];
  unsigned char v62[40];
  long long v63;
  unsigned char v64[40];
  long long v65;
  unsigned char v66[32];
  uint64_t v67;
  Swift::UInt v68;
  Swift::UInt v69;
  long long v70[3];

  uint64_t v3 = a1;
  if (*(void *)(a1 + 16) >= 0x41uLL)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = (void *)specialized _NativeDictionary.filter(_:)(v4, a2);
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  BOOL v58 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  char v56 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v9 = 0;
  int64_t v10 = 0;
  char v60 = 0;
  char v55 = 1;
  unint64_t v54 = 1;
  if (v8) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_77;
  }
  if (v13 >= v56) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v58 + 8 * v13);
  ++v10;
  if (v14) {
    goto LABEL_23;
  }
  int64_t v10 = v13 + 1;
  if (v13 + 1 >= v56)
  {
LABEL_30:
    swift_release();
    if (v55) {
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    if (v54)
    {
      swift_bridgeObjectRetain();
      return v3;
    }
    uint64_t v23 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v24 = -1;
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    uint64_t v25 = v24 & *(void *)(v3 + 64);
    uint64_t v26 = v66;
    uint64_t v57 = (unint64_t)(v23 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v27 = 0;
    uint64_t v59 = 0;
    uint64_t v5 = (void *)MEMORY[0x263F8EE80];
    while (!v25)
    {
      unint64_t v35 = v59 + 1;
      if (__OFADD__(v59, 1)) {
        goto LABEL_78;
      }
      if (v35 < v57)
      {
        uint64_t v36 = *(void *)(v58 + 8 * v35);
        if (v36) {
          goto LABEL_47;
        }
        uint64_t v37 = v59 + 2;
        ++v59;
        if (v35 + 1 < v57)
        {
          uint64_t v36 = *(void *)(v58 + 8 * v37);
          if (v36) {
            goto LABEL_50;
          }
          uint64_t v59 = v35 + 1;
          if (v35 + 2 < v57)
          {
            uint64_t v36 = *(void *)(v58 + 8 * (v35 + 2));
            if (v36)
            {
              v35 += 2;
              goto LABEL_47;
            }
            uint64_t v37 = v35 + 3;
            uint64_t v59 = v35 + 2;
            if (v35 + 3 < v57)
            {
              uint64_t v36 = *(void *)(v58 + 8 * v37);
              if (!v36)
              {
                while (1)
                {
                  unint64_t v35 = v37 + 1;
                  if (__OFADD__(v37, 1)) {
                    goto LABEL_81;
                  }
                  if (v35 >= v57)
                  {
                    uint64_t v59 = v57 - 1;
                    goto LABEL_61;
                  }
                  uint64_t v36 = *(void *)(v58 + 8 * v35);
                  ++v37;
                  if (v36) {
                    goto LABEL_47;
                  }
                }
              }
LABEL_50:
              unint64_t v35 = v37;
LABEL_47:
              uint64_t v25 = (v36 - 1) & v36;
              uint64_t v30 = __clz(__rbit64(v36)) + (v35 << 6);
              uint64_t v59 = v35;
LABEL_43:
              uint64_t v31 = *(void *)(v3 + 56);
              unint64_t v32 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v30);
              unint64_t v34 = *v32;
              uint64_t v33 = v32[1];
              *(void *)&uint64_t v65 = v34;
              *((void *)&v65 + 1) = v33;
              outlined init with copy of AnyTrackedValue(v31 + 40 * v30, (uint64_t)v26);
              goto LABEL_62;
            }
          }
        }
      }
LABEL_61:
      uint64_t v25 = 0;
      unint64_t v67 = 0;
      memset(v66, 0, sizeof(v66));
      uint64_t v65 = 0u;
LABEL_62:
      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v65, (uint64_t)&v68);
      uint64_t v38 = v68;
      if (!v68)
      {
        swift_release();
        return (unint64_t)v5;
      }
      uint64_t v39 = v69;
      outlined init with take of ScrollStateRequest(v70, (uint64_t)&v65);
      if (v27 == 0x8000000000000000) {
        goto LABEL_82;
      }
      if (v27 < 0x40 && ((v60 >> v27) & 1) != 0)
      {
        int64_t v40 = v26;
        outlined init with copy of AnyTrackedValue((uint64_t)&v65, (uint64_t)&v63);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v61[0] = v5;
        Swift::UInt v43 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
        Swift::UInt v44 = v5[2];
        uint64_t v45 = (v42 & 1) == 0;
        int v46 = v44 + v45;
        if (__OFADD__(v44, v45)) {
          goto LABEL_79;
        }
        int v47 = v42;
        if (v5[3] >= v46)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, isUniquelyReferenced_nonNull_native);
          char v48 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
          if ((v47 & 1) != (v49 & 1)) {
            goto LABEL_83;
          }
          Swift::UInt v43 = v48;
        }
        uint64_t v5 = (void *)v61[0];
        if (v47)
        {
          uint64_t v28 = *(void *)(v61[0] + 56) + 40 * v43;
          __swift_destroy_boxed_opaque_existential_1(v28);
          outlined init with take of ScrollStateRequest(&v63, v28);
        }
        else
        {
          *(void *)(v61[0] + 8 * (v43 >> 6) + 64) |= 1 << v43;
          uint64_t v50 = (Swift::UInt *)(v5[6] + 16 * v43);
          char *v50 = v38;
          v50[1] = v39;
          outlined init with take of ScrollStateRequest(&v63, v5[7] + 40 * v43);
          BOOL v51 = v5[2];
          uint64_t v52 = __OFADD__(v51, 1);
          char v53 = v51 + 1;
          if (v52) {
            goto LABEL_80;
          }
          void v5[2] = v53;
        }
        swift_bridgeObjectRelease();
        uint64_t v26 = v40;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
      ++v27;
    }
    unint64_t v29 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    uint64_t v30 = v29 | (v59 << 6);
    goto LABEL_43;
  }
  unint64_t v14 = *(void *)(v58 + 8 * v10);
  if (v14)
  {
LABEL_23:
    unint64_t v8 = (v14 - 1) & v14;
    for (uint64_t i = __clz(__rbit64(v14)) + (v10 << 6); ; uint64_t i = v11 | (v10 << 6))
    {
      uint64_t v16 = *(void *)(v3 + 56);
      uint64_t v17 = (Swift::UInt *)(*(void *)(v3 + 48) + 16 * i);
      Swift::UInt v19 = v17[1];
      uint64_t v68 = *v17;
      Swift::UInt v18 = v68;
      uint64_t v69 = v19;
      outlined init with copy of AnyTrackedValue(v16 + 40 * i, (uint64_t)v70);
      *(void *)&uint64_t v65 = v18;
      *((void *)&v65 + 1) = v19;
      outlined init with take of ScrollStateRequest(v70, (uint64_t)v66);
      *(void *)&int64_t v63 = v18;
      *((void *)&v63 + 1) = v19;
      outlined init with copy of AnyTrackedValue((uint64_t)v66, (uint64_t)v64);
      v61[0] = v18;
      v61[1] = v19;
      outlined init with copy of AnyTrackedValue((uint64_t)v64, (uint64_t)v62);
      type metadata accessor for EventFilter<TappableEvent>();
      uint64_t v20 = *(uint64_t (**)(unsigned char *))AGGraphGetValue();
      swift_retain();
      LOBYTE(v20) = v20(v62);
      swift_release();
      outlined destroy of (key: EventID, value: EventType)((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
      outlined destroy of (key: EventID, value: EventType)((uint64_t)&v65, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      if (v20)
      {
        if ((v9 & 0x8000000000000000) != 0) {
          goto LABEL_82;
        }
        char v55 = 0;
        uint64_t v21 = 1 << v9;
        if (v9 >= 0x40) {
          uint64_t v21 = 0;
        }
        v60 |= v21;
        ++v9;
        if (!v8) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v54 = 0;
        ++v9;
        if (!v8) {
          goto LABEL_10;
        }
      }
LABEL_9:
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
    }
  }
  int64_t v10 = v13 + 2;
  if (v13 + 2 >= v56) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v58 + 8 * v10);
  if (v14) {
    goto LABEL_23;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v56) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v58 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v56) {
      goto LABEL_30;
    }
    unint64_t v14 = *(void *)(v58 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_83:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Dictionary.optimisticFilter(_:)(uint64_t (*a1)(char *, char *), void (**a2)(void), unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v91 = (char *)v85 - v13;
  uint64_t v104 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v101 = (char *)v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v90 = (char *)v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v100 = (char *)v85 - v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v88 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  BOOL v112 = (char *)v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v111 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)v85 - v23);
  uint64_t v96 = type metadata accessor for Optional();
  uint64_t v87 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v25 = (char *)v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v95 = (char *)v85 - v27;
  double v29 = MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)v85 - v30;
  if (MEMORY[0x24C5222E0](a3, a4, a5, a6, v29) > 64)
  {
    swift_bridgeObjectRetain();
    return Dictionary.filter(_:)();
  }
  uint64_t v92 = v25;
  uint64_t v114 = a5;
  uint64_t v89 = a6;
  v85[0] = a3 & 0xC000000000000001;
  uint64_t v110 = a2;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v33 = __CocoaDictionary.makeIterator()();
    unint64_t v94 = 0;
    uint64_t v34 = 0;
    unint64_t v120 = 0;
    unint64_t v35 = v33 | 0x8000000000000000;
  }
  else
  {
    uint64_t v36 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v34 = ~v36;
    uint64_t v37 = *(void *)(a3 + 64);
    unint64_t v94 = a3 + 64;
    uint64_t v38 = -v36;
    if (v38 < 64) {
      uint64_t v39 = ~(-1 << v38);
    }
    else {
      uint64_t v39 = -1;
    }
    unint64_t v120 = v39 & v37;
    unint64_t v35 = a3;
  }
  uint64_t v97 = v35 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v119 = (unint64_t *)(v88 + 56);
  v85[1] = v34;
  int64_t v93 = (unint64_t)(v34 + 64) >> 6;
  uint64_t v121 = (void (**)(char *, char *, unint64_t))(v103 + 16);
  int64_t v40 = (void (**)(char *, char *, uint64_t))(v104 + 16);
  uint64_t v118 = (void (**)(char *, char *, unint64_t))(v103 + 32);
  uint64_t v117 = (void (**)(char *, char *, uint64_t))(v104 + 32);
  uint64_t v107 = (void (**)(char *, uint64_t))(v88 + 8);
  uint64_t v115 = (void (**)(char *, unint64_t))(v103 + 8);
  uint64_t v116 = (void (**)(char *, uint64_t))(v104 + 8);
  unint64_t v86 = a3;
  swift_bridgeObjectRetain();
  int64_t v106 = 0;
  unint64_t v113 = 0;
  LODWORD(v99) = 1;
  int v98 = 1;
  uint64_t v102 = TupleTypeMetadata2;
  uint64_t v105 = v40;
  int64_t v108 = v35;
  uint64_t v109 = a1;
  unint64_t v41 = v112;
  unint64_t v122 = 0;
  if ((v35 & 0x8000000000000000) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  if (!__CocoaDictionary.Iterator.next()())
  {
LABEL_34:
    unint64_t v120 = *v119;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v120)(v31, 1, 1, TupleTypeMetadata2);
    outlined consume of Set<EventID>.Iterator._Variant();
    uint64_t v59 = v114;
    unint64_t v60 = v86;
    if (v99)
    {
      swift_getTupleTypeMetadata2();
      static Array._allocateUninitialized(_:)();
      return Dictionary.init(dictionaryLiteral:)();
    }
    if (v98)
    {
      swift_bridgeObjectRetain();
      return v60;
    }
    uint64_t v123 = Dictionary.init()();
    unint64_t v122 = a4;
    if (v85[0])
    {
      uint64_t v62 = __CocoaDictionary.makeIterator()();
      int64_t v106 = 0;
      uint64_t v63 = 0;
      unint64_t v64 = 0;
      unint64_t v65 = v62 | 0x8000000000000000;
    }
    else
    {
      uint64_t v66 = -1 << *(unsigned char *)(v60 + 32);
      uint64_t v63 = ~v66;
      uint64_t v67 = *(void *)(v60 + 64);
      int64_t v106 = v60 + 64;
      uint64_t v68 = -v66;
      if (v68 < 64) {
        uint64_t v69 = ~(-1 << v68);
      }
      else {
        uint64_t v69 = -1;
      }
      unint64_t v64 = v69 & v67;
      unint64_t v65 = v60;
    }
    uint64_t v109 = (uint64_t (*)(char *, char *))(v65 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v102 = v63;
    uint64_t v70 = (void (**)(void))(v87 + 32);
    uint64_t v111 = (unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
    uint64_t v107 = (void (**)(char *, uint64_t))(v104 + 56);
    int64_t v108 = (unint64_t)(v63 + 64) >> 6;
    int64_t v99 = v108 - 1;
    swift_bridgeObjectRetain();
    unint64_t v71 = 0;
    int64_t v72 = 0;
    BOOL v112 = (char *)v65;
    uint64_t v110 = v70;
    while (1)
    {
      if ((v65 & 0x8000000000000000) != 0)
      {
        if (__CocoaDictionary.Iterator.next()())
        {
          Swift::UInt v78 = v92;
          _forceBridgeFromObjectiveC<A>(_:_:)();
          swift_unknownObjectRelease();
          uint64_t v59 = v114;
          _forceBridgeFromObjectiveC<A>(_:_:)();
          swift_unknownObjectRelease();
          uint64_t v79 = 0;
          int64_t v75 = v72;
          uint64_t v73 = v64;
          goto LABEL_61;
        }
        uint64_t v79 = 1;
        int64_t v75 = v72;
        uint64_t v73 = v64;
        uint64_t v59 = v114;
      }
      else
      {
        if (v64)
        {
          uint64_t v73 = (v64 - 1) & v64;
          unint64_t v74 = __clz(__rbit64(v64)) | (v72 << 6);
          int64_t v75 = v72;
          goto LABEL_51;
        }
        int64_t v75 = v72 + 1;
        if (__OFADD__(v72, 1)) {
          goto LABEL_82;
        }
        if (v75 >= v108)
        {
          uint64_t v73 = 0;
          uint64_t v79 = 1;
          int64_t v75 = v72;
        }
        else
        {
          unint64_t v80 = *(void *)(v106 + 8 * v75);
          if (v80) {
            goto LABEL_57;
          }
          if (v72 + 2 >= v108)
          {
            uint64_t v73 = 0;
            uint64_t v79 = 1;
          }
          else
          {
            unint64_t v80 = *(void *)(v106 + 8 * (v72 + 2));
            if (v80)
            {
              int64_t v75 = v72 + 2;
              goto LABEL_57;
            }
            int64_t v84 = v72 + 3;
            if (v72 + 3 < v108)
            {
              unint64_t v80 = *(void *)(v106 + 8 * v84);
              if (!v80)
              {
                while (1)
                {
                  int64_t v75 = v84 + 1;
                  if (__OFADD__(v84, 1)) {
                    goto LABEL_83;
                  }
                  if (v75 >= v108)
                  {
                    uint64_t v73 = 0;
                    uint64_t v79 = 1;
                    int64_t v75 = v99;
                    goto LABEL_60;
                  }
                  unint64_t v80 = *(void *)(v106 + 8 * v75);
                  ++v84;
                  if (v80) {
                    goto LABEL_57;
                  }
                }
              }
              int64_t v75 = v72 + 3;
LABEL_57:
              uint64_t v73 = (v80 - 1) & v80;
              unint64_t v74 = __clz(__rbit64(v80)) + (v75 << 6);
LABEL_51:
              unint64_t v76 = *(void *)(v65 + 48) + *(void *)(v103 + 72) * v74;
              unint64_t v77 = v65;
              Swift::UInt v78 = v92;
              (*(void (**)(char *, unint64_t, unint64_t))(v103 + 16))(v92, v76, v122);
              (*(void (**)(char *, unint64_t, uint64_t))(v104 + 16))(&v78[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(v77 + 56) + *(void *)(v104 + 72) * v74, v59);
              uint64_t v79 = 0;
              uint64_t v70 = v110;
              goto LABEL_61;
            }
            uint64_t v73 = 0;
            uint64_t v79 = 1;
            int64_t v75 = v72 + 2;
          }
        }
      }
LABEL_60:
      Swift::UInt v78 = v92;
LABEL_61:
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v120)(v78, v79, 1, TupleTypeMetadata2);
      uint64_t v81 = v95;
      (*v70)();
      if ((*v111)(v81, 1, TupleTypeMetadata2) == 1)
      {
        outlined consume of Set<EventID>.Iterator._Variant();
        return v123;
      }
      uint64_t v82 = &v81[*(int *)(TupleTypeMetadata2 + 48)];
      (*v118)(v100, v81, v122);
      (*v117)(v101, v82, v59);
      if (v71 == 0x8000000000000000) {
        goto LABEL_84;
      }
      if (v71 <= 0x3F && ((v113 >> v71) & 1) != 0)
      {
        (*v121)(v90, v100, v122);
        uint64_t v83 = v91;
        (*v105)(v91, v101, v59);
        ((void (*)(char *, void, uint64_t, uint64_t))*v107)(v83, 0, 1, v59);
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
      }
      (*v116)(v101, v59);
      (*v115)(v100, v122);
      ++v71;
      int64_t v72 = v75;
      unint64_t v64 = v73;
      unint64_t v65 = (unint64_t)v112;
    }
  }
  _forceBridgeFromObjectiveC<A>(_:_:)();
  swift_unknownObjectRelease();
  unint64_t v42 = a4;
  uint64_t v43 = v114;
  _forceBridgeFromObjectiveC<A>(_:_:)();
  swift_unknownObjectRelease();
  Swift::UInt v44 = v40;
  uint64_t v45 = v121;
  while (1)
  {
    ((void (*)(char *, void, uint64_t, uint64_t))*v119)(v31, 0, 1, TupleTypeMetadata2);
    uint64_t v53 = *(int *)(TupleTypeMetadata2 + 48);
    unint64_t v54 = (char *)v111;
    char v55 = (char *)v111 + v53;
    char v56 = &v31[v53];
    (*v118)((char *)v111, v31, v42);
    (*v117)(v55, v56, v43);
    uint64_t v57 = &v41[*(int *)(TupleTypeMetadata2 + 48)];
    (*v45)(v41, v54, v42);
    (*v44)(v57, v55, v43);
    LOBYTE(v55) = v109(v41, v57);
    (*v107)(v54, TupleTypeMetadata2);
    (*v116)(v57, v43);
    (*v115)(v41, v42);
    a4 = v42;
    int64_t v40 = v44;
    if (v55)
    {
      unint64_t v46 = v122;
      if ((v122 & 0x8000000000000000) != 0) {
        goto LABEL_84;
      }
      LODWORD(v99) = 0;
      uint64_t v58 = 1 << v122;
      if (v122 >= 0x40) {
        uint64_t v58 = 0;
      }
      v113 |= v58;
      unint64_t v35 = v108;
    }
    else
    {
      int v98 = 0;
      unint64_t v35 = v108;
      unint64_t v46 = v122;
    }
    unint64_t v122 = v46 + 1;
    if ((v35 & 0x8000000000000000) != 0) {
      goto LABEL_10;
    }
LABEL_14:
    if (v120)
    {
      unint64_t v47 = __clz(__rbit64(v120));
      v120 &= v120 - 1;
      unint64_t v48 = v47 | (v106 << 6);
      uint64_t v45 = v121;
      goto LABEL_28;
    }
    int64_t v49 = v106 + 1;
    uint64_t v45 = v121;
    if (__OFADD__(v106, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v49 >= v93) {
      goto LABEL_34;
    }
    unint64_t v50 = *(void *)(v94 + 8 * v49);
    int64_t v51 = v106 + 1;
    if (!v50)
    {
      int64_t v51 = v106 + 2;
      if (v106 + 2 >= v93) {
        goto LABEL_34;
      }
      unint64_t v50 = *(void *)(v94 + 8 * v51);
      if (!v50) {
        break;
      }
    }
LABEL_27:
    unint64_t v120 = (v50 - 1) & v50;
    unint64_t v48 = __clz(__rbit64(v50)) + (v51 << 6);
    int64_t v106 = v51;
LABEL_28:
    (*(void (**)(char *, unint64_t, unint64_t))(v103 + 16))(v31, *(void *)(v35 + 48) + *(void *)(v103 + 72) * v48, a4);
    Swift::UInt v44 = v105;
    TupleTypeMetadata2 = v102;
    unint64_t v42 = a4;
    uint64_t v43 = v114;
    (*(void (**)(char *, unint64_t, uint64_t))(v104 + 16))(&v31[*(int *)(v102 + 48)], *(void *)(v35 + 56) + *(void *)(v104 + 72) * v48, v114);
  }
  int64_t v52 = v106 + 3;
  if (v106 + 3 >= v93) {
    goto LABEL_34;
  }
  unint64_t v50 = *(void *)(v94 + 8 * v52);
  if (v50)
  {
    int64_t v51 = v106 + 3;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v51 = v52 + 1;
    if (__OFADD__(v52, 1)) {
      break;
    }
    if (v51 >= v93) {
      goto LABEL_34;
    }
    unint64_t v50 = *(void *)(v94 + 8 * v51);
    ++v52;
    if (v50) {
      goto LABEL_27;
    }
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Dictionary.init<A>(identifying:by:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v50 = a7;
  unint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v39 = a1;
  MEMORY[0x270FA5388](a1);
  unint64_t v46 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v45 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v26 = (char *)&v35 - v25;
  uint64_t v49 = a4;
  uint64_t v52 = Dictionary.init()();
  uint64_t v37 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v39, a6);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v38 = a6;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v27 = v51;
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  if (v28(v19, 1, a5) != 1)
  {
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v29 = v27 + 32;
    unint64_t v42 = (void (**)(char *, char *, uint64_t))(v29 - 16);
    uint64_t v43 = v30;
    uint64_t v51 = v29;
    int64_t v40 = (void (**)(char *, uint64_t))(v29 - 24);
    unint64_t v41 = (void (**)(char *, void, uint64_t, uint64_t))(v29 + 24);
    Swift::UInt v44 = v28;
    do
    {
      v43(v14, v19, a5);
      v47(v14);
      uint64_t v31 = v19;
      unint64_t v32 = v45;
      (*v42)(v45, v14, a5);
      (*v41)(v32, 0, 1, a5);
      type metadata accessor for Dictionary();
      uint64_t v19 = v31;
      uint64_t v33 = v44;
      Dictionary.subscript.setter();
      (*v40)(v14, a5);
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v33(v31, 1, a5) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, AssociatedTypeWitness);
  return v52;
}

char *readEnvironment(_:_:)(unsigned char *a1, char *a2)
{
  int v2 = *a1;
  if (v2 != 2) {
    return (char *)(v2 & 1);
  }
  uint64_t result = getenv(a2);
  if (result) {
    uint64_t result = (char *)(atoi(result) != 0);
  }
  *a1 = (_BYTE)result;
  return result;
}

uint64_t BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v157 = a4;
  uint64_t v158 = a2;
  uint64_t v159 = a3;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v115 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unsigned __int8 v129 = (char *)&v114 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v130 = type metadata accessor for Range();
  uint64_t v114 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  uint64_t v127 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v128 = (char *)&v114 - v13;
  swift_getAssociatedTypeWitness();
  uint64_t v119 = swift_getAssociatedConformanceWitness();
  uint64_t v122 = swift_getAssociatedTypeWitness();
  uint64_t v121 = *(void *)(v122 - 8);
  MEMORY[0x270FA5388](v122);
  unint64_t v120 = (char *)&v114 - v14;
  uint64_t v135 = swift_checkMetadataState();
  uint64_t v117 = *(void *)(v135 - 8);
  MEMORY[0x270FA5388](v135);
  uint64_t v126 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v116 = (char *)&v114 - v17;
  uint64_t v153 = AssociatedConformanceWitness;
  uint64_t v152 = type metadata accessor for PartialRangeFrom();
  uint64_t v138 = *(void *)(v152 - 8);
  MEMORY[0x270FA5388](v152);
  uint64_t v149 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v131 = (char *)&v114 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v139 = (char *)&v114 - v22;
  uint64_t v23 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v118 = (char *)&v114 - v24;
  uint64_t v148 = (void *)swift_getTupleTypeMetadata2();
  uint64_t v124 = type metadata accessor for Optional();
  uint64_t v123 = *(void *)(v124 - 8);
  MEMORY[0x270FA5388](v124);
  uint64_t v147 = (char *)&v114 - v25;
  uint64_t v125 = AssociatedTypeWitness;
  uint64_t v160 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v134 = (char *)&v114 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v133 = (char *)&v114 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v154 = (char *)&v114 - v31;
  MEMORY[0x270FA5388](v32);
  char v137 = (char *)&v114 - v33;
  uint64_t v34 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v34);
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = type metadata accessor for ReversedCollection();
  uint64_t v146 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v114 - v36;
  uint64_t WitnessTable = (void (*)(char *, uint64_t))swift_getWitnessTable();
  uint64_t v38 = type metadata accessor for Slice();
  uint64_t v141 = v38;
  uint64_t v145 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v140 = (char *)&v114 - v39;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v143 = (char *)v40;
  uint64_t v142 = (uint64_t *)swift_getWitnessTable();
  uint64_t v167 = v38;
  uint64_t v168 = v35;
  uint64_t v169 = v40;
  uint64_t v170 = v142;
  uint64_t v156 = type metadata accessor for Zip2Sequence();
  uint64_t v136 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156);
  uint64_t v155 = (char *)&v114 - v41;
  uint64_t v42 = v161;
  dispatch thunk of Collection.indices.getter();
  BidirectionalCollection.reversed()();
  uint64_t v43 = v140;
  Collection.dropFirst(_:)();
  uint64_t v132 = v5;
  dispatch thunk of Collection.indices.getter();
  Swift::UInt v44 = v155;
  BidirectionalCollection.reversed()();
  uint64_t v45 = v141;
  zip<A, B>(_:_:)();
  unint64_t v46 = v37;
  uint64_t v47 = v159;
  (*(void (**)(char *, uint64_t))(v146 + 8))(v46, v35);
  uint64_t v48 = v43;
  uint64_t v49 = v156;
  uint64_t v50 = v147;
  (*(void (**)(char *, uint64_t))(v145 + 8))(v48, v45);
  uint64_t v151 = a1;
  uint64_t v162 = a1;
  uint64_t v163 = v158;
  uint64_t v164 = v47;
  uint64_t v165 = v157;
  uint64_t v166 = v42;
  swift_getWitnessTable();
  Sequence.first(where:)();
  uint64_t v51 = v148;
  int v52 = (*(uint64_t (**)(char *, uint64_t, void *))(*(v148 - 1) + 48))(v50, 1, v148);
  int v53 = v52;
  if (v52 == 1)
  {
    (*(void (**)(char *, uint64_t))(v136 + 8))(v44, v49);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v50, v124);
    return v53 != 1;
  }
  uint64_t WitnessTable = 0;
  uint64_t v54 = v47;
  LODWORD(v141) = v52;
  char v55 = &v50[*((int *)v51 + 12)];
  uint64_t v56 = v160;
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v160 + 32);
  uint64_t v146 = v160 + 32;
  uint64_t v58 = v137;
  uint64_t v59 = v125;
  v57(v137, v50, v125);
  unint64_t v60 = v154;
  uint64_t v148 = v57;
  v57(v154, v55, v59);
  uint64_t v143 = *(char **)(v153 + 8);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v62 = v58;
  uint64_t v63 = *(char **)(v56 + 16);
  uint64_t v145 = v56 + 16;
  uint64_t v147 = v63;
  ((void (*)(char *, char *, uint64_t))v63)(v139, v60, v59);
  uint64_t v64 = v152;
  swift_getWitnessTable();
  unint64_t v65 = v116;
  uint64_t v66 = v151;
  uint64_t v67 = v54;
  uint64_t v68 = v161;
  MutableCollection.subscript.getter();
  uint64_t v69 = v120;
  uint64_t v70 = v135;
  dispatch thunk of Collection.indices.getter();
  uint64_t v71 = (*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v65, v70);
  uint64_t v142 = &v114;
  MEMORY[0x270FA5388](v71);
  uint64_t v73 = v157;
  uint64_t v72 = v158;
  *(&v114 - 6) = v66;
  *(&v114 - 5) = v72;
  *(&v114 - 4) = v67;
  *(&v114 - 3) = v73;
  *(&v114 - 2) = v68;
  *(&v114 - 1) = (uint64_t)v62;
  uint64_t v158 = swift_getAssociatedConformanceWitness();
  uint64_t v74 = v122;
  swift_getAssociatedConformanceWitness();
  int64_t v75 = v118;
  BidirectionalCollection.last(where:)();
  (*(void (**)(char *, uint64_t))(v121 + 8))(v69, v74);
  uint64_t v76 = v138 + 8;
  unint64_t v77 = *(void (**)(char *, uint64_t))(v138 + 8);
  v77(v139, v64);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v160 + 48))(v75, 1, v59);
  if (result != 1)
  {
    ((void (*)(char *, char *, uint64_t))v148)(v133, v75, v59);
    dispatch thunk of MutableCollection.swapAt(_:_:)();
    Swift::UInt v78 = v154;
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v79 = TupleTypeMetadata2;
    unint64_t v80 = v134;
    if (result)
    {
      uint64_t WitnessTable = v77;
      uint64_t v157 = v76;
      uint64_t v81 = v131;
      ((void (*)(char *, char *, uint64_t))v147)(v131, v78, v59);
      (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v149, v81, v152);
      dispatch thunk of Collection.endIndex.getter();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if (result)
      {
        uint64_t v82 = v129;
        uint64_t v83 = &v129[*(int *)(v79 + 48)];
        int64_t v84 = v80;
        uint64_t v85 = (void (*)(char *, char *, uint64_t))v147;
        ((void (*)(char *, char *, uint64_t))v147)(v129, v81, v59);
        unint64_t v86 = v83;
        uint64_t v143 = v83;
        uint64_t v87 = v84;
        uint64_t v88 = (void (*)(char *, char *, uint64_t))v148;
        ((void (*)(char *, char *, uint64_t))v148)(v83, v87, v59);
        uint64_t v89 = v115;
        uint64_t v90 = &v115[*(int *)(v79 + 48)];
        v85(v115, v82, v59);
        v85(v90, v86, v59);
        uint64_t v91 = v127;
        v88(v127, v89, v59);
        uint64_t v92 = v160 + 8;
        int64_t v93 = *(void (**)(char *, uint64_t))(v160 + 8);
        v93(v90, v59);
        unint64_t v94 = &v89[*(int *)(v79 + 48)];
        v88(v89, v82, v59);
        v88(v94, v143, v59);
        uint64_t v95 = v130;
        v88(&v91[*(int *)(v130 + 36)], v94, v59);
        uint64_t v143 = (char *)v93;
        uint64_t v160 = v92;
        v93(v89, v59);
        uint64_t v96 = v114;
        uint64_t v97 = *(char **)(v114 + 32);
        int v98 = v128;
        uint64_t v142 = (uint64_t *)(v114 + 32);
        uint64_t v140 = v97;
        ((void (*)(char *, char *, uint64_t))v97)(v128, v91, v95);
        dispatch thunk of Collection.subscript.getter();
        (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v95);
        swift_getAssociatedConformanceWitness();
        MutableCollection<>.reverse()();
        int64_t v99 = v134;
        dispatch thunk of Collection.endIndex.getter();
        uint64_t v100 = v149;
        uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
        if (result)
        {
          uint64_t v101 = v129;
          uint64_t v102 = v99;
          uint64_t v103 = TupleTypeMetadata2;
          uint64_t v104 = &v129[*(int *)(TupleTypeMetadata2 + 48)];
          uint64_t v105 = (void (*)(char *, char *, uint64_t))v147;
          ((void (*)(char *, char *, uint64_t))v147)(v129, v100, v59);
          int64_t v106 = (void (*)(char *, char *, uint64_t))v148;
          ((void (*)(char *, char *, uint64_t))v148)(v104, v102, v59);
          uint64_t v107 = &v89[*(int *)(v103 + 48)];
          v105(v89, v101, v59);
          v105(v107, v104, v59);
          int64_t v108 = v127;
          v106(v127, v89, v59);
          uint64_t v109 = (void (*)(char *, uint64_t))v143;
          ((void (*)(char *, uint64_t))v143)(v107, v59);
          uint64_t v110 = &v89[*(int *)(TupleTypeMetadata2 + 48)];
          v106(v89, v101, v59);
          v106(v110, v104, v59);
          uint64_t v111 = v130;
          v106(&v108[*(int *)(v130 + 36)], v110, v59);
          v109(v89, v59);
          ((void (*)(char *, char *, uint64_t))v140)(v128, v108, v111);
          uint64_t v112 = v152;
          unint64_t v113 = WitnessTable;
          WitnessTable(v149, v152);
          dispatch thunk of MutableCollection.subscript.setter();
          v113(v131, v112);
          v109(v133, v59);
          v109(v154, v59);
          (*(void (**)(char *, uint64_t))(v136 + 8))(v155, v156);
          v109(v137, v59);
          int v53 = v141;
          return v53 != 1;
        }
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t closure #1 in BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a6;
  uint64_t v38 = *(void *)(a4 + 8);
  uint64_t v40 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v36 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v41 = (char *)v33 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v39 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15.n128_f64[0] = MEMORY[0x270FA5388](v14);
  uint64_t v17 = *(int *)(v12 + 56);
  uint64_t v18 = (char *)v33 + v17 - v16;
  uint64_t v34 = (char *)v33 - v16;
  uint64_t v35 = v18;
  uint64_t v19 = a1;
  uint64_t v20 = a1 + v17;
  v33[0] = a1 + v17;
  v33[1] = a1;
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16);
  v22((char *)v33 - v16, v19, v10, v15);
  ((void (*)(char *, uint64_t, uint64_t))v22)(v18, v20, v10);
  uint64_t v23 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v24 = *(void (**)(char *))(v44 + 16);
  v24(v41);
  v23(v43, 0);
  uint64_t v25 = &v39[*(int *)(v12 + 56)];
  ((void (*)(void))v22)();
  ((void (*)(char *, void, uint64_t))v22)(v25, v33[0], v10);
  uint64_t v26 = dispatch thunk of Collection.subscript.read();
  uint64_t v27 = v36;
  uint64_t v28 = AssociatedTypeWitness;
  v24(v36);
  ((void (*)(unsigned char *, void))v26)(v43, 0);
  uint64_t v29 = v41;
  LOBYTE(v26) = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v44 + 8);
  v30(v27, v28);
  v30(v29, v28);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v31(v25, v10);
  v31(v39, v10);
  v31(v35, v10);
  v31(v34, v10);
  return v26 & 1;
}

uint64_t closure #2 in BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v19[2] = a3;
  v19[3] = a7;
  v19[1] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v19 - v12;
  uint64_t v14 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  __n128 v15 = *(void (**)(char *))(v8 + 16);
  v15(v13);
  v14(v20, 0);
  uint64_t v16 = dispatch thunk of Collection.subscript.read();
  v15(v10);
  ((void (*)(unsigned char *, void))v16)(v20, 0);
  LOBYTE(v16) = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, AssociatedTypeWitness);
  v17(v13, AssociatedTypeWitness);
  return v16 & 1;
}

uint64_t sub_245BECF6C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in bind<A>(_:_:)()
{
  return (*(uint64_t (**)(unint64_t))(v0 + 24))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
}

uint64_t type metadata accessor for Pair.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in Sequence.first<A>(ofType:)(uint64_t a1)
{
  return closure #1 in Sequence.first<A>(ofType:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t RandomAccessCollection<>.lowerBound(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  void v6[2] = a2;
  void v6[3] = a3;
  v6[4] = a4;
  v6[5] = a1;
  return RandomAccessCollection.lowerBound(_:)((uint64_t (*)(char *))partial apply for closure #1 in RandomAccessCollection<>.lowerBound(of:), (uint64_t)v6, a2, a3, a5);
}

uint64_t ClosedRange<>.offset(by:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = *(void **)(v3 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  __n128 v15 = (char *)&v27 - v14;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  uint64_t v28 = a1;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v17 = v5;
    uint64_t v18 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v27 = v12;
    uint64_t v19 = TupleTypeMetadata2;
    uint64_t v20 = &v8[v18];
    uint64_t v21 = (void (*)(char *, char *, uint64_t))v9[4];
    v21(v8, v15, v3);
    v21(v20, v27, v3);
    uint64_t v22 = &v17[*(int *)(v19 + 48)];
    uint64_t v23 = (void (*)(char *, char *, uint64_t))v9[2];
    v23(v17, v8, v3);
    v23(v22, v20, v3);
    uint64_t v24 = v29;
    v21(v29, v17, v3);
    uint64_t v25 = (void (*)(char *, uint64_t))v9[1];
    v25(v22, v3);
    uint64_t v26 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
    v21(v17, v8, v3);
    v21(v26, v20, v3);
    v21(&v24[*(int *)(v28 + 36)], v26, v3);
    return ((uint64_t (*)(char *, uint64_t))v25)(v17, v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ClosedRange.init(bounds:_:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v39 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v40 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v35 = (char *)v34 - v11;
  uint64_t v12 = *(void **)(a3 - 8);
  MEMORY[0x270FA5388](v13);
  __n128 v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v34 - v17;
  min<A>(_:_:)();
  max<A>(_:_:)();
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v20 = (uint64_t (*)(char *, uint64_t))v12[1];
  uint64_t v36 = v20;
  v20(a2, a3);
  uint64_t v38 = v12 + 1;
  uint64_t result = v20(a1, a3);
  if (v19)
  {
    uint64_t v22 = TupleTypeMetadata2;
    uint64_t v23 = v35;
    uint64_t v24 = &v35[*(int *)(TupleTypeMetadata2 + 48)];
    v34[1] = a4;
    uint64_t v25 = (void (*)(char *, char *, uint64_t))v12[4];
    v25(v35, v18, a3);
    uint64_t v26 = v24;
    v34[0] = v24;
    v25(v24, v15, a3);
    uint64_t v27 = v40;
    uint64_t v28 = &v40[*(int *)(v22 + 48)];
    uint64_t v29 = (void (*)(char *, char *, uint64_t))v12[2];
    v29(v40, v23, a3);
    v29(v28, v26, a3);
    uint64_t v30 = v39;
    v25(v39, v27, a3);
    uint64_t v31 = v36;
    v36(v28, a3);
    uint64_t v32 = &v27[*(int *)(v22 + 48)];
    v25(v27, v23, a3);
    v25(v32, (char *)v34[0], a3);
    uint64_t v33 = type metadata accessor for ClosedRange();
    v25(&v30[*(int *)(v33 + 36)], v32, a3);
    return v31(v27, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ClosedRange.union(_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = *(void **)(v3 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  __n128 v15 = (char *)&v27 - v14;
  min<A>(_:_:)();
  max<A>(_:_:)();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v17 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v30 = a1;
    uint64_t v18 = (void (*)(char *, char *, uint64_t))v9[4];
    v18(v8, v15, v3);
    uint64_t v19 = TupleTypeMetadata2;
    uint64_t v28 = v17;
    uint64_t v29 = TupleTypeMetadata2;
    uint64_t v20 = v17;
    v18(v17, v12, v3);
    uint64_t v21 = v31;
    uint64_t v22 = &v31[*(int *)(v19 + 48)];
    uint64_t v23 = (void (*)(char *, char *, uint64_t))v9[2];
    v23(v31, v8, v3);
    v23(v22, v20, v3);
    uint64_t v24 = v32;
    v18(v32, v21, v3);
    uint64_t v25 = (void (*)(char *, uint64_t))v9[1];
    v25(v22, v3);
    uint64_t v26 = &v21[*(int *)(v29 + 48)];
    v18(v21, v8, v3);
    v18(v26, v28, v3);
    v18(&v24[*(int *)(v30 + 36)], v26, v3);
    return ((uint64_t (*)(char *, uint64_t))v25)(v21, v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Range.intersection(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v35 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v36 = (char *)&v33 - v6;
  uint64_t v40 = a1;
  uint64_t v38 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v3 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v33 - v15;
  max<A>(_:_:)();
  min<A>(_:_:)();
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
  {
    uint64_t v32 = (void (*)(char *, uint64_t))v10[1];
    v32(v13, v3);
    v32(v16, v3);
    uint64_t v31 = 1;
    uint64_t v29 = v39;
    uint64_t v28 = v40;
    uint64_t v30 = v38;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, v31, 1, v28);
  }
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v34 = v9;
    uint64_t v18 = v36;
    uint64_t v19 = TupleTypeMetadata2;
    uint64_t v20 = &v36[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v21 = (void (*)(char *, char *, uint64_t))v10[4];
    v21(v36, v16, v3);
    uint64_t v22 = v35;
    uint64_t v33 = v20;
    v21(v20, v13, v3);
    uint64_t v23 = &v22[*(int *)(v19 + 48)];
    uint64_t v24 = (void (*)(char *, char *, uint64_t))v10[2];
    v24(v22, v18, v3);
    v24(v23, v20, v3);
    uint64_t v25 = v34;
    v21(v34, v22, v3);
    uint64_t v26 = (void (*)(char *, uint64_t))v10[1];
    v26(v23, v3);
    uint64_t v27 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
    v21(v22, v18, v3);
    v21(v27, v33, v3);
    uint64_t v28 = v40;
    v21(&v25[*(int *)(v40 + 36)], v27, v3);
    v26(v22, v3);
    uint64_t v30 = v38;
    uint64_t v29 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v39, v25, v28);
    uint64_t v31 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, v31, 1, v28);
  }
  __break(1u);
  return result;
}

uint64_t Range<>.length.getter()
{
  return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
}

uint64_t static ClosedRange<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char *a5@<X8>)
{
  return static ClosedRange<>.+ infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF20], a5);
}

uint64_t static ClosedRange<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char *a5@<X8>)
{
  return static ClosedRange<>.+ infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF28], a5);
}

uint64_t static ClosedRange<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, double)@<X5>, char *a6@<X8>)
{
  uint64_t v39 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v35 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v38 = (char *)&v34 - v14;
  uint64_t v36 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v22 = *(void *)(a4 + 8);
  a5(a1, a2, a3, v22, v19);
  uint64_t v37 = type metadata accessor for ClosedRange();
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a5)(a1 + *(int *)(v37 + 36), a2, a3, v22);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v24 = v38;
    uint64_t v25 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v26 = v36;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    v27(v38, v21, a3);
    v27(v25, v17, a3);
    uint64_t v28 = v35;
    uint64_t v29 = &v35[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v34 = TupleTypeMetadata2;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v30(v35, v24, a3);
    v30(v29, v25, a3);
    uint64_t v31 = v39;
    v27(v39, v28, a3);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v26 + 8);
    v32(v29, a3);
    uint64_t v33 = &v28[*(int *)(v34 + 48)];
    v27(v28, v24, a3);
    v27(v33, v25, a3);
    v27(&v31[*(int *)(v37 + 36)], v33, a3);
    return ((uint64_t (*)(char *, uint64_t))v32)(v28, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ClosedRange<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ClosedRange<>.+= infix(_:_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))static ClosedRange<>.+ infix(_:_:));
}

uint64_t static ClosedRange<>.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ClosedRange<>.+= infix(_:_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))static ClosedRange<>.- infix(_:_:));
}

uint64_t static ClosedRange<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))
{
  uint64_t v12 = type metadata accessor for ClosedRange();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v18 - v15;
  a6(a1, a2, a3, a4, a5, v14);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v16, v12);
}

uint64_t ClosedRange<>.progress(at:countdown:)()
{
  Date.timeIntervalSinceReferenceDate.getter();
  double v1 = v0;
  type metadata accessor for ClosedRange<Date>();
  uint64_t result = Date.timeIntervalSinceReferenceDate.getter();
  if (v1 <= v3) {
    return Date.timeIntervalSinceReferenceDate.getter();
  }
  __break(1u);
  return result;
}

uint64_t CollectionOfTwo.startIndex.getter()
{
  return 0;
}

uint64_t CollectionOfTwo.endIndex.getter()
{
  return 2;
}

uint64_t CollectionOfTwo.elements.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8.n128_f64[0] = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v12 = *(int *)(v11 + 56);
  uint64_t v13 = &v10[v12];
  uint64_t v14 = v3 + v12;
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
  v16(v10, v3, v6, v8);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v13, v14, v6);
  uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v17(a1, v10, v6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(a2, v13, v6);
}

uint64_t CollectionOfTwo.elements.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = (char *)&v21 + *(int *)(v7 + 56) - v12;
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 32);
  v16((char *)&v21 - v12, a1, v5, v11);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v14, a2, v5);
  uint64_t v17 = &v9[*(int *)(v7 + 56)];
  ((void (*)(char *, char *, uint64_t))v16)(v9, v13, v5);
  ((void (*)(char *, char *, uint64_t))v16)(v17, v14, v5);
  uint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 40);
  uint64_t v19 = v22;
  v18(v22, v9, v5);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(v19 + *(int *)(v7 + 56), v17, v5);
}

uint64_t (*CollectionOfTwo.elements.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CollectionOfTwo.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10.n128_f64[0] = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v23 - v11;
  if (a1 == 1)
  {
    uint64_t v13 = *(int *)(v9 + 48);
    uint64_t v14 = &v12[v13];
    uint64_t v15 = v4 + v13;
    uint64_t v16 = *(void *)(v7 - 8);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
    v17(v12, v4, v7, v10);
    ((void (*)(char *, uint64_t, uint64_t))v17)(v14, v15, v7);
LABEL_5:
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a3, v14, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v12, v7);
  }
  if (!a1)
  {
    uint64_t v18 = *(int *)(v9 + 48);
    uint64_t v19 = &v12[v18];
    uint64_t v20 = v4 + v18;
    uint64_t v16 = *(void *)(v7 - 8);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
    v21(v12, v4, v7, v10);
    ((void (*)(char *, uint64_t, uint64_t))v21)(v19, v20, v7);
    uint64_t v14 = v12;
    uint64_t v12 = v19;
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t key path setter for CollectionOfTwo.subscript(_:) : <A>CollectionOfTwo<A>A(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v9 - v2;
  uint64_t v5 = *v4;
  (*(void (**)(char *, double))(v6 + 16))((char *)&v9 - v2, v1);
  uint64_t v7 = type metadata accessor for CollectionOfTwo();
  return CollectionOfTwo.subscript.setter((uint64_t)v3, v5, v7);
}

uint64_t CollectionOfTwo.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 1)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = v3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
    uint64_t v8 = a1;
    uint64_t v9 = v5;
  }
  else
  {
    if (a2)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v9 = *(void *)(a3 + 16);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40);
    uint64_t v6 = v3;
    uint64_t v8 = a1;
  }

  return v7(v6, v8, v9);
}

void (*CollectionOfTwo.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  void *v7 = a2;
  v7[1] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  _OWORD v7[2] = v3;
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  _OWORD v7[5] = malloc(v10);
  uint64_t v11 = malloc(v10);
  void v7[6] = v11;
  CollectionOfTwo.subscript.getter(a2, a3, (uint64_t)v11);
  return CollectionOfTwo.subscript.modify;
}

void CollectionOfTwo.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  if (a2)
  {
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[4];
    uint64_t v7 = v2[1];
    uint64_t v8 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    CollectionOfTwo.subscript.setter((uint64_t)v3, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    CollectionOfTwo.subscript.setter((*a1)[6], *v2, v2[1]);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return CollectionOfTwo.subscript.setter(a1, *a2, a3);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance CollectionOfTwo<A>(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = CollectionOfTwo.subscript.modify(v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance CollectionOfTwo<A>(uint64_t a1)
{
  specialized MutableCollection<>.subscript.setter();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Slice();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance CollectionOfTwo<A>()
{
  return MutableCollection<>.partition(by:)();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E060](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionOfTwo<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionOfTwo<A>(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance CollectionOfTwo<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

void protocol witness for Collection.endIndex.getter in conformance CollectionOfTwo<A>(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CollectionOfTwo<A>(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = CollectionOfTwo.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

uint64_t (*CollectionOfTwo.subscript.read(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = *(void *)(a3 + 16);
  *a1 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = v8;
  CollectionOfTwo.subscript.getter(a2, a3, (uint64_t)v8);
  return CountingIndexCollection.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance CollectionOfTwo<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MutableCollection<>.subscript.getter(a1, a2, WitnessTable, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance CollectionOfTwo<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance CollectionOfTwo<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance CollectionOfTwo<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionOfTwo<A>(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionOfTwo<A>(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance CollectionOfTwo<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v3, a1);
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for IndexingIterator();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CollectionOfTwo<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CollectionOfTwo<A>()
{
  swift_getWitnessTable();

  return Collection._copyToContiguousArray()();
}

BOOL conformsToProtocol(_:_:)()
{
  return swift_conformsToProtocol() != 0;
}

uint64_t String.isNewLineOrReturn.getter(uint64_t a1, uint64_t a2)
{
  if (a1 == 10 && a2 == 0xE100000000000000) {
    return 1;
  }
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v5 = a1 == 13 && a2 == 0xE100000000000000;
  BOOL v6 = v5;
  if ((v4 & 1) != 0 || v6) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id one-time initialization function for roundingFormatter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A30]), sel_init);
  objc_msgSend(v0, sel_setMinimumFractionDigits_, 1);
  id result = objc_msgSend(v0, sel_setMaximumFractionDigits_, 3);
  roundingFormatter.super.super.Class isa = (Class)v0;
  return result;
}

void specialized BinaryFloatingPoint.roundedForDisplay()()
{
  if (one-time initialization token for roundingFormatter != -1) {
    swift_once();
  }
  __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
}

Swift::Void __swiftcall DefaultStringInterpolation.appendInterpolation(rounding:)(Swift::Float rounding)
{
  if (one-time initialization token for roundingFormatter != -1) {
    swift_once();
  }
  Class isa = roundingFormatter.super.super.isa;
  specialized BinaryFloatingPoint.roundedForDisplay()();
  int v3 = v2;
  id v4 = objc_allocWithZone(NSNumber);
  LODWORD(v5) = v3;
  id v6 = objc_msgSend(v4, sel_initWithFloat_, v5);
  id v7 = [(objc_class *)isa stringFromNumber:v6];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    size_t v10 = v9;

    v11._uint64_t countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall DefaultStringInterpolation.appendInterpolation(rounding:)(Swift::Double rounding)
{
  if (one-time initialization token for roundingFormatter != -1) {
    swift_once();
  }
  Class isa = roundingFormatter.super.super.isa;
  double v3 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v4 = round(v3 * rounding) / v3;
  if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v5 = v4;
  }
  else {
    double v5 = 0.0;
  }
  id v6 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v5);
  id v7 = [(objc_class *)isa stringFromNumber:v6];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    size_t v10 = v9;

    v11._uint64_t countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void DefaultStringInterpolation.appendInterpolation(rounding:)(__n128 a1)
{
  if (one-time initialization token for roundingFormatter != -1) {
    swift_once();
  }
  Class isa = roundingFormatter.super.super.isa;
  double v2 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v3 = round(v25.f64[0] * v2) / v2;
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v4 = v3;
  }
  else {
    double v4 = 0.0;
  }
  id v5 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v4);
  id v6 = [(objc_class *)isa stringFromNumber:v5];

  if (!v6)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  Class v12 = roundingFormatter.super.super.isa;
  double v13 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v14 = round(vmuld_lane_f64(v13, v25, 1)) / v13;
  if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v15 = v14;
  }
  else {
    double v15 = 0.0;
  }
  id v16 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v15);
  id v17 = [(objc_class *)v12 stringFromNumber:v16];

  if (!v17) {
    goto LABEL_15;
  }
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 40;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);

  swift_bridgeObjectRelease();
}

void DefaultStringInterpolation.appendInterpolation(rounding:)(float64x2_t a1, __n128 a2)
{
  if (one-time initialization token for roundingFormatter != -1) {
    swift_once();
  }
  Class isa = roundingFormatter.super.super.isa;
  double v3 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v4 = round(a1.f64[0] * v3) / v3;
  if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v5 = v4;
  }
  else {
    double v5 = 0.0;
  }
  id v6 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v5);
  id v7 = [(objc_class *)isa stringFromNumber:v6];

  if (!v7)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  Class v13 = roundingFormatter.super.super.isa;
  double v14 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v15 = round(vmuld_lane_f64(v14, a1, 1)) / v14;
  if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v16 = v15;
  }
  else {
    double v16 = 0.0;
  }
  id v17 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v16);
  id v18 = [(objc_class *)v13 stringFromNumber:v17];

  if (!v18) {
    goto LABEL_19;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v21 = v20;

  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  Class v24 = roundingFormatter.super.super.isa;
  double v25 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v26 = round(v25 * v37) / v25;
  if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v27 = v26;
  }
  else {
    double v27 = 0.0;
  }
  id v28 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v27);
  id v29 = [(objc_class *)v24 stringFromNumber:v28];

  if (!v29) {
    goto LABEL_20;
  }
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  v33._uint64_t countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = 41;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 40;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);

  swift_bridgeObjectRelease();
}

{
  Class isa;
  double v3;
  double v4;
  double v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Class v13;
  double v14;
  double v15;
  double v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Class v24;
  double v25;
  double v26;
  double v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Class v35;
  double v36;
  double v37;
  double v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  float64x2_t v48;
  uint64_t vars8;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  if (one-time initialization token for roundingFormatter != -1) {
    swift_once();
  }
  Class isa = roundingFormatter.super.super.isa;
  double v3 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v4 = round(a1.f64[0] * v3) / v3;
  if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v5 = v4;
  }
  else {
    double v5 = 0.0;
  }
  id v6 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v5);
  id v7 = [(objc_class *)isa stringFromNumber:v6];

  if (!v7)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  Class v13 = roundingFormatter.super.super.isa;
  double v14 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v15 = round(vmuld_lane_f64(v14, a1, 1)) / v14;
  if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v16 = v15;
  }
  else {
    double v16 = 0.0;
  }
  id v17 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v16);
  id v18 = [(objc_class *)v13 stringFromNumber:v17];

  if (!v18) {
    goto LABEL_23;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v21 = v20;

  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  Class v24 = roundingFormatter.super.super.isa;
  double v25 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v26 = round(v25 * v48.f64[0]) / v25;
  if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v27 = v26;
  }
  else {
    double v27 = 0.0;
  }
  id v28 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v27);
  id v29 = [(objc_class *)v24 stringFromNumber:v28];

  if (!v29) {
    goto LABEL_24;
  }
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  v33._uint64_t countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = 8236;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  Swift::String v35 = roundingFormatter.super.super.isa;
  uint64_t v36 = __exp10((double)(uint64_t)[(objc_class *)roundingFormatter.super.super.isa maximumFractionDigits]);
  double v37 = round(vmuld_lane_f64(v36, v48, 1)) / v36;
  if ((*(void *)&v37 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0.0;
  }
  uint64_t v39 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v38);
  uint64_t v40 = [(objc_class *)v35 stringFromNumber:v39];

  if (!v40) {
    goto LABEL_25;
  }
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;

  v44._uint64_t countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = 41;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v46._uint64_t countAndFlagsBits = 40;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);

  swift_bridgeObjectRelease();
}

uint64_t Sequence.sorted<A>(by:)()
{
  return Sequence.sorted(by:)();
}

uint64_t closure #1 in Sequence.sorted<A>(by:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*MEMORY[0x263F8EA20] + *a3 + 8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v13 - v8;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  char v10 = dispatch thunk of static Comparable.< infix(_:_:)();
  Swift::String v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  v11(v9, v3);
  return v10 & 1;
}

uint64_t Array.sort<A>(by:reversed:)()
{
  return MutableCollection<>.sort(by:)();
}

uint64_t closure #1 in Array.sort<A>(by:reversed:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v5 = *(void *)(*MEMORY[0x263F8EA20] + *a4 + 8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  Swift::String v11 = (char *)v17 - v10;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  Swift::String v12 = (void (**)(char *, uint64_t))(v6 + 8);
  if (a3) {
    char v13 = dispatch thunk of static Comparable.> infix(_:_:)();
  }
  else {
    char v13 = dispatch thunk of static Comparable.< infix(_:_:)();
  }
  char v14 = v13;
  double v15 = *v12;
  (*v12)(v8, v5);
  v15(v11, v5);
  return v14 & 1;
}

uint64_t Array<A>.removingDuplicates()()
{
  Dictionary.init()();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v0 = _ArrayProtocol.filter(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Array<A>.removeDuplicates()()
{
  uint64_t v1 = Array<A>.removingDuplicates()();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v0 = v1;
  return result;
}

uint64_t EquatableOptionalObject.wrappedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t EquatableOptionalObject.wrappedValue.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*EquatableOptionalObject.wrappedValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t partial apply for closure #1 in BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1)
{
  return closure #1 in BidirectionalCollection<>.formNextLexicographicalPermutation()(a1, v1[6], v1[2], v1[3], v1[4], v1[5]) & 1;
}

uint64_t partial apply for closure #2 in BidirectionalCollection<>.formNextLexicographicalPermutation()(uint64_t a1)
{
  return closure #2 in BidirectionalCollection<>.formNextLexicographicalPermutation()(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]) & 1;
}

uint64_t partial apply for closure #1 in RandomAccessCollection<>.lowerBound(of:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t partial apply for closure #1 in Sequence.sorted<A>(by:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in Sequence.sorted<A>(by:)(a1, a2, *(void **)(v2 + 40)) & 1;
}

uint64_t partial apply for closure #1 in Array.sort<A>(by:reversed:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in Array.sort<A>(by:reversed:)(a1, a2, *(unsigned char *)(v2 + 24), *(void **)(v2 + 32)) & 1;
}

BOOL partial apply for closure #1 in Array<A>.removingDuplicates()()
{
  type metadata accessor for Dictionary();
  Dictionary.updateValue(_:forKey:)();
  return v1 == 2;
}

unint64_t lazy protocol witness table accessor for type ArrayID and conformance ArrayID()
{
  unint64_t result = lazy protocol witness table cache variable for type ArrayID and conformance ArrayID;
  if (!lazy protocol witness table cache variable for type ArrayID and conformance ArrayID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrayID and conformance ArrayID);
  }
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in UnsafeMutableBufferProjectionPointer<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in UnsafeMutableBufferProjectionPointer<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in UnsafeMutableBufferProjectionPointer<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in UnsafeMutableBufferProjectionPointer<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in UnsafeMutableBufferProjectionPointer<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in UnsafeMutableBufferProjectionPointer<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in CountingIndexCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CountingIndexCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in CountingIndexCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in <A> IndirectOptional<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in CollectionOfTwo<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in CollectionOfTwo<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in CollectionOfTwo<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in CollectionOfTwo<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CollectionOfTwo<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in CollectionOfTwo<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245BF0D00()
{
  return 16;
}

__n128 sub_245BF0D0C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245BF0D18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for IndirectOptional();
  return IndirectOptional.wrappedValue.getter(v2, a1);
}

uint64_t sub_245BF0D68()
{
  return 8;
}

void *sub_245BF0D74(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_245BF0D80@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = type metadata accessor for CollectionOfTwo();
  return CollectionOfTwo.subscript.getter(v3, v4, a2);
}

uint64_t sub_245BF0DD8()
{
  return 8;
}

ValueMetadata *type metadata accessor for ArrayID()
{
  return &type metadata for ArrayID;
}

uint64_t type metadata accessor for UnsafeMutableBufferProjectionPointer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for CountingIndexCollection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CountingIndexCollection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245BF11B8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        double v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CountingIndex(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v11 = *(unsigned char *)(v10 + 8);
    unint64_t v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v10;
    *(unsigned char *)(v12 + 8) = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithCopy for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

uint64_t initializeWithTake for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithTake for CountingIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

void *assignWithCopy for IndirectOptional(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for IndirectOptional(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndirectOptional(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IndirectOptional(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for IndirectOptional()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Cache3()
{
  swift_getTupleTypeMetadata2();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v3 = &v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Cache3(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v39 = *(void *)(a3 + 16);
  uint64_t v40 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v39 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v40 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v38 = *(void *)(v5 + 64) + v9;
  unint64_t v10 = v38 & ~(unint64_t)v9;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = v10 + v11;
  if (v8 | v6) {
    size_t v13 = v10 + v11;
  }
  else {
    size_t v13 = v12 + 1;
  }
  uint64_t v14 = (*(unsigned char *)(v5 + 80) | v9);
  uint64_t v15 = ~v14;
  size_t v16 = v13 + v14;
  if (v14 <= 7
    && ((*(_DWORD *)(v5 + 80) | v9) & 0x100000) == 0
    && ((v13 + v14 + ((v13 + v14) & ~v14)) & ~v14) + v13 <= 0x18)
  {
    unint64_t v36 = ~(unint64_t)v9;
    int v37 = v8 | v6;
    if (v8 | v6)
    {
      if (v6 >= v8)
      {
        if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(a2, v6, v39))
        {
LABEL_36:
          (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 16))(a1, a2, v39);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)a1 + v38) & v36, ((unint64_t)a2 + v38) & v36, v40);
          if (v37)
          {
            Class v24 = (unsigned char *)(((unint64_t)a1 + v16) & v15);
            double v25 = (unsigned __int8 *)(((unint64_t)a2 + v16) & v15);
            if (v6 >= v8)
            {
LABEL_38:
              if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v25, v6, v39)) {
                goto LABEL_59;
              }
              goto LABEL_55;
            }
LABEL_29:
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((unint64_t)&v25[v38] & v36, v8, v40))
            {
LABEL_59:
              (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(v24, v25, v39);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((unint64_t)&v24[v38] & v36, (unint64_t)&v25[v38] & v36, v40);
              if (v37)
              {
                id v29 = (unsigned char *)((unint64_t)&v24[v16] & v15);
                uint64_t v30 = (unsigned __int8 *)((unint64_t)&v25[v16] & v15);
                if (v6 >= v8)
                {
LABEL_61:
                  if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v30, v6, v39))
                  {
LABEL_79:
                    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(v29, v30, v39);
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((unint64_t)&v29[v38] & v36, (unint64_t)&v30[v38] & v36, v40);
                    if (!v37) {
                      v29[v12] = 0;
                    }
                    return a1;
                  }
LABEL_78:
                  memcpy(v29, v30, v13);
                  return a1;
                }
LABEL_57:
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((unint64_t)&v30[v38] & v36, v8, v40))goto LABEL_79; {
                goto LABEL_78;
                }
              }
              v24[v12] = 0;
              id v29 = (unsigned char *)((unint64_t)&v24[v16] & v15);
              uint64_t v30 = (unsigned __int8 *)((unint64_t)&v25[v16] & v15);
              goto LABEL_64;
            }
LABEL_55:
            memcpy(v24, v25, v13);
            id v29 = (unsigned char *)((unint64_t)&v24[v16] & v15);
            uint64_t v30 = (unsigned __int8 *)((unint64_t)&v25[v16] & v15);
            if (v37)
            {
              if (v6 >= v8) {
                goto LABEL_61;
              }
              goto LABEL_57;
            }
LABEL_64:
            if (!v30[v12]) {
              goto LABEL_79;
            }
            int v31 = (v30[v12] - 1) << (8 * v12);
            if (v12 > 3) {
              int v31 = 0;
            }
            if (v12)
            {
              int v32 = v12 <= 3 ? v12 : 4;
              switch(v32)
              {
                case 2:
                  int v33 = *(unsigned __int16 *)v30;
                  break;
                case 3:
                  int v33 = *(unsigned __int16 *)v30 | (v30[2] << 16);
                  break;
                case 4:
                  int v33 = *(_DWORD *)v30;
                  break;
                default:
                  int v33 = *v30;
                  break;
              }
            }
            else
            {
              int v33 = 0;
            }
            if ((v33 | v31) == 0xFFFFFFFF) {
              goto LABEL_79;
            }
            goto LABEL_78;
          }
          *((unsigned char *)a1 + v12) = 0;
          Class v24 = (unsigned char *)(((unint64_t)a1 + v16) & v15);
          double v25 = (unsigned __int8 *)(((unint64_t)a2 + v16) & v15);
          goto LABEL_41;
        }
      }
      else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a2 + v38) & v36, v8, v40))
      {
        goto LABEL_36;
      }
    }
    else
    {
      if (!*((unsigned char *)a2 + v12)) {
        goto LABEL_36;
      }
      int v21 = (*((unsigned __int8 *)a2 + v12) - 1) << (8 * v12);
      if (v12 > 3) {
        int v21 = 0;
      }
      if (v12)
      {
        int v22 = v12 <= 3 ? v12 : 4;
        switch(v22)
        {
          case 2:
            int v23 = *a2;
            break;
          case 3:
            int v23 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            int v23 = *(_DWORD *)a2;
            break;
          default:
            int v23 = *(unsigned __int8 *)a2;
            break;
        }
      }
      else
      {
        int v23 = 0;
      }
      if ((v23 | v21) == 0xFFFFFFFF) {
        goto LABEL_36;
      }
    }
    memcpy(a1, a2, v13);
    Class v24 = (unsigned char *)(((unint64_t)a1 + v16) & v15);
    double v25 = (unsigned __int8 *)(((unint64_t)a2 + v16) & v15);
    if (v37)
    {
      if (v6 >= v8) {
        goto LABEL_38;
      }
      goto LABEL_29;
    }
LABEL_41:
    if (!v25[v12]) {
      goto LABEL_59;
    }
    int v26 = (v25[v12] - 1) << (8 * v12);
    if (v12 > 3) {
      int v26 = 0;
    }
    if (v12)
    {
      int v27 = v12 <= 3 ? v12 : 4;
      switch(v27)
      {
        case 2:
          int v28 = *(unsigned __int16 *)v25;
          break;
        case 3:
          int v28 = *(unsigned __int16 *)v25 | (v25[2] << 16);
          break;
        case 4:
          int v28 = *(_DWORD *)v25;
          break;
        default:
          int v28 = *v25;
          break;
      }
    }
    else
    {
      int v28 = 0;
    }
    if ((v28 | v26) == 0xFFFFFFFF) {
      goto LABEL_59;
    }
    goto LABEL_55;
  }
  uint64_t v19 = *(void *)a2;
  *a1 = *(void *)a2;
  uint64_t v20 = v19 + ((v14 + 16) & v15);
  swift_retain();
  return (void *)v20;
}

uint64_t destroy for Cache3(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v34 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v34 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  int v8 = *(_DWORD *)(v6 + 80);
  unint64_t v32 = ~(unint64_t)v8;
  uint64_t v33 = v6;
  uint64_t v9 = *(void *)(v4 + 64) + v8;
  unint64_t v10 = (v9 & v32) + *(void *)(v6 + 64);
  int v11 = v7 | v5;
  if (v7 | v5)
  {
    if (v5 >= v7) {
      int v12 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(a1, v5, v34);
    }
    else {
      int v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)a1 + v9) & v32, v7, v3);
    }
    if (!v12)
    {
LABEL_15:
      (*(void (**)(unsigned __int16 *, uint64_t))(v4 + 8))(a1, v34);
      (*(void (**)(unint64_t, uint64_t))(v33 + 8))(((unint64_t)a1 + v9) & v32, v3);
    }
  }
  else
  {
    if (!*((unsigned char *)a1 + v10)) {
      goto LABEL_15;
    }
    int v13 = (*((unsigned __int8 *)a1 + v10) - 1) << (8 * v10);
    if (v10 > 3) {
      int v13 = 0;
    }
    if (v10)
    {
      int v14 = v10 <= 3 ? (v9 & v32) + *(_DWORD *)(v6 + 64) : 4;
      switch(v14)
      {
        case 2:
          int v15 = *a1;
          break;
        case 3:
          int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v15 = *(_DWORD *)a1;
          break;
        default:
          int v15 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v15 = 0;
    }
    if ((v15 | v13) == 0xFFFFFFFF) {
      goto LABEL_15;
    }
  }
  if (v11) {
    unint64_t v16 = v10;
  }
  else {
    unint64_t v16 = v10 + 1;
  }
  uint64_t v17 = *(unsigned __int8 *)(v4 + 80) | v8;
  uint64_t v18 = v16 + v17;
  uint64_t v19 = ~v17;
  uint64_t v20 = (unsigned __int16 *)(((unint64_t)a1 + v16 + v17) & ~v17);
  if (v11)
  {
    if (v5 >= v7) {
      int v21 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(v20, v5, v34);
    }
    else {
      int v21 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))(((unint64_t)v20 + v9) & v32, v7, v3);
    }
    if (!v21)
    {
LABEL_33:
      (*(void (**)(unsigned __int16 *, uint64_t))(v4 + 8))(v20, v34);
      (*(void (**)(unint64_t, uint64_t))(v33 + 8))(((unint64_t)v20 + v9) & v32, v3);
    }
  }
  else
  {
    if (!*((unsigned char *)v20 + v10)) {
      goto LABEL_33;
    }
    int v22 = (*((unsigned __int8 *)v20 + v10) - 1) << (8 * v10);
    if (v10 > 3) {
      int v22 = 0;
    }
    if (v10)
    {
      int v23 = v10 <= 3 ? v10 : 4;
      switch(v23)
      {
        case 2:
          int v24 = *v20;
          break;
        case 3:
          int v24 = *v20 | (*((unsigned __int8 *)v20 + 2) << 16);
          break;
        case 4:
          int v24 = *(_DWORD *)v20;
          break;
        default:
          int v24 = *(unsigned __int8 *)v20;
          break;
      }
    }
    else
    {
      int v24 = 0;
    }
    if ((v24 | v22) == 0xFFFFFFFF) {
      goto LABEL_33;
    }
  }
  double v25 = (unsigned __int16 *)(((unint64_t)v20 + v18) & v19);
  if (v11)
  {
    if (v5 >= v7) {
      uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(v25, v5, v34);
    }
    else {
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))(((unint64_t)v25 + v9) & v32, v7, v3);
    }
    if (result) {
      return result;
    }
LABEL_66:
    (*(void (**)(unsigned __int16 *, uint64_t))(v4 + 8))(v25, v34);
    int v31 = *(uint64_t (**)(unint64_t, uint64_t))(v33 + 8);
    return v31(((unint64_t)v25 + v9) & v32, v3);
  }
  if (!*((unsigned char *)v25 + v10)) {
    goto LABEL_66;
  }
  int v27 = (*((unsigned __int8 *)v25 + v10) - 1) << (8 * v10);
  if (v10 > 3) {
    int v27 = 0;
  }
  if (v10)
  {
    int v28 = v10 <= 3 ? v10 : 4;
    switch(v28)
    {
      case 2:
        int v29 = *v25;
        break;
      case 3:
        int v29 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
        break;
      case 4:
        int v29 = *(_DWORD *)v25;
        break;
      default:
        int v29 = *(unsigned __int8 *)v25;
        break;
    }
  }
  else
  {
    int v29 = 0;
  }
  int v30 = v29 | v27;
  uint64_t result = (v30 + 1);
  if (v30 == -1) {
    goto LABEL_66;
  }
  return result;
}

char *initializeWithCopy for Cache3(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v41 = *(void *)(a3 + 16);
  uint64_t v42 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v41 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v42 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v40 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v38 = *(void *)(v5 + 64) + v9;
  unint64_t v39 = ~(unint64_t)v9;
  size_t v10 = (v38 & v39) + *(void *)(v7 + 64);
  int v11 = v8 | v6;
  if (v8 | v6)
  {
    if (v6 >= v8) {
      int v12 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, v6, v41);
    }
    else {
      int v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48))((unint64_t)&a2[v38] & v39, v8, v42);
    }
    if (v12)
    {
LABEL_15:
      if (v11) {
        size_t v16 = v10;
      }
      else {
        size_t v16 = v10 + 1;
      }
      memcpy(a1, a2, v16);
      goto LABEL_26;
    }
  }
  else if (a2[v10])
  {
    int v13 = (a2[v10] - 1) << (8 * v10);
    if (v10 > 3) {
      int v13 = 0;
    }
    if (v10)
    {
      int v14 = v10 <= 3 ? v10 : 4;
      switch(v14)
      {
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          break;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
          int v15 = *(_DWORD *)a2;
          break;
        default:
          int v15 = *a2;
          break;
      }
    }
    else
    {
      int v15 = 0;
    }
    if ((v15 | v13) != 0xFFFFFFFF) {
      goto LABEL_15;
    }
  }
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v41);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16))((unint64_t)&a1[v38] & v39, (unint64_t)&a2[v38] & v39, v42);
  if (!v11) {
    a1[v10] = 0;
  }
LABEL_26:
  if (v11) {
    size_t v17 = v10;
  }
  else {
    size_t v17 = v10 + 1;
  }
  uint64_t v18 = *(unsigned __int8 *)(v5 + 80) | v9;
  unint64_t v36 = a1;
  size_t __n = v17;
  size_t v19 = v17 + v18;
  unint64_t v20 = (unint64_t)&a1[v17 + v18];
  uint64_t v21 = ~v18;
  int v22 = (void *)(v20 & ~v18);
  int v23 = (unsigned __int16 *)((unint64_t)&a2[v17 + v18] & ~v18);
  if (v11)
  {
    if (v6 >= v8) {
      int v24 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(v23, v6, v41);
    }
    else {
      int v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48))(((unint64_t)v23 + v38) & v39, v8, v42);
    }
    if (v24) {
      goto LABEL_43;
    }
  }
  else if (*((unsigned char *)v23 + v10))
  {
    int v25 = (*((unsigned __int8 *)v23 + v10) - 1) << (8 * v10);
    if (v10 > 3) {
      int v25 = 0;
    }
    if (v10)
    {
      int v26 = v10 <= 3 ? v10 : 4;
      switch(v26)
      {
        case 2:
          int v27 = *v23;
          break;
        case 3:
          int v27 = *v23 | (*((unsigned __int8 *)v23 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v23;
          break;
        default:
          int v27 = *(unsigned __int8 *)v23;
          break;
      }
    }
    else
    {
      int v27 = 0;
    }
    if ((v27 | v25) != 0xFFFFFFFF)
    {
LABEL_43:
      memcpy(v22, v23, __n);
      int v28 = (void *)(((unint64_t)v22 + v19) & v21);
      int v29 = (unsigned __int16 *)(((unint64_t)v23 + v19) & v21);
      if (!v11) {
        goto LABEL_58;
      }
      goto LABEL_52;
    }
  }
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 16))(v22, v23, v41);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16))(((unint64_t)v22 + v38) & v39, ((unint64_t)v23 + v38) & v39, v42);
  if (!v11)
  {
    *((unsigned char *)v22 + v10) = 0;
    int v28 = (void *)(((unint64_t)v22 + v19) & v21);
    int v29 = (unsigned __int16 *)(((unint64_t)v23 + v19) & v21);
LABEL_58:
    int v30 = v36;
    if (*((unsigned char *)v29 + v10))
    {
      int v32 = (*((unsigned __int8 *)v29 + v10) - 1) << (8 * v10);
      if (v10 > 3) {
        int v32 = 0;
      }
      if (v10)
      {
        int v33 = v10 <= 3 ? v10 : 4;
        switch(v33)
        {
          case 2:
            int v34 = *v29;
            break;
          case 3:
            int v34 = *v29 | (*((unsigned __int8 *)v29 + 2) << 16);
            break;
          case 4:
            int v34 = *(_DWORD *)v29;
            break;
          default:
            int v34 = *(unsigned __int8 *)v29;
            break;
        }
      }
      else
      {
        int v34 = 0;
      }
      if ((v34 | v32) != 0xFFFFFFFF) {
        goto LABEL_72;
      }
    }
    goto LABEL_73;
  }
  int v28 = (void *)(((unint64_t)v22 + v19) & v21);
  int v29 = (unsigned __int16 *)(((unint64_t)v23 + v19) & v21);
LABEL_52:
  int v30 = v36;
  if (v6 >= v8) {
    int v31 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(v29, v6, v41);
  }
  else {
    int v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48))(((unint64_t)v29 + v38) & v39, v8, v42);
  }
  if (v31)
  {
LABEL_72:
    memcpy(v28, v29, __n);
    return v30;
  }
LABEL_73:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 16))(v28, v29, v41);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16))(((unint64_t)v28 + v38) & v39, ((unint64_t)v29 + v38) & v39, v42);
  if (!v11) {
    *((unsigned char *)v28 + v10) = 0;
  }
  return v30;
}

void *assignWithCopy for Cache3(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v89 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v89 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v90 = v7;
  LODWORD(v10) = *(_DWORD *)(v7 + 80);
  unint64_t v88 = ~(unint64_t)v10;
  uint64_t v11 = v9 + v10;
  unint64_t v91 = (v11 & v88) + *(void *)(v7 + 64);
  int v12 = v8 | v6;
  uint64_t v84 = v5;
  uint64_t v85 = v11;
  unsigned int v82 = *(_DWORD *)(v5 + 84);
  unsigned int v87 = *(_DWORD *)(v7 + 84);
  if (!(v8 | v6))
  {
    uint64_t v18 = a1;
    if (*((unsigned char *)a1 + v91))
    {
      int v20 = ((v9 + v10) & ~v10) + *(_DWORD *)(*(void *)(v4 - 8) + 64);
      int v21 = (*((unsigned __int8 *)a1 + v91) - 1) << (8 * v91);
      if (v91 > 3) {
        int v21 = 0;
      }
      if (v91)
      {
        if (v91 <= 3) {
          int v22 = (v11 & v88) + *(_DWORD *)(v7 + 64);
        }
        else {
          int v22 = 4;
        }
        switch(v22)
        {
          case 2:
            int v20 = *a1;
            break;
          case 3:
            int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v20 = *(_DWORD *)a1;
            break;
          default:
            int v20 = *(unsigned __int8 *)a1;
            break;
        }
      }
      if ((v20 | v21) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v91)) {
          goto LABEL_107;
        }
        int v29 = (*((unsigned __int8 *)a2 + v91) - 1) << (8 * v91);
        int v30 = (v11 & v88) + *(_DWORD *)(v7 + 64);
        if (v91 > 3) {
          int v29 = 0;
        }
        if (v91)
        {
          if (v91 <= 3) {
            int v31 = (v11 & v88) + *(_DWORD *)(v7 + 64);
          }
          else {
            int v31 = 4;
          }
          switch(v31)
          {
            case 2:
              int v30 = *a2;
              break;
            case 3:
              int v30 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v30 = *(_DWORD *)a2;
              break;
            default:
              int v30 = *(unsigned __int8 *)a2;
              break;
          }
        }
        if ((v30 | v29) == 0xFFFFFFFF) {
          goto LABEL_107;
        }
        goto LABEL_46;
      }
    }
    if (!*((unsigned char *)a2 + v91)) {
      goto LABEL_50;
    }
    int v32 = (*((unsigned __int8 *)a2 + v91) - 1) << (8 * v91);
    if (v91 > 3) {
      int v32 = 0;
    }
    if (v91)
    {
      int v33 = v91 <= 3 ? (v11 & v88) + *(_DWORD *)(v7 + 64) : 4;
      switch(v33)
      {
        case 2:
          int v34 = *a2;
          break;
        case 3:
          int v34 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v34 = *(_DWORD *)a2;
          break;
        default:
          int v34 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v34 = 0;
    }
    if ((v34 | v32) == 0xFFFFFFFF)
    {
LABEL_50:
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 24))(v18, a2, v89);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 24))(((unint64_t)v18 + v11) & v88, ((unint64_t)a2 + v11) & v88, v4);
LABEL_51:
      uint64_t v36 = v87;
      goto LABEL_52;
    }
LABEL_45:
    (*(void (**)(void *, uint64_t))(v5 + 8))(v18, v89);
    (*(void (**)(unint64_t, uint64_t))(v90 + 8))(((unint64_t)v18 + v11) & v88, v4);
    goto LABEL_46;
  }
  if (v6 < v8)
  {
    int v14 = v8 | v6;
    int v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    int v16 = v15(((unint64_t)a1 + v11) & v88, v8, v4);
    uint64_t v17 = v8;
    uint64_t v18 = a1;
    uint64_t v5 = v84;
    int v19 = v15(((unint64_t)a2 + v11) & v88, v17, v4);
    int v12 = v14;
    if (v16) {
      goto LABEL_4;
    }
LABEL_16:
    if (!v19) {
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  char v23 = v10;
  uint64_t v10 = *(void *)(a3 + 24);
  int v24 = v8 | v6;
  int v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v18 = a1;
  int v26 = v25(a1, v6, v89);
  uint64_t v27 = v6;
  int v28 = v26;
  int v19 = v25(a2, v27, v89);
  int v12 = v24;
  uint64_t v4 = v10;
  LOBYTE(v10) = v23;
  if (!v28) {
    goto LABEL_16;
  }
LABEL_4:
  if (v19)
  {
LABEL_46:
    if (v12) {
      size_t v35 = v91;
    }
    else {
      size_t v35 = v91 + 1;
    }
    memcpy(v18, a2, v35);
    goto LABEL_51;
  }
LABEL_107:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 16))(v18, a2, v89);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 16))(((unint64_t)v18 + v11) & v88, ((unint64_t)a2 + v11) & v88, v4);
  uint64_t v36 = v87;
  if (!v12) {
    *((unsigned char *)v18 + v91) = 0;
  }
LABEL_52:
  if (v12) {
    size_t v37 = v91;
  }
  else {
    size_t v37 = v91 + 1;
  }
  uint64_t v38 = *(unsigned __int8 *)(v5 + 80) | v10;
  int v39 = v12;
  size_t __n = v37;
  size_t v40 = v37 + v38;
  uint64_t v41 = ~v38;
  uint64_t v42 = (unsigned __int16 *)(((unint64_t)v18 + v37 + v38) & ~v38);
  uint64_t v43 = (unsigned __int16 *)(((unint64_t)a2 + v37 + v38) & ~v38);
  uint64_t v83 = v18;
  uint64_t v86 = v4;
  int v81 = v39;
  if (!v39)
  {
    if (*((unsigned char *)v42 + v91))
    {
      int v48 = v91;
      int v49 = (*((unsigned __int8 *)v42 + v91) - 1) << (8 * v91);
      if (v91 > 3) {
        int v49 = 0;
      }
      if (v91)
      {
        if (v91 <= 3) {
          int v50 = v91;
        }
        else {
          int v50 = 4;
        }
        switch(v50)
        {
          case 2:
            int v48 = *v42;
            break;
          case 3:
            int v48 = *(unsigned __int16 *)(((unint64_t)v18 + v37 + v38) & ~v38) | (*(unsigned __int8 *)((((unint64_t)v18 + v37 + v38) & ~v38) + 2) << 16);
            break;
          case 4:
            int v48 = *(_DWORD *)v42;
            break;
          default:
            int v48 = *(unsigned __int8 *)v42;
            break;
        }
      }
      if ((v48 | v49) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)v43 + v91))
        {
          int v52 = (*((unsigned __int8 *)v43 + v91) - 1) << (8 * v91);
          int v53 = v91;
          if (v91 > 3) {
            int v52 = 0;
          }
          if (v91)
          {
            if (v91 <= 3) {
              int v54 = v91;
            }
            else {
              int v54 = 4;
            }
            switch(v54)
            {
              case 2:
                int v53 = *v43;
                break;
              case 3:
                int v53 = *v43 | (*((unsigned __int8 *)v43 + 2) << 16);
                break;
              case 4:
                int v53 = *(_DWORD *)v43;
                break;
              default:
                int v53 = *(unsigned __int8 *)v43;
                break;
            }
          }
          if ((v53 | v52) != 0xFFFFFFFF) {
            goto LABEL_70;
          }
        }
        goto LABEL_113;
      }
    }
    if (!*((unsigned char *)v43 + v91)) {
      goto LABEL_100;
    }
    int v55 = (*((unsigned __int8 *)v43 + v91) - 1) << (8 * v91);
    if (v91 > 3) {
      int v55 = 0;
    }
    if (v91)
    {
      if (v91 <= 3) {
        int v56 = v91;
      }
      else {
        int v56 = 4;
      }
      switch(v56)
      {
        case 2:
          int v57 = *v43;
          break;
        case 3:
          int v57 = *v43 | (*((unsigned __int8 *)v43 + 2) << 16);
          break;
        case 4:
          int v57 = *(_DWORD *)v43;
          break;
        default:
          int v57 = *(unsigned __int8 *)v43;
          break;
      }
    }
    else
    {
      int v57 = 0;
    }
    int v47 = (v57 | v55) + 1;
LABEL_98:
    uint64_t v18 = v83;
    if (v47)
    {
      (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(v42, v89);
      (*(void (**)(unint64_t, uint64_t))(v90 + 8))(((unint64_t)v42 + v11) & v88, v4);
      memcpy(v42, v43, __n);
      goto LABEL_101;
    }
LABEL_100:
    (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v5 + 24))(v42, v43, v89);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 24))(((unint64_t)v42 + v11) & v88, ((unint64_t)v43 + v11) & v88, v4);
LABEL_101:
    uint64_t v58 = v87;
    uint64_t v59 = (unsigned __int8 *)(((unint64_t)v42 + v40) & v41);
    unint64_t v60 = (unsigned __int8 *)(((unint64_t)v43 + v40) & v41);
    int v61 = v81;
    if (!v81) {
      goto LABEL_124;
    }
LABEL_115:
    if (v82 >= v58)
    {
      uint64_t v67 = *(uint64_t (**)(unsigned __int8 *, void, uint64_t))(v5 + 48);
      int v68 = v67(v59, v82, v89);
      int v66 = v67(v60, v82, v89);
      uint64_t v18 = v83;
      if (v68)
      {
LABEL_117:
        if (!v66)
        {
LABEL_118:
          uint64_t v11 = v85;
          uint64_t v4 = v86;
          uint64_t v5 = v84;
          goto LABEL_146;
        }
LABEL_122:
        memcpy(v59, v60, __n);
        return v18;
      }
    }
    else
    {
      uint64_t v62 = v4;
      uint64_t v63 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v90 + 48);
      uint64_t v64 = v58;
      int v65 = v63((unint64_t)&v59[v11] & v88, v58, v62);
      int v66 = v63((unint64_t)&v60[v11] & v88, v64, v62);
      uint64_t v18 = v83;
      if (v65) {
        goto LABEL_117;
      }
    }
    if (!v66) {
      goto LABEL_161;
    }
    goto LABEL_121;
  }
  if (v82 >= v36)
  {
    uint64_t v51 = *(uint64_t (**)(unsigned __int16 *, void, uint64_t))(v5 + 48);
    int v46 = v51(v42, v82, v89);
    uint64_t v5 = v84;
    int v47 = v51(v43, v82, v89);
  }
  else
  {
    uint64_t v44 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v90 + 48);
    uint64_t v45 = v36;
    int v46 = v44(((unint64_t)v42 + v11) & v88, v36, v4);
    int v47 = v44(((unint64_t)v43 + v11) & v88, v45, v4);
  }
  uint64_t v4 = v86;
  if (!v46) {
    goto LABEL_98;
  }
  if (v47)
  {
LABEL_70:
    memcpy(v42, v43, __n);
    uint64_t v18 = v83;
    goto LABEL_101;
  }
LABEL_113:
  (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v5 + 16))(v42, v43, v89);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 16))(((unint64_t)v42 + v11) & v88, ((unint64_t)v43 + v11) & v88, v4);
  if (v81)
  {
    uint64_t v59 = (unsigned __int8 *)(((unint64_t)v42 + v40) & v41);
    unint64_t v60 = (unsigned __int8 *)(((unint64_t)v43 + v40) & v41);
    int v61 = v81;
    uint64_t v58 = v87;
    goto LABEL_115;
  }
  *((unsigned char *)v42 + v91) = 0;
  uint64_t v59 = (unsigned __int8 *)(((unint64_t)v42 + v40) & v41);
  unint64_t v60 = (unsigned __int8 *)(((unint64_t)v43 + v40) & v41);
  uint64_t v18 = v83;
  int v61 = 0;
LABEL_124:
  char v69 = 8 * v91;
  if (!v59[v91]) {
    goto LABEL_148;
  }
  int v70 = (v59[v91] - 1) << v69;
  int v71 = v91;
  if (v91 > 3) {
    int v70 = 0;
  }
  if (v91)
  {
    if (v91 <= 3) {
      int v72 = v91;
    }
    else {
      int v72 = 4;
    }
    switch(v72)
    {
      case 2:
        int v71 = *(unsigned __int16 *)v59;
        break;
      case 3:
        int v71 = *(unsigned __int16 *)v59 | (v59[2] << 16);
        break;
      case 4:
        int v71 = *(_DWORD *)v59;
        break;
      default:
        int v71 = *v59;
        break;
    }
  }
  if ((v71 | v70) == 0xFFFFFFFF)
  {
LABEL_148:
    if (!v60[v91])
    {
LABEL_162:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 24))(v59, v60, v89);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 24))((unint64_t)&v59[v11] & v88, (unint64_t)&v60[v11] & v88, v4);
      return v18;
    }
    int v76 = (v60[v91] - 1) << v69;
    int v77 = v91;
    if (v91 > 3) {
      int v76 = 0;
    }
    if (v91)
    {
      if (v91 <= 3) {
        int v78 = v91;
      }
      else {
        int v78 = 4;
      }
      switch(v78)
      {
        case 2:
          int v77 = *(unsigned __int16 *)v60;
          break;
        case 3:
          int v77 = *(unsigned __int16 *)v60 | (v60[2] << 16);
          break;
        case 4:
          int v77 = *(_DWORD *)v60;
          break;
        default:
          int v77 = *v60;
          break;
      }
    }
    if ((v77 | v76) == 0xFFFFFFFF)
    {
LABEL_161:
      uint64_t v11 = v85;
      uint64_t v4 = v86;
      uint64_t v5 = v84;
      goto LABEL_162;
    }
LABEL_121:
    (*(void (**)(unsigned __int8 *, uint64_t))(v84 + 8))(v59, v89);
    (*(void (**)(unint64_t, uint64_t))(v90 + 8))((unint64_t)&v59[v85] & v88, v86);
    goto LABEL_122;
  }
  if (v60[v91])
  {
    int v73 = (v60[v91] - 1) << v69;
    int v74 = v91;
    if (v91 > 3) {
      int v73 = 0;
    }
    if (v91)
    {
      if (v91 <= 3) {
        int v75 = v91;
      }
      else {
        int v75 = 4;
      }
      switch(v75)
      {
        case 2:
          int v74 = *(unsigned __int16 *)v60;
          break;
        case 3:
          int v74 = *(unsigned __int16 *)v60 | (v60[2] << 16);
          break;
        case 4:
          int v74 = *(_DWORD *)v60;
          break;
        default:
          int v74 = *v60;
          break;
      }
    }
    if ((v74 | v73) == 0xFFFFFFFF) {
      goto LABEL_118;
    }
    goto LABEL_122;
  }
LABEL_146:
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(v59, v60, v89);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 16))((unint64_t)&v59[v11] & v88, (unint64_t)&v60[v11] & v88, v4);
  if (!v61) {
    v59[v91] = 0;
  }
  return v18;
}

char *initializeWithTake for Cache3(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v41 = *(void *)(a3 + 16);
  uint64_t v42 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v41 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v42 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v40 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v38 = *(void *)(v5 + 64) + v9;
  unint64_t v39 = ~(unint64_t)v9;
  size_t v10 = (v38 & v39) + *(void *)(v7 + 64);
  int v11 = v8 | v6;
  if (v8 | v6)
  {
    if (v6 >= v8) {
      int v12 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, v6, v41);
    }
    else {
      int v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48))((unint64_t)&a2[v38] & v39, v8, v42);
    }
    if (v12)
    {
LABEL_15:
      if (v11) {
        size_t v16 = v10;
      }
      else {
        size_t v16 = v10 + 1;
      }
      memcpy(a1, a2, v16);
      goto LABEL_26;
    }
  }
  else if (a2[v10])
  {
    int v13 = (a2[v10] - 1) << (8 * v10);
    if (v10 > 3) {
      int v13 = 0;
    }
    if (v10)
    {
      int v14 = v10 <= 3 ? v10 : 4;
      switch(v14)
      {
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          break;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
          int v15 = *(_DWORD *)a2;
          break;
        default:
          int v15 = *a2;
          break;
      }
    }
    else
    {
      int v15 = 0;
    }
    if ((v15 | v13) != 0xFFFFFFFF) {
      goto LABEL_15;
    }
  }
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v41);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 32))((unint64_t)&a1[v38] & v39, (unint64_t)&a2[v38] & v39, v42);
  if (!v11) {
    a1[v10] = 0;
  }
LABEL_26:
  if (v11) {
    size_t v17 = v10;
  }
  else {
    size_t v17 = v10 + 1;
  }
  uint64_t v18 = *(unsigned __int8 *)(v5 + 80) | v9;
  uint64_t v36 = a1;
  size_t __n = v17;
  size_t v19 = v17 + v18;
  unint64_t v20 = (unint64_t)&a1[v17 + v18];
  uint64_t v21 = ~v18;
  int v22 = (void *)(v20 & ~v18);
  char v23 = (unsigned __int16 *)((unint64_t)&a2[v17 + v18] & ~v18);
  if (v11)
  {
    if (v6 >= v8) {
      int v24 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(v23, v6, v41);
    }
    else {
      int v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48))(((unint64_t)v23 + v38) & v39, v8, v42);
    }
    if (v24) {
      goto LABEL_43;
    }
  }
  else if (*((unsigned char *)v23 + v10))
  {
    int v25 = (*((unsigned __int8 *)v23 + v10) - 1) << (8 * v10);
    if (v10 > 3) {
      int v25 = 0;
    }
    if (v10)
    {
      int v26 = v10 <= 3 ? v10 : 4;
      switch(v26)
      {
        case 2:
          int v27 = *v23;
          break;
        case 3:
          int v27 = *v23 | (*((unsigned __int8 *)v23 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v23;
          break;
        default:
          int v27 = *(unsigned __int8 *)v23;
          break;
      }
    }
    else
    {
      int v27 = 0;
    }
    if ((v27 | v25) != 0xFFFFFFFF)
    {
LABEL_43:
      memcpy(v22, v23, __n);
      int v28 = (void *)(((unint64_t)v22 + v19) & v21);
      int v29 = (unsigned __int16 *)(((unint64_t)v23 + v19) & v21);
      if (!v11) {
        goto LABEL_58;
      }
      goto LABEL_52;
    }
  }
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 32))(v22, v23, v41);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 32))(((unint64_t)v22 + v38) & v39, ((unint64_t)v23 + v38) & v39, v42);
  if (!v11)
  {
    *((unsigned char *)v22 + v10) = 0;
    int v28 = (void *)(((unint64_t)v22 + v19) & v21);
    int v29 = (unsigned __int16 *)(((unint64_t)v23 + v19) & v21);
LABEL_58:
    int v30 = v36;
    if (*((unsigned char *)v29 + v10))
    {
      int v32 = (*((unsigned __int8 *)v29 + v10) - 1) << (8 * v10);
      if (v10 > 3) {
        int v32 = 0;
      }
      if (v10)
      {
        int v33 = v10 <= 3 ? v10 : 4;
        switch(v33)
        {
          case 2:
            int v34 = *v29;
            break;
          case 3:
            int v34 = *v29 | (*((unsigned __int8 *)v29 + 2) << 16);
            break;
          case 4:
            int v34 = *(_DWORD *)v29;
            break;
          default:
            int v34 = *(unsigned __int8 *)v29;
            break;
        }
      }
      else
      {
        int v34 = 0;
      }
      if ((v34 | v32) != 0xFFFFFFFF) {
        goto LABEL_72;
      }
    }
    goto LABEL_73;
  }
  int v28 = (void *)(((unint64_t)v22 + v19) & v21);
  int v29 = (unsigned __int16 *)(((unint64_t)v23 + v19) & v21);
LABEL_52:
  int v30 = v36;
  if (v6 >= v8) {
    int v31 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(v29, v6, v41);
  }
  else {
    int v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48))(((unint64_t)v29 + v38) & v39, v8, v42);
  }
  if (v31)
  {
LABEL_72:
    memcpy(v28, v29, __n);
    return v30;
  }
LABEL_73:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 32))(v28, v29, v41);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 32))(((unint64_t)v28 + v38) & v39, ((unint64_t)v29 + v38) & v39, v42);
  if (!v11) {
    *((unsigned char *)v28 + v10) = 0;
  }
  return v30;
}

void *assignWithTake for Cache3(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v89 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v89 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v90 = v7;
  LODWORD(v10) = *(_DWORD *)(v7 + 80);
  unint64_t v88 = ~(unint64_t)v10;
  uint64_t v11 = v9 + v10;
  unint64_t v91 = (v11 & v88) + *(void *)(v7 + 64);
  int v12 = v8 | v6;
  uint64_t v84 = v5;
  uint64_t v85 = v11;
  unsigned int v82 = *(_DWORD *)(v5 + 84);
  unsigned int v87 = *(_DWORD *)(v7 + 84);
  if (!(v8 | v6))
  {
    uint64_t v18 = a1;
    if (*((unsigned char *)a1 + v91))
    {
      int v20 = ((v9 + v10) & ~v10) + *(_DWORD *)(*(void *)(v4 - 8) + 64);
      int v21 = (*((unsigned __int8 *)a1 + v91) - 1) << (8 * v91);
      if (v91 > 3) {
        int v21 = 0;
      }
      if (v91)
      {
        if (v91 <= 3) {
          int v22 = (v11 & v88) + *(_DWORD *)(v7 + 64);
        }
        else {
          int v22 = 4;
        }
        switch(v22)
        {
          case 2:
            int v20 = *a1;
            break;
          case 3:
            int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v20 = *(_DWORD *)a1;
            break;
          default:
            int v20 = *(unsigned __int8 *)a1;
            break;
        }
      }
      if ((v20 | v21) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v91)) {
          goto LABEL_107;
        }
        int v29 = (*((unsigned __int8 *)a2 + v91) - 1) << (8 * v91);
        int v30 = (v11 & v88) + *(_DWORD *)(v7 + 64);
        if (v91 > 3) {
          int v29 = 0;
        }
        if (v91)
        {
          if (v91 <= 3) {
            int v31 = (v11 & v88) + *(_DWORD *)(v7 + 64);
          }
          else {
            int v31 = 4;
          }
          switch(v31)
          {
            case 2:
              int v30 = *a2;
              break;
            case 3:
              int v30 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v30 = *(_DWORD *)a2;
              break;
            default:
              int v30 = *(unsigned __int8 *)a2;
              break;
          }
        }
        if ((v30 | v29) == 0xFFFFFFFF) {
          goto LABEL_107;
        }
        goto LABEL_46;
      }
    }
    if (!*((unsigned char *)a2 + v91)) {
      goto LABEL_50;
    }
    int v32 = (*((unsigned __int8 *)a2 + v91) - 1) << (8 * v91);
    if (v91 > 3) {
      int v32 = 0;
    }
    if (v91)
    {
      int v33 = v91 <= 3 ? (v11 & v88) + *(_DWORD *)(v7 + 64) : 4;
      switch(v33)
      {
        case 2:
          int v34 = *a2;
          break;
        case 3:
          int v34 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v34 = *(_DWORD *)a2;
          break;
        default:
          int v34 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v34 = 0;
    }
    if ((v34 | v32) == 0xFFFFFFFF)
    {
LABEL_50:
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 40))(v18, a2, v89);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 40))(((unint64_t)v18 + v11) & v88, ((unint64_t)a2 + v11) & v88, v4);
LABEL_51:
      uint64_t v36 = v87;
      goto LABEL_52;
    }
LABEL_45:
    (*(void (**)(void *, uint64_t))(v5 + 8))(v18, v89);
    (*(void (**)(unint64_t, uint64_t))(v90 + 8))(((unint64_t)v18 + v11) & v88, v4);
    goto LABEL_46;
  }
  if (v6 < v8)
  {
    int v14 = v8 | v6;
    int v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    int v16 = v15(((unint64_t)a1 + v11) & v88, v8, v4);
    uint64_t v17 = v8;
    uint64_t v18 = a1;
    uint64_t v5 = v84;
    int v19 = v15(((unint64_t)a2 + v11) & v88, v17, v4);
    int v12 = v14;
    if (v16) {
      goto LABEL_4;
    }
LABEL_16:
    if (!v19) {
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  char v23 = v10;
  uint64_t v10 = *(void *)(a3 + 24);
  int v24 = v8 | v6;
  int v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v18 = a1;
  int v26 = v25(a1, v6, v89);
  uint64_t v27 = v6;
  int v28 = v26;
  int v19 = v25(a2, v27, v89);
  int v12 = v24;
  uint64_t v4 = v10;
  LOBYTE(v10) = v23;
  if (!v28) {
    goto LABEL_16;
  }
LABEL_4:
  if (v19)
  {
LABEL_46:
    if (v12) {
      size_t v35 = v91;
    }
    else {
      size_t v35 = v91 + 1;
    }
    memcpy(v18, a2, v35);
    goto LABEL_51;
  }
LABEL_107:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 32))(v18, a2, v89);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 32))(((unint64_t)v18 + v11) & v88, ((unint64_t)a2 + v11) & v88, v4);
  uint64_t v36 = v87;
  if (!v12) {
    *((unsigned char *)v18 + v91) = 0;
  }
LABEL_52:
  if (v12) {
    size_t v37 = v91;
  }
  else {
    size_t v37 = v91 + 1;
  }
  uint64_t v38 = *(unsigned __int8 *)(v5 + 80) | v10;
  int v39 = v12;
  size_t __n = v37;
  size_t v40 = v37 + v38;
  uint64_t v41 = ~v38;
  uint64_t v42 = (unsigned __int16 *)(((unint64_t)v18 + v37 + v38) & ~v38);
  uint64_t v43 = (unsigned __int16 *)(((unint64_t)a2 + v37 + v38) & ~v38);
  uint64_t v83 = v18;
  uint64_t v86 = v4;
  int v81 = v39;
  if (!v39)
  {
    if (*((unsigned char *)v42 + v91))
    {
      int v48 = v91;
      int v49 = (*((unsigned __int8 *)v42 + v91) - 1) << (8 * v91);
      if (v91 > 3) {
        int v49 = 0;
      }
      if (v91)
      {
        if (v91 <= 3) {
          int v50 = v91;
        }
        else {
          int v50 = 4;
        }
        switch(v50)
        {
          case 2:
            int v48 = *v42;
            break;
          case 3:
            int v48 = *(unsigned __int16 *)(((unint64_t)v18 + v37 + v38) & ~v38) | (*(unsigned __int8 *)((((unint64_t)v18 + v37 + v38) & ~v38) + 2) << 16);
            break;
          case 4:
            int v48 = *(_DWORD *)v42;
            break;
          default:
            int v48 = *(unsigned __int8 *)v42;
            break;
        }
      }
      if ((v48 | v49) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)v43 + v91))
        {
          int v52 = (*((unsigned __int8 *)v43 + v91) - 1) << (8 * v91);
          int v53 = v91;
          if (v91 > 3) {
            int v52 = 0;
          }
          if (v91)
          {
            if (v91 <= 3) {
              int v54 = v91;
            }
            else {
              int v54 = 4;
            }
            switch(v54)
            {
              case 2:
                int v53 = *v43;
                break;
              case 3:
                int v53 = *v43 | (*((unsigned __int8 *)v43 + 2) << 16);
                break;
              case 4:
                int v53 = *(_DWORD *)v43;
                break;
              default:
                int v53 = *(unsigned __int8 *)v43;
                break;
            }
          }
          if ((v53 | v52) != 0xFFFFFFFF) {
            goto LABEL_70;
          }
        }
        goto LABEL_113;
      }
    }
    if (!*((unsigned char *)v43 + v91)) {
      goto LABEL_100;
    }
    int v55 = (*((unsigned __int8 *)v43 + v91) - 1) << (8 * v91);
    if (v91 > 3) {
      int v55 = 0;
    }
    if (v91)
    {
      if (v91 <= 3) {
        int v56 = v91;
      }
      else {
        int v56 = 4;
      }
      switch(v56)
      {
        case 2:
          int v57 = *v43;
          break;
        case 3:
          int v57 = *v43 | (*((unsigned __int8 *)v43 + 2) << 16);
          break;
        case 4:
          int v57 = *(_DWORD *)v43;
          break;
        default:
          int v57 = *(unsigned __int8 *)v43;
          break;
      }
    }
    else
    {
      int v57 = 0;
    }
    int v47 = (v57 | v55) + 1;
LABEL_98:
    uint64_t v18 = v83;
    if (v47)
    {
      (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(v42, v89);
      (*(void (**)(unint64_t, uint64_t))(v90 + 8))(((unint64_t)v42 + v11) & v88, v4);
      memcpy(v42, v43, __n);
      goto LABEL_101;
    }
LABEL_100:
    (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v5 + 40))(v42, v43, v89);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 40))(((unint64_t)v42 + v11) & v88, ((unint64_t)v43 + v11) & v88, v4);
LABEL_101:
    uint64_t v58 = v87;
    uint64_t v59 = (unsigned __int8 *)(((unint64_t)v42 + v40) & v41);
    unint64_t v60 = (unsigned __int8 *)(((unint64_t)v43 + v40) & v41);
    int v61 = v81;
    if (!v81) {
      goto LABEL_124;
    }
LABEL_115:
    if (v82 >= v58)
    {
      uint64_t v67 = *(uint64_t (**)(unsigned __int8 *, void, uint64_t))(v5 + 48);
      int v68 = v67(v59, v82, v89);
      int v66 = v67(v60, v82, v89);
      uint64_t v18 = v83;
      if (v68)
      {
LABEL_117:
        if (!v66)
        {
LABEL_118:
          uint64_t v11 = v85;
          uint64_t v4 = v86;
          uint64_t v5 = v84;
          goto LABEL_146;
        }
LABEL_122:
        memcpy(v59, v60, __n);
        return v18;
      }
    }
    else
    {
      uint64_t v62 = v4;
      uint64_t v63 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v90 + 48);
      uint64_t v64 = v58;
      int v65 = v63((unint64_t)&v59[v11] & v88, v58, v62);
      int v66 = v63((unint64_t)&v60[v11] & v88, v64, v62);
      uint64_t v18 = v83;
      if (v65) {
        goto LABEL_117;
      }
    }
    if (!v66) {
      goto LABEL_161;
    }
    goto LABEL_121;
  }
  if (v82 >= v36)
  {
    uint64_t v51 = *(uint64_t (**)(unsigned __int16 *, void, uint64_t))(v5 + 48);
    int v46 = v51(v42, v82, v89);
    uint64_t v5 = v84;
    int v47 = v51(v43, v82, v89);
  }
  else
  {
    uint64_t v44 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v90 + 48);
    uint64_t v45 = v36;
    int v46 = v44(((unint64_t)v42 + v11) & v88, v36, v4);
    int v47 = v44(((unint64_t)v43 + v11) & v88, v45, v4);
  }
  uint64_t v4 = v86;
  if (!v46) {
    goto LABEL_98;
  }
  if (v47)
  {
LABEL_70:
    memcpy(v42, v43, __n);
    uint64_t v18 = v83;
    goto LABEL_101;
  }
LABEL_113:
  (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v5 + 32))(v42, v43, v89);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 32))(((unint64_t)v42 + v11) & v88, ((unint64_t)v43 + v11) & v88, v4);
  if (v81)
  {
    uint64_t v59 = (unsigned __int8 *)(((unint64_t)v42 + v40) & v41);
    unint64_t v60 = (unsigned __int8 *)(((unint64_t)v43 + v40) & v41);
    int v61 = v81;
    uint64_t v58 = v87;
    goto LABEL_115;
  }
  *((unsigned char *)v42 + v91) = 0;
  uint64_t v59 = (unsigned __int8 *)(((unint64_t)v42 + v40) & v41);
  unint64_t v60 = (unsigned __int8 *)(((unint64_t)v43 + v40) & v41);
  uint64_t v18 = v83;
  int v61 = 0;
LABEL_124:
  char v69 = 8 * v91;
  if (!v59[v91]) {
    goto LABEL_148;
  }
  int v70 = (v59[v91] - 1) << v69;
  int v71 = v91;
  if (v91 > 3) {
    int v70 = 0;
  }
  if (v91)
  {
    if (v91 <= 3) {
      int v72 = v91;
    }
    else {
      int v72 = 4;
    }
    switch(v72)
    {
      case 2:
        int v71 = *(unsigned __int16 *)v59;
        break;
      case 3:
        int v71 = *(unsigned __int16 *)v59 | (v59[2] << 16);
        break;
      case 4:
        int v71 = *(_DWORD *)v59;
        break;
      default:
        int v71 = *v59;
        break;
    }
  }
  if ((v71 | v70) == 0xFFFFFFFF)
  {
LABEL_148:
    if (!v60[v91])
    {
LABEL_162:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 40))(v59, v60, v89);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 40))((unint64_t)&v59[v11] & v88, (unint64_t)&v60[v11] & v88, v4);
      return v18;
    }
    int v76 = (v60[v91] - 1) << v69;
    int v77 = v91;
    if (v91 > 3) {
      int v76 = 0;
    }
    if (v91)
    {
      if (v91 <= 3) {
        int v78 = v91;
      }
      else {
        int v78 = 4;
      }
      switch(v78)
      {
        case 2:
          int v77 = *(unsigned __int16 *)v60;
          break;
        case 3:
          int v77 = *(unsigned __int16 *)v60 | (v60[2] << 16);
          break;
        case 4:
          int v77 = *(_DWORD *)v60;
          break;
        default:
          int v77 = *v60;
          break;
      }
    }
    if ((v77 | v76) == 0xFFFFFFFF)
    {
LABEL_161:
      uint64_t v11 = v85;
      uint64_t v4 = v86;
      uint64_t v5 = v84;
      goto LABEL_162;
    }
LABEL_121:
    (*(void (**)(unsigned __int8 *, uint64_t))(v84 + 8))(v59, v89);
    (*(void (**)(unint64_t, uint64_t))(v90 + 8))((unint64_t)&v59[v85] & v88, v86);
    goto LABEL_122;
  }
  if (v60[v91])
  {
    int v73 = (v60[v91] - 1) << v69;
    int v74 = v91;
    if (v91 > 3) {
      int v73 = 0;
    }
    if (v91)
    {
      if (v91 <= 3) {
        int v75 = v91;
      }
      else {
        int v75 = 4;
      }
      switch(v75)
      {
        case 2:
          int v74 = *(unsigned __int16 *)v60;
          break;
        case 3:
          int v74 = *(unsigned __int16 *)v60 | (v60[2] << 16);
          break;
        case 4:
          int v74 = *(_DWORD *)v60;
          break;
        default:
          int v74 = *v60;
          break;
      }
    }
    if ((v74 | v73) == 0xFFFFFFFF) {
      goto LABEL_118;
    }
    goto LABEL_122;
  }
LABEL_146:
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v59, v60, v89);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v90 + 32))((unint64_t)&v59[v11] & v88, (unint64_t)&v60[v11] & v88, v4);
  if (!v61) {
    v59[v91] = 0;
  }
  return v18;
}

uint64_t getEnumTagSinglePayload for Cache3(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  if (v9 <= v5) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  int v12 = *(_DWORD *)(v7 + 80);
  if (v10) {
    uint64_t v13 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v7 + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(_DWORD *)(v7 + 80);
  uint64_t v15 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v14;
  int v16 = a2 - v11;
  if (a2 > v11)
  {
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80) | v12;
    uint64_t v18 = ((v13 + (v15 & ~v14) + v17 + ((v13 + (v15 & ~v14) + v17) & ~v17)) & ~v17) + v13 + (v15 & ~v14);
    char v19 = 8 * v18;
    if (v18 > 3) {
      goto LABEL_12;
    }
    unsigned int v21 = ((v16 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (v20) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v21 <= 0xFF)
      {
        if (v21 < 2) {
          goto LABEL_29;
        }
LABEL_12:
        int v20 = *((unsigned __int8 *)a1 + v18);
        if (!*((unsigned char *)a1 + v18)) {
          goto LABEL_29;
        }
LABEL_19:
        int v22 = (v20 - 1) << v19;
        if (v18 > 3) {
          int v22 = 0;
        }
        if (v18)
        {
          if (v18 <= 3) {
            int v23 = v18;
          }
          else {
            int v23 = 4;
          }
          switch(v23)
          {
            case 2:
              int v24 = *a1;
              break;
            case 3:
              int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v24 = *(_DWORD *)a1;
              break;
            default:
              int v24 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v24 = 0;
        }
        return v11 + (v24 | v22) + 1;
      }
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_19;
      }
    }
  }
LABEL_29:
  if (v10 < 2) {
    return 0;
  }
  if (v5 >= v9) {
    unsigned int v26 = (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    unsigned int v26 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v15) & ~v14, v9, v6);
  }
  if (v26 >= 2) {
    return v26 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Cache3(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(void *)(v10 + 64);
  if (v11 <= v8) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  if (v13) {
    unsigned int v14 = v13 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  uint64_t v15 = *(_DWORD *)(v10 + 80);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v15;
  size_t v17 = (v16 & ~v15) + v12;
  if (v13) {
    size_t v18 = (v16 & ~v15) + v12;
  }
  else {
    size_t v18 = v17 + 1;
  }
  uint64_t v19 = *(unsigned __int8 *)(v7 + 80) | *(_DWORD *)(v10 + 80);
  size_t v20 = ((v18 + v19 + ((v18 + v19) & ~v19)) & ~v19) + v18;
  BOOL v21 = a3 >= v14;
  unsigned int v22 = a3 - v14;
  if (v22 == 0 || !v21)
  {
LABEL_19:
    if (v14 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  if (v20 > 3)
  {
    int v6 = 1;
    if (v14 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  unsigned int v23 = ((v22 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
  if (!HIWORD(v23))
  {
    if (v23 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v23 > 1;
    }
    goto LABEL_19;
  }
  int v6 = 4;
  if (v14 < a2)
  {
LABEL_20:
    unsigned int v24 = ~v14 + a2;
    if (v20 < 4)
    {
      int v25 = (v24 >> (8 * v20)) + 1;
      if (v20)
      {
        int v26 = v24 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v20);
      *(_DWORD *)a1 = v24;
      int v25 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v20] = v25;
        return;
      case 2:
        *(_WORD *)&a1[v20] = v25;
        return;
      case 3:
        goto LABEL_63;
      case 4:
        *(_DWORD *)&a1[v20] = v25;
        return;
      default:
        return;
    }
  }
LABEL_27:
  uint64_t v27 = ~v15;
  switch(v6)
  {
    case 1:
      a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_63:
      __break(1u);
      JUMPOUT(0x245BF4C18);
    case 4:
      *(_DWORD *)&a1[v20] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v13 >= 2)
        {
          if (a2 + 1 <= v13)
          {
            if (a2 != -1)
            {
              if (v8 >= v11)
              {
                int v33 = *(void (**)(char *, uint64_t))(v7 + 56);
                uint64_t v34 = a2 + 1;
                v33(a1, v34);
              }
              else
              {
                int v31 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
                uint64_t v32 = a2 + 1;
                v31((unint64_t)&a1[v16] & v27, v32, v11, v9);
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v28 = ~(-1 << (8 * v17));
            }
            else {
              int v28 = -1;
            }
            if (v17)
            {
              int v29 = v28 & (a2 - v13);
              if (v17 <= 3) {
                int v30 = v17;
              }
              else {
                int v30 = 4;
              }
              bzero(a1, v17);
              switch(v30)
              {
                case 2:
                  *(_WORD *)a1 = v29;
                  break;
                case 3:
                  *(_WORD *)a1 = v29;
                  a1[2] = BYTE2(v29);
                  break;
                case 4:
                  *(_DWORD *)a1 = v29;
                  break;
                default:
                  *a1 = v29;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}