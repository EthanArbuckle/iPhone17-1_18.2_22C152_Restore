void *type metadata accessor for HorizontalAlignment.Center()
{
  return &unk_26FA5E4D8;
}

ValueMetadata *type metadata accessor for AlignmentKey.TypeCache()
{
  return &type metadata for AlignmentKey.TypeCache;
}

void *type metadata accessor for VerticalAlignment.Center()
{
  return &unk_26FA59458;
}

void *type metadata accessor for VerticalAlignment.FirstTextBaseline()
{
  return &unk_26FA59348;
}

void *type metadata accessor for VerticalAlignment.LastTextBaseline()
{
  return &unk_26FA59310;
}

void *type metadata accessor for VerticalAlignment.FirstTextLineCenter()
{
  return &unk_26FA59380;
}

void *type metadata accessor for HorizontalAlignment.LeadingText()
{
  return &unk_26FA5E490;
}

void *type metadata accessor for HorizontalAlignment.Leading()
{
  return &unk_26FA5E520;
}

void *type metadata accessor for HorizontalAlignment.Trailing()
{
  return &unk_26FA5E568;
}

void *type metadata accessor for HorizontalAlignment.LeadingListSeparator()
{
  return &unk_26FA8FD50;
}

void *type metadata accessor for HorizontalAlignment.TrailingListSeparator()
{
  return &unk_26FA8FD70;
}

void *type metadata accessor for VerticalAlignment.Top()
{
  return &unk_26FA593C8;
}

void *type metadata accessor for VerticalAlignment.Bottom()
{
  return &unk_26FA59410;
}

void *type metadata accessor for HorizontalAlignment.FormDetailLeading()
{
  return &unk_26FA8FD90;
}

uint64_t GraphHost.Data.$time.getter()
{
  return *(unsigned int *)(v0 + 28);
}

Swift::Void __swiftcall GraphHost.startTransactionUpdate()()
{
  *(unsigned char *)(v0 + 152) = 1;
  swift_beginAccess();
  AGGraphGetValue();
  AGGraphSetValue();
}

double GraphHost.Data.time.getter@<D0>(void *a1@<X8>)
{
  Value = (double *)AGGraphGetValue();
  double result = *Value;
  *a1 = *(void *)Value;
  return result;
}

uint64_t GraphHost.Data.time.setter()
{
  return AGGraphSetValue();
}

uint64_t GraphHost.finishTransactionUpdate(in:postUpdate:)(uint64_t a1, uint64_t (*a2)(BOOL))
{
  v4 = (uint64_t *)(v2 + 160);
  swift_beginAccess();
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v2 + 160);
  do
  {
    uint64_t *v4 = MEMORY[0x263F8EE78];
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = v6 + 40;
      do
      {
        v9 = *(void (**)(uint64_t))(v8 - 8);
        uint64_t v10 = swift_retain();
        v9(v10);
        swift_release();
        v8 += 16;
        --v7;
      }
      while (v7);
    }
    ++v5;
    swift_bridgeObjectRelease();
    AGSubgraphUpdate();
    uint64_t result = a2(*(void *)(*v4 + 16) != 0);
    if (v5 == 8) {
      break;
    }
    uint64_t v6 = *v4;
  }
  while (*(void *)(*v4 + 16));
  *(unsigned char *)(v2 + 152) = 0;
  return result;
}

Swift::Void __swiftcall GraphHost.uninstantiate()()
{
}

uint64_t GraphHost.deinit()
{
  GraphHost.invalidate()();
  if (one-time initialization token for blockedGraphHosts != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  int64_t v1 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&blockedGraphHosts, (uint64_t)v0);
  uint64_t result = swift_release();
  uint64_t v3 = *((void *)blockedGraphHosts._rawValue + 2);
  if (v3 < v1)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v1, v3);
    swift_endAccess();
    v4 = (void *)v0[2];
    uint64_t v5 = (void *)v0[3];
    uint64_t v6 = (void *)v0[4];
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v0;
  }
  return result;
}

uint64_t GraphHost.graphDelegate.getter()
{
  return 0;
}

uint64_t GraphHost.parentHost.getter()
{
  return 0;
}

uint64_t specialized GraphDelegate.beginTransaction()()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  int64_t v1 = self;
  swift_retain_n();
  if (objc_msgSend(v1, sel_isMainThread))
  {
    swift_retain();
    specialized static NSRunLoop.addObserver(_:)((uint64_t)partial apply for specialized closure #1 in closure #1 in GraphDelegate.beginTransaction(), v0);
    swift_release_n();
  }
  else
  {
    id v2 = objc_msgSend(self, sel_mainRunLoop);
    type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, MEMORY[0x263F8E0F8]);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_2461B9DC0;
    v4 = (void *)*MEMORY[0x263EFF588];
    *(void *)(v3 + 32) = *MEMORY[0x263EFF588];
    type metadata accessor for NSRunLoopMode(0);
    id v5 = v4;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9[4] = partial apply for specialized closure #1 in GraphDelegate.beginTransaction();
    v9[5] = v0;
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed () -> ();
    v9[3] = &block_descriptor_85;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v2, sel_performInModes_block_, isa, v7);
    _Block_release(v7);
    swift_release_n();
  }
  return swift_release();
}

Swift::Void __swiftcall GraphDelegate.beginTransaction()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v5 = (void *)swift_allocObject();
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v4;
  uint64_t v6 = self;
  swift_retain_n();
  if (objc_msgSend(v6, sel_isMainThread))
  {
    closure #1 in GraphDelegate.beginTransaction()(v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    id v7 = objc_msgSend(self, sel_mainRunLoop);
    type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, MEMORY[0x263F8E0F8]);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2461B9DC0;
    v9 = (void *)*MEMORY[0x263EFF588];
    *(void *)(v8 + 32) = *MEMORY[0x263EFF588];
    type metadata accessor for NSRunLoopMode(0);
    id v10 = v9;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v13[4] = partial apply for closure #1 in GraphDelegate.beginTransaction();
    v13[5] = v5;
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed () -> ();
    v13[3] = &block_descriptor_23;
    v12 = _Block_copy(v13);
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_performInModes_block_, isa, v12);
    _Block_release(v12);
    swift_release();
    swift_release();
  }
  swift_release();
}

uint64_t GraphHost.Data.$updateSeed.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t AGGraphRef.graphHost()()
{
  uint64_t result = AGGraphGetContext();
  if (result)
  {
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in GraphDelegate.beginTransaction()(uint64_t a1)
{
  swift_retain();
  specialized static NSRunLoop.addObserver(_:)((uint64_t)partial apply for specialized closure #1 in closure #1 in GraphDelegate.beginTransaction(), a1);

  return swift_release();
}

uint64_t closure #1 in GraphDelegate.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  swift_retain();
  specialized static NSRunLoop.addObserver(_:)((uint64_t)partial apply for closure #1 in closure #1 in GraphDelegate.beginTransaction(), (uint64_t)v6);

  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in GraphDelegate.beginTransaction()()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v0 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    specialized static Update.begin()();
    AGGraphClearUpdate();
    specialized closure #1 in ViewRendererHost.updateViewGraph<A>(body:)(v2);
    AGGraphSetUpdate();
    static Update.end()();
    swift_release();
  }
  static Update.end()();
  return _MovableLockUnlock(v0);
}

uint64_t closure #1 in closure #1 in GraphDelegate.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in closure #1 in closure #1 in GraphDelegate.beginTransaction()(a1, a2, a3);
  static Update.end()();

  return _MovableLockUnlock(v6);
}

uint64_t closure #1 in closure #1 in closure #1 in GraphDelegate.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C527E00](v5);
  if (result)
  {
    (*(void (**)(void (*)(), void, uint64_t, uint64_t, uint64_t))(a3 + 8))(closure #1 in closure #1 in closure #1 in closure #1 in GraphDelegate.beginTransaction(), 0, MEMORY[0x263F8EE60] + 8, a2, a3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in closure #1 in closure #1 in closure #1 in GraphDelegate.beginTransaction()()
{
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int32) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id GraphHost.Data.graph.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void GraphHost.Data.graph.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t (*GraphHost.Data.graph.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void GraphHost.Data.globalSubgraph.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*GraphHost.Data.globalSubgraph.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id GraphHost.Data.rootSubgraph.getter()
{
  return *(id *)(v0 + 16);
}

void GraphHost.Data.rootSubgraph.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t (*GraphHost.Data.rootSubgraph.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphHost.Data.isRemoved.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t GraphHost.Data.isRemoved.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t (*GraphHost.Data.isRemoved.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphHost.Data.isHiddenForReuse.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t GraphHost.Data.isHiddenForReuse.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 25) = result;
  return result;
}

uint64_t (*GraphHost.Data.isHiddenForReuse.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*GraphHost.Data.time.modify(uint64_t a1))(void *a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 28);
  *(void *)a1 = *(void *)AGGraphGetValue();
  return GraphHost.Data.time.modify;
}

uint64_t GraphHost.Data.time.modify(void *a1)
{
  a1[1] = *a1;
  return AGGraphSetValue();
}

uint64_t GraphHost.Data.$time.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$time.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 28);
  return _ViewInputs.transaction.modify;
}

uint64_t GraphHost.Data.environment.getter@<X0>(void *a1@<X8>)
{
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t key path getter for GraphHost.Data.environment : GraphHost.Data@<X0>(void *a1@<X8>)
{
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t GraphHost.Data.environment.setter()
{
  return swift_release();
}

void (*GraphHost.Data.environment.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x24uLL);
  *a1 = v3;
  v3[8] = *(_DWORD *)(v1 + 32);
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *Value;
  uint64_t v5 = Value[1];
  *(void *)uint64_t v3 = v6;
  *((void *)v3 + 1) = v5;
  swift_retain();
  swift_retain();
  return GraphHost.Data.environment.modify;
}

void GraphHost.Data.environment.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[1];
  v1[2] = **a1;
  v1[3] = v2;
  AGGraphSetValue();
  swift_release();
  swift_release();

  free(v1);
}

uint64_t GraphHost.Data.$environment.getter()
{
  return *(unsigned int *)(v0 + 32);
}

uint64_t GraphHost.Data.$environment.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 32) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$environment.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 32);
  return _ViewInputs.changedDebugProperties.modify;
}

_DWORD *GraphHost.Data.phase.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t GraphHost.Data.phase.setter()
{
  return AGGraphSetValue();
}

uint64_t (*GraphHost.Data.phase.modify(_DWORD *a1))(_DWORD *a1)
{
  a1[2] = *(_DWORD *)(v1 + 36);
  *a1 = *(_DWORD *)AGGraphGetValue();
  return GraphHost.Data.phase.modify;
}

uint64_t GraphHost.Data.phase.modify(_DWORD *a1)
{
  a1[1] = *a1;
  return AGGraphSetValue();
}

uint64_t GraphHost.Data.$phase.getter()
{
  return *(unsigned int *)(v0 + 36);
}

uint64_t GraphHost.Data.$phase.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$phase.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 36);
  return GraphHost.Data.$phase.modify;
}

_DWORD *GraphHost.Data.$phase.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 36) = result[2];
  return result;
}

uint64_t GraphHost.Data.hostPreferenceKeys.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t GraphHost.Data.hostPreferenceKeys.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*GraphHost.Data.hostPreferenceKeys.modify(uint64_t a1))(void *a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 40);
  *(void *)a1 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  return GraphHost.Data.hostPreferenceKeys.modify;
}

uint64_t GraphHost.Data.hostPreferenceKeys.modify(void *a1)
{
  a1[1] = *a1;
  AGGraphSetValue();

  return swift_bridgeObjectRelease();
}

uint64_t GraphHost.Data.$hostPreferenceKeys.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 40) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$hostPreferenceKeys.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 40);
  return StyledTextResponder.$view.modify;
}

uint64_t GraphHost.Data.transaction.getter()
{
  AGGraphGetValue();

  return swift_retain();
}

uint64_t GraphHost.Data.transaction.setter()
{
  return swift_release();
}

uint64_t (*GraphHost.Data.transaction.modify(uint64_t a1))(void *a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 44);
  *(void *)a1 = *(void *)AGGraphGetValue();
  swift_retain();
  return GraphHost.Data.transaction.modify;
}

uint64_t GraphHost.Data.transaction.modify(void *a1)
{
  a1[1] = *a1;
  AGGraphSetValue();

  return swift_release();
}

uint64_t GraphHost.Data.$transaction.getter()
{
  return *(unsigned int *)(v0 + 44);
}

uint64_t GraphHost.Data.$transaction.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 44) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$transaction.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 44);
  return StyledTextResponder.$styles.modify;
}

uint64_t GraphHost.Data.updateSeed.setter()
{
  return AGGraphSetValue();
}

uint64_t GraphHost.Data.$updateSeed.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$updateSeed.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 48);
  return GraphHost.Data.$updateSeed.modify;
}

_DWORD *GraphHost.Data.$updateSeed.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 48) = result[2];
  return result;
}

uint64_t GraphHost.Data.transactionSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t GraphHost.Data.transactionSeed.setter()
{
  return AGGraphSetValue();
}

uint64_t (*GraphHost.Data.transactionSeed.modify(_DWORD *a1))()
{
  a1[2] = *(_DWORD *)(v1 + 52);
  *a1 = *(_DWORD *)AGGraphGetValue();
  return GraphHost.Data.transactionSeed.modify;
}

uint64_t GraphHost.Data.$transactionSeed.getter()
{
  return *(unsigned int *)(v0 + 52);
}

uint64_t GraphHost.Data.$transactionSeed.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 52) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$transactionSeed.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 52);
  return GraphHost.Data.$transactionSeed.modify;
}

_DWORD *GraphHost.Data.$transactionSeed.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 52) = result[2];
  return result;
}

uint64_t GraphHost.Data.inputs.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 96);
  *(void *)a1 = *(void *)(v1 + 56);
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 80);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();

  return swift_bridgeObjectRetain();
}

double GraphHost.Data.inputs.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[5];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)(v1 + 56) = v3;
  *(_DWORD *)(v1 + 64) = v4;
  *(void *)(v1 + 72) = v5;
  double result = *((double *)a1 + 3);
  uint64_t v8 = a1[4];
  *(double *)(v1 + 80) = result;
  *(void *)(v1 + 88) = v8;
  *(void *)(v1 + 96) = v6;
  return result;
}

uint64_t (*GraphHost.Data.inputs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

Swift::Void __swiftcall GraphHost.Data.invalidate()()
{
  if (*v0)
  {
    id v1 = *v0;
    specialized static Update.begin()();
    AGSubgraphInvalidate();
    AGGraphSetContext();
    AGGraphInvalidate();

    *uint64_t v0 = 0;
    static Update.end()();
  }
}

id GraphHost.data.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  int v4 = *(void **)(v1 + 24);
  id v15 = *(id *)(v1 + 32);
  char v5 = *(unsigned char *)(v1 + 40);
  char v6 = *(unsigned char *)(v1 + 41);
  int v7 = *(_DWORD *)(v1 + 68);
  uint64_t v8 = *(void *)(v1 + 72);
  int v9 = *(_DWORD *)(v1 + 80);
  uint64_t v10 = *(void *)(v1 + 88);
  uint64_t v11 = *(void *)(v1 + 112);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 25) = v6;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(v1 + 44);
  *(void *)(a1 + 44) = *(void *)(v1 + 60);
  *(_DWORD *)(a1 + 52) = v7;
  *(void *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(v1 + 96);
  *(void *)(a1 + 96) = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v12 = v3;
  id v13 = v4;

  return v15;
}

uint64_t GraphHost.data.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 24);
  char v5 = *((unsigned char *)a1 + 25);
  int v6 = *((_DWORD *)a1 + 13);
  uint64_t v7 = a1[7];
  int v8 = *((_DWORD *)a1 + 16);
  uint64_t v11 = a1[9];
  uint64_t v12 = a1[12];
  swift_beginAccess();
  int v9 = *(void **)(v1 + 32);
  id v13 = *(void **)(v1 + 24);
  v14 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 24) = *(_OWORD *)(a1 + 1);
  *(unsigned char *)(v1 + 40) = v4;
  *(unsigned char *)(v1 + 41) = v5;
  *(_OWORD *)(v1 + 44) = *(_OWORD *)((char *)a1 + 28);
  *(void *)(v1 + 60) = *(uint64_t *)((char *)a1 + 44);
  *(_DWORD *)(v1 + 68) = v6;
  *(void *)(v1 + 72) = v7;
  *(_DWORD *)(v1 + 80) = v8;
  *(void *)(v1 + 88) = v11;
  *(_OWORD *)(v1 + 96) = *((_OWORD *)a1 + 5);
  *(void *)(v1 + 112) = v12;
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t (*GraphHost.data.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

BOOL GraphHost.isValid.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16) != 0;
}

uint64_t GraphHost.graphInputs.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  int v3 = *(_DWORD *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v5 = *(void *)(v1 + 112);
  *(void *)a1 = *(void *)(v1 + 72);
  *(_DWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 96);
  *(void *)(a1 + 40) = v5;
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t GraphHost.isInstantiated.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t GraphHost.hostPreferenceValues.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 132);
}

uint64_t GraphHost.hostPreferenceValues.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 132) = a1;
  return result;
}

uint64_t GraphHost.lastHostPreferencesSeed.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(_DWORD *)(v1 + 140);
  return result;
}

uint64_t GraphHost.lastHostPreferencesSeed.setter(int *a1)
{
  int v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v1 + 140) = v2;
  return result;
}

uint64_t (*GraphHost.lastHostPreferencesSeed.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t GraphHost.mayDeferUpdate.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t GraphHost.RemovedState.rawValue.getter()
{
  return *v0;
}

uint64_t GraphHost.RemovedState.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static GraphHost.RemovedState.unattached.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static GraphHost.RemovedState.hiddenForReuse.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t GraphHost.removedState.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 169);
  return result;
}

void GraphHost.removedState.setter(char *a1)
{
  char v2 = *a1;
  swift_beginAccess();
  *(unsigned char *)(v1 + 169) = v2;
  GraphHost.updateRemovedState()();
}

void (*GraphHost.removedState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return GraphHost.removedState.modify;
}

void GraphHost.removedState.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    GraphHost.updateRemovedState()();
  }
}

uint64_t GraphHost.__allocating_init(data:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  GraphHost.init(data:)(a1);
  return v2;
}

uint64_t GraphHost.__deallocating_deinit()
{
  GraphHost.invalidate()();
  if (one-time initialization token for blockedGraphHosts != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  int64_t v1 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&blockedGraphHosts, (uint64_t)v0);
  uint64_t result = swift_release();
  uint64_t v3 = *((void *)blockedGraphHosts._rawValue + 2);
  if (v3 < v1)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v1, v3);
    swift_endAccess();
    uint64_t v4 = (void *)v0[2];
    uint64_t v5 = (void *)v0[3];
    int v6 = (void *)v0[4];
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_deallocClassInstance();
  }
  return result;
}

uint64_t GraphHost.isUpdating.getter()
{
  swift_beginAccess();
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    return AGGraphGetCounter() != 0;
  }
  return result;
}

Swift::Void __swiftcall GraphHost.setNeedsUpdate(mayDeferUpdate:)(Swift::Bool mayDeferUpdate)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 168) &= mayDeferUpdate;
  swift_beginAccess();
  if (*(void *)(v1 + 16)) {
    AGGraphSetNeedsUpdate();
  }
}

SwiftUI::GraphHost::ConstantID_optional __swiftcall GraphHost.ConstantID.init(rawValue:)(SwiftUI::GraphHost::ConstantID_optional rawValue)
{
  SwiftUI::GraphHost::ConstantID value = rawValue.value;
  if (rawValue.value >= SwiftUI_GraphHost_ConstantID_unknownDefault) {
    SwiftUI::GraphHost::ConstantID value = SwiftUI_GraphHost_ConstantID_unknownDefault;
  }
  *uint64_t v1 = value;
  return rawValue;
}

uint64_t GraphHost.ConstantID.rawValue.getter()
{
  return *v0;
}

SwiftUI::GraphHost::ConstantID_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GraphHost.ConstantID(Swift::Int8 *a1)
{
  return GraphHost.ConstantID.init(rawValue:)(*a1);
}

uint64_t GraphHost.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(0, &lazy cache variable for type metadata for Mirror.DisplayStyle?, MEMORY[0x263F8E818], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v11 = v0;
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  type metadata accessor for GraphHost();
  type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(0, &lazy cache variable for type metadata for [(label: String?, value: Any)], (uint64_t (*)(uint64_t))type metadata accessor for (label: String?, value: Any), MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  swift_retain();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance GraphHost()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(0, &lazy cache variable for type metadata for Mirror.DisplayStyle?, MEMORY[0x263F8E818], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v10 - v6;
  v10[1] = *v0;
  v10[0] = MEMORY[0x263F8EE78];
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  type metadata accessor for GraphHost();
  type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(0, &lazy cache variable for type metadata for [(label: String?, value: Any)], (uint64_t (*)(uint64_t))type metadata accessor for (label: String?, value: Any), MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  swift_retain();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

Swift::Void __swiftcall GraphHost.setTime(_:)(SwiftUI::Time a1)
{
  double v3 = *v1;
  swift_beginAccess();
  if (*(double *)AGGraphGetValue() != v3)
  {
    uint64_t v4 = AGGraphSetValue();
    (*(void (**)(uint64_t))(*(void *)v2 + 224))(v4);
  }
}

Swift::Void __swiftcall GraphHost.incrementPhase()()
{
  swift_beginAccess();
  AGGraphGetValue();
  uint64_t v1 = AGGraphSetValue();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 192))(v1))
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
    swift_unknownObjectRelease();
  }
}

uint64_t CustomGraphMutation.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

BOOL GraphHost.hasPendingTransactions.getter()
{
  swift_beginAccess();
  return *(void *)(*(void *)(v0 + 144) + 16) != 0;
}

void GraphHost.runTransaction(_:do:)(unint64_t a1, void (*a2)(uint64_t))
{
  GraphHost.instantiateIfNeeded()();
  if (a1 >= 2)
  {
    swift_beginAccess();
    AGGraphSetValue();
  }
  unint64_t v15 = a1;
  *(unsigned char *)(v2 + 152) = 1;
  swift_beginAccess();
  AGGraphGetValue();
  uint64_t v5 = AGGraphSetValue();
  a2(v5);
  uint64_t v6 = (uint64_t *)(v2 + 160);
  id v7 = *(id *)(v2 + 24);
  swift_beginAccess();
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(v2 + 160);
  uint64_t v10 = MEMORY[0x263F8EE78];
  do
  {
    *uint64_t v6 = v10;
    uint64_t v11 = *(void *)(v9 + 16);
    if (v11)
    {
      uint64_t v12 = v9 + 40;
      do
      {
        id v13 = *(void (**)(uint64_t))(v12 - 8);
        uint64_t v14 = swift_retain();
        v13(v14);
        swift_release();
        v12 += 16;
        --v11;
      }
      while (v11);
    }
    ++v8;
    swift_bridgeObjectRelease();
    AGSubgraphUpdate();
    if (v8 == 8) {
      break;
    }
    uint64_t v9 = *v6;
  }
  while (*(void *)(*v6 + 16));
  *(unsigned char *)(v2 + 152) = 0;

  if (v15 > 1) {
    AGGraphSetValue();
  }
}

uint64_t GraphHost.needsTransaction.getter()
{
  return AGSubgraphIsDirty();
}

void one-time initialization function for pendingGlobalTransactions()
{
  static GraphHost.pendingGlobalTransactions = (_UNKNOWN *)MEMORY[0x263F8EE78];
}

uint64_t static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v44 = a5;
  uint64_t v45 = a7;
  uint64_t v47 = a4;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v42 - v14;
  int v46 = *v16;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  _MovableLockLock(static Update._lock);
  if (one-time initialization token for pendingGlobalTransactions != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v17 = *((void *)static GraphHost.pendingGlobalTransactions + 2);
  if (!v17) {
    goto LABEL_17;
  }
  swift_beginAccess();
  v18 = static GraphHost.pendingGlobalTransactions;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  static GraphHost.pendingGlobalTransactions = v18;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
    v18 = (void *)result;
    static GraphHost.pendingGlobalTransactions = (_UNKNOWN *)result;
  }
  if (v17 <= v18[2])
  {
    if (v18[5 * v17 - 1] == v47)
    {
      uint64_t v20 = (uint64_t)&v18[5 * v17 - 1];
      if (*(_DWORD *)(v20 + 24) == v46)
      {
        unint64_t v21 = *(void *)(v20 + 16);
        if (v21)
        {
          if (!a1) {
            goto LABEL_16;
          }
          uint64_t v48 = MEMORY[0x263F8EE78];
          swift_retain();
          swift_retain();
          LODWORD(v43) = compareLists(_:_:ignoredTypes:)(v21, a1, (uint64_t)&v48);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          if ((v43 & 1) == 0)
          {
            v18 = static GraphHost.pendingGlobalTransactions;
            goto LABEL_16;
          }
LABEL_28:
          AsyncTransaction.append<A>(_:)(a3, a6, v45);
          swift_endAccess();
          p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
          return _MovableLockUnlock((uint64_t)p_cache[509]);
        }
        if (!a1) {
          goto LABEL_28;
        }
      }
    }
LABEL_16:
    swift_endAccess();
    if (v18[2])
    {
LABEL_20:
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      v29(v15, a3, a6);
      unint64_t aBlock = a1;
      LODWORD(v50) = v46;
      swift_retain();
      swift_unknownObjectRetain();
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      v51[0] = (uint64_t)v30;
      unint64_t v32 = v30[2];
      unint64_t v31 = v30[3];
      if (v32 >= v31 >> 1)
      {
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
        v51[0] = (uint64_t)v30;
      }
      v29(v12, (uint64_t)v15, a6);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, (uint64_t)v12, v51, a6, v45);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, a6);
      unint64_t v33 = aBlock;
      int v34 = v50;
      swift_beginAccess();
      v35 = static GraphHost.pendingGlobalTransactions;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      static GraphHost.pendingGlobalTransactions = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        static GraphHost.pendingGlobalTransactions = v35;
      }
      p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
      unint64_t v39 = v35[2];
      unint64_t v38 = v35[3];
      if (v39 >= v38 >> 1)
      {
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v35);
        static GraphHost.pendingGlobalTransactions = v35;
      }
      v35[2] = v39 + 1;
      v40 = &v35[5 * v39];
      uint64_t v41 = v44;
      v40[4] = v47;
      v40[5] = v41;
      v40[6] = v33;
      *((_DWORD *)v40 + 14) = v34;
      v40[8] = v30;
      swift_endAccess();
      return _MovableLockUnlock((uint64_t)p_cache[509]);
    }
LABEL_17:
    if (objc_msgSend(self, sel_isMainThread))
    {
      specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0);
    }
    else
    {
      id v43 = objc_msgSend(self, sel_mainRunLoop);
      type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, MEMORY[0x263F8E0F8]);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_2461B9DC0;
      uint64_t v23 = a3;
      v24 = (void *)*MEMORY[0x263EFF588];
      *(void *)(v22 + 32) = *MEMORY[0x263EFF588];
      type metadata accessor for NSRunLoopMode(0);
      id v25 = v24;
      a3 = v23;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v51[2] = (uint64_t)closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:);
      v51[3] = 0;
      unint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v50 = 1107296256;
      v51[0] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      v51[1] = (uint64_t)&block_descriptor_32_1;
      v27 = _Block_copy(&aBlock);
      swift_release();
      id v28 = v43;
      objc_msgSend(v43, sel_performInModes_block_, isa, v27);
      _Block_release(v27);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:)()
{
}

BOOL static _GraphMutation_Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void _GraphMutation_Style.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int _GraphMutation_Style.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Void __swiftcall CustomGraphMutation.apply()()
{
  (*v0)();
}

uint64_t CustomGraphMutation.combine<A>(with:)()
{
  return 0;
}

Swift::Void __swiftcall __previewThunksHaveFinishedLoading()()
{
  if (one-time initialization token for waitingForPreviewThunks != -1) {
    swift_once();
  }
  if (waitingForPreviewThunks)
  {
    waitingForPreviewThunks = 0;
    if (one-time initialization token for blockedGraphHosts != -1) {
      swift_once();
    }
    swift_beginAccess();
    rawValue = blockedGraphHosts._rawValue;
    blockedGraphHosts._rawValue = (void *)MEMORY[0x263F8EE78];
    uint64_t v1 = rawValue[2];
    if (v1)
    {
      uint64_t v2 = (char *)(rawValue + 4);
      do
      {
        uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)v2 + 192);
        uint64_t v4 = swift_retain();
        uint64_t v5 = v3(v4);
        uint64_t v7 = v6;
        swift_release();
        if (v5)
        {
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
          swift_unknownObjectRelease();
        }
        v2 += 8;
        --v1;
      }
      while (v1);
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConstantKey()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ConstantKey()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 8);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConstantKey()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConstantKey(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

double one-time initialization function for threadAssertionTrace()
{
  uint64_t v0 = swift_slowAlloc();
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 24specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 32specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(void *)(v0 + 24) = @objc closure #1 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = @objc closure #2 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 56) = @objc closure #3 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 72) = @objc closure #4 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 88) = @objc closure #5 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 136) = @objc closure #6 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 144) = @objc closure #7 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 152) = @objc closure #8 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = @objc closure #9 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 168) = @objc closure #10 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 192) = @objc closure #11 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 24specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = @objc closure #12 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 248) = @objc closure #13 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 256) = @objc closure #14 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 264) = @objc closure #15 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(void *)(v0 + 272) = @objc closure #16 in closure #1 in variable initialization expression of threadAssertionTrace;
  threadAssertionTrace = v0;
  return result;
}

void @objc closure #1 in closure #1 in variable initialization expression of threadAssertionTrace(uint64_t a1, void *a2)
{
  uint64_t v2 = one-time initialization token for lockAssertionsAreEnabled;
  id v3 = a2;
  if (v2 != -1)
  {
    id v6 = v3;
    swift_once();
    id v3 = v6;
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  id v5 = v3;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  BOOL IsOwner = _MovableLockIsOwner(static Update._lock);
  id v3 = v5;
  if (!IsOwner)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
  }
}

void @objc closure #12 in closure #1 in variable initialization expression of threadAssertionTrace()
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

void @objc closure #2 in closure #1 in variable initialization expression of threadAssertionTrace()
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

void protocol witness for GraphDelegate.beginTransaction() in conformance ImageRendererHost<A>()
{
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt64 a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  (*(void (**)(unsigned char *))(*(void *)a2 + 88))(v6);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::UInt v8 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)((a1 >> 8) & 1);
  Hasher._combine(_:)(HIWORD(a1) & 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a4)
  {
    Hasher._combine(_:)(1u);
    id v9 = a4;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v10 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 0x10101, a2, a3, a4, v10);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v2 = a1;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v3 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(int a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a2(a1);
  Swift::Int v6 = Hasher._finalize()();
  return a3(a1, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6);
}

{
  uint64_t v4;
  Swift::UInt v5;
  Swift::Int v6;
  uint64_t vars8;

  Hasher.init(_seed:)();
  unint64_t v4 = (a1 >> 38) & 3;
  if (v4)
  {
    if (v4 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
    }
    else
    {
      switch(a1)
      {
        case 0x8000000001uLL:
          unint64_t v5 = 1;
          break;
        case 0x8000000002uLL:
          unint64_t v5 = 2;
          break;
        case 0x8000000003uLL:
          unint64_t v5 = 3;
          break;
        case 0x8000000004uLL:
          unint64_t v5 = 4;
          break;
        default:
          unint64_t v5 = 0;
          break;
      }
      Hasher._combine(_:)(v5);
    }
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(a1 & 1);
  }
  if ((a2 & 0xFF000000) == 0x2000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((a2 >> 24) & 1);
  }
  if ((a2 & 0xFF00000000) == 0x300000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE4(a2));
  }
  Hasher._combine(_:)(BYTE5(a2) & 1);
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0x1FFFFFFFFFFLL, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt64 a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  Swift::UInt v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_9;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
LABEL_9:
  unint64_t v17 = *v4;
  if (v14)
  {
    *(unsigned char *)(v17[7] + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a1 & 1;
  }
  else
  {
    outlined init with copy of Subview.ID(a2, (uint64_t)v18);
    return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1 & 1, v17);
  }
  return result;
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  char v16;
  void *v17;
  unsigned char v18[40];

  Swift::Int v4 = (void **)v3;
  Swift::UInt v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_9;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
LABEL_9:
  unint64_t v17 = *v4;
  if (v14)
  {
    *(unsigned char *)(v17[7] + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a1 & 1;
  }
  else
  {
    outlined init with copy of AnyHashable(a2, (uint64_t)v18);
    return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1 & 1, v17);
  }
  return result;
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  void *v18;
  uint64_t vars8;

  Swift::Int v4 = (void **)v3;
  Swift::UInt v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < result || (a3 & 1) == 0)
  {
    if (v15 >= result && (a3 & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v16 & 1))
    {
      unint64_t v10 = result;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  unint64_t v17 = a1 & 1;
  v18 = *v4;
  if (v14)
  {
    *(unsigned char *)(v18[7] + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v17;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, v17, v18);
  }
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  v18 = *v5;
  if (v16)
  {
LABEL_8:
    v19 = (uint64_t *)(v18[7] + 16 * v12);
    uint64_t *v19 = a1;
    v19[1] = a2;
    return swift_bridgeObjectRelease();
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt32 a4, char a5)
{
  Swift::Int v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (uint64_t *)(v20[7] + 24 * v14);
      *unint64_t v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v7 = (void **)v6;
  char v13 = (void *)*v6;
  int v14 = a2 & 0x10101;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 0x10101, a3, a4, a5);
  uint64_t v17 = v13[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v13[3];
  if (v21 >= v19 && (a6 & 1) != 0)
  {
LABEL_7:
    char v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];

      *(void *)(v23 + 8 * v16) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v14, a3, a4, a5);
  if ((v20 & 1) != (v25 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v24;
  char v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v16, v14, a3, a4, (uint64_t)a5, a1, v22);
  id v26 = a5;

  swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(unsigned char *))NamedImage.BitmapKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(unsigned char *))NamedImage.BitmapKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v17 & 1) == (v23 & 1))
    {
      unint64_t v13 = v22;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      outlined init with copy of NamedImage.VectorKey(a2, (uint64_t)v10, type metadata accessor for NamedImage.BitmapKey);
      return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = v19[7] + 96 * v13;

  return outlined assign with take of NamedImage.BitmapInfo((uint64_t)a1, v20);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t vars8;

  Swift::Int v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = (void *)*v3;
  uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  BOOL v15 = v12[2];
  uint64_t v16 = (v13 & 1) == 0;
  char v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    char v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      uint64_t v14 = v23;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 48 * v14;

  return outlined assign with take of NamedImage.DecodedInfo((uint64_t)a1, v21);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, int a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  char v6 = a2;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v6 & 1);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  specialized _NativeDictionary._insert(at:key:value:)(v10, v6 & 1, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, uint64_t a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(_DWORD *)(v16[7] + 4 * v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, double a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a2 & 1) == 0)
  {
    if (v15 >= v13 && (a2 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a2 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 56 * v10;
    return outlined assign with take of Text.Effect.BaseFragment(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    __swift_destroy_boxed_opaque_existential_1(v19);
    return outlined init with take of ScrollStateRequest(a1, v19);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  char v9 = (void *)*v4;
  uint64_t v10 = a3 & 0x1FFFFFFFFFFLL;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 0x1FFFFFFFFFFLL);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v9[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v10);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v10, a1, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    __swift_destroy_boxed_opaque_existential_1(v19);
    return outlined init with take of ScrollStateRequest(a1, v19);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(Swift::UInt64 a1, Swift::UInt a2, char a3, double a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(double *)(v18[7] + 8 * v12) = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, a2, v18, a4);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, Swift::UInt64 a3, uint64_t a4, char a5)
{
  char v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v21 = a1;
      *(unsigned char *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);

  return swift_retain();
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  int64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  int64_t v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 24 * v14);
      *uint64_t v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    int64_t result = (int64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  int64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a4, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_15:
    int64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  unint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v9 = v6;
  uint64_t v13 = *v6;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v9;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = *(void *)(v21 + 56);

      *(void *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  a5();
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v15 = v23;
  uint64_t v21 = *v9;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:

  a6(v15, a2, a1, v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, char a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      BOOL v17 = (_OWORD *)(v16[7] + 80 * v10);
      long long v18 = a1[3];
      v17[2] = a1[2];
      v17[3] = v18;
      v17[4] = a1[4];
      long long v19 = a1[1];
      *BOOL v17 = *a1;
      v17[1] = v19;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      unint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    type metadata accessor for _NSRange(0);
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, double a3, double a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a2 & 1) != 0)
  {
LABEL_7:
    long long v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (double *)(v18[7] + 16 * v12);
      double *v19 = a3;
      v19[1] = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v16 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  long long v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v18, a3, a4);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  BOOL v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= result && (a6 & 1) != 0)
  {
LABEL_7:
    char v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 24 * v16);
      *uint64_t v23 = a1;
      v23[1] = a2;
      v23[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a6 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v20 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  char v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v16, a4, a5, a1, a2, a3, v22);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, char a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    char v17 = (_OWORD *)(v16[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return outlined init with take of Any(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, uint64_t a3, char a4, char a5, double a6, double a7)
{
  uint64_t v8 = (void **)v7;
  unint64_t v16 = (void *)*v7;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1, a3, a4 & 1);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t result = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = v16[3];
  if (v23 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    char v24 = *v8;
    if (v22)
    {
LABEL_8:
      char v25 = (double *)(v24[7] + 16 * v18);
      *char v25 = a6;
      v25[1] = a7;
      return result;
    }
    goto LABEL_11;
  }
  if (v23 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1, a3, a4 & 1);
  if ((v22 & 1) != (v26 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = result;
  char v24 = *v8;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v18, a1, a2 & 1, a3, a4 & 1, v24, a6, a7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = v5;
    uint64_t v11 = a3;
    uint64_t v13 = ~v7;
    uint64_t v25 = a2;
    do
    {
      char v14 = (unsigned __int8 *)(*(void *)(v9 + 48) + 32 * v8);
      if (((a1 ^ *v14) & 1) == 0
        && ((v14[1] ^ ((unsigned __int16)(a1 & 0x100) >> 8)) & 1) == 0
        && ((v14[2] ^ ((a1 & 0x10000u) >> 16)) & 1) == 0)
      {
        uint64_t v15 = (void *)*((void *)v14 + 3);
        BOOL v16 = *((void *)v14 + 1) == a2 && *((void *)v14 + 2) == v11;
        if (v16 || (char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), a2 = v25, (v17 & 1) != 0))
        {
          if (v15)
          {
            if (a4)
            {
              type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
              swift_bridgeObjectRetain();
              id v18 = v15;
              uint64_t v19 = a4;
              id v20 = a4;
              id v21 = v18;
              char v22 = static NSObject.== infix(_:_:)();
              swift_bridgeObjectRelease();

              a4 = v19;
              uint64_t v11 = a3;
              a2 = v25;
              if (v22) {
                return v8;
              }
            }
          }
          else if (!a4)
          {
            return v8;
          }
        }
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  char v24 = a4;
  v22[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  v10.n128_f64[0] = MEMORY[0x270FA5388](v8);
  BOOL v12 = (char *)v22 - v11;
  uint64_t v23 = v6;
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = a2 & ~v13;
  v22[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    id v18 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
    uint64_t v17 = v9 + 16;
    BOOL v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v23 + 48) + v19 * v14, v8, v10);
      lazy protocol witness table accessor for type UUID and conformance UUID(v24, v25);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v22[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v6;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v8 = ~v6;
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = a1 & 0xC000000000;
    BOOL v11 = a1 != 0x8000000004;
    BOOL v12 = a1 != 0x8000000003;
    BOOL v13 = a1 != 0x8000000002;
    BOOL v14 = a1 != 0x8000000000;
    if ((a2 & 0xFFFFFF) != 0)
    {
      BOOL v11 = 1;
      BOOL v12 = 1;
      BOOL v13 = 1;
      BOOL v15 = 1;
    }
    else
    {
      BOOL v15 = a1 != 0x8000000001;
    }
    if ((a2 & 0xFFFFFF) != 0) {
      BOOL v14 = 1;
    }
    uint64_t v16 = a1 & 0xFF0000000000;
    char v17 = v10 != 0x8000000000 || v11;
    char v18 = v10 != 0x8000000000 || v12;
    char v19 = v10 != 0x8000000000 || v13;
    char v20 = v10 != 0x8000000000 || v15;
    char v21 = v10 != 0x8000000000 || v14;
    do
    {
      char v22 = (unint64_t *)(v9 + 16 * result);
      unint64_t v23 = *v22;
      int v24 = *((unsigned __int8 *)v22 + 11);
      int v25 = *((unsigned __int8 *)v22 + 12);
      unsigned int v26 = *((unsigned __int8 *)v22 + 13);
      uint64_t v27 = (*v22 >> 38) & 3;
      if (v27)
      {
        if (v27 != 1)
        {
          switch(v23)
          {
            case 0x8000000001uLL:
              if ((v20 & 1) == 0) {
                goto LABEL_34;
              }
              goto LABEL_24;
            case 0x8000000002uLL:
              if ((v19 & 1) == 0) {
                goto LABEL_34;
              }
              goto LABEL_24;
            case 0x8000000003uLL:
              if ((v18 & 1) == 0) {
                goto LABEL_34;
              }
              goto LABEL_24;
            case 0x8000000004uLL:
              if ((v17 & 1) == 0) {
                goto LABEL_34;
              }
              goto LABEL_24;
            default:
              if (v21) {
                goto LABEL_24;
              }
              goto LABEL_34;
          }
        }
        if (v10 != 0x4000000000) {
          goto LABEL_24;
        }
        int v28 = *((unsigned __int8 *)v22 + 10);
        int v29 = *((unsigned __int16 *)v22 + 4);
        if ((v23 & 0x100000000) != 0)
        {
          if ((a1 & 0x100000000) == 0 || *(float *)&v23 != *(float *)&a1) {
            goto LABEL_24;
          }
        }
        else if ((a1 & 0x100000000) != 0 || (a1 & 1) == ((v23 & 1) == 0))
        {
          goto LABEL_24;
        }
        int v30 = v29 | (v28 << 16);
        int v31 = v30;
        int v32 = BYTE1(v30);
        int v33 = BYTE2(v30);
        if ((v23 & 0xFF0000000000) == 0x20000000000)
        {
          if (v16 != 0x20000000000) {
            goto LABEL_24;
          }
        }
        else if (v16 == 0x20000000000 || ((v23 ^ a1) & 0x10000000000) != 0)
        {
          goto LABEL_24;
        }
        if (BYTE6(v23) != BYTE6(a1)
          || HIBYTE(v23) != HIBYTE(a1)
          || v31 != a2
          || v32 != BYTE1(a2)
          || v33 != BYTE2(a2))
        {
          goto LABEL_24;
        }
      }
      else if (v10 || ((a1 ^ ((*v22 & 1) == 0)) & 1) == 0)
      {
        goto LABEL_24;
      }
LABEL_34:
      if (v24 == 2)
      {
        if (BYTE3(a2) != 2) {
          goto LABEL_24;
        }
      }
      else if (BYTE3(a2) == 2 || ((a2 >> 24) & 1) != (v24 & 1))
      {
        goto LABEL_24;
      }
      if (v25 == 3)
      {
        if (BYTE4(a2) == 3) {
          goto LABEL_23;
        }
      }
      else if (BYTE4(a2) != 3 && v25 == BYTE4(a2))
      {
LABEL_23:
        if ((((a2 >> 40) & 1 ^ v26) & 1) == 0) {
          return result;
        }
      }
LABEL_24:
      unint64_t result = (result + 1) & v8;
    }
    while (((*(void *)(v5 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  return a2 & ~(-1 << *(unsigned char *)(v2 + 32));
}

uint64_t sub_245EA7070()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

uint64_t sub_245EA712C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_245EA7164()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GraphDelegate.beginTransaction()()
{
  return closure #1 in GraphDelegate.beginTransaction()(v0[4], v0[2], v0[3]);
}

uint64_t sub_245EA71A8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245EA71E8()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for (label: String?, value: Any)()
{
  if (!lazy cache variable for type metadata for (label: String?, value: Any))
  {
    type metadata accessor for External<Time>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (label: String?, value: Any));
    }
  }
}

uint64_t sub_245EA733C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in GraphHost.uninstantiate(immediately:)()
{
  id v1 = *(id *)(v0 + 16);
  AGSubgraphInvalidate();
}

unint64_t lazy protocol witness table accessor for type GraphHost.RemovedState and conformance GraphHost.RemovedState()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState;
  if (!lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState;
  if (!lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState;
  if (!lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState;
  if (!lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphHost.ConstantID and conformance GraphHost.ConstantID()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphHost.ConstantID and conformance GraphHost.ConstantID;
  if (!lazy protocol witness table cache variable for type GraphHost.ConstantID and conformance GraphHost.ConstantID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.ConstantID and conformance GraphHost.ConstantID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphMutation_Style and conformance _GraphMutation_Style()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphMutation_Style and conformance _GraphMutation_Style;
  if (!lazy protocol witness table cache variable for type _GraphMutation_Style and conformance _GraphMutation_Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphMutation_Style and conformance _GraphMutation_Style);
  }
  return result;
}

double sub_245EA7598@<D0>(void *a1@<X8>)
{
  Value = (double *)AGGraphGetValue();
  double result = *Value;
  *a1 = *(void *)Value;
  return result;
}

uint64_t sub_245EA75D4()
{
  return AGGraphSetValue();
}

uint64_t sub_245EA7638@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 28);
  return result;
}

_DWORD *sub_245EA7644(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = *result;
  return result;
}

uint64_t sub_245EA7654()
{
  return AGGraphSetValue();
}

uint64_t sub_245EA76BC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

_DWORD *sub_245EA76C8(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *result;
  return result;
}

_DWORD *sub_245EA76D4@<X0>(_DWORD *a1@<X8>)
{
  double result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_245EA7710()
{
  return AGGraphSetValue();
}

uint64_t sub_245EA7774@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 36);
  return result;
}

_DWORD *sub_245EA7780(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) = *result;
  return result;
}

uint64_t sub_245EA778C@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t sub_245EA77D8()
{
  return AGGraphSetValue();
}

uint64_t sub_245EA783C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 40);
  return result;
}

_DWORD *sub_245EA7848(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *result;
  return result;
}

uint64_t sub_245EA7854@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();

  return swift_retain();
}

uint64_t sub_245EA78A0()
{
  return AGGraphSetValue();
}

uint64_t sub_245EA7904@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 44);
  return result;
}

_DWORD *sub_245EA7910(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 44) = *result;
  return result;
}

_DWORD *sub_245EA791C@<X0>(_DWORD *a1@<X8>)
{
  double result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_245EA7958()
{
  return AGGraphSetValue();
}

uint64_t sub_245EA79BC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 48);
  return result;
}

_DWORD *sub_245EA79C8(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 48) = *result;
  return result;
}

_DWORD *sub_245EA79D4@<X0>(_DWORD *a1@<X8>)
{
  double result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_245EA7A10()
{
  return AGGraphSetValue();
}

uint64_t sub_245EA7A74@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 52);
  return result;
}

_DWORD *sub_245EA7A80(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 52) = *result;
  return result;
}

uint64_t sub_245EA7A8C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 169);
  return result;
}

void sub_245EA7AD4(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(unsigned char *)(v3 + 169) = v2;
  GraphHost.updateRemovedState()();
}

uint64_t dispatch thunk of GraphDelegate.updateGraph<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of GraphDelegate.graphDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of GraphDelegate.preferencesDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of GraphDelegate.beginTransaction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t method lookup function for GraphHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GraphHost);
}

uint64_t dispatch thunk of GraphHost.__allocating_init(data:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of GraphHost.graphDelegate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of GraphHost.parentHost.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of GraphHost.instantiateOutputs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of GraphHost.uninstantiateOutputs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of GraphHost.timeDidChange()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of GraphHost.isHiddenForReuseDidChange()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t destroy for GraphHost.Data(id *a1)
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphHost.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphHost.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  uint64_t v10 = *(void **)(a2 + 16);
  BOOL v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GraphHost.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphHost.Data(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphHost.Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphHost.Data()
{
  return &type metadata for GraphHost.Data;
}

ValueMetadata *type metadata accessor for GraphHost.RemovedState()
{
  return &type metadata for GraphHost.RemovedState;
}

unsigned char *storeEnumTagSinglePayload for GraphHost.ConstantID(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EA80E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphHost.ConstantID()
{
  return &type metadata for GraphHost.ConstantID;
}

uint64_t dispatch thunk of GraphMutation.apply()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of GraphMutation.combine<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

unsigned char *storeEnumTagSinglePayload for _GraphMutation_Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EA8210);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _GraphMutation_Style()
{
  return &type metadata for _GraphMutation_Style;
}

ValueMetadata *type metadata accessor for CustomGraphMutation()
{
  return &type metadata for CustomGraphMutation;
}

uint64_t dispatch thunk of TransactionHostProvider.mutationHost.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for AsyncTransaction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsyncTransaction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AsyncTransaction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AsyncTransaction()
{
  return &type metadata for AsyncTransaction;
}

ValueMetadata *type metadata accessor for ConstantKey()
{
  return &type metadata for ConstantKey;
}

uint64_t outlined assign with take of TextEffectsAnimationController.Timing(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for specialized closure #1 in GraphDelegate.beginTransaction()()
{
  return specialized closure #1 in GraphDelegate.beginTransaction()(v0);
}

uint64_t partial apply for specialized closure #1 in closure #1 in GraphDelegate.beginTransaction()()
{
  return specialized closure #1 in closure #1 in GraphDelegate.beginTransaction()();
}

uint64_t specialized static GraphHost.flushGlobalTransactions()()
{
  if (one-time initialization token for pendingGlobalTransactions != -1) {
LABEL_40:
  }
    swift_once();
  uint64_t result = swift_beginAccess();
  id v1 = (char *)static GraphHost.pendingGlobalTransactions;
  uint64_t v32 = *((void *)static GraphHost.pendingGlobalTransactions + 2);
  if (v32)
  {
    unint64_t v2 = 0;
    static GraphHost.pendingGlobalTransactions = (_UNKNOWN *)MEMORY[0x263F8EE78];
    int v30 = v1;
    int v31 = v1 + 32;
    while (1)
    {
      if (v2 >= *((void *)v1 + 2))
      {
        __break(1u);
        goto LABEL_40;
      }
      uint64_t v5 = &v31[40 * v2];
      uint64_t v6 = *((void *)v5 + 1);
      uint64_t v7 = *((void *)v5 + 2);
      uint64_t v8 = *((unsigned int *)v5 + 6);
      uint64_t v9 = *((void *)v5 + 4);
      uint64_t ObjectType = swift_getObjectType();
      BOOL v11 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v12 = v11(ObjectType, v6);
      if (!v12) {
        break;
      }
      uint64_t v13 = v12;
      unint64_t v33 = v2;
      swift_retain_n();
      swift_bridgeObjectRetain();
      GraphHost.instantiateIfNeeded()();
      if (v7)
      {
        swift_beginAccess();
        AGGraphSetValue();
      }
      *(unsigned char *)(v13 + 152) = 1;
      swift_beginAccess();
      AGGraphGetValue();
      AGGraphSetValue();
      swift_retain();
      swift_bridgeObjectRetain();
      specialized closure #1 in withTransaction<A>(_:_:)(v7, v7, v8, v9);
      uint64_t v14 = v13 + 160;
      id v15 = *(id *)(v13 + 24);
      swift_beginAccess();
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(v13 + 160);
      do
      {
        *(void *)uint64_t v14 = MEMORY[0x263F8EE78];
        uint64_t v18 = *(void *)(v17 + 16);
        if (v18)
        {
          uint64_t v19 = v17 + 40;
          do
          {
            char v20 = *(void (**)(uint64_t))(v19 - 8);
            uint64_t v21 = swift_retain();
            v20(v21);
            swift_release();
            v19 += 16;
            --v18;
          }
          while (v18);
        }
        ++v16;
        swift_bridgeObjectRelease();
        AGSubgraphUpdate();
        if (v16 == 8) {
          break;
        }
        uint64_t v17 = *(void *)v14;
      }
      while (*(void *)(*(void *)v14 + 16));
      *(unsigned char *)(v13 + 152) = 0;

      if (v7) {
        AGGraphSetValue();
      }
      swift_bridgeObjectRelease();
      uint64_t v22 = swift_release_n();
      id v1 = v30;
      unint64_t v2 = v33;
      if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 192))(v22))
      {
        uint64_t v3 = v23;
        uint64_t v4 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3);
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
      }
LABEL_5:
      if (++v2 == v32) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
    _threadTransactionData();
    uint64_t v24 = one-time initialization token for v5;
    swift_retain();
    if (v24 != -1) {
      swift_once();
    }
    unsigned int v25 = static Semantics.v5;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F4504 == 1)
    {
      if ((dyld_program_minos_at_least() & 1) == 0) {
        goto LABEL_32;
      }
    }
    else if (dword_26B0F4500 < v25)
    {
LABEL_32:
      _setThreadTransactionData();
      uint64_t v26 = *(void *)(v9 + 16);
      if (v26)
      {
        uint64_t v27 = (void *)(v9 + 32);
        swift_bridgeObjectRetain();
        do
        {
          uint64_t v29 = v27[3];
          uint64_t v28 = v27[4];
          __swift_project_boxed_opaque_existential_1(v27, v29);
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v28);
          v27 += 5;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
      }
      _setThreadTransactionData();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_unknownObjectRelease();
      id v1 = v30;
      goto LABEL_5;
    }
    if (_threadTransactionData())
    {
      swift_unknownObjectRetain();
      swift_release();
      type metadata accessor for PropertyList.Element();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_release();
    }
    PropertyList.merge(_:)(v7);
    goto LABEL_32;
  }
  return result;
}

uint64_t outlined assign with take of WeakBox<AnyLocationBase>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(0, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined assign with take of NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of NamedImage.Cache.WeakCatalog(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of NamedImage.BitmapInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of NamedImage.DecodedInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in GraphDelegate.beginTransaction()()
{
  return closure #1 in closure #1 in GraphDelegate.beginTransaction()(v0[4], v0[2], v0[3]);
}

uint64_t outlined assign with take of Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_245EA8C88()
{
  return swift_deallocObject();
}

uint64_t sub_245EA8C98()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in variable initialization expression of static GraphHost.sharedGraph()
{
  id v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_beginAccess();
  return handleTraceNotification(graph:token:)(v1, *(_DWORD *)(v2 + 16));
}

ValueMetadata *type metadata accessor for InvalidatingGraphMutation()
{
  return &type metadata for InvalidatingGraphMutation;
}

ValueMetadata *type metadata accessor for EmptyGraphMutation()
{
  return &type metadata for EmptyGraphMutation;
}

uint64_t destroy for GlobalTransaction()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GlobalTransaction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GlobalTransaction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GlobalTransaction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GlobalTransaction()
{
  return &type metadata for GlobalTransaction;
}

uint64_t outlined assign with take of Text.Effect.BaseFragment(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static ViewInputBoolFlag.value.getter()
{
  return 1;
}

uint64_t specialized static ViewInputFlag.evaluate(inputs:)(uint64_t *a1)
{
  uint64_t v7 = *a1;
  uint64_t v3 = v7;
  outlined retain of _GraphInputs((uint64_t)a1);
  outlined retain of ViewTransform((uint64_t)&v7);
  uint64_t v4 = specialized find<A>(_:key:)(v3, v1);
  if (v4) {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 72);
  }
  else {
    uint64_t v5 = 0;
  }
  outlined release of ViewTransform((uint64_t)&v7);
  outlined release of _GraphInputs((uint64_t)a1);
  return v5;
}

uint64_t static ViewInputFlag._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static ViewInputFlag._makeInputs(modifier:inputs:)(a2, a3, a4);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance VariantThatFitsFlag(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = a1[2];
  return specialized static ViewInputFlag.evaluate(inputs:)((uint64_t *)v3) & 1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t static ViewInputBoolFlag.defaultValue.getter()
{
  return 0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance UnifiedHitTestingFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ImprovedButtonGestureFeature(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ImprovedButtonGestureFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EndedGestureWaitsForActiveFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance GestureContainerFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance GestureRecognizerBasedEvents(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance GestureRecognizerBasedEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance TextSelectionForbidden(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v2(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v2_1(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v2_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v2_3(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v2_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v4_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v5_2(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v5_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v6_1(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v6_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance Semantics.DismissPopsInNavigationSplitViewRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisabledFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnabledFeature(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnabledFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

BOOL static InvertedViewInputPredicate<>.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 16))() & 1) == 0;
}

uint64_t static InvertedViewInputPredicate<>.value.getter()
{
  return 0;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance <> InvertedViewInputPredicate<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewInputFlag._makeInputs(modifier:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance <> InvertedViewInputPredicate<A>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_getWitnessTable();
  *a1 = 0;
  return result;
}

uint64_t static OrOperationViewInputPredicate.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  int v7 = *((_DWORD *)a1 + 2);
  uint64_t v8 = a1[2];
  int v9 = *((_DWORD *)a1 + 6);
  int v10 = *((_DWORD *)a1 + 7);
  int v11 = *((_DWORD *)a1 + 8);
  int v12 = *((_DWORD *)a1 + 9);
  uint64_t v13 = a1[5];
  uint64_t v17 = *a1;
  int v18 = v7;
  uint64_t v19 = v8;
  int v20 = v9;
  int v21 = v10;
  int v22 = v11;
  int v23 = v12;
  uint64_t v24 = v13;
  if ((*(uint64_t (**)(uint64_t *))(a4 + 8))(&v17))
  {
    char v14 = 1;
  }
  else
  {
    uint64_t v17 = v6;
    int v18 = v7;
    uint64_t v19 = v8;
    int v20 = v9;
    int v21 = v10;
    int v22 = v11;
    int v23 = v12;
    uint64_t v24 = v13;
    char v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(a5 + 8))(&v17, a3);
  }
  return v14 & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance OrOperationViewInputPredicate<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static OrOperationViewInputPredicate.evaluate(inputs:)(a1, a2[2], a2[3], a2[4], a2[5]);
}

BOOL static TypesMatch.evaluate(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == a3;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance TypesMatch<A, B>(uint64_t a1, uint64_t a2)
{
  return static TypesMatch.evaluate(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t static IsVisionEnabledPredicate.evaluate(inputs:)()
{
  return 0;
}

uint64_t _ViewInputs.isVisionEnabled.getter()
{
  return 0;
}

uint64_t _ViewListInputs.isVisionEnabled.getter()
{
  return 0;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance WithinAccessibilityRotor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance BothFeatures<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return specialized static ViewInputFlag._makeInputs(modifier:inputs:)(a2, a3, WitnessTable);
}

uint64_t specialized static ViewInputFlag._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v8 = (char *)&v11 - v7;
  Swift::Int v9 = swift_checkMetadataState();
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  return _GraphInputs.subscript.setter((uint64_t)v8, v9, v9, v5);
}

uint64_t instantiation function for generic protocol witness table for <> InvertedViewInputPredicate<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ViewInputFlag.Input : ViewInput in <> InvertedViewInputPredicate<A>()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of static ViewInputPredicate.evaluate(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static ViewInputFlag.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ViewInputFlag.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t type metadata accessor for TypesMatch()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for IsVisionEnabledPredicate()
{
  return &type metadata for IsVisionEnabledPredicate;
}

_UNKNOWN **sub_245EA98E4()
{
  return &protocol witness table for InvertedViewInputPredicate<A>;
}

_UNKNOWN **sub_245EA98F0()
{
  return &protocol witness table for OrOperationViewInputPredicate<A, B>;
}

BOOL static VectorImageLayer.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

id CUINamedVectorGlyph.image(at:value:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (one-time initialization token for valueLock != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)static CUINamedVectorGlyph.valueLock;
  objc_msgSend((id)static CUINamedVectorGlyph.valueLock, sel_lock);
  objc_msgSend(v5, sel_variableMinValue);
  double v13 = v12;
  objc_msgSend(v5, sel_variableMaxValue);
  double v15 = v14;
  if ((a5 & 0x100000000) != 0) {
    double v16 = INFINITY;
  }
  else {
    double v16 = *(float *)&a5;
  }
  double v17 = 0.0;
  if ((a5 & 0x100000000) != 0) {
    double v17 = INFINITY;
  }
  objc_msgSend(v5, sel_setVariableMinValue_, v17);
  objc_msgSend(v5, sel_setVariableMaxValue_, v16);
  if (a4)
  {
    id v19 = objc_msgSend(v5, sel_image);
    id v18 = v19;
    if (v19) {
      id v20 = v19;
    }
  }
  else
  {
    id v18 = objc_msgSend(v5, sel_rasterizeImageUsingScaleFactor_forTargetSize_, *(double *)&a3, *(double *)&a1, *(double *)&a2);
  }
  objc_msgSend(v5, sel_setVariableMinValue_, v13);
  objc_msgSend(v5, sel_setVariableMaxValue_, v15);
  objc_msgSend(v11, sel_unlock);
  return v18;
}

uint64_t VectorImageLayer.image(size:imageScale:prefersMask:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t VectorImageLayer.size.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t VectorImageLayer.displayList.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

void VectorImageLayer.init(image:location:size:)(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  Swift::Int v9 = *a2;
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {
LABEL_13:
    self;
    uint64_t v21 = swift_dynamicCastObjCClass();
    if (v21)
    {
      int v22 = (void *)v21;
      id v23 = a1;
      uint64_t v24 = (CGPDFPage *)objc_msgSend(v22, sel_svgDocument);
      if (v24)
      {
        double v15 = v24;
        if ((unint64_t)v9 >= 2)
        {
          uint64_t v25 = one-time initialization token for sharedCache;
          id v26 = v9;
          if (v25 != -1) {
            swift_once();
          }
          swift_retain();
          swift_retain();
          id v18 = NamedImage.Cache.subscript.getter(v26);
          char v28 = v27;
          swift_release();
          swift_release();
          if (v18)
          {

            if (v28)
            {
LABEL_22:
              outlined consume of Image.Location(v9);
              type metadata accessor for SVGImageContents();
              goto LABEL_23;
            }
            id v23 = v18;
          }
        }

        id v18 = 0;
        goto LABEL_22;
      }

      outlined consume of Image.Location(v9);
    }
    else
    {

      outlined consume of Image.Location(v9);
    }
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  uint64_t v11 = (void *)v10;
  id v12 = a1;
  double v13 = (CGPDFDocument *)objc_msgSend(v11, sel_pdfDocument);
  if (!v13
    || (v14 = v13, double v15 = CGPDFDocumentGetPage(v13, 1uLL), v14, !v15))
  {

    goto LABEL_13;
  }
  if ((unint64_t)v9 < 2) {
    goto LABEL_10;
  }
  uint64_t v16 = one-time initialization token for sharedCache;
  id v17 = v9;
  if (v16 != -1) {
    swift_once();
  }
  swift_retain();
  swift_retain();
  id v18 = NamedImage.Cache.subscript.getter(v17);
  char v20 = v19;
  swift_release();
  swift_release();
  if (!v18) {
    goto LABEL_10;
  }

  if ((v20 & 1) == 0)
  {
    id v12 = v18;
LABEL_10:

    id v18 = 0;
  }
  outlined consume of Image.Location(v9);
  type metadata accessor for PDFImageContents();
LABEL_23:
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 48) = v15;
  *(void *)(v29 + 56) = v18;
  *(void *)(v29 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  *(double *)(v29 + 24) = a4;
  *(double *)(v29 + 32) = a5;
  *(void *)(v29 + 16) = MEMORY[0x263F8EE80];
  id v30 = objc_msgSend(a1, sel_name);
  if (v30)
  {
    int v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
  }
  else
  {

    uint64_t v32 = 0;
    uint64_t v34 = 0;
  }
  *(void *)a3 = v29;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v32;
  *(void *)(a3 + 24) = v34;
}

uint64_t type metadata accessor for SVGImageContents()
{
  return self;
}

uint64_t VectorImageLayer.contents.getter()
{
  return swift_retain();
}

uint64_t VectorImageLayer.contents.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *long long v1 = a1;
  return result;
}

uint64_t (*VectorImageLayer.contents.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t VectorImageLayer.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 2;
  a2[2] = 0;
  a2[3] = 0;
  return result;
}

uint64_t VectorImageLayer.init(pdfPage:size:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return VectorImageLayer.init(pdfPage:size:)(a1, (void (*)(void))type metadata accessor for PDFImageContents, a2, a3, a4);
}

uint64_t VectorImageLayer.init(svgDocument:size:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return VectorImageLayer.init(pdfPage:size:)(a1, (void (*)(void))type metadata accessor for SVGImageContents, a2, a3, a4);
}

uint64_t VectorImageLayer.init(pdfPage:size:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  a2(0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 48) = a1;
  *(void *)(result + 56) = 0;
  *(void *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  *(double *)(result + 24) = a4;
  *(double *)(result + 32) = a5;
  *(void *)(result + 16) = MEMORY[0x263F8EE80];
  *a3 = result;
  a3[1] = 2;
  a3[2] = 0;
  a3[3] = 0;
  return result;
}

id VectorImageLayer.location.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return outlined copy of Image.Location?(v2);
}

void VectorImageLayer.location.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  outlined consume of Image.Location?(*(id *)(v1 + 8));
  *(void *)(v1 + 8) = v2;
}

uint64_t (*VectorImageLayer.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t VectorImageLayer.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VectorImageLayer.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*VectorImageLayer.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void VectorImageLayer.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int VectorImageLayer.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t VectorImageLayer.encode(to:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  (*(void (**)(void))(*(void *)*v1 + 96))();
  uint64_t v5 = specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  if (v2) {
    return swift_unknownObjectRelease();
  }
  double v6 = (*(double (**)(uint64_t))(*(void *)v4 + 88))(v5);
  double v8 = v7;
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void **)(a1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    uint64_t v10 = (void *)result;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    uint64_t v10 = (void *)result;
  }
  void v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  *(void *)(a1 + 24) = v10;
  if (!__OFADD__(v9, 1))
  {
    *(void *)(a1 + 8) = v9 + 1;
    CGSize.encode(to:)((double *)a1, v6, v8);
    ProtobufEncoder.endLengthDelimited()();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

double *VectorImageLayer.init(from:)@<X0>(void *a1@<X0>, double **a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 < v6)
  {
    uint64_t v7 = 0;
    double v8 = 0.0;
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t v12 = a1[3];
      if (!v12) {
        goto LABEL_12;
      }
      unint64_t v13 = a1[4];
      if (v5 >= v13) {
        break;
      }
LABEL_14:
      if (v12 >> 3 == 2)
      {
        if ((v12 & 7) != 2) {
          goto LABEL_53;
        }
        id v23 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        }
        unint64_t v25 = v23[2];
        unint64_t v24 = v23[3];
        if (v25 >= v24 >> 1) {
          id v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
        }
        v23[2] = v25 + 1;
        v23[v25 + 4] = v6;
        a1[5] = v23;
        uint64_t v26 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return (double *)swift_unknownObjectRelease();
        }
        if (v26 < 0) {
          goto LABEL_62;
        }
        unint64_t v27 = a1[1] + v26;
        if (v6 < v27) {
          goto LABEL_53;
        }
        a1[2] = v27;
        double v28 = specialized CGPoint.init(from:)(a1);
        id v30 = (void *)a1[5];
        if (!v30[2]) {
          goto LABEL_64;
        }
        double v8 = v28;
        uint64_t v9 = v29;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v31 = v30[2];
          if (!v31) {
            goto LABEL_52;
          }
        }
        else
        {
          id v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          uint64_t v31 = v30[2];
          if (!v31)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return (double *)swift_unknownObjectRelease();
          }
        }
        uint64_t v32 = v31 - 1;
        uint64_t v33 = v30[v32 + 4];
        v30[2] = v32;
        a1[5] = v30;
        a1[2] = v33;
      }
      else if (v12 >> 3 == 1)
      {
        if ((v12 & 7) != 2) {
          goto LABEL_53;
        }
        double v14 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        }
        unint64_t v16 = v14[2];
        unint64_t v15 = v14[3];
        if (v16 >= v15 >> 1) {
          double v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
        }
        v14[2] = v16 + 1;
        v14[v16 + 4] = v6;
        a1[5] = v14;
        uint64_t v17 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return (double *)swift_unknownObjectRelease();
        }
        if (v17 < 0)
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          __break(1u);
          v35 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
          uint64_t v36 = v35[2];
          if (!v36)
          {
            __break(1u);
            v35 = (void *)a1[5];
            if (v35[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v36 = v35[2];
                if (v36) {
                  goto LABEL_60;
                }
LABEL_70:
                __break(1u);
                JUMPOUT(0x245EAA73CLL);
              }
            }
            else
            {
              __break(1u);
            }
            v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
            uint64_t v36 = v35[2];
            if (!v36) {
              goto LABEL_70;
            }
          }
LABEL_60:
          uint64_t v37 = v36 - 1;
          uint64_t v38 = v35[v37 + 4];
          v35[2] = v37;
          uint64_t result = (double *)swift_unknownObjectRelease();
          a1[5] = v35;
          a1[2] = v38;
          return result;
        }
        unint64_t v18 = a1[1] + v17;
        if (v6 < v18) {
          goto LABEL_53;
        }
        a1[2] = v18;
        CodableRBDisplayListContents.init(from:)((uint64_t)a1, &v39);
        char v19 = (void *)a1[5];
        if (!v19[2]) {
          goto LABEL_63;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v20 = v19[2];
          if (!v20) {
            goto LABEL_65;
          }
        }
        else
        {
          char v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          uint64_t v20 = v19[2];
          if (!v20) {
            goto LABEL_65;
          }
        }
        uint64_t v21 = v20 - 1;
        uint64_t v22 = v19[v21 + 4];
        v19[2] = v21;
        swift_unknownObjectRelease();
        a1[5] = v19;
        a1[2] = v22;
        uint64_t v7 = v39;
      }
      else
      {
        switch(v12 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              return (double *)swift_unknownObjectRelease();
            }
            break;
          case 1uLL:
            unint64_t v11 = a1[1] + 8;
            if (v6 >= v11) {
              goto LABEL_6;
            }
            goto LABEL_53;
          case 2uLL:
            uint64_t v34 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return (double *)swift_unknownObjectRelease();
            }
            if (v34 < 0) {
              goto LABEL_66;
            }
            unint64_t v11 = a1[1] + v34;
            if (v6 < v11) {
              goto LABEL_53;
            }
LABEL_6:
            a1[1] = v11;
            break;
          case 5uLL:
            unint64_t v11 = a1[1] + 4;
            if (v6 < v11) {
              goto LABEL_53;
            }
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      unint64_t v5 = a1[1];
      unint64_t v6 = a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if (!v7) {
          goto LABEL_4;
        }
        type metadata accessor for DisplayListImageContents();
        uint64_t result = (double *)swift_allocObject();
        result[4] = v8;
        *((void *)result + 5) = v9;
        *((void *)result + 2) = MEMORY[0x263F8EE80];
        *((void *)result + 3) = v7;
        *a2 = result;
        a2[1] = (double *)2;
        a2[2] = 0;
        a2[3] = 0;
        return result;
      }
    }
    if (v13 < v5) {
      goto LABEL_53;
    }
    a1[3] = 0;
LABEL_12:
    unint64_t v12 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return (double *)swift_unknownObjectRelease();
    }
    if (v12 < 8) {
      goto LABEL_53;
    }
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return (double *)swift_willThrow();
}

uint64_t DisplayListImageContents.__allocating_init(displayList:size:)(uint64_t a1, double a2, double a3)
{
  uint64_t result = swift_allocObject();
  *(double *)(result + 32) = a2;
  *(double *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
  *(void *)(result + 16) = MEMORY[0x263F8EE80];
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance VectorImageLayer(uint64_t a1)
{
  return VectorImageLayer.encode(to:)(a1);
}

double *protocol witness for ProtobufDecodableMessage.init(from:) in conformance VectorImageLayer@<X0>(void *a1@<X0>, double **a2@<X8>)
{
  return VectorImageLayer.init(from:)(a1, a2);
}

uint64_t VectorImageContents.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t VectorImageContents.init()()
{
  return v0;
}

void VectorImageContents.size.getter()
{
}

void VectorImageContents.displayList.getter()
{
}

void VectorImageContents.image(size:imageScale:prefersMask:)()
{
}

uint64_t VectorImageContents.deinit()
{
  return v0;
}

uint64_t VectorImageContents.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall CachedVectorImageContents.draw(in:)(CGContextRef in)
{
  objc_msgSend((id)(*(uint64_t (**)(void))(*(void *)v1 + 96))(), sel_renderInContext_options_, in, 0);

  swift_unknownObjectRelease();
}

CGImageRef CachedVectorImageContents.image(size:imageScale:prefersMask:)(char a1, double a2, double a3, double a4)
{
  unint64_t v6 = v4;
  char v11 = a1 ^ 1;
  double v12 = (*(double (**)(void))(*v4 + 88))();
  double v14 = v13;
  BOOL v15 = v13 != a3 || v12 != a2;
  if (!v15)
  {
    swift_beginAccess();
    uint64_t v4 = (void *)v4[2];
    if (v4[2])
    {
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v11 & 1);
      if (v17)
      {
        CGImageRef Image = *(CGImageRef *)(v4[7] + 8 * v16);
        swift_endAccess();
        char v19 = Image;
        return Image;
      }
    }
    swift_endAccess();
  }
  double v20 = ceil(a2 * a4);
  if ((~*(void *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  double v21 = ceil(a3 * a4);
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_18;
  }
  uint64_t v4 = (void *)(uint64_t)v20;
  uint64_t v5 = (uint64_t)v21;
  if (a1)
  {
    size_t v22 = (uint64_t)v20;
    size_t v23 = (uint64_t)v21;
    unint64_t v24 = 0;
    uint32_t v25 = 7;
    goto LABEL_19;
  }
  if (one-time initialization token for sRGB != -1) {
    goto LABEL_33;
  }
LABEL_18:
  unint64_t v24 = (CGColorSpace *)static CGImageRef.sRGB;
  size_t v22 = (size_t)v4;
  size_t v23 = v5;
  uint32_t v25 = 8193;
LABEL_19:
  uint64_t v26 = _CGBitmapContextCreate(v22, v23, v24, v25);
  unint64_t v27 = v26;
  if (!v26) {
    return 0;
  }
  CGContextScaleCTM(v26, (double)(uint64_t)v4 / a2, (double)v5 / a3);
  CGContextScaleCTM(v27, a2 / v12, a3 / v14);
  (*(void (**)(CGContext *))(*v6 + 120))(v27);
  CGImageRef Image = CGBitmapContextCreateImage(v27);

  if (Image) {
    char v28 = v15;
  }
  else {
    char v28 = 1;
  }
  if ((v28 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v29 = Image;
    specialized Dictionary.subscript.setter((uint64_t)Image, v11 & 1);
    swift_endAccess();
  }
  return Image;
}

uint64_t CachedVectorImageContents.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t CachedVectorImageContents.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t type metadata accessor for PDFImageContents()
{
  return self;
}

uint64_t CachedVectorImageContents.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CachedVectorImageContents.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

id one-time initialization function for valueLock()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  static CUINamedVectorGlyph.valueLock = (uint64_t)result;
  return result;
}

uint64_t DrawableImageContents.displayList.getter()
{
  if (v0[5]) {
    goto LABEL_3;
  }
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  objc_msgSend(v1, sel_setDefaultColorSpace_, 1);
  LODWORD(v2) = 1.0;
  id v3 = objc_msgSend(v1, sel_beginCGContextWithAlpha_, v2);
  (*(void (**)(void))(*v0 + 120))();
  objc_msgSend(v1, sel_endCGContext);
  id v4 = objc_msgSend(v1, sel_moveContents);

  v0[5] = v4;
  swift_unknownObjectRelease();
  uint64_t result = v0[5];
  if (result)
  {
LABEL_3:
    return swift_unknownObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DrawableImageContents.__allocating_init()()
{
}

uint64_t DrawableImageContents.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t DrawableImageContents.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

void PDFImageContents.draw(in:)(CGContext *a1)
{
  CGContextSaveGState(a1);
  id v3 = *(CGPDFPage **)(v1 + 48);
  v5.size.width = *(CGFloat *)(v1 + 24);
  v5.size.height = *(CGFloat *)(v1 + 32);
  v5.origin.x = 0.0;
  v5.origin.y = 0.0;
  CGPDFPageGetDrawingTransform(&v4, v3, kCGPDFCropBox, v5, 0, 1);
  CGContextConcatCTM(a1, &v4);
  CGContextDrawPDFPage(a1, v3);
  CGContextRestoreGState(a1);
}

void PDFImageContents.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + 56);
}

uint64_t SVGImageContents.draw(in:)(uint64_t a1)
{
  return MEMORY[0x270F23368](a1, *(void *)(v1 + 48));
}

uint64_t PDFImageContents.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t DisplayListImageContents.init(displayList:size:)(uint64_t a1, double a2, double a3)
{
  *(double *)(v3 + 32) = a2;
  *(double *)(v3 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
  *(void *)(v3 + 16) = MEMORY[0x263F8EE80];
  *(void *)(v3 + 24) = a1;
  return v3;
}

double DisplayListImageContents.size.getter()
{
  return *(double *)(v0 + 32);
}

uint64_t DisplayListImageContents.displayList.getter()
{
  return swift_unknownObjectRetain();
}

void DisplayListImageContents.__allocating_init()()
{
}

void DisplayListImageContents.init()()
{
}

uint64_t DisplayListImageContents.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t DisplayListImageContents.deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t DisplayListImageContents.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DisplayListImageContents()
{
  return self;
}

CGContextRef _CGBitmapContextCreate(size_t width, size_t height, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return CGBitmapContextCreate(0, width, height, 8uLL, 0, space, bitmapInfo);
}

unint64_t lazy protocol witness table accessor for type VectorImageLayer and conformance VectorImageLayer()
{
  unint64_t result = lazy protocol witness table cache variable for type VectorImageLayer and conformance VectorImageLayer;
  if (!lazy protocol witness table cache variable for type VectorImageLayer and conformance VectorImageLayer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VectorImageLayer and conformance VectorImageLayer);
  }
  return result;
}

uint64_t destroy for VectorImageLayer(uint64_t a1)
{
  swift_release();
  double v2 = *(void **)(a1 + 8);
  if ((unint64_t)v2 >= 3) {

  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for VectorImageLayer(void *a1, void *a2)
{
  CGAffineTransform v4 = (void *)a2[1];
  *a1 = *a2;
  swift_retain();
  if ((unint64_t)v4 >= 2)
  {
    if (v4 == (void *)2)
    {
      a1[1] = 2;
    }
    else
    {
      a1[1] = v4;
      id v5 = v4;
    }
  }
  else
  {
    a1[1] = v4;
  }
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for VectorImageLayer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  CGAffineTransform v4 = a1 + 1;
  id v5 = (void *)a1[1];
  unint64_t v6 = a2[1];
  if (v5 != (void *)2)
  {
    if (v6 == 2)
    {
      outlined destroy of Image.Location((id *)a1 + 1);
    }
    else
    {
      if ((unint64_t)v5 < 2)
      {
        if (v6 < 2) {
          goto LABEL_13;
        }
        goto LABEL_9;
      }
      if (v6 >= 2)
      {
        unint64_t *v4 = v6;
        id v9 = (id)v6;

        goto LABEL_14;
      }
    }
    unint64_t v6 = a2[1];
    goto LABEL_13;
  }
  if (v6 < 2)
  {
LABEL_13:
    unint64_t *v4 = v6;
    goto LABEL_14;
  }
  if (v6 == 2)
  {
    unint64_t v6 = 2;
    goto LABEL_13;
  }
LABEL_9:
  unint64_t *v4 = v6;
  id v7 = (id)v6;
LABEL_14:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for VectorImageLayer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  id v5 = a1 + 1;
  CGAffineTransform v4 = (void *)a1[1];
  unint64_t v6 = a2[1];
  if (v4 == (void *)2)
  {
    if (v6 != 2)
    {
      *id v5 = v6;
      goto LABEL_12;
    }
LABEL_6:
    *id v5 = 2;
    goto LABEL_12;
  }
  if (v6 == 2)
  {
    outlined destroy of Image.Location((id *)a1 + 1);
    goto LABEL_6;
  }
  if ((unint64_t)v4 >= 2)
  {
    if (v6 >= 2)
    {
      *id v5 = v6;
    }
    else
    {

      *id v5 = v6;
    }
  }
  else
  {
    *id v5 = v6;
  }
LABEL_12:
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for VectorImageLayer()
{
  return &type metadata for VectorImageLayer;
}

uint64_t type metadata accessor for VectorImageContents()
{
  return self;
}

uint64_t method lookup function for VectorImageContents(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VectorImageContents);
}

uint64_t dispatch thunk of VectorImageContents.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of VectorImageContents.size.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of VectorImageContents.displayList.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of VectorImageContents.image(size:imageScale:prefersMask:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t type metadata accessor for CachedVectorImageContents()
{
  return self;
}

uint64_t method lookup function for CachedVectorImageContents(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CachedVectorImageContents);
}

uint64_t type metadata accessor for DrawableImageContents()
{
  return self;
}

uint64_t method lookup function for DisplayListImageContents(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DisplayListImageContents);
}

uint64_t dispatch thunk of DisplayListImageContents.__allocating_init(displayList:size:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

unsigned char *storeEnumTagSinglePayload for CachedVectorImageContents.CacheKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EAB5ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedVectorImageContents.CacheKey()
{
  return &type metadata for CachedVectorImageContents.CacheKey;
}

SwiftUI::PreferenceValues __swiftcall PreferenceValues.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t PreferenceValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized PreferenceValues.subscript.setter(a1, a2, a3, a4);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for PreferenceValues.Value();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(a1, v5);
}

uint64_t PreferenceValues.Value.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*PreferenceValues.Value.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

_DWORD *PreferenceValues.Value.seed.setter(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(v2 + *(int *)(a2 + 28)) = *result;
  return result;
}

uint64_t (*PreferenceValues.Value.seed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void (*PreferenceValues.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  id v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  void *v9 = a2;
  v9[1] = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for PreferenceValues.Value();
  v9[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[6] = malloc(v12);
  double v13 = malloc(v12);
  v9[7] = v13;
  PreferenceValues.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return PreferenceValues.subscript.modify;
}

void PreferenceValues.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  int v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  uint64_t v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    specialized PreferenceValues.subscript.setter((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    specialized PreferenceValues.subscript.setter((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t PreferenceValues.removeValue<A>(for:)(uint64_t a1)
{
  v4[0] = *v1;
  uint64_t result = PreferenceValues.index<A>(of:)(a1);
  if ((v3 & 1) == 0)
  {
    specialized Array.remove(at:)(result, (uint64_t)v4);
    return outlined destroy of PreferenceValues.Entry((uint64_t)v4);
  }
  return result;
}

Swift::Bool __swiftcall PreferenceValues.mayNotBeEqual(to:)(SwiftUI::PreferenceValues to)
{
  uint64_t v2 = *(void *)to.entries._rawValue;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (v4 != *(void *)(*(void *)to.entries._rawValue + 16)) {
    return 1;
  }
  swift_bridgeObjectRetain();
  Swift::Bool result = swift_bridgeObjectRetain();
  if (v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 32;
    while (v6 < *(void *)(v3 + 16))
    {
      Swift::Bool result = outlined init with copy of PreferenceValues.Entry(v3 + v7, (uint64_t)&v15);
      unint64_t v8 = *(void *)(v2 + 16);
      if (v6 == v8)
      {
        outlined destroy of PreferenceValues.Entry((uint64_t)&v15);
        goto LABEL_14;
      }
      if (v6 >= v8) {
        goto LABEL_20;
      }
      long long v19 = v15;
      long long v20 = v16;
      long long v21 = v17;
      uint64_t v22 = v18;
      outlined init with copy of PreferenceValues.Entry(v2 + v7, (uint64_t)v23);
      long long v15 = v19;
      long long v16 = v20;
      long long v17 = v21;
      uint64_t v18 = v22;
      long long v11 = v23[0];
      long long v12 = v23[1];
      long long v13 = v23[2];
      uint64_t v14 = v24;
      if ((void)v19 != *(void *)&v23[0])
      {
        outlined destroy of PreferenceValues.Entry((uint64_t)&v11);
        outlined destroy of PreferenceValues.Entry((uint64_t)&v15);
LABEL_16:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      int v9 = v16;
      outlined destroy of PreferenceValues.Entry((uint64_t)&v15);
      int v10 = v12;
      Swift::Bool result = outlined destroy of PreferenceValues.Entry((uint64_t)&v11);
      if (v9 == -1 || v10 == -1 || v9 != v10) {
        goto LABEL_16;
      }
      ++v6;
      v7 += 56;
      if (v4 == v6) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t PreferenceValues.description.getter()
{
  uint64_t v1 = *v0;
  long long v13 = closure #1 in PreferenceValues.description.getter;
  uint64_t v14 = 0;
  type metadata accessor for LazyMapSequence<[PreferenceValues.Entry], String>();
  lazy protocol witness table accessor for type LazyMapSequence<[PreferenceValues.Entry], String> and conformance <> LazyMapSequence<A, B>();
  swift_bridgeObjectRetain();
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v12 = v1;
  PreferenceValues.seed.getter(&v11);
  if (v11 == -1)
  {
    unint64_t v5 = 0xE700000000000000;
    uint64_t v6 = 0x64696C61766E69;
  }
  else if (v11)
  {
    LODWORD(v12) = v11;
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  else
  {
    unint64_t v5 = 0xE500000000000000;
    uint64_t v6 = 0x7974706D65;
  }
  uint64_t v12 = v6;
  long long v13 = (uint64_t (*)@<X0>(void *@<X8>))v5;
  v7._countAndFlagsBits = 5972026;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v2;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v12;
}

uint64_t closure #1 in PreferenceValues.description.getter@<X0>(void *a1@<X8>)
{
  v2._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 2112800;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  uint64_t result = _print_unlocked<A, B>(_:_:)();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

void type metadata accessor for LazyMapSequence<[PreferenceValues.Entry], String>()
{
  if (!lazy cache variable for type metadata for LazyMapSequence<[PreferenceValues.Entry], String>)
  {
    type metadata accessor for Int?(255, &lazy cache variable for type metadata for [PreferenceValues.Entry], (uint64_t)&type metadata for PreferenceValues.Entry, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [PreferenceValues.Entry] and conformance [A](&lazy protocol witness table cache variable for type [PreferenceValues.Entry] and conformance [A]);
    unint64_t v0 = type metadata accessor for LazyMapSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<[PreferenceValues.Entry], String>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[PreferenceValues.Entry], String> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyMapSequence<[PreferenceValues.Entry], String> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[PreferenceValues.Entry], String> and conformance <> LazyMapSequence<A, B>)
  {
    type metadata accessor for LazyMapSequence<[PreferenceValues.Entry], String>();
    lazy protocol witness table accessor for type [PreferenceValues.Entry] and conformance [A](&lazy protocol witness table cache variable for type [PreferenceValues.Entry] and conformance [A]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[PreferenceValues.Entry], String> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [PreferenceValues.Entry] and conformance [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Int?(255, &lazy cache variable for type metadata for [PreferenceValues.Entry], (uint64_t)&type metadata for PreferenceValues.Entry, MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t assignWithCopy for PreferenceValues.Entry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  return a1;
}

uint64_t assignWithTake for PreferenceValues.Entry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Environment.Content();
  double v7 = MEMORY[0x270FA5388](v6);
  Swift::String v9 = (char *)&v23[-1] - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v23[-1] - v8, v3, v6, v7);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v9, v5);
  }
  os_log_type_t v12 = static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  long long v13 = (void *)static Log.runtimeIssuesLog;
  os_log_type_t v14 = v12;
  if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v12))
  {
    long long v15 = v13;
    long long v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v23[0] = v17;
    *(_DWORD *)long long v16 = 136315138;
    uint64_t v18 = _typeName(_:qualified:)();
    v24[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_245728000, v15, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v17, -1, -1);
    MEMORY[0x24C527CC0](v16, -1, -1);
  }
  v24[0] = 0;
  v24[1] = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  long long v20 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  long long v21 = static CoreGlue2.shared;
  v20(v24);

  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t Environment.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Environment.Content();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t Environment.content.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Environment.Content();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*Environment.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Environment.error()()
{
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000002462222D0;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static Environment._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5)
{
  return specialized static Environment._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5);
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt8>, MEMORY[0x263F8E778], MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  os_log_type_t v12 = v10 + 32;
  long long v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned __int8 *assignWithCopy for Environment(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      a1[v7] = 0;
      swift_retain();
    }
  }
  return a1;
}

void *initializeWithTake for Environment(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithTake for Environment(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void storeEnumTagSinglePayload for Environment(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x245EAD0F8);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

void *initializeBufferWithCopyOfBuffer for Environment(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
LABEL_24:
    swift_retain();
    return v3;
  }
  unsigned int v9 = a2[v5];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v11 = v5;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_19;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_19:
        int v13 = (v12 | (v10 << (8 * v5))) + 2;
        unsigned int v9 = v12 + 2;
        if (v5 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 != 1)
  {
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v5) = 0;
    goto LABEL_24;
  }
  (*(void (**)(void *))(v4 + 16))(a1);
  *((unsigned char *)v3 + v5) = 1;
  return v3;
}

unsigned __int8 *assignWithCopy for Environment.Content(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      a1[v7] = 0;
      swift_retain();
    }
  }
  return a1;
}

void *initializeWithTake for Environment.Content(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment.Content(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void storeEnumTagSinglePayload for Environment.Content(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x245EAD938);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t destroy for FullEnvironmentBox(uint64_t a1)
{
  swift_release();
  if (*(void *)(a1 + 16) != 1)
  {
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for FullEnvironmentBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  unint64_t v5 = (_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  swift_retain();
  if (v4 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v6;
    swift_retain();
    swift_retain();
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FullEnvironmentBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) != 1)
  {
    if (v4 != 1)
    {
      *(void *)(a1 + 16) = v4;
      swift_retain();
      swift_release();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of EnvironmentValues(a1 + 16);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of EnvironmentValues(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for FullEnvironmentBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) != 1)
  {
    if (v4 != 1)
    {
      *(void *)(a1 + 16) = v4;
      swift_release();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of EnvironmentValues(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FullEnvironmentBox()
{
  return &type metadata for FullEnvironmentBox;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentBox(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v11 = v10 + ((v7 + 16) & ~(unint64_t)v7) + 1;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & v9));
    swift_retain();
  }
  else
  {
    int v17 = *(_DWORD *)a2;
    unint64_t v16 = (unint64_t)a2 + 11;
    *(_DWORD *)a1 = v17;
    char v18 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
    void *v18 = *(void *)(v16 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = (void *)(((unint64_t)v18 + v8 + 8) & ~v8);
    long long v20 = (const void *)(((v16 & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8);
    long long v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v21(v20, 1, v4))
    {
      memcpy(v19, v20, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v19, v20, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v4);
    }
    *((unsigned char *)v19 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *((unsigned char *)v20 + v10);
  }
  return v3;
}

_DWORD *assignWithCopy for EnvironmentBox(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  unint64_t v11 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v6) = v12(v10, 1, v7);
  int v13 = v12(v11, 1, v7);
  if (v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v8 + 84);
    size_t v15 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
    int v14 = *(_DWORD *)(v8 + 84);
    size_t v15 = *(void *)(v8 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v10, v11, v16);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v17 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v8 + 64) + 1;
  }
  *((unsigned char *)v10 + v17) = *((unsigned char *)v11 + v17);
  return a1;
}

_DWORD *assignWithTake for EnvironmentBox(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_release();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  unint64_t v11 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v13 = v12(v10, 1, v7);
  int v14 = v12(v11, 1, v7);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_12;
    }
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  if (v15) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v16 + 1;
  }
  memcpy(v10, v11, v17);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v18 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v8 + 64) + 1;
  }
  *((unsigned char *)v10 + v18) = *((unsigned char *)v11 + v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentBox(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  if (v5) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 2;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_29;
  }
  uint64_t v11 = v9 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v8 + 16) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_29:
      size_t v17 = (unint64_t *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
      if (v6 > 0x7FFFFFFE)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v8 + 8) & ~v8);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *v17;
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        if ((v18 + 1) >= 2) {
          return v18;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_29;
  }
LABEL_21:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for EnvironmentBox(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = v12 + ((v11 + 16) & ~v11) + 1;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v12 + ((v11 + 16) & ~v11) != -1)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x245EAE688);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        long long v20 = (void *)((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFF8);
        if (v9 > 0x7FFFFFFE)
        {
          long long v21 = (unsigned char *)(((unint64_t)v20 + v11 + 8) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v26(((unint64_t)v20 + v11 + 8) & ~v11, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)long long v21 = v23;
                  break;
                case 3:
                  *(_WORD *)long long v21 = v23;
                  v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)long long v21 = v23;
                  break;
                default:
                  *long long v21 = v23;
                  break;
              }
            }
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *long long v20 = 0;
          *(_DWORD *)long long v20 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *long long v20 = a2;
        }
      }
      return;
  }
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in FullEnvironmentBox()
{
  return &protocol witness table for Environment<A>;
}

uint64_t static ObservationRegistrar.latestTriggers.getter()
{
  return static ObservationRegistrar.latestTriggers.getter(&one-time initialization token for latestTriggers);
}

uint64_t static ObservationRegistrar.latestTriggers.setter(uint64_t a1)
{
  return static ObservationRegistrar.latestTriggers.setter(a1, &one-time initialization token for latestTriggers, &static ObservationRegistrar.latestTriggers);
}

uint64_t (*static ObservationRegistrar.latestTriggers.modify())()
{
  if (one-time initialization token for latestTriggers != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static ObservationRegistrar.lastestAccessLists.getter()
{
  return static ObservationRegistrar.latestTriggers.getter(&one-time initialization token for lastestAccessLists);
}

uint64_t static ObservationRegistrar.latestTriggers.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static ObservationRegistrar.lastestAccessLists.setter(uint64_t a1)
{
  return static ObservationRegistrar.latestTriggers.setter(a1, &one-time initialization token for lastestAccessLists, &static ObservationRegistrar.lastestAccessLists);
}

uint64_t static ObservationRegistrar.latestTriggers.setter(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ObservationRegistrar.lastestAccessLists.modify())()
{
  if (one-time initialization token for lastestAccessLists != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t _withObservation<A, B>(attribute:do:)@<X0>(unsigned int a1@<W0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  v62 = a3;
  uint64_t v55 = a4;
  v60 = a6;
  v61 = a2;
  unsigned int v54 = a1;
  v64[6] = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  v53 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v58 = (char *)&v51 - v11;
  MEMORY[0x270FA5388](v12);
  v52 = (char *)&v51 - v13;
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v14);
  v56 = (char **)((char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  int v19 = (char *)&v51 - v18;
  uint64_t v59 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v20);
  int v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v57 = (char *)&v51 - v24;
  if (one-time initialization token for lastestAccessLists != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v25 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v19, 1, 1, v7);
  MEMORY[0x270FA5388](v26);
  unint64_t v27 = v61;
  *(&v51 - 4) = (char *)a5;
  *(&v51 - 3) = v27;
  *(&v51 - 2) = v62;
  unint64_t v28 = type metadata accessor for Error();
  uint64_t v29 = v63;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)_s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0, (uint64_t)(&v51 - 6), v15, v28, a5, MEMORY[0x263F8E4E0], (uint64_t)v64);
  if (v29)
  {
    _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
    static ObservationRegistrar.lastestAccessLists = v25;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = a5;
    v51 = v22;
    v61 = 0;
    v62 = (char *)v25;
    uint64_t v32 = (void (*)(void, void, void))v56;
    _s11Observation0A8TrackingV11_AccessListVSgWOcTm_1((uint64_t)v19, (uint64_t)v56, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
    int v33 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v8 + 48))(v32, 1, v7);
    uint64_t v63 = v8;
    if (v33 == 1)
    {
      _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0((uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
    }
    else
    {
      uint64_t v34 = v52;
      v56 = *(char ***)(v8 + 32);
      ((void (*)(char *, void, uint64_t))v56)(v52, v32, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v58, v34, v7);
      swift_beginAccess();
      v35 = (char *)static ObservationRegistrar.lastestAccessLists;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      static ObservationRegistrar.lastestAccessLists = v35;
      uint64_t v37 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1, (unint64_t)v35);
        static ObservationRegistrar.lastestAccessLists = v35;
      }
      unint64_t v39 = *((void *)v35 + 2);
      unint64_t v38 = *((void *)v35 + 3);
      if (v39 >= v38 >> 1)
      {
        v35 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, (unint64_t)v35);
        static ObservationRegistrar.lastestAccessLists = v35;
      }
      *((void *)v35 + 2) = v39 + 1;
      uint64_t v40 = v63;
      ((void (*)(char *, char *, uint64_t))v56)(&v35[((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v63 + 72) * v39], v58, v7);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v7);
      uint64_t v31 = v37;
    }
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    uint64_t v42 = v57;
    v41(v57, v51, v31);
    _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
    v41(v60, v42, v31);
    uint64_t v43 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
    if (v43)
    {
      uint64_t v44 = v7;
      uint64_t v45 = (uint64_t)v53;
      uint64_t v46 = v63 + 16;
      uint64_t v63 = *(void *)(v63 + 16);
      uint64_t v47 = (char *)static ObservationRegistrar.lastestAccessLists
          + ((*(unsigned __int8 *)(v46 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 64));
      uint64_t v48 = *(void *)(v46 + 56);
      uint64_t v49 = v55;
      v60 = (char *)static ObservationRegistrar.lastestAccessLists;
      swift_bridgeObjectRetain();
      uint64_t v50 = v54;
      do
      {
        ((void (*)(uint64_t, char *, uint64_t))v63)(v45, v47, v44);
        installObservationSlow<A>(accessList:attribute:)(v45, v50, v49);
        (*(void (**)(uint64_t, uint64_t))(v46 - 8))(v45, v44);
        v47 += v48;
        --v43;
      }
      while (v43);
      swift_bridgeObjectRelease();
    }
    static ObservationRegistrar.lastestAccessLists = v62;
    return swift_bridgeObjectRelease();
  }
}

uint64_t _installObservation<A>(accessLists:attribute:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(type metadata accessor for ObservationTracking._AccessList() - 8);
    uint64_t v8 = v6 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      installObservationSlow<A>(accessList:attribute:)(v8, a2, a3);
      v8 += v9;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void closure #1 in installObservationSlow<A>(accessList:attribute:)()
{
}

void (*Rule.observationInstaller.getter(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t result = (void (*)(uint64_t))AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v5 = (int)result;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    *(_DWORD *)(v6 + 32) = v5;
    return partial apply for closure #1 in Rule.observationInstaller.getter;
  }
  return result;
}

void (*StatefulRule.observationInstaller.getter(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t result = (void (*)(uint64_t))AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v5 = (int)result;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    *(_DWORD *)(v6 + 32) = v5;
    return partial apply for closure #1 in StatefulRule.observationInstaller.getter;
  }
  return result;
}

void closure #1 in Rule.observationInstaller.getter(uint64_t a1, uint64_t a2)
{
  id v4 = (id)AGGraphGetAttributeSubgraph();
  int IsValid = AGSubgraphIsValid();

  if (IsValid)
  {
    id v7 = (id)AGGraphGetAttributeSubgraph();
    AGGraphClearUpdate();
    id v6 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in closure #1 in Rule.observationInstaller.getter(a1, a2);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in closure #1 in Rule.observationInstaller.getter(uint64_t a1, uint64_t a2)
{
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking._AccessList>, MEMORY[0x263F8F200], MEMORY[0x263F8E0F8]);
  uint64_t v4 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject() + v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  installObservationSlow<A>(accessList:attribute:)(v7, a2, AssociatedTypeWitness);
  swift_setDeallocating();
  swift_arrayDestroy();

  return swift_deallocClassInstance();
}

uint64_t sub_245EAF4C0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in Rule.observationInstaller.getter(uint64_t a1)
{
  closure #1 in Rule.observationInstaller.getter(a1, *(unsigned int *)(v1 + 32));
}

uint64_t sub_245EAF500()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in StatefulRule.observationInstaller.getter(uint64_t a1)
{
  closure #1 in Rule.observationInstaller.getter(a1, *(unsigned int *)(v1 + 32));
}

uint64_t sub_245EAF540()
{
  uint64_t v1 = type metadata accessor for ObservationTracking();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_245EAF5D0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t assignWithCopy for ObservationGraphMutation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ObservationGraphMutation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ObservationGraphMutation()
{
  return &type metadata for ObservationGraphMutation;
}

uint64_t static AnyTransition.push(from:)(char a1)
{
  type metadata accessor for TransitionBox<PushTransition>();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = a1;
  return result;
}

SwiftUI::PushTransition __swiftcall PushTransition.init(edge:)(SwiftUI::PushTransition edge)
{
  v1->edge = edge.edge;
  return edge;
}

void type metadata accessor for TransitionBox<PushTransition>()
{
  if (!lazy cache variable for type metadata for TransitionBox<PushTransition>)
  {
    lazy protocol witness table accessor for type PushTransition and conformance PushTransition();
    unint64_t v0 = type metadata accessor for TransitionBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<PushTransition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PushTransition and conformance PushTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type PushTransition and conformance PushTransition;
  if (!lazy protocol witness table cache variable for type PushTransition and conformance PushTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PushTransition and conformance PushTransition);
  }
  return result;
}

uint64_t PushTransition.edge.getter()
{
  return *v0;
}

uint64_t PushTransition.edge.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PushTransition.edge.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void PushTransition.body(content:phase:)(char a1@<W1>, uint64_t a2@<X8>)
{
  LOBYTE(v3) = *v2;
  if (a1)
  {
    unsigned int v3 = 0x1000302u >> (8 * v3);
    if (a1 == 1) {
      LOBYTE(v3) = 4;
    }
  }
  double v4 = 0.0;
  if (a1 == 1) {
    double v4 = 1.0;
  }
  *(unsigned char *)a2 = v3;
  *(double *)(a2 + 8) = v4;
}

uint64_t PushTransition._makeContentTransition(transition:)(unsigned __int8 *a1)
{
  uint64_t v3 = *a1;
  if (v3 == 3)
  {
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*((void *)a1 + 3), a1[32]);
    *((void *)a1 + 3) = 1;
    a1[32] = 0;
  }
  else
  {
    double v5 = *((double *)a1 + 2);
    double v6 = 0.0;
    switch(*v1)
    {
      case 1:
        double v6 = -*((double *)a1 + 1);
        double v5 = 0.0;
        break;
      case 2:
        break;
      case 3:
        double v5 = 0.0;
        double v6 = *((double *)a1 + 1);
        break;
      default:
        double v5 = -v5;
        break;
    }
    type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, MEMORY[0x263F8E0F8]);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = v7;
    *(_OWORD *)(v7 + 16) = xmmword_2461BE2B0;
    *(_DWORD *)(v7 + 32) = 3;
    if (v3)
    {
      float v9 = v6 * 0.4;
      *(float *)(v7 + 36) = v9;
      float v10 = v5 * 0.4;
      *(unsigned char *)(v7 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
      *(float *)(v7 + 44) = v10;
      *(unsigned char *)(v7 + 48) = 0;
      *(void *)(v7 + 52) = 0x3F80000000000000;
      *(void *)(v7 + 6specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
      float v11 = v6;
      float v12 = v5;
      *(_DWORD *)(v7 + 68) = 3;
      *(float *)(v7 + 72) = -v11;
      *(unsigned char *)(v7 + 76) = 0;
      *(float *)(v7 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -v12;
      *(unsigned char *)(v7 + 84) = 0;
      *(void *)(v7 + 88) = 0x3F80000000000000;
      *(_OWORD *)(v7 + 96) = xmmword_2461F0BB0;
      *(unsigned char *)(v7 + 112) = 2;
      *(_DWORD *)(v7 + 116) = 0;
      *(unsigned char *)(v7 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 2;
      *(void *)(v7 + 124) = 0x3F19999A3ECCCCCDLL;
    }
    else
    {
      float v13 = v6;
      float v14 = v5;
      *(float *)(v7 + 36) = v13;
      *(unsigned char *)(v7 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
      *(float *)(v7 + 44) = v14;
      *(unsigned char *)(v7 + 48) = 0;
      *(void *)(v7 + 52) = 0x3F80000000000000;
      *(void *)(v7 + 6specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
      *(_DWORD *)(v7 + 68) = 3;
      *(float *)(v7 + 72) = -v13;
      *(unsigned char *)(v7 + 76) = 0;
      *(float *)(v7 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -v14;
      *(unsigned char *)(v7 + 84) = 0;
      *(void *)(v7 + 88) = 0x3F80000000000000;
      *(_OWORD *)(v7 + 96) = xmmword_2461F0BB0;
      *(unsigned char *)(v7 + 112) = 2;
      *(_DWORD *)(v7 + 116) = 0;
      *(unsigned char *)(v7 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 2;
      *(void *)(v7 + 124) = 0x3F80000000000000;
    }
    *(void *)(v7 + 132) = 3;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*((void *)a1 + 3), a1[32]);
    *((void *)a1 + 3) = v8;
    a1[32] = 1;
  }
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in PushTransition()
{
  return swift_getOpaqueTypeConformance2();
}

unsigned char *storeEnumTagSinglePayload for PushTransition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EAFB64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PushTransition()
{
  return &type metadata for PushTransition;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect>();
    lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect>);
    }
  }
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>)
  {
    type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(255, &lazy cache variable for type metadata for PlaceholderContentView<PushTransition>, (uint64_t)&type metadata for PushTransition, (uint64_t (*)(void, uint64_t))type metadata accessor for PlaceholderContentView);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t AccessibilityCombinable.combined(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 8))(a1, a2, a3);
}

uint64_t dispatch thunk of AccessibilityCombinable.merge(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t Gradient.color(at:)(uint64_t a1, double a2)
{
  type metadata accessor for ColorBox<GradientColorProvider>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 24) = 0;
  *(double *)(v4 + 32) = a2;
  swift_bridgeObjectRetain();
  return v4;
}

void type metadata accessor for ColorBox<GradientColorProvider>()
{
  if (!lazy cache variable for type metadata for ColorBox<GradientColorProvider>)
  {
    lazy protocol witness table accessor for type GradientColorProvider and conformance GradientColorProvider();
    unint64_t v0 = type metadata accessor for ColorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<GradientColorProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GradientColorProvider and conformance GradientColorProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider;
  if (!lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider;
  if (!lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider;
  if (!lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider);
  }
  return result;
}

uint64_t AnyGradient.color(at:)(uint64_t a1, double a2)
{
  type metadata accessor for ColorBox<GradientColorProvider>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 24) = 1;
  *(double *)(v4 + 32) = a2;
  swift_retain();
  return v4;
}

uint64_t initializeBufferWithCopyOfBuffer for GradientColorProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of EitherGradient(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for GradientColorProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of EitherGradient(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of EitherGradient(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for GradientColorProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of EitherGradient(v6, v7);
  *(void *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for GradientColorProvider(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GradientColorProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for GradientColorProvider()
{
  return &unk_26FA64138;
}

float GradientColorProvider.resolve(in:)(uint64_t *a1)
{
  void (*v6)(uint64_t *__return_ptr, double *);
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  float v18;
  float v19;
  double v20;
  float v21;
  __int32 v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  double v28;
  float v29;
  float v31;
  double v32;
  double v33;
  double v34;
  double v35;
  char v36;
  uint64_t v37;
  char v38;

  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)v1;
  double v5 = *(double *)(v1 + 16);
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v32 = *(double *)a1;
    int v33 = *(double *)&v3;
    uint64_t v6 = *(void (**)(uint64_t *__return_ptr, double *))(*(void *)v4 + 104);
    swift_retain();
    v6(&v37, &v32);
    outlined consume of EitherGradient(v4, 1);
    float v9 = v37;
    float v10 = v38;
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined copy of EitherGradient(v4, 0);
    float v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(v4, v2, v3);
    swift_release();
    swift_release();
    if (one-time initialization token for default != -1) {
LABEL_21:
    }
      swift_once();
    float v10 = static ResolvedGradient.ColorSpace.default;
    outlined consume of EitherGradient(v4, 0);
  }
  float v11 = *(void *)(v9 + 16);
  float v12 = v11 - 1;
  if (v11 == 1)
  {
    float v13 = *(float *)(v9 + 32);
LABEL_18:
    swift_bridgeObjectRelease();
    return v13;
  }
  if (v11)
  {
    float v14 = 0;
    while (1)
    {
      if (!v12)
      {
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v15 = v9 + v14;
      uint64_t v16 = *(double *)(v9 + v14 + 96);
      if (v5 <= v16) {
        break;
      }
      v14 += 48;
      if (!--v12)
      {
        float v13 = *(float *)(v9 + 32 + 48 * v11 - 48);
        goto LABEL_18;
      }
    }
    float v13 = *(float *)(v15 + 32);
    uint64_t v17 = *(float *)(v15 + 36);
    uint64_t v18 = *(float *)(v15 + 40);
    int v19 = *(float *)(v15 + 44);
    uint64_t v20 = *(double *)(v15 + 48);
    if (v20 <= v5)
    {
      uint64_t v21 = *(float *)(v15 + 80);
      int v22 = *(_DWORD *)(v15 + 84);
      uint64_t v23 = *(float *)(v15 + 88);
      uint64_t v24 = *(float *)(v15 + 92);
      *(double *)v7.i64 = (v5 - v20) / (v16 - v20);
      if ((*(unsigned char *)(v9 + v14 + 120) & 1) == 0)
      {
        uint64_t v25 = *(float *)(v15 + 80);
        LODWORD(v26) = HIDWORD(*(void *)(v15 + 112));
        unint64_t v27 = COERCE_FLOAT(HIDWORD(*(void *)(v15 + 104)));
        unint64_t v28 = COERCE_FLOAT(*(void *)(v15 + 112));
        uint64_t v32 = COERCE_FLOAT(*(void *)(v15 + 104));
        int v33 = v27;
        uint64_t v34 = v28;
        v35 = v26;
        uint64_t v36 = 0;
        *(double *)v7.i64 = UnitCurve.value(at:)(*(Swift::Double *)v7.i64);
        uint64_t v21 = v25;
      }
      LOBYTE(v32) = v10;
      *(float *)v7.i32 = *(double *)v7.i64;
      uint64_t v31 = *(float *)v7.i32;
      *(float *)v7.i32 = v13;
      v8.i32[0] = v22;
      ResolvedGradient.ColorSpace.mix(_:_:by:)(v7, v17, v18, v19, v21, v8, v23, v24, v31);
      float v13 = v29;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  return 0.0;
}

Swift::Int GradientColorProvider.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    uint64_t v4 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
    swift_retain();
    v4(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v3;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GradientColorProvider(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  Swift::UInt64 v5 = *(void *)(v1 + 16);
  if (v4)
  {
    Hasher._combine(_:)(1uLL);
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v3 + 120);
    swift_retain();
    v6(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
  }
  outlined consume of EitherGradient(v3, v4);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v5;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GradientColorProvider()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    char v4 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
    swift_retain();
    v4(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v3;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GradientColorProvider(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  double v3 = *((double *)a1 + 2);
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  double v6 = *((double *)a2 + 2);
  uint64_t v10 = *a1;
  char v11 = v2;
  uint64_t v8 = v4;
  char v9 = v5;
  return static EitherGradient.== infix(_:_:)(&v10, &v8) & (v3 == v6);
}

unint64_t instantiation function for generic protocol witness table for GradientColorProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GradientColorProvider and conformance GradientColorProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t Binding.transaction.getter()
{
  return swift_retain();
}

uint64_t Binding.transaction.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Binding.transaction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Binding.location.getter()
{
  return swift_retain();
}

uint64_t Binding.location.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Binding.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Binding._value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
}

uint64_t Binding._value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 32), a1);
}

uint64_t (*Binding._value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Binding.init(value:location:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a2;
  *a4 = a3;
  a4[1] = a2;
  uint64_t v6 = *(void *)(v5 + 88);
  Swift::UInt64 v7 = (char *)a4 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v8(v7, a1, v6);
}

uint64_t (*_s7SwiftUI7BindingV11getIsolatedyxycxyYbYAcFZ(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a3;
  v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  return _s7SwiftUI7BindingV11getIsolatedyxycxyYbYAcFZxycfU_TA;
}

void (*Binding.wrappedValue.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  *uint64_t v5 = v2;
  v5[1] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[2] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[3] = malloc(v8);
  char v9 = malloc(v8);
  v5[4] = v9;
  Binding.readValue()(a2, (uint64_t)v9);
  return Binding.wrappedValue.modify;
}

void Binding.wrappedValue.modify(void **a1, char a2)
{
  uint64_t v2 = (void **)*a1;
  double v3 = (void *)(*a1)[3];
  uint64_t v4 = (void *)(*a1)[4];
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = (*a1)[2];
  uint64_t v7 = (void *)**a1;
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))((*a1)[3], v4, v5);
    (*(void (**)(void *, void))(*(void *)v7[1] + 128))(v3, *v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)v7[1] + 128))((*a1)[4], *v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Binding<A>.id.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v5, (uint64_t)v4);
  dispatch thunk of Identifiable.id.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance <A> Binding<A>(uint64_t a1)
{
  return Binding<A>.id.getter(a1);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance <A> Binding<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v9.n128_f64[0] = MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v11 = (char *)v15 - v10;
  uint64_t v12 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v12 + 16))(a3, v3, a1, v9);
  Binding<A>.startIndex.getter(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, a1);
  v15[1] = v6;
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3 + *(int *)(v13 + 36), v11, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <A> Binding<A>(a1, a2, MEMORY[0x263F8D7F8]);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <A> Binding<A>(a1, a2, MEMORY[0x263F8D810]);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return a3(a1, WitnessTable);
}

uint64_t Binding<A>.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return Binding<A>.startIndex.getter(a1, a2, MEMORY[0x263F8D7B0]);
}

uint64_t Binding<A>.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return Binding<A>.startIndex.getter(a1, a2, MEMORY[0x263F8D7E0]);
}

uint64_t Binding<A>.indices.getter(uint64_t a1, uint64_t a2)
{
  return Binding<A>.startIndex.getter(a1, a2, MEMORY[0x263F8D7D8]);
}

uint64_t Binding<A>.startIndex.getter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void))
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v9, (uint64_t)v8);
  a3(v5, *(void *)(a2 + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Binding<A>.index(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v6, (uint64_t)v5);
  dispatch thunk of Collection.index(after:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Binding<A>.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v6, (uint64_t)v5);
  dispatch thunk of Collection.formIndex(after:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Binding<A>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v49 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a1;
  uint64_t v45 = *(void *)(a3 + 8);
  uint64_t v48 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v44 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v32 - v10;
  unint64_t v39 = (char *)&v32 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v43 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v41((char *)&v32 - v17, v4, a2, v16);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v40(v11, v47, AssociatedTypeWitness);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (v19 + 48) & ~v19;
  uint64_t v21 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v22 = (v13 + v20 + v21) & ~v21;
  uint64_t v35 = v22;
  uint64_t v37 = v19 | v21 | 7;
  uint64_t v38 = v22 + v8;
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 3) = 0;
  uint64_t v24 = v49;
  *((void *)v23 + 4) = v48;
  *((void *)v23 + 5) = v24;
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v32 = a2;
  v34(&v23[v20], v18, a2);
  int v33 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v25 = v36;
  v33(&v23[v22], v39, v36);
  uint64_t v26 = v43;
  ((void (*)(char *, uint64_t, uint64_t))v41)(v43, v42, a2);
  unint64_t v27 = v44;
  v40(v44, v47, v25);
  unint64_t v28 = (char *)swift_allocObject();
  *((void *)v28 + 2) = 0;
  *((void *)v28 + 3) = 0;
  uint64_t v29 = v49;
  *((void *)v28 + 4) = v48;
  *((void *)v28 + 5) = v29;
  v34(&v28[v20], v26, v32);
  v33(&v28[v35], v27, v25);
  uint64_t v30 = swift_getAssociatedTypeWitness();
  return Binding.init(get:set:)((void (*)(uint64_t))partial apply for closure #1 in Binding<A>.subscript.getter, (uint64_t)v23, (uint64_t)partial apply for closure #2 in Binding<A>.subscript.getter, (uint64_t)v28, v30, v46);
}

uint64_t closure #1 in Binding<A>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Binding();
  Binding.readValue()(v8, (uint64_t)v7);
  uint64_t v9 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v11 = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, v11, AssociatedTypeWitness);
  v9(v14, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t closure #2 in Binding<A>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a1;
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  double v17 = MEMORY[0x270FA5388](v16);
  (*(void (**)(char *, uint64_t, double))(v19 + 16))((char *)&v22 - v18, a5, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v23, AssociatedTypeWitness);
  uint64_t v20 = type metadata accessor for Binding();
  Binding.readValue()(v20, (uint64_t)v11);
  dispatch thunk of MutableCollection.subscript.setter();
  (*(void (**)(char *, void))(**(void **)(a4 + 8) + 128))(v11, *(void *)a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a6);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.startIndex.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for Collection.endIndex.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.endIndex.getter(a1, *(void *)(a2 - 8));
}

void (*protocol witness for Collection.subscript.read in conformance <A> Binding<A>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (uint64_t)Binding<A>.subscript.read(v8, a2, a3, *(void *)(a4 - 8));
  return protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>;
}

void (*Binding<A>.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Binding();
  *a1 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  a1[1] = v9;
  uint64_t v10 = malloc(*(void *)(v9 + 64));
  a1[2] = (uint64_t)v10;
  Binding<A>.subscript.getter(a2, a3, a4, v10);
  return ArraySlice.subscript.readspecialized ;
}

uint64_t protocol witness for Collection.subscript.getter in conformance <A> Binding<A>()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection.indices.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.indices.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <A> Binding<A>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance <A> Binding<A>()
{
  return MEMORY[0x270F9E150]();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <A> Binding<A>()
{
  return MEMORY[0x270F9E148]();
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance <A> Binding<A>()
{
  return MEMORY[0x270F9E180]();
}

uint64_t protocol witness for Collection.index(after:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.index(after:)(a1, a2);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.formIndex(after:)(a1, a2);
}

uint64_t Binding<A>.index(before:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v6, (uint64_t)v5);
  dispatch thunk of BidirectionalCollection.index(before:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Binding<A>.formIndex(before:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v6, (uint64_t)v5);
  dispatch thunk of BidirectionalCollection.formIndex(before:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.index(before:)(a1, a2);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.formIndex(before:)(a1, a2);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance <A> Binding<A>()
{
  return MEMORY[0x270F9D430]();
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance <A> Binding<A>()
{
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x24C5225F0](a1, a2, a3, WitnessTable);
}

uint64_t Binding.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a3, a1);
  swift_release_n();
  return swift_release();
}

uint64_t Binding.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v23 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v4 = *(void *)(*(void *)(*MEMORY[0x263F8DE50] + *a1 + 8) + 16);
  uint64_t v21 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v7 = type metadata accessor for BindingOperations.NilCoalescing();
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for WritableKeyPath();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v27 = v10;
  uint64_t v28 = v7;
  uint64_t v29 = WitnessTable;
  uint64_t v30 = v12;
  uint64_t v13 = type metadata accessor for ComposedProjection();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  double v17 = (char *)&v20 - v16;
  uint64_t v27 = (uint64_t)v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v6, v25, v4, v15);
  BindingOperations.NilCoalescing.init(defaultValue:)((uint64_t)v6, v4, (uint64_t)v9);
  Projection.composed<A>(with:)((uint64_t)v9, v10, v7, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  uint64_t v18 = swift_getWitnessTable();
  Binding.projecting<A>(_:)((uint64_t)v17, v23, v13, v18, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t Binding.init<A>(flattening:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = v12;
  uint64_t v30 = v13;
  uint64_t v31 = v14;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = KeyPath;
  uint64_t v16 = type metadata accessor for AnyLocation();
  uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in Binding.init<A>(flattening:), (uint64_t)v25, a3, v16, MEMORY[0x263F8E628], a4, MEMORY[0x263F8E658], v17);
  swift_release();
  uint64_t v19 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  v32[5] = swift_getWitnessTable();
  uint64_t v21 = swift_getWitnessTable();
  FlattenedCollectionLocation.init(base:)(v18, v19, (uint64_t)v32);
  uint64_t v22 = v32[0];
  v32[3] = v21;
  v32[4] = v32[0];
  v32[0] = a2;
  v32[1] = v19;
  v32[2] = WitnessTable;
  type metadata accessor for FlattenedCollectionLocation();
  FlattenedCollectionLocation.get()();
  swift_getWitnessTable();
  type metadata accessor for LocationBox();
  v32[0] = v22;
  uint64_t v23 = (uint64_t *)LocationBox.__allocating_init(_:)((uint64_t)v32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  return Binding.init(value:location:)((uint64_t)v11, v23, a5);
}

void static Binding._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t static EnableRuntimeConcurrencyCheck.isEnabled.getter()
{
  return 1;
}

uint64_t sub_245EB248C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _s7SwiftUI7BindingV11getIsolatedyxycxyYbYAcFZxycfU_TA()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t partial apply for closure #1 in Binding.init(get:set:)(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(v1 + 24);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in Binding.init(get:set:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 24);
  swift_retain();
  v5(a1, a2);

  return swift_release();
}

uint64_t partial apply for closure #1 in Binding<A>.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  type metadata accessor for Binding();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(v1 + 16);

  return closure #1 in Binding<A>.subscript.getter(v4, v3, a1);
}

uint64_t objectdestroy_8Tm()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  unint64_t v4 = v3 + *(void *)(*(void *)v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3 + v2[10], v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Binding<A>.subscript.getter(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = *(void *)(type metadata accessor for Binding() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = (uint64_t)v1 + ((v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #2 in Binding<A>.subscript.getter(a1, v8, v9, (uint64_t)v1 + v5, v10, v3);
}

uint64_t partial apply for implicit closure #1 in Binding.init<A>(flattening:)()
{
  return swift_getAtKeyPath();
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for Sequence in <A> Binding<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for Collection in <A> Binding<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>()
{
  return associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>();
}

{
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in <A> Binding<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in <A> Binding<A>()
{
  return associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>();
}

uint64_t sub_245EB2BC0()
{
  uint64_t v0 = type metadata accessor for Binding();
  return Binding.wrappedValue.getter(v0);
}

uint64_t sub_245EB2BFC(uint64_t a1)
{
  return specialized Binding.wrappedValue.setter(a1);
}

uint64_t sub_245EB2C3C()
{
  return 8;
}

void *sub_245EB2C48(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Binding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v16(v14, v15, v4);
  }
  return a1;
}

void *initializeWithTake for Binding(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

ValueMetadata *type metadata accessor for EnableRuntimeConcurrencyCheck()
{
  return &type metadata for EnableRuntimeConcurrencyCheck;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in Binding<A>.Box()
{
  return &protocol witness table for Binding<A>;
}

uint64_t View._untagged()(uint64_t a1)
{
  char v2 = 1;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for IsAuxiliaryContentTraitKey, (uint64_t)&v2, a1);
}

uint64_t View.tag<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = type metadata accessor for TagValueTraitKey();
  uint64_t v11 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, a3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, a3);
  swift_getWitnessTable();
  View._trait<A>(_:_:)(v10, (uint64_t)v9, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t View.removeTag<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v30 = a5;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v33 = a4;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v25 = (char *)v24 - v10;
  v24[0] = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v11 = *(void *)(v24[0] - 8);
  MEMORY[0x270FA5388](v24[0]);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = type metadata accessor for TagValueTraitKey();
  v24[1] = &protocol conformance descriptor for TagValueTraitKey<A>;
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v24 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 56))(v13, 1, 1, a2, v17);
  uint64_t v20 = v27;
  View._trait<A>(_:_:)(v14, (uint64_t)v13, a1);
  (*(void (**)(char *, void))(v11 + 8))(v13, v24[0]);
  uint64_t v21 = type metadata accessor for TagValueTraitKey();
  uint64_t v22 = (uint64_t)v25;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v25, 1, 1, v8);
  uint64_t v31 = v20;
  uint64_t v32 = &protocol witness table for _TraitWritingModifier<A>;
  swift_getWitnessTable();
  swift_getWitnessTable();
  View._trait<A>(_:_:)(v21, v22, v15);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v22, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t static IsAuxiliaryContentTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t key path getter for ViewTraitCollection.isAuxiliaryContent : ViewTraitCollection@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4 & 1;
  return result;
}

uint64_t (*ViewTraitCollection.isAuxiliaryContent.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isAuxiliaryContent.modify;
}

uint64_t ViewTraitCollection.isAuxiliaryContent.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(unsigned char *)(a1 + 8));
}

uint64_t ViewTraitCollection.tagValue<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v14 - v7;
  v14[1] = *v2;
  uint64_t v9 = type metadata accessor for TagValueTraitKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  ViewTraitCollection.subscript.getter(v9, WitnessTable, (uint64_t)v8);
  uint64_t v11 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v12 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v8, a1);
    uint64_t v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, v12, 1, a1);
}

uint64_t ViewTraitCollection.setTag<A>(for:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TagValueTraitKey.Value();
  v6.n128_f64[0] = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v12 - v7;
  uint64_t v9 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v12 - v7, a2, a3, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, a3);
  uint64_t v10 = type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  return ViewTraitCollection.subscript.setter((uint64_t)v8, v10, v10);
}

uint64_t TagIndexProjection.__allocating_init(_:)(long long *a1)
{
  return TagIndexProjection.init(_:)(a1);
}

uint64_t TagIndexProjection.init(_:)(long long *a1)
{
  *(void *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = Dictionary.init()();
  *(void *)(v1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = Dictionary.init()();
  outlined init with take of ScrollStateRequest(a1, v1 + 16);
  return v1;
}

void TagIndexProjection.hash(into:)()
{
  Hasher._combine(_:)(v0);
}

uint64_t TagIndexProjection.get(base:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 88);
  MEMORY[0x24C522390](&v10, a1, v1[10], v4, MEMORY[0x263F8D6C8], v5);
  uint64_t v6 = v10;
  if (v11)
  {
    uint64_t v7 = swift_endAccess();
    uint64_t v12 = v6;
    char v13 = 1;
    MEMORY[0x270FA5388](v7);
    v9[2] = v4;
    v9[3] = v5;
    v9[4] = a1;
    v9[5] = &v12;
    TagIndexProjection.readUntil(_:)((uint64_t)partial apply for closure #1 in TagIndexProjection.get(base:), (uint64_t)v9);
    return v12;
  }
  else
  {
    swift_endAccess();
  }
  return v6;
}

uint64_t TagIndexProjection.readUntil(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((*(unsigned char *)(v2 + 64) & 1) == 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v12 = *(void *)(v3 + 56);
    uint64_t v13 = v12;
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v8 = __swift_project_boxed_opaque_existential_1((void *)(v3 + 16), v7);
    MEMORY[0x270FA5388](v8);
    void v10[2] = &v13;
    v10[3] = v3;
    v10[4] = v5;
    v10[5] = a2;
    char v11 = 1;
    uint64_t result = ViewList.applySublists(from:list:to:)((uint64_t)&v12, 0x100000000uLL, (uint64_t)partial apply for closure #1 in TagIndexProjection.readUntil(_:), (uint64_t)v10, v7, v6);
    uint64_t v9 = v13;
    if (result) {
      uint64_t v9 = 0;
    }
    *(void *)(v3 + 56) = v9;
    *(unsigned char *)(v3 + 64) = result & 1;
  }
  return result;
}

void TagIndexProjection.set(base:newValue:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v20 = *v3;
  uint64_t v7 = *(void *)(v20 + 80);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v19 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v19 - v14;
  if ((a3 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v16 = v3[9];
    uint64_t v21 = a2;
    MEMORY[0x24C522390](&v21, v16, MEMORY[0x263F8D6C8], v7, MEMORY[0x263F8D6D8]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v17 = swift_endAccess();
      MEMORY[0x270FA5388](v17);
      uint64_t v18 = *(void *)(v20 + 88);
      *(&v19 - 4) = v7;
      *(&v19 - 3) = v18;
      *(&v19 - 2) = a2;
      *(&v19 - 1) = a1;
      TagIndexProjection.readUntil(_:)((uint64_t)partial apply for closure #1 in TagIndexProjection.set(base:newValue:), (uint64_t)(&v19 - 6));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, v7);
      swift_endAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 40))(a1, v15, v7);
    }
  }
}

uint64_t closure #1 in TagIndexProjection.readUntil(_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, char *), uint64_t a5)
{
  v41[1] = a5;
  uint64_t v42 = a4;
  uint64_t v8 = *a3;
  uint64_t v9 = *(void *)(*a3 + 80);
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v41 - v11;
  uint64_t v45 = a3;
  uint64_t v13 = *(void *)(v8 + 88);
  uint64_t v46 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v14 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v16 = (char *)v41 - v15;
  uint64_t v17 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v43 = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v41 - v21;
  uint64_t v23 = *a2;
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v47 = a2;
  uint64_t v48 = v25;
  *a2 = v23 - v24;
  uint64_t v26 = a1[9];
  uint64_t v49 = v26;
  uint64_t v44 = v13;
  uint64_t v27 = type metadata accessor for TagValueTraitKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  ViewTraitCollection.subscript.getter(v27, WitnessTable, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v46);
LABEL_5:
    uint64_t v31 = v47;
    uint64_t v30 = v48;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v16, v9);
  swift_bridgeObjectRetain();
  char v29 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v26);
  swift_bridgeObjectRelease();
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v9);
    goto LABEL_5;
  }
  uint64_t v46 = v17;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v33(v43, v22, v9);
  uint64_t v31 = v47;
  uint64_t v50 = *v47;
  char v51 = 0;
  swift_beginAccess();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  uint64_t result = swift_endAccess();
  uint64_t v34 = *v31;
  uint64_t v30 = v48;
  uint64_t v35 = *v31 + v48;
  if (v35 < *v31)
  {
    __break(1u);
  }
  else
  {
    if (!v48) {
      goto LABEL_14;
    }
    uint64_t v36 = v33;
    uint64_t v37 = v22;
    uint64_t result = swift_beginAccess();
    if (v34 < v35)
    {
      uint64_t v38 = (void (**)(char *, void, uint64_t, uint64_t))(v46 + 56);
      uint64_t v39 = v48;
      do
      {
        v36(v12, v37, v9);
        (*v38)(v12, 0, 1, v9);
        uint64_t v50 = v34;
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
        ++v34;
        --v39;
      }
      while (v39);
      swift_endAccess();
      uint64_t v31 = v47;
      uint64_t v30 = v48;
      uint64_t v34 = *v47;
      uint64_t v22 = v37;
LABEL_14:
      char v40 = v42(v34, v22);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v9);
      if (v40)
      {
        uint64_t result = 0;
        goto LABEL_7;
      }
LABEL_6:
      uint64_t result = 1;
LABEL_7:
      *v31 += v30;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t TagIndexProjection.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TagIndexProjection.__deallocating_deinit()
{
  TagIndexProjection.deinit();

  return swift_deallocClassInstance();
}

Swift::Int TagIndexProjection.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance TagIndexProjection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = TagIndexProjection.get(base:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance TagIndexProjection<A>(uint64_t a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TagIndexProjection<A>()
{
  return TagIndexProjection.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance TagIndexProjection<A>()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TagIndexProjection<A>()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TagIndexProjection<A>(uint64_t *a1, uint64_t *a2)
{
  return project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(*a1, *a2);
}

uint64_t Binding.selecting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, v5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (one-time initialization token for _constantFalse != -1) {
      swift_once();
    }
    uint64_t v14 = _constantFalse;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v8, v4);
    uint64_t v14 = static Binding.== infix<A>(_:_:)(v2, (uint64_t)v13, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v4);
  }
  return v14;
}

uint64_t Binding<A>.projectingTagIndex(viewList:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TagIndexProjection();
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)&v8);
  swift_allocObject();
  uint64_t v7 = TagIndexProjection.init(_:)(&v8);
  uint64_t WitnessTable = swift_getWitnessTable();
  Binding.projecting<A>(_:)((uint64_t)&v7, a2, v4, WitnessTable, (char *)&v8);
  swift_release();
  return v8;
}

uint64_t type metadata accessor for TagIndexProjection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245EB46F8(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t getEnumTagSinglePayload for TagValueTraitKey.Value(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for TagValueTraitKey.Value(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245EB4AFCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for IsAuxiliaryContentTraitKey()
{
  return &type metadata for IsAuxiliaryContentTraitKey;
}

uint64_t type metadata completion function for TagIndexProjection()
{
  return swift_initClassMetadata2();
}

uint64_t sub_245EB4B90()
{
  return swift_getWitnessTable();
}

uint64_t sub_245EB4CE0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>);
    }
  }
}

uint64_t sub_245EB4DAC()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in TagIndexProjection<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for TagIndexProjection<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL partial apply for closure #1 in TagIndexProjection.set(base:newValue:)(uint64_t a1)
{
  uint64_t v3 = v1[4];
  if (v3 == a1) {
    (*(void (**)(void))(*(void *)(v1[2] - 8) + 24))(v1[5]);
  }
  return v3 == a1;
}

uint64_t partial apply for closure #1 in TagIndexProjection.readUntil(_:)(uint64_t *a1)
{
  return closure #1 in TagIndexProjection.readUntil(_:)(a1, *(uint64_t **)(v1 + 16), *(uint64_t **)(v1 + 24), *(uint64_t (**)(uint64_t, char *))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in TagIndexProjection.get(base:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  if (v4)
  {
    *(void *)uint64_t v3 = a1;
    *(unsigned char *)(v3 + 8) = 0;
  }
  return v4 & 1;
}

uint64_t static _Velocity<>.zero.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t static _Velocity.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t _Velocity.init(valuePerSecond:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t _Velocity.valuePerSecond.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _Velocity.valuePerSecond.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_Velocity.valuePerSecond.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _Velocity.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  unsigned int v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10(v3, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v9, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _Velocity<A>()
{
  return static _Velocity.== infix(_:_:)();
}

uint64_t static _Velocity<>.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance <> _Velocity<A>()
{
  return static _Velocity<>.< infix(_:_:)();
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance <> _Velocity<A>()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance <> _Velocity<A>()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance <> _Velocity<A>()
{
  return MEMORY[0x270F9D4A0]();
}

uint64_t _Velocity<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int _Velocity<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> _Velocity<A>()
{
  return _Velocity<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> _Velocity<A>()
{
  return _Velocity<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> _Velocity<A>()
{
  return Hasher._finalize()();
}

uint64_t _Velocity<>.animatableData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))(*(void *)(a1 + 16));
}

uint64_t _Velocity<>.animatableData.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized _Velocity<>.animatableData.setter(a1, a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v5(a1, AssociatedTypeWitness);
}

void (*_Velocity<>.animatableData.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  double v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *double v7 = a2;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v7[5] = malloc(v11);
  v7[6] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(v8, a3);
  return _Velocity<>.animatableData.modify;
}

void _Velocity<>.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    specialized _Velocity<>.animatableData.setter((uint64_t)v3, v8, v7);
    unsigned int v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    specialized _Velocity<>.animatableData.setter((*a1)[6], v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance <> _Velocity<A>(uint64_t a1, uint64_t a2)
{
  return _Velocity<>.animatableData.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance <> _Velocity<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized _Velocity<>.animatableData.setter(a1, a2, *(void *)(a3 - 8));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v5(a1, AssociatedTypeWitness);
}

void (*protocol witness for Animatable.animatableData.modify in conformance <> _Velocity<A>(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = v3;
  v7[1] = a2;
  uint64_t v8 = *(void *)(a3 - 8);
  v7[2] = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v7[5] = malloc(v11);
  v7[6] = malloc(v11);
  _Velocity<>.animatableData.getter(a2, v8);
  return protocol witness for Animatable.animatableData.modify in conformance <> _Velocity<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance <> _Velocity<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void *)(*(void *)a1 + 24);
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v8 = *(void *)(*(void *)a1 + 8);
  uint64_t v7 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 40), v4, v5);
    specialized _Velocity<>.animatableData.setter((uint64_t)v3, v8, v7);
    unsigned int v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    specialized _Velocity<>.animatableData.setter(*(void *)(*(void *)a1 + 48), v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t _Velocity<>.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t static _Velocity<>.+= infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
}

uint64_t static _Velocity<>.-= infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
}

uint64_t static _Velocity<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Velocity<>.+ infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF30], a5);
}

uint64_t static _Velocity<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Velocity<>.+ infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF38], a5);
}

uint64_t static _Velocity<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for _Velocity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a6, a1, v12);
  return a5(a6, a2, a3, a4);
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance <> _Velocity<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static _Velocity<>.zero.getter(*(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance <> _Velocity<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Velocity<>.+ infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance <> _Velocity<A>()
{
  return static _Velocity<>.+= infix(_:_:)();
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance <> _Velocity<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Velocity<>.- infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance <> _Velocity<A>()
{
  return static _Velocity<>.-= infix(_:_:)();
}

uint64_t _Velocity<>.scale(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))(*(void *)(a1 + 16));
}

uint64_t _Velocity<>.magnitudeSquared.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))(*(void *)(a1 + 16));
}

uint64_t protocol witness for VectorArithmetic.scale(by:) in conformance <> _Velocity<A>(uint64_t a1, uint64_t a2)
{
  return _Velocity<>.scale(by:)(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance <> _Velocity<A>(uint64_t a1, uint64_t a2)
{
  return _Velocity<>.magnitudeSquared.getter(a1, *(void *)(a2 - 8));
}

uint64_t specialized _Velocity<>.animatableData.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v12 - v8, a1, v7);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 32))(v9, v5, a3);
}

uint64_t type metadata accessor for _Velocity()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in <> _Velocity<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in <> _Velocity<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> _Velocity<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245EB5C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + a2 - 8);
  uint64_t v4 = type metadata accessor for _Velocity();
  return _Velocity<>.animatableData.getter(v4, v3);
}

uint64_t sub_245EB5C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = type metadata accessor for _Velocity();
  return specialized _Velocity<>.animatableData.setter(a1, v6, v5);
}

uint64_t sub_245EB5CEC()
{
  return 24;
}

__n128 sub_245EB5CF8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _Velocity(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _Velocity(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245EB6080);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t WhitespaceRemovingFormatStyle.format(_:)()
{
  return dispatch thunk of FormatStyle.format(_:)();
}

uint64_t WhitespaceRemovingFormatStyle.locale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  unsigned int v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(v11 - 8) + 16))(a3, v3, a2, v8);
  dispatch thunk of FormatStyle.locale(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(a3, v10, v6);
}

uint64_t WhitespaceRemovingFormatStyle.hash(into:)()
{
  return Optional<A>.hash(into:)();
}

BOOL static WhitespaceRemovingFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, void, void), uint64_t a8, uint64_t a9)
{
  v94 = a7;
  uint64_t v95 = a8;
  uint64_t v100 = a1;
  uint64_t v101 = a2;
  v93 = (unsigned char *)a6;
  uint64_t v91 = *(void *)(a6 + 8);
  uint64_t v96 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v97 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v90 = &v81[-v12];
  uint64_t v102 = v13;
  uint64_t v14 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v92 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v16 = &v81[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = &v81[-v18];
  uint64_t v103 = v14;
  uint64_t v99 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = &v81[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = &v81[-v24];
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = &v81[-v27];
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = &v81[-v30];
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = &v81[-v33];
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = &v81[-v36];
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  v88 = v31;
  v89 = v25;
  v86 = v28;
  v85 = v22;
  v87 = v16;
  uint64_t v104 = a3;
  uint64_t v105 = v96;
  uint64_t v106 = a5;
  v107 = (void (*)(void, void))v93;
  v108 = v94;
  uint64_t v109 = v95;
  uint64_t v110 = a9;
  uint64_t v38 = type metadata accessor for WhitespaceRemovingFormatStyle();
  uint64_t v39 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v99 + 16);
  uint64_t v40 = v103;
  v39(v37, v100 + *(int *)(v38 + 76), v103);
  v39(v34, v101 + *(int *)(v38 + 76), v40);
  uint64_t v41 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
  v39(v19, (uint64_t)v37, v40);
  v39(v41, (uint64_t)v34, v40);
  uint64_t v42 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v97 + 48);
  if (v42(v19, 1, v102) != 1)
  {
    v93 = v37;
    uint64_t v46 = v88;
    v39(v88, (uint64_t)v19, v103);
    if (v42(v41, 1, v102) != 1)
    {
      v94 = (void (*)(void, void, void))v39;
      uint64_t v95 = v38;
      v84 = v42;
      uint64_t v49 = v97;
      uint64_t v50 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v97 + 32);
      v83 = v19;
      char v51 = v46;
      v52 = v90;
      v53 = v41;
      uint64_t v54 = v102;
      v50(v90, v53, v102);
      swift_getAssociatedConformanceWitness();
      int v82 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v55 = *(void (**)(unsigned char *, uint64_t))(v49 + 8);
      v55(v52, v54);
      v56 = v55;
      v57 = *(void (**)(unsigned char *, uint64_t))(v99 + 8);
      uint64_t v58 = v103;
      v57(v34, v103);
      v57(v93, v58);
      v56(v51, v102);
      v93 = v57;
      v57(v83, v58);
      if ((v82 & 1) == 0) {
        return 0;
      }
      goto LABEL_9;
    }
    uint64_t v47 = *(void (**)(unsigned char *, uint64_t))(v99 + 8);
    uint64_t v48 = v103;
    v47(v34, v103);
    v47(v93, v48);
    (*(void (**)(unsigned char *, uint64_t))(v97 + 8))(v46, v102);
LABEL_7:
    (*(void (**)(unsigned char *, uint64_t))(v92 + 8))(v19, TupleTypeMetadata2);
    return 0;
  }
  v94 = (void (*)(void, void, void))v39;
  uint64_t v95 = v38;
  uint64_t v43 = v42;
  uint64_t v44 = *(void (**)(unsigned char *, uint64_t))(v99 + 8);
  uint64_t v45 = v103;
  v44(v34, v103);
  v44(v37, v45);
  if (v43(v41, 1, v102) != 1) {
    goto LABEL_7;
  }
  v84 = v43;
  v93 = v44;
  v44(v19, v103);
LABEL_9:
  v60 = (void (*)(unsigned char *, uint64_t, uint64_t))v94;
  uint64_t v59 = v95;
  v61 = v86;
  uint64_t v62 = v103;
  v94(v86, v100 + *(int *)(v95 + 80), v103);
  uint64_t v63 = v89;
  v60(v89, v101 + *(int *)(v59 + 80), v62);
  v64 = v87;
  v65 = &v87[*(int *)(TupleTypeMetadata2 + 48)];
  v60(v87, (uint64_t)v61, v62);
  v60(v65, (uint64_t)v63, v62);
  v66 = v84;
  if (v84(v64, 1, v102) == 1)
  {
    uint64_t v67 = v103;
    v68 = (void (*)(unsigned char *, uint64_t))v93;
    ((void (*)(unsigned char *, uint64_t))v93)(v63, v103);
    v68(v61, v67);
    if (v66(v65, 1, v102) == 1)
    {
      v68(v64, v103);
      return 1;
    }
    goto LABEL_14;
  }
  v69 = v85;
  v60(v85, (uint64_t)v64, v103);
  if (v66(v65, 1, v102) == 1)
  {
    uint64_t v70 = v103;
    v71 = (void (*)(unsigned char *, uint64_t))v93;
    ((void (*)(unsigned char *, uint64_t))v93)(v89, v103);
    v71(v61, v70);
    (*(void (**)(unsigned char *, uint64_t))(v97 + 8))(v69, v102);
LABEL_14:
    (*(void (**)(unsigned char *, uint64_t))(v92 + 8))(v64, TupleTypeMetadata2);
    return 0;
  }
  uint64_t v73 = v97;
  v74 = v69;
  v75 = v90;
  uint64_t v76 = v102;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v97 + 32))(v90, v65, v102);
  swift_getAssociatedConformanceWitness();
  char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  v78 = *(void (**)(unsigned char *, uint64_t))(v73 + 8);
  v78(v75, v76);
  uint64_t v79 = v103;
  v80 = (void (*)(unsigned char *, uint64_t))v93;
  ((void (*)(unsigned char *, uint64_t))v93)(v89, v103);
  v80(v61, v79);
  v78(v74, v76);
  v80(v64, v79);
  return (v77 & 1) != 0;
}

uint64_t WhitespaceRemovingFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702060386 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6156786966657270 && a2 == 0xEB0000000065756CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6156786966667573 && a2 == 0xEB0000000065756CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t WhitespaceRemovingFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 1702060386;
  }
  if (a1 == 1) {
    return 0x6156786966657270;
  }
  return 0x6156786966667573;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys(char *a1, char *a2)
{
  return static EventListenerPhase.FailureReason.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  return EventListenerPhase.FailureReason.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  EventListenerPhase.FailureReason.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  Hasher.init(_seed:)();
  EventListenerPhase.FailureReason.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  return WhitespaceRemovingFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WhitespaceRemovingFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized TimeDataFormatting.Resolvable.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t WhitespaceRemovingFormatStyle.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v17 = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v18 = v4;
  uint64_t v19 = v3;
  uint64_t v14 = v3;
  uint64_t v15 = v6;
  uint64_t v20 = v16;
  long long v13 = *(_OWORD *)(a2 + 40);
  long long v21 = v13;
  uint64_t v22 = v5;
  uint64_t v23 = v6;
  type metadata accessor for WhitespaceRemovingFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unsigned int v10 = (char *)&v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  uint64_t v11 = v24;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v18) = 1;
    swift_getAssociatedTypeWitness();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int WhitespaceRemovingFormatStyle.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t WhitespaceRemovingFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v75 = a1;
  uint64_t v50 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v63 = *(void *)(v16 - 8);
  uint64_t v64 = v16;
  MEMORY[0x270FA5388](v16);
  char v51 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v54 = (char *)&v48 - v19;
  uint64_t v52 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v55 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = a2;
  uint64_t v69 = a3;
  uint64_t v70 = a4;
  uint64_t v71 = a5;
  uint64_t v72 = a6;
  uint64_t v73 = a7;
  uint64_t v74 = a8;
  uint64_t v22 = a8;
  type metadata accessor for WhitespaceRemovingFormatStyle.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v53 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v24 = (char *)&v48 - v23;
  v56 = (void (*)(char *, char *, uint64_t))a4;
  uint64_t v57 = a2;
  uint64_t v68 = a2;
  uint64_t v69 = a3;
  uint64_t v70 = a4;
  uint64_t v71 = a5;
  uint64_t v72 = a6;
  uint64_t v73 = a7;
  uint64_t v25 = AssociatedTypeWitness;
  uint64_t v60 = a7;
  uint64_t v74 = v22;
  uint64_t v26 = type metadata accessor for WhitespaceRemovingFormatStyle();
  uint64_t v27 = *(void *)(v26 - 8);
  double v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v48 - v29;
  uint64_t v32 = *(void (**)(double))(*(void *)(v25 - 8) + 56);
  uint64_t v62 = (char *)&v48 + *(int *)(v31 + 76) - v29;
  v32(v28);
  v61 = &v30[*(int *)(v26 + 80)];
  ((void (*)(void))v32)();
  __swift_project_boxed_opaque_existential_1(v75, v75[3]);
  uint64_t v58 = v24;
  uint64_t v33 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v33)
  {
    uint64_t v39 = v63;
    uint64_t v38 = v64;
    uint64_t v40 = v61;
    uint64_t v41 = v62;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v39 + 8);
    v42(v41, v38);
    return ((uint64_t (*)(char *, uint64_t))v42)(v40, v38);
  }
  else
  {
    uint64_t v49 = v27;
    uint64_t WitnessTable = v26;
    uint64_t v67 = v30;
    uint64_t v34 = v54;
    uint64_t v35 = v55;
    uint64_t v36 = v53;
    LOBYTE(v68) = 0;
    uint64_t v37 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v67, v35, v37);
    LOBYTE(v68) = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v43 = v64;
    v56 = *(void (**)(char *, char *, uint64_t))(v63 + 40);
    v56(v62, v34, v64);
    LOBYTE(v68) = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v58, v59);
    v56(v61, v51, v43);
    uint64_t v44 = v49;
    uint64_t v45 = v67;
    uint64_t v46 = WitnessTable;
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v50, v67, WitnessTable);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WhitespaceRemovingFormatStyle<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WhitespaceRemovingFormatStyle.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void (**)(void, void, void))(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WhitespaceRemovingFormatStyle<A, B>(void *a1, uint64_t a2)
{
  return WhitespaceRemovingFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WhitespaceRemovingFormatStyle<A, B>()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WhitespaceRemovingFormatStyle<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static WhitespaceRemovingFormatStyle.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void (**)(void, void, void))(a3 + 48), *(void *)(a3 + 56), *(void *)(a3 + 64));
}

uint64_t WhitespaceRemovingFormatStyle<>.discreteInput(after:)()
{
  return dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
}

uint64_t WhitespaceRemovingFormatStyle<>.discreteInput(before:)()
{
  return dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
}

uint64_t WhitespaceRemovingFormatStyle<>.input(after:)()
{
  return dispatch thunk of DiscreteFormatStyle.input(after:)();
}

uint64_t WhitespaceRemovingFormatStyle<>.input(before:)()
{
  return dispatch thunk of DiscreteFormatStyle.input(before:)();
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  return WhitespaceRemovingFormatStyle<>.discreteInput(before:)();
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  return WhitespaceRemovingFormatStyle<>.discreteInput(after:)();
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  return WhitespaceRemovingFormatStyle<>.input(before:)();
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  return WhitespaceRemovingFormatStyle<>.input(after:)();
}

uint64_t static WhitespaceRemovingFormatStyle<>.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _UNKNOWN **a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v40 = a9;
  uint64_t v41 = a1;
  uint64_t v38 = a6;
  uint64_t v39 = a5;
  uint64_t v17 = *(void *)(a6 + 8);
  uint64_t v44 = a5;
  uint64_t v45 = a3;
  uint64_t v46 = a10;
  uint64_t v47 = v17;
  uint64_t v48 = &protocol witness table for AttributedString;
  uint64_t v18 = type metadata accessor for TimeDataFormatting.Resolvable();
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v37 - v21;
  int v23 = *a2;
  uint64_t v24 = *(void *)(v17 + 8);
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = v24;
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  uint64_t v49 = a11;
  uint64_t v50 = a12;
  if (v23 > 1)
  {
    uint64_t v32 = type metadata accessor for WhitespaceRemovingFormatStyle();
    uint64_t v43 = v17;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v44 = v39;
    uint64_t v45 = v32;
    uint64_t v46 = a10;
    uint64_t v47 = WitnessTable;
    uint64_t v48 = &protocol witness table for AttributedString;
    uint64_t v34 = type metadata accessor for TimeDataFormatting.Resolvable();
    uint64_t v35 = v40;
    v40[3] = v34;
    v35[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(boxed_opaque_existential_1, v41, v34);
  }
  else
  {
    uint64_t v25 = v19;
    uint64_t v26 = v20;
    uint64_t v27 = type metadata accessor for WhitespaceRemovingFormatStyle();
    uint64_t v42 = v17;
    uint64_t v28 = swift_getWitnessTable();
    uint64_t v29 = v39;
    uint64_t v44 = v39;
    uint64_t v45 = v27;
    uint64_t v46 = a10;
    uint64_t v47 = v28;
    uint64_t v48 = &protocol witness table for AttributedString;
    uint64_t v30 = type metadata accessor for TimeDataFormatting.Resolvable();
    TimeDataFormatting.Resolvable.replacingFormat<A>(with:)(v41 + *(int *)(v30 + 60), v30, a3, v17, (uint64_t)&protocol witness table for AttributedString, (uint64_t)v22);
    LOBYTE(v44) = v23;
    (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t))(v38 + 24))(v22, &v44, v29, a10, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v22, v25);
  }
}

uint64_t protocol witness for static SafelySerializableDiscreteFormatStyle.representation<A>(of:for:) in conformance <> WhitespaceRemovingFormatStyle<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return static WhitespaceRemovingFormatStyle<>.representation<A>(of:for:)(a1, a2, *(void *)(a5 + 16), *(void *)(a5 + 24), a3, *(void *)(a6 - 8), *(void *)(a5 + 40), *(_UNKNOWN ***)(a5 + 48), a7, a4, *(void *)(a5 + 56), *(void *)(a5 + 64));
}

uint64_t type metadata accessor for WhitespaceRemovingFormatStyle()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for WhitespaceRemovingFormatStyle.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for Decodable in WhitespaceRemovingFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in WhitespaceRemovingFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in WhitespaceRemovingFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in WhitespaceRemovingFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for FormatStyle in <> WhitespaceRemovingFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for WhitespaceRemovingFormatStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WhitespaceRemovingFormatStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = v7 + v10;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v13 = *(void *)(v9 + 64);
  }
  else {
    size_t v13 = *(void *)(v9 + 64) + 1;
  }
  int v14 = *(_DWORD *)(v6 + 80) | v10;
  uint64_t v15 = (*(unsigned char *)(v6 + 80) | v10);
  int v16 = v14 & 0x100000;
  if (v15 > 7 || v16 != 0 || ((v13 + v11 + ((v7 + v11) & ~v11)) & ~v11) + v13 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v20 = v19 + ((v15 + 16) & ~v15);
    swift_retain();
  }
  else
  {
    uint64_t v21 = AssociatedTypeWitness;
    uint64_t v22 = a1;
    uint64_t v23 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v22, a2, v5);
    uint64_t v28 = v22;
    unint64_t v24 = (unint64_t)v22 + v12;
    unint64_t v25 = (unint64_t)a2 + v12;
    uint64_t v27 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v27(v25 & ~v11, 1, v21))
    {
      memcpy((void *)(v24 & v23), (const void *)(v25 & v23), v13);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v24 & v23, v25 & v23, v21);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v9 + 56))(v24 & v23, 0, 1, v21);
    }
    if (v27(((v25 | v11) + v13) & v23, 1, v21))
    {
      memcpy((void *)(((v24 | v11) + v13) & v23), (const void *)(((v25 | v11) + v13) & v23), v13);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((v24 | v11) + v13) & v23, ((v25 | v11) + v13) & v23, v21);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v9 + 56))(((v24 | v11) + v13) & v23, 0, 1, v21);
    }
    return v28;
  }
  return (uint64_t *)v20;
}

uint64_t destroy for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v4 + v7;
  uint64_t v9 = ~v7;
  uint64_t v10 = (v4 + v7) & ~v7;
  uint64_t v16 = v6;
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, AssociatedTypeWitness)) {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v10, AssociatedTypeWitness);
  }
  uint64_t v12 = (v8 | v7) + *(void *)(v16 + 64);
  if (!*(_DWORD *)(v16 + 84)) {
    ++v12;
  }
  uint64_t v13 = v12 & v9;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12 & v9, 1, AssociatedTypeWitness);
  if (!result)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    return v15(v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t initializeWithCopy for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = a1;
  uint64_t v10 = v6 + v9 + a1;
  uint64_t v11 = v6 + v9 + a2;
  uint64_t v19 = ~v9;
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v20(v11 & ~v9, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = *(void *)(v8 + 64);
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy((void *)(v10 & ~v9), (const void *)(v11 & ~v9), v14);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10 & ~v9, v11 & ~v9, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10 & ~v9, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
  }
  if (v12) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v13 + 1;
  }
  uint64_t v16 = (void *)(((v10 | v9) + v15) & v19);
  uint64_t v17 = (const void *)(((v11 | v9) + v15) & v19);
  if (v20((uint64_t)v17, 1, AssociatedTypeWitness))
  {
    memcpy(v16, v17, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v16, v17, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, AssociatedTypeWitness);
  }
  return v21;
}

uint64_t assignWithCopy for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = v6 + v9 + a1;
  uint64_t v26 = ~v9;
  uint64_t v27 = a1;
  uint64_t v12 = v10 + a2;
  size_t v13 = (const void *)((v10 + a2) & ~v9);
  size_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  int v15 = v14(v11 & ~v9, 1, AssociatedTypeWitness);
  int v16 = v14((uint64_t)v13, 1, AssociatedTypeWitness);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v8 + 16))(v11 & ~v9, v13, AssociatedTypeWitness);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v11 & ~v9, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v8 + 84);
    size_t v18 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v8 + 24))(v11 & ~v9, v13, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11 & ~v9, AssociatedTypeWitness);
    int v17 = *(_DWORD *)(v8 + 84);
    size_t v18 = *(void *)(v8 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy((void *)(v11 & ~v9), v13, v19);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    size_t v20 = *(void *)(v8 + 64);
  }
  else {
    size_t v20 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v21 = (void *)(((v11 | v9) + v20) & v26);
  uint64_t v22 = (const void *)(((v12 | v9) + v20) & v26);
  int v23 = v14((uint64_t)v21, 1, AssociatedTypeWitness);
  int v24 = v14((uint64_t)v22, 1, AssociatedTypeWitness);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(v21, v22, AssociatedTypeWitness);
      return v27;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v21, AssociatedTypeWitness);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    memcpy(v21, v22, v20);
    return v27;
  }
  (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v21, v22, AssociatedTypeWitness);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, AssociatedTypeWitness);
  return v27;
}

uint64_t initializeWithTake for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = a1;
  uint64_t v10 = v6 + v9 + a1;
  uint64_t v11 = v6 + v9 + a2;
  uint64_t v19 = ~v9;
  size_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v20(v11 & ~v9, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = *(void *)(v8 + 64);
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy((void *)(v10 & ~v9), (const void *)(v11 & ~v9), v14);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10 & ~v9, v11 & ~v9, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10 & ~v9, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
  }
  if (v12) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v13 + 1;
  }
  int v16 = (void *)(((v10 | v9) + v15) & v19);
  int v17 = (const void *)(((v11 | v9) + v15) & v19);
  if (v20((uint64_t)v17, 1, AssociatedTypeWitness))
  {
    memcpy(v16, v17, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v16, v17, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, AssociatedTypeWitness);
  }
  return v21;
}

uint64_t assignWithTake for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = v6 + v9 + a1;
  uint64_t v26 = ~v9;
  uint64_t v27 = a1;
  uint64_t v12 = v10 + a2;
  size_t v13 = (const void *)((v10 + a2) & ~v9);
  size_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  int v15 = v14(v11 & ~v9, 1, AssociatedTypeWitness);
  int v16 = v14((uint64_t)v13, 1, AssociatedTypeWitness);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v8 + 32))(v11 & ~v9, v13, AssociatedTypeWitness);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v11 & ~v9, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v8 + 84);
    size_t v18 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v8 + 40))(v11 & ~v9, v13, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11 & ~v9, AssociatedTypeWitness);
    int v17 = *(_DWORD *)(v8 + 84);
    size_t v18 = *(void *)(v8 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy((void *)(v11 & ~v9), v13, v19);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    size_t v20 = *(void *)(v8 + 64);
  }
  else {
    size_t v20 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v21 = (void *)(((v11 | v9) + v20) & v26);
  uint64_t v22 = (const void *)(((v12 | v9) + v20) & v26);
  int v23 = v14((uint64_t)v21, 1, AssociatedTypeWitness);
  int v24 = v14((uint64_t)v22, 1, AssociatedTypeWitness);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(v21, v22, AssociatedTypeWitness);
      return v27;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v21, AssociatedTypeWitness);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    memcpy(v21, v22, v20);
    return v27;
  }
  (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v21, v22, AssociatedTypeWitness);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, AssociatedTypeWitness);
  return v27;
}

uint64_t getEnumTagSinglePayload for WhitespaceRemovingFormatStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v10) {
    uint64_t v14 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v15 = *(void *)(v6 + 64) + v13;
  if (a2 <= v12) {
    goto LABEL_30;
  }
  uint64_t v16 = ((v14 + v13 + (v15 & ~v13)) & ~v13) + v14;
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((a2 - v12 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v19 < 2)
    {
LABEL_30:
      if (v12)
      {
        if (v7 >= v11)
        {
          unint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v25(a1, v7, v5);
        }
        else
        {
          unsigned int v23 = (*(uint64_t (**)(unint64_t))(v9 + 48))(((unint64_t)a1 + v15) & ~v13);
          if (v23 >= 2) {
            return v23 - 1;
          }
          else {
            return 0;
          }
        }
      }
      return 0;
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_30;
  }
LABEL_20:
  int v20 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v20 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v21 = v16;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v12 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for WhitespaceRemovingFormatStyle(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = *(void *)(v8 + 64) + v16;
  size_t v18 = *(void *)(v11 + 64);
  if (v13) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  size_t v20 = ((v19 + v16 + (v17 & ~v16)) & ~v16) + v19;
  if (a3 <= v15) {
    goto LABEL_17;
  }
  if (v20 <= 3)
  {
    unsigned int v21 = ((a3 - v15 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v21))
    {
      int v10 = 4;
      if (v15 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_18;
    }
    if (v21 >= 0x100) {
      int v10 = 2;
    }
    else {
      int v10 = v21 > 1;
    }
LABEL_17:
    if (v15 >= a2) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  int v10 = 1;
  if (v15 >= a2)
  {
LABEL_25:
    switch(v10)
    {
      case 1:
        a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v20] = 0;
        goto LABEL_29;
      default:
LABEL_29:
        if (a2)
        {
LABEL_30:
          if (v9 >= v14)
          {
            uint64_t v29 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
            v29(a1, a2, v9, v7);
          }
          else
          {
            unint64_t v25 = (unsigned char *)((unint64_t)&a1[v17] & ~v16);
            if (v14 >= a2)
            {
              uint64_t v30 = *(void (**)(unsigned char *, void))(v12 + 56);
              v30(v25, (a2 + 1));
            }
            else
            {
              if (v19 <= 3) {
                int v26 = ~(-1 << (8 * v19));
              }
              else {
                int v26 = -1;
              }
              if (v19)
              {
                int v27 = v26 & (~v14 + a2);
                if (v19 <= 3) {
                  int v28 = v19;
                }
                else {
                  int v28 = 4;
                }
                bzero(v25, v19);
                switch(v28)
                {
                  case 2:
                    *(_WORD *)unint64_t v25 = v27;
                    break;
                  case 3:
                    *(_WORD *)unint64_t v25 = v27;
                    v25[2] = BYTE2(v27);
                    break;
                  case 4:
                    *(_DWORD *)unint64_t v25 = v27;
                    break;
                  default:
                    *unint64_t v25 = v27;
                    break;
                }
              }
            }
          }
        }
        break;
    }
    return;
  }
LABEL_18:
  unsigned int v22 = ~v15 + a2;
  if (v20 < 4)
  {
    int v23 = (v22 >> (8 * v20)) + 1;
    if (v20)
    {
      int v24 = v22 & ~(-1 << (8 * v20));
      bzero(a1, ((v19 + v16 + (v17 & ~v16)) & ~v16) + v19);
      if (v20 == 3)
      {
        *(_WORD *)a1 = v24;
        a1[2] = BYTE2(v24);
      }
      else if (v20 == 2)
      {
        *(_WORD *)a1 = v24;
      }
      else
      {
        *a1 = v24;
      }
    }
  }
  else
  {
    bzero(a1, ((v19 + v16 + (v17 & ~v16)) & ~v16) + v19);
    *(_DWORD *)a1 = v22;
    int v23 = 1;
  }
  switch(v10)
  {
    case 1:
      a1[v20] = v23;
      break;
    case 2:
      *(_WORD *)&a1[v20] = v23;
      break;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x245EB9340);
    case 4:
      *(_DWORD *)&a1[v20] = v23;
      break;
    default:
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for WhitespaceRemovingFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EB9444);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t EnvironmentValues.plist.getter()
{
  return swift_retain();
}

uint64_t EnvironmentValues.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t EnvironmentValues.removingTracker()@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
  return swift_retain();
}

uint64_t *(*EnvironmentValues.plist.modify(void *a1))(uint64_t *result, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_retain();
  return EnvironmentValues.plist.modify;
}

uint64_t *EnvironmentValues.plist.modify(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  int v3 = (uint64_t *)result[1];
  if (a2)
  {
    uint64_t v4 = swift_retain();
    EnvironmentValues.plist.setter(v4);
LABEL_10:
    return (uint64_t *)swift_release();
  }
  uint64_t v5 = *v3;
  if (*v3)
  {
    uint64_t v6 = *(void *)(v5 + 64);
    if (!v2)
    {
      if (!v6) {
        return result;
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (!v2) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 == *(void *)(v2 + 64)) {
    goto LABEL_10;
  }
LABEL_13:
  if (v3[1])
  {
    swift_retain();
    PropertyList.Tracker.invalidateAllValues(from:to:)(v5, v2);
    swift_release();
  }
  uint64_t result = (uint64_t *)swift_release();
  *int v3 = v2;
  return result;
}

uint64_t EnvironmentValues.addDependencies(from:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = *(void *)(v3 + 48);
    char v7 = *(unsigned char *)(v3 + 56);
    v9[0] = *(void *)(v3 + 24);
    v9[1] = v4;
    v9[2] = v5;
    v9[3] = v6;
    uint64_t v8 = *(os_unfair_lock_s **)(v2 + 16);
    char v10 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v8 + 4);
    TrackerData.formUnion(_:)((uint64_t)v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v8 + 4);
    swift_release();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
    return swift_release();
  }
  return result;
}

void (*EnvironmentValues.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  void *v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[6] = malloc(v12);
  int v13 = malloc(v12);
  void v9[7] = v13;
  EnvironmentValues.getValue<A>(for:)((uint64_t)v13, a3, a4);
  return EnvironmentValues.subscript.modify;
}

void EnvironmentValues.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    EnvironmentValues._set<A>(_:for:)((uint64_t)v3);
    char v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    EnvironmentValues._set<A>(_:for:)(*(void *)(*(void *)a1 + 56));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t EnvironmentValues.description.getter()
{
  uint64_t v1 = *v0;
  v6[0] = 91;
  v6[1] = 0xE100000000000000;
  uint64_t v5 = 0;
  if (v1)
  {
    uint64_t v4 = 0;
    swift_retain();
    specialized PropertyList.Element.forEach(filter:_:)(&v4, v1, &v5, (uint64_t)v6);
  }
  v2._countAndFlagsBits = 93;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_release();
  return v6[0];
}

uint64_t EnvironmentValues.append(contentsOf:)(uint64_t a1)
{
  Swift::String v2 = v1;
  SwiftUI::GraphHost::ConstantID value = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *v1;
  if (!*(void *)a1)
  {
    swift_retain();
    SwiftUI::GraphHost::ConstantID value = (void *)v5;
    if (v5) {
      goto LABEL_8;
    }
LABEL_12:
    if (!value) {
      goto LABEL_19;
    }
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (!v5)
  {
    swift_retain();
    goto LABEL_12;
  }
  if (value[3])
  {
    type metadata accessor for TypedElement<EmptyKey>();
    swift_allocObject();
    swift_retain();
    swift_retain();
    SwiftUI::GraphHost::ConstantID value = (void *)PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v5, (uint64_t)value).value;
  }
  else
  {
    uint64_t v7 = value[4];
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*value + 216);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v9 = v8(v5, v7);
    swift_release();
    swift_release();
    swift_release();
    SwiftUI::GraphHost::ConstantID value = (void *)v9;
  }
LABEL_8:
  uint64_t v6 = *(void *)(v5 + 64);
  if (value)
  {
LABEL_14:
    if (v6 == value[8]) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (!v6) {
    goto LABEL_19;
  }
LABEL_15:
  if (v2[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateAllValues(from:to:)(v5, (uint64_t)value);
    swift_release();
  }
  else
  {
    swift_retain();
  }
  swift_release();
  *Swift::String v2 = (uint64_t)value;
LABEL_19:
  if (v4)
  {
    uint64_t v10 = v2[1];
    if (v10)
    {
      uint64_t v11 = *(void *)(v4 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v11 + 16));
      uint64_t v12 = *(void *)(v11 + 32);
      v18[0] = *(void *)(v11 + 24);
      uint64_t v13 = *(void *)(v11 + 40);
      uint64_t v14 = *(void *)(v11 + 48);
      char v15 = *(unsigned char *)(v11 + 56);
      v18[1] = v12;
      v18[2] = v13;
      v18[3] = v14;
      uint64_t v16 = *(os_unfair_lock_s **)(v10 + 16);
      char v19 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v16 + 4);
      TrackerData.formUnion(_:)((uint64_t)v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v16 + 4);
      swift_release();
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 16));
      swift_release();
      swift_release();
      swift_release();
    }
  }

  return swift_release();
}

uint64_t sub_245EB9C6C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_245EB9C78()
{
  uint64_t v0 = swift_retain();
  return EnvironmentValues.plist.setter(v0);
}

uint64_t static ScrollViewDragAutoScrollKey.defaultValue.getter()
{
  return 0;
}

uint64_t static ScrollViewDragAutoScrollKey.reduce(value:nextValue:)(unsigned char *a1, uint64_t (*a2)(void))
{
  if (*a1) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = a2();
  }
  *a1 = result & 1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewDragAutoScrollKey()
{
  return &type metadata for ScrollViewDragAutoScrollKey;
}

uint64_t specialized Collection.index(_:offsetBy:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 < 0) {
    goto LABEL_27;
  }
  uint64_t v6 = a2;
  unint64_t v7 = result;
  char v8 = a3 & 1;
  if (!a4)
  {
    outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    return v7;
  }
  uint64_t v9 = *v4;
  uint64_t v10 = v9 + 64;
  uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
  uint64_t v11 = 0;
  uint64_t v12 = a4 - 1;
  uint64_t v13 = v6;
  uint64_t v14 = v9 + 88;
  while ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
    if ((uint64_t)v7 >= v16) {
      break;
    }
    unint64_t v17 = v7 >> 6;
    unint64_t v18 = *(void *)(v10 + 8 * (v7 >> 6));
    if (((v18 >> v7) & 1) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(v9 + 36) != v6) {
      goto LABEL_26;
    }
    unint64_t v19 = v18 & (-2 << (v7 & 0x3F));
    if (v19)
    {
      unint64_t v7 = __clz(__rbit64(v19)) | v7 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v20 = v17 + 1;
      unint64_t v21 = (unint64_t)(v16 + 63) >> 6;
      if (v17 + 1 >= v21) {
        goto LABEL_19;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v20);
      if (!v22)
      {
        unint64_t v20 = v17 + 2;
        if (v17 + 2 >= v21)
        {
LABEL_19:
          unint64_t v7 = 1 << *(unsigned char *)(v9 + 32);
          goto LABEL_5;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v20);
        if (!v22)
        {
          while (v21 - 3 != v17)
          {
            unint64_t v22 = *(void *)(v14 + 8 * v17++);
            if (v22)
            {
              uint64_t v23 = v6;
              uint64_t v24 = v12;
              uint64_t v25 = v14;
              uint64_t result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v7, v23, v8 & 1);
              uint64_t v14 = v25;
              uint64_t v12 = v24;
              unint64_t v20 = v17 + 2;
              goto LABEL_13;
            }
          }
          char v26 = v8 & 1;
          uint64_t v27 = v6;
          uint64_t v28 = v12;
          uint64_t v29 = v14;
          uint64_t result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v7, v27, v26);
          uint64_t v14 = v29;
          uint64_t v12 = v28;
          unint64_t v7 = v16;
          goto LABEL_5;
        }
      }
LABEL_13:
      unint64_t v7 = __clz(__rbit64(v22)) + (v20 << 6);
    }
LABEL_5:
    char v8 = 0;
    uint64_t v6 = v13;
    if (v11++ == v12) {
      return v7;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

int *specialized Collection.index(_:offsetBy:)@<X0>(int *result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  if (a2 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  int v5 = *result;
  int v4 = result[1];
  if (!a2)
  {
    *a3 = v5;
    a3[1] = v4;
    return result;
  }
  if (!*(void *)v3) {
    goto LABEL_13;
  }
  int v6 = *(_DWORD *)(v3 + 12);
  for (uint64_t i = 1; !(v5 - v6 + i); ++i)
  {
    int v4 = 0;
    if (i >= a2) {
      goto LABEL_10;
    }
LABEL_6:
    ;
  }
  v4 += *(_DWORD *)(*(void *)v3 + 8 + v4);
  if (i < a2) {
    goto LABEL_6;
  }
  int v6 = v5 + i;
LABEL_10:
  *a3 = v6;
  a3[1] = v4;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a2 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int v3 = result;
  if (!a2)
  {
LABEL_15:
    *a3 = v3;
    return result;
  }
  if (qword_26FA4FA08)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = 0;
      while (*((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v5 + 32) != v3)
      {
        if (qword_26FA4FA08 == ++v5)
        {
          __break(1u);
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
      }
      uint64_t v6 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_16;
      }
      if (v6 >= qword_26FA4FA08) {
        uint64_t v6 = qword_26FA4FA08 - 1;
      }
      if (v6 >= (unint64_t)qword_26FA4FA08) {
        break;
      }
      int v3 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v6 + 32);
      if (v4++ == a2 - 1) {
        goto LABEL_15;
      }
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

unint64_t specialized Collection.index(_:offsetBy:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  unint64_t v5 = HIDWORD(result);
  if (!a2)
  {
    *(void *)a5 = result;
    return result;
  }
  if (!a3) {
    goto LABEL_13;
  }
  unint64_t v6 = HIDWORD(a4);
  for (uint64_t i = 1; !(result - HIDWORD(a4) + i); ++i)
  {
    LODWORD(v5) = 0;
    if (i >= a2) {
      goto LABEL_10;
    }
LABEL_6:
    ;
  }
  LODWORD(v5) = *(_DWORD *)(a3 + 8 + (int)v5) + v5;
  if (i < a2) {
    goto LABEL_6;
  }
  LODWORD(v6) = result + i;
LABEL_10:
  *(_DWORD *)a5 = v6;
  *(_DWORD *)(a5 + 4) = v5;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  if (a4 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    if (a4)
    {
      uint64_t v8 = 0;
      char v9 = a7 & 1;
      char v10 = (a3 | a7) & 1;
      unint64_t v11 = result;
      int v12 = a2;
      while (1)
      {
        if (v10) {
          goto LABEL_32;
        }
        if (v12 != a6)
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if (v11 == a5)
        {
          unint64_t v11 = 0;
          goto LABEL_26;
        }
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_28;
        }
        uint64_t v13 = *v7;
        uint64_t v14 = 1 << *(unsigned char *)(*v7 + 32);
        if ((uint64_t)v11 >= v14) {
          goto LABEL_28;
        }
        unint64_t v15 = v11 >> 6;
        uint64_t v16 = v13 + 64;
        unint64_t v17 = *(void *)(v13 + 64 + 8 * (v11 >> 6));
        if (((v17 >> v11) & 1) == 0) {
          goto LABEL_29;
        }
        if (*(_DWORD *)(v13 + 36) != a6) {
          goto LABEL_30;
        }
        unint64_t v18 = v17 & (-2 << (v11 & 0x3F));
        if (v18)
        {
          unint64_t v11 = __clz(__rbit64(v18)) | v11 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v19 = v15 + 1;
          unint64_t v20 = (unint64_t)(v14 + 63) >> 6;
          if (v15 + 1 >= v20) {
            goto LABEL_23;
          }
          unint64_t v21 = *(void *)(v16 + 8 * v19);
          if (!v21)
          {
            unint64_t v19 = v15 + 2;
            if (v15 + 2 >= v20) {
              goto LABEL_23;
            }
            unint64_t v21 = *(void *)(v16 + 8 * v19);
            if (!v21)
            {
              uint64_t v22 = v13 + 88;
              while (v20 - 3 != v15)
              {
                unint64_t v21 = *(void *)(v22 + 8 * v15++);
                if (v21)
                {
                  unint64_t v19 = v15 + 2;
                  goto LABEL_16;
                }
              }
LABEL_23:
              unint64_t v11 = 1 << *(unsigned char *)(*v7 + 32);
              goto LABEL_5;
            }
          }
LABEL_16:
          unint64_t v11 = __clz(__rbit64(v21)) + (v19 << 6);
        }
LABEL_5:
        ++v8;
        int v12 = a6;
        char v10 = v9;
        if (v8 == a4) {
          goto LABEL_26;
        }
      }
    }
    unint64_t v11 = result;
LABEL_26:
    outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    return v11;
  }
  return result;
}

unsigned int *specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    unsigned int v6 = *result;
    uint64_t v5 = result[1];
    if (a2)
    {
      int v7 = a3[1];
      if (v6 != *a3 || v5 != v7)
      {
        if (*(void *)v4)
        {
          unsigned int v9 = *(_DWORD *)(v4 + 12);
          uint64_t v10 = 1;
          while (1)
          {
            if (v6 - v9 + v10)
            {
              uint64_t v5 = (*(_DWORD *)(*(void *)v4 + 8 + (int)v5) + v5);
              if (v10 >= a2)
              {
                unsigned int v9 = v6 + v10;
                goto LABEL_17;
              }
            }
            else
            {
              uint64_t v5 = 0;
              if (v10 >= a2) {
                goto LABEL_17;
              }
            }
            int v11 = v6 - *a3 + v10++;
            if (!v11 && v5 == v7) {
              goto LABEL_15;
            }
          }
        }
        goto LABEL_20;
      }
LABEL_15:
      unint64_t v12 = 0;
      char v13 = 1;
    }
    else
    {
      unsigned int v9 = *result;
LABEL_17:
      char v13 = 0;
      unint64_t v12 = v9 | (unint64_t)(v5 << 32);
    }
    *(void *)a4 = v12;
    *(unsigned char *)(a4 + 8) = v13;
    return result;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, unsigned char *a4@<X8>)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    int v4 = result;
    if (!a2)
    {
LABEL_15:
      *a4 = v4;
      return result;
    }
    uint64_t v5 = 0;
    while (1)
    {
      if (v4 == a3)
      {
        *a4 = 12;
        return result;
      }
      if (!qword_26FA4FA08) {
        break;
      }
      uint64_t v6 = 0;
      ++v5;
      while (v4 != *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter
                    + v6
                    + 32))
      {
        if (qword_26FA4FA08 == ++v6)
        {
          __break(1u);
          goto LABEL_17;
        }
      }
      uint64_t v7 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_18;
      }
      if (v7 >= qword_26FA4FA08) {
        uint64_t v7 = qword_26FA4FA08 - 1;
      }
      if (v7 < 0) {
        goto LABEL_19;
      }
      int v4 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v7 + 32);
      if (v5 == a2) {
        goto LABEL_15;
      }
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a2 < 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  unint64_t v6 = HIDWORD(result);
  if (!a2) {
    goto LABEL_14;
  }
  if (result == a3)
  {
LABEL_12:
    unint64_t v9 = 0;
    char v10 = 1;
    goto LABEL_15;
  }
  if (!a4) {
    goto LABEL_17;
  }
  uint64_t v7 = 1;
  while (result - HIDWORD(a5) + v7)
  {
    unint64_t v6 = (*(_DWORD *)(a4 + 8 + (int)v6) + v6);
    if (v7 >= a2)
    {
      uint64_t result = (result + v7);
      goto LABEL_14;
    }
LABEL_10:
    int v8 = result - a3 + v7++;
    if (!v8 && v6 == HIDWORD(a3)) {
      goto LABEL_12;
    }
  }
  unint64_t v6 = 0;
  if (v7 < a2) {
    goto LABEL_10;
  }
  uint64_t result = HIDWORD(a5);
LABEL_14:
  char v10 = 0;
  unint64_t v9 = result | (v6 << 32);
LABEL_15:
  *(void *)a6 = v9;
  *(unsigned char *)(a6 + 8) = v10;
  return result;
}

unint64_t specialized Collection.distance(from:to:)(unint64_t result, uint64_t a2, char a3, int64_t a4, unsigned int a5, char a6)
{
  if (a6 & 1) != 0 || (a3) {
    goto LABEL_36;
  }
  if (a4 < (uint64_t)result) {
    goto LABEL_34;
  }
  uint64_t v9 = a2;
  if (a5 != a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    uint64_t v11 = *v6;
    uint64_t v12 = v11 + 64;
    uint64_t v13 = v11 + 88;
    uint64_t v10 = 1;
    while (1)
    {
      if ((result & 0x8000000000000000) != 0 || (uint64_t v14 = 1 << *(unsigned char *)(v11 + 32), (uint64_t)result >= v14))
      {
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      unint64_t v15 = result >> 6;
      unint64_t v16 = *(void *)(v12 + 8 * (result >> 6));
      if (((v16 >> result) & 1) == 0) {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v11 + 36) != v9) {
        goto LABEL_32;
      }
      unint64_t v17 = v16 & (-2 << (result & 0x3F));
      if (v17)
      {
        uint64_t result = __clz(__rbit64(v17)) | result & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v18 = v15 + 1;
        unint64_t v19 = (unint64_t)(v14 + 63) >> 6;
        if (v15 + 1 >= v19) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v12 + 8 * v18);
        if (!v20)
        {
          unint64_t v18 = v15 + 2;
          if (v15 + 2 >= v19) {
            goto LABEL_24;
          }
          unint64_t v20 = *(void *)(v12 + 8 * v18);
          if (!v20)
          {
            while (v19 - 3 != v15)
            {
              unint64_t v20 = *(void *)(v13 + 8 * v15++);
              if (v20)
              {
                uint64_t v21 = v13;
                outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(result, v9, 0);
                uint64_t v13 = v21;
                unint64_t v18 = v15 + 2;
                goto LABEL_17;
              }
            }
            uint64_t v22 = v13;
            outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(result, v9, 0);
            uint64_t v13 = v22;
LABEL_24:
            uint64_t result = v14;
            goto LABEL_25;
          }
        }
LABEL_17:
        uint64_t result = __clz(__rbit64(v20)) + (v18 << 6);
      }
LABEL_25:
      if (v9 != a5) {
        goto LABEL_33;
      }
      if (result == a4) {
        return v10;
      }
      uint64_t v9 = a5;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_30;
      }
    }
  }
  return 0;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, int *a2)
{
  int v3 = *a2;
  int v4 = *(_DWORD *)result;
  if (*a2 < *(_DWORD *)result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int v5 = *(_DWORD *)(result + 4);
  int v6 = a2[1];
  int v7 = v3 - v4;
  if (v3 == v4 && v5 == v6) {
    return 0;
  }
  if (*(void *)v2)
  {
    int v9 = *(_DWORD *)(v2 + 12);
    BOOL v11 = v9 == v3 && v6 == 0;
    int v12 = v9 - v4;
    uint64_t result = 1;
    do
    {
      if (v12 == result)
      {
        if (v11) {
          return result;
        }
        int v5 = 0;
      }
      else
      {
        v5 += *(_DWORD *)(*(void *)v2 + 8 + v5);
        if (v7 == result && v5 == v6) {
          return result;
        }
      }
    }
    while (!__OFADD__(result++, 1));
    __break(1u);
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

unint64_t specialized Collection.distance(from:to:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((int)a2 < (int)result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v4 = HIDWORD(result);
  int v5 = a2 - result;
  if (result == a2) {
    return 0;
  }
  if (a3)
  {
    if (HIDWORD(a2)) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = HIDWORD(a4) == a2;
    }
    char v7 = v6;
    int v8 = HIDWORD(a4) - result;
    uint64_t result = 1;
    do
    {
      if (v8 == result)
      {
        if (v7) {
          return result;
        }
        LODWORD(v4) = 0;
      }
      else
      {
        LODWORD(v4) = *(_DWORD *)(a3 + 8 + (int)v4) + v4;
        if (v5 == result && v4 == HIDWORD(a2)) {
          return result;
        }
      }
    }
    while (!__OFADD__(result++, 1));
    __break(1u);
    goto LABEL_20;
  }
LABEL_21:
  __break(1u);
  return result;
}

void static DynamicTypeSize.systemDefault.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x78);
  uint64_t v1 = static CoreGlue2.shared;
  v0();
}

void DynamicTypeSize.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static DynamicTypeSize.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void *static DynamicTypeSize.allCases.getter()
{
  return &outlined read-only object #0 of static DynamicTypeSize.allCases.getter;
}

Swift::Int DynamicTypeSize.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance DynamicTypeSize(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static DynamicTypeSize.allCases.getter;
}

uint64_t (*EnvironmentValues.dynamicTypeSize.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DynamicTypeSizeKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 3;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.dynamicTypeSize.modify;
}

uint64_t EnvironmentValues.dynamicTypeSize.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance DynamicTypeSizeCollection(unsigned char *a1, unsigned char *a2))(void, void)
{
  *a1 = *a2;
  return _ViewInputs.base.modify;
}

unsigned char *protocol witness for Collection.subscript.getter in conformance DynamicTypeSizeCollection@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = result[1];
  if (v2 > 0xB)
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = v2;
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance DynamicTypeSizeCollection(_WORD *a1@<X8>)
{
  *a1 = 2816;
}

uint64_t protocol witness for Collection.count.getter in conformance DynamicTypeSizeCollection()
{
  return specialized Collection.distance(from:to:)(0, 0xBu);
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance DynamicTypeSizeCollection(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance DynamicTypeSizeCollection@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance DynamicTypeSizeCollection@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unsigned char *a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, a4);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance DynamicTypeSizeCollection(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

unsigned __int8 *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance DynamicTypeSizeCollection(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned int v2 = *result;
  if (v2 < *a2 || v2 >= a2[1]) {
    __break(1u);
  }
  return result;
}

{
  unsigned int v2;

  unsigned int v2 = *result;
  if (v2 < *a2 || a2[1] < v2) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance DynamicTypeSizeCollection(unsigned __int8 *a1)
{
  uint64_t result = DynamicTypeSizeCollection.index(after:)(a1, &v3);
  *a1 = v3;
  return result;
}

uint64_t sub_245EBAB38(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.dynamicTypeSize.setter(&v2);
}

uint64_t sub_245EBAB70()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [DynamicTypeSize] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DynamicTypeSize] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DynamicTypeSize] and conformance [A])
  {
    type metadata accessor for [DynamicTypeSize](255, &lazy cache variable for type metadata for [DynamicTypeSize], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DynamicTypeSize] and conformance [A]);
  }
  return result;
}

uint64_t sub_245EBAC98()
{
  return swift_getWitnessTable();
}

uint64_t sub_245EBAD20()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for DynamicTypeSizeCollection()
{
  return &unk_26FA6CB60;
}

ValueMetadata *type metadata accessor for DynamicTypeSizeKey()
{
  return &type metadata for DynamicTypeSizeKey;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in DynamicTypeSizeCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<DynamicTypeSizeCollection>, MEMORY[0x263F8DE58]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in DynamicTypeSizeCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type DefaultIndices<DynamicTypeSizeCollection> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<DynamicTypeSizeCollection>, MEMORY[0x263F8D0E0]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<DynamicTypeSizeCollection>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in DynamicTypeSizeCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<DynamicTypeSizeCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<DynamicTypeSizeCollection>, MEMORY[0x263F8E738]);
}

void type metadata accessor for IndexingIterator<DynamicTypeSizeCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection();
    unint64_t v7 = a3(a1, &unk_26FA6CB60, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, unsigned __int8 a2)
{
  int v2 = result;
  if (a2 < result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (result == a2) {
    return 0;
  }
  if (qword_26FA4FA08)
  {
    uint64_t result = 0;
    while (!__OFADD__(result++, 1))
    {
      uint64_t v4 = 0;
      while (*((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v4 + 32) != v2)
      {
        if (qword_26FA4FA08 == ++v4)
        {
          __break(1u);
          goto LABEL_17;
        }
      }
      uint64_t v5 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_18;
      }
      if (v5 >= qword_26FA4FA08) {
        uint64_t v5 = qword_26FA4FA08 - 1;
      }
      if (v5 >= (unint64_t)qword_26FA4FA08) {
        goto LABEL_19;
      }
      int v2 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v5 + 32);
      if (v2 == a2) {
        return result;
      }
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t DelayAnimation.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v20 = MEMORY[0x270FA5388](a1);
  uint64_t v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v23 == v20)
  {
    (*(void (**)(char *))(v19 + 16))(v22);
    uint64_t v24 = Animation.init<A>(_:)((uint64_t)v22, a9, a11);
    v25.n128_f64[0] = a3 - a4;
    if (a3 - a4 <= 0.0) {
      v25.n128_f64[0] = 0.0;
    }
    char v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a11 + 32))(v24, a6, a7, a8, a10, a9, a11, v25);
    swift_release();
  }
  else
  {
    char v26 = 0;
  }
  return v26 & 1;
}

uint64_t protocol witness for CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:) in conformance DelayAnimation(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  return DelayAnimation.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(a1, *a2, a9, *v10, a3, a4, a5, a6, a7, a8, a10);
}

uint64_t protocol witness for CustomAnimationModifier.function(base:) in conformance DelayAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v4;
  *(void *)(v11 + 24) = v5;
  *(void *)(v11 + 32) = v6;
  *(void *)(v11 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v7;
  *(void *)(v11 + 48) = v8;
  *(void *)(v11 + 56) = v9;
  *(unsigned char *)(v11 + 64) = v10;
  *(void *)a2 = v11;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(unsigned char *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 7;

  return outlined copy of Animation.Function(v5, v6, v7, v8, v9, v10);
}

ValueMetadata *type metadata accessor for DelayAnimation()
{
  return &type metadata for DelayAnimation;
}

void *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DelayAnimation(void *result)
{
  double v2 = *v1;
  if (*v1 != 0.0)
  {
    unsigned __int8 v3 = result;
    ProtobufEncoder.encodeVarint(_:)(0x21uLL);
    uint64_t v4 = v3[1];
    int64_t v5 = v4 + 8;
    if (__OFADD__(v4, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v5)
    {
      v3[1] = v5;
      uint64_t result = (void *)(*v3 + v4);
LABEL_5:
      *(double *)uint64_t result = v2;
      return result;
    }
    uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)(v5);
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_245EBB348()
{
  outlined consume of Animation.Function(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t (*_ScrollClipEffect.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ScrollClipEffect.init(shape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t (*_ScrollClipEffect.animatableData.modify(void *a1, uint64_t a2))()
{
  int64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *int64_t v5 = a2;
  v5[1] = v2;
  uint64_t v7 = a2 + 16;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _ScrollClipEffect.animatableData.modify;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ScrollClipEffect<A>(void *a1, uint64_t a2))()
{
  int64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *int64_t v5 = v2;
  v5[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  _ScrollClipEffect.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance _ScrollClipEffect<A>;
}

uint64_t (*_EnabledScrollClipEffect.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _EnabledScrollClipEffect.isEnabled.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _EnabledScrollClipEffect.isEnabled.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_EnabledScrollClipEffect.isEnabled.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ScrollClipEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized _EnabledScrollClipEffect.animatableData.setter(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v4(a1, AssociatedTypeWitness);
}

uint64_t (*_EnabledScrollClipEffect.animatableData.modify(void *a1, uint64_t a2))()
{
  int64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *int64_t v5 = a2;
  v5[1] = v2;
  uint64_t v7 = a2 + 16;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _ScrollClipEffect.animatableData.modify;
}

void _ScrollClipEffect.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  unsigned __int8 v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    specialized _EnabledScrollClipEffect.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _EnabledScrollClipEffect.animatableData.setter((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v31 = a2;
  uint64_t v29 = a5;
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void *)a1;
  __int32 v28 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 32);
  int v27 = *(_DWORD *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(_DWORD *)(a1 + 60);
  int v26 = *(_DWORD *)(a1 + 56);
  int32x2_t v13 = *(int32x2_t *)(a1 + 64);
  int32x2_t v14 = *(int32x2_t *)(a1 + 72);
  int v25 = *(_DWORD *)(a1 + 80);
  uint64_t v15 = *(void *)(*(void *)(a4 - 8) + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15) {
    closure #1 in static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(1, a4);
  }
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  closure #2 in static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(1);
  uint64_t v17 = AGGraphCreateOffsetAttribute2();
  unint64_t v33 = __PAIR64__(v17, OffsetAttribute2);
  int32x2_t v34 = vzip1_s32(v13, v14);
  LODWORD(v35) = v12;
  MEMORY[0x270FA5388](v17);
  uint64_t v23 = type metadata accessor for _EnabledScrollClipEffect.ChildTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewTransform>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v22, v23, MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
  unint64_t v33 = v6;
  v34.i32[0] = v28;
  uint64_t v35 = v7;
  uint64_t v36 = v8;
  int v37 = v9 | 4;
  int v38 = v27;
  uint64_t v39 = v10;
  uint64_t v40 = v11;
  int v41 = v26;
  int v42 = v32;
  int32x2_t v43 = v13;
  int32x2_t v44 = v14;
  int v45 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_bridgeObjectRetain();
  v31(v20, &v33);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for _EnabledScrollClipEffect();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t closure #2 in static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _EnabledScrollClipEffect();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  v8[2] = v2;
  uint64_t v4 = MEMORY[0x263F8D4F8];
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_3, (uint64_t)v8, v4, MEMORY[0x263F8E628], v5, MEMORY[0x263F8E658], v6);
  return v8[5];
}

uint64_t _EnabledScrollClipEffect.ChildTransform.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  int v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t Value = AGGraphGetValue();
  uint64_t v11 = *(void *)Value;
  double v12 = *(double *)(Value + 8);
  double v13 = *(double *)(Value + 16);
  double v14 = *(double *)(Value + 24);
  double v15 = *(double *)(Value + 32);
  swift_retain();
  uint64_t v16 = AGGraphGetValue();
  double v17 = *(double *)v16;
  double v18 = *(double *)(v16 + 8);
  double v19 = v14 - (*(double *)v16 - v12);
  double v20 = v15 - (v18 - v13);
  uint64_t result = AGGraphGetValue();
  if (*(unsigned char *)result != 1) {
    goto LABEL_5;
  }
  uint64_t v22 = AGGraphGetValue();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v22, a2);
  unint64_t v23 = *(void *)AGGraphGetValue();
  double v35 = v19;
  double v19 = 0.0;
  Shape.effectivePath(in:)(a2, a3, (uint64_t)v36, v23);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, a2);
  Path.boundingRect.getter();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  outlined release of Path((uint64_t)v36);
  type metadata accessor for Element<ViewTransform.ScrollGeometryItem>();
  uint64_t result = swift_allocObject();
  *(double *)(result + 32) = v35;
  *(double *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v20;
  *(void *)(result + 48) = v25;
  *(void *)(result + 56) = v27;
  *(int64x2_t *)(result + 64) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_OWORD *)(result + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(void *)(result + 112) = v29;
  *(void *)(result + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v31;
  *(void *)(result + 128) = v25;
  *(void *)(result + 136) = v27;
  *(void *)(result + 144) = v29;
  *(void *)(result + 152) = v31;
  uint64_t v32 = 1;
  *(unsigned char *)(result + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
  *(void *)(result + 16) = v11;
  if (!v11 || (v33 = *(void *)(v11 + 24), v34 = __OFADD__(v33, 1), uint64_t v32 = v33 + 1, !v34))
  {
    *(void *)(result + 24) = v32;
    uint64_t v11 = result;
    double v20 = 0.0;
LABEL_5:
    *(void *)a4 = v11;
    *(double *)(a4 + 8) = v17;
    *(double *)(a4 + 16) = v18;
    *(double *)(a4 + 24) = v19;
    *(double *)(a4 + 32) = v20;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _EnabledScrollClipEffect<A>.ChildTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _EnabledScrollClipEffect.ChildTransform.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _EnabledScrollClipEffect<A>@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), a5);
}

void protocol witness for Animatable.animatableData.modify in conformance _ScrollClipEffect<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    specialized _EnabledScrollClipEffect.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _EnabledScrollClipEffect.animatableData.setter(*(void *)(*(void *)a1 + 40), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t specialized _EnabledScrollClipEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, a1, v6);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32))(v8, v3, v4);
}

uint64_t type metadata accessor for _EnabledScrollClipEffect.ChildTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245EBC17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for _ScrollClipEffect, _ScrollClipEffect.animatableData.getter);
}

uint64_t sub_245EBC1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for _ScrollClipEffect);
}

uint64_t sub_245EBC1C0()
{
  return 16;
}

__n128 sub_245EBC1CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245EBC1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for _EnabledScrollClipEffect, (uint64_t (*)(uint64_t))_EnabledScrollClipEffect.animatableData.getter);
}

uint64_t keypath_getTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = a4(0, *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t sub_245EBC254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for _EnabledScrollClipEffect);
}

uint64_t sub_245EBC26C()
{
  return 16;
}

__n128 sub_245EBC278(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t getEnumTagSinglePayload for _ScrollClipEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _ScrollClipEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245EBC5F8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata completion function for _EnabledScrollClipEffect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _EnabledScrollClipEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _EnabledScrollClipEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245EBCA88);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          a1[v9] = a2 + 1;
        }
        else
        {
          double v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _EnabledScrollClipEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245EBCAC8()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _EnabledScrollClipEffect<A>.ChildTransform()
{
  return swift_getWitnessTable();
}

uint64_t WatchColorGradientProvider.color.getter()
{
  return swift_retain();
}

uint64_t WatchColorGradientProvider.color.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *unint64_t v1 = a1;
  return result;
}

uint64_t (*WatchColorGradientProvider.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t WatchColorGradientProvider.fallback.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t WatchColorGradientProvider.fallback.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*WatchColorGradientProvider.fallback.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t WatchColorGradientProvider.init(color:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t v6 = (char *)a4 + *(int *)(type metadata accessor for WatchColorGradientProvider() + 36);
  unsigned int v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v7(v6, a2, a3);
}

uint64_t type metadata accessor for WatchColorGradientProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t WatchColorGradientProvider.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v9 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_11;
    }
  }
  else if (static Semantics.forced < v9)
  {
LABEL_11:
    uint64_t v68 = v7;
    uint64_t v69 = v8;
    return (*(uint64_t (**)(uint64_t *, void))(*(void *)(a2 + 24) + 16))(&v68, *(void *)(a2 + 16));
  }
  if (v8)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v7, (char *)&v68);
    swift_release_n();
    swift_release_n();
    if (v68 == 6) {
      goto LABEL_11;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>);
    BloomFilter.init(hashValue:)(v11);
    uint64_t v12 = swift_retain_n();
    uint64_t v13 = specialized find1<A>(_:key:filter:)(v12, v68);
    if (v13) {
      int v14 = *(unsigned __int8 *)(v13 + 72);
    }
    else {
      int v14 = 6;
    }
    swift_release_n();
    if (v14 == 6) {
      goto LABEL_11;
    }
  }
  uint64_t v15 = *v4;
  uint64_t v68 = v7;
  uint64_t v69 = v8;
  float v16 = (*(float (**)(uint64_t *))(*(void *)v15 + 104))(&v68);
  float v18 = v17;
  float v20 = v19;
  if (!v8)
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>);
    BloomFilter.init(hashValue:)(v21);
    uint64_t v22 = v68;
    uint64_t v23 = swift_retain_n();
    uint64_t v24 = specialized find1<A>(_:key:filter:)(v23, v22);
    if (v24)
    {
      int v25 = *(unsigned __int8 *)(v24 + 72);
      swift_release_n();
      if (v25 == 1) {
        goto LABEL_21;
      }
    }
    else
    {
      swift_release_n();
    }
LABEL_23:
    float v45 = Color.Resolved.lightened(to:)(0.5, v16, v18, v20);
    int v66 = v46;
    float v67 = v45;
    int v64 = v48;
    int v65 = v47;
    float v49 = Color.Resolved.lightened(to:)(0.177, v16, v18, v20);
    int v62 = v50;
    float v63 = v49;
    int v60 = v52;
    int v61 = v51;
    float v34 = Color.Resolved.lightened(to:)(0.15, v16, v18, v20);
    int v36 = v53;
    int v38 = v54;
    int v40 = v55;
    float v41 = Color.Resolved.lightened(to:)(0.148, v16, v18, v20);
    goto LABEL_24;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v7, (char *)&v68);
  swift_release_n();
  swift_release_n();
  if ((v68 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_21:
  float v26 = Color.Resolved.darkened(to:)(0.5, v16, v18, v20);
  int v66 = v27;
  float v67 = v26;
  int v64 = v29;
  int v65 = v28;
  float v30 = Color.Resolved.darkened(to:)(0.177, v16, v18, v20);
  int v62 = v31;
  float v63 = v30;
  int v60 = v33;
  int v61 = v32;
  float v34 = Color.Resolved.darkened(to:)(0.15, v16, v18, v20);
  int v36 = v35;
  int v38 = v37;
  int v40 = v39;
  float v41 = Color.Resolved.darkened(to:)(0.148, v16, v18, v20);
LABEL_24:
  float v56 = v41;
  int v57 = v42;
  int v58 = v43;
  int v59 = v44;
  type metadata accessor for _ContiguousArrayStorage<ResolvedGradient.Stop>();
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_2461C6AA0;
  *(float *)(result + 32) = v67;
  *(_DWORD *)(result + 36) = v66;
  *(_DWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v65;
  *(_DWORD *)(result + 44) = v64;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 72) = 1;
  *(float *)(result + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v63;
  *(_DWORD *)(result + 84) = v62;
  *(_DWORD *)(result + 88) = v61;
  *(_DWORD *)(result + 92) = v60;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 96) = 0x3FE3333333333333;
  *(unsigned char *)(result + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
  *(float *)(result + 128) = v34;
  *(_DWORD *)(result + 132) = v36;
  *(_DWORD *)(result + 136) = v38;
  *(_DWORD *)(result + 14specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v40;
  *(void *)(result + 152) = 0;
  *(void *)(result + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  *(void *)(result + 144) = 0x3FE51EB851EB851FLL;
  *(unsigned char *)(result + 168) = 1;
  *(float *)(result + 176) = v56;
  *(_DWORD *)(result + 18specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v57;
  *(_DWORD *)(result + 184) = v58;
  *(_DWORD *)(result + 188) = v59;
  *(void *)(result + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 192) = 0x3FE6E147AE147AE1;
  *(unsigned char *)(result + 216) = 1;
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = 0;
  return result;
}

float Color.Resolved.darkened(to:)(float a1, float a2, float a3, float a4)
{
  float v8 = -a4;
  if (a4 > 0.0) {
    float v8 = a4;
  }
  if (v8 <= 0.0031308)
  {
    float v9 = v8 * 12.92;
  }
  else
  {
    float v9 = 1.0;
    if (v8 != 1.0) {
      float v9 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
    }
  }
  float v10 = -v9;
  if (a4 > 0.0) {
    float v10 = v9;
  }
  float v11 = v10 * a1;
  float v12 = -(float)(v10 * a1);
  if (v11 > 0.0) {
    float v12 = v11;
  }
  if (v12 > 0.04045 && v12 != 1.0) {
    powf((float)(v12 * 0.94787) + 0.052133, 2.4);
  }
  float v13 = -a2;
  if (a2 > 0.0) {
    float v13 = a2;
  }
  if (v13 <= 0.0031308)
  {
    float v14 = v13 * 12.92;
  }
  else
  {
    float v14 = 1.0;
    if (v13 != 1.0) {
      float v14 = (float)(powf(v13, 0.41667) * 1.055) + -0.055;
    }
  }
  float v15 = -v14;
  if (a2 > 0.0) {
    float v15 = v14;
  }
  float v16 = v15 * a1;
  float v17 = -(float)(v15 * a1);
  if (v16 > 0.0) {
    float v17 = v16;
  }
  if (v17 <= 0.04045)
  {
    float v18 = v17 * 0.077399;
  }
  else
  {
    float v18 = 1.0;
    if (v17 != 1.0) {
      float v18 = powf((float)(v17 * 0.94787) + 0.052133, 2.4);
    }
  }
  float v19 = -a3;
  if (a3 > 0.0) {
    float v19 = a3;
  }
  if (v19 <= 0.0031308)
  {
    float v20 = v19 * 12.92;
  }
  else
  {
    float v20 = 1.0;
    if (v19 != 1.0) {
      float v20 = (float)(powf(v19, 0.41667) * 1.055) + -0.055;
    }
  }
  float v21 = -v20;
  if (a3 > 0.0) {
    float v21 = v20;
  }
  float v22 = v21 * a1;
  float v23 = -(float)(v21 * a1);
  if (v22 <= 0.0) {
    float v24 = v23;
  }
  else {
    float v24 = v22;
  }
  if (v24 > 0.04045 && v24 != 1.0) {
    powf((float)(v24 * 0.94787) + 0.052133, 2.4);
  }
  if (v16 <= 0.0) {
    return -v18;
  }
  else {
    return v18;
  }
}

float Color.Resolved.lightened(to:)(float a1, float a2, float a3, float a4)
{
  float v8 = -a4;
  if (a4 <= 0.0) {
    float v9 = -a4;
  }
  else {
    float v9 = a4;
  }
  if (v9 <= 0.0031308)
  {
    float v10 = v9 * 12.92;
    if (a4 > 0.0)
    {
LABEL_8:
      if (a4 > 0.0031308)
      {
        float v11 = 1.0;
        float v8 = a4;
        if (a4 == 1.0) {
          goto LABEL_19;
        }
        goto LABEL_14;
      }
      float v8 = a4;
LABEL_16:
      float v8 = v8 * 12.92;
LABEL_17:
      float v11 = v8;
      if (a4 > 0.0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  else
  {
    float v10 = 1.0;
    if (v9 != 1.0) {
      float v10 = (float)(powf(v9, 0.41667) * 1.055) + -0.055;
    }
    if (a4 > 0.0) {
      goto LABEL_8;
    }
  }
  float v10 = -v10;
  if (a4 >= -0.0031308) {
    goto LABEL_16;
  }
  if (a4 != -1.0)
  {
LABEL_14:
    float v8 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
    goto LABEL_17;
  }
LABEL_18:
  float v11 = -v8;
LABEL_19:
  float v12 = v10 + (float)((float)(1.0 - v11) * a1);
  float v13 = -v12;
  if (v12 > 0.0) {
    float v13 = v12;
  }
  if (v13 > 0.04045 && v13 != 1.0) {
    powf((float)(v13 * 0.94787) + 0.052133, 2.4);
  }
  float v14 = -a2;
  if (a2 > 0.0) {
    float v14 = a2;
  }
  if (v14 <= 0.0031308)
  {
    float v15 = v14 * 12.92;
    float v17 = -(float)(v14 * 12.92);
  }
  else
  {
    float v15 = 1.0;
    if (v14 == 1.0)
    {
      BOOL v16 = a2 <= 0.0;
      float v17 = -1.0;
      goto LABEL_32;
    }
    float v15 = (float)(powf(v14, 0.41667) * 1.055) + -0.055;
    float v17 = -v15;
  }
  BOOL v16 = a2 <= 0.0;
LABEL_32:
  if (!v16) {
    float v17 = v15;
  }
  if (a2 <= 0.0) {
    float v15 = -v15;
  }
  float v18 = 1.0;
  float v19 = v17 + (float)((float)(1.0 - v15) * a1);
  float v20 = -v19;
  if (v19 > 0.0) {
    float v20 = v19;
  }
  if (v20 <= 0.04045)
  {
    float v18 = v20 * 0.077399;
  }
  else if (v20 != 1.0)
  {
    float v18 = powf((float)(v20 * 0.94787) + 0.052133, 2.4);
  }
  float v21 = -a3;
  if (a3 > 0.0) {
    float v21 = a3;
  }
  if (v21 <= 0.0031308)
  {
    float v22 = v21 * 12.92;
    float v24 = -(float)(v21 * 12.92);
  }
  else
  {
    float v22 = 1.0;
    if (v21 == 1.0)
    {
      BOOL v23 = a3 <= 0.0;
      float v24 = -1.0;
      goto LABEL_50;
    }
    float v22 = (float)(powf(v21, 0.41667) * 1.055) + -0.055;
    float v24 = -v22;
  }
  BOOL v23 = a3 <= 0.0;
LABEL_50:
  if (v23) {
    float v25 = v24;
  }
  else {
    float v25 = v22;
  }
  if (a3 <= 0.0) {
    float v22 = -v22;
  }
  float v26 = v25 + (float)((float)(1.0 - v22) * a1);
  float v27 = -v26;
  if (v26 > 0.0) {
    float v27 = v26;
  }
  if (v27 > 0.04045 && v27 != 1.0) {
    powf((float)(v27 * 0.94787) + 0.052133, 2.4);
  }
  if (v19 <= 0.0) {
    return -v18;
  }
  else {
    return v18;
  }
}

uint64_t WatchColorGradientProvider.fallbackColor(in:)(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  return (*(uint64_t (**)(long long *, void))(*(void *)(a2 + 24) + 24))(&v3, *(void *)(a2 + 16));
}

uint64_t WatchColorGradientProvider.containerBackgroundMaterial(in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  v6[0] = v4;
  v6[1] = v3;
  swift_retain();
  swift_retain();
  uint64_t result = specialized Material.ResolvedMaterial.Flags.init(environment:)(v6);
  *a2 = 3;
  a2[1] = (result << 32) | 3;
  return result;
}

uint64_t WatchColorGradientProvider.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(**(void **)v1 + 136);
  swift_retain();
  v3(a1);
  swift_release();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static WatchColorGradientProvider.== infix(_:_:)(uint64_t a1, void *a2)
{
  if (*(void *)a1 != *a2 && ((*(uint64_t (**)(void))(**(void **)a1 + 88))() & 1) == 0) {
    return 0;
  }
  type metadata accessor for WatchColorGradientProvider();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int WatchColorGradientProvider.hashValue.getter()
{
  Hasher.init(_seed:)();
  WatchColorGradientProvider.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WatchColorGradientProvider<A>()
{
  Hasher.init(_seed:)();
  WatchColorGradientProvider.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WatchColorGradientProvider<A>(uint64_t a1, void *a2)
{
  return static WatchColorGradientProvider.== infix(_:_:)(a1, a2);
}

uint64_t instantiation function for generic protocol witness table for WatchColorGradientProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in WatchColorGradientProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for WatchColorGradientProvider(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for WatchColorGradientProvider(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x245EBE050);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          float v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t (*_ShapeIntersection.lhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeIntersection.rhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeIntersection.eoFill.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeIntersection.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 32) + 24))(v17, *(void *)(a1 + 16));
  (*(void (**)(void *__return_ptr, void, double, double, double, double))(*(void *)(a1 + 40) + 24))(v18, *(void *)(a1 + 24), a3, a4, a5, a6);
  char v13 = *(unsigned char *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(unsigned char *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 1;
  v16[1] = v13;
  MEMORY[0x24C526C30](v14 + 24, 20, 0, v16);
  Path.append(to:)(v14 + 24);
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 21, 0, 0);
  Path.append(to:)(v14 + 24);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 16, 0, 0);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = outlined retain of Path((uint64_t)v17, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 5;
  return result;
}

uint64_t (*_ShapeIntersection.animatableData.modify(void *a1, uint64_t a2))()
{
  unsigned int v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  *unsigned int v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  uint64_t v10 = type metadata accessor for AnimatablePair();
  v5[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[7] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v5[8] = malloc(v12);
  v5[9] = malloc(v12);
  _ShapeUnion.animatableData.getter(a2);
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeIntersection<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  _ShapeIntersection.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeIntersection.sizeThatFits(_:));
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeIntersection<A, B>(void *a1, uint64_t a2))()
{
  unsigned int v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  *unsigned int v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  uint64_t v10 = type metadata accessor for AnimatablePair();
  v5[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[7] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v5[8] = malloc(v12);
  v5[9] = malloc(v12);
  _ShapeUnion.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance _ShapeIntersection<A, B>;
}

uint64_t (*_ShapeUnion.lhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeUnion.rhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeUnion.eoFill.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t _ShapeUnion.eoFill.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 56)) = result;
  return result;
}

uint64_t (*_ShapeUnion.eoFill.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeUnion.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 32) + 24))(v17, *(void *)(a1 + 16));
  (*(void (**)(void *__return_ptr, void, double, double, double, double))(*(void *)(a1 + 40) + 24))(v18, *(void *)(a1 + 24), a3, a4, a5, a6);
  char v13 = *(unsigned char *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(unsigned char *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 2;
  v16[1] = v13;
  MEMORY[0x24C526C30](v14 + 24, 20, 0, v16);
  Path.append(to:)(v14 + 24);
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 21, 0, 0);
  Path.append(to:)(v14 + 24);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 16, 0, 0);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = outlined retain of Path((uint64_t)v17, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 5;
  return result;
}

uint64_t key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, _OWORD *), uint64_t (*a5)(uint64_t))
{
  long long v6 = *(_OWORD *)(a3 + a2 - 16);
  v9[0] = *(_OWORD *)(a3 + a2 - 32);
  v9[1] = v6;
  uint64_t v7 = a4(0, v9);
  return a5(v7);
}

uint64_t key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, _OWORD *))
{
  long long v6 = *(_OWORD *)(a4 + a3 - 16);
  v9[0] = *(_OWORD *)(a4 + a3 - 32);
  v9[1] = v6;
  uint64_t v7 = (void *)a5(0, v9);
  return specialized _ShapeSymmetricDifference.animatableData.setter(a1, v7);
}

uint64_t _ShapeIntersection.animatableData.setter(uint64_t a1, void *a2)
{
  specialized _ShapeSymmetricDifference.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

uint64_t (*_ShapeUnion.animatableData.modify(void *a1, uint64_t a2))()
{
  unsigned int v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  *unsigned int v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  uint64_t v10 = type metadata accessor for AnimatablePair();
  v5[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[7] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v5[8] = malloc(v12);
  v5[9] = malloc(v12);
  _ShapeUnion.animatableData.getter(a2);
  return _ShapeIntersection.animatableData.modify;
}

void _ShapeIntersection.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    specialized _ShapeSymmetricDifference.animatableData.setter((uint64_t)v3, v7);
    long long v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _ShapeSymmetricDifference.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

double protocol witness for Shape.path(in:) in conformance _ShapeUnion<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  _ShapeUnion.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeUnion<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeUnion.sizeThatFits(_:));
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

void protocol witness for Animatable.animatableData.modify in conformance _ShapeIntersection<A, B>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    specialized _ShapeSymmetricDifference.animatableData.setter((uint64_t)v3, v7);
    long long v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _ShapeSymmetricDifference.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t (*_ShapeSubtraction.lhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeSubtraction.rhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeSubtraction.eoFill.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeSubtraction.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 32) + 24))(v17, *(void *)(a1 + 16));
  (*(void (**)(void *__return_ptr, void, double, double, double, double))(*(void *)(a1 + 40) + 24))(v18, *(void *)(a1 + 24), a3, a4, a5, a6);
  char v13 = *(unsigned char *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(unsigned char *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 3;
  v16[1] = v13;
  MEMORY[0x24C526C30](v14 + 24, 20, 0, v16);
  Path.append(to:)(v14 + 24);
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 21, 0, 0);
  Path.append(to:)(v14 + 24);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 16, 0, 0);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = outlined retain of Path((uint64_t)v17, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 5;
  return result;
}

uint64_t (*_ShapeSubtraction.animatableData.modify(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  uint64_t v10 = type metadata accessor for AnimatablePair();
  v5[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[7] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v5[8] = malloc(v12);
  v5[9] = malloc(v12);
  _ShapeUnion.animatableData.getter(a2);
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeSubtraction<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  _ShapeSubtraction.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeSubtraction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeSubtraction.sizeThatFits(_:));
}

uint64_t (*_ShapeSymmetricDifference.lhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeSymmetricDifference.rhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeSymmetricDifference.eoFill.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeSymmetricDifference.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 32) + 24))(v17, *(void *)(a1 + 16));
  (*(void (**)(void *__return_ptr, void, double, double, double, double))(*(void *)(a1 + 40) + 24))(v18, *(void *)(a1 + 24), a3, a4, a5, a6);
  char v13 = *(unsigned char *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(unsigned char *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 4;
  v16[1] = v13;
  MEMORY[0x24C526C30](v14 + 24, 20, 0, v16);
  Path.append(to:)(v14 + 24);
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 21, 0, 0);
  Path.append(to:)(v14 + 24);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 16, 0, 0);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = outlined retain of Path((uint64_t)v17, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 5;
  return result;
}

void _ShapeUnion.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v8 = a2 & 1;
  unsigned __int8 v9 = a4 & 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(a5[4] + 48))(a1, v8, a3, a4 & 1, a5[2]);
  (*(double (**)(uint64_t, uint64_t, uint64_t, void, void))(a5[5] + 48))(a1, v8, a3, v9, a5[3]);
}

uint64_t (*_ShapeSymmetricDifference.animatableData.modify(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  uint64_t v10 = type metadata accessor for AnimatablePair();
  v5[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[7] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v5[8] = malloc(v12);
  v5[9] = malloc(v12);
  _ShapeUnion.animatableData.getter(a2);
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeSymmetricDifference<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  _ShapeSymmetricDifference.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeSymmetricDifference<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeSymmetricDifference.sizeThatFits(_:));
}

uint64_t (*_ShapeLineIntersection.lhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeLineIntersection.rhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeLineIntersection.eoFill.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeLineIntersection.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 32) + 24))(v17, *(void *)(a1 + 16));
  (*(void (**)(void *__return_ptr, void, double, double, double, double))(*(void *)(a1 + 40) + 24))(v18, *(void *)(a1 + 24), a3, a4, a5, a6);
  char v13 = *(unsigned char *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(unsigned char *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 5;
  v16[1] = v13;
  MEMORY[0x24C526C30](v14 + 24, 20, 0, v16);
  Path.append(to:)(v14 + 24);
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 21, 0, 0);
  Path.append(to:)(v14 + 24);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 16, 0, 0);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = outlined retain of Path((uint64_t)v17, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 5;
  return result;
}

void _ShapeIntersection.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v8 = a2 & 1;
  unsigned __int8 v9 = a4 & 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(a5[4] + 48))(a1, v8, a3, a4 & 1, a5[2]);
  (*(double (**)(uint64_t, uint64_t, uint64_t, void, void))(a5[5] + 48))(a1, v8, a3, v9, a5[3]);
}

uint64_t (*_ShapeLineIntersection.animatableData.modify(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  uint64_t v10 = type metadata accessor for AnimatablePair();
  v5[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[7] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v5[8] = malloc(v12);
  v5[9] = malloc(v12);
  _ShapeUnion.animatableData.getter(a2);
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeLineIntersection<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  _ShapeLineIntersection.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeLineIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeLineIntersection.sizeThatFits(_:));
}

uint64_t (*_ShapeLineSubtraction.lhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeIntersection.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t _ShapeIntersection.rhs.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*_ShapeLineSubtraction.rhs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeLineSubtraction.eoFill.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeLineSubtraction.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 32) + 24))(v17, *(void *)(a1 + 16));
  (*(void (**)(void *__return_ptr, void, double, double, double, double))(*(void *)(a1 + 40) + 24))(v18, *(void *)(a1 + 24), a3, a4, a5, a6);
  char v13 = *(unsigned char *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(unsigned char *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 6;
  v16[1] = v13;
  MEMORY[0x24C526C30](v14 + 24, 20, 0, v16);
  Path.append(to:)(v14 + 24);
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 21, 0, 0);
  Path.append(to:)(v14 + 24);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  MEMORY[0x24C526C30](v14 + 24, 16, 0, 0);
  outlined retain of Path((uint64_t)v18, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = outlined retain of Path((uint64_t)v17, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 5;
  return result;
}

uint64_t _ShapeSubtraction.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(void *)(a5 + 32) + 48))();
}

uint64_t _ShapeIntersection.animatableData.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = *(void *)(a1[4] + 8);
  uint64_t v9 = a1[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  double v11 = MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 24))(v9, v8, v11);
  (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v4, v3);
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  return AnimatablePair.init(_:_:)((uint64_t)v13, (uint64_t)v7, v10, AssociatedTypeWitness, v16);
}

uint64_t (*_ShapeLineSubtraction.animatableData.modify(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  uint64_t v10 = type metadata accessor for AnimatablePair();
  v5[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[7] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v5[8] = malloc(v12);
  v5[9] = malloc(v12);
  _ShapeUnion.animatableData.getter(a2);
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeLineSubtraction<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  _ShapeLineSubtraction.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeLineSubtraction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeLineSubtraction.sizeThatFits(_:));
}

uint64_t specialized _ShapeSymmetricDifference.animatableData.setter(uint64_t a1, void *a2)
{
  uint64_t v19 = a1;
  uint64_t v3 = *(void *)(a2[5] + 8);
  uint64_t v18 = a2[3];
  uint64_t v17 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = *(void *)(a2[4] + 8);
  uint64_t v8 = a2[2];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = v18;
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v20 = v9;
  uint64_t v21 = AssociatedTypeWitness;
  uint64_t v22 = AssociatedConformanceWitness;
  uint64_t v23 = v14;
  uint64_t v15 = type metadata accessor for AnimatablePair();
  AnimatablePair.subscript.getter((uint64_t)v11, (uint64_t)v6, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v11, v8, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 32))(v6, v13);
}

uint64_t instantiation function for generic protocol witness table for _ShapeIntersection<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t instantiation function for generic protocol witness table for _ShapeUnion<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t instantiation function for generic protocol witness table for _ShapeSubtraction<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t instantiation function for generic protocol witness table for _ShapeSymmetricDifference<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t instantiation function for generic protocol witness table for _ShapeLineIntersection<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t instantiation function for generic protocol witness table for _ShapeLineSubtraction<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t sub_245EC0850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeIntersection, (uint64_t (*)(uint64_t))_ShapeIntersection.animatableData.getter);
}

uint64_t sub_245EC0890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeIntersection);
}

uint64_t sub_245EC08BC()
{
  return 32;
}

__n128 sub_245EC08C8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_245EC08D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeUnion, _ShapeUnion.animatableData.getter);
}

uint64_t sub_245EC0914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeUnion);
}

uint64_t sub_245EC0940()
{
  return 32;
}

__n128 sub_245EC094C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_245EC0958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeSubtraction, (uint64_t (*)(uint64_t))_ShapeSubtraction.animatableData.getter);
}

uint64_t sub_245EC0998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeSubtraction);
}

uint64_t sub_245EC09C4()
{
  return 32;
}

__n128 sub_245EC09D0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_245EC09DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeSymmetricDifference, (uint64_t (*)(uint64_t))_ShapeSymmetricDifference.animatableData.getter);
}

uint64_t sub_245EC0A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeSymmetricDifference);
}

uint64_t sub_245EC0A48()
{
  return 32;
}

__n128 sub_245EC0A54(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_245EC0A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeLineIntersection, (uint64_t (*)(uint64_t))_ShapeLineIntersection.animatableData.getter);
}

uint64_t sub_245EC0AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeLineIntersection);
}

uint64_t sub_245EC0ACC()
{
  return 32;
}

__n128 sub_245EC0AD8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_245EC0AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeLineSubtraction, (uint64_t (*)(uint64_t))_ShapeLineSubtraction.animatableData.getter);
}

uint64_t sub_245EC0B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for _ShapeLineSubtraction);
}

uint64_t sub_245EC0B50()
{
  return 32;
}

__n128 sub_245EC0B5C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata accessor for _ShapeIntersection()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for _ShapeUnion()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for _ShapeSubtraction()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for _ShapeSymmetricDifference()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for _ShapeLineIntersection()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for _ShapeIntersection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ShapeIntersection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  unint64_t v12 = v11 + ((v6 + v9) & ~v9) + 1;
  uint64_t v13 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    *(unsigned char *)((((unint64_t)v4 + v10) & v17) + v11) = *(unsigned char *)(v18 + v11);
  }
  return v4;
}

uint64_t initializeWithCopy for _ShapeIntersection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  *(unsigned char *)(*(void *)(v9 + 48) + v12) = *(unsigned char *)(*(void *)(v9 + 48) + v13);
  return a1;
}

uint64_t assignWithCopy for _ShapeIntersection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  *(unsigned char *)(*(void *)(v9 + 40) + v12) = *(unsigned char *)(*(void *)(v9 + 40) + v13);
  return a1;
}

uint64_t initializeWithTake for _ShapeIntersection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  *(unsigned char *)(*(void *)(v9 + 32) + v12) = *(unsigned char *)(*(void *)(v9 + 32) + v13);
  return a1;
}

uint64_t assignWithTake for _ShapeIntersection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  *(unsigned char *)(*(void *)(v9 + 24) + v12) = *(unsigned char *)(*(void *)(v9 + 24) + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeIntersection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  int v13 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_26;
  }
  uint64_t v14 = v10 + (v12 & ~v9) + 1;
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_9;
  }
  unsigned int v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
  if (HIWORD(v17))
  {
    int v16 = *(_DWORD *)((char *)a1 + v14);
    if (v16) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v17 <= 0xFF)
    {
      if (v17 < 2) {
        goto LABEL_26;
      }
LABEL_9:
      int v16 = *((unsigned __int8 *)a1 + v14);
      if (!*((unsigned char *)a1 + v14)) {
        goto LABEL_26;
      }
LABEL_16:
      int v18 = (v16 - 1) << v15;
      if (v14 > 3) {
        int v18 = 0;
      }
      if (v10 + (v12 & ~v9) == -1)
      {
        int v20 = 0;
      }
      else
      {
        if (v14 <= 3) {
          int v19 = v10 + (v12 & ~v9) + 1;
        }
        else {
          int v19 = 4;
        }
        switch(v19)
        {
          case 2:
            int v20 = *a1;
            break;
          case 3:
            int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v20 = *(_DWORD *)a1;
            break;
          default:
            int v20 = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v11 + (v20 | v18) + 1;
    }
    int v16 = *(unsigned __int16 *)((char *)a1 + v14);
    if (*(unsigned __int16 *)((char *)a1 + v14)) {
      goto LABEL_16;
    }
  }
LABEL_26:
  if (v6 == v11) {
    return (*(uint64_t (**)(void))(v5 + 48))();
  }
  unint64_t v22 = ((unint64_t)a1 + v12) & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v22);
  }
  unsigned int v23 = *(unsigned __int8 *)(v22 + v10);
  if (v23 < 2) {
    return 0;
  }
  return ((v23 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _ShapeIntersection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v12 = 254;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v10;
  size_t v14 = v11 + (v13 & ~v10) + 1;
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v11 + (v13 & ~v10) != -1)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x245EC1658);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 == v12)
        {
          unint64_t v22 = *(void (**)(void))(v6 + 56);
          v22();
        }
        else
        {
          unint64_t v23 = (unint64_t)&a1[v13] & ~v10;
          if (v9 == v12)
          {
            float v24 = *(void (**)(unint64_t))(v8 + 56);
            v24(v23);
          }
          else
          {
            *(unsigned char *)(v23 + v11) = a2 + 1;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _ShapeLineSubtraction()
{
  return swift_getGenericMetadata();
}

double specialized ScaledMetric.wrappedValue.getter()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v15 = *(unsigned char *)(v0 + 40);
  uint64_t v5 = *(void *)v0;
  char v6 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(void *)v0, v6);
  specialized Environment.wrappedValue.getter(v5, v6, &v14);
  outlined consume of Environment<CGFloat>.Content(v5, v6);
  double v7 = specialized static Font.scaleFactor(textStyle:in:)(&v15, &v14) * *(double *)(v0 + 32);
  uint64_t v8 = *(void *)(v0 + 16);
  char v9 = *(unsigned char *)(v0 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v8, v9);
  double v10 = specialized Environment.wrappedValue.getter(v8, v9);
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E210], v1);
  double v13 = v7;
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v10);
  double v11 = v13;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v11;
}

uint64_t property wrapper backing initializer of _ScaledValue.value@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 6;
  return result;
}

uint64_t _ScaledValue.init(wrappedValue:textStyle:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v5 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = KeyPath;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  *(unsigned char *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v5;
  return result;
}

double _ScaledValue.wrappedValue.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  char v6 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(void *)v0, v6);
  outlined copy of Environment<DynamicTypeSize>.Content(v2, v3);
  double v4 = specialized ScaledMetric.wrappedValue.getter();
  outlined consume of Environment<CGFloat>.Content(v1, v6);
  outlined consume of Environment<CGFloat>.Content(v2, v3);
  return v4;
}

uint64_t initializeBufferWithCopyOfBuffer for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v8 + ((v7 + 25) & (unint64_t)~v7) + 1 > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v7;
    uint64_t v13 = *(void *)a2;
    char v14 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<DynamicTypeSize>.Content(*(void *)a2, v14);
    *(void *)a1 = v13;
    *(unsigned char *)(a1 + 8) = v14;
    unint64_t v15 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    LOBYTE(v13) = *(unsigned char *)(v16 + 24);
    outlined copy of Environment<DynamicTypeSize>.Content(v17, v13);
    *(void *)(v15 + 16) = v17;
    *(unsigned char *)(v15 + 24) = v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 25) & v12, (v16 + v7 + 25) & v12, v5);
    *(unsigned char *)(((v15 + v7 + 25) & v12) + v8) = *(unsigned char *)(((v16 + v7 + 25) & v12) + v8);
  }
  return a1;
}

uint64_t initializeWithTake for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (v8 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  unint64_t v10 = (v8 + 25 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(v9, v10);
  *(unsigned char *)(*(void *)(v7 + 32) + v9) = *(unsigned char *)(*(void *)(v7 + 32) + v10);
  return a1;
}

uint64_t assignWithTake for ScaledMetric(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (uint64_t *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
  char v11 = *((unsigned char *)v4 + 24);
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  char v13 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v10 + 16) = v4[2];
  *(unsigned char *)(v10 + 24) = v11;
  outlined consume of Environment<CGFloat>.Content(v12, v13);
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v17 = (v16 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  uint64_t v18 = ((unint64_t)v4 + v16 + 25) & ~v16;
  (*(void (**)(unint64_t, uint64_t))(v14 + 40))(v17, v18);
  *(unsigned char *)(*(void *)(v15 + 24) + v17) = *(unsigned char *)(*(void *)(v15 + 24) + v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScaledMetric(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 25) & ~v6) + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 25) & ~v6);
      }
      unsigned int v15 = *(unsigned __int8 *)(a1 + 8);
      if (v15 > 1) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ScaledMetric(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 25) & ~v9) + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 25) & ~v9) != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)(a1 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245EC20D0);
    case 4:
      *(_DWORD *)(a1 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 25) & ~v9;
          int v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0xFE)
        {
          *(unsigned char *)(a1 + 8) = 0;
          *(void *)a1 = a2 - 255;
        }
        else
        {
          *(unsigned char *)(a1 + 8) = -(char)a2;
        }
      }
      return;
  }
}

uint64_t destroy for _ScaledValue(uint64_t a1)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return outlined consume of Environment<CGFloat>.Content(v2, v3);
}

uint64_t initializeWithCopy for _ScaledValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for _ScaledValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<CGFloat>.Content(v10, v11);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for _ScaledValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<CGFloat>.Content(v9, v10);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *((unsigned char *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScaledValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ScaledValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ScaledValue()
{
  return &type metadata for _ScaledValue;
}

SwiftUI::DynamicTypeSize __swiftcall DynamicTypeSize.init(_:)(SwiftUI::DynamicTypeSize result)
{
  *uint64_t v1 = *(unsigned char *)result;
  return result;
}

BOOL static ContentSizeCategory.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL ContentSizeCategory.isAccessibilityCategory.getter()
{
  return *v0 - 7 < 5;
}

void ContentSizeCategory.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void *static ContentSizeCategory.allCases.getter()
{
  return &outlined read-only object #0 of static ContentSizeCategory.allCases.getter;
}

Swift::Int ContentSizeCategory.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContentSizeCategory(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContentSizeCategory.allCases.getter;
}

uint64_t EnvironmentValues.sizeCategory.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.sizeCategory.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1 = v1;
  EnvironmentValues.sizeCategory.getter((char *)(a1 + 8));
  return EnvironmentValues.sizeCategory.modify;
}

uint64_t EnvironmentValues.sizeCategory.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    char v4 = *(unsigned char *)(a1 + 8);
    uint64_t v2 = (unsigned __int8 *)&v4;
  }
  else
  {
    char v5 = *(unsigned char *)(a1 + 8);
    uint64_t v2 = (unsigned __int8 *)&v5;
  }
  return EnvironmentValues.sizeCategory.setter(v2);
}

unint64_t lazy protocol witness table accessor for type ContentSizeCategory and conformance ContentSizeCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentSizeCategory and conformance ContentSizeCategory;
  if (!lazy protocol witness table cache variable for type ContentSizeCategory and conformance ContentSizeCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentSizeCategory and conformance ContentSizeCategory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContentSizeCategory] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ContentSizeCategory] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContentSizeCategory] and conformance [A])
  {
    type metadata accessor for [ContentSizeCategory]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContentSizeCategory] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ContentSizeCategory]()
{
  if (!lazy cache variable for type metadata for [ContentSizeCategory])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ContentSizeCategory]);
    }
  }
}

uint64_t sub_245EC267C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sizeCategory.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_245EC26C0(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.sizeCategory.setter(&v2);
}

id Font.TextStyle.ctTextStyle.getter()
{
  unint64_t v0 = (void *)specialized Font.TextStyle.ctTextStyle.getter();

  return v0;
}

id DynamicTypeSize.ctTextSize.getter()
{
  unint64_t v0 = (void *)specialized DynamicTypeSize.ctTextSize.getter();

  return v0;
}

id one-time initialization function for footnote2()
{
  if (one-time initialization token for footnote2 != -1) {
    swift_once();
  }
  unsigned __int8 v2 = (void *)static Font.PrivateTextStyle.footnote2;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PrivateTextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 16) = v2;
  *(unsigned char *)(v0 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
  static Font.footnote2 = v0;

  return v2;
}

{
  static Font.PrivateTextStyle.footnote2 = *MEMORY[0x263F03D08];
  return (id)static Font.PrivateTextStyle.footnote2;
}

uint64_t static Font.system(_:design:weight:)(void **a1, unsigned char *a2, uint64_t a3, char a4)
{
  char v4 = *a1;
  char v7 = 0;
  switch(*a2)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_10;
    default:
      char v7 = (void *)*MEMORY[0x263F03B80];
      if (*MEMORY[0x263F03B80]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_4:
      char v7 = (void *)*MEMORY[0x263F03B98];
      if (*MEMORY[0x263F03B98]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_6:
      char v7 = (void *)*MEMORY[0x263F03B90];
      if (!*MEMORY[0x263F03B90])
      {
        __break(1u);
LABEL_8:
        char v7 = (void *)*MEMORY[0x263F03B88];
        if (!*MEMORY[0x263F03B88])
        {
          __break(1u);
          JUMPOUT(0x245EC2938);
        }
      }
LABEL_9:
      id v8 = v7;
LABEL_10:
      type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PrivateTextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v4;
      *(void *)(v9 + 24) = v7;
      *(void *)(v9 + 32) = a3;
      *(unsigned char *)(v9 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a4 & 1;
      id v10 = v4;
      return v9;
  }
}

{
  void *v4;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;

  char v4 = *a1;
  switch(*a2)
  {
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_4;
    case 3:
      goto LABEL_6;
    default:
      char v7 = (void *)*MEMORY[0x263F03B80];
      if (*MEMORY[0x263F03B80]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_4:
      char v7 = (void *)*MEMORY[0x263F03B90];
      if (!*MEMORY[0x263F03B90])
      {
        __break(1u);
LABEL_6:
        char v7 = (void *)*MEMORY[0x263F03B88];
        if (!*MEMORY[0x263F03B88])
        {
          __break(1u);
LABEL_8:
          char v7 = (void *)*MEMORY[0x263F03B98];
          if (!*MEMORY[0x263F03B98])
          {
            __break(1u);
            JUMPOUT(0x245EC2B70);
          }
        }
      }
LABEL_9:
      id v8 = v7;
      type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PrivateTextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v4;
      *(void *)(v9 + 24) = v7;
      *(void *)(v9 + 32) = a3;
      *(unsigned char *)(v9 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a4 & 1;
      id v10 = v4;
      return v9;
  }
}

uint64_t static Font.footnote2.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for footnote2);
}

void static Font.extraLargeTitle.getter()
{
}

uint64_t static Font.system(_:design:)(char *a1, char *a2)
{
  char v2 = *a1;
  char v3 = *a2;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = v2;
  *(unsigned char *)(result + 17) = v3;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  return result;
}

uint64_t static Font.system(_:design:weight:)(char *a1, char *a2, double a3)
{
  char v4 = *a1;
  char v5 = *a2;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = v4;
  *(unsigned char *)(result + 17) = v5;
  *(double *)(result + 24) = a3;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

void one-time initialization function for allCases()
{
  static Font.TextStyle.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t static Font.TextStyle.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void Font.TextStyle.hash(into:)()
{
  Swift::UInt v1 = *v0;
  switch(*v0)
  {
    case 1:
      Swift::UInt v1 = 1;
      break;
    case 2:
      Swift::UInt v1 = 2;
      break;
    case 3:
      Swift::UInt v1 = 3;
      break;
    case 4:
      Swift::UInt v1 = 4;
      break;
    case 5:
      Swift::UInt v1 = 5;
      break;
    case 6:
      Swift::UInt v1 = 6;
      break;
    case 7:
      Swift::UInt v1 = 7;
      break;
    case 8:
      Swift::UInt v1 = 8;
      break;
    case 9:
      Swift::UInt v1 = 9;
      break;
    case 0xA:
      Swift::UInt v1 = 10;
      break;
    case 0xB:
    case 0xC:
    case 0xD:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245EC2C94);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int Font.TextStyle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
      Swift::UInt v1 = 1;
      break;
    case 2uLL:
      Swift::UInt v1 = 2;
      break;
    case 3uLL:
      Swift::UInt v1 = 3;
      break;
    case 4uLL:
      Swift::UInt v1 = 4;
      break;
    case 5uLL:
      Swift::UInt v1 = 5;
      break;
    case 6uLL:
      Swift::UInt v1 = 6;
      break;
    case 7uLL:
      Swift::UInt v1 = 7;
      break;
    case 8uLL:
      Swift::UInt v1 = 8;
      break;
    case 9uLL:
      Swift::UInt v1 = 9;
      break;
    case 0xAuLL:
      Swift::UInt v1 = 10;
      break;
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245EC2D8CLL);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Font.TextStyle()
{
  Swift::UInt v1 = *v0;
  switch(*v0)
  {
    case 1:
      Swift::UInt v1 = 1;
      break;
    case 2:
      Swift::UInt v1 = 2;
      break;
    case 3:
      Swift::UInt v1 = 3;
      break;
    case 4:
      Swift::UInt v1 = 4;
      break;
    case 5:
      Swift::UInt v1 = 5;
      break;
    case 6:
      Swift::UInt v1 = 6;
      break;
    case 7:
      Swift::UInt v1 = 7;
      break;
    case 8:
      Swift::UInt v1 = 8;
      break;
    case 9:
      Swift::UInt v1 = 9;
      break;
    case 0xA:
      Swift::UInt v1 = 10;
      break;
    case 0xB:
    case 0xC:
    case 0xD:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245EC2E70);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.TextStyle()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = *v0;
  switch(*v0)
  {
    case 1:
      Swift::UInt v1 = 1;
      break;
    case 2:
      Swift::UInt v1 = 2;
      break;
    case 3:
      Swift::UInt v1 = 3;
      break;
    case 4:
      Swift::UInt v1 = 4;
      break;
    case 5:
      Swift::UInt v1 = 5;
      break;
    case 6:
      Swift::UInt v1 = 6;
      break;
    case 7:
      Swift::UInt v1 = 7;
      break;
    case 8:
      Swift::UInt v1 = 8;
      break;
    case 9:
      Swift::UInt v1 = 9;
      break;
    case 0xA:
      Swift::UInt v1 = 10;
      break;
    case 0xB:
    case 0xC:
    case 0xD:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245EC2F60);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Font.TextStyle@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  *a1 = static Font.TextStyle.allCases;

  return swift_bridgeObjectRetain();
}

id static Font.PrivateTextStyle.footnote2.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for footnote2, (void **)&static Font.PrivateTextStyle.footnote2, a1);
}

uint64_t one-time initialization function for emphasizedBody()
{
  uint64_t result = MEMORY[0x24C522820](0xD00000000000001FLL, 0x8000000246222510);
  static Font.PrivateTextStyle.emphasizedBody = result;
  return result;
}

id static Font.PrivateTextStyle.emphasizedBody.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for emphasizedBody, (void **)&static Font.PrivateTextStyle.emphasizedBody, a1);
}

id one-time initialization function for shortCaption1()
{
  static Font.PrivateTextStyle.shortCaption1 = *MEMORY[0x263F03D28];
  return (id)static Font.PrivateTextStyle.shortCaption1;
}

id static Font.PrivateTextStyle.shortCaption1.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for shortCaption1, (void **)&static Font.PrivateTextStyle.shortCaption1, a1);
}

uint64_t one-time initialization function for shortCaption2()
{
  uint64_t result = MEMORY[0x24C522820](0xD00000000000001ELL, 0x80000002462224F0);
  static Font.PrivateTextStyle.shortCaption2 = result;
  return result;
}

id static Font.PrivateTextStyle.shortCaption2.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for shortCaption2, (void **)&static Font.PrivateTextStyle.shortCaption2, a1);
}

void Font.PrivateTextStyle.hash(into:)()
{
  Swift::UInt v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  id v2 = v1;
  _CFObject.hash(into:)();
}

uint64_t static Font.PrivateTextStyle.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

Swift::Int Font.PrivateTextStyle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.PrivateTextStyle()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Font.PrivateTextStyle()
{
  Swift::UInt v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.PrivateTextStyle()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.PrivateTextStyle()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

Swift::Int Font.TextStyleProvider.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt64 v3 = *((void *)v0 + 1);
  int v4 = v0[16];
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
      Swift::UInt v1 = 1;
      break;
    case 2uLL:
      Swift::UInt v1 = 2;
      break;
    case 3uLL:
      Swift::UInt v1 = 3;
      break;
    case 4uLL:
      Swift::UInt v1 = 4;
      break;
    case 5uLL:
      Swift::UInt v1 = 5;
      break;
    case 6uLL:
      Swift::UInt v1 = 6;
      break;
    case 7uLL:
      Swift::UInt v1 = 7;
      break;
    case 8uLL:
      Swift::UInt v1 = 8;
      break;
    case 9uLL:
      Swift::UInt v1 = 9;
      break;
    case 0xAuLL:
      Swift::UInt v1 = 10;
      break;
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245EC36C8);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  if (v2 != 4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    if (!v4) {
      goto LABEL_14;
    }
LABEL_19:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v4) {
    goto LABEL_19;
  }
LABEL_14:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v3;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.TextStyleProvider()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt64 v3 = *((void *)v0 + 1);
  int v4 = v0[16];
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
      Swift::UInt v1 = 1;
      break;
    case 2uLL:
      Swift::UInt v1 = 2;
      break;
    case 3uLL:
      Swift::UInt v1 = 3;
      break;
    case 4uLL:
      Swift::UInt v1 = 4;
      break;
    case 5uLL:
      Swift::UInt v1 = 5;
      break;
    case 6uLL:
      Swift::UInt v1 = 6;
      break;
    case 7uLL:
      Swift::UInt v1 = 7;
      break;
    case 8uLL:
      Swift::UInt v1 = 8;
      break;
    case 9uLL:
      Swift::UInt v1 = 9;
      break;
    case 0xAuLL:
      Swift::UInt v1 = 10;
      break;
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245EC3870);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  if (v2 != 4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    if (!v4) {
      goto LABEL_14;
    }
LABEL_19:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v4) {
    goto LABEL_19;
  }
LABEL_14:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v3;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int Font.PrivateTextStyleProvider.hashValue.getter(uint64_t a1, void *a2, Swift::UInt64 a3, char a4)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  _CFObject.hash(into:)();
  if (!a2)
  {
    Hasher._combine(_:)(0);
    if ((a4 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  id v7 = a2;
  _CFObject.hash(into:)();

  if (a4) {
    goto LABEL_8;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = a3;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for FontProvider.resolveTraits(in:) in conformance Font.PrivateTextStyleProvider(__int16 *a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = *((unsigned __int8 *)v1 + 24);
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *((void *)a1 + 2);
  char v8 = *((unsigned char *)a1 + 24);
  char v9 = *((unsigned char *)a1 + 25);
  __int16 v11 = *a1;
  uint64_t v12 = v6;
  uint64_t v13 = v7;
  char v14 = v8;
  char v15 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(v7 + 48))(v3, v2, v4, v5, &v11);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.PrivateTextStyleProvider()
{
  return Font.PrivateTextStyleProvider.hashValue.getter(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.PrivateTextStyleProvider()
{
  Swift::UInt v1 = *(void **)(v0 + 8);
  Swift::UInt64 v2 = *(void *)(v0 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  _CFObject.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v4 = v1;
    _CFObject.hash(into:)();

    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(1u);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

SwiftUI::DynamicTypeSize_optional __swiftcall DynamicTypeSize.init(_:)(CFStringRef a1)
{
  int v3 = v1;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  id v4 = (id)a1;
  char v5 = static _CFObject.== infix(_:_:)();

  if (v5)
  {

    char v7 = 0;
  }
  else
  {
    char v8 = v4;
    char v9 = static _CFObject.== infix(_:_:)();

    if (v9)
    {

      char v7 = 1;
    }
    else
    {
      id v10 = v8;
      char v11 = static _CFObject.== infix(_:_:)();

      if (v11)
      {

        char v7 = 2;
      }
      else
      {
        uint64_t v12 = v10;
        char v13 = static _CFObject.== infix(_:_:)();

        if (v13)
        {

          char v7 = 3;
        }
        else
        {
          char v14 = v12;
          char v15 = static _CFObject.== infix(_:_:)();

          if (v15)
          {

            char v7 = 4;
          }
          else
          {
            unsigned int v16 = v14;
            char v17 = static _CFObject.== infix(_:_:)();

            if (v17)
            {

              char v7 = 5;
            }
            else
            {
              unint64_t v18 = v16;
              char v19 = static _CFObject.== infix(_:_:)();

              if (v19)
              {

                char v7 = 6;
              }
              else
              {
                unsigned int v20 = v18;
                char v21 = static _CFObject.== infix(_:_:)();

                if (v21)
                {

                  char v7 = 7;
                }
                else
                {
                  unint64_t v22 = v20;
                  char v23 = static _CFObject.== infix(_:_:)();

                  if (v23)
                  {

                    char v7 = 8;
                  }
                  else
                  {
                    float v24 = v22;
                    char v25 = static _CFObject.== infix(_:_:)();

                    if (v25)
                    {

                      char v7 = 9;
                    }
                    else
                    {
                      id v26 = v24;
                      char v27 = static _CFObject.== infix(_:_:)();

                      if (v27)
                      {

                        char v7 = 10;
                      }
                      else
                      {
                        id v28 = v26;
                        char v29 = static _CFObject.== infix(_:_:)();

                        if (v29) {
                          char v7 = 11;
                        }
                        else {
                          char v7 = 12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *int v3 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.TextStyle and conformance Font.TextStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.TextStyle and conformance Font.TextStyle;
  if (!lazy protocol witness table cache variable for type Font.TextStyle and conformance Font.TextStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.TextStyle and conformance Font.TextStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Font.TextStyle()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type [Font.TextStyle] and conformance [A], (void (*)(uint64_t))type metadata accessor for [Font.TextStyle]);
}

void type metadata accessor for [Font.TextStyle]()
{
  if (!lazy cache variable for type metadata for [Font.TextStyle])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Font.TextStyle]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.PrivateTextStyle and conformance Font.PrivateTextStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.PrivateTextStyle and conformance Font.PrivateTextStyle;
  if (!lazy protocol witness table cache variable for type Font.PrivateTextStyle and conformance Font.PrivateTextStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateTextStyle and conformance Font.PrivateTextStyle);
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.PrivateTextStyle()
{
  return &type metadata for Font.PrivateTextStyle;
}

void destroy for Font.PrivateTextStyleProvider(uint64_t a1)
{
  Swift::UInt64 v2 = *(void **)(a1 + 8);
}

uint64_t initializeWithCopy for Font.PrivateTextStyleProvider(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for Font.PrivateTextStyleProvider(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  char v7 = *(void **)(a1 + 8);
  char v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for Font.PrivateTextStyleProvider(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

void *type metadata accessor for Font.PrivateTextStyleProvider()
{
  return &unk_26FA765B0;
}

uint64_t getEnumTagSinglePayload for Font.TextStyleProvider(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 1) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 1);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 1) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.TextStyleProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 4;
    }
  }
  return result;
}

void *type metadata accessor for Font.TextStyleProvider()
{
  return &unk_26FA76218;
}

void static Font.caption3.getter()
{
}

void static Font.extraLargeTitle2.getter()
{
}

uint64_t EnvironmentValues.fontModifiers.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_bridgeObjectRetain();
    swift_release_n();
    return v5;
  }
}

uint64_t AnyFontModifier.isboldFontWeightModifier.getter()
{
  type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  uint64_t result = swift_dynamicCastClass();
  if (result) {
    return *(double *)(result + 16) >= 0.3;
  }
  return result;
}

uint64_t static AnyFontModifier.dynamic<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyDynamicFontModifier();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  return AnyDynamicFontModifier.__allocating_init(_:)((uint64_t)v6);
}

uint64_t Font.italic()(uint64_t a1)
{
  return Font.italic()(a1, (void (*)(void))type metadata accessor for FontBox<Font.StaticModifierProvider<Font.ItalicModifier>>);
}

uint64_t Font.modifier<A>(type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  type metadata accessor for Font.StaticModifierProvider();
  swift_getWitnessTable();
  uint64_t v2 = Font.init<A>(_:)((uint64_t)&v4);
  swift_retain();
  return v2;
}

uint64_t Font.lowercaseSmallCaps()(uint64_t a1)
{
  type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2461F2770;
  swift_retain();
  return v2;
}

uint64_t Font.uppercaseSmallCaps()(uint64_t a1)
{
  type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2461F2780;
  swift_retain();
  return v2;
}

void *Font.feature(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>();
  id v6 = (void *)swift_allocObject();
  uint64_t v6[2] = a3;
  v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  return v6;
}

uint64_t Font.monospacedDigit()(uint64_t a1)
{
  return Font.italic()(a1, (void (*)(void))type metadata accessor for FontBox<Font.StaticModifierProvider<Font.MonospacedDigitModifier>>);
}

uint64_t Font.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Font.ModifierProvider();
  double v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a3, v10);
  *(void *)uint64_t v12 = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v12[*(int *)(v9 + 36)], v8, a3);
  swift_getWitnessTable();
  uint64_t v13 = Font.init<A>(_:)((uint64_t)v12);
  swift_retain();
  return v13;
}

uint64_t Font.monospaced()(uint64_t a1)
{
  return Font.italic()(a1, (void (*)(void))type metadata accessor for FontBox<Font.StaticModifierProvider<Font.MonospacedModifier>>);
}

uint64_t Font._leading(_:)(unsigned char *a1, uint64_t a2)
{
  unsigned int v3 = 0x201u >> (8 * *a1);
  type metadata accessor for FontBox<Font.ModifierProvider<Font.LeadingModifier>>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

uint64_t Font.features(_:)(uint64_t a1, uint64_t a2)
{
  return Font.feature(_:)(a1, a2, (void (*)(void))type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>>);
}

uint64_t Font._stylisticAlternative(_:)(char *a1, uint64_t a2)
{
  return Font.leading(_:)(a1, a2, (void (*)(void))type metadata accessor for FontBox<Font.ModifierProvider<Font.StylisticAlternativeModifier>>);
}

uint64_t Font.variation(_:_:)(char *a1, uint64_t a2, double a3)
{
  char v5 = *a1;
  type metadata accessor for FontBox<Font.ModifierProvider<Font.VariationModifier>>();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 24) = v5;
  *(double *)(v6 + 32) = a3;
  swift_retain();
  return v6;
}

uint64_t Font.VariationAxisIdentifier.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result <= 1936486003)
  {
    if (result == 1769234796)
    {
      *a2 = 4;
      return result;
    }
    if (result == 1869640570)
    {
      *a2 = 3;
      return result;
    }
  }
  else
  {
    switch(result)
    {
      case 2003265652:
        *a2 = 0;
        return result;
      case 2003072104:
        *a2 = 1;
        return result;
      case 1936486004:
        *a2 = 2;
        return result;
    }
  }
  *a2 = 5;
  return result;
}

uint64_t Font.VariationAxisIdentifier.rawValue.getter()
{
  return *(void *)&aThgw[8 * *v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Font.VariationAxisIdentifier(char *a1, char *a2)
{
  return *(void *)&aThgw[8 * *a1] == *(void *)&aThgw[8 * *a2];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Font.VariationAxisIdentifier@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return Font.VariationAxisIdentifier.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Font.VariationAxisIdentifier(void *a1@<X8>)
{
  *a1 = *(void *)&aThgw[8 * *v1];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.VariationAxisIdentifier()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)&aThgw[8 * *v0]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Font.VariationAxisIdentifier()
{
  Hasher._combine(_:)(*(void *)&aThgw[8 * *v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.VariationAxisIdentifier()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)&aThgw[8 * *v0]);
  return Hasher._finalize()();
}

uint64_t Font.grade(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FontBox<Font.ModifierProvider<Font.GradeModifier>>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  swift_retain();
  return v4;
}

void Font.Weight.value.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Font.Weight.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double static Font.Weight.ultraLight.getter()
{
  return -0.8;
}

double static Font.Weight.light.getter()
{
  return -0.4;
}

double static Font.Weight.black.getter()
{
  return 0.62;
}

void Font.Weight.hash(into:)(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int Font.Weight.hashValue.getter(double a1)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double Font.Width.value.getter()
{
  return *(double *)v0;
}

uint64_t (*Font.Width.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double one-time initialization function for compressed()
{
  double result = *MEMORY[0x263F03C08];
  static Font.Width.compressed = *MEMORY[0x263F03C08];
  return result;
}

void Font.Width.init(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double static Font.Width.compressed.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for compressed, (double *)&static Font.Width.compressed, a1);
}

double one-time initialization function for condensed()
{
  double result = *MEMORY[0x263F03C10];
  static Font.Width.condensed = *MEMORY[0x263F03C10];
  return result;
}

double static Font.Width.condensed.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(one-time initialization token for condensed, (double *)&static Font.Width.condensed, a1);
}

uint64_t Font._StylisticAlternative.rawValue.getter()
{
  return *v0 + 1;
}

uint64_t Font._StylisticAlternative.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 0;
  char v3 = 2;
  switch(result)
  {
    case 1:
      goto LABEL_3;
    case 2:
      char v2 = 1;
LABEL_3:
      char v3 = v2;
      goto LABEL_4;
    case 3:
LABEL_4:
      *a2 = v3;
      break;
    case 4:
      *a2 = 3;
      break;
    case 5:
      *a2 = 4;
      break;
    case 6:
      *a2 = 5;
      break;
    case 7:
      *a2 = 6;
      break;
    case 8:
      *a2 = 7;
      break;
    case 9:
      *a2 = 8;
      break;
    case 10:
      *a2 = 9;
      break;
    case 11:
      *a2 = 10;
      break;
    case 12:
      *a2 = 11;
      break;
    case 13:
      *a2 = 12;
      break;
    case 14:
      *a2 = 13;
      break;
    case 15:
      *a2 = 14;
      break;
    case 16:
      *a2 = 15;
      break;
    case 17:
      *a2 = 16;
      break;
    case 18:
      *a2 = 17;
      break;
    case 19:
      *a2 = 18;
      break;
    case 20:
      *a2 = 19;
      break;
    default:
      *a2 = 20;
      break;
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Font._StylisticAlternative@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return Font._StylisticAlternative.init(rawValue:)(*a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font._StylisticAlternative()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0 + 1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font._StylisticAlternative()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0 + 1);
  return Hasher._finalize()();
}

BOOL static Font.Leading.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Font.Leading.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void static Font.BoldModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, int a2)
{
}

uint64_t static Font.BoldModifier.modify(traits:)(uint64_t result)
{
  *(void *)(result + 8) = 0x3FD999999999999ALL;
  return result;
}

uint64_t protocol witness for static StaticFontModifier.modify(traits:) in conformance Font.BoldModifier(uint64_t result)
{
  *(void *)(result + 8) = 0x3FD999999999999ALL;
  return result;
}

void static Font.ItalicModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, int a2)
{
}

void static Font.BoldModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, int a2, CTFontSymbolicTraits symTraitValue)
{
  CTFontDescriptorRef v4 = *a1;
  CTFontDescriptorRef CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, symTraitValue, symTraitValue);
  if (CopyWithSymbolicTraits)
  {
    uint64_t v6 = CopyWithSymbolicTraits;

    CTFontDescriptorRef v4 = v6;
  }
  *a1 = v4;
}

void protocol witness for static StaticFontModifier.modify(descriptor:in:) in conformance Font.ItalicModifier(CTFontDescriptorRef *a1)
{
  CTFontDescriptorRef v2 = *a1;
  CTFontDescriptorRef CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, 1u, 1u);
  if (CopyWithSymbolicTraits)
  {
    CTFontDescriptorRef v4 = CopyWithSymbolicTraits;

    CTFontDescriptorRef v2 = v4;
  }
  *a1 = v2;
}

void static Font.MonospacedDigitModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    char v3 = *a1;
    CFNumberRef isa = Int._bridgeToObjectiveC()().super.super.isa;
    CFNumberRef v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CTFontDescriptorRef CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void Font.DesignModifier.design.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void Font.DesignModifier.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Font.DesignModifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unsigned char *Font.LeadingModifier.leading.setter(unsigned char *result)
{
  *Swift::UInt64 v1 = *result;
  return result;
}

uint64_t (*Font.LeadingModifier.leading.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Font.FeatureSettingModifier.type.getter()
{
  return *(void *)v0;
}

uint64_t Font.FeatureSettingModifier.type.setter(uint64_t result)
{
  *Swift::UInt64 v1 = result;
  return result;
}

uint64_t (*Font.FeatureSettingModifier.type.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Font.FeatureSettingModifier.selector.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Font.FeatureSettingModifier.selector.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Font.FeatureSettingModifier.selector.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.FeatureSettingModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    char v3 = *a1;
    CFNumberRef isa = Int._bridgeToObjectiveC()().super.super.isa;
    CFNumberRef v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CTFontDescriptorRef CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void Font.FeatureSettingModifier.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static Font.FeatureSettingModifier.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int Font.FeatureSettingModifier.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Font.OpenTypeFeatureSettingModifier.settings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Font.OpenTypeFeatureSettingModifier.settings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt v1 = a1;
  return result;
}

uint64_t (*Font.OpenTypeFeatureSettingModifier.settings.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static Font.OpenTypeFeatureSettingModifier.== infix(_:_:)(void **a1, void **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int Font.OpenTypeFeatureSettingModifier.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v1 + 16));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.OpenTypeFeatureSettingModifier()
{
  return Hasher._finalize()();
}

uint64_t (*Font.FeatureDictionariesSettingModifier.features.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.FeatureDictionariesSettingModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    uint64_t v4 = *v2;
    type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, [CFDictionaryRef])>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, [CFDictionaryRef]), MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    uint64_t v6 = (void *)*MEMORY[0x263F03A98];
    *(void *)(inited + 32) = *MEMORY[0x263F03A98];
    *(void *)(inited + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v4;
    id v7 = v6;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v8 = *a1;
    type metadata accessor for CFStringRef(0);
    type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(0, (unint64_t *)&lazy cache variable for type metadata for [CFDictionaryRef], (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, type metadata accessor for CFStringRef);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v8, isa);

    *a1 = CopyWithAttributes;
  }
}

uint64_t Font.FeatureDictionariesSettingModifier.hash(into:)(uint64_t a1)
{
  unint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);

  return swift_bridgeObjectRelease();
}

uint64_t static Font.FeatureDictionariesSettingModifier.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int Font.FeatureDictionariesSettingModifier.hashValue.getter()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.FeatureDictionariesSettingModifier()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Font.FeatureDictionariesSettingModifier(uint64_t a1)
{
  unint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.FeatureDictionariesSettingModifier()
{
  Hasher.init(_seed:)();
  unint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.FeatureDictionariesSettingModifier(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

double Font.WeightModifier.weight.getter()
{
  return *(double *)v0;
}

uint64_t (*Font.WeightModifier.weight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Font.WeightModifier.modify(traits:)(uint64_t a1)
{
  double result = *v1;
  *(double *)(a1 + 8) = *v1;
  return result;
}

void Font.WeightModifier.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int Font.WeightModifier.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double Font.WidthModifier.width.getter()
{
  return *(double *)v0;
}

uint64_t (*Font.WidthModifier.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Font.WidthModifier.modify(traits:)(uint64_t result)
{
  *(void *)(result + 16) = *v1;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void Font.WidthModifier.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

BOOL static Font.WidthModifier.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for FontModifier.modify(traits:) in conformance Font.WidthModifier(uint64_t result)
{
  *(void *)(result + 16) = *v1;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

uint64_t (*Font.StylisticAlternativeModifier.alternative.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.StylisticAlternativeModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    unint64_t v3 = *a1;
    CFNumberRef isa = Int._bridgeToObjectiveC()().super.super.isa;
    CFNumberRef v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CTFontDescriptorRef CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void Font.StylisticAlternativeModifier.hash(into:)()
{
  Hasher._combine(_:)(*v0 + 1);
}

BOOL static Font.StylisticAlternativeModifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Font.StylisticAlternativeModifier.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance Font.StylisticAlternativeModifier(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    unint64_t v3 = *a1;
    CFNumberRef isa = Int._bridgeToObjectiveC()().super.super.isa;
    CFNumberRef v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CTFontDescriptorRef CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void Font.VariationModifier.identifier.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Font.VariationModifier.identifier.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Font.VariationModifier.identifier.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Font.VariationModifier.value.getter()
{
  return *(double *)(v0 + 8);
}

void Font.VariationModifier.value.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*Font.VariationModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.VariationModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    CGFloat v4 = *(double *)(v2 + 8);
    CFNumberRef v5 = *a1;
    CFNumberRef isa = Int._bridgeToObjectiveC()().super.super.isa;
    CTFontDescriptorRef CopyWithVariation = CTFontDescriptorCreateCopyWithVariation(v5, isa, v4);

    *a1 = CopyWithVariation;
  }
}

void Font.VariationModifier.hash(into:)()
{
  Swift::UInt64 v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*(void *)&aThgw[8 * *v0]);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

BOOL static Font.VariationModifier.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *(void *)&aThgw[8 * *(char *)a1] == *(void *)&aThgw[8 * *(char *)a2];
}

Swift::Int Font.VariationModifier.hashValue.getter()
{
  uint64_t v1 = *v0;
  Swift::UInt64 v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)&aThgw[8 * v1]);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance Font.VariationModifier(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    CGFloat v4 = *(double *)(v2 + 8);
    CFNumberRef v5 = *a1;
    CFNumberRef isa = Int._bridgeToObjectiveC()().super.super.isa;
    CTFontDescriptorRef CopyWithVariation = CTFontDescriptorCreateCopyWithVariation(v5, isa, v4);

    *a1 = CopyWithVariation;
  }
}

void protocol witness for Hashable.hash(into:) in conformance Font.VariationModifier()
{
  Swift::UInt64 v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*(void *)&aThgw[8 * *v0]);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.VariationModifier()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*(void *)&aThgw[8 * *v0]);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Font.VariationModifier(double *a1, double *a2)
{
  return a1[1] == a2[1] && *(void *)&aThgw[8 * *(char *)a1] == *(void *)&aThgw[8 * *(char *)a2];
}

uint64_t Font.GradeModifier.grade.getter()
{
  return *(void *)v0;
}

uint64_t Font.GradeModifier.grade.setter(uint64_t result)
{
  *Swift::UInt64 v1 = result;
  return result;
}

uint64_t (*Font.GradeModifier.grade.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.GradeModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    uint64_t v4 = *v2;
    CFNumberRef v5 = *a1;
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
    type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, [CFStringRef? : Int])>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, [CFStringRef? : Int]), MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    uint64_t v8 = (void *)*MEMORY[0x263F03B60];
    *(void *)(inited + 32) = *MEMORY[0x263F03B60];
    type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef?, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef?, Int), v6);
    uint64_t v9 = swift_initStackObject();
    *(_OWORD *)(v9 + 16) = xmmword_2461B9DC0;
    double v10 = (void *)*MEMORY[0x263F03AB8];
    *(void *)(v9 + 32) = *MEMORY[0x263F03AB8];
    *(void *)(v9 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v4;
    id v11 = v10;
    id v12 = v8;
    *(void *)(inited + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = specialized Dictionary.init(dictionaryLiteral:)(v9);
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    type metadata accessor for [CFStringRef? : Int](0);
    lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, type metadata accessor for CFStringRef);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v5, isa);

    *a1 = CopyWithAttributes;
  }
}

void Font.GradeModifier.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Font.GradeModifier.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int Font.GradeModifier.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int Font.ModifierProvider.hashValue.getter()
{
  Hasher.init(_seed:)();
  Font.ModifierProvider.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.ModifierProvider<A>()
{
  Hasher.init(_seed:)();
  Font.ModifierProvider.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int Font.StaticModifierProvider.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Swift::UInt64 v2 = *(void (**)(unsigned char *))(*(void *)a1 + 104);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.StaticModifierProvider<A>()
{
  return Font.StaticModifierProvider.hashValue.getter(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.StaticModifierProvider<A>()
{
  Hasher.init(_seed:)();
  Font.StaticModifierProvider.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t AnyFontModifier.isEqual(to:)()
{
  return 0;
}

uint64_t static AnyFontModifier.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a2) & 1;
}

uint64_t AnyDynamicFontModifier.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 136) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 152), a1);
  return v2;
}

uint64_t static AnyFontModifier.static<A>(_:)(uint64_t a1)
{
  if (one-time initialization token for staticModifiers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static AnyFontModifier.staticModifiers;
  if (*((void *)static AnyFontModifier.staticModifiers + 2)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(v2[7] + 8 * v3);
    swift_endAccess();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    type metadata accessor for AnyStaticFontModifier();
    uint64_t v5 = swift_allocObject();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = static AnyFontModifier.staticModifiers;
    static AnyFontModifier.staticModifiers = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, a1, isUniquelyReferenced_nonNull_native);
    static AnyFontModifier.staticModifiers = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v5;
}

uint64_t AnyStaticFontModifier.__allocating_init()()
{
  return swift_allocObject();
}

void AnyFontModifier.typeID.getter()
{
}

uint64_t AnyFontModifier.deinit()
{
  return v0;
}

uint64_t AnyFontModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Int AnyFontModifier.hashValue.getter()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 104))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for FontModifier.modify(descriptor:in:) in conformance AnyFontModifier()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t protocol witness for FontModifier.modify(traits:) in conformance AnyFontModifier()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyFontModifier()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 104))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyFontModifier()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyFontModifier()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 104))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyFontModifier(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))(*a2) & 1;
}

uint64_t AnyDynamicFontModifier.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 136) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 152));
}

uint64_t AnyDynamicFontModifier.init(_:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 136) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 152), a1);
  return v1;
}

uint64_t AnyDynamicFontModifier.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
  return v0;
}

uint64_t AnyStaticFontModifier.modify(traits:)()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 144) + 16))();
}

uint64_t AnyStaticFontModifier.typeID.getter()
{
  return *(void *)(*(void *)v0 + 136);
}

uint64_t AnyStaticFontModifier.deinit()
{
  return v0;
}

uint64_t EnvironmentValues.fontModifiers.setter(unint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void (*EnvironmentValues.fontModifiers.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v3[5] = 0;
  *uint64_t v3 = v5;
  return EnvironmentValues.fontModifiers.modify;
}

void EnvironmentValues.fontModifiers.modify(unint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)(*a1)[4];
  unint64_t v5 = **a1;
  uint64_t v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v7 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v8 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }

  free(v3);
}

void Font.Weight.codingProxy.getter(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void CodableFontWeight.init(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double CodableFontWeight.base.getter()
{
  return *(double *)v0;
}

void CodableFontWeight.base.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*CodableFontWeight.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableFontWeight.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  uint64_t v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t CodableFontWeight.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v5 = v7[6];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableFontWeight@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return CodableFontWeight.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableFontWeight(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  uint64_t v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t AttributeContainer.addFontModifier<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyDynamicFontModifier();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  AnyDynamicFontModifier.__allocating_init(_:)((uint64_t)v6);
  v12[0] = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  uint64_t v7 = v13;
  if (!v13) {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v7;
  uint64_t v8 = swift_retain();
  MEMORY[0x24C522D60](v8);
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  v12[-2] = v10;
  swift_getKeyPath();
  uint64_t v13 = v14;
  AttributeContainer.subscript.setter();
  return swift_release();
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>)()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.FontModifiersAttribute()
{
}

uint64_t AttributeContainer.addFontModifier<A>(_:)()
{
  type metadata accessor for AnyStaticFontModifier();
  swift_allocObject();
  swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  uint64_t v0 = v4;
  if (!v4) {
    uint64_t v0 = MEMORY[0x263F8EE78];
  }
  uint64_t v5 = v0;
  uint64_t v1 = swift_retain();
  MEMORY[0x24C522D60](v1);
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  swift_getKeyPath();
  AttributeContainer.subscript.setter();
  return swift_release();
}

void specialized static Font.MonospacedModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, char *a2)
{
  char v3 = *a2;
  char v4 = a2[1];
  long long v14 = *(_OWORD *)(a2 + 8);
  char v5 = a2[24];
  char v6 = a2[25];
  CTFontDescriptorRef v7 = *a1;
  CTFontDescriptorRef CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, 0x400u, 0x400u);
  if (CopyWithSymbolicTraits)
  {
    uint64_t v9 = CopyWithSymbolicTraits;
    if ((CTFontDescriptorGetSymbolicTraits() & 0x400) != 0)
    {

      *a1 = v9;
      return;
    }
  }
  if (CTFontDescriptorIsSystemUIFont())
  {
    LOBYTE(v15) = 3;
    Font.DesignModifier.modify(descriptor:in:)(a1);
  }
  else
  {
    CFTypeRef v10 = CTFontDescriptorCopyAttribute(v7, (CFStringRef)*MEMORY[0x263F03B28]);
    if (v10)
    {
      CFTypeRef v15 = v10;
      swift_dynamicCast();
    }
    CTFontDescriptorRef v11 = *a1;
    CTFontDescriptorGetWeight();
    double v13 = v12;

    *a1 = (CTFontDescriptorRef)CTFontDescriptorCreateForUIType();
    if (v13 != 0.0)
    {
      double v19 = v13;
      LOBYTE(v15) = v3;
      BYTE1(v15) = v4;
      long long v16 = v14;
      char v17 = v5;
      char v18 = v6;
      Font.WeightModifier.modify(descriptor:in:)(a1, (uint64_t)&v15);
    }
  }
}

void type metadata accessor for FontBox<Font.StaticModifierProvider<Font.ItalicModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.ItalicModifier>>)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.ItalicModifier>);
    lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(&lazy protocol witness table cache variable for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.ItalicModifier>);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.ItalicModifier>>);
    }
  }
}

void type metadata accessor for FontBox<Font.StaticModifierProvider<Font.MonospacedDigitModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.MonospacedDigitModifier>>)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.MonospacedDigitModifier>);
    lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(&lazy protocol witness table cache variable for type Font.StaticModifierProvider<Font.MonospacedDigitModifier> and conformance Font.StaticModifierProvider<A>, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.MonospacedDigitModifier>);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.MonospacedDigitModifier>>);
    }
  }
}

void type metadata accessor for FontBox<Font.StaticModifierProvider<Font.MonospacedModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.MonospacedModifier>>)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.MonospacedModifier>);
    lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(&lazy protocol witness table cache variable for type Font.StaticModifierProvider<Font.MonospacedModifier> and conformance Font.StaticModifierProvider<A>, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.MonospacedModifier>);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.MonospacedModifier>>);
    }
  }
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier, (uint64_t)&type metadata for Font.FeatureDictionariesSettingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.FeatureDictionariesSettingModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier, (uint64_t)&type metadata for Font.FeatureDictionariesSettingModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.StylisticAlternativeModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.StylisticAlternativeModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.StylisticAlternativeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier, (uint64_t)&type metadata for Font.StylisticAlternativeModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.StylisticAlternativeModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.StylisticAlternativeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier, (uint64_t)&type metadata for Font.StylisticAlternativeModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.StylisticAlternativeModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier;
  if (!lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier;
  if (!lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier;
  if (!lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.VariationModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.VariationModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.VariationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.VariationModifier and conformance Font.VariationModifier, (uint64_t)&type metadata for Font.VariationModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.VariationModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.VariationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.VariationModifier and conformance Font.VariationModifier, (uint64_t)&type metadata for Font.VariationModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.VariationModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.VariationModifier and conformance Font.VariationModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier;
  if (!lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier;
  if (!lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier;
  if (!lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.GradeModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.GradeModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.GradeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.GradeModifier and conformance Font.GradeModifier, (uint64_t)&type metadata for Font.GradeModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.GradeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.GradeModifier and conformance Font.GradeModifier, (uint64_t)&type metadata for Font.GradeModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.GradeModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.GradeModifier and conformance Font.GradeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier;
  if (!lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier;
  if (!lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier;
  if (!lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier);
  }
  return result;
}

void type metadata accessor for (CFStringRef, [CFDictionaryRef])()
{
  if (!lazy cache variable for type metadata for (CFStringRef, [CFDictionaryRef]))
  {
    type metadata accessor for CFStringRef(255);
    type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(255, (unint64_t *)&lazy cache variable for type metadata for [CFDictionaryRef], (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, MEMORY[0x263F8D488]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, [CFDictionaryRef]));
    }
  }
}

void type metadata accessor for (CFStringRef?, Int)()
{
  if (!lazy cache variable for type metadata for (CFStringRef?, Int))
  {
    type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(255, &lazy cache variable for type metadata for CFStringRef?, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef?, Int));
    }
  }
}

void sub_245EC7B0C()
{
}

uint64_t sub_245EC7B34()
{
  return 8;
}

uint64_t sub_245EC7B40()
{
  return swift_release();
}

uint64_t sub_245EC7B48(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_245EC7B58()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_245EC7B9C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.VariationAxisIdentifier and conformance Font.VariationAxisIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.VariationAxisIdentifier and conformance Font.VariationAxisIdentifier;
  if (!lazy protocol witness table cache variable for type Font.VariationAxisIdentifier and conformance Font.VariationAxisIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.VariationAxisIdentifier and conformance Font.VariationAxisIdentifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Weight and conformance Font.Weight()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.Weight and conformance Font.Weight;
  if (!lazy protocol witness table cache variable for type Font.Weight and conformance Font.Weight)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Weight and conformance Font.Weight);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Width and conformance Font.Width()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.Width and conformance Font.Width;
  if (!lazy protocol witness table cache variable for type Font.Width and conformance Font.Width)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Width and conformance Font.Width);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font._StylisticAlternative and conformance Font._StylisticAlternative()
{
  unint64_t result = lazy protocol witness table cache variable for type Font._StylisticAlternative and conformance Font._StylisticAlternative;
  if (!lazy protocol witness table cache variable for type Font._StylisticAlternative and conformance Font._StylisticAlternative)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font._StylisticAlternative and conformance Font._StylisticAlternative);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Leading and conformance Font.Leading()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.Leading and conformance Font.Leading;
  if (!lazy protocol witness table cache variable for type Font.Leading and conformance Font.Leading)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Leading and conformance Font.Leading);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font._Leading and conformance Font._Leading()
{
  unint64_t result = lazy protocol witness table cache variable for type Font._Leading and conformance Font._Leading;
  if (!lazy protocol witness table cache variable for type Font._Leading and conformance Font._Leading)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font._Leading and conformance Font._Leading);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.FeatureDictionariesSettingModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.StylisticAlternativeModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.VariationModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.VariationModifier and conformance Font.VariationModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.GradeModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.GradeModifier and conformance Font.GradeModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnyFontModifier(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier(&lazy protocol witness table cache variable for type AnyFontModifier and conformance AnyFontModifier, a2, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in AnyFontModifier(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier(&lazy protocol witness table cache variable for type AnyFontModifier and conformance AnyFontModifier, a2, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
}

unint64_t lazy protocol witness table accessor for type CodableFontWeight and conformance CodableFontWeight()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight;
  if (!lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight;
  if (!lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableFontWeight(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CodableFontWeight and conformance CodableFontWeight();
  unint64_t result = lazy protocol witness table accessor for type CodableFontWeight and conformance CodableFontWeight();
  *(void *)(a1 + 16) = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for Font.VariationAxisIdentifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EC83B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.VariationAxisIdentifier()
{
  return &type metadata for Font.VariationAxisIdentifier;
}

ValueMetadata *type metadata accessor for Font._Leading()
{
  return &type metadata for Font._Leading;
}

ValueMetadata *type metadata accessor for Font.BoldModifier()
{
  return &type metadata for Font.BoldModifier;
}

ValueMetadata *type metadata accessor for Font.ItalicModifier()
{
  return &type metadata for Font.ItalicModifier;
}

ValueMetadata *type metadata accessor for Font.MonospacedModifier()
{
  return &type metadata for Font.MonospacedModifier;
}

ValueMetadata *type metadata accessor for Font.MonospacedDigitModifier()
{
  return &type metadata for Font.MonospacedDigitModifier;
}

unsigned char *storeEnumTagSinglePayload for Font.DesignModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EC850CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.DesignModifier()
{
  return &type metadata for Font.DesignModifier;
}

ValueMetadata *type metadata accessor for Font.LeadingModifier()
{
  return &type metadata for Font.LeadingModifier;
}

ValueMetadata *type metadata accessor for Font.FeatureSettingModifier()
{
  return &type metadata for Font.FeatureSettingModifier;
}

ValueMetadata *type metadata accessor for Font.OpenTypeFeatureSettingModifier()
{
  return &type metadata for Font.OpenTypeFeatureSettingModifier;
}

ValueMetadata *type metadata accessor for Font.FeatureDictionariesSettingModifier()
{
  return &type metadata for Font.FeatureDictionariesSettingModifier;
}

ValueMetadata *type metadata accessor for Font.WeightModifier()
{
  return &type metadata for Font.WeightModifier;
}

ValueMetadata *type metadata accessor for Font.WidthModifier()
{
  return &type metadata for Font.WidthModifier;
}

uint64_t getEnumTagSinglePayload for Font._StylisticAlternative(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Font._StylisticAlternative(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *unint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EC8728);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.StylisticAlternativeModifier()
{
  return &type metadata for Font.StylisticAlternativeModifier;
}

uint64_t getEnumTagSinglePayload for Font.VariationModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && a1[16]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.VariationModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.VariationModifier()
{
  return &type metadata for Font.VariationModifier;
}

ValueMetadata *type metadata accessor for Font.GradeModifier()
{
  return &type metadata for Font.GradeModifier;
}

uint64_t dispatch thunk of FontModifier.modify(descriptor:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of FontModifier.modify(traits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static StaticFontModifier.modify(descriptor:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static StaticFontModifier.modify(traits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for AnyFontModifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyFontModifier);
}

uint64_t dispatch thunk of AnyFontModifier.modify(descriptor:in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of AnyFontModifier.modify(traits:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of AnyFontModifier.isEqual(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AnyFontModifier.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AnyFontModifier.typeID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AnyFontModifier.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t method lookup function for AnyDynamicFontModifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyDynamicFontModifier);
}

uint64_t dispatch thunk of AnyDynamicFontModifier.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

ValueMetadata *type metadata accessor for CodableFontWeight()
{
  return &type metadata for CodableFontWeight;
}

uint64_t getEnumTagSinglePayload for Font.ModifierProvider(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for Font.ModifierProvider(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x245EC8D7CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          unsigned int v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

void type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>()
{
  if (!lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>)
  {
    type metadata accessor for AttributeScopes.SwiftUIAttributes(255);
    unint64_t v0 = type metadata accessor for KeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>);
    }
  }
}

ValueMetadata *type metadata accessor for FontModifiersKey()
{
  return &type metadata for FontModifiersKey;
}

ValueMetadata *type metadata accessor for GradientBlurTextEffect()
{
  return &type metadata for GradientBlurTextEffect;
}

uint64_t closure #1 in GradientBlurTextEffect.apply(to:fragment:timing:state:context:in:)(double **a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  float v13 = a2;
  if (*((float *)*a1 + 12) == v13)
  {
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v37 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v38 = swift_retain();
    *a1 = (double *)GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v38, v37, 1, 0);
    swift_release();
  }
  *((float *)*a1 + 12) = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_3:
    uint64_t v14 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v15 = swift_retain();
    *a1 = (double *)GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v15, v14, 1, 0);
    swift_release();
  }
LABEL_4:
  uint64_t v16 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v17 = swift_retain();
  GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v17, v16, 0, 1);
  swift_retain();
  if (a3 > 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v18 = RBDrawingStateInit();
      swift_allocObject();
      uint64_t v19 = swift_retain();
      GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v19, v18, 1, 0);
      swift_release();
    }
    RBDrawingStateAddBlurFilter();
  }
  RBDrawingStateDrawDisplayList2();
  swift_release();
  RBDrawingStateClipLayer();
  swift_release();
  v47.origin.CGFloat x = CGRect.outset(by:)(a3, a3, a3, a3, a4, a5, a6, a7);
  CGFloat x = v47.origin.x;
  CGFloat y = v47.origin.y;
  CGFloat width = v47.size.width;
  CGFloat height = v47.size.height;
  float v24 = *a1;
  if (CGRectIsNull(v47))
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    unsigned __int8 v29 = 6;
  }
  else
  {
    unsigned __int8 v29 = 0;
    uint64_t v25 = *(void *)&x;
    uint64_t v26 = *(void *)&y;
    uint64_t v27 = *(void *)&width;
    uint64_t v28 = *(void *)&height;
  }
  v45[0] = v25;
  v45[1] = v26;
  v45[2] = v27;
  v45[3] = v28;
  unsigned __int8 v46 = v29;
  type metadata accessor for _ContiguousArrayStorage<Color>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  if (one-time initialization token for red != -1) {
    swift_once();
  }
  *(void *)(inited + 32) = static Color.red;
  uint64_t v31 = one-time initialization token for green;
  swift_retain();
  if (v31 != -1) {
    swift_once();
  }
  *(void *)(inited + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = static Color.green;
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v32 = specialized Gradient.init(colors:)(inited);
  v48.origin.CGFloat x = a4;
  v48.origin.CGFloat y = a5;
  v48.size.CGFloat width = a6;
  v48.size.CGFloat height = a7;
  CGFloat MinX = CGRectGetMinX(v48);
  v49.origin.CGFloat x = a4;
  v49.origin.CGFloat y = a5;
  v49.size.CGFloat width = a6;
  v49.size.CGFloat height = a7;
  CGFloat MinY = CGRectGetMinY(v49);
  v50.origin.CGFloat x = a4;
  v50.origin.CGFloat y = a5;
  v50.size.CGFloat width = a6;
  v50.size.CGFloat height = a7;
  CGFloat MaxX = CGRectGetMaxX(v50);
  v51.origin.CGFloat x = a4;
  v51.origin.CGFloat y = a5;
  v51.size.CGFloat width = a6;
  v51.size.CGFloat height = a7;
  v43[0] = v32;
  v43[1] = 0;
  *(CGFloat *)&v43[2] = MinX;
  *(CGFloat *)&v43[3] = MinY;
  *(CGFloat *)&v43[4] = MaxX;
  v43[5] = CGRectGetMaxY(v51);
  memset(&v43[6], 0, 24);
  char v44 = 5;
  uint64_t v39 = 256;
  long long v40 = 0u;
  long long v41 = 0u;
  char v42 = 0;
  GraphicsContext.draw(_:with:style:)((uint64_t)v45, (uint64_t)v43, (uint64_t)&v39, v24);
  outlined consume of Path.Storage(v25, v26, v27, v28, v29);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Text.Effect.Filter.apply(to:fragment:timing:state:context:in:) in conformance GradientBlurTextEffect(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, uint64_t *a6)
{
  return specialized GradientBlurTextEffect.apply(to:fragment:timing:state:context:in:)(a1, a4, a6, *v6);
}

double protocol witness for Text.Effect.Filter.drawingOutsets.getter in conformance GradientBlurTextEffect()
{
  return *(double *)v0;
}

unint64_t instantiation function for generic protocol witness table for GradientBlurTextEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GradientBlurTextEffect and conformance GradientBlurTextEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized GradientBlurTextEffect.apply(to:fragment:timing:state:context:in:)(uint64_t a1, double *a2, uint64_t *a3, double a4)
{
  CGFloat v5 = *(double *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v499 = *(void *)(a1 + 32);
  uint64_t v500 = *(void *)(a1 + 16);
  uint64_t v497 = *(void *)(a1 + 48);
  uint64_t v498 = *(void *)(a1 + 40);
  uint64_t v496 = *(void *)(a1 + 56);
  double v8 = a2[2];
  double v9 = a2[3];
  double v10 = a2[6];
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  uint64_t v12 = *a3;
  uint64_t v13 = *(void *)(*a3 + 16);
  objc_msgSend(*(id *)(v13 + 16), sel_deviceScale);
  objc_msgSend(v11, sel_setDeviceScale_);
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v12 + 40);
  if (v14 == 1)
  {
    uint64_t v15 = *(void *)(v13 + 48);
    uint64_t v16 = *(void *)(v13 + 56);
    swift_retain();
    swift_retain();
  }
  *(void *)&long long v593 = v15;
  *((void *)&v593 + 1) = v16;
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  id v17 = v11;
  outlined copy of EnvironmentValues?(v14);
  uint64_t v18 = specialized GraphicsContext.Storage.init(list:environment:)(v17, &v593);
  id v495 = v17;

  uint64_t v600 = v18;
  v601[0] = v500;
  v601[1] = v7;
  v601[2] = v499;
  v601[3] = v498;
  v601[4] = v497;
  v601[5] = v496;
  uint64_t v19 = *(void *)(v6 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = v19 - 1;
    for (uint64_t i = 32; ; i += 144)
    {
      long long v593 = *(_OWORD *)(v6 + i);
      long long v22 = *(_OWORD *)(v6 + i + 16);
      long long v23 = *(_OWORD *)(v6 + i + 32);
      long long v24 = *(_OWORD *)(v6 + i + 48);
      long long v597 = *(_OWORD *)(v6 + i + 64);
      long long v596 = v24;
      long long v595 = v23;
      long long v594 = v22;
      long long v25 = *(_OWORD *)(v6 + i + 80);
      long long v26 = *(_OWORD *)(v6 + i + 96);
      long long v27 = *(_OWORD *)(v6 + i + 112);
      *(_OWORD *)&v599.tCGFloat x = *(_OWORD *)(v6 + i + 128);
      *(_OWORD *)&v599.CGFloat c = v27;
      *(_OWORD *)&v599.CGFloat a = v26;
      long long v598 = v25;
      long long v591 = *(_OWORD *)(v6 + i + 80);
      CGAffineTransform v592 = *(CGAffineTransform *)(v6 + i + 96);
      *(_OWORD *)&v588.CGFloat c = *(_OWORD *)(v6 + i + 16);
      *(_OWORD *)&v588.tCGFloat x = *(_OWORD *)(v6 + i + 32);
      long long v589 = *(_OWORD *)(v6 + i + 48);
      long long v590 = *(_OWORD *)(v6 + i + 64);
      *(_OWORD *)&v588.CGFloat a = *(_OWORD *)(v6 + i);
      v583.CGFloat a = v5;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t *)&v583, v601, 0, 0, 1, &v600);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!v20) {
        break;
      }
      --v20;
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v17, sel_moveContents);
  if (v9 - v8 >= 0.0)
  {
    double v29 = (v9 - v8) / v10;
    double v28 = 0.0;
    if (v29 < 0.0) {
      goto LABEL_14;
    }
  }
  else
  {
    double v28 = 0.0;
    double v29 = 0.0 / v10;
    if (0.0 / v10 < 0.0) {
      goto LABEL_14;
    }
  }
  double v28 = 1.0;
  if (v29 <= 1.0) {
    double v28 = v29;
  }
LABEL_14:
  double v30 = *MEMORY[0x263F001A0];
  double b = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat v33 = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat v32 = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v34 = *(void *)(v6 + 16);
  if (v34)
  {
    double v489 = v28;
    uint64_t v35 = v6 + 32;
    v528 = (uint64_t *)(v499 + 40);
    uint64_t v518 = v499 + 32;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v36 = 0;
    CGFloat v37 = v30;
    CGFloat v38 = b;
    double r2 = v32;
    double v557 = v30;
    double v558 = b;
    double v39 = v33;
    double v559 = v33;
    uint64_t v506 = v34;
    uint64_t v505 = v6 + 32;
    do
    {
      char v44 = (long long *)(v35 + 144 * v36);
      long long v593 = *v44;
      long long v45 = v44[1];
      long long v46 = v44[2];
      long long v47 = v44[3];
      long long v597 = v44[4];
      long long v596 = v47;
      long long v595 = v46;
      long long v594 = v45;
      long long v48 = v44[5];
      long long v49 = v44[6];
      long long v50 = v44[7];
      *(_OWORD *)&v599.tCGFloat x = v44[8];
      *(_OWORD *)&v599.CGFloat c = v50;
      *(_OWORD *)&v599.CGFloat a = v49;
      long long v598 = v48;
      CGFloat v524 = v38;
      CGFloat v525 = v37;
      CGFloat v522 = v33;
      CGFloat v523 = v32;
      if (*((double *)&v48 + 1) <= 0.0009765625)
      {
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        CGFloat v40 = v30;
        CGFloat v41 = b;
        CGFloat v42 = v39;
        CGFloat v43 = r2;
      }
      else
      {
        uint64_t v511 = v36;
        long long v51 = v593;
        CGFloat v52 = *((double *)&v594 + 1);
        CGFloat v53 = *(double *)&v594;
        CGFloat v54 = *(double *)&v595;
        uint64_t v56 = *((void *)&v596 + 1);
        CFIndex v55 = v596;
        switch(v598 >> 5)
        {
          case 1:
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            swift_retain_n();
            int v58 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v51, *((CFIndex *)&v51 + 1));
            if (__OFSUB__(v56, v55)) {
              goto LABEL_296;
            }
            int v59 = v58;
            v602.location = v55;
            v602.length = v56 - v55;
            CGRect ImageBounds = CTRunGetImageBounds((CTRunRef)v58, 0, v602);
            CGFloat x = ImageBounds.origin.x;
            CGFloat y = ImageBounds.origin.y;
            CGFloat width = ImageBounds.size.width;
            CGFloat height = ImageBounds.size.height;

            v588.double b = 0.0;
            v588.CGFloat c = 0.0;
            v588.CGFloat a = 1.0;
            v588.CGFloat d = -1.0;
            v588.tCGFloat x = v53;
            v588.tCGFloat y = v52;
            v615.origin.CGFloat x = x;
            v615.origin.CGFloat y = y;
            v615.size.CGFloat width = width;
            v615.size.CGFloat height = height;
            CGRect v616 = CGRectApplyAffineTransform(v615, &v588);
            CGFloat v64 = v616.origin.x;
            CGFloat v65 = v616.origin.y;
            CGFloat v66 = v616.size.width;
            CGFloat v67 = v616.size.height;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            v617.origin.CGFloat x = v64;
            v617.origin.CGFloat y = v65;
            v617.size.CGFloat width = v66;
            v617.size.CGFloat height = v67;
            CGRect v618 = CGRectInset(v617, -1.0, -1.0);
            CGFloat v57 = v618.origin.x;
            double b = v618.origin.y;
            CGFloat v68 = v618.size.width;
            CGFloat v69 = v618.size.height;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            uint64_t v70 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
            goto LABEL_280;
          case 2:
            double v71 = r2;
            CGFloat v57 = v30;
            double v72 = v39;
            switch((char)v595)
            {
              case 2:
                CGFloat v57 = *(double *)(v593 + 16);
                double b = *(double *)(v593 + 24);
                CGFloat v68 = *(double *)(v593 + 32);
                CGFloat v69 = *(double *)(v593 + 40);
                v480 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                goto LABEL_279;
              case 3:
              case 4:
                goto LABEL_311;
              case 5:
                if (*(unsigned char *)(v593 + 16))
                {
                  if (*(unsigned char *)(v593 + 16) == 1)
                  {
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    RBPathGetBoundingRect();
                  }
                  else
                  {
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    MEMORY[0x24C526C90](v51 + 24);
                  }
LABEL_27:
                  CGFloat v57 = v74;
                  double b = v75;
                }
                else
                {
                  v481 = *(void **)(v593 + 24);
                  if (!v481) {
                    goto LABEL_310;
                  }
                  v482 = v481;
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                  swift_retain();
                  PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(v482);
                  CGFloat v57 = PathBoundingBox.origin.x;
                  double b = PathBoundingBox.origin.y;
                  CGFloat v68 = PathBoundingBox.size.width;
                  CGFloat v69 = PathBoundingBox.size.height;

                  v480 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_279:
                  uint64_t v70 = v480;
LABEL_280:
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v70);
                  double v71 = v69;
                  double v72 = v68;
                }
                break;
              case 6:
                goto LABEL_281;
              default:
                double b = *((double *)&v593 + 1);
                CGFloat v57 = *(double *)&v593;
                double v71 = *((double *)&v594 + 1);
                double v72 = *(double *)&v594;
                goto LABEL_281;
            }
            break;
          case 3:
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            LODWORD(v73) = DWORD2(v51);
            objc_msgSend((id)v51, sel_boundingRectWithProgress_, v73);
            goto LABEL_27;
          case 4:
            swift_beginAccess();
            double v76 = v39;
            if (specialized Set.contains(_:)(v51, *v528)) {
              goto LABEL_42;
            }
            swift_beginAccess();
            uint64_t v77 = *(void *)v518;
            if (*(void *)(*(void *)v518 + 16)
              && (uint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v51), (v79 & 1) != 0))
            {
              v80 = *(void **)(*(void *)(v77 + 56) + 8 * v78);
              swift_endAccess();
              v81 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v80) + 0xE0);
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              int v82 = v80;
              double v83 = v81();
              double v493 = v84;
              double v494 = v83;
              double v491 = v85;
              double v492 = v86;

              uint64_t v87 = *(void *)(*(void *)&v53 + 16);
              if (!v87) {
                goto LABEL_32;
              }
            }
            else
            {
              swift_endAccess();
LABEL_42:
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              swift_bridgeObjectRetain();
              double v493 = 0.0;
              double v494 = 0.0;
              double v491 = 0.0;
              double v492 = 0.0;
              uint64_t v87 = *(void *)(*(void *)&v53 + 16);
              if (!v87)
              {
LABEL_32:
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                CGFloat v88 = v30;
                CGFloat v89 = v39;
                CGFloat v90 = r2;
                goto LABEL_263;
              }
            }
            uint64_t v112 = *(void *)&v53 + 32;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            uint64_t v113 = 0;
            CGFloat v534 = b;
            CGFloat v535 = v30;
            CGFloat v532 = r2;
            CGFloat v533 = v39;
            uint64_t v512 = *(void *)&v53 + 32;
            uint64_t v513 = v87;
            do
            {
              v118 = (_OWORD *)(v112 + 144 * v113);
              *(_OWORD *)&v588.CGFloat a = *v118;
              long long v119 = v118[1];
              long long v120 = v118[2];
              long long v121 = v118[3];
              long long v590 = v118[4];
              long long v589 = v121;
              *(_OWORD *)&v588.tCGFloat x = v120;
              *(_OWORD *)&v588.CGFloat c = v119;
              long long v122 = v118[5];
              long long v123 = v118[6];
              long long v124 = v118[7];
              *(_OWORD *)&v592.tCGFloat x = v118[8];
              *(_OWORD *)&v592.CGFloat c = v124;
              *(_OWORD *)&v592.CGFloat a = v123;
              long long v591 = v122;
              if (*((double *)&v122 + 1) <= 0.0009765625)
              {
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                CGFloat v114 = v30;
                CGFloat v115 = b;
                CGFloat v116 = v76;
                CGFloat v117 = r2;
              }
              else
              {
                uint64_t v519 = v113;
                Swift::UInt64 v125 = *(void *)&v588.a;
                CFIndex v126 = *(void *)&v588.b;
                CGFloat c = v588.c;
                CGFloat d = v588.d;
                tCGFloat x = v588.tx;
                uint64_t v131 = *((void *)&v589 + 1);
                CFIndex v130 = v589;
                unsigned __int8 v132 = v591;
                switch(v591 >> 5)
                {
                  case 1:
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    swift_retain_n();
                    v143 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v125, v126);
                    if (__OFSUB__(v131, v130)) {
                      goto LABEL_293;
                    }
                    v144 = v143;
                    v604.location = v130;
                    v604.length = v131 - v130;
                    CGRect v627 = CTRunGetImageBounds((CTRunRef)v143, 0, v604);
                    CGFloat v145 = v627.origin.x;
                    CGFloat v146 = v627.origin.y;
                    CGFloat v147 = v627.size.width;
                    CGFloat v148 = v627.size.height;

                    v583.double b = 0.0;
                    v583.CGFloat c = 0.0;
                    v583.CGFloat a = 1.0;
                    v583.CGFloat d = -1.0;
                    v583.tCGFloat x = c;
                    v583.tCGFloat y = d;
                    v628.origin.CGFloat x = v145;
                    v628.origin.CGFloat y = v146;
                    v628.size.CGFloat width = v147;
                    v628.size.CGFloat height = v148;
                    CGRect v629 = CGRectApplyAffineTransform(v628, &v583);
                    CGFloat v149 = v629.origin.x;
                    CGFloat v150 = v629.origin.y;
                    CGFloat v151 = v629.size.width;
                    CGFloat v152 = v629.size.height;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    v630.origin.CGFloat x = v149;
                    v630.origin.CGFloat y = v150;
                    v630.size.CGFloat width = v151;
                    v630.size.CGFloat height = v152;
                    CGRect v631 = CGRectInset(v630, -1.0, -1.0);
                    CGFloat a = v631.origin.x;
                    double b = v631.origin.y;
                    CGFloat v153 = v631.size.width;
                    double v154 = v631.size.height;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    v155 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                    goto LABEL_259;
                  case 2:
                    double v154 = r2;
                    CGFloat a = v30;
                    CGFloat v135 = v559;
                    switch(LOBYTE(v588.tx))
                    {
                      case 2:
                        CGFloat a = *(double *)(*(void *)&v588.a + 16);
                        double b = *(double *)(*(void *)&v588.a + 24);
                        CGFloat v153 = *(double *)(*(void *)&v588.a + 32);
                        double v154 = *(double *)(*(void *)&v588.a + 40);
                        v464 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                        goto LABEL_258;
                      case 3:
                      case 4:
                        goto LABEL_311;
                      case 5:
                        if (*(unsigned char *)(*(void *)&v588.a + 16))
                        {
                          if (*(unsigned char *)(*(void *)&v588.a + 16) == 1)
                          {
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            RBPathGetBoundingRect();
                          }
                          else
                          {
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            MEMORY[0x24C526C90](v125 + 24);
                          }
LABEL_59:
                          CGFloat a = v157;
                          double b = v158;
                          double v154 = v159;
                        }
                        else
                        {
                          v467 = *(void **)(*(void *)&v588.a + 24);
                          if (!v467) {
                            goto LABEL_309;
                          }
                          v468 = v467;
                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                          swift_retain();
                          CGRect v708 = CGPathGetPathBoundingBox(v468);
                          CGFloat a = v708.origin.x;
                          double b = v708.origin.y;
                          CGFloat v153 = v708.size.width;
                          double v154 = v708.size.height;

                          v464 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_258:
                          v155 = v464;
LABEL_259:
                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v155);
                          CGFloat v135 = v153;
                        }
                        break;
                      case 6:
                        goto LABEL_260;
                      default:
                        CGFloat a = v588.a;
                        double b = v588.b;
                        CGFloat v135 = v588.c;
                        double v154 = v588.d;
                        goto LABEL_260;
                    }
                    goto LABEL_260;
                  case 3:
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    LODWORD(v156) = v126;
                    objc_msgSend((id)v125, sel_boundingRectWithProgress_, v156);
                    goto LABEL_59;
                  case 4:
                    uint64_t v551 = *((void *)&v590 + 1);
                    uint64_t v554 = v590;
                    tCGFloat y = v588.ty;
                    uint64_t v136 = *v528;
                    if (*(void *)(*v528 + 16)
                      && (Hasher.init(_seed:)(),
                          Hasher._combine(_:)(v125),
                          Swift::Int v137 = Hasher._finalize()(),
                          uint64_t v138 = -1 << *(unsigned char *)(v136 + 32),
                          unint64_t v139 = v137 & ~v138,
                          uint64_t v140 = v136 + 56,
                          ((*(void *)(v136 + 56 + ((v139 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v139) & 1) != 0))
                    {
                      uint64_t v141 = *(void *)(v136 + 48);
                      if (*(void *)(v141 + 8 * v139) == v125)
                      {
                        uint64_t v142 = *(void *)&ty;
                        goto LABEL_66;
                      }
                      uint64_t v465 = ~v138;
                      unint64_t v466 = (v139 + 1) & v465;
                      uint64_t v142 = *(void *)&ty;
                      if ((*(void *)(v140 + ((v466 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v466))
                      {
                        while (*(void *)(v141 + 8 * v466) != v125)
                        {
                          unint64_t v466 = (v466 + 1) & v465;
                          if (((*(void *)(v140 + ((v466 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v466) & 1) == 0) {
                            goto LABEL_61;
                          }
                        }
                        goto LABEL_66;
                      }
                    }
                    else
                    {
                      uint64_t v142 = *(void *)&ty;
                    }
LABEL_61:
                    swift_beginAccess();
                    uint64_t v160 = *(void *)v518;
                    if (*(void *)(*(void *)v518 + 16))
                    {
                      uint64_t v161 = specialized __RawDictionaryStorage.find<A>(_:)(v125);
                      if (v162)
                      {
                        v163 = *(void **)(*(void *)(v160 + 56) + 8 * v161);
                        swift_endAccess();
                        v164 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v163) + 0xE0);
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        v165 = v163;
                        double v166 = v164();
                        double v503 = v167;
                        double v504 = v166;
                        double v501 = v168;
                        double v502 = v169;

                        uint64_t v170 = *(void *)(*(void *)&c + 16);
                        if (!v170) {
                          goto LABEL_64;
                        }
                        goto LABEL_67;
                      }
                    }
                    swift_endAccess();
LABEL_66:
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v125, v126, *(uint64_t *)&c, *(uint64_t *)&d, LOBYTE(tx), v142, v130, v131, v554, v551, v132);
                    double v503 = 0.0;
                    double v504 = 0.0;
                    double v501 = 0.0;
                    double v502 = 0.0;
                    uint64_t v170 = *(void *)(*(void *)&c + 16);
                    if (!v170)
                    {
LABEL_64:
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                      CGFloat v171 = v30;
                      CGFloat v172 = v76;
                      double v154 = r2;
                      goto LABEL_230;
                    }
LABEL_67:
                    uint64_t v173 = *(void *)&c + 32;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    uint64_t v174 = 0;
                    CGFloat v539 = b;
                    CGFloat v540 = v30;
                    CGFloat v537 = r2;
                    CGFloat v538 = v76;
                    uint64_t v520 = *(void *)&c + 32;
                    uint64_t v521 = v170;
                    do
                    {
                      v179 = (_OWORD *)(v173 + 144 * v174);
                      *(_OWORD *)&v583.CGFloat a = *v179;
                      long long v180 = v179[1];
                      long long v181 = v179[2];
                      long long v182 = v179[3];
                      long long v585 = v179[4];
                      long long v584 = v182;
                      *(_OWORD *)&v583.tCGFloat x = v181;
                      *(_OWORD *)&v583.CGFloat c = v180;
                      long long v183 = v179[5];
                      long long v184 = v179[6];
                      long long v185 = v179[7];
                      *(_OWORD *)&v587.tCGFloat x = v179[8];
                      *(_OWORD *)&v587.CGFloat c = v185;
                      *(_OWORD *)&v587.CGFloat a = v184;
                      long long v586 = v183;
                      if (*((double *)&v183 + 1) <= 0.0009765625)
                      {
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        CGFloat v175 = v30;
                        CGFloat v176 = b;
                        CGFloat v177 = v76;
                        CGFloat v178 = r2;
                      }
                      else
                      {
                        uint64_t v529 = v174;
                        Swift::UInt64 v186 = *(void *)&v583.a;
                        CFIndex v187 = *(void *)&v583.b;
                        CGFloat v188 = v583.c;
                        CGFloat v189 = v583.d;
                        CGFloat v190 = v583.tx;
                        uint64_t v192 = *((void *)&v584 + 1);
                        CFIndex v191 = v584;
                        unsigned __int8 v193 = v586;
                        switch(v586 >> 5)
                        {
                          case 1:
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            swift_retain_n();
                            v226 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v186, v187);
                            if (__OFSUB__(v192, v191)) {
                              goto LABEL_290;
                            }
                            v227 = v226;
                            v606.location = v191;
                            v606.length = v192 - v191;
                            CGRect v640 = CTRunGetImageBounds((CTRunRef)v226, 0, v606);
                            CGFloat v228 = v640.origin.x;
                            CGFloat v229 = v640.origin.y;
                            CGFloat v230 = v640.size.width;
                            CGFloat v231 = v640.size.height;

                            v578.double b = 0.0;
                            v578.CGFloat c = 0.0;
                            v578.CGFloat a = 1.0;
                            v578.CGFloat d = -1.0;
                            v578.tCGFloat x = v188;
                            v578.tCGFloat y = v189;
                            v641.origin.CGFloat x = v228;
                            v641.origin.CGFloat y = v229;
                            v641.size.CGFloat width = v230;
                            v641.size.CGFloat height = v231;
                            CGRect v642 = CGRectApplyAffineTransform(v641, &v578);
                            CGFloat v232 = v642.origin.x;
                            CGFloat v233 = v642.origin.y;
                            CGFloat v234 = v642.size.width;
                            CGFloat v235 = v642.size.height;
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            v643.origin.CGFloat x = v232;
                            v643.origin.CGFloat y = v233;
                            v643.size.CGFloat width = v234;
                            v643.size.CGFloat height = v235;
                            CGRect v644 = CGRectInset(v643, -1.0, -1.0);
                            CGFloat v194 = v644.origin.x;
                            double b = v644.origin.y;
                            CGFloat v225 = v644.size.width;
                            double v196 = v644.size.height;
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            v236 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                            goto LABEL_216;
                          case 2:
                            switch(LOBYTE(v583.tx))
                            {
                              case 2:
                                CGFloat v194 = *(double *)(*(void *)&v583.a + 16);
                                double b = *(double *)(*(void *)&v583.a + 24);
                                CGFloat v225 = *(double *)(*(void *)&v583.a + 32);
                                double v196 = *(double *)(*(void *)&v583.a + 40);
                                goto LABEL_214;
                              case 3:
                              case 4:
                                goto LABEL_311;
                              case 5:
                                if (*(unsigned char *)(*(void *)&v583.a + 16))
                                {
                                  if (*(unsigned char *)(*(void *)&v583.a + 16) == 1)
                                  {
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    RBPathGetBoundingRect();
                                  }
                                  else
                                  {
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    MEMORY[0x24C526C90](v186 + 24);
                                  }
LABEL_90:
                                  CGFloat v194 = v238;
                                  double b = v239;
                                  double v196 = v240;
                                }
                                else
                                {
                                  v433 = *(void **)(*(void *)&v583.a + 24);
                                  if (!v433) {
                                    goto LABEL_308;
                                  }
                                  v434 = v433;
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  swift_retain();
                                  CGRect v697 = CGPathGetPathBoundingBox(v434);
                                  CGFloat v194 = v697.origin.x;
                                  double b = v697.origin.y;
                                  CGFloat v225 = v697.size.width;
                                  double v196 = v697.size.height;

                                  v427 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_215:
                                  v236 = v427;
LABEL_216:
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v236);
                                  double v195 = v225;
                                }
                                break;
                              case 6:
                                goto LABEL_91;
                              default:
                                CGFloat v194 = v583.a;
                                double b = v583.b;
                                CGFloat v225 = v583.c;
                                double v196 = v583.d;
LABEL_214:
                                v427 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                                goto LABEL_215;
                            }
                            goto LABEL_217;
                          case 3:
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            LODWORD(v237) = v187;
                            objc_msgSend((id)v186, sel_boundingRectWithProgress_, v237);
                            goto LABEL_90;
                          case 4:
                            uint64_t v552 = *((void *)&v585 + 1);
                            uint64_t v555 = v585;
                            CGFloat v562 = v583.ty;
                            uint64_t v218 = *v528;
                            if (*(void *)(*v528 + 16)
                              && (Hasher.init(_seed:)(),
                                  Hasher._combine(_:)(v186),
                                  Swift::Int v219 = Hasher._finalize()(),
                                  uint64_t v220 = -1 << *(unsigned char *)(v218 + 32),
                                  unint64_t v221 = v219 & ~v220,
                                  uint64_t v222 = v218 + 56,
                                  ((*(void *)(v218 + 56 + ((v221 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v221) & 1) != 0))
                            {
                              uint64_t v223 = *(void *)(v218 + 48);
                              if (*(void *)(v223 + 8 * v221) == v186)
                              {
                                uint64_t v224 = *(void *)&v562;
                                goto LABEL_98;
                              }
                              uint64_t v431 = ~v220;
                              unint64_t v432 = (v221 + 1) & v431;
                              uint64_t v224 = *(void *)&v562;
                              if ((*(void *)(v222 + ((v432 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v432))
                              {
                                while (*(void *)(v223 + 8 * v432) != v186)
                                {
                                  unint64_t v432 = (v432 + 1) & v431;
                                  if (((*(void *)(v222 + ((v432 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v432) & 1) == 0) {
                                    goto LABEL_93;
                                  }
                                }
                                goto LABEL_98;
                              }
                            }
                            else
                            {
                              uint64_t v224 = *(void *)&v562;
                            }
LABEL_93:
                            swift_beginAccess();
                            uint64_t v241 = *(void *)v518;
                            if (*(void *)(*(void *)v518 + 16))
                            {
                              uint64_t v242 = specialized __RawDictionaryStorage.find<A>(_:)(v186);
                              if (v243)
                              {
                                v244 = *(void **)(*(void *)(v241 + 56) + 8 * v242);
                                swift_endAccess();
                                v245 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v244) + 0xE0);
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                v246 = v244;
                                double v247 = v245();
                                double v509 = v248;
                                double v510 = v247;
                                double v507 = v249;
                                double v508 = v250;

                                uint64_t v251 = *(void *)(*(void *)&v188 + 16);
                                if (!v251) {
                                  goto LABEL_96;
                                }
                                goto LABEL_99;
                              }
                            }
                            swift_endAccess();
LABEL_98:
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v186, v187, *(uint64_t *)&v188, *(uint64_t *)&v189, LOBYTE(v190), v224, v191, v192, v555, v552, v193);
                            double v509 = 0.0;
                            double v510 = 0.0;
                            double v507 = 0.0;
                            double v508 = 0.0;
                            uint64_t v251 = *(void *)(*(void *)&v188 + 16);
                            if (!v251)
                            {
LABEL_96:
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                              CGFloat v194 = v30;
                              CGFloat v252 = v76;
                              CGFloat v253 = r2;
                              goto LABEL_204;
                            }
LABEL_99:
                            uint64_t v254 = *(void *)&v188 + 32;
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            uint64_t v255 = 0;
                            CGFloat v556 = v30;
                            CGFloat v553 = b;
                            CGFloat v550 = v76;
                            CGFloat r1 = r2;
                            uint64_t v530 = *(void *)&v188 + 32;
                            uint64_t v531 = v251;
                            do
                            {
                              v260 = (_OWORD *)(v254 + 144 * v255);
                              *(_OWORD *)&v578.CGFloat a = *v260;
                              long long v261 = v260[1];
                              long long v262 = v260[2];
                              long long v263 = v260[3];
                              long long v580 = v260[4];
                              long long v579 = v263;
                              *(_OWORD *)&v578.tCGFloat x = v262;
                              *(_OWORD *)&v578.CGFloat c = v261;
                              long long v264 = v260[5];
                              long long v265 = v260[6];
                              long long v266 = v260[7];
                              *(_OWORD *)&v582.tCGFloat x = v260[8];
                              *(_OWORD *)&v582.CGFloat c = v266;
                              *(_OWORD *)&v582.CGFloat a = v265;
                              long long v581 = v264;
                              if (*((double *)&v264 + 1) <= 0.0009765625)
                              {
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                CGFloat v256 = v30;
                                CGFloat v257 = b;
                                CGFloat v258 = v76;
                                CGFloat v259 = r2;
                              }
                              else
                              {
                                uint64_t v536 = v255;
                                Swift::UInt64 v267 = *(void *)&v578.a;
                                CFIndex v268 = *(void *)&v578.b;
                                CGFloat v269 = v578.c;
                                CGFloat v270 = v578.d;
                                CGFloat v271 = v578.tx;
                                uint64_t v273 = *((void *)&v579 + 1);
                                CFIndex v272 = v579;
                                unsigned __int8 v274 = v581;
                                switch(v581 >> 5)
                                {
                                  case 1:
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    swift_retain_n();
                                    v286 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v267, v268);
                                    if (__OFSUB__(v273, v272)) {
                                      goto LABEL_287;
                                    }
                                    v287 = v286;
                                    v607.location = v272;
                                    v607.length = v273 - v272;
                                    CGRect v647 = CTRunGetImageBounds((CTRunRef)v286, 0, v607);
                                    CGFloat v288 = v647.origin.x;
                                    CGFloat v289 = v647.origin.y;
                                    CGFloat v290 = v647.size.width;
                                    CGFloat v291 = v647.size.height;

                                    v573.double b = 0.0;
                                    v573.CGFloat c = 0.0;
                                    v573.CGFloat a = 1.0;
                                    v573.CGFloat d = -1.0;
                                    v573.tCGFloat x = v269;
                                    v573.tCGFloat y = v270;
                                    v648.origin.CGFloat x = v288;
                                    v648.origin.CGFloat y = v289;
                                    v648.size.CGFloat width = v290;
                                    v648.size.CGFloat height = v291;
                                    CGRect v649 = CGRectApplyAffineTransform(v648, &v573);
                                    CGFloat v292 = v649.origin.x;
                                    CGFloat v293 = v649.origin.y;
                                    CGFloat v294 = v649.size.width;
                                    CGFloat v295 = v649.size.height;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    v650.origin.CGFloat x = v292;
                                    v650.origin.CGFloat y = v293;
                                    v650.size.CGFloat width = v294;
                                    v650.size.CGFloat height = v295;
                                    CGRect v651 = CGRectInset(v650, -1.0, -1.0);
                                    double v283 = v651.origin.x;
                                    double v284 = v651.origin.y;
                                    double v285 = v651.size.width;
                                    double v282 = v651.size.height;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    v296 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                                    goto LABEL_200;
                                  case 2:
                                    double v282 = r2;
                                    double v283 = v30;
                                    double v284 = b;
                                    double v285 = v76;
                                    switch(LOBYTE(v578.tx))
                                    {
                                      case 2:
                                        double v283 = *(double *)(*(void *)&v578.a + 16);
                                        double v284 = *(double *)(*(void *)&v578.a + 24);
                                        double v285 = *(double *)(*(void *)&v578.a + 32);
                                        double v282 = *(double *)(*(void *)&v578.a + 40);
                                        v418 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                                        goto LABEL_199;
                                      case 3:
                                      case 4:
                                        goto LABEL_311;
                                      case 5:
                                        if (*(unsigned char *)(*(void *)&v578.a + 16))
                                        {
                                          if (*(unsigned char *)(*(void *)&v578.a + 16) == 1)
                                          {
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            RBPathGetBoundingRect();
                                          }
                                          else
                                          {
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            MEMORY[0x24C526C90](v267 + 24);
                                          }
LABEL_115:
                                          double v283 = v298;
                                          double v284 = v299;
                                          double v285 = v300;
                                          double v282 = v301;
                                        }
                                        else
                                        {
                                          v421 = *(void **)(*(void *)&v578.a + 24);
                                          if (!v421) {
                                            goto LABEL_307;
                                          }
                                          v422 = v421;
                                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                          swift_retain();
                                          CGRect v688 = CGPathGetPathBoundingBox(v422);
                                          double v283 = v688.origin.x;
                                          double v284 = v688.origin.y;
                                          double v285 = v688.size.width;
                                          double v282 = v688.size.height;

                                          v418 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_199:
                                          v296 = v418;
LABEL_200:
                                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v296);
                                        }
                                        break;
                                      case 6:
                                        goto LABEL_201;
                                      default:
                                        double v283 = v578.a;
                                        double v284 = v578.b;
                                        double v285 = v578.c;
                                        double v282 = v578.d;
                                        goto LABEL_201;
                                    }
                                    goto LABEL_201;
                                  case 3:
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    LODWORD(v297) = v268;
                                    objc_msgSend((id)v267, sel_boundingRectWithProgress_, v297);
                                    goto LABEL_115;
                                  case 4:
                                    uint64_t v545 = *((void *)&v580 + 1);
                                    uint64_t v547 = v580;
                                    CGFloat v563 = v578.ty;
                                    uint64_t v275 = *v528;
                                    if (*(void *)(*v528 + 16)
                                      && (Hasher.init(_seed:)(),
                                          Hasher._combine(_:)(v267),
                                          Swift::Int v276 = Hasher._finalize()(),
                                          uint64_t v277 = -1 << *(unsigned char *)(v275 + 32),
                                          unint64_t v278 = v276 & ~v277,
                                          uint64_t v279 = v275 + 56,
                                          ((*(void *)(v275 + 56 + ((v278 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v278) & 1) != 0))
                                    {
                                      uint64_t v280 = *(void *)(v275 + 48);
                                      if (*(void *)(v280 + 8 * v278) == v267)
                                      {
                                        uint64_t v281 = *(void *)&v563;
                                        goto LABEL_122;
                                      }
                                      uint64_t v419 = ~v277;
                                      unint64_t v420 = (v278 + 1) & v419;
                                      uint64_t v281 = *(void *)&v563;
                                      if ((*(void *)(v279 + ((v420 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v420))
                                      {
                                        while (*(void *)(v280 + 8 * v420) != v267)
                                        {
                                          unint64_t v420 = (v420 + 1) & v419;
                                          if (((*(void *)(v279 + ((v420 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v420) & 1) == 0) {
                                            goto LABEL_117;
                                          }
                                        }
                                        goto LABEL_122;
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v281 = *(void *)&v563;
                                    }
LABEL_117:
                                    swift_beginAccess();
                                    uint64_t v302 = *(void *)v518;
                                    if (*(void *)(*(void *)v518 + 16))
                                    {
                                      uint64_t v303 = specialized __RawDictionaryStorage.find<A>(_:)(v267);
                                      if (v304)
                                      {
                                        v305 = *(void **)(*(void *)(v302 + 56) + 8 * v303);
                                        swift_endAccess();
                                        v306 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v305) + 0xE0);
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        v307 = v305;
                                        double v308 = v306();
                                        double v516 = v309;
                                        double v517 = v308;
                                        double v514 = v310;
                                        double v515 = v311;

                                        uint64_t v312 = *(void *)(*(void *)&v269 + 16);
                                        if (!v312) {
                                          goto LABEL_120;
                                        }
                                        goto LABEL_123;
                                      }
                                    }
                                    swift_endAccess();
LABEL_122:
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v267, v268, *(uint64_t *)&v269, *(uint64_t *)&v270, LOBYTE(v271), v281, v272, v273, v547, v545, v274);
                                    double v516 = 0.0;
                                    double v517 = 0.0;
                                    double v514 = 0.0;
                                    double v515 = 0.0;
                                    uint64_t v312 = *(void *)(*(void *)&v269 + 16);
                                    if (!v312)
                                    {
LABEL_120:
                                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                      double v283 = v30;
                                      double v284 = b;
                                      double v285 = v76;
                                      double v282 = r2;
                                      goto LABEL_174;
                                    }
LABEL_123:
                                    uint64_t v313 = *(void *)&v269 + 32;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    uint64_t v314 = 0;
                                    double v283 = v30;
                                    double v284 = b;
                                    double v285 = v76;
                                    double v282 = r2;
                                    uint64_t v541 = *(void *)&v269 + 32;
                                    uint64_t v542 = v312;
                                    do
                                    {
                                      v319 = (_OWORD *)(v313 + 144 * v314);
                                      *(_OWORD *)&v573.CGFloat a = *v319;
                                      long long v320 = v319[1];
                                      long long v321 = v319[2];
                                      long long v322 = v319[4];
                                      long long v574 = v319[3];
                                      long long v575 = v322;
                                      *(_OWORD *)&v573.CGFloat c = v320;
                                      *(_OWORD *)&v573.tCGFloat x = v321;
                                      long long v323 = v319[5];
                                      long long v324 = v319[6];
                                      long long v325 = v319[7];
                                      *(_OWORD *)&v577.tCGFloat x = v319[8];
                                      *(_OWORD *)&v577.CGFloat c = v325;
                                      long long v576 = v323;
                                      *(_OWORD *)&v577.CGFloat a = v324;
                                      if (*((double *)&v323 + 1) <= 0.0009765625)
                                      {
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        CGFloat v315 = v30;
                                        CGFloat v316 = b;
                                        CGFloat v317 = v76;
                                        CGFloat v318 = r2;
                                      }
                                      else
                                      {
                                        uint64_t v326 = *(void *)&v573.a;
                                        CFIndex v327 = *(void *)&v573.b;
                                        CGFloat v328 = v573.c;
                                        CGFloat v564 = v573.d;
                                        CGFloat v329 = v573.tx;
                                        uint64_t v331 = *((void *)&v574 + 1);
                                        CFIndex v330 = v574;
                                        double v548 = v283;
                                        double v546 = v284;
                                        double v544 = v285;
                                        double v543 = v282;
                                        switch(v576 >> 5)
                                        {
                                          case 1:
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            swift_retain_n();
                                            v351 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v326, v327);
                                            if (__OFSUB__(v331, v330))
                                            {
                                              __break(1u);
LABEL_287:
                                              __break(1u);
LABEL_288:
                                              __break(1u);
                                              goto LABEL_289;
                                            }
                                            v352 = v351;
                                            v608.location = v330;
                                            v608.length = v331 - v330;
                                            CGRect v654 = CTRunGetImageBounds((CTRunRef)v351, 0, v608);
                                            CGFloat v353 = v654.origin.x;
                                            CGFloat v354 = v654.origin.y;
                                            CGFloat v355 = v654.size.width;
                                            CGFloat v356 = v654.size.height;

                                            v566.double b = 0.0;
                                            v566.CGFloat c = 0.0;
                                            v566.CGFloat a = 1.0;
                                            v566.CGFloat d = -1.0;
                                            v566.tCGFloat x = v328;
                                            v566.tCGFloat y = v564;
                                            v655.origin.CGFloat x = v353;
                                            v655.origin.CGFloat y = v354;
                                            v655.size.CGFloat width = v355;
                                            v655.size.CGFloat height = v356;
                                            CGRect v656 = CGRectApplyAffineTransform(v655, &v566);
                                            CGFloat v357 = v656.origin.x;
                                            CGFloat v358 = v656.origin.y;
                                            CGFloat v359 = v656.size.width;
                                            CGFloat v360 = v656.size.height;
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            v657.origin.CGFloat x = v357;
                                            v657.origin.CGFloat y = v358;
                                            v657.size.CGFloat width = v359;
                                            v657.size.CGFloat height = v360;
                                            CGRect v658 = CGRectInset(v657, -1.0, -1.0);
                                            double v30 = v658.origin.x;
                                            double b = v658.origin.y;
                                            double v332 = v658.size.width;
                                            double v345 = v658.size.height;
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            v361 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_170:
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v361);
                                            goto LABEL_171;
                                          case 2:
                                            double v345 = r2;
                                            double v332 = v76;
                                            switch(LOBYTE(v573.tx))
                                            {
                                              case 2:
                                                double v30 = *(double *)(*(void *)&v573.a + 16);
                                                double b = *(double *)(*(void *)&v573.a + 24);
                                                double v332 = *(double *)(*(void *)&v573.a + 32);
                                                double v345 = *(double *)(*(void *)&v573.a + 40);
                                                v395 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                                                goto LABEL_169;
                                              case 3:
                                              case 4:
                                                goto LABEL_311;
                                              case 5:
                                                if (*(unsigned char *)(*(void *)&v573.a + 16))
                                                {
                                                  if (*(unsigned char *)(*(void *)&v573.a + 16) == 1)
                                                  {
                                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                    RBPathGetBoundingRect();
                                                  }
                                                  else
                                                  {
                                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                    MEMORY[0x24C526C90](v326 + 24);
                                                  }
LABEL_138:
                                                  double v30 = v347;
                                                  double b = v348;
                                                  double v332 = v349;
                                                  double v345 = v350;
                                                  goto LABEL_171;
                                                }
                                                v396 = *(void **)(*(void *)&v573.a + 24);
                                                if (!v396) {
                                                  goto LABEL_306;
                                                }
                                                v397 = v396;
                                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                swift_retain();
                                                CGRect v673 = CGPathGetPathBoundingBox(v397);
                                                double v30 = v673.origin.x;
                                                double b = v673.origin.y;
                                                double v332 = v673.size.width;
                                                double v345 = v673.size.height;

                                                v395 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_169:
                                                v361 = v395;
                                                break;
                                              case 6:
                                                goto LABEL_171;
                                              default:
                                                double v30 = v573.a;
                                                double b = v573.b;
                                                double v332 = v573.c;
                                                double v345 = v573.d;
                                                goto LABEL_171;
                                            }
                                            goto LABEL_170;
                                          case 3:
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            LODWORD(v346) = v327;
                                            objc_msgSend((id)v326, sel_boundingRectWithProgress_, v346);
                                            goto LABEL_138;
                                          case 4:
                                            if (specialized Set.contains(_:)(*(Swift::UInt64 *)&v573.a, *v528)) {
                                              goto LABEL_150;
                                            }
                                            swift_beginAccess();
                                            uint64_t v333 = *(void *)v518;
                                            if (*(void *)(*(void *)v518 + 16)
                                              && (uint64_t v334 = specialized __RawDictionaryStorage.find<A>(_:)(v326),
                                                  (v335 & 1) != 0))
                                            {
                                              v336 = *(void **)(*(void *)(v333 + 56) + 8 * v334);
                                              swift_endAccess();
                                              v337 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v336) + 0xE0);
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              v338 = v336;
                                              double v339 = v337();
                                              double v526 = v340;
                                              double v527 = v339;
                                              double v565 = v341;
                                              double v343 = v342;

                                              uint64_t v344 = *(void *)(*(void *)&v328 + 16);
                                              if (!v344) {
                                                goto LABEL_134;
                                              }
                                            }
                                            else
                                            {
                                              swift_endAccess();
LABEL_150:
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              swift_bridgeObjectRetain();
                                              double v526 = 0.0;
                                              double v527 = 0.0;
                                              double v565 = 0.0;
                                              double v343 = 0.0;
                                              uint64_t v344 = *(void *)(*(void *)&v328 + 16);
                                              if (!v344)
                                              {
LABEL_134:
                                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                double v332 = v76;
                                                double v345 = r2;
                                                goto LABEL_155;
                                              }
                                            }
                                            v380 = (_OWORD *)(*(void *)&v328 + 32);
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            uint64_t v381 = v344 - 1;
                                            double v332 = v76;
                                            double v345 = r2;
                                            while (1)
                                            {
                                              *(_OWORD *)&v566.CGFloat a = *v380;
                                              long long v382 = v380[1];
                                              long long v383 = v380[2];
                                              long long v384 = v380[4];
                                              long long v567 = v380[3];
                                              long long v568 = v384;
                                              *(_OWORD *)&v566.CGFloat c = v382;
                                              *(_OWORD *)&v566.tCGFloat x = v383;
                                              long long v385 = v380[5];
                                              long long v386 = v380[6];
                                              long long v387 = v380[8];
                                              long long v571 = v380[7];
                                              long long v572 = v387;
                                              long long v569 = v385;
                                              long long v570 = v386;
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v566, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)((uint64_t)v601);
                                              v719.origin.CGFloat x = v388;
                                              v719.origin.CGFloat y = v389;
                                              v719.size.CGFloat width = v390;
                                              v719.size.CGFloat height = v391;
                                              v666.origin.CGFloat x = v30;
                                              v666.origin.CGFloat y = b;
                                              v666.size.CGFloat width = v332;
                                              v666.size.CGFloat height = v345;
                                              CGRect v667 = CGRectUnion(v666, v719);
                                              double v30 = v667.origin.x;
                                              double b = v667.origin.y;
                                              double v332 = v667.size.width;
                                              double v345 = v667.size.height;
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v566, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              if (!v381) {
                                                break;
                                              }
                                              --v381;
                                              v380 += 9;
                                            }
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_155:
                                            v668.origin.CGFloat x = v30;
                                            v668.origin.CGFloat y = b;
                                            v668.size.CGFloat width = v332;
                                            v668.size.CGFloat height = v345;
                                            if (CGRectIsNull(v668)) {
                                              goto LABEL_171;
                                            }
                                            double v392 = v343;
                                            double v393 = -v343;
                                            v669.origin.CGFloat x = v30;
                                            v669.origin.CGFloat y = b;
                                            v669.size.CGFloat width = v332;
                                            v669.size.CGFloat height = v345;
                                            CGRect v670 = CGRectStandardize(v669);
                                            double v394 = v565 == v392 ? v392 : v565;
                                            double v30 = v670.origin.x - v394;
                                            double b = v670.origin.y - v527;
                                            double v332 = v670.size.width - (v393 - v565);
                                            double v345 = v670.size.height - (-v526 - v527);
                                            v671.origin.CGFloat x = v670.origin.x - v394;
                                            v671.origin.CGFloat y = v670.origin.y - v527;
                                            v671.size.CGFloat width = v332;
                                            v671.size.CGFloat height = v345;
                                            if (CGRectGetWidth(v671) >= 0.0)
                                            {
                                              v672.origin.CGFloat x = v30;
                                              v672.origin.CGFloat y = b;
                                              v672.size.CGFloat width = v332;
                                              v672.size.CGFloat height = v345;
                                              if (CGRectGetHeight(v672) >= 0.0) {
                                                goto LABEL_171;
                                              }
                                            }
                                            double v30 = v557;
                                            double b = v558;
                                            double v332 = v559;
                                            goto LABEL_162;
                                          default:
                                            if ((void)v574 != *((void *)&v574 + 1))
                                            {
                                              if (*((uint64_t *)&v574 + 1) < (uint64_t)v574) {
                                                goto LABEL_288;
                                              }
                                              if ((uint64_t)v574 < *((uint64_t *)&v574 + 1))
                                              {
                                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                double v332 = v76;
                                                double v345 = r2;
                                                char v362 = LOBYTE(v328);
                                                while (1)
                                                {
                                                  if (LOBYTE(v328))
                                                  {
                                                    outlined copy of Text.Layout.Line.Line((void *)v326, v327, 1);
                                                    id v379 = (id)_NSTextLineFragmentGetCTLine((void *)v326);
                                                    if (!v379) {
                                                      goto LABEL_301;
                                                    }
                                                    v363 = v379;
                                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                  }
                                                  else
                                                  {
                                                    outlined copy of Text.Layout.Line.Line((void *)v326, v327, 0);
                                                    outlined copy of Text.Layout.Line.Line((void *)v326, v327, 0);

                                                    swift_release();
                                                    v363 = (void *)v326;
                                                  }
                                                  *(void *)&CGFloat v328 = v330 + 1;
                                                  swift_retain();
                                                  v364 = v363;
                                                  v365 = (id)_CTLineGetRunAtIndex(v364, v330);
                                                  v609.location = 0;
                                                  v609.length = 0;
                                                  CGRect v659 = CTRunGetImageBounds((CTRunRef)v365, 0, v609);
                                                  CGFloat v366 = v659.origin.x;
                                                  CGFloat v367 = v659.origin.y;
                                                  CGFloat v368 = v659.size.width;
                                                  CGFloat v369 = v659.size.height;

                                                  v566.double b = 0.0;
                                                  v566.CGFloat c = 0.0;
                                                  v566.CGFloat a = 1.0;
                                                  v566.CGFloat d = -1.0;
                                                  v566.tCGFloat x = v564;
                                                  v566.tCGFloat y = v329;
                                                  v660.origin.CGFloat x = v366;
                                                  v660.origin.CGFloat y = v367;
                                                  v660.size.CGFloat width = v368;
                                                  v660.size.CGFloat height = v369;
                                                  CGRect v661 = CGRectApplyAffineTransform(v660, &v566);
                                                  CGFloat v370 = v661.origin.x;
                                                  CGFloat v371 = v661.origin.y;
                                                  CGFloat v372 = v661.size.width;
                                                  CGFloat v373 = v661.size.height;
                                                  swift_release();

                                                  v662.origin.CGFloat x = v370;
                                                  v662.origin.CGFloat y = v371;
                                                  v662.size.CGFloat width = v372;
                                                  v662.size.CGFloat height = v373;
                                                  CGRect v663 = CGRectInset(v662, -1.0, -1.0);
                                                  CGFloat v374 = v663.origin.x;
                                                  CGFloat v375 = v663.origin.y;
                                                  CGFloat v376 = v663.size.width;
                                                  CGFloat v377 = v663.size.height;
                                                  swift_release();

                                                  v664.origin.CGFloat x = v30;
                                                  v664.origin.CGFloat y = b;
                                                  v664.size.CGFloat width = v332;
                                                  v664.size.CGFloat height = v345;
                                                  v718.origin.CGFloat x = v374;
                                                  v718.origin.CGFloat y = v375;
                                                  v718.size.CGFloat width = v376;
                                                  v718.size.CGFloat height = v377;
                                                  CGRect v665 = CGRectUnion(v664, v718);
                                                  double v30 = v665.origin.x;
                                                  double b = v665.origin.y;
                                                  double v332 = v665.size.width;
                                                  double v345 = v665.size.height;
                                                  CFIndex v330 = *(void *)&v328;
                                                  BOOL v378 = v331 == *(void *)&v328;
                                                  LOBYTE(v328) = v362;
                                                  if (v378) {
                                                    goto LABEL_171;
                                                  }
                                                }
                                              }
LABEL_289:
                                              __break(1u);
LABEL_290:
                                              __break(1u);
LABEL_291:
                                              __break(1u);
                                              goto LABEL_292;
                                            }
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            double v332 = v76;
LABEL_162:
                                            double v345 = r2;
LABEL_171:
                                            CGAffineTransform v566 = v577;
                                            v674.origin.CGFloat x = v30;
                                            v674.origin.CGFloat y = b;
                                            v674.size.CGFloat width = v332;
                                            v674.size.CGFloat height = v345;
                                            CGRect v675 = CGRectApplyAffineTransform(v674, &v566);
                                            CGFloat v315 = v675.origin.x;
                                            CGFloat v316 = v675.origin.y;
                                            CGFloat v317 = v675.size.width;
                                            CGFloat v318 = v675.size.height;
                                            double v30 = v557;
                                            double b = v558;
                                            double v76 = v559;
                                            double v283 = v548;
                                            double v284 = v546;
                                            double v285 = v544;
                                            double v282 = v543;
                                            uint64_t v313 = v541;
                                            uint64_t v312 = v542;
                                            break;
                                        }
                                      }
                                      ++v314;
                                      v652.origin.CGFloat x = v283;
                                      v652.origin.CGFloat y = v284;
                                      v652.size.CGFloat width = v285;
                                      v652.size.CGFloat height = v282;
                                      CGRect v653 = CGRectUnion(v652, *(CGRect *)&v315);
                                      double v283 = v653.origin.x;
                                      double v284 = v653.origin.y;
                                      double v285 = v653.size.width;
                                      double v282 = v653.size.height;
                                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v573, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    }
                                    while (v314 != v312);
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_174:
                                    v676.origin.CGFloat x = v283;
                                    v676.origin.CGFloat y = v284;
                                    v676.size.CGFloat width = v285;
                                    v676.size.CGFloat height = v282;
                                    if (!CGRectIsNull(v676))
                                    {
                                      v677.size.CGFloat height = v282;
                                      v677.origin.CGFloat x = v283;
                                      v677.origin.CGFloat y = v284;
                                      v677.size.CGFloat width = v285;
                                      CGRect v678 = CGRectStandardize(v677);
                                      double v398 = v516 == v515 ? v515 : v516;
                                      double v283 = v678.origin.x - v398;
                                      double v284 = v678.origin.y - v517;
                                      double v285 = v678.size.width - (-v515 - v516);
                                      double v282 = v678.size.height - (-v514 - v517);
                                      v679.origin.CGFloat x = v678.origin.x - v398;
                                      v679.origin.CGFloat y = v678.origin.y - v517;
                                      v679.size.CGFloat width = v285;
                                      v679.size.CGFloat height = v282;
                                      if (CGRectGetWidth(v679) < 0.0) {
                                        goto LABEL_180;
                                      }
                                      v680.origin.CGFloat x = v283;
                                      v680.origin.CGFloat y = v284;
                                      v680.size.CGFloat width = v285;
                                      v680.size.CGFloat height = v282;
                                      if (CGRectGetHeight(v680) < 0.0) {
                                        goto LABEL_180;
                                      }
                                    }
                                    goto LABEL_201;
                                  default:
                                    if ((void)v579 != *((void *)&v579 + 1))
                                    {
                                      if (*((uint64_t *)&v579 + 1) < (uint64_t)v579) {
                                        goto LABEL_291;
                                      }
                                      if ((uint64_t)v579 < *((uint64_t *)&v579 + 1))
                                      {
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        double v283 = v30;
                                        double v284 = b;
                                        double v285 = v76;
                                        double v282 = r2;
                                        while (1)
                                        {
                                          if (LOBYTE(v269))
                                          {
                                            outlined copy of Text.Layout.Line.Line((void *)v267, v268, 1);
                                            id v417 = (id)_NSTextLineFragmentGetCTLine((void *)v267);
                                            if (!v417) {
                                              goto LABEL_302;
                                            }
                                            v401 = v417;
                                            CGFloat v399 = v282;
                                            CGFloat v400 = v285;
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                          }
                                          else
                                          {
                                            CGFloat v399 = v282;
                                            CGFloat v400 = v285;
                                            outlined copy of Text.Layout.Line.Line((void *)v267, v268, 0);
                                            outlined copy of Text.Layout.Line.Line((void *)v267, v268, 0);

                                            swift_release();
                                            v401 = (void *)v267;
                                          }
                                          CFIndex v402 = v272 + 1;
                                          swift_retain();
                                          v403 = v401;
                                          v404 = (id)_CTLineGetRunAtIndex(v403, v272);
                                          v610.location = 0;
                                          v610.length = 0;
                                          CGRect v681 = CTRunGetImageBounds((CTRunRef)v404, 0, v610);
                                          CGFloat v405 = v681.origin.x;
                                          CGFloat v406 = v681.origin.y;
                                          CGFloat v407 = v681.size.width;
                                          CGFloat v408 = v681.size.height;

                                          v573.double b = 0.0;
                                          v573.CGFloat c = 0.0;
                                          v573.CGFloat a = 1.0;
                                          v573.CGFloat d = -1.0;
                                          v573.tCGFloat x = v270;
                                          v573.tCGFloat y = v271;
                                          v682.origin.CGFloat x = v405;
                                          v682.origin.CGFloat y = v406;
                                          v682.size.CGFloat width = v407;
                                          v682.size.CGFloat height = v408;
                                          CGRect v683 = CGRectApplyAffineTransform(v682, &v573);
                                          CGFloat v409 = v683.origin.x;
                                          CGFloat v410 = v683.origin.y;
                                          CGFloat v411 = v683.size.width;
                                          CGFloat v412 = v683.size.height;
                                          swift_release();

                                          v684.origin.CGFloat x = v409;
                                          v684.origin.CGFloat y = v410;
                                          v684.size.CGFloat width = v411;
                                          v684.size.CGFloat height = v412;
                                          CGRect v685 = CGRectInset(v684, -1.0, -1.0);
                                          CGFloat v413 = v685.origin.x;
                                          CGFloat v414 = v685.origin.y;
                                          CGFloat v415 = v685.size.width;
                                          CGFloat v416 = v685.size.height;
                                          swift_release();

                                          v686.origin.CGFloat x = v283;
                                          v686.origin.CGFloat y = v284;
                                          v686.size.CGFloat width = v400;
                                          v686.size.CGFloat height = v399;
                                          v720.origin.CGFloat x = v413;
                                          v720.origin.CGFloat y = v414;
                                          v720.size.CGFloat width = v415;
                                          v720.size.CGFloat height = v416;
                                          CGRect v687 = CGRectUnion(v686, v720);
                                          double v283 = v687.origin.x;
                                          double v284 = v687.origin.y;
                                          double v285 = v687.size.width;
                                          double v282 = v687.size.height;
                                          CFIndex v272 = v402;
                                          double v30 = v557;
                                          double b = v558;
                                          double v76 = v559;
                                          if (v273 == v402) {
                                            goto LABEL_201;
                                          }
                                        }
                                      }
LABEL_292:
                                      __break(1u);
LABEL_293:
                                      __break(1u);
LABEL_294:
                                      __break(1u);
                                      goto LABEL_295;
                                    }
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_180:
                                    double v283 = v30;
                                    double v284 = b;
                                    double v285 = v76;
                                    double v282 = r2;
LABEL_201:
                                    CGAffineTransform v573 = v582;
                                    v689.origin.CGFloat x = v283;
                                    v689.origin.CGFloat y = v284;
                                    v689.size.CGFloat width = v285;
                                    v689.size.CGFloat height = v282;
                                    CGRect v690 = CGRectApplyAffineTransform(v689, &v573);
                                    CGFloat v256 = v690.origin.x;
                                    CGFloat v257 = v690.origin.y;
                                    CGFloat v258 = v690.size.width;
                                    CGFloat v259 = v690.size.height;
                                    uint64_t v254 = v530;
                                    uint64_t v251 = v531;
                                    uint64_t v255 = v536;
                                    break;
                                }
                              }
                              ++v255;
                              v645.origin.CGFloat x = v556;
                              v645.origin.CGFloat y = v553;
                              v645.size.CGFloat width = v550;
                              v645.size.CGFloat height = r1;
                              CGRect v646 = CGRectUnion(v645, *(CGRect *)&v256);
                              CGFloat v556 = v646.origin.x;
                              CGFloat v553 = v646.origin.y;
                              CGFloat v550 = v646.size.width;
                              CGFloat r1 = v646.size.height;
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v578, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            }
                            while (v255 != v251);
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            CGFloat v194 = v556;
                            double b = v553;
                            CGFloat v252 = v550;
                            CGFloat v253 = r1;
LABEL_204:
                            v691.origin.CGFloat x = v194;
                            v691.origin.CGFloat y = b;
                            v691.size.CGFloat width = v252;
                            v691.size.CGFloat height = v253;
                            if (CGRectIsNull(v691))
                            {
                              double v195 = v252;
                              double v196 = v253;
                              goto LABEL_217;
                            }
                            v692.origin.CGFloat x = v194;
                            v692.origin.CGFloat y = b;
                            v692.size.CGFloat width = v252;
                            v692.size.CGFloat height = v253;
                            CGRect v693 = CGRectStandardize(v692);
                            if (v509 == v508) {
                              double v423 = v508;
                            }
                            else {
                              double v423 = v509;
                            }
                            double v424 = v693.origin.x - v423;
                            double v425 = v693.origin.y - v510;
                            double v426 = v693.size.width - (-v508 - v509);
                            double v196 = v693.size.height - (-v507 - v510);
                            v694.origin.CGFloat x = v693.origin.x - v423;
                            v694.origin.CGFloat y = v693.origin.y - v510;
                            v694.size.CGFloat width = v426;
                            v694.size.CGFloat height = v196;
                            if (CGRectGetWidth(v694) < 0.0
                              || (CGFloat v194 = v424,
                                  v695.origin.CGFloat x = v424,
                                  double b = v425,
                                  v695.origin.CGFloat y = v425,
                                  v695.size.CGFloat width = v426,
                                  v695.size.CGFloat height = v196,
                                  CGRectGetHeight(v695) < 0.0))
                            {
                              CGFloat v194 = v30;
                              double b = v558;
                              double v195 = v559;
                              goto LABEL_212;
                            }
                            double v195 = v426;
                            goto LABEL_217;
                          default:
                            if ((void)v584 != *((void *)&v584 + 1))
                            {
                              if (*((uint64_t *)&v584 + 1) < (uint64_t)v584) {
                                goto LABEL_294;
                              }
                              if ((uint64_t)v584 < *((uint64_t *)&v584 + 1))
                              {
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                CGFloat v194 = v30;
                                double v195 = v76;
                                double v196 = r2;
                                while (1)
                                {
                                  CGFloat v216 = v195;
                                  if (LOBYTE(v188))
                                  {
                                    outlined copy of Text.Layout.Line.Line((void *)v186, v187, 1);
                                    id v217 = (id)_NSTextLineFragmentGetCTLine((void *)v186);
                                    if (!v217) {
                                      goto LABEL_303;
                                    }
                                    v197 = v217;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  }
                                  else
                                  {
                                    outlined copy of Text.Layout.Line.Line((void *)v186, v187, 0);
                                    outlined copy of Text.Layout.Line.Line((void *)v186, v187, 0);

                                    swift_release();
                                    v197 = (void *)v186;
                                  }
                                  CFIndex v198 = v191 + 1;
                                  swift_retain();
                                  v199 = v197;
                                  v200 = (id)_CTLineGetRunAtIndex(v199, v191);
                                  v605.location = 0;
                                  v605.length = 0;
                                  CGRect v634 = CTRunGetImageBounds((CTRunRef)v200, 0, v605);
                                  CGFloat v201 = v634.origin.x;
                                  CGFloat v202 = v634.origin.y;
                                  CGFloat v203 = v634.size.width;
                                  CGFloat v204 = v634.size.height;

                                  v578.double b = 0.0;
                                  v578.CGFloat c = 0.0;
                                  v578.CGFloat a = 1.0;
                                  v578.CGFloat d = -1.0;
                                  v578.tCGFloat x = v189;
                                  v578.tCGFloat y = v190;
                                  v635.origin.CGFloat x = v201;
                                  v635.origin.CGFloat y = v202;
                                  v635.size.CGFloat width = v203;
                                  v635.size.CGFloat height = v204;
                                  CGRect v636 = CGRectApplyAffineTransform(v635, &v578);
                                  CGFloat v205 = v636.origin.x;
                                  CGFloat v206 = v636.origin.y;
                                  CGFloat v207 = v636.size.width;
                                  CGFloat v208 = v636.size.height;
                                  swift_release();

                                  v637.origin.CGFloat x = v205;
                                  v637.origin.CGFloat y = v206;
                                  v637.size.CGFloat width = v207;
                                  v637.size.CGFloat height = v208;
                                  CGRect v638 = CGRectInset(v637, -1.0, -1.0);
                                  CGFloat v209 = v638.origin.x;
                                  CGFloat v210 = v638.origin.y;
                                  CGFloat v211 = v638.size.width;
                                  CGFloat v212 = v638.size.height;
                                  swift_release();

                                  v639.origin.CGFloat x = v194;
                                  v639.origin.CGFloat y = b;
                                  v639.size.CGFloat width = v216;
                                  v639.size.CGFloat height = v196;
                                  v717.origin.CGFloat x = v209;
                                  v717.origin.CGFloat y = v210;
                                  v717.size.CGFloat width = v211;
                                  v717.size.CGFloat height = v212;
                                  *(CGRect *)(&v195 - 2) = CGRectUnion(v639, v717);
                                  CGFloat v194 = v213;
                                  double b = v214;
                                  double v196 = v215;
                                  CFIndex v191 = v198;
                                  if (v192 == v198) {
                                    goto LABEL_217;
                                  }
                                }
                              }
LABEL_295:
                              __break(1u);
LABEL_296:
                              __break(1u);
LABEL_297:
                              __break(1u);
                              goto LABEL_298;
                            }
LABEL_91:
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            CGFloat v194 = v30;
                            double v195 = v76;
LABEL_212:
                            double v196 = r2;
LABEL_217:
                            CGAffineTransform v578 = v587;
                            CGFloat v428 = v194;
                            double v429 = b;
                            double v430 = v196;
                            CGRect v696 = CGRectApplyAffineTransform(*(CGRect *)(&v195 - 2), &v578);
                            CGFloat v175 = v696.origin.x;
                            CGFloat v176 = v696.origin.y;
                            CGFloat v177 = v696.size.width;
                            CGFloat v178 = v696.size.height;
                            uint64_t v173 = v520;
                            uint64_t v170 = v521;
                            uint64_t v174 = v529;
                            double b = v558;
                            double v30 = v557;
                            double v76 = v559;
                            break;
                        }
                      }
                      ++v174;
                      v632.origin.CGFloat y = v539;
                      v632.origin.CGFloat x = v540;
                      v632.size.CGFloat height = v537;
                      v632.size.CGFloat width = v538;
                      CGRect v633 = CGRectUnion(v632, *(CGRect *)&v175);
                      CGFloat v539 = v633.origin.y;
                      CGFloat v540 = v633.origin.x;
                      CGFloat v537 = v633.size.height;
                      CGFloat v538 = v633.size.width;
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v583, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    }
                    while (v174 != v170);
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    double b = v539;
                    CGFloat v171 = v540;
                    double v154 = v537;
                    CGFloat v172 = v538;
LABEL_230:
                    CGFloat a = v171;
                    double v435 = b;
                    CGFloat v436 = v172;
                    double v437 = v154;
                    if (CGRectIsNull(*(CGRect *)&v171))
                    {
                      CGFloat v135 = v172;
                      goto LABEL_260;
                    }
                    v704.origin.CGFloat x = a;
                    v704.origin.CGFloat y = b;
                    v704.size.CGFloat width = v172;
                    v704.size.CGFloat height = v154;
                    CGRect v705 = CGRectStandardize(v704);
                    if (v503 == v502) {
                      double v460 = v502;
                    }
                    else {
                      double v460 = v503;
                    }
                    double v461 = v705.origin.x - v460;
                    double v462 = v705.origin.y - v504;
                    double v463 = v705.size.width - (-v502 - v503);
                    double v154 = v705.size.height - (-v501 - v504);
                    v706.origin.CGFloat x = v705.origin.x - v460;
                    v706.origin.CGFloat y = v705.origin.y - v504;
                    v706.size.CGFloat width = v463;
                    v706.size.CGFloat height = v154;
                    if (CGRectGetWidth(v706) < 0.0
                      || (CGFloat a = v461,
                          v707.origin.CGFloat x = v461,
                          double b = v462,
                          v707.origin.CGFloat y = v462,
                          v707.size.CGFloat width = v463,
                          v707.size.CGFloat height = v154,
                          CGRectGetHeight(v707) < 0.0))
                    {
                      CGFloat a = v30;
                      double b = v558;
                      CGFloat v135 = v559;
                      goto LABEL_246;
                    }
                    CGFloat v135 = v463;
                    goto LABEL_260;
                  default:
                    if ((void)v589 != *((void *)&v589 + 1))
                    {
                      if (*((uint64_t *)&v589 + 1) < (uint64_t)v589) {
                        goto LABEL_297;
                      }
                      if ((uint64_t)v589 < *((uint64_t *)&v589 + 1))
                      {
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        double v438 = v76;
                        CGFloat a = v30;
                        CGFloat v135 = v438;
                        double v154 = r2;
                        while (1)
                        {
                          CGFloat v458 = v135;
                          if (LOBYTE(c))
                          {
                            outlined copy of Text.Layout.Line.Line((void *)v125, v126, 1);
                            id v459 = (id)_NSTextLineFragmentGetCTLine((void *)v125);
                            if (!v459) {
                              goto LABEL_304;
                            }
                            v439 = v459;
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                          }
                          else
                          {
                            outlined copy of Text.Layout.Line.Line((void *)v125, v126, 0);
                            outlined copy of Text.Layout.Line.Line((void *)v125, v126, 0);

                            swift_release();
                            v439 = (void *)v125;
                          }
                          CFIndex v440 = v130 + 1;
                          swift_retain();
                          v441 = v439;
                          v442 = (id)_CTLineGetRunAtIndex(v441, v130);
                          v611.location = 0;
                          v611.length = 0;
                          CGRect v698 = CTRunGetImageBounds((CTRunRef)v442, 0, v611);
                          CGFloat v443 = v698.origin.x;
                          CGFloat v444 = v698.origin.y;
                          CGFloat v445 = v698.size.width;
                          CGFloat v446 = v698.size.height;

                          v583.double b = 0.0;
                          v583.CGFloat c = 0.0;
                          v583.CGFloat a = 1.0;
                          v583.CGFloat d = -1.0;
                          v583.tCGFloat x = d;
                          v583.tCGFloat y = tx;
                          v699.origin.CGFloat x = v443;
                          v699.origin.CGFloat y = v444;
                          v699.size.CGFloat width = v445;
                          v699.size.CGFloat height = v446;
                          CGRect v700 = CGRectApplyAffineTransform(v699, &v583);
                          CGFloat v447 = v700.origin.x;
                          CGFloat v448 = v700.origin.y;
                          CGFloat v449 = v700.size.width;
                          CGFloat v450 = v700.size.height;
                          swift_release();

                          v701.origin.CGFloat x = v447;
                          v701.origin.CGFloat y = v448;
                          v701.size.CGFloat width = v449;
                          v701.size.CGFloat height = v450;
                          CGRect v702 = CGRectInset(v701, -1.0, -1.0);
                          CGFloat v451 = v702.origin.x;
                          CGFloat v452 = v702.origin.y;
                          CGFloat v453 = v702.size.width;
                          CGFloat v454 = v702.size.height;
                          swift_release();

                          v703.origin.CGFloat x = a;
                          v703.origin.CGFloat y = b;
                          v703.size.CGFloat width = v458;
                          v703.size.CGFloat height = v154;
                          v721.origin.CGFloat x = v451;
                          v721.origin.CGFloat y = v452;
                          v721.size.CGFloat width = v453;
                          v721.size.CGFloat height = v454;
                          *(CGRect *)(&v135 - 2) = CGRectUnion(v703, v721);
                          CGFloat a = v455;
                          double b = v456;
                          double v154 = v457;
                          CFIndex v130 = v440;
                          if (v131 == v440) {
                            goto LABEL_260;
                          }
                        }
                      }
LABEL_298:
                      __break(1u);
LABEL_299:
                      __break(1u);
                      goto LABEL_300;
                    }
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    double v133 = v76;
                    CGFloat a = v30;
                    CGFloat v135 = v133;
LABEL_246:
                    double v154 = r2;
LABEL_260:
                    CGAffineTransform v583 = v592;
                    CGFloat v469 = a;
                    double v470 = b;
                    double v471 = v154;
                    CGRect v709 = CGRectApplyAffineTransform(*(CGRect *)(&v135 - 2), &v583);
                    CGFloat v114 = v709.origin.x;
                    CGFloat v115 = v709.origin.y;
                    CGFloat v116 = v709.size.width;
                    CGFloat v117 = v709.size.height;
                    uint64_t v112 = v512;
                    uint64_t v87 = v513;
                    uint64_t v113 = v519;
                    double v76 = v559;
                    double v30 = v557;
                    double b = v558;
                    break;
                }
              }
              ++v113;
              v625.origin.CGFloat y = v534;
              v625.origin.CGFloat x = v535;
              v625.size.CGFloat height = v532;
              v625.size.CGFloat width = v533;
              CGRect v626 = CGRectUnion(v625, *(CGRect *)&v114);
              CGFloat v534 = v626.origin.y;
              CGFloat v535 = v626.origin.x;
              CGFloat v532 = v626.size.height;
              CGFloat v533 = v626.size.width;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v588, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            }
            while (v113 != v87);
            double v39 = v76;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            double b = v534;
            CGFloat v88 = v535;
            CGFloat v90 = v532;
            CGFloat v89 = v533;
LABEL_263:
            CGFloat v57 = v88;
            double v472 = b;
            CGFloat v473 = v89;
            CGFloat v474 = v90;
            if (CGRectIsNull(*(CGRect *)&v88))
            {
              double v72 = v89;
              double v71 = v90;
              break;
            }
            v710.origin.CGFloat x = v57;
            v710.origin.CGFloat y = b;
            v710.size.CGFloat width = v89;
            v710.size.CGFloat height = v90;
            CGRect v711 = CGRectStandardize(v710);
            if (v493 == v492) {
              double v475 = v492;
            }
            else {
              double v475 = v493;
            }
            double v476 = v711.origin.x - v475;
            double v477 = v711.origin.y - v494;
            double v478 = v711.size.width - (-v492 - v493);
            double v479 = v711.size.height - (-v491 - v494);
            v712.origin.CGFloat x = v711.origin.x - v475;
            v712.origin.CGFloat y = v711.origin.y - v494;
            v712.size.CGFloat width = v478;
            v712.size.CGFloat height = v479;
            if (CGRectGetWidth(v712) < 0.0
              || (CGFloat v57 = v476,
                  v713.origin.CGFloat x = v476,
                  double b = v477,
                  v713.origin.CGFloat y = v477,
                  v713.size.CGFloat width = v478,
                  v713.size.CGFloat height = v479,
                  CGRectGetHeight(v713) < 0.0))
            {
              CGFloat v57 = v557;
              double b = v558;
              goto LABEL_271;
            }
            double v72 = v478;
            double v71 = v479;
            break;
          default:
            if ((void)v596 != *((void *)&v596 + 1))
            {
              if (*((uint64_t *)&v596 + 1) < (uint64_t)v596) {
                goto LABEL_299;
              }
              if ((uint64_t)v596 < *((uint64_t *)&v596 + 1))
              {
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                CGFloat v57 = v30;
                double v72 = v39;
                double v71 = r2;
                while (1)
                {
                  CGFloat v109 = v71;
                  CGFloat v110 = v72;
                  if (LOBYTE(v53))
                  {
                    outlined copy of Text.Layout.Line.Line((void *)v51, *((uint64_t *)&v51 + 1), 1);
                    id v111 = (id)_NSTextLineFragmentGetCTLine((void *)v51);
                    if (!v111) {
                      goto LABEL_305;
                    }
                    uint64_t v91 = v111;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                  }
                  else
                  {
                    outlined copy of Text.Layout.Line.Line((void *)v51, *((uint64_t *)&v51 + 1), 0);
                    outlined copy of Text.Layout.Line.Line((void *)v51, *((uint64_t *)&v51 + 1), 0);

                    swift_release();
                    uint64_t v91 = (void *)v51;
                  }
                  CFIndex v92 = v55 + 1;
                  swift_retain();
                  v93 = v91;
                  v94 = (id)_CTLineGetRunAtIndex(v93, v55);
                  v603.location = 0;
                  v603.length = 0;
                  CGRect v619 = CTRunGetImageBounds((CTRunRef)v94, 0, v603);
                  CGFloat v95 = v619.origin.x;
                  CGFloat v96 = v619.origin.y;
                  CGFloat v97 = v619.size.width;
                  CGFloat v98 = v619.size.height;

                  v588.double b = 0.0;
                  v588.CGFloat c = 0.0;
                  v588.CGFloat a = 1.0;
                  v588.CGFloat d = -1.0;
                  v588.tCGFloat x = v52;
                  v588.tCGFloat y = v54;
                  v620.origin.CGFloat x = v95;
                  v620.origin.CGFloat y = v96;
                  v620.size.CGFloat width = v97;
                  v620.size.CGFloat height = v98;
                  CGRect v621 = CGRectApplyAffineTransform(v620, &v588);
                  CGFloat v99 = v621.origin.x;
                  CGFloat v100 = v621.origin.y;
                  CGFloat v101 = v621.size.width;
                  CGFloat v102 = v621.size.height;
                  swift_release();

                  v622.origin.CGFloat x = v99;
                  v622.origin.CGFloat y = v100;
                  v622.size.CGFloat width = v101;
                  v622.size.CGFloat height = v102;
                  CGRect v623 = CGRectInset(v622, -1.0, -1.0);
                  CGFloat v103 = v623.origin.x;
                  CGFloat v104 = v623.origin.y;
                  CGFloat v105 = v623.size.width;
                  CGFloat v106 = v623.size.height;
                  swift_release();

                  v624.origin.CGFloat x = v57;
                  v624.origin.CGFloat y = b;
                  v624.size.CGFloat width = v110;
                  v624.size.CGFloat height = v109;
                  v716.origin.CGFloat x = v103;
                  v716.origin.CGFloat y = v104;
                  v716.size.CGFloat width = v105;
                  v716.size.CGFloat height = v106;
                  *(CGRect *)(&v72 - 2) = CGRectUnion(v624, v716);
                  CGFloat v57 = v107;
                  double b = v108;
                  CFIndex v55 = v92;
                  if (v56 == v92) {
                    goto LABEL_281;
                  }
                }
              }
LABEL_300:
              __break(1u);
LABEL_301:
              __break(1u);
LABEL_302:
              __break(1u);
LABEL_303:
              __break(1u);
LABEL_304:
              __break(1u);
LABEL_305:
              __break(1u);
LABEL_306:
              __break(1u);
LABEL_307:
              __break(1u);
LABEL_308:
              __break(1u);
LABEL_309:
              __break(1u);
LABEL_310:
              __break(1u);
LABEL_311:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x245ECC764);
            }
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            CGFloat v57 = v30;
LABEL_271:
            double v72 = v39;
            double v71 = r2;
            break;
        }
LABEL_281:
        CGAffineTransform v588 = v599;
        CGFloat v483 = v57;
        double v484 = b;
        CGRect v715 = CGRectApplyAffineTransform(*(CGRect *)(&v72 - 2), &v588);
        CGFloat v40 = v715.origin.x;
        CGFloat v41 = v715.origin.y;
        CGFloat v42 = v715.size.width;
        CGFloat v43 = v715.size.height;
        uint64_t v34 = v506;
        uint64_t v35 = v505;
        uint64_t v36 = v511;
        double v39 = v559;
        double b = v558;
        double v30 = v557;
      }
      ++v36;
      v612.origin.CGFloat y = v524;
      v612.origin.CGFloat x = v525;
      v612.size.CGFloat width = v522;
      v612.size.CGFloat height = v523;
      CGRect v613 = CGRectUnion(v612, *(CGRect *)&v40);
      CGFloat v37 = v613.origin.x;
      CGFloat v38 = v613.origin.y;
      CGFloat v33 = v613.size.width;
      CGFloat v32 = v613.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v593, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
    }
    while (v36 != v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    double v28 = v489;
  }
  else
  {
    CGFloat v37 = *MEMORY[0x263F001A0];
    CGFloat v38 = *(double *)(MEMORY[0x263F001A0] + 8);
  }
  double v485 = 1.0 - (v28 + v28 + -1.0) * (v28 + v28 + -1.0);
  uint64_t v486 = RBDrawingStateBeginLayer();
  swift_allocObject();
  uint64_t v487 = swift_retain();
  *(void *)&long long v593 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v487, v486, 0, 1);
  swift_retain();
  closure #1 in GradientBlurTextEffect.apply(to:fragment:timing:state:context:in:)((double **)&v593, v485, a4, v37, v38, v33, v32);
  swift_release();
  RBDrawingStateDrawLayer();
  swift_release();
  RBDrawingStateDrawDisplayList2();

  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t PreferencesOutputs.setIndirectDependency(_:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v2 += 24;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PreferencesOutputs.detachIndirectOutputs()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = 48;
    do
    {
      AGGraphSetIndirectAttribute();
      v2 += 24;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
}

uint64_t PreferencesOutputs.forEachPreference(_:)(uint64_t result)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t, void))result;
    swift_bridgeObjectRetain();
    CGFloat v5 = (_DWORD *)(v2 + 48);
    do
    {
      uint64_t v6 = *((void *)v5 - 2);
      uint64_t v7 = *((void *)v5 - 1);
      unsigned int v8 = *v5;
      v5 += 6;
      v4(v6, v7, v8);
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void PreferencesOutputs.debugProperties.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *PreferencesOutputs.debugProperties.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*PreferencesOutputs.debugProperties.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*PreferencesOutputs.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  if (v4)
  {
    CGFloat v5 = (_DWORD *)(*(void *)v3 + 48);
    while (*((void *)v5 - 2) != a2)
    {
      v5 += 6;
      if (!--v4) {
        goto LABEL_5;
      }
    }
    char v6 = 0;
    LODWORD(v4) = *v5;
  }
  else
  {
LABEL_5:
    char v6 = 1;
  }
  *(_DWORD *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 28) = v6;
  return _ViewOutputs.subscript.modify;
}

void (*PreferencesOutputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(ValueMetadata ***a1)
{
  double v9 = malloc(0x28uLL);
  *a1 = v9;
  _OWORD v9[2] = a4;
  v9[3] = v4;
  void *v9 = a2;
  v9[1] = a3;
  unint64_t v10 = PreferencesOutputs.subscript.getter(a2, a3, a4);
  *((_DWORD *)v9 + 8) = v10;
  *((unsigned char *)v9 + 36) = BYTE4(v10) & 1;
  return _ViewOutputs.subscript.modify;
}

ValueMetadata *type metadata accessor for PreferencesOutputs()
{
  return &type metadata for PreferencesOutputs;
}

ValueMetadata *type metadata accessor for PreferencesOutputs.KeyValue()
{
  return &type metadata for PreferencesOutputs.KeyValue;
}

double static CGRect.defaultAnchor.getter()
{
  return 0.0;
}

double protocol witness for static AnchorProtocol.defaultAnchor.getter in conformance CGRect@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void protocol witness for AnchorProtocol.prepare(geometry:) in conformance CGRect(uint64_t a1@<X8>)
{
  *(double *)a1 = CGRect.prepare(geometry:)(*v1, v1[1], v1[2], v1[3]);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
}

void protocol witness for static AnchorProtocol.hashValue(_:into:) in conformance CGRect(double *a1)
{
}

double static UnitRect.defaultAnchor.getter()
{
  return 0.0;
}

double *static Anchor.Source<A>.rect(_:)(double a1, double a2, double a3, double a4)
{
  type metadata accessor for AnchorBox<CGRect>();
  double result = (double *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

void specialized static CGRect.hashValue(_:into:)(double a1, double a2, double a3, double a4)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)&a4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
}

void type metadata accessor for AnchorBox<CGRect>()
{
  if (!lazy cache variable for type metadata for AnchorBox<CGRect>)
  {
    type metadata accessor for CGRect(255);
    unint64_t v0 = type metadata accessor for AnchorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnchorBox<CGRect>);
    }
  }
}

id static CoreGlue.shared.getter()
{
  return static CoreGlue.shared.getter(&one-time initialization token for shared, (void **)&static CoreGlue.shared);
}

void static CoreGlue.shared.setter(void *a1)
{
}

uint64_t (*static CoreGlue.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void CoreGlue.maxVelocity(_:)()
{
}

Swift::Void __swiftcall CoreGlue.nextUpdate(nextTime:interval:reason:)(SwiftUI::Time nextTime, Swift::Double interval, Swift::UInt32_optional reason)
{
}

Swift::Bool __swiftcall CoreGlue.hasTestHost()()
{
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CoreGlue.isInstantiated(graph:)()
{
}

void CoreGlue.defaultImplicitRootType.getter()
{
}

void CoreGlue.defaultSpacing.getter()
{
}

void CoreGlue.makeDefaultLayoutComputer()()
{
}

void CoreGlue.makeDefaultLayoutComputer(graph:)()
{
}

void CoreGlue.startChildGeometries(_:)()
{
}

uint64_t CoreGlue.StartChildGeometriesParameters.init(recorder:parentSize:origin:attributeID:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *(void *)a4 = result;
  long long v6 = a2[1];
  *(_OWORD *)(a4 + 8) = *a2;
  *(_OWORD *)(a4 + 24) = v6;
  *(double *)(a4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a5;
  *(double *)(a4 + 48) = a6;
  *(_DWORD *)(a4 + 56) = a3;
  return result;
}

void CoreGlue.endChildGeometries(_:)()
{
}

uint64_t CoreGlue.EndChildGeometriesParameters.init(recorder:geometries:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void CoreGlue.makeLayoutView<A>(root:inputs:body:)()
{
}

void CoreGlue.addDisplayListTreeValue(outputs:)()
{
}

void CoreGlue.updateData(_:value:)()
{
}

void CoreGlue.defaultOpenURLAction(env:)()
{
}

void CoreGlue.defaultOpenSensitiveURLAction()()
{
}

id CoreGlue.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id CoreGlue.init()()
{
  return CoreGlue.init()(type metadata accessor for CoreGlue);
}

id CoreGlue.__deallocating_deinit()
{
  return CoreGlue.__deallocating_deinit(type metadata accessor for CoreGlue);
}

uint64_t CoreGlue.DefaultImplicitRootTypeResult.value.getter()
{
  return *(void *)v0;
}

uint64_t CoreGlue.DefaultImplicitRootTypeResult.value.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*CoreGlue.DefaultImplicitRootTypeResult.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.DefaultImplicitRootTypeResult.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t CoreGlue.MakeDefaultLayoutComputerResult.value.getter()
{
  return *v0;
}

uint64_t CoreGlue.MakeDefaultLayoutComputerResult.value.setter(uint64_t result)
{
  *id v1 = result;
  return result;
}

uint64_t (*CoreGlue.MakeDefaultLayoutComputerResult.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.StartChildGeometriesParameters.recorder.getter()
{
  return swift_retain();
}

uint64_t CoreGlue.StartChildGeometriesParameters.recorder.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *id v1 = a1;
  return result;
}

uint64_t (*CoreGlue.StartChildGeometriesParameters.recorder.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 CoreGlue.StartChildGeometriesParameters.parentSize.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  long long v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 CoreGlue.StartChildGeometriesParameters.parentSize.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*CoreGlue.StartChildGeometriesParameters.parentSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double CoreGlue.StartChildGeometriesParameters.origin.getter()
{
  return *(double *)(v0 + 40);
}

void CoreGlue.StartChildGeometriesParameters.origin.setter(double a1, double a2)
{
  *(double *)(v2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*CoreGlue.StartChildGeometriesParameters.origin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.StartChildGeometriesParameters.attributeID.getter()
{
  return *(unsigned int *)(v0 + 56);
}

uint64_t CoreGlue.StartChildGeometriesParameters.attributeID.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*CoreGlue.StartChildGeometriesParameters.attributeID.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.EndChildGeometriesParameters.recorder.getter()
{
  return swift_retain();
}

uint64_t CoreGlue.EndChildGeometriesParameters.recorder.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CoreGlue.EndChildGeometriesParameters.recorder.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.EndChildGeometriesParameters.geometries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreGlue.EndChildGeometriesParameters.geometries.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CoreGlue.EndChildGeometriesParameters.geometries.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id static CoreGlue2.shared.getter()
{
  return static CoreGlue.shared.getter(&one-time initialization token for shared, (void **)&static CoreGlue2.shared);
}

id static CoreGlue.shared.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  long long v3 = *a2;

  return v3;
}

void static CoreGlue2.shared.setter(void *a1)
{
}

void static CoreGlue.shared.setter(void *a1, void *a2, void **a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *a3;
  *a3 = a1;
}

uint64_t (*static CoreGlue2.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

Swift::Void __swiftcall CoreGlue2.initializeTestApp()()
{
}

Swift::Bool_optional __swiftcall CoreGlue2.isStatusBarHidden()()
{
  result.SwiftUI::GraphHost::ConstantID value = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CoreGlue2.configureDefaultEnvironment(_:)()
{
}

void CoreGlue2.configureEmptyEnvironment(_:)()
{
}

void CoreGlue2.makeRootView(base:rootFocusScope:)()
{
}

void CoreGlue2.systemDefaultDynamicTypeSize.getter()
{
}

void CoreGlue2.codableAttachmentCellType.getter()
{
}

void CoreGlue2.linkURL(_:)()
{
}

uint64_t CoreGlue2.linkURL(at:in:stringDrawing:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(double *)Swift::UInt64 v8 = a2;
  *(double *)&v8[1] = a3;
  *(double *)&v8[2] = a4;
  *(double *)&v8[3] = a5;
  v8[4] = a1;
  long long v6 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *v5) + 0x88);
  swift_retain();
  v6(v8);

  return swift_release();
}

uint64_t CoreGlue2.LinkURLParameters.init(point:size:stringDrawing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(void *)(a2 + 32) = result;
  return result;
}

void CoreGlue2.transformingEquivalentAttributes(_:)()
{
}

void CoreGlue2.configure(textContainer:exclusionPaths:)()
{
}

void CoreGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)()
{
}

id CoreGlue2.init()()
{
  return CoreGlue.init()(type metadata accessor for CoreGlue2);
}

id CoreGlue.init()(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_init);
}

id CoreGlue2.__deallocating_deinit()
{
  return CoreGlue.__deallocating_deinit(type metadata accessor for CoreGlue2);
}

id CoreGlue.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t CoreGlue2.CodableAttachmentCellTypeResult.value.getter()
{
  return *(void *)v0;
}

uint64_t CoreGlue2.CodableAttachmentCellTypeResult.value.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *objc_super v3 = result;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*CoreGlue2.CodableAttachmentCellTypeResult.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue2.CodableAttachmentCellTypeResult.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

double CoreGlue2.LinkURLParameters.point.getter()
{
  return *(double *)v0;
}

void CoreGlue2.LinkURLParameters.point.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*CoreGlue2.LinkURLParameters.point.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double CoreGlue2.LinkURLParameters.size.getter()
{
  return *(double *)(v0 + 16);
}

void CoreGlue2.LinkURLParameters.size.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*CoreGlue2.LinkURLParameters.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue2.LinkURLParameters.stringDrawing.getter()
{
  return swift_retain();
}

uint64_t CoreGlue2.LinkURLParameters.stringDrawing.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CoreGlue2.LinkURLParameters.stringDrawing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t method lookup function for CoreGlue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CoreGlue);
}

uint64_t dispatch thunk of CoreGlue.maxVelocity(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x50))();
}

uint64_t dispatch thunk of CoreGlue.nextUpdate(nextTime:interval:reason:)(uint64_t a1, unint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0x58))(a1, a2 | ((HIDWORD(a2) & 1) << 32));
}

uint64_t dispatch thunk of CoreGlue.hasTestHost()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CoreGlue.isInstantiated(graph:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CoreGlue.defaultImplicitRootType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CoreGlue.defaultSpacing.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CoreGlue.makeDefaultLayoutComputer()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CoreGlue.makeDefaultLayoutComputer(graph:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CoreGlue.startChildGeometries(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CoreGlue.endChildGeometries(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CoreGlue.makeLayoutView<A>(root:inputs:body:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CoreGlue.addDisplayListTreeValue(outputs:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CoreGlue.updateData(_:value:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CoreGlue.defaultOpenURLAction(env:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CoreGlue.defaultOpenSensitiveURLAction()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

ValueMetadata *type metadata accessor for CoreGlue.DefaultImplicitRootTypeResult()
{
  return &type metadata for CoreGlue.DefaultImplicitRootTypeResult;
}

ValueMetadata *type metadata accessor for CoreGlue.MakeDefaultLayoutComputerResult()
{
  return &type metadata for CoreGlue.MakeDefaultLayoutComputerResult;
}

uint64_t initializeWithCopy for CoreGlue.StartChildGeometriesParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CoreGlue.StartChildGeometriesParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy60_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CoreGlue.StartChildGeometriesParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreGlue.StartChildGeometriesParameters(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 60)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreGlue.StartChildGeometriesParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 6specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 6specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreGlue.StartChildGeometriesParameters()
{
  return &type metadata for CoreGlue.StartChildGeometriesParameters;
}

void *initializeBufferWithCopyOfBuffer for CoreGlue.EndChildGeometriesParameters(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CoreGlue.EndChildGeometriesParameters(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CoreGlue.EndChildGeometriesParameters(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CoreGlue.EndChildGeometriesParameters()
{
  return &type metadata for CoreGlue.EndChildGeometriesParameters;
}

uint64_t method lookup function for CoreGlue2(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CoreGlue2);
}

uint64_t dispatch thunk of CoreGlue2.initializeTestApp()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x50))();
}

uint64_t dispatch thunk of CoreGlue2.isStatusBarHidden()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of CoreGlue2.configureDefaultEnvironment(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CoreGlue2.configureEmptyEnvironment(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CoreGlue2.makeRootView(base:rootFocusScope:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CoreGlue2.systemDefaultDynamicTypeSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CoreGlue2.codableAttachmentCellType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CoreGlue2.linkURL(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CoreGlue2.linkURL(at:in:stringDrawing:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CoreGlue2.transformingEquivalentAttributes(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CoreGlue2.configure(textContainer:exclusionPaths:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CoreGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t getEnumTagSinglePayload for CoreGlue2.CodableAttachmentCellTypeResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreGlue2.CodableAttachmentCellTypeResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreGlue2.CodableAttachmentCellTypeResult()
{
  return &type metadata for CoreGlue2.CodableAttachmentCellTypeResult;
}

ValueMetadata *type metadata accessor for CoreGlue2.LinkURLParameters()
{
  return &type metadata for CoreGlue2.LinkURLParameters;
}

uint64_t _ContainerValueWritingModifier.keyPath.getter()
{
  return swift_retain();
}

uint64_t _ContainerValueWritingModifier.keyPath.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_ContainerValueWritingModifier.keyPath.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ContainerValueWritingModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t _ContainerValueWritingModifier.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 28), a1);
}

uint64_t (*_ContainerValueWritingModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ContainerValueWritingModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return a3(a1, &v8);
}

uint64_t static _ContainerValueWritingModifier._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _ContainerValueWritingModifier<A>(long long *a1, uint64_t (*a2)(long long *))
{
  return static _ContainerValueWritingModifier._viewListCount(inputs:body:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for _ContainerValueWritingModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for _ContainerValueWritingModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x245ECED30);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

void *static DefaultDescriptionAttribute.allCases.getter()
{
  return &outlined read-only object #0 of static DefaultDescriptionAttribute.allCases.getter;
}

uint64_t static DefaultDescriptionAttribute.geometry.getter()
{
  return specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static DefaultDescriptionAttribute.geometry.getter);
}

uint64_t static DefaultDescriptionAttribute.relatedToCornerRadius.getter()
{
  return specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static DefaultDescriptionAttribute.relatedToCornerRadius.getter);
}

SwiftUI::DefaultDescriptionAttribute_optional __swiftcall DefaultDescriptionAttribute.init(rawValue:)(Swift::String rawValue)
{
  int v2 = v1;
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.SwiftUI::GraphHost::ConstantID value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 11;
  switch(v3)
  {
    case 0:
      goto LABEL_13;
    case 1:
      char v5 = 1;
      goto LABEL_13;
    case 2:
      char v5 = 2;
      goto LABEL_13;
    case 3:
      char v5 = 3;
      goto LABEL_13;
    case 4:
      char v5 = 4;
      goto LABEL_13;
    case 5:
      char v5 = 5;
      goto LABEL_13;
    case 6:
      char v5 = 6;
      goto LABEL_13;
    case 7:
      char v5 = 7;
      goto LABEL_13;
    case 8:
      char v5 = 8;
      goto LABEL_13;
    case 9:
      char v5 = 9;
      goto LABEL_13;
    case 10:
      char v5 = 10;
LABEL_13:
      char v6 = v5;
      break;
    case 11:
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    case 24:
      char v6 = 24;
      break;
    case 25:
      char v6 = 25;
      break;
    case 26:
      char v6 = 26;
      break;
    case 27:
      char v6 = 27;
      break;
    case 28:
      char v6 = 28;
      break;
    default:
      char v6 = 29;
      break;
  }
  *int v2 = v6;
  return result;
}

uint64_t DefaultDescriptionAttribute.rawValue.getter()
{
  uint64_t result = 1952671090;
  switch(*v0)
  {
    case 1:
      return 0x6E696769726FLL;
    case 2:
      return 0x696F507472617473;
    case 3:
      return 0x746E696F50646E65;
    case 4:
      return 0x726F66736E617274;
    case 5:
      return 0x7370696C63;
    case 6:
      uint64_t v2 = 0x72656E726F63;
      return v2 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
    case 7:
    case 0xC:
    case 0x1B:
      return 0xD000000000000011;
    case 8:
      return 0x7974696361706FLL;
    case 9:
      return 0x6957726564726F62;
    case 0xA:
      uint64_t v3 = 0x726564726F62;
      goto LABEL_17;
    case 0xB:
      return 0x756F72676B636162;
    case 0xD:
      return 0x55656C6261736964;
    case 0xE:
      return 0x704F776F64616873;
    case 0xF:
      uint64_t v2 = 0x776F64616873;
      return v2 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
    case 0x10:
      uint64_t v3 = 0x776F64616873;
LABEL_17:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
      break;
    case 0x11:
      uint64_t result = 0x664F776F64616873;
      break;
    case 0x12:
      uint64_t result = 0x6150776F64616873;
      break;
    case 0x13:
      uint64_t result = 0xD000000000000012;
      break;
    case 0x14:
    case 0x15:
      uint64_t result = 0x73746E65746E6F63;
      break;
    case 0x16:
      uint64_t result = 0xD000000000000015;
      break;
    case 0x17:
      uint64_t result = 0x686353726F6C6F63;
      break;
    case 0x18:
      uint64_t result = 0x737265746C6966;
      break;
    case 0x19:
    case 0x1A:
      uint64_t result = 0x746E656964617267;
      break;
    case 0x1C:
      uint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DefaultDescriptionAttribute()
{
  uint64_t v0 = DefaultDescriptionAttribute.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == DefaultDescriptionAttribute.rawValue.getter() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DefaultDescriptionAttribute()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DefaultDescriptionAttribute()
{
  DefaultDescriptionAttribute.rawValue.getter();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DefaultDescriptionAttribute()
{
  return Hasher._finalize()();
}

SwiftUI::DefaultDescriptionAttribute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DefaultDescriptionAttribute(Swift::String *a1)
{
  return DefaultDescriptionAttribute.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DefaultDescriptionAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DefaultDescriptionAttribute.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance DefaultDescriptionAttribute(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static DefaultDescriptionAttribute.allCases.getter;
}

uint64_t specialized static DefaultDescriptionAttribute.all.getter()
{
  uint64_t v5 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of static DefaultDescriptionAttribute.allCases.getter);
  uint64_t v0 = *(void *)&static _TestApp.testIntents;
  if (static _TestApp.testIntents)
  {
    uint64_t v2 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static DefaultDescriptionAttribute.all.getter);
    specialized Set._subtract<A>(_:)(v2);
    swift_bridgeObjectRelease();
    uint64_t v0 = *(void *)&static _TestApp.testIntents;
    if ((static _TestApp.testIntents & 8) == 0)
    {
LABEL_3:
      if ((v0 & 0x40000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((static _TestApp.testIntents & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v3 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #1 of static DefaultDescriptionAttribute.all.getter);
  specialized Set._subtract<A>(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v0 = *(void *)&static _TestApp.testIntents;
  if ((*(void *)&static _TestApp.testIntents & 0x40000000000000) != 0)
  {
LABEL_4:
    if ((v0 & 0x2000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  specialized Set._Variant.remove(_:)(7, &v4);
  uint64_t v0 = *(void *)&static _TestApp.testIntents;
  if ((static _TestApp.testIntents & 0x2000) != 0)
  {
LABEL_5:
    if ((v0 & 0x40000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  specialized Set._Variant.remove(_:)(22, &v4);
  uint64_t v0 = *(void *)&static _TestApp.testIntents;
  if ((static _TestApp.testIntents & 0x40000) != 0)
  {
LABEL_6:
    if ((v0 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  specialized Set._Variant.remove(_:)(25, &v4);
  specialized Set._Variant.remove(_:)(26, &v4);
  specialized Set._Variant.remove(_:)(27, &v4);
  specialized Set._Variant.remove(_:)(28, &v4);
  uint64_t v0 = *(void *)&static _TestApp.testIntents;
  if ((static _TestApp.testIntents & 0x100000) == 0)
  {
LABEL_7:
    uint64_t result = v5;
    if ((v0 & 0x8000000000000) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_14:
  specialized Set._Variant.remove(_:)(8, &v4);
  uint64_t result = v5;
  if ((*(void *)&static _TestApp.testIntents & 0x8000000000000) == 0) {
    return result;
  }
LABEL_15:
  if (*(void *)(result + 16))
  {
    specialized Set._Variant.remove(_:)(byte_26FA6F0C8, &v4);
    specialized Set._Variant.remove(_:)(byte_26FA6F0C9, &v4);
    return v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DefaultDescriptionAttribute] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DefaultDescriptionAttribute] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DefaultDescriptionAttribute] and conformance [A])
  {
    type metadata accessor for [DefaultDescriptionAttribute]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DefaultDescriptionAttribute] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [DefaultDescriptionAttribute]()
{
  if (!lazy cache variable for type metadata for [DefaultDescriptionAttribute])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [DefaultDescriptionAttribute]);
    }
  }
}

uint64_t getEnumTagSinglePayload for DefaultDescriptionAttribute(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1D;
  int v8 = v6 - 29;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DefaultDescriptionAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE3)
  {
    unsigned int v6 = ((a2 - 228) >> 8) + 1;
    *unint64_t result = a2 + 28;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245ECF8A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 28;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultDescriptionAttribute()
{
  return &type metadata for DefaultDescriptionAttribute;
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(char a1, char a2)
{
  BOOL v3 = a2 != 3 && a2 == a1;
  if (a1 == 3) {
    return a2 == 3;
  }
  else {
    return v3;
  }
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.AccessibilityTextAttributeResolverKey()
{
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for DefaultAccentColorProvider.Type?, &lazy cache variable for type metadata for DefaultAccentColorProvider.Type, &lazy cache variable for type metadata for DefaultAccentColorProvider);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SystemAccentValueProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for SystemAccentValueProvider.Type?, &lazy cache variable for type metadata for SystemAccentValueProvider.Type, &lazy cache variable for type metadata for SystemAccentValueProvider);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance SystemAccentValueKey(char *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  int v3 = *a2;
  BOOL result = v3 == 10 && v2 == 10;
  if (v2 != 10 && v3 != 10) {
    return qword_2461F3B88[v2] == qword_2461F3B88[(char)v3];
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.CoreUINamedColorProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for CoreUINamedColorProvider.Type?, &lazy cache variable for type metadata for CoreUINamedColorProvider.Type, &lazy cache variable for type metadata for CoreUINamedColorProvider);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance OpenURLActionKey()
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance OpenURLActionKey();
}

{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for OpenURLAction?);
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ContentShapesKey()
{
  return AGCompareValues();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ContainerBackgroundKind.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL result = v3 == 6 && v2 == 6;
  if (v2 != 6 && v3 != 6)
  {
    BOOL v6 = v3 == 5;
    BOOL v8 = v3 != 5 && v2 == v3;
    if (v2 == 5) {
      return v6;
    }
    else {
      return v8;
    }
  }
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.__Key_textShape(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  if (*(void *)a1 != 2)
  {
    if (v2 == 2 || ((*(void *)a2 ^ *(void *)a1) & 1) != 0) {
      return 0;
    }
    return *(double *)(a1 + 8) == *(double *)(a2 + 8) && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2 == 2;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultSeparatorShapeStyleKey()
{
  return AGCompareValues();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TextAlignmentKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL v4 = v3 == 3;
  BOOL v6 = v3 != 3 && v2 == v3;
  if (v2 == 3) {
    return v4;
  }
  else {
    return v6;
  }
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.LineLimitKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0) {
    return (*(void *)a1 == *(void *)a2) & ~result;
  }
  return result;
}

uint64_t EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

uint64_t EnvironmentValues.bridgedEnvironmentResolver.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.bridgedEnvironmentResolver : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    uint64_t v6 = v5;
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    uint64_t v6 = v8;
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

void (*EnvironmentValues.bridgedEnvironmentResolver.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    uint64_t v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *uint64_t v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.bridgedEnvironmentResolver.modify;
}

void EnvironmentValues.bridgedEnvironmentResolver.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[5];
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *(void *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

void (*EnvironmentValues.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  _OWORD v9[2] = a4;
  v9[3] = v4;
  void *v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[6] = malloc(v12);
  void v9[7] = malloc(v12);
  EnvironmentValues.subscript.getter(a2, a3, a4);
  return EnvironmentValues.subscript.modify;
}

void EnvironmentValues.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  uint64_t v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    specialized EnvironmentValues.subscript.setter((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    specialized EnvironmentValues.subscript.setter((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ContainerShapeKey()
{
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.Key()
{
  return AGCompareValues();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.AllowedDynamicRangeKey(char *a1, char *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.CUIAssetMatchTypesKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance FallbackFontProviderKey()
{
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance VibrantColorStyleKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for VibrantColorStyle.Type?, &lazy cache variable for type metadata for VibrantColorStyle.Type, &lazy cache variable for type metadata for VibrantColorStyle);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance AllowsVibrantBlendingKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v4 & 1) == 0) ^ v2;
  }
  return v3 & 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance PlacementTintKey()
{
  return AGCompareValues();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v11 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
    uint64_t v13 = v12;
    swift_release_n();
    swift_release_n();
    if (v11) {
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v13 + 16))(a2, v5, a1, a3, *(void *)(a4 + 8), v11, v13);
    }
  }
  else
  {
    uint64_t v15 = swift_retain_n();
    uint64_t v11 = specialized closure #1 in PropertyList.subscript.getter(v15, (uint64_t)&v17);
    uint64_t v13 = v16;
    swift_release_n();
    if (v11) {
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v13 + 16))(a2, v5, a1, a3, *(void *)(a4 + 8), v11, v13);
    }
  }
  return EnvironmentValues.setValue<A>(_:for:)(a1, a2, a3, *(void *)(a4 + 8));
}

uint64_t sub_245ED0854(uint64_t *a1)
{
  return EnvironmentValues.bridgedEnvironmentResolver.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of static EnvironmentKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static EnvironmentKey._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static DerivedEnvironmentKey.value(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static BridgedEnvironmentResolver.read<A>(for:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of static BridgedEnvironmentResolver.write<A>(for:to:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

ValueMetadata *type metadata accessor for EnvironmentValues.BridgedEnvironmentResolverKey()
{
  return &type metadata for EnvironmentValues.BridgedEnvironmentResolverKey;
}

uint64_t Bindable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Bindable.wrappedValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Bindable.init(wrappedValue:)()
{
}

void Bindable<A>.init(wrappedValue:)()
{
}

void *Bindable<A>.init(projectedValue:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t Bindable<A>.id.getter()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t protocol witness for Identifiable.id.getter in conformance <A> Bindable<A>()
{
  return Bindable<A>.id.getter();
}

uint64_t getEnumTagSinglePayload for Bindable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Bindable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245ED0D10);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

void Bindable.init(projectedValue:)()
{
}

uint64_t OptionSet.setValue(_:for:)(uint64_t a1)
{
  double v3 = MEMORY[0x270FA5388](a1);
  if (v4)
  {
    (*(void (**)(char *, double))(v2 + 16))((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    return dispatch thunk of SetAlgebra.formUnion(_:)();
  }
  else
  {
    return dispatch thunk of SetAlgebra.subtract(_:)();
  }
}

uint64_t isDeployedOnOrAfter(_:)(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504) {
    return dyld_program_minos_at_least();
  }
  else {
    return dword_26B0F4500 >= v1;
  }
}

void Semantics.prior.getter(_DWORD *a1@<X8>)
{
  if (*v1) {
    *a1 = *v1 - 1;
  }
  else {
    __break(1u);
  }
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2_1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_1.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2_3(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_3.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v3(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v3.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v4_4(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v4_4.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v5(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v5_2(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5_2.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v6(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v6.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v6_1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v6_1.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance Semantics.DismissPopsInNavigationSplitViewRoots()
{
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.DismissPopsInNavigationSplitViewRoots.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504) {
    return dyld_program_minos_at_least();
  }
  else {
    return dword_26B0F4500 >= v0;
  }
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnabledFeature(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static EnabledFeature.introduced);
}

BOOL static Semantics.< infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t Semantics.description.getter()
{
  uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 45;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v1._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 45;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

void Semantics.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Semantics.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int Semantics.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Semantics(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Semantics(_DWORD *a1, _DWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Semantics(_DWORD *a1, _DWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Semantics(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

BOOL static SemanticRequirement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SemanticRequirement.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SemanticRequirement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Semantics.Forced.init()@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for firstRelease != -1) {
    swift_once();
  }
  uint64_t result = dyld_program_sdk_at_least();
  if (result) {
    int v3 = 0;
  }
  else {
    int v3 = -2;
  }
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = result;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = result;
  return result;
}

uint64_t static Semantics.forced.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  char v3 = byte_26B0F44FC;
  int v4 = dword_26B0F4500;
  char v5 = byte_26B0F4504;
  *(_DWORD *)a1 = static Semantics.forced;
  *(unsigned char *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return result;
}

uint64_t static Semantics.forced.setter(uint64_t a1)
{
  int v1 = *(_DWORD *)a1;
  char v2 = *(unsigned char *)(a1 + 4);
  int v3 = *(_DWORD *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 12);
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static Semantics.forceCGFloat d = v1;
  byte_26B0F44FC = v2;
  dword_26B0F4500 = v3;
  byte_26B0F4504 = v4;
  return result;
}

uint64_t (*static Semantics.forced.modify())()
{
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t Semantics.test<A>(as:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  int v4 = *v2;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v5 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  int v7 = *v6;
  char v8 = *((unsigned char *)v6 + 4);
  v5(v11, 0);
  swift_endAccess();
  swift_beginAccess();
  int v12 = v4;
  char v13 = 0;
  swift_setAtWritableKeyPath();
  uint64_t v9 = swift_endAccess();
  a2(v9);
  swift_beginAccess();
  int v12 = v7;
  char v13 = v8;
  swift_setAtWritableKeyPath();
  return swift_endAccess();
}

void Semantics.Forced.sdk.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 4);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t Semantics.Forced.sdk.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)result;
  *(unsigned char *)(v1 + 4) = v2;
  return result;
}

uint64_t (*Semantics.Forced.sdk.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Semantics.Forced.deploymentTarget.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 12);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 8);
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t Semantics.Forced.deploymentTarget.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 4);
  *(_DWORD *)(v1 + 8) = *(_DWORD *)result;
  *(unsigned char *)(v1 + 12) = v2;
  return result;
}

uint64_t (*Semantics.Forced.deploymentTarget.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *static Semantics.firstRelease.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for firstRelease, &static Semantics.firstRelease, a1);
}

void static Semantics.latest.getter(_DWORD *a1@<X8>)
{
  *a1 = -2;
}

void static Semantics.maximal.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

void *static Semantics.v1.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v1, &static Semantics.v1, a1);
}

uint64_t one-time initialization function for v1_3_1()
{
  uint64_t result = swiftUI_v1_3_1_os_versions();
  static Semantics.v1_3_1 = HIDWORD(result);
  return result;
}

void *static Semantics.v1_3_1.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v1_3_1, &static Semantics.v1_3_1, a1);
}

uint64_t one-time initialization function for v1_4()
{
  uint64_t result = swiftUI_v1_4_os_versions();
  static Semantics.v1_4 = HIDWORD(result);
  return result;
}

void *static Semantics.v1_4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(one-time initialization token for v1_4, &static Semantics.v1_4, a1);
}

void *static Semantics.v2_1.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v2_1, &static Semantics.v2_1, a1);
}

void *static Semantics.v2_3.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v2_3, &static Semantics.v2_3, a1);
}

uint64_t one-time initialization function for v3_4()
{
  uint64_t result = swiftUI_v3_4_os_versions();
  static Semantics.v3_4 = HIDWORD(result);
  return result;
}

void *static Semantics.v3_4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v3_4, &static Semantics.v3_4, a1);
}

void *static Semantics.v4_4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v4_4, &static Semantics.v4_4, a1);
}

uint64_t one-time initialization function for v5_2()
{
  uint64_t result = swiftUI_v5_2_os_versions();
  static Semantics.v5_2 = HIDWORD(result);
  return result;
}

void *static Semantics.v5_2.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(one-time initialization token for v5_2, &static Semantics.v5_2, a1);
}

uint64_t one-time initialization function for v6_2()
{
  uint64_t result = swiftUI_v6_2_os_versions();
  static Semantics.v6_2 = HIDWORD(result);
  return result;
}

void *static Semantics.v6_2.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v6_2, &static Semantics.v6_2, a1);
}

uint64_t one-time initialization function for v6_4()
{
  uint64_t result = swiftUI_v6_4_os_versions();
  static Semantics.v6_4 = HIDWORD(result);
  return result;
}

void *static Semantics.v6_4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(one-time initialization token for v6_4, &static Semantics.v6_4, a1);
}

unint64_t lazy protocol witness table accessor for type Semantics and conformance Semantics()
{
  unint64_t result = lazy protocol witness table cache variable for type Semantics and conformance Semantics;
  if (!lazy protocol witness table cache variable for type Semantics and conformance Semantics)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Semantics and conformance Semantics);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SemanticRequirement and conformance SemanticRequirement()
{
  unint64_t result = lazy protocol witness table cache variable for type SemanticRequirement and conformance SemanticRequirement;
  if (!lazy protocol witness table cache variable for type SemanticRequirement and conformance SemanticRequirement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SemanticRequirement and conformance SemanticRequirement);
  }
  return result;
}

ValueMetadata *type metadata accessor for Semantics()
{
  return &type metadata for Semantics;
}

unsigned char *storeEnumTagSinglePayload for SemanticRequirement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245ED1C38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SemanticRequirement()
{
  return &type metadata for SemanticRequirement;
}

uint64_t getEnumTagSinglePayload for Semantics.Forced(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Semantics.Forced(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 13) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Semantics.Forced()
{
  return &type metadata for Semantics.Forced;
}

uint64_t View.anchorPreference<A, B>(key:value:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v6 = type metadata accessor for _AnchorWritingModifier();
  return View.modifier<A>(_:)(v8, a5, v6);
}

uint64_t _AnchorWritingModifier.anchor.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_AnchorWritingModifier.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _AnchorWritingModifier.transform : <A, B>_AnchorWritingModifier<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v8;
  *(void *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Anchor<A>) -> (@out B.PreferenceKey.Value);
  a4[1] = v9;

  return swift_retain();
}

uint64_t key path setter for _AnchorWritingModifier.transform : <A, B>_AnchorWritingModifier<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v8;
  *(void *)(v9 + 48) = v7;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Anchor<A>) -> (@out B.PreferenceKey.Value);
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t _AnchorWritingModifier.transform.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _AnchorWritingModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*_AnchorWritingModifier.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnchorWritingModifier2.base.getter(uint64_t a1)
{
  return a1;
}

uint64_t _AnchorWritingModifier2.base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  uint64_t result = swift_release();
  *char v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*_AnchorWritingModifier2.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, ValueMetadata *a6@<X5>, uint64_t a7@<X6>, double *a8@<X8>)
{
  uint64_t v13 = *(void *)a2;
  int v14 = *(_DWORD *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  int v16 = *(_DWORD *)(a2 + 80);
  LODWORD(v25) = *a1;
  type metadata accessor for _AnchorWritingModifier2();
  type metadata accessor for _GraphValue();
  uint64_t v17 = type metadata accessor for _AnchorWritingModifier();
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v19 = *(void *)(a2 + 32);
  long long v21 = *(_OWORD *)(a2 + 56);
  long long v22 = *(_OWORD *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _AnchorWritingModifier2._makeView(modifier:inputs:body:), v17, v34);
  uint64_t v25 = v13;
  int v26 = v14;
  uint64_t v27 = v15;
  uint64_t v28 = v18;
  uint64_t v29 = v19;
  long long v30 = v22;
  long long v31 = v21;
  uint64_t v32 = v20;
  int v33 = v16;
  static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)(v34, &v25, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t closure #1 in static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(uint64_t a1)
{
  v5[2] = type metadata accessor for _AnchorWritingModifier2();
  uint64_t v6 = type metadata accessor for _AnchorWritingModifier();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v5, v6, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v7;
}

uint64_t partial apply for closure #1 in static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(a1);
}

uint64_t type metadata accessor for _AnchorWritingModifier2()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnchorWritingModifier2<A, B>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
}

uint64_t sub_245ED2234()
{
  return 24;
}

__n128 sub_245ED2240(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_245ED2258()
{
  return swift_getWitnessTable();
}

uint64_t sub_245ED22CC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Anchor<A>) -> (@out B.PreferenceKey.Value)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 40);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Anchor<A>) -> (@out B.PreferenceKey.Value)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 40))(*a1);
}

uint64_t static AnchorWriter.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v5(a3, 0, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AnchorWriter<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static AnchorWriter.initialValue.getter(*(void *)(a1 + 24), *(void *)(a1 + 32), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnchorWriter<A, B>()
{
  return specialized AnchorWriter.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance AnchorWriter<A, B>(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v17 - v12;
  static AnchorWriter.initialValue.getter(v4, v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v15);
  v17[-2] = a2;
  v17[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in closure #1 in AnchorWriter.value.getter()
{
  return (*(uint64_t (**)(void))(v0 + 48))(*(void *)(v0 + 64));
}

uint64_t specialized AnchorWriter.description.getter()
{
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x203A726F68636E41;
}

uint64_t static UsingGraphicsRenderer.defaultValue.getter()
{
  return 0;
}

uint64_t static ConditionalGraphicsView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  int v7 = *a1;
  uint64_t v8 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  int v13 = *(_DWORD *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v47);
  uint64_t v14 = v47;
  uint64_t v15 = v48;
  char v16 = v49;
  int v17 = HIDWORD(v49);
  uint64_t v47 = v8;
  uint64_t v49 = v10;
  long long v50 = *(_OWORD *)(a2 + 24);
  uint64_t v51 = v12;
  uint64_t v52 = v11;
  long long v53 = *(_OWORD *)(a2 + 56);
  uint64_t v54 = *(void *)(a2 + 72);
  LODWORD(v48) = v9;
  int v55 = v13;
  int v26 = v17;
  int v33 = v7;
  uint64_t v29 = v14;
  uint64_t v35 = v14;
  uint64_t v36 = v15;
  uint64_t v31 = v15;
  char v30 = v16;
  LOBYTE(v37) = v16;
  HIDWORD(v37) = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ConditionalGraphicsView.makeBody(view:inputs:fields:)((uint64_t)&v34, (uint64_t)&v44, &v33, (uint64_t)&v47, &v35, a3, a4);
  uint64_t v24 = v44;
  uint64_t v25 = v45;
  char v28 = v46;
  uint64_t v35 = v47;
  LODWORD(v36) = v48;
  uint64_t v37 = v49;
  long long v38 = v50;
  uint64_t v39 = v51;
  uint64_t v40 = v52;
  long long v41 = v53;
  uint64_t v42 = v54;
  int v43 = v55;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for ConditionalGraphValue();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = swift_getAssociatedConformanceWitness();
  ConditionalGraphValue<>.makeView(inputs:)(&v35, v18, AssociatedConformanceWitness, v20, (double *)&v44);
  uint64_t v21 = v44;
  uint64_t v22 = v45;
  if ((v28 & 1) == 0)
  {
    uint64_t v44 = v24;
    uint64_t v45 = v25;
    int v34 = v7;
    uint64_t v35 = v29;
    uint64_t v36 = v31;
    LOBYTE(v37) = v30;
    HIDWORD(v37) = v26;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v34, &v35, a3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a5 = v21;
  a5[1] = v22;
  return result;
}

uint64_t static ConditionalGraphicsView.makeBody(view:inputs:fields:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v11 = *a3;
  uint64_t v13 = *a5;
  uint64_t v12 = a5[1];
  char v14 = *((unsigned char *)a5 + 16);
  int v15 = *((_DWORD *)a5 + 5);
  if (AGTypeGetKind() - 2 < 4)
  {
    uint64_t v32 = a2;
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized find<A>(_:key:)(v16);
    if (v17)
    {
      char v18 = *(unsigned char *)(v17 + 72);
      swift_release();
      if (v18)
      {
        int v37 = v11;
        uint64_t v33 = v13;
        uint64_t v34 = v12;
        char v35 = v14;
        int v36 = v15;
        uint64_t v19 = type metadata accessor for GraphicsViewBodyAccessor();
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t result = BodyAccessor.makeBody(container:inputs:fields:)(&v40, (uint64_t)&v38, (uint64_t)&v37, a4, (uint64_t)&v33, v19, WitnessTable);
        int v22 = v40;
        long long v23 = v38;
        char v24 = 1;
LABEL_7:
        char v27 = v39;
        *(_DWORD *)a1 = v22;
        *(unsigned char *)(a1 + 4) = v24;
        *(_OWORD *)uint64_t v32 = v23;
        *(unsigned char *)(v32 + 16) = v27;
        return result;
      }
    }
    else
    {
      swift_release();
    }
    ViewBodyAccessor.init()(a6, *(void *)(a7 + 8));
    int v37 = v11;
    uint64_t v33 = v13;
    uint64_t v34 = v12;
    char v35 = v14;
    int v36 = v15;
    uint64_t v25 = type metadata accessor for ViewBodyAccessor();
    uint64_t v26 = swift_getWitnessTable();
    uint64_t result = BodyAccessor.makeBody(container:inputs:fields:)(&v40, (uint64_t)&v38, (uint64_t)&v37, a4, (uint64_t)&v33, v25, v26);
    char v24 = 0;
    int v22 = v40;
    long long v23 = v38;
    goto LABEL_7;
  }
  _StringGuts.grow(_:)(70);
  v28._object = (void *)0x800000024621DBE0;
  v28._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v28);
  v29._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x6C63206120736920;
  v30._object = (void *)0xEC0000002E737361;
  String.append(_:)(v30);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static ConditionalGraphicsView._makeViewList(view:inputs:)(int *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  uint64_t v7 = *(void *)a2;
  int v30 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v28 = *(void *)(a2 + 56);
  int v11 = *(_DWORD *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  char v26 = *(unsigned char *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v47);
  uint64_t v13 = v47;
  uint64_t v14 = v48;
  char v15 = v49;
  int v16 = HIDWORD(v49);
  uint64_t v47 = v7;
  uint64_t v49 = v8;
  long long v50 = *(_OWORD *)(a2 + 24);
  uint64_t v51 = v10;
  *(void *)&long long v52 = v9;
  *((void *)&v52 + 1) = v28;
  LODWORD(v48) = v30;
  int v53 = v11;
  uint64_t v54 = v12;
  char v55 = v26;
  int v23 = v16;
  int v32 = v6;
  uint64_t v29 = v13;
  uint64_t v31 = v14;
  uint64_t v35 = v13;
  uint64_t v36 = v14;
  char v27 = v15;
  LOBYTE(v37) = v15;
  HIDWORD(v37) = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ConditionalGraphicsView.makeBody(view:inputs:fields:)((uint64_t)&v33, (uint64_t)&v44, &v32, (uint64_t)&v47, &v35, a3, a4);
  uint64_t v21 = v44;
  uint64_t v22 = v45;
  char v25 = v46;
  LODWORD(v44) = v33;
  BYTE4(v44) = v34;
  uint64_t v35 = v47;
  LODWORD(v36) = v48;
  uint64_t v37 = v49;
  long long v38 = v50;
  uint64_t v39 = v51;
  long long v40 = v52;
  int v41 = v53;
  uint64_t v42 = v54;
  char v43 = v55;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for ConditionalGraphValue();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = swift_getAssociatedConformanceWitness();
  ConditionalGraphValue<>.makeViewList(inputs:)(&v35, v17, AssociatedConformanceWitness, v19);
  if ((v25 & 1) == 0)
  {
    uint64_t v44 = v21;
    uint64_t v45 = v22;
    int v33 = v6;
    uint64_t v35 = v29;
    uint64_t v36 = v31;
    LOBYTE(v37) = v27;
    HIDWORD(v37) = v23;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v33, &v35, a3);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static ConditionalGraphicsView._viewListCount(inputs:)(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized find<A>(_:key:)(v1);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  int v9 = v3;
  uint64_t v10 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance GraphicsViewBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
}

ValueMetadata *type metadata accessor for UsingGraphicsRenderer()
{
  return &type metadata for UsingGraphicsRenderer;
}

uint64_t dispatch thunk of ConditionalGraphicsView.graphicsBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for GraphicsViewBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

void specialized GraphicsViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v44 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v45 = (char *)v35 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v16 = (char *)v35 - v15;
  if (a2)
  {
    uint64_t v43 = a1;
    int v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
      AGGraphSetUpdate();
      uint64_t v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x270FA5388](v33);
      v35[-2] = type metadata accessor for GraphicsViewBodyAccessor();
      v35[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v35[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    int v38 = v17;
    uint64_t v39 = v16;
    uint64_t v40 = v14;
    uint64_t v41 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v19 = AGTypeID.description.getter();
    uint64_t v21 = v20;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v19;
    int v23 = (void (**)(char *, uint64_t, uint64_t))(inited + 32);
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v21;
    uint64_t v42 = a3;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v37 = inited + 72;
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v22;
    *(void *)(inited + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v24;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v44 + 16;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v10, v45, v8);
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v26 = swift_initStackObject();
    long long v46 = xmmword_2461BE2B0;
    *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v35[1] = inited;
        uint64_t v36 = a4;
        uint64_t inited = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v37, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v47);
        swift_bridgeObjectRelease();
        if (!v48)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v47);
          swift_bridgeObjectRelease();
          int v32 = *(void (**)(char *, uint64_t))(v44 + 8);
          v32(v45, v8);
          v32(v10, v8);
          a4 = v36;
          uint64_t AssociatedTypeWitness = v41;
          a3 = v42;
          int v16 = v39;
          uint64_t v14 = v40;
          goto LABEL_15;
        }
        int v23 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
        outlined destroy of CVarArg?((uint64_t)v47);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          uint64_t v29 = *v23;
          while (1)
          {
            v29(v10, v28, v8);
            uint64_t v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v46;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(void *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            uint64_t v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v47);
            swift_bridgeObjectRelease();
            if (!v48) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v47);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void static UniqueID.invalid.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void UniqueID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static UniqueID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int UniqueID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static AccessibilityChildBehaviorKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AccessibilityChildBehaviorKind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityChildBehaviorKind.CodingKeys()
{
  if (*v0) {
    return 0x6E6961746E6F63;
  }
  else {
    return 0x656E69626D6F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityChildBehaviorKind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AccessibilityChildBehaviorKind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityChildBehaviorKind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityChildBehaviorKind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityChildBehaviorKind.CombineCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityChildBehaviorKind.CombineCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityChildBehaviorKind.ContainCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityChildBehaviorKind.ContainCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityChildBehaviorKind.encode(to:)(void *a1)
{
  int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys, (uint64_t)&unk_26FA71E60, MEMORY[0x263F8E0C0]);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  int v23 = (char *)&v19 - v5;
  type metadata accessor for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityChildBehaviorKind.CombineCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys, (uint64_t)&unk_26FA71E40, v3);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v20 = (char *)&v19 - v7;
  type metadata accessor for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityChildBehaviorKind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys, (uint64_t)&unk_26FA71DB0, v3);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v19 - v11;
  char v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v13)
  {
    char v27 = 1;
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys();
    uint64_t v15 = v23;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v24;
    uint64_t v16 = v25;
  }
  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys();
    uint64_t v15 = v20;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v21;
    uint64_t v16 = v22;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  return (*v14)(v12, v9);
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys);
  }
  return result;
}

Swift::Int AccessibilityChildBehaviorKind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AccessibilityChildBehaviorKind.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v34 = a2;
  int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys, (uint64_t)&unk_26FA71E60, MEMORY[0x263F8E040]);
  uint64_t v30 = v4;
  uint64_t v33 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v32 = (char *)&v28 - v5;
  type metadata accessor for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityChildBehaviorKind.CombineCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys, (uint64_t)&unk_26FA71E40, v3);
  uint64_t v7 = v6;
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - v8;
  type metadata accessor for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityChildBehaviorKind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys, (uint64_t)&unk_26FA71DB0, v3);
  uint64_t v11 = v10;
  uint64_t v31 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v28 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys();
  uint64_t v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v28 = v7;
  uint64_t v15 = v32;
  uint64_t v16 = v33;
  uint64_t v17 = v34;
  uint64_t v35 = a1;
  char v18 = v13;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v11;
    uint64_t v24 = v23;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v24 = &type metadata for AccessibilityChildBehaviorKind;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v24, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v22);
    a1 = v35;
LABEL_6:
    uint64_t v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  int v36 = *(unsigned __int8 *)(v19 + 32);
  if (v36)
  {
    char v38 = 1;
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v20 = v31;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v11);
  }
  else
  {
    char v37 = 0;
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v27 = v31;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  }
  *uint64_t v17 = v36;
  uint64_t v25 = (uint64_t)v35;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

void type metadata accessor for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityChildBehaviorKind@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AccessibilityChildBehaviorKind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityChildBehaviorKind(void *a1)
{
  return AccessibilityChildBehaviorKind.encode(to:)(a1);
}

uint64_t AccessibilityChildBehaviorKind.protobufValue.getter()
{
  return *v0;
}

SwiftUI::AccessibilityChildBehaviorKind_optional __swiftcall AccessibilityChildBehaviorKind.init(protobufValue:)(Swift::UInt protobufValue)
{
  if (protobufValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!protobufValue) {
    char v2 = 0;
  }
  *Swift::UInt v1 = v2;
  return (SwiftUI::AccessibilityChildBehaviorKind_optional)protobufValue;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind);
  }
  return result;
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance AccessibilityChildBehaviorKind@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehaviorKind()
{
  return &type metadata for AccessibilityChildBehaviorKind;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityChildBehaviorKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245ED4628);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityChildBehaviorKind.CodingKeys()
{
  return &unk_26FA71DB0;
}

void *type metadata accessor for AccessibilityChildBehaviorKind.CombineCodingKeys()
{
  return &unk_26FA71E40;
}

void *type metadata accessor for AccessibilityChildBehaviorKind.ContainCodingKeys()
{
  return &unk_26FA71E60;
}

uint64_t specialized AccessibilityChildBehaviorKind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E69626D6F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6961746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t StyleableView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MakeDefaultRepresentation<A>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MakeResolvedRepresentation<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t AnyStyleModifier.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int a5, uint64_t a6)
{
  if (a6 != a2) {
    return 0;
  }
  swift_beginAccess();
  if (*(void *)(*(void *)(a3 + 24) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a5), (v10 & 1) != 0))
  {
    swift_endAccess();
    if ((a4 & 1) == 0) {
      AGGraphSetIndirectAttribute();
    }
    return 1;
  }
  else
  {
    swift_endAccess();
    return 0;
  }
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance AnyStyleModifier(unsigned int *a1, uint64_t a2, char a3)
{
  return AnyStyleModifier.tryToReuse(by:indirectMap:testOnly:)(*a1, *((void *)a1 + 1), a2, a3, *(_DWORD *)v3, *(void *)(v3 + 8));
}

uint64_t AutomaticStyleOverrideModifier.styleModifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t AutomaticStyleOverrideModifier.styleModifier.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2, a1);
}

uint64_t (*AutomaticStyleOverrideModifier.styleModifier.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AutomaticStyleOverrideModifier.init(_:modifier:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v10 = *a1;
  type metadata accessor for AutomaticStyleOverrideModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:), a4, v9);
  uint64_t v5 = LODWORD(v9[0]);
  uint64_t v6 = type metadata accessor for StyleModifierType();
  v9[0] = v5;
  v9[1] = v6;
  Swift::Int v7 = type metadata accessor for StyleOverrideInput();
  return _GraphInputs.subscript.setter((uint64_t)v9, v7, v7, (uint64_t)&protocol witness table for StyleOverrideInput<A>);
}

uint64_t closure #1 in static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v8[2] = type metadata accessor for AutomaticStyleOverrideModifier();
  void v8[3] = a3;
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v8, a3, MEMORY[0x263F8E628], v5, MEMORY[0x263F8E658], v6);
  return v8[5];
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AutomaticStyleOverrideModifier<A, B>(int *a1, uint64_t a2, uint64_t a3)
{
  return static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t partial apply for closure #1 in static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  return closure #1 in static AutomaticStyleOverrideModifier._makeInputs(modifier:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for AutomaticStyleOverrideModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of StyleableView.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static StyleableView.defaultStyleModifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of StyleModifier.init(style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of StyleModifier.style.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of StyleModifier.style.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of StyleModifier.style.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of StyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t getEnumTagSinglePayload for AutomaticStyleOverrideModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AutomaticStyleOverrideModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245ED5264);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_245ED528C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

ValueMetadata *type metadata accessor for StyleableViewContextInput()
{
  return &type metadata for StyleableViewContextInput;
}

uint64_t VelocitySampler.lastTime.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(result + 44));
  uint64_t v4 = *v3;
  LOBYTE(v3) = *((unsigned char *)v3 + 8);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = (_BYTE)v3;
  return result;
}

uint64_t VelocitySampler.init()@<X0>(uint64_t a1@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
  v3(a1, 1, 1, TupleTypeMetadata2);
  uint64_t v4 = (int *)type metadata accessor for VelocitySampler();
  v3(a1 + v4[9], 1, 1, TupleTypeMetadata2);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(a1 + v4[10], 1, 1, TupleTypeMetadata2);
  uint64_t v6 = a1 + v4[11];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(void *)(a1 + v4[12]) = 0x3FE8000000000000;
  return result;
}

uint64_t type metadata accessor for VelocitySampler()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t VelocitySampler.addSample(_:time:)(void (*a1)(char *, uint64_t), double *a2, uint64_t a3)
{
  CGFloat v88 = a1;
  uint64_t v89 = *(void *)(a3 + 16);
  swift_getTupleTypeMetadata2();
  uint64_t v6 = type metadata accessor for Optional();
  unsigned int v7 = *(void **)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v8);
  unsigned int v10 = (char *)&v79 - v9;
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v79 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v79 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v79 - v18;
  v24.n128_f64[0] = MEMORY[0x270FA5388](v20);
  char v26 = (char *)&v79 - v25;
  double v27 = *a2;
  uint64_t v28 = *(int *)(a3 + 44);
  double v85 = v3;
  uint64_t v29 = &v3[v28];
  double v30 = *(double *)v29;
  char v31 = v29[8];
  double v32 = *(double *)v29;
  if ((v31 & 1) == 0 && v27 < v32)
  {
    uint64_t v91 = 0;
    CFIndex v92 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    v33._countAndFlagsBits = 0x2064696C61766E49;
    v33._object = (void *)0xEF20656C706D6173;
    String.append(_:)(v33);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v34._countAndFlagsBits = 32;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    uint64_t v36 = v91;
    unint64_t v35 = (unint64_t)v92;
    uint64_t v91 = 0;
    CFIndex v92 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(27);
    v37._countAndFlagsBits = 0x6D69742068746977;
    v37._object = (void *)0xEA00000000002065;
    String.append(_:)(v37);
    double v90 = v27;
    _print_unlocked<A, B>(_:_:)();
    v38._countAndFlagsBits = 0x207473616C203E20;
    v38._object = (void *)0xED000020656D6974;
    String.append(_:)(v38);
    double v90 = v30;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v39 = v91;
    uint64_t v40 = v92;
    uint64_t v91 = v36;
    CFIndex v92 = (void *)v35;
    swift_bridgeObjectRetain();
    v41._countAndFlagsBits = v39;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized static Log.externalWarning(_:)(v91, (unint64_t)v92);
    return swift_bridgeObjectRelease();
  }
  uint64_t v84 = v21;
  uint64_t v43 = *(int *)(v22 + 48);
  uint64_t v44 = *(void *)(v89 - 8);
  int v82 = v23;
  uint64_t v83 = v44;
  uint64_t v45 = *(void (**)(char *, void (*)(void, void), __n128))(v44 + 16);
  uint64_t v86 = v22;
  uint64_t v87 = v26;
  v45(v26, (void (*)(void, void))v88, v24);
  *(double *)&v87[v43] = v27;
  v46.n128_f64[0] = v27 - v32;
  if (v27 - v32 >= 2.22044605e-16) {
    char v47 = 1;
  }
  else {
    char v47 = v31;
  }
  if (v47)
  {
    *(double *)uint64_t v29 = v27;
    v29[8] = 0;
    uint64_t v48 = v85;
    uint64_t v49 = &v85[*(int *)(a3 + 40)];
    v81 = (void (*)(char *, uint64_t, uint64_t, __n128))v7[2];
    v81(v13, (uint64_t)v49, v6, v46);
    v80 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v84 + 48);
    int v50 = v80(v13, 1, v86);
    CGFloat v88 = (void (*)(char *, uint64_t))v7[1];
    v88(v13, v6);
    uint64_t v51 = *(int *)(a3 + 36);
    long long v52 = &v48[v51];
    if (v50 == 1)
    {
      ((void (*)(char *, char *, uint64_t))v81)(v10, &v48[v51], v6);
      int v53 = v80(v10, 1, v86);
      uint64_t v54 = (void (*)(uint64_t, uint64_t))v88;
      v88(v10, v6);
      char v55 = (void (**)(uint64_t, char *, uint64_t))(v83 + 32);
      if (v53 == 1)
      {
        uint64_t v56 = v82;
        CGFloat v57 = v85;
        ((void (*)(char *, char *, uint64_t))v81)(v82, v85, v6);
        int v58 = v80(v56, 1, v86);
        v54((uint64_t)v56, v6);
        int v59 = (uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56);
        if (v58 == 1)
        {
          v54((uint64_t)v57, v6);
          uint64_t v60 = v86;
          uint64_t v61 = *(int *)(v86 + 48);
          (*v55)((uint64_t)v57, v87, v89);
          *(double *)&v57[v61] = v27;
          return (*v59)((uint64_t)v57, 0, 1, v60);
        }
        else
        {
          v54((uint64_t)v52, v6);
          uint64_t v77 = v86;
          uint64_t v78 = *(int *)(v86 + 48);
          (*v55)((uint64_t)v52, v87, v89);
          *(double *)&v52[v78] = v27;
          return (*v59)((uint64_t)v52, 0, 1, v77);
        }
      }
      v54((uint64_t)v49, v6);
      uint64_t v73 = v86;
      uint64_t v74 = *(int *)(v86 + 48);
      (*v55)((uint64_t)v49, v87, v89);
    }
    else
    {
      double v72 = (void (*)(uint64_t, uint64_t, uint64_t))v7[3];
      v72((uint64_t)v48, (uint64_t)&v48[v51], v6);
      v72((uint64_t)v52, (uint64_t)v49, v6);
      v88(v49, v6);
      uint64_t v73 = v86;
      uint64_t v74 = *(int *)(v86 + 48);
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v49, v87, v89);
    }
    *(double *)&v49[v74] = v27;
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v49, 0, 1, v73);
  }
  int v62 = &v85[*(int *)(a3 + 40)];
  CGFloat v88 = (void (*)(char *, uint64_t))v7[2];
  ((void (*)(char *, char *, uint64_t, __n128))v88)(v19, v62, v6, v46);
  uint64_t v63 = v84 + 48;
  uint64_t v84 = *(void *)(v84 + 48);
  int v64 = ((uint64_t (*)(char *, uint64_t, uint64_t))v84)(v19, 1, v86);
  CGFloat v65 = (void (*)(char *, uint64_t))v7[1];
  v65(v19, v6);
  CGFloat v66 = (uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 8);
  if (v64 == 1)
  {
    CGFloat v67 = v85;
    int v62 = &v85[*(int *)(a3 + 36)];
    ((void (*)(char *, char *, uint64_t))v88)(v16, v62, v6);
    int v68 = ((uint64_t (*)(char *, uint64_t, uint64_t))v84)(v16, 1, v86);
    v65(v16, v6);
    CGFloat v69 = (void (**)(uint64_t, char *, uint64_t))(v83 + 32);
    if (v68 == 1)
    {
      v65(v67, v6);
      uint64_t v70 = v86;
      uint64_t v71 = *(int *)(v86 + 48);
      (*v69)((uint64_t)v67, v87, v89);
      *(double *)&v67[v71] = v27;
      return (*v66)((uint64_t)v67, 0, 1, v70);
    }
    v65(v62, v6);
    uint64_t v75 = v86;
    uint64_t v76 = *(int *)(v86 + 48);
    (*v69)((uint64_t)v62, v87, v89);
  }
  else
  {
    v65(v62, v6);
    uint64_t v75 = v86;
    uint64_t v76 = *(int *)(v86 + 48);
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v62, v87, v89);
  }
  *(double *)&v62[v76] = v27;
  return (*v66)((uint64_t)v62, 0, 1, v75);
}

Swift::Void __swiftcall VelocitySampler.reset()()
{
  (*(void (**)())(*(void *)(v0 - 8) + 8))();

  VelocitySampler.init()(v1);
}

BOOL VelocitySampler.isEmpty.getter(uint64_t a1)
{
  return (*(unsigned char *)(v1 + *(int *)(a1 + 44) + 8) & 1) == 0;
}

uint64_t VelocitySampler.velocity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v103 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  CGFloat v99 = (int *)a1;
  uint64_t v90 = v4;
  uint64_t v104 = *(void *)(v4 + 8);
  uint64_t v89 = *(void *)(v104 + 8);
  uint64_t v6 = type metadata accessor for _Velocity();
  uint64_t v92 = *(void *)(v6 - 8);
  uint64_t v93 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v91 = (uint64_t)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v87 = (uint64_t)&v77 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v101 = (uint64_t)&v77 - v11;
  uint64_t v102 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v86 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  v94 = (char *)&v77 - v15;
  MEMORY[0x270FA5388](v16);
  CGFloat v96 = (char *)&v77 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  CGFloat v88 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  __n128 v24 = (char *)&v77 - v23;
  MEMORY[0x270FA5388](v25);
  double v27 = (char *)&v77 - v26;
  uint64_t v28 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](v29);
  char v31 = (char *)&v77 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  Swift::String v34 = (char *)&v77 - v33;
  double v36 = MEMORY[0x270FA5388](v35);
  CGFloat v105 = (char *)&v77 - v37;
  uint64_t v98 = v20;
  Swift::String v38 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v100 = v3;
  CGFloat v97 = v38;
  ((void (*)(char *, uint64_t, uint64_t, double))v38)(v27, v3, v19, v36);
  uint64_t v95 = v28;
  uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v106 = TupleTypeMetadata2;
  if (v39(v27, 1, TupleTypeMetadata2) == 1)
  {
    __n128 v24 = v27;
LABEL_5:
    uint64_t v45 = v103;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v24, v19);
    return static _Velocity<>.zero.getter(v5, v45);
  }
  int v82 = v31;
  double v85 = v34;
  Swift::String v41 = v105;
  uint64_t v40 = v106;
  uint64_t v42 = *(int *)(v106 + 48);
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
  uint64_t v84 = v102 + 32;
  uint64_t v83 = v43;
  v43(v105, v27, v5);
  double v44 = *(double *)&v27[v42];
  *(double *)&v41[v42] = v44;
  v97(v24, v100 + v99[9], v19);
  if (v39(v24, 1, v40) == 1)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v105, v106);
    goto LABEL_5;
  }
  uint64_t v47 = v19;
  uint64_t v48 = v106;
  uint64_t v49 = *(int *)(v106 + 48);
  int v50 = v85;
  v83(v85, v24, v5);
  double v51 = *(double *)&v24[v49];
  *(double *)&v50[v49] = v51;
  long long v52 = v96;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v53 = v90;
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, double))(v90 + 16);
  uint64_t v80 = v90 + 16;
  uint64_t v79 = v54;
  v54(v5, v90, 1.0 / (v51 - v44));
  uint64_t v55 = (uint64_t)v94;
  uint64_t v78 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  v78(v94, v52, v5);
  _Velocity.init(valuePerSecond:)(v55, v5, v101);
  uint64_t v56 = v100 + v99[10];
  CGFloat v57 = v88;
  uint64_t v81 = v47;
  v97(v88, v56, v47);
  int v58 = v57;
  if (v39(v57, 1, v48) == 1)
  {
    (*(void (**)(char *, uint64_t))(v102 + 8))(v96, v5);
    int v59 = *(void (**)(char *, uint64_t))(v95 + 8);
    uint64_t v60 = v106;
    v59(v85, v106);
    v59(v105, v60);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v57, v81);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v103, v101, v93);
  }
  else
  {
    uint64_t v61 = *(int *)(v106 + 48);
    int v62 = v82;
    v83(v82, v58, v5);
    double v63 = *(double *)&v58[v61];
    *(double *)&v62[v61] = v63;
    int v64 = v94;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v79(v5, v53, 1.0 / (v63 - v51));
    uint64_t v65 = (uint64_t)v86;
    v78(v86, v64, v5);
    uint64_t v66 = v87;
    _Velocity.init(valuePerSecond:)(v65, v5, v87);
    double v67 = *(double *)(v100 + v99[12]);
    uint64_t v107 = v53;
    uint64_t v68 = v93;
    uint64_t WitnessTable = swift_getWitnessTable();
    mix<A>(_:_:by:)(v68, WitnessTable, v91, v67);
    uint64_t v70 = v92;
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
    v71(v66, v68);
    double v72 = *(void (**)(char *, uint64_t))(v102 + 8);
    v72(v64, v5);
    uint64_t v73 = *(void (**)(char *, uint64_t))(v95 + 8);
    uint64_t v74 = v62;
    uint64_t v75 = v106;
    v73(v74, v106);
    v71(v101, v68);
    v72(v96, v5);
    v73(v85, v75);
    v73(v105, v75);
    uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32);
    v76(v101, v91, v68);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v76)(v103, v101, v68);
  }
}

uint64_t AnimatableVelocitySampler.base.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for VelocitySampler();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AnimatableVelocitySampler.base.setter(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for VelocitySampler();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*AnimatableVelocitySampler.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AnimatableVelocitySampler.init()@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return VelocitySampler.init()(a1);
}

uint64_t AnimatableVelocitySampler.init(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  VelocitySampler.init()(a2);
  uint64_t v4 = type metadata accessor for VelocitySampler();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(a2, a1, v4);
}

uint64_t AnimatableVelocitySampler.addSample(_:time:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (void (*)(char *, uint64_t))((char *)&v14 - v9);
  uint64_t v11 = *a2;
  (*(void (**)(uint64_t, uint64_t, double))(v4 + 24))(v5, v4, v8);
  uint64_t v15 = v11;
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for VelocitySampler();
  VelocitySampler.addSample(_:time:)(v10, (double *)&v15, v12);
  return (*(uint64_t (**)(void, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t AnimatableVelocitySampler.velocity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v17 - v9;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for _Velocity();
  double v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(v6 - 8) + 16))(a3, a1, v6, v12);
  uint64_t v15 = type metadata accessor for VelocitySampler();
  VelocitySampler.velocity.getter(v15, (uint64_t)v14);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 32))(v10, v6, v5);
}

uint64_t type metadata completion function for VelocitySampler()
{
  swift_getTupleTypeMetadata2();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for VelocitySampler(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 + 8;
  unint64_t v11 = v9 + 9;
  if (v7) {
    size_t v12 = v9 + 8;
  }
  else {
    size_t v12 = v9 + 9;
  }
  int v13 = *(_DWORD *)(v6 + 80);
  uint64_t v14 = v13 & 0xF8 | 7;
  uint64_t v15 = ~v14;
  if ((v13 & 0x1000F8) == 0
    && ((v12 + ((v12 + v14 + ((v12 + v14) & ~v14)) & ~v14) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    uint64_t v35 = v8 + 7;
    unint64_t v36 = v9 + 8;
    if (v7)
    {
      if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
      {
LABEL_19:
        (*(void (**)(void *, _DWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        uint64_t v23 = (char *)a1 + 7;
        __n128 v24 = (char *)a2 + 7;
        *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v7)
        {
          uint64_t v21 = (unsigned char *)((unint64_t)&v23[v36] & v15);
          uint64_t v22 = (int *)((unint64_t)&v24[v36] & v15);
          uint64_t v18 = a1;
LABEL_21:
          if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v6 + 48))(v22, v7, v5))
          {
LABEL_30:
            (*(void (**)(unsigned char *, int *, uint64_t))(v6 + 16))(v21, v22, v5);
            *(void *)((unint64_t)&v21[v35] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + v35) & 0xFFFFFFFFFFFFFFF8);
            if (v7)
            {
              double v27 = (unsigned char *)((unint64_t)&v21[v9 + 15] & v15);
              uint64_t v28 = (int *)(((unint64_t)v22 + v9 + 15) & v15);
LABEL_32:
              if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v6 + 48))(v28, v7, v5))
              {
LABEL_40:
                (*(void (**)(unsigned char *, int *, uint64_t))(v6 + 16))(v27, v28, v5);
                *(void *)((unint64_t)&v27[v35] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28
                                                                                             + v35) & 0xFFFFFFFFFFFFFFF8);
                if (!v7) {
                  v27[v36] = 0;
                }
                goto LABEL_42;
              }
LABEL_39:
              memcpy(v27, v28, v12);
LABEL_42:
              unint64_t v31 = (unint64_t)&v27[v12 + 7] & 0xFFFFFFFFFFFFFFF8;
              unint64_t v32 = ((unint64_t)v28 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v33 = *(void *)v32;
              *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
              *(void *)unint64_t v31 = v33;
              *(void *)((unint64_t)&v27[v12 + 23] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28
                                                                                                + v12
                                                                                                + 23) & 0xFFFFFFFFFFFFFFF8);
              return v18;
            }
            v21[v36] = 0;
            double v27 = (unsigned char *)((unint64_t)&v21[v9 + 16] & v15);
            uint64_t v28 = (int *)(((unint64_t)v22 + v9 + 16) & v15);
LABEL_35:
            int v29 = v9 + 8;
            if (!*((unsigned char *)v28 + v36)) {
              goto LABEL_40;
            }
            int v30 = *((unsigned __int8 *)v28 + v36) - 1;
            if (v9 != -8)
            {
              int v30 = 0;
              int v29 = *v28;
            }
            if ((v29 | v30) == 0xFFFFFFFF) {
              goto LABEL_40;
            }
            goto LABEL_39;
          }
LABEL_28:
          memcpy(v21, v22, v12);
          double v27 = (unsigned char *)((unint64_t)&v21[v12 + 7] & v15);
          uint64_t v28 = (int *)(((unint64_t)v22 + v12 + 7) & v15);
          if (v7) {
            goto LABEL_32;
          }
          goto LABEL_35;
        }
        *((unsigned char *)a1 + v36) = 0;
        uint64_t v21 = (unsigned char *)((unint64_t)&v23[v11] & v15);
        uint64_t v22 = (int *)((unint64_t)&v24[v11] & v15);
        uint64_t v18 = a1;
LABEL_24:
        int v25 = v9 + 8;
        if (!*((unsigned char *)v22 + v36)) {
          goto LABEL_30;
        }
        int v26 = *((unsigned __int8 *)v22 + v36) - 1;
        if (v9 != -8)
        {
          int v26 = 0;
          int v25 = *v22;
        }
        if ((v25 | v26) == 0xFFFFFFFF) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (!*((unsigned char *)a2 + v10)) {
        goto LABEL_19;
      }
      int v19 = *((unsigned __int8 *)a2 + v10) - 1;
      int v20 = v9 + 8;
      if (v9 != -8)
      {
        int v19 = 0;
        int v20 = *a2;
      }
      if ((v20 | v19) == 0xFFFFFFFF) {
        goto LABEL_19;
      }
    }
    uint64_t v18 = a1;
    memcpy(a1, a2, v12);
    uint64_t v21 = (unsigned char *)(((unint64_t)a1 + v12 + 7) & v15);
    uint64_t v22 = (int *)(((unint64_t)a2 + v12 + 7) & v15);
    if (v7) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  uint64_t v17 = *(void *)a2;
  *a1 = *(void *)a2;
  uint64_t v18 = (void *)(v17 + ((v14 + 16) & v15));
  swift_retain();
  return v18;
}

uint64_t destroy for VelocitySampler(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  unint64_t v6 = (*(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = v6 + 8;
  uint64_t v25 = v4;
  if (v5)
  {
    int v8 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48))(a1, v5, v3);
    uint64_t v4 = v25;
    if (v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (!*((unsigned char *)a1 + v7)
    || ((v9 = *((unsigned __int8 *)a1 + v7) - 1, v6 == -8) ? (int v10 = 0) : (v9 = 0, int v10 = *a1),
        (v10 | v9) == 0xFFFFFFFF))
  {
LABEL_9:
    (*(void (**)(_DWORD *, uint64_t))(v4 + 8))(a1, v3);
    uint64_t v4 = v25;
  }
LABEL_10:
  unint64_t v11 = v6 + 9;
  if (v5) {
    unint64_t v11 = v6 + 8;
  }
  uint64_t v12 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  unint64_t v13 = v11 + v12;
  uint64_t v14 = ~v12;
  uint64_t v15 = (_DWORD *)(((unint64_t)a1 + v11 + v12) & ~v12);
  if (v5)
  {
    int v16 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48))(v15, v5, v3);
    uint64_t v4 = v25;
    if (v16) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!*((unsigned char *)v15 + v7)
    || ((int v17 = *((unsigned __int8 *)v15 + v7) - 1, !v7) ? (v18 = 0) : (int v17 = 0, v18 = *v15),
        (v18 | v17) == 0xFFFFFFFF))
  {
LABEL_20:
    (*(void (**)(_DWORD *, uint64_t))(v4 + 8))(v15, v3);
    uint64_t v4 = v25;
  }
LABEL_21:
  int v19 = (_DWORD *)(((unint64_t)v15 + v13) & v14);
  if (v5)
  {
    uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48))(v19, v5, v3);
    uint64_t v4 = v25;
    if (result) {
      return result;
    }
    goto LABEL_30;
  }
  if (!*((unsigned char *)v19 + v7)
    || ((int v21 = *((unsigned __int8 *)v19 + v7) - 1, !v7) ? (v22 = 0) : (int v21 = 0, v22 = *v19),
        int v23 = v22 | v21,
        uint64_t result = (v23 + 1),
        v23 == -1))
  {
LABEL_30:
    __n128 v24 = *(uint64_t (**)(_DWORD *, uint64_t))(v4 + 8);
    return v24(v19, v3);
  }
  return result;
}

char *initializeWithCopy for VelocitySampler(char *a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v43 = v8 + 7;
  unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 + 8;
  uint64_t v47 = v5;
  if (v7)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5)) {
      goto LABEL_13;
    }
LABEL_9:
    if (v7) {
      size_t v13 = v9 + 8;
    }
    else {
      size_t v13 = v9 + 9;
    }
    memcpy(a1, a2, v13);
    goto LABEL_15;
  }
  if (*((unsigned char *)a2 + v10))
  {
    int v11 = *((unsigned __int8 *)a2 + v10) - 1;
    if (v9 == -8)
    {
      int v12 = 0;
    }
    else
    {
      int v11 = 0;
      int v12 = *a2;
    }
    if ((v12 | v11) != 0xFFFFFFFF) {
      goto LABEL_9;
    }
  }
LABEL_13:
  (*(void (**)(char *, int *, uint64_t))(v6 + 16))(a1, a2, v5);
  *(void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    a1[v10] = 0;
  }
LABEL_15:
  unint64_t v14 = v9 + 9;
  if (v7) {
    size_t v15 = v9 + 8;
  }
  else {
    size_t v15 = v9 + 9;
  }
  uint64_t v16 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  size_t __n = v15;
  uint64_t v45 = a1;
  size_t v17 = v15 + v16;
  unint64_t v18 = (unint64_t)&a1[v15 + v16];
  uint64_t v19 = ~v16;
  uint64_t v20 = v18 & ~v16;
  unint64_t v21 = (unint64_t)a2 + v15 + v16;
  unint64_t v22 = v10;
  int v23 = (int *)(v21 & ~v16);
  unint64_t v46 = v22;
  unint64_t v24 = v14;
  if (v7)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v21 & ~v16, v7, v47)) {
      goto LABEL_28;
    }
LABEL_25:
    uint64_t v28 = (void *)(v18 & ~v16);
    size_t v29 = __n;
    memcpy(v28, (const void *)(v21 & ~v16), __n);
    int v30 = (void *)((v17 + v20) & v19);
    unint64_t v31 = (_DWORD *)(((unint64_t)v23 + v17) & v19);
    unint64_t v32 = v45;
    unint64_t v33 = v46;
    uint64_t v34 = v47;
    if (v7) {
      goto LABEL_30;
    }
    int v35 = *((unsigned __int8 *)v31 + v46);
    if (!*((unsigned char *)v31 + v46)) {
      goto LABEL_38;
    }
LABEL_33:
    int v37 = v35 - 1;
    if (v33)
    {
      int v37 = 0;
      int v38 = *v31;
    }
    else
    {
      int v38 = 0;
    }
    if ((v38 | v37) == 0xFFFFFFFF) {
      goto LABEL_38;
    }
LABEL_37:
    memcpy(v30, v31, v29);
    goto LABEL_40;
  }
  int v25 = *((unsigned __int8 *)v23 + v22);
  if (v25)
  {
    int v26 = v25 - 1;
    int v27 = v46;
    if (v46)
    {
      int v26 = 0;
      int v27 = *v23;
    }
    if ((v27 | v26) != 0xFFFFFFFF) {
      goto LABEL_25;
    }
  }
LABEL_28:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v18 & ~v16, v21 & ~v16, v47);
  *(void *)((v43 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v23 + v43) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
  {
    unint64_t v32 = v45;
    unint64_t v33 = v46;
    *(unsigned char *)(v20 + v46) = 0;
    unint64_t v36 = v24;
    int v30 = (void *)(((v18 | v16) + v24) & v19);
    unint64_t v31 = (_DWORD *)(((v21 | v16) + v36) & v19);
    uint64_t v34 = v47;
    size_t v29 = __n;
    int v35 = *((unsigned __int8 *)v31 + v46);
    if (!*((unsigned char *)v31 + v46)) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  unint64_t v32 = v45;
  unint64_t v33 = v46;
  int v30 = (void *)(((v18 | v16) + v46) & v19);
  unint64_t v31 = (_DWORD *)(((v21 | v16) + v46) & v19);
  uint64_t v34 = v47;
  size_t v29 = __n;
LABEL_30:
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48))(v31, v7, v34)) {
    goto LABEL_37;
  }
LABEL_38:
  (*(void (**)(void *, _DWORD *, uint64_t))(v6 + 16))(v30, v31, v34);
  *(void *)(((unint64_t)v30 + v43) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v43) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    *((unsigned char *)v30 + v33) = 0;
  }
LABEL_40:
  unint64_t v39 = ((unint64_t)v30 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)unint64_t v39 = v41;
  *(void *)(((unint64_t)v30 + v29 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  return v32;
}

int *assignWithCopy for VelocitySampler(int *a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v65 = v8 + 7;
  unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v10 = v9 + 8;
  uint64_t v69 = v5;
  unint64_t v70 = v9 + 8;
  if (v7)
  {
    int v11 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
    int v12 = v11(a1, v7, v5);
    int v13 = v11(a2, v7, v5);
    size_t v10 = v9 + 8;
    if (v12)
    {
      if (!v13) {
        goto LABEL_27;
      }
LABEL_23:
      if (v7) {
        size_t v20 = v10;
      }
      else {
        size_t v20 = v9 + 9;
      }
      memcpy(a1, a2, v20);
      goto LABEL_29;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)a1 + v10)
    || ((v14 = *((unsigned __int8 *)a1 + v10) - 1, v9 == -8) ? (int v15 = 0) : (v14 = 0, int v15 = *a1),
        (v15 | v14) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)a2 + v10)) {
      goto LABEL_20;
    }
    int v18 = *((unsigned __int8 *)a2 + v10) - 1;
    if (v9 == -8)
    {
      int v19 = 0;
    }
    else
    {
      int v18 = 0;
      int v19 = *a2;
    }
    int v13 = (v19 | v18) + 1;
LABEL_18:
    if (v13)
    {
      (*(void (**)(int *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_23;
    }
LABEL_20:
    (*(void (**)(int *, int *, uint64_t))(v6 + 24))(a1, a2, v5);
    *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_29;
  }
  if (*((unsigned char *)a2 + v10))
  {
    int v16 = *((unsigned __int8 *)a2 + v10) - 1;
    if (v9 == -8)
    {
      int v17 = 0;
    }
    else
    {
      int v16 = 0;
      int v17 = *a2;
    }
    if ((v17 | v16) != 0xFFFFFFFF) {
      goto LABEL_23;
    }
  }
LABEL_27:
  (*(void (**)(int *, int *, uint64_t))(v6 + 16))(a1, a2, v5);
  *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    *((unsigned char *)a1 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  }
LABEL_29:
  unint64_t v21 = v9 + 9;
  if (v7) {
    size_t v22 = v10;
  }
  else {
    size_t v22 = v9 + 9;
  }
  uint64_t v23 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  size_t __n = v22;
  size_t v24 = v22 + v23;
  uint64_t v25 = v6;
  unint64_t v26 = (unint64_t)a1 + v22 + v23;
  int v27 = (_DWORD *)(v26 & ~v23);
  unint64_t v28 = (unint64_t)a2 + v22 + v23;
  size_t v29 = v10;
  int v30 = (_DWORD *)(v28 & ~v23);
  uint64_t v68 = v25;
  uint64_t v66 = ~v23;
  if (!v7)
  {
    if (*((unsigned char *)v27 + v29))
    {
      int v38 = *((unsigned __int8 *)v27 + v29) - 1;
      if (v29)
      {
        int v38 = 0;
        LODWORD(v29) = *v27;
      }
      int v39 = v29 | v38;
      size_t v29 = v70;
      if (v39 != -1)
      {
        unint64_t v63 = v21;
        unint64_t v64 = v28;
        if (*((unsigned char *)v30 + v70))
        {
          int v40 = *((unsigned __int8 *)v30 + v70) - 1;
          int v41 = v70;
          if (v70)
          {
            int v40 = 0;
            int v41 = *v30;
          }
          if ((v41 | v40) != 0xFFFFFFFF) {
            goto LABEL_35;
          }
        }
        goto LABEL_44;
      }
    }
    if (!*((unsigned char *)v30 + v29)) {
      goto LABEL_52;
    }
    int v45 = *((unsigned __int8 *)v30 + v29) - 1;
    int v46 = v70;
    if (v70)
    {
      int v45 = 0;
      int v46 = *v30;
    }
    int v33 = (v46 | v45) + 1;
LABEL_50:
    if (v33)
    {
      uint64_t v37 = v68;
      uint64_t v36 = v69;
      (*(void (**)(unint64_t, uint64_t))(v68 + 8))(v26 & ~v23, v69);
      uint64_t v47 = (void *)(v26 & ~v23);
      size_t v35 = __n;
      memcpy(v47, v30, __n);
      goto LABEL_53;
    }
LABEL_52:
    uint64_t v37 = v68;
    uint64_t v36 = v69;
    (*(void (**)(unint64_t, _DWORD *, uint64_t))(v68 + 24))(v26 & ~v23, v30, v69);
    *(void *)(((unint64_t)v27 + v65) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v30 + v65) & 0xFFFFFFFFFFFFFFF8);
    size_t v35 = __n;
LABEL_53:
    uint64_t v43 = (int *)(((unint64_t)v27 + v24) & v66);
    double v44 = (int *)(((unint64_t)v30 + v24) & v66);
    if (v7)
    {
LABEL_54:
      uint64_t v48 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v37 + 48);
      int v49 = v48(v43, v7, v36);
      int v50 = v48(v44, v7, v36);
      if (v49)
      {
        if (!v50)
        {
LABEL_56:
          unint64_t v51 = v70;
          goto LABEL_66;
        }
LABEL_78:
        memcpy(v43, v44, v35);
        goto LABEL_79;
      }
      goto LABEL_73;
    }
    goto LABEL_58;
  }
  unint64_t v63 = v21;
  unint64_t v64 = v28;
  unint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v25 + 48);
  int v32 = v31(v26 & ~v23, v7, v5);
  int v33 = v31((unint64_t)v30, v7, v5);
  if (!v32) {
    goto LABEL_50;
  }
  if (v33)
  {
LABEL_35:
    uint64_t v34 = (void *)(v26 & ~v23);
    size_t v35 = __n;
    memcpy(v34, v30, __n);
    uint64_t v37 = v68;
    uint64_t v36 = v69;
    goto LABEL_53;
  }
LABEL_44:
  (*(void (**)(unint64_t, _DWORD *, uint64_t))(v68 + 16))(v26 & ~v23, v30, v5);
  *(void *)(((unint64_t)v27 + v65) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v30 + v65) & 0xFFFFFFFFFFFFFFF8);
  if (v7)
  {
    uint64_t v36 = v5;
    unint64_t v42 = (v26 | v23) + v70;
    size_t v35 = __n;
    uint64_t v43 = (int *)(v42 & v66);
    double v44 = (int *)(((v64 | v23) + v70) & v66);
    uint64_t v37 = v68;
    goto LABEL_54;
  }
  uint64_t v36 = v5;
  *((unsigned char *)v27 + v7specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  unint64_t v52 = (v26 | v23) + v63;
  size_t v35 = __n;
  uint64_t v43 = (int *)(v52 & v66);
  double v44 = (int *)(((v64 | v23) + v63) & v66);
  uint64_t v37 = v68;
LABEL_58:
  unint64_t v51 = v70;
  if (!*((unsigned char *)v43 + v70)
    || ((v53 = *((unsigned __int8 *)v43 + v70) - 1, !v70) ? (int v54 = 0) : (v53 = 0, int v54 = *v43),
        (v54 | v53) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)v44 + v70)) {
      goto LABEL_75;
    }
    int v57 = *((unsigned __int8 *)v44 + v70) - 1;
    if (v70)
    {
      int v57 = 0;
      int v58 = *v44;
    }
    else
    {
      int v58 = 0;
    }
    int v50 = (v58 | v57) + 1;
LABEL_73:
    if (v50)
    {
      (*(void (**)(int *, uint64_t))(v37 + 8))(v43, v36);
      goto LABEL_78;
    }
LABEL_75:
    (*(void (**)(int *, int *, uint64_t))(v37 + 24))(v43, v44, v36);
    *(void *)(((unint64_t)v43 + v65) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + v65) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_79;
  }
  if (*((unsigned char *)v44 + v70))
  {
    int v55 = *((unsigned __int8 *)v44 + v70) - 1;
    if (v70)
    {
      int v55 = 0;
      int v56 = *v44;
    }
    else
    {
      int v56 = 0;
    }
    if ((v56 | v55) == 0xFFFFFFFF) {
      goto LABEL_56;
    }
    goto LABEL_78;
  }
LABEL_66:
  (*(void (**)(int *, int *, uint64_t))(v37 + 16))(v43, v44, v36);
  *(void *)(((unint64_t)v43 + v65) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + v65) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    *((unsigned char *)v43 + v51) = 0;
  }
LABEL_79:
  unint64_t v59 = ((unint64_t)v43 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = ((unint64_t)v44 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = *(void *)v60;
  *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
  *(void *)unint64_t v59 = v61;
  *(void *)(((unint64_t)v43 + v35 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

char *initializeWithTake for VelocitySampler(char *a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v43 = v8 + 7;
  unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 + 8;
  uint64_t v47 = v5;
  if (v7)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5)) {
      goto LABEL_13;
    }
LABEL_9:
    if (v7) {
      size_t v13 = v9 + 8;
    }
    else {
      size_t v13 = v9 + 9;
    }
    memcpy(a1, a2, v13);
    goto LABEL_15;
  }
  if (*((unsigned char *)a2 + v10))
  {
    int v11 = *((unsigned __int8 *)a2 + v10) - 1;
    if (v9 == -8)
    {
      int v12 = 0;
    }
    else
    {
      int v11 = 0;
      int v12 = *a2;
    }
    if ((v12 | v11) != 0xFFFFFFFF) {
      goto LABEL_9;
    }
  }
LABEL_13:
  (*(void (**)(char *, int *, uint64_t))(v6 + 32))(a1, a2, v5);
  *(void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    a1[v10] = 0;
  }
LABEL_15:
  unint64_t v14 = v9 + 9;
  if (v7) {
    size_t v15 = v9 + 8;
  }
  else {
    size_t v15 = v9 + 9;
  }
  uint64_t v16 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  size_t __n = v15;
  int v45 = a1;
  size_t v17 = v15 + v16;
  unint64_t v18 = (unint64_t)&a1[v15 + v16];
  uint64_t v19 = ~v16;
  uint64_t v20 = v18 & ~v16;
  unint64_t v21 = (unint64_t)a2 + v15 + v16;
  unint64_t v22 = v10;
  uint64_t v23 = (int *)(v21 & ~v16);
  unint64_t v46 = v22;
  unint64_t v24 = v14;
  if (v7)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v21 & ~v16, v7, v47)) {
      goto LABEL_28;
    }
LABEL_25:
    unint64_t v28 = (void *)(v18 & ~v16);
    size_t v29 = __n;
    memcpy(v28, (const void *)(v21 & ~v16), __n);
    int v30 = (void *)((v17 + v20) & v19);
    unint64_t v31 = (_DWORD *)(((unint64_t)v23 + v17) & v19);
    int v32 = v45;
    unint64_t v33 = v46;
    uint64_t v34 = v47;
    if (v7) {
      goto LABEL_30;
    }
    int v35 = *((unsigned __int8 *)v31 + v46);
    if (!*((unsigned char *)v31 + v46)) {
      goto LABEL_38;
    }
LABEL_33:
    int v37 = v35 - 1;
    if (v33)
    {
      int v37 = 0;
      int v38 = *v31;
    }
    else
    {
      int v38 = 0;
    }
    if ((v38 | v37) == 0xFFFFFFFF) {
      goto LABEL_38;
    }
LABEL_37:
    memcpy(v30, v31, v29);
    goto LABEL_40;
  }
  int v25 = *((unsigned __int8 *)v23 + v22);
  if (v25)
  {
    int v26 = v25 - 1;
    int v27 = v46;
    if (v46)
    {
      int v26 = 0;
      int v27 = *v23;
    }
    if ((v27 | v26) != 0xFFFFFFFF) {
      goto LABEL_25;
    }
  }
LABEL_28:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v18 & ~v16, v21 & ~v16, v47);
  *(void *)((v43 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v23 + v43) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
  {
    int v32 = v45;
    unint64_t v33 = v46;
    *(unsigned char *)(v20 + v46) = 0;
    unint64_t v36 = v24;
    int v30 = (void *)(((v18 | v16) + v24) & v19);
    unint64_t v31 = (_DWORD *)(((v21 | v16) + v36) & v19);
    uint64_t v34 = v47;
    size_t v29 = __n;
    int v35 = *((unsigned __int8 *)v31 + v46);
    if (!*((unsigned char *)v31 + v46)) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  int v32 = v45;
  unint64_t v33 = v46;
  int v30 = (void *)(((v18 | v16) + v46) & v19);
  unint64_t v31 = (_DWORD *)(((v21 | v16) + v46) & v19);
  uint64_t v34 = v47;
  size_t v29 = __n;
LABEL_30:
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48))(v31, v7, v34)) {
    goto LABEL_37;
  }
LABEL_38:
  (*(void (**)(void *, _DWORD *, uint64_t))(v6 + 32))(v30, v31, v34);
  *(void *)(((unint64_t)v30 + v43) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v43) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    *((unsigned char *)v30 + v33) = 0;
  }
LABEL_40:
  unint64_t v39 = ((unint64_t)v30 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)unint64_t v39 = v41;
  *(void *)(((unint64_t)v30 + v29 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  return v32;
}

int *assignWithTake for VelocitySampler(int *a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v65 = v8 + 7;
  unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v10 = v9 + 8;
  uint64_t v69 = v5;
  unint64_t v70 = v9 + 8;
  if (v7)
  {
    int v11 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
    int v12 = v11(a1, v7, v5);
    int v13 = v11(a2, v7, v5);
    size_t v10 = v9 + 8;
    if (v12)
    {
      if (!v13) {
        goto LABEL_27;
      }
LABEL_23:
      if (v7) {
        size_t v20 = v10;
      }
      else {
        size_t v20 = v9 + 9;
      }
      memcpy(a1, a2, v20);
      goto LABEL_29;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)a1 + v10)
    || ((v14 = *((unsigned __int8 *)a1 + v10) - 1, v9 == -8) ? (int v15 = 0) : (v14 = 0, int v15 = *a1),
        (v15 | v14) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)a2 + v10)) {
      goto LABEL_20;
    }
    int v18 = *((unsigned __int8 *)a2 + v10) - 1;
    if (v9 == -8)
    {
      int v19 = 0;
    }
    else
    {
      int v18 = 0;
      int v19 = *a2;
    }
    int v13 = (v19 | v18) + 1;
LABEL_18:
    if (v13)
    {
      (*(void (**)(int *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_23;
    }
LABEL_20:
    (*(void (**)(int *, int *, uint64_t))(v6 + 40))(a1, a2, v5);
    *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_29;
  }
  if (*((unsigned char *)a2 + v10))
  {
    int v16 = *((unsigned __int8 *)a2 + v10) - 1;
    if (v9 == -8)
    {
      int v17 = 0;
    }
    else
    {
      int v16 = 0;
      int v17 = *a2;
    }
    if ((v17 | v16) != 0xFFFFFFFF) {
      goto LABEL_23;
    }
  }
LABEL_27:
  (*(void (**)(int *, int *, uint64_t))(v6 + 32))(a1, a2, v5);
  *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    *((unsigned char *)a1 + v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  }
LABEL_29:
  unint64_t v21 = v9 + 9;
  if (v7) {
    size_t v22 = v10;
  }
  else {
    size_t v22 = v9 + 9;
  }
  uint64_t v23 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  size_t __n = v22;
  size_t v24 = v22 + v23;
  uint64_t v25 = v6;
  unint64_t v26 = (unint64_t)a1 + v22 + v23;
  int v27 = (_DWORD *)(v26 & ~v23);
  unint64_t v28 = (unint64_t)a2 + v22 + v23;
  size_t v29 = v10;
  int v30 = (_DWORD *)(v28 & ~v23);
  uint64_t v68 = v25;
  uint64_t v66 = ~v23;
  if (!v7)
  {
    if (*((unsigned char *)v27 + v29))
    {
      int v38 = *((unsigned __int8 *)v27 + v29) - 1;
      if (v29)
      {
        int v38 = 0;
        LODWORD(v29) = *v27;
      }
      int v39 = v29 | v38;
      size_t v29 = v70;
      if (v39 != -1)
      {
        unint64_t v63 = v21;
        unint64_t v64 = v28;
        if (*((unsigned char *)v30 + v70))
        {
          int v40 = *((unsigned __int8 *)v30 + v70) - 1;
          int v41 = v70;
          if (v70)
          {
            int v40 = 0;
            int v41 = *v30;
          }
          if ((v41 | v40) != 0xFFFFFFFF) {
            goto LABEL_35;
          }
        }
        goto LABEL_44;
      }
    }
    if (!*((unsigned char *)v30 + v29)) {
      goto LABEL_52;
    }
    int v45 = *((unsigned __int8 *)v30 + v29) - 1;
    int v46 = v70;
    if (v70)
    {
      int v45 = 0;
      int v46 = *v30;
    }
    int v33 = (v46 | v45) + 1;
LABEL_50:
    if (v33)
    {
      uint64_t v37 = v68;
      uint64_t v36 = v69;
      (*(void (**)(unint64_t, uint64_t))(v68 + 8))(v26 & ~v23, v69);
      uint64_t v47 = (void *)(v26 & ~v23);
      size_t v35 = __n;
      memcpy(v47, v30, __n);
      goto LABEL_53;
    }
LABEL_52:
    uint64_t v37 = v68;
    uint64_t v36 = v69;
    (*(void (**)(unint64_t, _DWORD *, uint64_t))(v68 + 40))(v26 & ~v23, v30, v69);
    *(void *)(((unint64_t)v27 + v65) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v30 + v65) & 0xFFFFFFFFFFFFFFF8);
    size_t v35 = __n;
LABEL_53:
    uint64_t v43 = (int *)(((unint64_t)v27 + v24) & v66);
    double v44 = (int *)(((unint64_t)v30 + v24) & v66);
    if (v7)
    {
LABEL_54:
      uint64_t v48 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v37 + 48);
      int v49 = v48(v43, v7, v36);
      int v50 = v48(v44, v7, v36);
      if (v49)
      {
        if (!v50)
        {
LABEL_56:
          unint64_t v51 = v70;
          goto LABEL_66;
        }
LABEL_78:
        memcpy(v43, v44, v35);
        goto LABEL_79;
      }
      goto LABEL_73;
    }
    goto LABEL_58;
  }
  unint64_t v63 = v21;
  unint64_t v64 = v28;
  unint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v25 + 48);
  int v32 = v31(v26 & ~v23, v7, v5);
  int v33 = v31((unint64_t)v30, v7, v5);
  if (!v32) {
    goto LABEL_50;
  }
  if (v33)
  {
LABEL_35:
    uint64_t v34 = (void *)(v26 & ~v23);
    size_t v35 = __n;
    memcpy(v34, v30, __n);
    uint64_t v37 = v68;
    uint64_t v36 = v69;
    goto LABEL_53;
  }
LABEL_44:
  (*(void (**)(unint64_t, _DWORD *, uint64_t))(v68 + 32))(v26 & ~v23, v30, v5);
  *(void *)(((unint64_t)v27 + v65) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v30 + v65) & 0xFFFFFFFFFFFFFFF8);
  if (v7)
  {
    uint64_t v36 = v5;
    unint64_t v42 = (v26 | v23) + v70;
    size_t v35 = __n;
    uint64_t v43 = (int *)(v42 & v66);
    double v44 = (int *)(((v64 | v23) + v70) & v66);
    uint64_t v37 = v68;
    goto LABEL_54;
  }
  uint64_t v36 = v5;
  *((unsigned char *)v27 + v7specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  unint64_t v52 = (v26 | v23) + v63;
  size_t v35 = __n;
  uint64_t v43 = (int *)(v52 & v66);
  double v44 = (int *)(((v64 | v23) + v63) & v66);
  uint64_t v37 = v68;
LABEL_58:
  unint64_t v51 = v70;
  if (!*((unsigned char *)v43 + v70)
    || ((v53 = *((unsigned __int8 *)v43 + v70) - 1, !v70) ? (int v54 = 0) : (v53 = 0, int v54 = *v43),
        (v54 | v53) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)v44 + v70)) {
      goto LABEL_75;
    }
    int v57 = *((unsigned __int8 *)v44 + v70) - 1;
    if (v70)
    {
      int v57 = 0;
      int v58 = *v44;
    }
    else
    {
      int v58 = 0;
    }
    int v50 = (v58 | v57) + 1;
LABEL_73:
    if (v50)
    {
      (*(void (**)(int *, uint64_t))(v37 + 8))(v43, v36);
      goto LABEL_78;
    }
LABEL_75:
    (*(void (**)(int *, int *, uint64_t))(v37 + 40))(v43, v44, v36);
    *(void *)(((unint64_t)v43 + v65) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + v65) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_79;
  }
  if (*((unsigned char *)v44 + v70))
  {
    int v55 = *((unsigned __int8 *)v44 + v70) - 1;
    if (v70)
    {
      int v55 = 0;
      int v56 = *v44;
    }
    else
    {
      int v56 = 0;
    }
    if ((v56 | v55) == 0xFFFFFFFF) {
      goto LABEL_56;
    }
    goto LABEL_78;
  }
LABEL_66:
  (*(void (**)(int *, int *, uint64_t))(v37 + 32))(v43, v44, v36);
  *(void *)(((unint64_t)v43 + v65) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + v65) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    *((unsigned char *)v43 + v51) = 0;
  }
LABEL_79:
  unint64_t v59 = ((unint64_t)v43 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = ((unint64_t)v44 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = *(void *)v60;
  *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
  *(void *)unint64_t v59 = v61;
  *(void *)(((unint64_t)v43 + v35 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for VelocitySampler(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = 8;
  if (!v5) {
    uint64_t v7 = 9;
  }
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v7;
    uint64_t v9 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
    unint64_t v10 = ((v8 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v11 = a2 - v6;
    uint64_t v12 = v10 & 0xFFFFFFF8;
    if ((v10 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = v11 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v10);
        if (!v16) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v10);
        if (v16) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245ED8968);
      case 4:
        int v16 = *(_DWORD *)((char *)a1 + v10);
        if (!v16) {
          break;
        }
LABEL_22:
        int v17 = v16 - 1;
        if (v12)
        {
          int v17 = 0;
          LODWORD(v12) = *a1;
        }
        return v6 + (v12 | v17) + 1;
      default:
        break;
    }
  }
  if (v5 < 2) {
    return 0;
  }
  unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for VelocitySampler(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v10 = v8 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  unint64_t v11 = (*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v12 = v11 + 8;
  size_t v13 = v11 + 9;
  if (v8) {
    size_t v13 = v12;
  }
  int v9 = *(_DWORD *)(v7 + 80);
  size_t v14 = ((v13
        + ((v13
          + (v9 & 0xF8 | 7)
          + ((v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 < a3)
  {
    unsigned int v15 = a3 - v10;
    if (((v13
         + ((v13 + (v9 & 0xF8 | 7) + ((v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v16 = v15 + 1;
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v6 = v17;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (v14) {
      int v18 = 1;
    }
    else {
      int v18 = a2 - v10;
    }
    if (v14)
    {
      int v19 = ~v10 + a2;
      bzero(a1, v14);
      *(_DWORD *)a1 = v19;
    }
    switch(v6)
    {
      case 1:
        a1[v14] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v18;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v14] = v18;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x245ED8B98);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v8 >= 2)
        {
          if (a2 + 1 <= v8)
          {
            if (a2 != -1)
            {
              unint64_t v21 = *(void (**)(void))(v7 + 56);
              v21();
            }
          }
          else if (v12)
          {
            int v20 = a2 - v8;
            bzero(a1, v12);
            *(_DWORD *)a1 = v20;
          }
        }
      }
      return;
  }
}

uint64_t type metadata completion function for AnimatableVelocitySampler()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for VelocitySampler();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AnimatableVelocitySampler(void *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = v8 + 8;
  unint64_t v10 = v8 + 9;
  if (v6) {
    size_t v11 = v8 + 8;
  }
  else {
    size_t v11 = v8 + 9;
  }
  int v12 = *(_DWORD *)(v5 + 80);
  uint64_t v13 = v12 & 0xF8 | 7;
  uint64_t v14 = ~v13;
  if ((v12 & 0x1000F8) == 0
    && ((v11 + ((v11 + v13 + ((v11 + v13) & ~v13)) & ~v13) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v35 = v7 + 7;
    unint64_t v36 = v8 + 8;
    if (v6)
    {
      if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(a2, v6, AssociatedTypeWitness))
      {
LABEL_19:
        (*(void (**)(void *, _DWORD *, uint64_t))(v5 + 16))(a1, a2, v18);
        uint64_t v23 = (char *)a1 + 7;
        size_t v24 = (char *)a2 + 7;
        *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v6)
        {
          unint64_t v21 = (unsigned char *)((unint64_t)&v23[v36] & v14);
          size_t v22 = (int *)((unint64_t)&v24[v36] & v14);
          int v17 = a1;
LABEL_21:
          if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(v22, v6, v18))
          {
LABEL_30:
            (*(void (**)(unsigned char *, int *, uint64_t))(v5 + 16))(v21, v22, v18);
            *(void *)((unint64_t)&v21[v35] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + v35) & 0xFFFFFFFFFFFFFFF8);
            if (v6)
            {
              int v27 = (unsigned char *)((unint64_t)&v21[v8 + 15] & v14);
              unint64_t v28 = (int *)(((unint64_t)v22 + v8 + 15) & v14);
LABEL_32:
              if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(v28, v6, v18))
              {
LABEL_40:
                (*(void (**)(unsigned char *, int *, uint64_t))(v5 + 16))(v27, v28, v18);
                *(void *)((unint64_t)&v27[v35] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28
                                                                                             + v35) & 0xFFFFFFFFFFFFFFF8);
                if (!v6) {
                  v27[v36] = 0;
                }
                goto LABEL_42;
              }
LABEL_39:
              memcpy(v27, v28, v11);
LABEL_42:
              unint64_t v31 = (unint64_t)&v27[v11 + 7] & 0xFFFFFFFFFFFFFFF8;
              unint64_t v32 = ((unint64_t)v28 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v33 = *(void *)v32;
              *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
              *(void *)unint64_t v31 = v33;
              *(void *)((unint64_t)&v27[v11 + 23] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28
                                                                                                + v11
                                                                                                + 23) & 0xFFFFFFFFFFFFFFF8);
              return v17;
            }
            v21[v36] = 0;
            int v27 = (unsigned char *)((unint64_t)&v21[v8 + 16] & v14);
            unint64_t v28 = (int *)(((unint64_t)v22 + v8 + 16) & v14);
LABEL_35:
            int v29 = v8 + 8;
            if (!*((unsigned char *)v28 + v36)) {
              goto LABEL_40;
            }
            int v30 = *((unsigned __int8 *)v28 + v36) - 1;
            if (v8 != -8)
            {
              int v30 = 0;
              int v29 = *v28;
            }
            if ((v29 | v30) == 0xFFFFFFFF) {
              goto LABEL_40;
            }
            goto LABEL_39;
          }
LABEL_28:
          memcpy(v21, v22, v11);
          int v27 = (unsigned char *)((unint64_t)&v21[v11 + 7] & v14);
          unint64_t v28 = (int *)(((unint64_t)v22 + v11 + 7) & v14);
          if (v6) {
            goto LABEL_32;
          }
          goto LABEL_35;
        }
        *((unsigned char *)a1 + v36) = 0;
        unint64_t v21 = (unsigned char *)((unint64_t)&v23[v10] & v14);
        size_t v22 = (int *)((unint64_t)&v24[v10] & v14);
        int v17 = a1;
LABEL_24:
        int v25 = v8 + 8;
        if (!*((unsigned char *)v22 + v36)) {
          goto LABEL_30;
        }
        int v26 = *((unsigned __int8 *)v22 + v36) - 1;
        if (v8 != -8)
        {
          int v26 = 0;
          int v25 = *v22;
        }
        if ((v25 | v26) == 0xFFFFFFFF) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (!*((unsigned char *)a2 + v9)) {
        goto LABEL_19;
      }
      int v19 = *((unsigned __int8 *)a2 + v9) - 1;
      int v20 = v8 + 8;
      if (v8 != -8)
      {
        int v19 = 0;
        int v20 = *a2;
      }
      if ((v20 | v19) == 0xFFFFFFFF) {
        goto LABEL_19;
      }
    }
    int v17 = a1;
    memcpy(a1, a2, v11);
    unint64_t v21 = (unsigned char *)(((unint64_t)a1 + v11 + 7) & v14);
    size_t v22 = (int *)(((unint64_t)a2 + v11 + 7) & v14);
    if (v6) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  uint64_t v16 = *(void *)a2;
  *a1 = *(void *)a2;
  int v17 = (void *)(v16 + ((v13 + 16) & v14));
  swift_retain();
  return v17;
}

uint64_t destroy for AnimatableVelocitySampler(_DWORD *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  unint64_t v5 = (*(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v5 + 8;
  uint64_t v24 = v3;
  if (v4)
  {
    int v7 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v3 + 48))(a1, v4, AssociatedTypeWitness);
    uint64_t v3 = v24;
    if (v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (!*((unsigned char *)a1 + v6)
    || ((int v8 = *((unsigned __int8 *)a1 + v6) - 1, v5 == -8) ? (v9 = 0) : (int v8 = 0, v9 = *a1),
        (v9 | v8) == 0xFFFFFFFF))
  {
LABEL_9:
    (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
    uint64_t v3 = v24;
  }
LABEL_10:
  unint64_t v10 = v5 + 9;
  if (v4) {
    unint64_t v10 = v5 + 8;
  }
  uint64_t v11 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = ~v11;
  uint64_t v14 = (_DWORD *)(((unint64_t)a1 + v10 + v11) & ~v11);
  if (v4)
  {
    int v15 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v3 + 48))(v14, v4, AssociatedTypeWitness);
    uint64_t v3 = v24;
    if (v15) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!*((unsigned char *)v14 + v6)
    || ((v16 = *((unsigned __int8 *)v14 + v6) - 1, !v6) ? (int v17 = 0) : (v16 = 0, int v17 = *v14),
        (v17 | v16) == 0xFFFFFFFF))
  {
LABEL_20:
    (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(v14, AssociatedTypeWitness);
    uint64_t v3 = v24;
  }
LABEL_21:
  uint64_t v18 = (_DWORD *)(((unint64_t)v14 + v12) & v13);
  if (v4)
  {
    uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v3 + 48))(v18, v4, AssociatedTypeWitness);
    uint64_t v3 = v24;
    if (result) {
      return result;
    }
    goto LABEL_30;
  }
  if (!*((unsigned char *)v18 + v6)
    || ((int v20 = *((unsigned __int8 *)v18 + v6) - 1, !v6) ? (v21 = 0) : (int v20 = 0, v21 = *v18),
        int v22 = v21 | v20,
        uint64_t result = (v22 + 1),
        v22 == -1))
  {
LABEL_30:
    uint64_t v23 = *(uint64_t (**)(_DWORD *, uint64_t))(v3 + 8);
    return v23(v18, AssociatedTypeWitness);
  }
  return result;
}

char *initializeWithCopy for AnimatableVelocitySampler(char *a1, int *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v43 = v7 + 7;
  unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = v8 + 8;
  uint64_t v47 = AssociatedTypeWitness;
  if (v6)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(a2, v6, AssociatedTypeWitness)) {
      goto LABEL_13;
    }
LABEL_9:
    if (v6) {
      size_t v12 = v8 + 8;
    }
    else {
      size_t v12 = v8 + 9;
    }
    memcpy(a1, a2, v12);
    goto LABEL_15;
  }
  if (*((unsigned char *)a2 + v9))
  {
    int v10 = *((unsigned __int8 *)a2 + v9) - 1;
    if (v8 == -8)
    {
      int v11 = 0;
    }
    else
    {
      int v10 = 0;
      int v11 = *a2;
    }
    if ((v11 | v10) != 0xFFFFFFFF) {
      goto LABEL_9;
    }
  }
LABEL_13:
  (*(void (**)(char *, int *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(void *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    a1[v9] = 0;
  }
LABEL_15:
  unint64_t v13 = v8 + 9;
  if (v6) {
    size_t v14 = v8 + 8;
  }
  else {
    size_t v14 = v8 + 9;
  }
  uint64_t v15 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  size_t __n = v14;
  int v45 = a1;
  size_t v16 = v14 + v15;
  unint64_t v17 = (unint64_t)&a1[v14 + v15];
  uint64_t v18 = ~v15;
  uint64_t v19 = v17 & ~v15;
  unint64_t v20 = (unint64_t)a2 + v14 + v15;
  unint64_t v21 = v9;
  int v22 = (int *)(v20 & ~v15);
  unint64_t v46 = v21;
  unint64_t v23 = v13;
  if (v6)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v20 & ~v15, v6, v47)) {
      goto LABEL_28;
    }
LABEL_25:
    int v27 = (void *)(v17 & ~v15);
    unint64_t v28 = (const void *)(v20 & ~v15);
    size_t v29 = __n;
    memcpy(v27, v28, __n);
    int v30 = (void *)((v16 + v19) & v18);
    unint64_t v31 = (_DWORD *)(((unint64_t)v22 + v16) & v18);
    unint64_t v32 = v45;
    unint64_t v33 = v46;
    uint64_t v34 = v47;
    if (v6) {
      goto LABEL_30;
    }
    int v35 = *((unsigned __int8 *)v31 + v46);
    if (!*((unsigned char *)v31 + v46)) {
      goto LABEL_38;
    }
LABEL_33:
    int v37 = v35 - 1;
    if (v33)
    {
      int v37 = 0;
      int v38 = *v31;
    }
    else
    {
      int v38 = 0;
    }
    if ((v38 | v37) == 0xFFFFFFFF) {
      goto LABEL_38;
    }
LABEL_37:
    memcpy(v30, v31, v29);
    goto LABEL_40;
  }
  int v24 = *((unsigned __int8 *)v22 + v21);
  if (v24)
  {
    int v25 = v24 - 1;
    int v26 = v46;
    if (v46)
    {
      int v25 = 0;
      int v26 = *v22;
    }
    if ((v26 | v25) != 0xFFFFFFFF) {
      goto LABEL_25;
    }
  }
LABEL_28:
  uint64_t v34 = v47;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v17 & ~v15, v20 & ~v15, v47);
  *(void *)((v43 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + v43) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
  {
    unint64_t v33 = v46;
    *(unsigned char *)(v19 + v46) = 0;
    unint64_t v36 = v23;
    int v30 = (void *)(((v17 | v15) + v23) & v18);
    unint64_t v31 = (_DWORD *)(((v20 | v15) + v36) & v18);
    size_t v29 = __n;
    unint64_t v32 = v45;
    int v35 = *((unsigned __int8 *)v31 + v46);
    if (!*((unsigned char *)v31 + v46)) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  unint64_t v33 = v46;
  int v30 = (void *)(((v17 | v15) + v46) & v18);
  unint64_t v31 = (_DWORD *)(((v20 | v15) + v46) & v18);
  size_t v29 = __n;
  unint64_t v32 = v45;
LABEL_30:
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(v31, v6, v34)) {
    goto LABEL_37;
  }
LABEL_38:
  (*(void (**)(void *, _DWORD *, uint64_t))(v5 + 16))(v30, v31, v34);
  *(void *)(((unint64_t)v30 + v43) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v43) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    *((unsigned char *)v30 + v33) = 0;
  }
LABEL_40:
  unint64_t v39 = ((unint64_t)v30 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)unint64_t v39 = v41;
  *(void *)(((unint64_t)v30 + v29 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  return v32;
}

int *assignWithCopy for AnimatableVelocitySampler(int *a1, int *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v64 = v7 + 7;
  unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v9 = v8 + 8;
  uint64_t v68 = AssociatedTypeWitness;
  unint64_t v69 = v8 + 8;
  if (v6)
  {
    int v10 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48);
    int v11 = v10(a1, v6, AssociatedTypeWitness);
    int v12 = v10(a2, v6, AssociatedTypeWitness);
    size_t v9 = v8 + 8;
    if (v11)
    {
      if (!v12) {
        goto LABEL_27;
      }
LABEL_23:
      if (v6) {
        size_t v19 = v9;
      }
      else {
        size_t v19 = v8 + 9;
      }
      memcpy(a1, a2, v19);
      goto LABEL_29;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)a1 + v9)
    || ((int v13 = *((unsigned __int8 *)a1 + v9) - 1, v8 == -8) ? (v14 = 0) : (int v13 = 0, v14 = *a1),
        (v14 | v13) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)a2 + v9)) {
      goto LABEL_20;
    }
    int v17 = *((unsigned __int8 *)a2 + v9) - 1;
    if (v8 == -8)
    {
      int v18 = 0;
    }
    else
    {
      int v17 = 0;
      int v18 = *a2;
    }
    int v12 = (v18 | v17) + 1;
LABEL_18:
    if (v12)
    {
      (*(void (**)(int *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      goto LABEL_23;
    }
LABEL_20:
    (*(void (**)(int *, int *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
    *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_29;
  }
  if (*((unsigned char *)a2 + v9))
  {
    int v15 = *((unsigned __int8 *)a2 + v9) - 1;
    if (v8 == -8)
    {
      int v16 = 0;
    }
    else
    {
      int v15 = 0;
      int v16 = *a2;
    }
    if ((v16 | v15) != 0xFFFFFFFF) {
      goto LABEL_23;
    }
  }
LABEL_27:
  (*(void (**)(int *, int *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    *((unsigned char *)a1 + v9) = 0;
  }
LABEL_29:
  unint64_t v20 = v8 + 9;
  if (v6) {
    size_t v21 = v9;
  }
  else {
    size_t v21 = v8 + 9;
  }
  uint64_t v22 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  size_t __n = v21;
  size_t v23 = v21 + v22;
  uint64_t v24 = v5;
  unint64_t v25 = (unint64_t)a1 + v21 + v22;
  int v26 = (_DWORD *)(v25 & ~v22);
  unint64_t v27 = (unint64_t)a2 + v21 + v22;
  size_t v28 = v9;
  size_t v29 = (_DWORD *)(v27 & ~v22);
  uint64_t v67 = v24;
  uint64_t v65 = ~v22;
  if (!v6)
  {
    if (*((unsigned char *)v26 + v28))
    {
      int v37 = *((unsigned __int8 *)v26 + v28) - 1;
      if (v28)
      {
        int v37 = 0;
        LODWORD(v28) = *v26;
      }
      int v38 = v28 | v37;
      size_t v28 = v69;
      if (v38 != -1)
      {
        unint64_t v62 = v20;
        unint64_t v63 = v27;
        if (*((unsigned char *)v29 + v69))
        {
          int v39 = *((unsigned __int8 *)v29 + v69) - 1;
          int v40 = v69;
          if (v69)
          {
            int v39 = 0;
            int v40 = *v29;
          }
          if ((v40 | v39) != 0xFFFFFFFF) {
            goto LABEL_35;
          }
        }
        goto LABEL_44;
      }
    }
    if (!*((unsigned char *)v29 + v28)) {
      goto LABEL_52;
    }
    int v44 = *((unsigned __int8 *)v29 + v28) - 1;
    int v45 = v69;
    if (v69)
    {
      int v44 = 0;
      int v45 = *v29;
    }
    int v32 = (v45 | v44) + 1;
LABEL_50:
    if (v32)
    {
      uint64_t v36 = v67;
      uint64_t v35 = v68;
      (*(void (**)(unint64_t, uint64_t))(v67 + 8))(v25 & ~v22, v68);
      unint64_t v46 = (void *)(v25 & ~v22);
      size_t v34 = __n;
      memcpy(v46, v29, __n);
      goto LABEL_53;
    }
LABEL_52:
    uint64_t v36 = v67;
    uint64_t v35 = v68;
    (*(void (**)(unint64_t, _DWORD *, uint64_t))(v67 + 24))(v25 & ~v22, v29, v68);
    *(void *)(((unint64_t)v26 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + v64) & 0xFFFFFFFFFFFFFFF8);
    size_t v34 = __n;
LABEL_53:
    unint64_t v42 = (int *)(((unint64_t)v26 + v23) & v65);
    uint64_t v43 = (int *)(((unint64_t)v29 + v23) & v65);
    if (v6)
    {
LABEL_54:
      uint64_t v47 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v36 + 48);
      int v48 = v47(v42, v6, v35);
      int v49 = v47(v43, v6, v35);
      if (v48)
      {
        if (!v49)
        {
LABEL_56:
          unint64_t v50 = v69;
          goto LABEL_66;
        }
LABEL_78:
        memcpy(v42, v43, v34);
        goto LABEL_79;
      }
      goto LABEL_73;
    }
    goto LABEL_58;
  }
  unint64_t v62 = v20;
  unint64_t v63 = v27;
  int v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 48);
  int v31 = v30(v25 & ~v22, v6, AssociatedTypeWitness);
  int v32 = v30((unint64_t)v29, v6, AssociatedTypeWitness);
  if (!v31) {
    goto LABEL_50;
  }
  if (v32)
  {
LABEL_35:
    unint64_t v33 = (void *)(v25 & ~v22);
    size_t v34 = __n;
    memcpy(v33, v29, __n);
    uint64_t v36 = v67;
    uint64_t v35 = v68;
    goto LABEL_53;
  }
LABEL_44:
  (*(void (**)(unint64_t, _DWORD *, uint64_t))(v67 + 16))(v25 & ~v22, v29, AssociatedTypeWitness);
  *(void *)(((unint64_t)v26 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + v64) & 0xFFFFFFFFFFFFFFF8);
  if (v6)
  {
    uint64_t v35 = AssociatedTypeWitness;
    unint64_t v41 = (v25 | v22) + v69;
    size_t v34 = __n;
    unint64_t v42 = (int *)(v41 & v65);
    uint64_t v43 = (int *)(((v63 | v22) + v69) & v65);
    uint64_t v36 = v67;
    goto LABEL_54;
  }
  uint64_t v35 = AssociatedTypeWitness;
  *((unsigned char *)v26 + v69) = 0;
  unint64_t v51 = (v25 | v22) + v62;
  size_t v34 = __n;
  unint64_t v42 = (int *)(v51 & v65);
  uint64_t v43 = (int *)(((v63 | v22) + v62) & v65);
  uint64_t v36 = v67;
LABEL_58:
  unint64_t v50 = v69;
  if (!*((unsigned char *)v42 + v69)
    || ((int v52 = *((unsigned __int8 *)v42 + v69) - 1, !v69) ? (v53 = 0) : (int v52 = 0, v53 = *v42),
        (v53 | v52) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)v43 + v69)) {
      goto LABEL_75;
    }
    int v56 = *((unsigned __int8 *)v43 + v69) - 1;
    if (v69)
    {
      int v56 = 0;
      int v57 = *v43;
    }
    else
    {
      int v57 = 0;
    }
    int v49 = (v57 | v56) + 1;
LABEL_73:
    if (v49)
    {
      (*(void (**)(int *, uint64_t))(v36 + 8))(v42, v35);
      goto LABEL_78;
    }
LABEL_75:
    (*(void (**)(int *, int *, uint64_t))(v36 + 24))(v42, v43, v35);
    *(void *)(((unint64_t)v42 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v43 + v64) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_79;
  }
  if (*((unsigned char *)v43 + v69))
  {
    int v54 = *((unsigned __int8 *)v43 + v69) - 1;
    if (v69)
    {
      int v54 = 0;
      int v55 = *v43;
    }
    else
    {
      int v55 = 0;
    }
    if ((v55 | v54) == 0xFFFFFFFF) {
      goto LABEL_56;
    }
    goto LABEL_78;
  }
LABEL_66:
  (*(void (**)(int *, int *, uint64_t))(v36 + 16))(v42, v43, v35);
  *(void *)(((unint64_t)v42 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v43 + v64) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    *((unsigned char *)v42 + v5specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  }
LABEL_79:
  unint64_t v58 = ((unint64_t)v42 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = ((unint64_t)v43 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v60 = *(void *)v59;
  *(unsigned char *)(v58 + 8) = *(unsigned char *)(v59 + 8);
  *(void *)unint64_t v58 = v60;
  *(void *)(((unint64_t)v42 + v34 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v43 + v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

char *initializeWithTake for AnimatableVelocitySampler(char *a1, int *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v43 = v7 + 7;
  unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = v8 + 8;
  uint64_t v47 = AssociatedTypeWitness;
  if (v6)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(a2, v6, AssociatedTypeWitness)) {
      goto LABEL_13;
    }
LABEL_9:
    if (v6) {
      size_t v12 = v8 + 8;
    }
    else {
      size_t v12 = v8 + 9;
    }
    memcpy(a1, a2, v12);
    goto LABEL_15;
  }
  if (*((unsigned char *)a2 + v9))
  {
    int v10 = *((unsigned __int8 *)a2 + v9) - 1;
    if (v8 == -8)
    {
      int v11 = 0;
    }
    else
    {
      int v10 = 0;
      int v11 = *a2;
    }
    if ((v11 | v10) != 0xFFFFFFFF) {
      goto LABEL_9;
    }
  }
LABEL_13:
  (*(void (**)(char *, int *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(void *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    a1[v9] = 0;
  }
LABEL_15:
  unint64_t v13 = v8 + 9;
  if (v6) {
    size_t v14 = v8 + 8;
  }
  else {
    size_t v14 = v8 + 9;
  }
  uint64_t v15 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  size_t __n = v14;
  int v45 = a1;
  size_t v16 = v14 + v15;
  unint64_t v17 = (unint64_t)&a1[v14 + v15];
  uint64_t v18 = ~v15;
  uint64_t v19 = v17 & ~v15;
  unint64_t v20 = (unint64_t)a2 + v14 + v15;
  unint64_t v21 = v9;
  uint64_t v22 = (int *)(v20 & ~v15);
  unint64_t v46 = v21;
  unint64_t v23 = v13;
  if (v6)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v20 & ~v15, v6, v47)) {
      goto LABEL_28;
    }
LABEL_25:
    unint64_t v27 = (void *)(v17 & ~v15);
    size_t v28 = (const void *)(v20 & ~v15);
    size_t v29 = __n;
    memcpy(v27, v28, __n);
    int v30 = (void *)((v16 + v19) & v18);
    int v31 = (_DWORD *)(((unint64_t)v22 + v16) & v18);
    int v32 = v45;
    unint64_t v33 = v46;
    uint64_t v34 = v47;
    if (v6) {
      goto LABEL_30;
    }
    int v35 = *((unsigned __int8 *)v31 + v46);
    if (!*((unsigned char *)v31 + v46)) {
      goto LABEL_38;
    }
LABEL_33:
    int v37 = v35 - 1;
    if (v33)
    {
      int v37 = 0;
      int v38 = *v31;
    }
    else
    {
      int v38 = 0;
    }
    if ((v38 | v37) == 0xFFFFFFFF) {
      goto LABEL_38;
    }
LABEL_37:
    memcpy(v30, v31, v29);
    goto LABEL_40;
  }
  int v24 = *((unsigned __int8 *)v22 + v21);
  if (v24)
  {
    int v25 = v24 - 1;
    int v26 = v46;
    if (v46)
    {
      int v25 = 0;
      int v26 = *v22;
    }
    if ((v26 | v25) != 0xFFFFFFFF) {
      goto LABEL_25;
    }
  }
LABEL_28:
  uint64_t v34 = v47;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(v17 & ~v15, v20 & ~v15, v47);
  *(void *)((v43 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + v43) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
  {
    unint64_t v33 = v46;
    *(unsigned char *)(v19 + v46) = 0;
    unint64_t v36 = v23;
    int v30 = (void *)(((v17 | v15) + v23) & v18);
    int v31 = (_DWORD *)(((v20 | v15) + v36) & v18);
    size_t v29 = __n;
    int v32 = v45;
    int v35 = *((unsigned __int8 *)v31 + v46);
    if (!*((unsigned char *)v31 + v46)) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  unint64_t v33 = v46;
  int v30 = (void *)(((v17 | v15) + v46) & v18);
  int v31 = (_DWORD *)(((v20 | v15) + v46) & v18);
  size_t v29 = __n;
  int v32 = v45;
LABEL_30:
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(v31, v6, v34)) {
    goto LABEL_37;
  }
LABEL_38:
  (*(void (**)(void *, _DWORD *, uint64_t))(v5 + 32))(v30, v31, v34);
  *(void *)(((unint64_t)v30 + v43) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v43) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    *((unsigned char *)v30 + v33) = 0;
  }
LABEL_40:
  unint64_t v39 = ((unint64_t)v30 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)unint64_t v39 = v41;
  *(void *)(((unint64_t)v30 + v29 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  return v32;
}

int *assignWithTake for AnimatableVelocitySampler(int *a1, int *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v64 = v7 + 7;
  unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v9 = v8 + 8;
  uint64_t v68 = AssociatedTypeWitness;
  unint64_t v69 = v8 + 8;
  if (v6)
  {
    int v10 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48);
    int v11 = v10(a1, v6, AssociatedTypeWitness);
    int v12 = v10(a2, v6, AssociatedTypeWitness);
    size_t v9 = v8 + 8;
    if (v11)
    {
      if (!v12) {
        goto LABEL_27;
      }
LABEL_23:
      if (v6) {
        size_t v19 = v9;
      }
      else {
        size_t v19 = v8 + 9;
      }
      memcpy(a1, a2, v19);
      goto LABEL_29;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)a1 + v9)
    || ((int v13 = *((unsigned __int8 *)a1 + v9) - 1, v8 == -8) ? (v14 = 0) : (int v13 = 0, v14 = *a1),
        (v14 | v13) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)a2 + v9)) {
      goto LABEL_20;
    }
    int v17 = *((unsigned __int8 *)a2 + v9) - 1;
    if (v8 == -8)
    {
      int v18 = 0;
    }
    else
    {
      int v17 = 0;
      int v18 = *a2;
    }
    int v12 = (v18 | v17) + 1;
LABEL_18:
    if (v12)
    {
      (*(void (**)(int *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      goto LABEL_23;
    }
LABEL_20:
    (*(void (**)(int *, int *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
    *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_29;
  }
  if (*((unsigned char *)a2 + v9))
  {
    int v15 = *((unsigned __int8 *)a2 + v9) - 1;
    if (v8 == -8)
    {
      int v16 = 0;
    }
    else
    {
      int v15 = 0;
      int v16 = *a2;
    }
    if ((v16 | v15) != 0xFFFFFFFF) {
      goto LABEL_23;
    }
  }
LABEL_27:
  (*(void (**)(int *, int *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    *((unsigned char *)a1 + v9) = 0;
  }
LABEL_29:
  unint64_t v20 = v8 + 9;
  if (v6) {
    size_t v21 = v9;
  }
  else {
    size_t v21 = v8 + 9;
  }
  uint64_t v22 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  size_t __n = v21;
  size_t v23 = v21 + v22;
  uint64_t v24 = v5;
  unint64_t v25 = (unint64_t)a1 + v21 + v22;
  int v26 = (_DWORD *)(v25 & ~v22);
  unint64_t v27 = (unint64_t)a2 + v21 + v22;
  size_t v28 = v9;
  size_t v29 = (_DWORD *)(v27 & ~v22);
  uint64_t v67 = v24;
  uint64_t v65 = ~v22;
  if (!v6)
  {
    if (*((unsigned char *)v26 + v28))
    {
      int v37 = *((unsigned __int8 *)v26 + v28) - 1;
      if (v28)
      {
        int v37 = 0;
        LODWORD(v28) = *v26;
      }
      int v38 = v28 | v37;
      size_t v28 = v69;
      if (v38 != -1)
      {
        unint64_t v62 = v20;
        unint64_t v63 = v27;
        if (*((unsigned char *)v29 + v69))
        {
          int v39 = *((unsigned __int8 *)v29 + v69) - 1;
          int v40 = v69;
          if (v69)
          {
            int v39 = 0;
            int v40 = *v29;
          }
          if ((v40 | v39) != 0xFFFFFFFF) {
            goto LABEL_35;
          }
        }
        goto LABEL_44;
      }
    }
    if (!*((unsigned char *)v29 + v28)) {
      goto LABEL_52;
    }
    int v44 = *((unsigned __int8 *)v29 + v28) - 1;
    int v45 = v69;
    if (v69)
    {
      int v44 = 0;
      int v45 = *v29;
    }
    int v32 = (v45 | v44) + 1;
LABEL_50:
    if (v32)
    {
      uint64_t v36 = v67;
      uint64_t v35 = v68;
      (*(void (**)(unint64_t, uint64_t))(v67 + 8))(v25 & ~v22, v68);
      unint64_t v46 = (void *)(v25 & ~v22);
      size_t v34 = __n;
      memcpy(v46, v29, __n);
      goto LABEL_53;
    }
LABEL_52:
    uint64_t v36 = v67;
    uint64_t v35 = v68;
    (*(void (**)(unint64_t, _DWORD *, uint64_t))(v67 + 40))(v25 & ~v22, v29, v68);
    *(void *)(((unint64_t)v26 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + v64) & 0xFFFFFFFFFFFFFFF8);
    size_t v34 = __n;
LABEL_53:
    unint64_t v42 = (int *)(((unint64_t)v26 + v23) & v65);
    uint64_t v43 = (int *)(((unint64_t)v29 + v23) & v65);
    if (v6)
    {
LABEL_54:
      uint64_t v47 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v36 + 48);
      int v48 = v47(v42, v6, v35);
      int v49 = v47(v43, v6, v35);
      if (v48)
      {
        if (!v49)
        {
LABEL_56:
          unint64_t v50 = v69;
          goto LABEL_66;
        }
LABEL_78:
        memcpy(v42, v43, v34);
        goto LABEL_79;
      }
      goto LABEL_73;
    }
    goto LABEL_58;
  }
  unint64_t v62 = v20;
  unint64_t v63 = v27;
  int v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 48);
  int v31 = v30(v25 & ~v22, v6, AssociatedTypeWitness);
  int v32 = v30((unint64_t)v29, v6, AssociatedTypeWitness);
  if (!v31) {
    goto LABEL_50;
  }
  if (v32)
  {
LABEL_35:
    unint64_t v33 = (void *)(v25 & ~v22);
    size_t v34 = __n;
    memcpy(v33, v29, __n);
    uint64_t v36 = v67;
    uint64_t v35 = v68;
    goto LABEL_53;
  }
LABEL_44:
  (*(void (**)(unint64_t, _DWORD *, uint64_t))(v67 + 32))(v25 & ~v22, v29, AssociatedTypeWitness);
  *(void *)(((unint64_t)v26 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + v64) & 0xFFFFFFFFFFFFFFF8);
  if (v6)
  {
    uint64_t v35 = AssociatedTypeWitness;
    unint64_t v41 = (v25 | v22) + v69;
    size_t v34 = __n;
    unint64_t v42 = (int *)(v41 & v65);
    uint64_t v43 = (int *)(((v63 | v22) + v69) & v65);
    uint64_t v36 = v67;
    goto LABEL_54;
  }
  uint64_t v35 = AssociatedTypeWitness;
  *((unsigned char *)v26 + v69) = 0;
  unint64_t v51 = (v25 | v22) + v62;
  size_t v34 = __n;
  unint64_t v42 = (int *)(v51 & v65);
  uint64_t v43 = (int *)(((v63 | v22) + v62) & v65);
  uint64_t v36 = v67;
LABEL_58:
  unint64_t v50 = v69;
  if (!*((unsigned char *)v42 + v69)
    || ((int v52 = *((unsigned __int8 *)v42 + v69) - 1, !v69) ? (v53 = 0) : (int v52 = 0, v53 = *v42),
        (v53 | v52) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)v43 + v69)) {
      goto LABEL_75;
    }
    int v56 = *((unsigned __int8 *)v43 + v69) - 1;
    if (v69)
    {
      int v56 = 0;
      int v57 = *v43;
    }
    else
    {
      int v57 = 0;
    }
    int v49 = (v57 | v56) + 1;
LABEL_73:
    if (v49)
    {
      (*(void (**)(int *, uint64_t))(v36 + 8))(v42, v35);
      goto LABEL_78;
    }
LABEL_75:
    (*(void (**)(int *, int *, uint64_t))(v36 + 40))(v42, v43, v35);
    *(void *)(((unint64_t)v42 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v43 + v64) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_79;
  }
  if (*((unsigned char *)v43 + v69))
  {
    int v54 = *((unsigned __int8 *)v43 + v69) - 1;
    if (v69)
    {
      int v54 = 0;
      int v55 = *v43;
    }
    else
    {
      int v55 = 0;
    }
    if ((v55 | v54) == 0xFFFFFFFF) {
      goto LABEL_56;
    }
    goto LABEL_78;
  }
LABEL_66:
  (*(void (**)(int *, int *, uint64_t))(v36 + 32))(v42, v43, v35);
  *(void *)(((unint64_t)v42 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v43 + v64) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    *((unsigned char *)v42 + v5specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  }
LABEL_79:
  unint64_t v58 = ((unint64_t)v42 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = ((unint64_t)v43 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v60 = *(void *)v59;
  *(unsigned char *)(v58 + 8) = *(unsigned char *)(v59 + 8);
  *(void *)unint64_t v58 = v60;
  *(void *)(((unint64_t)v42 + v34 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v43 + v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableVelocitySampler(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  uint64_t v8 = 8;
  if (!v6) {
    uint64_t v8 = 9;
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v8;
    uint64_t v10 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
    unint64_t v11 = ((v9 + ((v9 + v10 + ((v9 + v10) & ~v10)) & ~v10) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v12 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = a2 - v7 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v11);
        if (!v16) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v16) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245EDA9F4);
      case 4:
        int v16 = *(_DWORD *)((char *)a1 + v11);
        if (!v16) {
          break;
        }
LABEL_22:
        int v17 = v16 - 1;
        if (v12)
        {
          int v17 = 0;
          LODWORD(v12) = *a1;
        }
        return v7 + (v12 | v17) + 1;
      default:
        break;
    }
  }
  if (v6 < 2) {
    return 0;
  }
  unsigned int v19 = (*(uint64_t (**)(_DWORD *))(v5 + 48))(a1);
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AnimatableVelocitySampler(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v10 = v8 - 1;
  if (!v8) {
    unsigned int v10 = 0;
  }
  unint64_t v11 = (*(void *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v12 = v11 + 8;
  size_t v13 = v11 + 9;
  if (v8) {
    size_t v13 = v12;
  }
  int v9 = *(_DWORD *)(v7 + 80);
  size_t v14 = ((v13
        + ((v13
          + (v9 & 0xF8 | 7)
          + ((v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 < a3)
  {
    if (((v13
         + ((v13 + (v9 & 0xF8 | 7) + ((v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v15 = a3 - v10 + 1;
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (v14) {
      int v17 = 1;
    }
    else {
      int v17 = a2 - v10;
    }
    if (v14)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v14);
      *a1 = v18;
    }
    switch(v6)
    {
      case 1:
        *((unsigned char *)a1 + v14) = v17;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v14) = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)((char *)a1 + v14) = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      *((unsigned char *)a1 + v14) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)((char *)a1 + v14) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245EDAC40);
    case 4:
      *(_DWORD *)((char *)a1 + v14) = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v8 >= 2)
        {
          if (a2 + 1 <= v8)
          {
            if (a2 != -1)
            {
              unint64_t v20 = *(void (**)(_DWORD *, void))(v7 + 56);
              v20(a1, a2 + 1);
            }
          }
          else if (v12)
          {
            int v19 = a2 - v8;
            bzero(a1, v12);
            *a1 = v19;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AnimatableVelocitySampler()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for RequiredTapCountWriter);
}

{
  uint64_t vars8;

  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for CategoryGesture);
}

{
  uint64_t vars8;

  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for RepeatGesture);
}

{
  uint64_t vars8;

  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
}

{
  uint64_t vars8;

  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for EventFilter);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, &lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, &lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
}

{
  uint64_t vars8;

  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
}

{
  uint64_t vars8;

  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for DependentGesture);
}

{
  uint64_t vars8;

  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MapGesture);
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t), unint64_t *a8, void (*a9)(uint64_t))
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_2(0, a6, a7, a8, a9);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v15, 0);
  AGGraphClearUpdate();
  id v12 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v14 + 4) = result;
  return result;
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  id v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  uint64_t v11 = *MEMORY[0x263EF8340];
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  id v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  uint64_t v11 = *MEMORY[0x263EF8340];
  type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>();
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  id v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  uint64_t v11 = *MEMORY[0x263EF8340];
  type metadata accessor for EventListener<SpatialEvent>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  id v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  uint64_t v11 = *MEMORY[0x263EF8340];
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationGesture);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  id v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<Double>, MEMORY[0x263F8D538], (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  id v12 = *MEMORY[0x263EF8340];
  uint64_t v8 = MEMORY[0x263F8EE60] + 8;
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v10, 0);
  AGGraphClearUpdate();
  id v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<()>, v8, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v9 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  id v12 = *MEMORY[0x263EF8340];
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v10, 0);
  AGGraphClearUpdate();
  id v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  uint64_t v7 = MEMORY[0x263F8E628];
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<Never>, v7, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v9 + 4) = result;
  return result;
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t (*a8)(void, uint64_t, uint64_t))
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  type metadata accessor for EventListener<SpatialEvent>(0, a6, (uint64_t)&type metadata for TappableEvent, a7, a8);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v14, 0);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v13 + 4) = result;
  return result;
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(void, uint64_t))
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  _sSiSgMaTm_1(0, a6, (uint64_t)&type metadata for TappableEvent, a7);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v8 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v13, 0);
  AGGraphClearUpdate();
  id v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for GestureDebug.Value<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v12 + 4) = result;
  return result;
}

uint64_t specialized static AnyGesture._makeGesture(gesture:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v39 = *(_OWORD *)(a2 + 64);
  long long v40 = v6;
  v41[0] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)(a2 + 108);
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v35 = *(_OWORD *)a2;
  long long v36 = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v37 = *(_OWORD *)(a2 + 32);
  long long v38 = v8;
  specialized _GestureInputs.intern<A>(_:id:)(768, 0);
  int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  int v10 = *MEMORY[0x263F288F8];
  int v11 = *MEMORY[0x263F288F8];
  if ((*(unsigned char *)(a2 + 120) & 8) != 0)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    v34[6] = xmmword_268EFAF78;
    v34[7] = xmmword_268EFAF88;
    v34[8] = xmmword_268EFAF98;
    v34[2] = xmmword_268EFAF38;
    int v34[3] = xmmword_268EFAF48;
    v34[4] = xmmword_268EFAF58;
    v34[5] = xmmword_268EFAF68;
    v34[0] = static GestureDebug.Data.defaultValue;
    v34[1] = xmmword_268EFAF28;
    outlined retain of GestureDebug.Data((uint64_t)v34);
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v34, 0);
    outlined release of GestureDebug.Data((uint64_t)v34);
    int v11 = AGGraphCreateIndirectAttribute2();
  }
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v19);
  uint64_t v12 = v19;
  int v13 = v20;
  id v14 = (id)AGSubgraphGetCurrent();
  if (!v14) {
    __break(1u);
  }
  *(_OWORD *)&v26[12] = *(_OWORD *)((char *)v41 + 12);
  long long v24 = v39;
  long long v25 = v40;
  *(_OWORD *)int v26 = v41[0];
  long long v20 = v35;
  long long v21 = v36;
  long long v22 = v37;
  long long v23 = v38;
  LODWORD(v19) = a1;
  int v27 = IndirectAttribute2;
  int v28 = v11;
  uint64_t v29 = v12;
  int v30 = v13;
  uint64_t v32 = 0;
  long long v31 = (unint64_t)v14;
  int v33 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _GestureInputs(a2);
  uint64_t v15 = MEMORY[0x263F8EE60] + 8;
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for AnyGestureInfo<()>.Value, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGestureInfo.Value);
  _sSiSgMaTm_1(0, &lazy cache variable for type metadata for AnyGestureInfo<()>, v15, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGestureInfo);
  lazy protocol witness table accessor for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of AnyGestureInfo<A>((uint64_t)&v19);
  AGGraphGetFlags();
  AGGraphSetFlags();
  uint64_t result = AGGraphSetIndirectDependency();
  if (v11 != v10) {
    uint64_t result = AGGraphSetIndirectDependency();
  }
  uint64_t v17 = *(void *)(v12 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v18 += 24;
      --v17;
    }
    while (v17);
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(_DWORD *)a3 = IndirectAttribute2;
  *(_DWORD *)(a3 + 4) = v11;
  *(void *)(a3 + 8) = v12;
  *(_DWORD *)(a3 + 16) = v13;
  return result;
}

void specialized AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_retain();
  specialized _GestureInputs.makeDefaultOutputs<A>()((uint64_t)v22);
  long long v7 = (id *)v22[0];
  uint64_t v6 = v22[1];
  uint64_t v8 = v23;
  int v9 = v24;
  if (!AGSubgraphIsValid())
  {
    swift_release_n();
LABEL_13:
    *(_DWORD *)a3 = v7;
    *(_DWORD *)(a3 + 4) = v6;
    *(void *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 16) = v9;
    return;
  }
  int v10 = *(_DWORD *)(a1 + 120);
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21)
  {
    swift_release();
    __break(1u);
LABEL_15:
    swift_release();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v19 = a1;
  unint64_t v20 = (unint64_t)v7;
  id v11 = (id)AGSubgraphGetGraph();
  uint64_t v12 = AGSubgraphCreate();

  long long v7 = (id *)(a2 + 272);
  swift_beginAccess();
  int v13 = *(void **)(a2 + 272);
  *(void *)(a2 + 272) = v12;

  if (!*(void *)(a2 + 272)) {
    goto LABEL_15;
  }
  AGSubgraphAddChild2();
  if (!*v7)
  {
LABEL_16:
    swift_release();
    __break(1u);
LABEL_17:
    swift_release();
    __break(1u);
    goto LABEL_18;
  }
  AGSubgraphAddChild();
  if ((v10 & 0x10) == 0) {
    goto LABEL_11;
  }
  id v14 = (id)AGSubgraphGetGraph();
  uint64_t v15 = AGSubgraphCreate();

  swift_beginAccess();
  uint64_t v16 = *(void **)(a2 + 280);
  *(void *)(a2 + 28specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v15;

  if (!*(void *)(a2 + 272))
  {
LABEL_18:
    swift_release();
    __break(1u);
    goto LABEL_19;
  }
  if (*(void *)(a2 + 280))
  {
    AGSubgraphAddChild2();
LABEL_11:
    if (*v7)
    {
      id v17 = *v7;
      AGGraphClearUpdate();
      id v18 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      LODWORD(v7) = v20;
      swift_retain();
      specialized closure #1 in AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(v19, a2, v20 | (v6 << 32), v8);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      swift_release_n();

      goto LABEL_13;
    }
    goto LABEL_17;
  }
LABEL_19:
  swift_release();
  __break(1u);
}

void AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(long long *a1@<X0>, void (*a2)(unint64_t *__return_ptr, long long *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v10 = a1[5];
  v58[4] = a1[4];
  v58[5] = v10;
  *(_OWORD *)unint64_t v59 = a1[6];
  *(_OWORD *)&v59[12] = *(long long *)((char *)a1 + 108);
  long long v11 = a1[1];
  v58[0] = *a1;
  v58[1] = v11;
  long long v12 = a1[3];
  v58[2] = a1[2];
  v58[3] = v12;
  specialized _GestureInputs.makeDefaultOutputs<A>()((uint64_t)v55);
  uint64_t v14 = v55[0];
  uint64_t v13 = v55[1];
  uint64_t v15 = v56;
  int v16 = v57;
  uint64_t v52 = a5;
  uint64_t v53 = v6;
  uint64_t v17 = *(void *)(a5 + 8);
  uint64_t v18 = a4;
  int v54 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
  uint64_t v19 = (void *)v54(a4, v17);
  LODWORD(a4) = AGSubgraphIsValid();

  if (!a4) {
    goto LABEL_14;
  }
  unsigned int v47 = v16;
  uint64_t v46 = v15;
  uint64_t v48 = v13;
  char v20 = v59[24];
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v13 = v18;
  char v49 = v20;
  uint64_t v45 = a6;
  id v22 = v21;
  if ((v20 & 0x10) != 0)
  {
    id v25 = (id)AGSubgraphGetGraph();
    uint64_t v23 = v53;
  }
  else
  {
    uint64_t v23 = v53;
    int v24 = (void *)v54(v18, v17);
    id v25 = (id)AGSubgraphGetGraph();
  }
  uint64_t v26 = AGSubgraphCreate();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v26, v18, v52);
  int v27 = (void *)v54(v18, v17);
  int v28 = *(uint64_t (**)(uint64_t, uint64_t))(v52 + 24);
  uint64_t v29 = v28(v18, v52);
  if (!v29) {
    goto LABEL_16;
  }
  int v30 = (void *)v29;
  AGSubgraphAddChild2();

  uint64_t v31 = v28(v13, v52);
  if (!v31)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v32 = (void *)v31;
  int v33 = v22;
  AGSubgraphAddChild();

  if ((v49 & 0x10) == 0) {
    goto LABEL_12;
  }
  size_t v34 = (void *)v54(v13, v17);
  id v35 = (id)AGSubgraphGetGraph();

  uint64_t v36 = AGSubgraphCreate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 56))(v36, v13, v52);
  uint64_t v37 = v28(v13, v52);
  if (!v37)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  long long v38 = (void *)v37;
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 48))(v13, v52);
  if (v39)
  {
    long long v40 = (void *)v39;
    AGSubgraphAddChild2();

LABEL_12:
    uint64_t v41 = v28(v13, v52);
    if (v41)
    {
      uint64_t v42 = (void *)v41;
      uint64_t v43 = v13;
      AGGraphClearUpdate();
      id v44 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      LODWORD(v13) = v48;
      uint64_t v15 = v46;
      closure #1 in AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(v58, v23, a2, a3, v14 | (v48 << 32), v46, v47, v43, v52);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      a6 = v45;
      int v16 = v47;
LABEL_14:
      *(_DWORD *)a6 = v14;
      *(_DWORD *)(a6 + 4) = v13;
      *(void *)(a6 + 8) = v15;
      *(_DWORD *)(a6 + 16) = v16;
      return;
    }
    goto LABEL_18;
  }
LABEL_20:
  __break(1u);
}

void AnyGestureResponder.exclusionPolicy.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

{
  AnyGestureResponder.exclusionPolicy.getter(a1);
}

uint64_t AnyGestureResponder.label.getter()
{
  return 0;
}

uint64_t protocol witness for AnyGestureResponder.makeSubviewsGesture(inputs:) in conformance StyledTextResponder@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
  int v3 = *MEMORY[0x263F288F8];
  *(void *)(a1 + 8) = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = result;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

uint64_t AnyGestureResponder.makeSubviewsGesture(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
  int v3 = *MEMORY[0x263F288F8];
  *(void *)(a1 + 8) = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = result;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

{
  return AnyGestureResponder.makeSubviewsGesture(inputs:)(a1);
}

uint64_t specialized _GestureOutputs.overrideDefaultValues(_:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = HIDWORD(a4);
  type metadata accessor for DefaultRule<GesturePhase<()>>();
  uint64_t result = AGGraphMutateAttribute();
  if (*MEMORY[0x263F288F8] != v8 && *MEMORY[0x263F288F8] != v7)
  {
    MEMORY[0x270FA5388](result);
    type metadata accessor for EventListener<SpatialEvent>(0, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DefaultRule);
    MEMORY[0x270FA5388](v11);
    uint64_t result = AGGraphMutateAttribute();
  }
  uint64_t v12 = *(void *)(a5 + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v12; ++i)
    {
      if (v13)
      {
        uint64_t v15 = a2 + 48;
        uint64_t v16 = v13;
        while (*(void *)(v15 - 16) != *(void *)(a5 + 32 + 24 * i))
        {
          v15 += 24;
          if (!--v16) {
            goto LABEL_9;
          }
        }
        AGGraphSetIndirectAttribute();
      }
LABEL_9:
      ;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized GesturePhase.map<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for GesturePhase<URL>, MEMORY[0x263F06EA8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v13 - v10;
  outlined init with copy of GesturePhase<URL>(v2, (uint64_t)&v13 - v10);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
      a1(v8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      *(unsigned char *)(a2 + 1) = 1;
      break;
    case 2:
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
      a1(v8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      *(unsigned char *)(a2 + 1) = 2;
      break;
    case 3:
      *(_WORD *)a2 = 768;
      break;
    default:
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
      {
        *(_WORD *)a2 = 1;
        uint64_t result = outlined destroy of URL?((uint64_t)v11);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
        a1(v8);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        *(_WORD *)a2 = 0;
      }
      break;
  }
  return result;
}

uint64_t specialized closure #1 in MapGesture.init(_:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X8>)
{
  return specialized GesturePhase.map<A>(_:)(a1, a2);
}

uint64_t specialized closure #1 in MapGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  switch(BYTE1(result))
  {
    case 1:
      char v6 = result & 1;
      uint64_t result = (uint64_t)((uint64_t (*)(void *__return_ptr, char *))a2)((void *)a3, &v6);
      *(unsigned char *)(a3 + 1) = 1;
      break;
    case 2:
      char v7 = result & 1;
      uint64_t result = (uint64_t)((uint64_t (*)(void *__return_ptr, char *))a2)((void *)a3, &v7);
      *(unsigned char *)(a3 + 1) = 2;
      break;
    case 3:
      __int16 v4 = 768;
      goto LABEL_8;
    default:
      if ((_BYTE)result == 0xFF)
      {
        __int16 v4 = 1;
LABEL_8:
        *(_WORD *)a3 = v4;
      }
      else
      {
        char v5 = result & 1;
        uint64_t result = a2(&v5);
        *(_WORD *)a3 = 0;
      }
      break;
  }
  return result;
}

uint64_t specialized closure #1 in MapGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t (*a2)(__int16 *)@<X1>, uint64_t a3@<X8>)
{
  switch(BYTE3(result))
  {
    case 1u:
      __int16 v6 = result & 0x101;
      uint64_t result = a2(&v6);
      *(unsigned char *)(a3 + 1) = 1;
      break;
    case 2u:
      __int16 v7 = result & 0x101;
      uint64_t result = a2(&v7);
      *(unsigned char *)(a3 + 1) = 2;
      break;
    case 3u:
      __int16 v4 = 768;
      goto LABEL_8;
    default:
      if ((result & 0x10000) != 0)
      {
        __int16 v4 = 1;
LABEL_8:
        *(_WORD *)a3 = v4;
      }
      else
      {
        __int16 v5 = result & 0x101;
        uint64_t result = a2(&v5);
        *(_WORD *)a3 = 0;
      }
      break;
  }
  return result;
}

uint64_t GestureViewModifier.name.getter()
{
  return 0;
}

uint64_t GestureViewModifier.gestureMask.getter()
{
  return 3;
}

BOOL static GestureResponderExclusionPolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GestureResponderExclusionPolicy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int GestureResponderExclusionPolicy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _ViewInputs.gestureAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    int v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    int v3 = &static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t AddGestureModifier.gesture.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AddGestureModifier.gesture.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AddGestureModifier.gesture.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AddGestureModifier.name.getter(uint64_t a1)
{
  uint64_t v1 = specialized AddGestureModifier.name.getter(a1);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AddGestureModifier.name.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *__int16 v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AddGestureModifier.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AddGestureModifier.gestureMask.getter(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 40));
}

uint64_t AddGestureModifier.gestureMask.setter(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*AddGestureModifier.gestureMask.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for GestureViewModifier.name.getter in conformance AddGestureModifier<A>(uint64_t a1)
{
  uint64_t v1 = specialized AddGestureModifier.name.getter(a1);
  swift_bridgeObjectRetain();
  return v1;
}

void static DefaultGestureCombiner.exclusionPolicy.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static DefaultGestureCombiner.combine(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = _ViewInputs.base.modify;
  *(void *)(v6 + 24) = 0;
  *a3 = a1;
  a3[1] = a2;
  a3[2] = partial apply for specialized closure #1 in MapGesture.init(_:);
  a3[3] = v6;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for static GestureCombiner.combine(_:_:) in conformance DefaultGestureCombiner@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = _ViewInputs.base.modify;
  *(void *)(v6 + 24) = 0;
  *a3 = a1;
  a3[1] = a2;
  a3[2] = partial apply for specialized closure #1 in MapGesture.init(_:);
  a3[3] = v6;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for static GestureCombiner.combine(_:_:) in conformance SimultaneousGestureCombiner@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = _ViewInputs.base.modify;
  *(void *)(v6 + 24) = 0;
  *a3 = a1;
  a3[1] = a2;
  a3[2] = partial apply for specialized closure #1 in MapGesture.init(_:);
  a3[3] = v6;
  swift_retain();

  return swift_retain();
}

uint64_t HighPriorityGestureModifier.init(_:name:gestureMask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AddGestureModifier.init(_:name:gestureMask:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for HighPriorityGestureModifier, a7);
}

uint64_t protocol witness for GestureViewModifier.name.getter in conformance SimultaneousGestureModifier<A>(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for GestureViewModifier.gestureMask.getter in conformance HighPriorityGestureModifier<A>(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 40));
}

id protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HighPriorityGestureModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static GestureViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for static GestureCombiner.combine(_:_:) in conformance HighPriorityGestureCombiner@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = _ViewInputs.base.modify;
  *(void *)(v6 + 24) = 0;
  *a3 = a2;
  a3[1] = a1;
  a3[2] = partial apply for specialized closure #1 in MapGesture.init(_:);
  a3[3] = v6;
  swift_retain();

  return swift_retain();
}

uint64_t specialized closure #1 in AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v42 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 104);
  uint64_t v14 = *(void *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 120);
  int v39 = *(_DWORD *)(a2 + 128);
  swift_beginAccess();
  uint64_t v16 = *(void **)(a2 + 280);
  unint64_t v40 = a3;
  uint64_t v41 = a4;
  if (v16)
  {
    id v38 = *(id *)(a2 + 280);
LABEL_5:
    int v37 = *(_DWORD *)(a1 + 120);
    uint64_t v36 = *(void **)(a1 + 88);
    long long v19 = *(_OWORD *)(a1 + 48);
    v53[2] = *(_OWORD *)(a1 + 32);
    v53[3] = v19;
    v53[4] = *(_OWORD *)(a1 + 64);
    int v54 = *(_DWORD *)(a1 + 80);
    long long v20 = *(_OWORD *)(a1 + 16);
    v53[0] = *(_OWORD *)a1;
    v53[1] = v20;
    int v35 = DWORD2(v53[0]);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of _GestureInputs(a1);
    id v21 = v16;
    outlined release of _ViewInputs((uint64_t)v53);
    swift_beginAccess();
    int v22 = *(_DWORD *)(v8 + 16);
    uint64_t v23 = *(void *)(v8 + 24);
    long long v31 = *(_OWORD *)(v8 + 48);
    long long v32 = *(_OWORD *)(v8 + 32);
    uint64_t v24 = *(void *)(v8 + 64);
    uint64_t v25 = *(void *)(v8 + 72);
    uint64_t v33 = v12;
    uint64_t v34 = v11;
    char v26 = *(unsigned char *)(v8 + 80);
    char v27 = *(unsigned char *)(v8 + 81);
    uint64_t v28 = *(void *)(v8 + 88);
    _sSiSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
    uint64_t v29 = swift_allocObject();
    *(_DWORD *)(v29 + 16) = v22;
    *(void *)(v29 + 24) = v23;
    *(_OWORD *)(v29 + 32) = v32;
    *(_OWORD *)(v29 + 48) = v31;
    *(void *)(v29 + 64) = v24;
    *(void *)(v29 + 72) = v25;
    *(unsigned char *)(v29 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v26;
    *(unsigned char *)(v29 + 81) = v27;
    *(void *)(v29 + 88) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release_n();
    uint64_t v30 = *(void *)(a1 + 96);
    *(void *)&long long v46 = v42;
    DWORD2(v46) = v35;
    *(void *)&long long v47 = v29;
    *((void *)&v47 + 1) = v9;
    *(void *)&long long v48 = v10;
    *((void *)&v48 + 1) = v34;
    *(void *)&long long v49 = v33;
    *((void *)&v49 + 1) = v13;
    *(void *)&long long v50 = v14;
    *((void *)&v50 + 1) = v15;
    LODWORD(v51) = v39;
    *((void *)&v51 + 1) = v38;
    *(void *)uint64_t v52 = v30;
    *(_OWORD *)&v52[8] = *(_OWORD *)(a1 + 104);
    *(_DWORD *)&v52[24] = v37 & 0xFFFFFFFB;
    _DWORD v55[2] = v48;
    v55[3] = v49;
    v55[0] = v46;
    v55[1] = v47;
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)&v52[12];
    v55[5] = v51;
    v56[0] = *(_OWORD *)v52;
    v55[4] = v50;
    outlined retain of _GestureInputs((uint64_t)&v46);
    LODWORD(v43) = AGGraphCreateOffsetAttribute2();
    uint64_t KeyPath = swift_getKeyPath();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _sSiSgMaTm_1(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
    type metadata accessor for Focus<ResolvedStyledText, AnyGesture<()>>();
    lazy protocol witness table accessor for type _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type Focus<ResolvedStyledText, AnyGesture<()>> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<ResolvedStyledText, AnyGesture<()>>);
    LODWORD(v23) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    specialized static AnyGesture._makeGesture(gesture:inputs:)(v23, (uint64_t)v55, (uint64_t)&v43);
    outlined release of _GestureInputs((uint64_t)&v46);
    specialized _GestureOutputs.overrideDefaultValues(_:)(v43, KeyPath, v45, v40, v41);
    outlined release of _GestureInputs((uint64_t)&v46);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = swift_beginAccess();
  uint64_t v18 = *(void **)(a2 + 272);
  if (v18)
  {
    id v38 = v18;
    uint64_t v16 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(long long *a1, uint64_t a2, void (*a3)(unint64_t *__return_ptr, long long *), uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v13)(long long *__return_ptr, uint64_t, uint64_t);
  void *v14;
  uint64_t result;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  long long v22;
  _OWORD v23[2];
  unint64_t v24[2];
  unsigned int v25;
  long long v26;
  unsigned char v27[64];
  unsigned char v28[44];
  long long v29;
  unsigned char v30[64];
  unsigned char v31[44];

  long long v10 = a1[5];
  *(_OWORD *)&v30[48] = a1[4];
  *(_OWORD *)long long v31 = v10;
  *(_OWORD *)&v31[16] = a1[6];
  *(_OWORD *)&v31[28] = *(long long *)((char *)a1 + 108);
  long long v11 = a1[1];
  uint64_t v29 = *a1;
  *(_OWORD *)uint64_t v30 = v11;
  long long v12 = a1[3];
  *(_OWORD *)&v30[16] = a1[2];
  *(_OWORD *)&v30[32] = v12;
  uint64_t v13 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a9 + 16);
  outlined retain of _GestureInputs((uint64_t)a1);
  v13(&v26, a8, a9);
  *(void *)&long long v19 = v26;
  DWORD2(v19) = DWORD2(v26);
  *(void *)long long v20 = *(void *)v27;
  *(_OWORD *)&v20[8] = *(_OWORD *)&v27[8];
  *(void *)&v20[24] = *(void *)&v27[24];
  *(void *)id v21 = *(void *)&v27[32];
  *(_OWORD *)&v21[8] = *(_OWORD *)&v27[40];
  *(void *)&v21[24] = *(void *)&v27[56];
  LODWORD(v22) = *(_DWORD *)v28;
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a9 + 48))(a8, a9);
  if (v14 || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a8, a9), (v14 = (void *)result) != 0))
  {
    _GestureInputs.mergeViewInputs(_:viewSubgraph:)((uint64_t *)&v19, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    *(void *)&char v26 = v29;
    DWORD2(v26) = DWORD2(v29);
    *(void *)char v27 = *(void *)v30;
    *(_OWORD *)&v27[8] = *(_OWORD *)&v30[8];
    *(_OWORD *)&v27[24] = *(_OWORD *)&v30[24];
    *(_OWORD *)&v27[40] = *(_OWORD *)&v30[40];
    *(void *)&v27[56] = *(void *)&v30[56];
    *(_OWORD *)&v28[8] = *(_OWORD *)&v31[8];
    *(_OWORD *)&v28[24] = *(_OWORD *)&v31[24];
    *(_DWORD *)uint64_t v28 = *(_DWORD *)v31;
    *(_DWORD *)&v28[40] = *(_DWORD *)&v31[40] & 0xFFFFFFFB;
    *(_OWORD *)&v21[16] = *(_OWORD *)&v27[48];
    int v22 = *(_OWORD *)v28;
    v23[0] = *(_OWORD *)&v28[16];
    *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)&v28[28];
    long long v19 = v26;
    *(_OWORD *)long long v20 = *(_OWORD *)v27;
    *(_OWORD *)&v20[16] = *(_OWORD *)&v27[16];
    *(_OWORD *)id v21 = *(_OWORD *)&v27[32];
    outlined retain of _GestureInputs((uint64_t)&v26);
    a3(v24, &v19);
    outlined release of _GestureInputs((uint64_t)&v26);
    specialized _GestureOutputs.overrideDefaultValues(_:)(v24[0], v24[1], v25, a5, a6);
    outlined release of _GestureInputs((uint64_t)&v26);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AnyGestureResponder.isCancellable.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 88))();
  specialized static Update.begin()();
  GraphHost.instantiateIfNeeded()();
  if (*(_DWORD *)(v2 + 248) == *MEMORY[0x263F288F8]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)AGGraphGetValue();
  }
  static Update.end()();
  swift_release();
  return v3;
}

uint64_t AnyGestureResponder.requiredTapCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 88))();
  specialized static Update.begin()();
  GraphHost.instantiateIfNeeded()();
  if (*(_DWORD *)(v2 + 252) == *MEMORY[0x263F288F8])
  {
    uint64_t v3 = 0;
  }
  else
  {
    _sSiSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
    uint64_t v3 = *(void *)AGGraphGetValue();
  }
  static Update.end()();
  swift_release();
  return v3;
}

uint64_t AnyGestureResponder.dependency.getter@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(a1 + 88))();
  specialized static Update.begin()();
  GraphHost.instantiateIfNeeded()();
  if (*(_DWORD *)(v3 + 256) == *MEMORY[0x263F288F8]) {
    char v4 = 0;
  }
  else {
    char v4 = *(unsigned char *)AGGraphGetValue();
  }
  *a2 = v4;
  static Update.end()();

  return swift_release();
}

BOOL AnyGestureResponder.canPrevent(_:otherExclusionPolicy:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v10 = *a2;
  if (!AnyGestureResponder.isPrioritized(over:otherExclusionPolicy:)(a1, &v10, a3, a4)) {
    return 0;
  }
  uint64_t v5 = swift_conformsToProtocol2();
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!v7) {
    return 1;
  }
  swift_retain();
  AnyGestureResponder.dependency.getter(v6, &v9);
  swift_release();
  return v9 - 3 < 0xFFFFFFFE;
}

BOOL AnyGestureResponder.isPrioritized(over:otherExclusionPolicy:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v7 = *a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 72))(&v18, a3, a4);
  int v8 = v18;
  type metadata accessor for (GestureResponderExclusionPolicy, GestureResponderExclusionPolicy)();
  if (v7)
  {
    if (v7 == 1 && v8 && v8 != 2)
    {
      swift_retain_n();
      if (a1 == v5)
      {
        swift_release_n();
        return 1;
      }
      uint64_t v9 = a1;
      while (1)
      {
        unsigned __int8 v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 88);
        uint64_t v11 = swift_retain();
        uint64_t v12 = v10(v11);
        swift_retain();
        swift_release_n();
        if (!v12) {
          break;
        }
        swift_release();
        uint64_t v9 = v12;
        if (v12 == v5)
        {
          swift_release();
          goto LABEL_22;
        }
      }
LABEL_20:
      swift_release();
    }
    return 0;
  }
  if (v8) {
    return v8 == 1;
  }
  swift_retain_n();
  if (a1 == v5)
  {
    swift_release_n();
    return 0;
  }
  uint64_t v14 = a1;
  while (1)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 88);
    uint64_t v16 = swift_retain();
    uint64_t v17 = v15(v16);
    swift_retain();
    swift_release_n();
    if (!v17) {
      break;
    }
    swift_release();
    uint64_t v14 = v17;
    if (v17 == v5)
    {
      swift_release();
      goto LABEL_20;
    }
  }
LABEL_22:
  swift_release();
  return 1;
}

BOOL AnyGestureResponder.shouldRequireFailure(of:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  uint64_t v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 72);
  v9((uint64_t *)((char *)&v19 + 2), a3, a4);
  if (BYTE2(v19) != 2)
  {
    unsigned __int8 v10 = *a1;
    (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a2 + 72))((char *)&v19 + 1, *a1, a2);
    if (BYTE1(v19) != 2)
    {
      uint64_t v11 = AnyGestureResponder.requiredTapCount.getter(a3, a4);
      if ((v12 & 1) == 0)
      {
        uint64_t v17 = v11;
        uint64_t v13 = AnyGestureResponder.requiredTapCount.getter(v10, a2);
        if ((v14 & 1) == 0 && v13 != v17) {
          return v17 < v13;
        }
      }
    }
  }
  uint64_t v16 = *a1;
  v9(&v19, a3, a4);
  if (!AnyGestureResponder.isPrioritized(over:otherExclusionPolicy:)(v4, (unsigned __int8 *)&v19, v16, a2)) {
    return 0;
  }
  AnyGestureResponder.dependency.getter(a4, &v18);
  return v18 != 0;
}

uint64_t GestureResponder.gestureGraph.getter()
{
  if (v0[30])
  {
    uint64_t v1 = v0[30];
  }
  else
  {
    uint64_t v2 = *v0;
    type metadata accessor for GestureGraph();
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    uint64_t v1 = specialized GestureGraph.init(rootResponder:)(v4, v3, v2, (uint64_t)&protocol witness table for GestureResponder<A>);
    v0[30] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t GestureResponder.bindingBridge.getter()
{
  if (*(void *)(v0 + 248))
  {
    uint64_t v1 = *(void *)(v0 + 248);
  }
  else
  {
    uint64_t v1 = closure #1 in GestureResponder.bindingBridge.getter(v0);
    *(void *)(v0 + 248) = v1;
    *(void *)(v0 + 256) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in GestureResponder.bindingBridge.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 168);
  uint64_t v13 = *(void *)(a1 + 88);
  int v14 = v3;
  uint64_t v15 = v4;
  long long v16 = *(_OWORD *)(a1 + 112);
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  long long v19 = *(_OWORD *)(a1 + 144);
  uint64_t v20 = *(void *)(a1 + 160);
  int v21 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(GestureResponder.gestureGraph.getter() + 208);
  swift_retain();
  swift_release();
  uint64_t v9 = specialized _ViewInputs.makeEventBindingBridge(bindingManager:responder:)(v8, a1, &v13, v2, (uint64_t)&protocol witness table for GestureResponder<A>);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  *(void *)(GestureResponder.gestureGraph.getter() + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v11;
  swift_unknownObjectWeakAssign();
  swift_release();
  return v9;
}

uint64_t GestureResponder.gestureContainer.getter()
{
  if (*(void *)(v0 + 264)) {
    return swift_unknownObjectRetain();
  }
  uint64_t v1 = *(void *)v0;
  if (!AGSubgraphIsValid()) {
    return 0;
  }
  int v2 = *(_DWORD *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  int v6 = *(_DWORD *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 88);
  int v10 = v2;
  uint64_t v11 = v3;
  long long v12 = *(_OWORD *)(v0 + 112);
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  long long v15 = *(_OWORD *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 160);
  int v17 = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized _ViewInputs.makeGestureContainer(responder:)(v0, &v9, v1, (uint64_t)&protocol witness table for GestureResponder<A>);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)(v0 + 264) = v7;
  swift_unknownObjectRelease();
  uint64_t result = *(void *)(v0 + 264);
  if (result) {
    return swift_unknownObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t GestureResponder.eventSources.getter()
{
  uint64_t v0 = GestureResponder.bindingBridge.getter();
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 192))(v0);
  swift_release();
  return v1;
}

uint64_t GestureResponder.exclusionPolicy.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t GestureResponder.label.getter()
{
  if (!AGSubgraphIsValid()) {
    return 0;
  }
  AGGraphClearUpdate();
  closure #1 in GestureResponder.label.getter(v0, &v4);
  AGGraphSetUpdate();
  if (*((void *)&v4 + 1)) {
    return v4;
  }
  uint64_t v2 = GestureResponder.gestureGraph.getter();
  swift_beginAccess();
  uint64_t v1 = 0;
  if (*(unsigned char *)(v2 + 128) == 1)
  {
    specialized static Update.begin()();
    if (*(_DWORD *)(v2 + 244) == *MEMORY[0x263F288F8])
    {
      uint64_t v1 = 0;
    }
    else
    {
      _sSiSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
      uint64_t v1 = *(void *)AGGraphGetValue();
      swift_bridgeObjectRetain();
    }
    static Update.end()();
  }
  swift_release();
  return v1;
}

double closure #1 in GestureResponder.label.getter@<D0>(_DWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  AGGraphClearUpdate();
  id v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in GestureResponder.label.getter(a1, &v6);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t closure #1 in closure #1 in GestureResponder.label.getter@<X0>(_DWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v3 = a1[54];
  long long v18 = *(_OWORD *)(*(void *)a1 + 360);
  int v13 = v3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x263F8D310];
  uint64_t v5 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  _sSiSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
  uint64_t v16 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<GesturePhase<()>>(0, &lazy cache variable for type metadata for Attribute<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, v4, v5);
  uint64_t v7 = v6;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v13, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v15, v16, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  swift_release();
  swift_release();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v11 = *Value;
  uint64_t v10 = Value[1];
  *a2 = v11;
  a2[1] = v10;
  return swift_bridgeObjectRetain();
}

uint64_t GestureResponder.isValid.getter()
{
  if (*(void *)(v0 + 264)) {
    return AGSubgraphIsValid();
  }
  else {
    return 0;
  }
}

uint64_t GestureResponder.detachContainer()()
{
  *(void *)(v0 + 264) = 0;
  return swift_unknownObjectRelease();
}

void GestureResponder.makeSubviewsGesture(inputs:)(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = a1[5];
  v5[4] = a1[4];
  v5[5] = v2;
  v6[0] = a1[6];
  *(_OWORD *)((char *)v6 + 12) = *(long long *)((char *)a1 + 108);
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  long long v4 = a1[3];
  v5[2] = a1[2];
  void v5[3] = v4;
  DefaultLayoutViewResponder.makeGesture(inputs:)(v5, a2);
}

uint64_t GestureResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *(void *)(v4 + 72);
  if (!v8
    || (uint64_t v9 = *(void *)(v4 + 48), (v9 & 0x100000000) != 0)
    || (a2 & 0x100000000) != 0
    || v9 != a2)
  {
    closure #1 in MultiViewResponder.containsGlobalPoints(_:cacheKey:options:)(v4, a1, a2 | ((HIDWORD(a2) & 1) << 32), v7, (uint64_t)v15);
    uint64_t v10 = v15[0];
    double v11 = *(double *)&v15[1];
    uint64_t v13 = v15[2];
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v4 + 48) = a2 & 0x1FFFFFFFFLL;
    *(void *)(v4 + 56) = v10;
    *(double *)(v4 + 64) = v11;
    *(void *)(v4 + 72) = v13;
  }
  else
  {
    uint64_t v10 = *(void *)(v4 + 56);
    double v11 = *(double *)(v4 + 64);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v13 = v8;
  }
  double v14 = 16.0;
  *(void *)a4 = v10;
  if ((v7 & 2) != 0) {
    double v14 = v11;
  }
  *(double *)(a4 + 8) = v14;
  *(void *)(a4 + 16) = v13;
  return result;
}

uint64_t GestureResponder.bindEvent(_:)(uint64_t a1)
{
  if (specialized static GestureContainerFeature.isEnabled.getter())
  {
    outlined init with copy of AnyTrackedValue(a1, (uint64_t)v7);
    HitTestableEvent.init(_:)((uint64_t)v7, (uint64_t)v8);
    uint64_t v2 = v9;
    if (v9 == 1) {
      return 0;
    }
    uint64_t v6 = v8[0];
    uint64_t v5 = v8[1];
    v8[0] = 0;
    v7[0] = 1;
    uint64_t v3 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)(0x100000000, v8, v10, v11, v12);
    outlined consume of HitTestableEvent?(v6, v5, v2);
    return v3;
  }
  else
  {
    return MultiViewResponder.bindEvent(_:)(a1);
  }
}

void GestureResponder.makeGesture(inputs:)(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  long long v4 = a1[5];
  void v9[4] = a1[4];
  v9[5] = v4;
  v10[0] = a1[6];
  *(_OWORD *)((char *)v10 + 12) = *(long long *)((char *)a1 + 108);
  long long v5 = a1[1];
  v9[0] = *a1;
  v9[1] = v5;
  long long v6 = a1[3];
  _OWORD v9[2] = a1[2];
  v9[3] = v6;
  v7[2] = v9;
  uint64_t v8 = v2;
  AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(a1, (void (*)(unint64_t *__return_ptr, long long *))partial apply for closure #1 in GestureResponder.makeGesture(inputs:), (uint64_t)v7, v3, (uint64_t)&protocol witness table for GestureResponder<A>, a2);
}

uint64_t closure #1 in GestureResponder.makeGesture(inputs:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  long long v7 = a1[3];
  long long v8 = a1[5];
  long long v32 = a1[4];
  long long v33 = v8;
  v34[0] = a1[6];
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)((char *)a1 + 108);
  long long v9 = a1[1];
  v29[0] = *a1;
  v29[1] = v9;
  v35[0] = v29[0];
  v35[1] = v9;
  long long v10 = a1[3];
  long long v30 = a1[2];
  long long v31 = v10;
  v35[3] = v10;
  v35[4] = v32;
  void v35[2] = v30;
  int v36 = *((_DWORD *)a1 + 20);
  v27[2] = v30;
  v27[3] = v7;
  v27[4] = v32;
  int v28 = *((_DWORD *)a1 + 20);
  v27[0] = v29[0];
  v27[1] = v9;
  outlined retain of _ViewInputs((uint64_t)v35);
  closure #1 in closure #1 in GestureResponder.makeGesture(inputs:)(a2, a3, v27, (uint64_t)v29, (uint64_t)&v23);
  if ((*(unsigned char *)(a2 + 120) & 8) != 0)
  {
    v22[0] = *(_DWORD *)(a3 + 216);
    v22[1] = v24;
    MEMORY[0x270FA5388](v11);
    uint64_t v19 = type metadata accessor for GestureViewDebug();
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSiSgMaTm_1(0, &lazy cache variable for type metadata for Attribute<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F28898]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v22, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v18, v19, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v15);
    uint64_t result = outlined release of _ViewInputs((uint64_t)v35);
    int v13 = v21;
  }
  else
  {
    uint64_t result = outlined release of _ViewInputs((uint64_t)v35);
    int v13 = v24;
  }
  uint64_t v16 = v25;
  int v17 = v26;
  *(_DWORD *)a4 = v23;
  *(_DWORD *)(a4 + 4) = v13;
  *(void *)(a4 + 8) = v16;
  *(_DWORD *)(a4 + 16) = v17;
  return result;
}

double closure #1 in closure #1 in GestureResponder.makeGesture(inputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  int v9 = *(_DWORD *)(a1 + 120);
  unsigned int v10 = *(_DWORD *)(a2 + 216);
  uint64_t KeyPath = swift_getKeyPath();
  if ((v9 & 4) != 0)
  {
    long long v33 = *a3;
    long long v58 = a3[1];
    long long v57 = v33;
    long long v59 = a3[2];
    swift_beginAccess();
    outlined retain of _GraphInputs((uint64_t)&v57);
    unsigned int v34 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    outlined release of _GraphInputs((uint64_t)&v57);
    uint64_t v35 = swift_release();
    *(void *)&long long v64 = __PAIR64__(v34, v10);
    DWORD2(v64) = DWORD2(v58);
    MEMORY[0x270FA5388](v35);
    uint64_t v50 = type metadata accessor for GestureViewChild();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v36 = MEMORY[0x263F8EE60] + 8;
    type metadata accessor for Attribute<GesturePhase<()>>(0, &lazy cache variable for type metadata for Attribute<AnyGesture<()>>, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v64, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v48, v50, MEMORY[0x263F8E628], v37, MEMORY[0x263F8E658], v38);
    int v39 = v55[0];
    _sSiSgMaTm_1(0, &lazy cache variable for type metadata for AnyGesture<()>, v36, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
    uint64_t v41 = v40;
    specialized static AnyGesture._makeGesture(gesture:inputs:)(v39, a4, (uint64_t)&v64);
    if ((*(unsigned char *)(a4 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? v41 : 0))
    {
      _gestureModifierProtocolDescriptor();
      uint64_t v43 = swift_conformsToProtocol();
      LOBYTE(v55[0]) = 1;
      if (v43) {
        uint64_t v44 = 2;
      }
      else {
        uint64_t v44 = 1;
      }
      specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v44, 0x100000000, a4);
    }
    uint64_t v45 = *((void *)&v64 + 1);
    int v46 = v65;
    double result = *(double *)&v64;
    *(void *)a5 = v64;
    *(void *)(a5 + 8) = v45;
    *(_DWORD *)(a5 + 16) = v46;
  }
  else
  {
    uint64_t v52 = (void *)a5;
    long long v12 = a3[1];
    long long v64 = *a3;
    long long v65 = v12;
    long long v66 = a3[2];
    swift_beginAccess();
    outlined retain of _GraphInputs((uint64_t)&v64);
    unsigned int v13 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    outlined release of _GraphInputs((uint64_t)&v64);
    uint64_t v14 = swift_release();
    *(void *)&long long v57 = __PAIR64__(v13, v10);
    DWORD2(v57) = DWORD2(v65);
    *(void *)&long long v58 = a2;
    *((void *)&v58 + 1) = &protocol witness table for GestureResponder<A>;
    MEMORY[0x270FA5388](v14);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v48 = AssociatedTypeWitness;
    uint64_t v49 = type metadata accessor for CombiningGestureViewChild();
    uint64_t v50 = swift_getWitnessTable();
    uint64_t v16 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v57, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v47, v49, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
    swift_release();
    _GraphValue.init(_:)(LODWORD(v55[0]), &v54);
    long long v18 = *(_OWORD *)(a4 + 80);
    long long v61 = *(_OWORD *)(a4 + 64);
    long long v62 = v18;
    v63[0] = *(_OWORD *)(a4 + 96);
    *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a4 + 108);
    long long v19 = *(_OWORD *)(a4 + 16);
    long long v57 = *(_OWORD *)a4;
    long long v58 = v19;
    long long v20 = *(_OWORD *)(a4 + 48);
    long long v59 = *(_OWORD *)(a4 + 32);
    long long v60 = v20;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(void *__return_ptr, int *, long long *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v55, &v54, &v57, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((*(unsigned char *)(a4 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? AssociatedTypeWitness : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol()) {
        char v23 = 2;
      }
      else {
        char v23 = 1;
      }
      LOBYTE(v54) = v23;
      long long v24 = *(_OWORD *)(a4 + 80);
      long long v61 = *(_OWORD *)(a4 + 64);
      long long v62 = v24;
      v63[0] = *(_OWORD *)(a4 + 96);
      *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a4 + 108);
      long long v25 = *(_OWORD *)(a4 + 16);
      long long v57 = *(_OWORD *)a4;
      long long v58 = v25;
      long long v26 = *(_OWORD *)(a4 + 48);
      long long v59 = *(_OWORD *)(a4 + 32);
      long long v60 = v26;
      BOOL v27 = HIDWORD(v55[0]) == *MEMORY[0x263F288F8];
      if (HIDWORD(v55[0]) == *MEMORY[0x263F288F8]) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = HIDWORD(v55[0]);
      }
      _sSiSgMaTm_1(0, &lazy cache variable for type metadata for _GestureOutputs<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for _GestureOutputs);
      char v53 = 1;
      _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(AssociatedTypeWitness, (char *)&v54, 0x100000000, &v57, v28 | ((unint64_t)v27 << 32), 0x100000000);
    }
    uint64_t v29 = v55[1];
    int v30 = v56;
    double result = *(double *)v55;
    long long v32 = v52;
    void *v52 = v55[0];
    v32[1] = v29;
    *((_DWORD *)v32 + 4) = v30;
  }
  return result;
}

void GestureResponder.resetGesture()()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 224);
  *(void *)(v0 + 224) = 0;

  swift_beginAccess();
  uint64_t v2 = *(void **)(v0 + 232);
  *(void *)(v0 + 232) = 0;

  DefaultLayoutViewResponder.resetGesture()();
}

uint64_t GestureResponder.extendPrintTree(string:)()
{
  swift_getAssociatedTypeWitness();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);

  return swift_bridgeObjectRelease();
}

void GestureResponder.__allocating_init(inputs:)()
{
}

void GestureResponder.__allocating_init(inputs:viewSubgraph:)()
{
}

uint64_t GestureResponder.__ivar_destroyer()
{
  swift_release();
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t GestureResponder.deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t GestureResponder.__deallocating_deinit()
{
  GestureResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t GestureViewDebug.debugData.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v12);
    return _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v12, (uint64_t)a2, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    v12[0] = *Value;
    long long v5 = Value[4];
    long long v7 = Value[1];
    long long v6 = Value[2];
    v12[3] = Value[3];
    v12[4] = v5;
    v12[1] = v7;
    void v12[2] = v6;
    long long v8 = Value[8];
    long long v10 = Value[5];
    long long v9 = Value[6];
    v12[7] = Value[7];
    v12[8] = v8;
    v12[5] = v10;
    v12[6] = v9;
    memmove(a2, Value, 0x90uLL);
    _ViewInputs.base.modify(a2, v11);
    return outlined retain of GestureDebug.Data((uint64_t)v12);
  }
}

void *protocol witness for AnyGestureResponder.childSubgraph.getter in conformance GestureResponder<A>()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 224);
  id v2 = v1;
  return v1;
}

void protocol witness for AnyGestureResponder.childSubgraph.setter in conformance GestureResponder<A>(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 224);
  *(void *)(v1 + 224) = a1;
}

uint64_t (*protocol witness for AnyGestureResponder.childSubgraph.modify in conformance GestureResponder<A>())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void *protocol witness for AnyGestureResponder.childViewSubgraph.getter in conformance GestureResponder<A>()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 232);
  id v2 = v1;
  return v1;
}

void protocol witness for AnyGestureResponder.childViewSubgraph.setter in conformance GestureResponder<A>(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 232);
  *(void *)(v1 + 232) = a1;
}

uint64_t (*protocol witness for AnyGestureResponder.childViewSubgraph.modify in conformance GestureResponder<A>())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for AnyGestureContainingResponder.gestureType.getter in conformance GestureResponder<A>()
{
  return specialized GestureResponder.gestureType.getter();
}

__n128 GestureViewDebug.value.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = a1;
  GestureViewDebug.debugData.getter(a1, v18);
  long long v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v18, (uint64_t)v19, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
  _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v19, (uint64_t)v20, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, v6);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)v20) == 1)
  {
    _sSiSgMaTm_1(0, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for EmptyGesture);
    uint64_t v8 = v7;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v16);
    _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v16, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    uint64_t v9 = swift_allocObject();
    memcpy((void *)(v9 + 16), __src, 0x121uLL);
    int v10 = *MEMORY[0x263F288F8];
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = v8;
    *(_WORD *)(a3 + 16) = 768;
    *(_DWORD *)(a3 + 2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10;
    *(_DWORD *)(a3 + 24) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(unsigned char *)(a3 + 128) = 3;
    *(void *)(a3 + 136) = v9;
  }
  else
  {
    _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v19, (uint64_t)v16, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
    v15[6] = v16[6];
    v15[7] = v16[7];
    v15[8] = v16[8];
    _OWORD v15[2] = v16[2];
    void v15[3] = v16[3];
    v15[4] = v16[4];
    v15[5] = v16[5];
    v15[0] = v16[0];
    v15[1] = v16[1];
    closure #1 in GestureViewDebug.value.getter(v15, v4, a2, (uint64_t)__src);
    outlined release of GestureDebug.Data?(v19);
    long long v12 = *(_OWORD *)&__src[112];
    *(_OWORD *)(a3 + 96) = *(_OWORD *)&__src[96];
    *(_OWORD *)(a3 + 112) = v12;
    *(_OWORD *)(a3 + 128) = *(_OWORD *)&__src[128];
    long long v13 = *(_OWORD *)&__src[48];
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&__src[32];
    *(_OWORD *)(a3 + 48) = v13;
    long long v14 = *(_OWORD *)&__src[80];
    *(_OWORD *)(a3 + 64) = *(_OWORD *)&__src[64];
    *(_OWORD *)(a3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v14;
    __n128 result = *(__n128 *)&__src[16];
    *(_OWORD *)a3 = *(_OWORD *)__src;
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

__n128 closure #1 in GestureViewDebug.value.getter@<Q0>(long long *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = a1[5];
  long long v8 = a1[7];
  long long v37 = a1[6];
  long long v38 = v8;
  long long v9 = a1[1];
  long long v10 = a1[3];
  long long v33 = a1[2];
  long long v34 = v10;
  long long v11 = a1[3];
  long long v12 = a1[5];
  long long v35 = a1[4];
  long long v36 = v12;
  long long v13 = a1[1];
  long long v31 = *a1;
  long long v32 = v13;
  v40[5] = v7;
  v40[6] = v37;
  long long v14 = a1[8];
  v40[7] = a1[7];
  v40[8] = v14;
  v40[1] = v9;
  v40[2] = v33;
  v40[3] = v11;
  v40[4] = v35;
  long long v39 = v14;
  v40[0] = v31;
  _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_((uint64_t)v40);
  _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v40, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  __int16 v15 = v32;
  int v16 = DWORD2(v32);
  long long v26 = v33;
  long long v17 = v34;
  outlined retain of GestureDebug.Data((uint64_t)&v31);
  specialized ArrayWith2Inline.init<A>(_:)((uint64_t *)(MEMORY[0x263F8EE78] + 32), 0, (uint64_t)v27);
  long long v25 = v27[0];
  long long v24 = v27[1];
  __n128 v23 = (__n128)v27[2];
  uint64_t v18 = v28;
  uint64_t v19 = v29;
  char v20 = v30;
  uint64_t v21 = swift_allocObject();
  memcpy((void *)(v21 + 16), __src, 0x121uLL);
  *(unsigned char *)a4 = 3;
  *(void *)(a4 + 8) = a3;
  *(_WORD *)(a4 + 16) = v15;
  *(_DWORD *)(a4 + 2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a2;
  *(_DWORD *)(a4 + 24) = v16;
  *(_OWORD *)(a4 + 32) = v26;
  *(_OWORD *)(a4 + 48) = v17;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v24;
  __n128 result = v23;
  *(__n128 *)(a4 + 96) = v23;
  *(void *)(a4 + 112) = v18;
  *(void *)(a4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v19;
  *(unsigned char *)(a4 + 128) = v20;
  *(void *)(a4 + 136) = v21;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance GestureViewDebug<A>@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v3);
  return _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v3, a1, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
}

double protocol witness for Rule.value.getter in conformance GestureViewDebug<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = GestureViewDebug.value.getter(*v2, *(void *)(a1 + 16), a2).n128_u64[0];
  return result;
}

uint64_t GestureViewChild.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v26 = (char *)&v22 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v25 = type metadata accessor for _MapGesture();
  MEMORY[0x270FA5388](v25);
  uint64_t v24 = (uint64_t)&v22 - v8;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  long long v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v14(v12, Value, a3);
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
  int v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, a3);
  if ((v15 & 1) != 0 && *(unsigned char *)AGGraphGetValue() == 1)
  {
    uint64_t v17 = AGGraphGetValue();
    v14(v12, v17, a3);
    uint64_t v18 = v26;
    (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
    v16(v12, a3);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a3;
    *(void *)(v19 + 24) = a4;
    uint64_t v20 = v24;
    Gesture.map<A>(_:)((uint64_t)_ViewInputs.base.modify, v19, AssociatedTypeWitness, MEMORY[0x263F8EE60] + 8, AssociatedConformanceWitness, v24);
    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, AssociatedTypeWitness);
    swift_getWitnessTable();
    return AnyGesture.init<A>(_:)(v20);
  }
  else
  {
    type metadata accessor for AnyGestureStorage<EmptyGesture<()>>();
    return swift_allocObject();
  }
}

uint64_t protocol witness for Rule.value.getter in conformance GestureViewChild<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = GestureViewChild.value.getter(*(void *)v2, *(unsigned int *)(v2 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t CombiningGestureViewChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v53 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v47 = (char *)&v40 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for ContentGesture();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v44 = v12;
  uint64_t v54 = v12;
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v56 = WitnessTable;
  uint64_t v57 = AssociatedConformanceWitness;
  uint64_t v46 = AssociatedConformanceWitness;
  uint64_t v45 = type metadata accessor for ModifierGesture();
  MEMORY[0x270FA5388](v45);
  uint64_t v42 = (uint64_t)&v40 - v13;
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1;
  uint64_t Value = AGGraphGetValue();
  long long v51 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v51(v17, Value, a4);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 72);
  uint64_t v21 = a5;
  char v22 = v20(a4, a5);
  __n128 v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v17, a4);
  int v24 = 0;
  if (v22) {
    int v24 = *(unsigned __int8 *)AGGraphGetValue();
  }
  int v50 = v24;
  uint64_t v52 = v18;
  uint64_t v25 = AGGraphGetValue();
  long long v26 = v51;
  v51(v17, v25, a4);
  char v27 = v20(a4, v21);
  v23(v17, a4);
  if ((v27 & 2) != 0)
  {
    type metadata accessor for EventListener<SpatialEvent>(0, &lazy cache variable for type metadata for AnyGestureStorage<SubviewsGesture>, (uint64_t)&unk_26FA514F8, (uint64_t)&protocol witness table for SubviewsGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyGestureStorage);
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = v40;
    *(void *)(v28 + 16) = v41;
    *(void *)(v28 + 24) = v29;
    swift_retain();
  }
  else
  {
    type metadata accessor for AnyGestureStorage<EmptyGesture<()>>();
    uint64_t v28 = swift_allocObject();
  }
  if (v50)
  {
    uint64_t v30 = AGGraphGetValue();
    v26(v17, v30, a4);
    long long v31 = v47;
    (*(void (**)(uint64_t, uint64_t))(v21 + 56))(a4, v21);
    uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v23)(v17, a4);
    uint64_t v33 = v42;
    uint64_t v34 = v49;
    Gesture.modifier<A>(_:)(v32, v49, v44, v42);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v34);
    swift_getWitnessTable();
    uint64_t v35 = AnyGesture.init<A>(_:)(v33);
  }
  else
  {
    type metadata accessor for AnyGestureStorage<EmptyGesture<()>>();
    uint64_t v35 = swift_allocObject();
  }
  uint64_t v36 = v35;
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t v38 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 24))(v28, v36, v37, v38);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance CombiningGestureViewChild<A>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance CombiningGestureViewChild<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CombiningGestureViewChild.value.getter(*v2, v2[2], v2[3], *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t static ContentGesture._makeGesture(modifier:inputs:body:)@<X0>(long long *a1@<X1>, void (*a2)(long long *__return_ptr, long long *)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v4 = a1[5];
  long long v23 = a1[4];
  long long v24 = v4;
  long long v25 = a1[6];
  long long v5 = a1[1];
  long long v19 = *a1;
  long long v20 = v5;
  long long v6 = a1[3];
  long long v21 = a1[2];
  long long v22 = v6;
  uint64_t v8 = *(void *)((char *)a1 + 116);
  unsigned int v26 = *((_DWORD *)a1 + 28);
  unsigned int v7 = v26;
  uint64_t v27 = v8;
  a2(&v14, &v19);
  long long v19 = v14;
  LODWORD(v2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v15;
  *(void *)((char *)&v14 + 4) = v7;
  uint64_t v9 = type metadata accessor for ContentPhase();
  uint64_t v17 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<GesturePhase<()>>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<GesturePhase<()>>, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v14, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v16, v9, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v11);
  type metadata accessor for _GestureOutputs();
  _GestureOutputs.withPhase<A>(_:)(v13, a3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance ContentGesture<A>@<X0>(long long *a1@<X1>, void (*a2)(long long *__return_ptr, long long *)@<X2>, uint64_t a3@<X8>)
{
  return static ContentGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static SubviewsGesture._makeGesture(gesture:inputs:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a1;
  long long v5 = a2[5];
  long long v41 = a2[4];
  long long v42 = v5;
  *(_OWORD *)uint64_t v43 = a2[6];
  *(_OWORD *)&v43[12] = *(long long *)((char *)a2 + 108);
  long long v6 = a2[1];
  long long v37 = *a2;
  long long v38 = v6;
  long long v7 = a2[3];
  long long v39 = a2[2];
  long long v40 = v7;
  specialized _GestureInputs.intern<A>(_:id:)(768, 0);
  int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  int v9 = *MEMORY[0x263F288F8];
  char v10 = v43[24];
  int v11 = *MEMORY[0x263F288F8];
  if ((v43[24] & 8) != 0)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    v36[6] = xmmword_268EFAF78;
    v36[7] = xmmword_268EFAF88;
    v36[8] = xmmword_268EFAF98;
    v36[2] = xmmword_268EFAF38;
    v36[3] = xmmword_268EFAF48;
    v36[4] = xmmword_268EFAF58;
    v36[5] = xmmword_268EFAF68;
    v36[0] = static GestureDebug.Data.defaultValue;
    v36[1] = xmmword_268EFAF28;
    outlined retain of GestureDebug.Data((uint64_t)v36);
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v36, 0);
    outlined release of GestureDebug.Data((uint64_t)v36);
    int v11 = AGGraphCreateIndirectAttribute2();
  }
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v18);
  unint64_t v12 = v18;
  int v13 = v19;
  id v14 = (id)AGSubgraphGetCurrent();
  if (!v14) {
    __break(1u);
  }
  unint64_t v18 = __PAIR64__(*(unsigned int *)&v43[16], v4);
  long long v23 = v41;
  long long v24 = v42;
  *(_OWORD *)long long v25 = *(_OWORD *)v43;
  *(_OWORD *)&v25[12] = *(_OWORD *)&v43[12];
  long long v19 = v37;
  long long v20 = v38;
  long long v21 = v39;
  long long v22 = v40;
  int v26 = IndirectAttribute2;
  int v27 = v11;
  unint64_t v28 = v12;
  int v29 = v13;
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  long long v30 = (unint64_t)v14;
  int v32 = 0;
  int v34 = v9;
  int v35 = v9;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _GestureInputs((uint64_t)&v37);
  lazy protocol witness table accessor for type SubviewsPhase and conformance SubviewsPhase();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of SubviewsPhase((uint64_t)&v18);
  if ((v10 & 8) != 0)
  {
    AGGraphCreateOffsetAttribute2();
    if (v11 == v9) {
      int v11 = AGGraphCreateIndirectAttribute2();
    }
    else {
      AGGraphSetIndirectAttribute();
    }
  }
  swift_bridgeObjectRetain();
  AGGraphSetIndirectDependency();
  if (v11 != v9) {
    AGGraphSetIndirectDependency();
  }
  uint64_t v15 = *(void *)(v12 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v16 += 24;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a3 = IndirectAttribute2;
  *(_DWORD *)(a3 + 4) = v11;
  *(void *)(a3 + 8) = v12;
  *(_DWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t ContentPhase.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t ContentPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t ContentPhase.updateValue()()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v0 = type metadata accessor for GesturePhase();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v6 - v2;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    ContentPhase.phase.getter((uint64_t)v3);
    uint64_t v5 = MEMORY[0x263F8EE60] + 8;
    GesturePhase.withValue<A>(_:)(v0, MEMORY[0x263F8EE60] + 8, (uint64_t)&v7);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    _OWORD v6[2] = v7;
    _sSiSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v5, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    return AGGraphSetOutputValue();
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance ContentPhase<A>()
{
  return ContentPhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance ContentPhase<A>()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance ContentPhase<A>(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance ContentPhase<A>(_WORD *a1@<X8>)
{
  *a1 = -256;
}

uint64_t SubviewsPhase.updateValue()()
{
  void (*v28)(long long *__return_ptr, unsigned char *, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  long long v45;
  uint64_t v46;
  char v47;
  char v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  _OWORD *v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  uint64_t v62;
  long long v63;
  long long v64;
  id v65;
  long long v66;
  long long v67;
  void *v68;
  long long v69;
  long long v70;
  uint64_t v71;
  char v72;
  uint64_t *v73;
  unsigned char v74[300];
  unsigned char v75[289];
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  uint64_t v85;

  uint64_t v1 = v0;
  double v85 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(uint64_t **)Value;
  uint64_t v4 = *(void *)(Value + 8);
  uint64_t v73 = *(uint64_t **)Value;
  if (*(_DWORD *)AGGraphGetValue() == *(_DWORD *)(v0 + 184))
  {
    uint64_t v5 = *(uint64_t **)(v0 + 168);
    if (v5)
    {
      if (v3 == v5)
      {
        swift_retain();
        unsigned int v6 = *MEMORY[0x263F288F8];
        goto LABEL_21;
      }
    }
  }
  __int16 v7 = *(void **)(v0 + 192);
  if (v7)
  {
    int v8 = *(_DWORD *)(v1 + 140);
    uint64_t v9 = *(void *)(v1 + 144);
    int v10 = *MEMORY[0x263F288F8];
    swift_retain();
    id v11 = v7;
    swift_bridgeObjectRetain();
    AGGraphSetIndirectAttribute();
    if (v8 != v10) {
      AGGraphSetIndirectAttribute();
    }
    uint64_t v12 = *(void *)(v9 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = 48;
      do
      {
        AGGraphSetIndirectAttribute();
        v13 += 24;
        --v12;
      }
      while (v12);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
    uint64_t v15 = swift_bridgeObjectRelease();
    *(void *)(v1 + 192) = 0;
    *(_DWORD *)(v1 + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10;
    MEMORY[0x270FA5388](v15);
    AGSubgraphApply();
    AGSubgraphInvalidate();

    uint64_t v14 = *(void *)(v1 + 168);
    if (!v14) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  swift_retain();
  uint64_t v14 = *(void *)(v1 + 168);
  if (v14)
  {
LABEL_16:
    uint64_t v16 = *(void (**)(uint64_t))(*(void *)v14 + 120);
    uint64_t v17 = swift_retain();
    v16(v17);
    swift_release();
  }
LABEL_17:
  id v18 = (id)AGSubgraphGetGraph();
  long long v19 = (void *)AGSubgraphCreate();

  *(void *)(v1 + 192) = v19;
  AGSubgraphAddChild();
  id v20 = v19;
  AGGraphClearUpdate();
  long long v65 = (id)AGSubgraphGetCurrent();
  uint64_t v68 = v20;
  AGSubgraphSetCurrent();
  uint64_t v21 = *v3;
  long long v22 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)&v75[64] = *(_OWORD *)(v1 + 72);
  *(_OWORD *)&v75[80] = v22;
  *(_OWORD *)&v75[96] = *(_OWORD *)(v1 + 104);
  *(_OWORD *)&v75[108] = *(_OWORD *)(v1 + 116);
  long long v23 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)uint64_t v75 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v75[16] = v23;
  long long v24 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)&v75[32] = *(_OWORD *)(v1 + 40);
  *(_OWORD *)&v75[48] = v24;
  long long v25 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)&v74[64] = *(_OWORD *)(v1 + 72);
  *(_OWORD *)&v74[80] = v25;
  *(_OWORD *)&v74[96] = *(_OWORD *)(v1 + 104);
  *(_OWORD *)&v74[108] = *(_OWORD *)(v1 + 116);
  long long v26 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)uint64_t v74 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v74[16] = v26;
  long long v27 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)&v74[32] = *(_OWORD *)(v1 + 40);
  *(_OWORD *)&v74[48] = v27;
  unint64_t v28 = *(void (**)(long long *__return_ptr, unsigned char *, uint64_t, uint64_t))(v4 + 96);
  int v29 = v21;
  outlined retain of _GestureInputs((uint64_t)v75);
  uint64_t v71 = v4;
  v28(&v76, v74, v29, v4);
  outlined release of _GestureInputs((uint64_t)v75);
  long long v30 = v76;
  uint64_t v31 = DWORD1(v76);
  int v32 = *((void *)&v76 + 1);
  uint64_t v33 = v77;
  LODWORD(v2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(v1 + 140);
  int v34 = *(void *)(v1 + 144);
  int v35 = *(_DWORD *)(v1 + 152);
  swift_bridgeObjectRetain();
  AGGraphSetIndirectAttribute();
  uint64_t v36 = *MEMORY[0x263F288F8];
  if (v20 != *MEMORY[0x263F288F8] && v31 != *MEMORY[0x263F288F8]) {
    AGGraphSetIndirectAttribute();
  }
  *(void *)uint64_t v74 = v34;
  *(_DWORD *)&v74[8] = v35;
  *(void *)&uint64_t v76 = v32;
  DWORD2(v76) = v33;
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v76);
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  *(_DWORD *)(v1 + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v30;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 204) = v31;
  *(_DWORD *)(v1 + 184) = *(_DWORD *)AGGraphGetValue();
  swift_retain();
  swift_release();
  *(void *)(v1 + 168) = v73;
  *(void *)(v1 + 176) = v71;
  unsigned int v6 = v36;
LABEL_21:
  long long v37 = MEMORY[0x263F8EE60];
  if (*(_DWORD *)(v1 + 200) == v6)
  {
    double v72 = 0;
    long long v38 = 3;
  }
  else
  {
    _sSiSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    long long v39 = (char *)AGGraphGetValue();
    double v72 = *v39;
    long long v38 = v39[1];
  }
  if (*(_DWORD *)(v1 + 204) == v6)
  {
    _sSiSgMaTm_1(0, &lazy cache variable for type metadata for EmptyGesture<()>, v37 + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for EmptyGesture);
    long long v41 = v40;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v74);
    _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v74, (uint64_t)v75, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    long long v42 = swift_allocObject();
    memcpy((void *)(v42 + 16), v75, 0x121uLL);
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0uLL;
    uint64_t v46 = v6;
    uint64_t v47 = 3;
    uint64_t v48 = 3;
    uint64_t v49 = 0uLL;
    int v50 = 0uLL;
    long long v51 = 0uLL;
    uint64_t v52 = 0uLL;
    uint64_t v53 = 0uLL;
  }
  else
  {
    uint64_t v54 = (_OWORD *)AGGraphGetValue();
    *(_OWORD *)uint64_t v75 = *v54;
    uint64_t v55 = v54[4];
    uint64_t v57 = v54[1];
    uint64_t v56 = v54[2];
    *(_OWORD *)&v75[48] = v54[3];
    *(_OWORD *)&v75[64] = v55;
    *(_OWORD *)&v75[16] = v57;
    *(_OWORD *)&v75[32] = v56;
    long long v58 = v54[8];
    long long v60 = v54[5];
    long long v59 = v54[6];
    *(_OWORD *)&v75[112] = v54[7];
    *(_OWORD *)&v75[128] = v58;
    *(_OWORD *)&v75[80] = v60;
    *(_OWORD *)&v75[96] = v59;
    long long v42 = *((void *)&v58 + 1);
    unint64_t v69 = v60;
    unint64_t v70 = *(_OWORD *)&v75[64];
    long long v66 = *(_OWORD *)&v75[112];
    uint64_t v67 = v59;
    uint64_t v48 = v58;
    unint64_t v63 = *(_OWORD *)&v75[48];
    long long v64 = *(_OWORD *)&v75[32];
    long long v62 = *(void *)&v75[20];
    uint64_t v44 = v75[16];
    uint64_t v47 = v75[17];
    long long v41 = *(void *)&v75[8];
    uint64_t v43 = v75[0];
    outlined retain of GestureDebug.Data((uint64_t)v75);
    uint64_t v53 = v63;
    uint64_t v52 = v64;
    long long v51 = v66;
    int v50 = v67;
    uint64_t v49 = v69;
    uint64_t v45 = v70;
    uint64_t v46 = v62;
  }
  LOBYTE(v76) = v43;
  *((void *)&v76 + 1) = v41;
  LOBYTE(v77) = v44;
  BYTE1(v77) = v47;
  *(void *)((char *)&v77 + 4) = v46;
  uint64_t v78 = v52;
  uint64_t v79 = v53;
  uint64_t v80 = v45;
  uint64_t v81 = v49;
  int v82 = v50;
  uint64_t v83 = v51;
  LOBYTE(v84) = v48;
  *((void *)&v84 + 1) = v42;
  *(_OWORD *)&v74[86] = v49;
  *(_OWORD *)&v74[102] = v50;
  *(_OWORD *)&v74[118] = v51;
  *(_OWORD *)&v74[134] = v84;
  *(_OWORD *)&v74[22] = v77;
  *(_OWORD *)&v74[38] = v52;
  *(_OWORD *)&v74[54] = v53;
  *(_OWORD *)&v74[70] = v45;
  *(_OWORD *)&v74[6] = v76;
  v75[0] = v72;
  v75[1] = v38;
  *(_OWORD *)&v75[98] = *(_OWORD *)&v74[96];
  *(_OWORD *)&v75[114] = *(_OWORD *)&v74[112];
  *(_OWORD *)&v75[130] = *(_OWORD *)&v74[128];
  *(void *)&v75[144] = v42;
  *(_OWORD *)&v75[34] = *(_OWORD *)&v74[32];
  *(_OWORD *)&v75[50] = *(_OWORD *)&v74[48];
  *(_OWORD *)&v75[66] = *(_OWORD *)&v74[64];
  *(_OWORD *)&v75[82] = *(_OWORD *)&v74[80];
  *(_OWORD *)&v75[2] = *(_OWORD *)v74;
  *(_OWORD *)&v75[18] = *(_OWORD *)&v74[16];
  AGGraphSetOutputValue();
  swift_release();
  return outlined release of GestureDebug.Data((uint64_t)&v76);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance SubviewsPhase@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI13SubviewsPhase33_9DF46B4E935FF03A55FF3DDFB0B1FF2BLLV5ValueVSgWOi0_((uint64_t)v3);
  return _s7SwiftUI12GestureDebugO4DataVSgWObTm_0((uint64_t)v3, a1, &lazy cache variable for type metadata for SubviewsPhase.Value?, (uint64_t)&unk_26FA49560, MEMORY[0x263F8D8F0]);
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance SubviewsPhase()
{
  uint64_t v1 = *(void *)(v0 + 168);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 120))();
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance SubviewsPhase(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 168);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 120))();
  }
  return result;
}

uint64_t _GraphInputs.gestureAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    uint64_t v3 = &static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.gestureAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.gestureAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _GraphInputs.gestureAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.gestureAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.gestureAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    unsigned int v6 = (uint64_t *)(v5 + 72);
    __int16 v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    unsigned int v6 = &static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
    __int16 v7 = (uint64_t *)&off_268EFEA70;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v9;
  v3[1] = v8;
  return _GraphInputs.gestureAccessibilityProvider.modify;
}

void _GraphInputs.gestureAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.GestureAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
  *a1 = *(_OWORD *)&static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t key path getter for _ViewInputs.gestureAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.gestureAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_ViewInputs.gestureAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    unsigned int v6 = (uint64_t *)(v5 + 72);
    __int16 v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    unsigned int v6 = &static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
    __int16 v7 = (uint64_t *)&off_268EFEA70;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v9;
  v3[1] = v8;
  return _GraphInputs.gestureAccessibilityProvider.modify;
}

uint64_t specialized GestureResponder.gestureType.getter()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t specialized AddGestureModifier.name.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_245EE2DD8()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type GestureResponderExclusionPolicy and conformance GestureResponderExclusionPolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureResponderExclusionPolicy and conformance GestureResponderExclusionPolicy;
  if (!lazy protocol witness table cache variable for type GestureResponderExclusionPolicy and conformance GestureResponderExclusionPolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureResponderExclusionPolicy and conformance GestureResponderExclusionPolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultGestureCombiner and conformance DefaultGestureCombiner()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner;
  if (!lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner);
  }
  return result;
}

uint64_t associated type witness table accessor for GestureCombiner.Result : Gesture in DefaultGestureCombiner()
{
  return lazy protocol witness table accessor for type _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()>);
}

void type metadata accessor for _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()>()
{
  if (!lazy cache variable for type metadata for _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()>)
  {
    type metadata accessor for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>(255, &lazy cache variable for type metadata for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ExclusiveGesture);
    lazy protocol witness table accessor for type ExclusiveGesture<AnyGesture<()>, AnyGesture<()>> and conformance ExclusiveGesture<A, B>(&lazy protocol witness table cache variable for type ExclusiveGesture<AnyGesture<()>, AnyGesture<()>> and conformance ExclusiveGesture<A, B>, &lazy cache variable for type metadata for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ExclusiveGesture);
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyGesture<()> and conformance AnyGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyGesture<()> and conformance AnyGesture<A>;
  if (!lazy protocol witness table cache variable for type AnyGesture<()> and conformance AnyGesture<A>)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGesture<()> and conformance AnyGesture<A>);
  }
  return result;
}

uint64_t dispatch thunk of GestureViewModifier.gesture.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of GestureViewModifier.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of GestureViewModifier.gestureMask.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

unsigned char *storeEnumTagSinglePayload for GestureResponderExclusionPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EE3164);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureResponderExclusionPolicy()
{
  return &type metadata for GestureResponderExclusionPolicy;
}

uint64_t dispatch thunk of static GestureCombiner.combine(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static GestureCombiner.exclusionPolicy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for DefaultGestureCombiner()
{
  return &type metadata for DefaultGestureCombiner;
}

uint64_t dispatch thunk of AnyGestureContainingResponder.viewSubgraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyGestureContainingResponder.eventSources.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyGestureContainingResponder.detachContainer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyGestureContainingResponder.gestureType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnyGestureContainingResponder.isValid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnyGestureResponder.inputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyGestureResponder.childSubgraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyGestureResponder.childSubgraph.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AnyGestureResponder.childSubgraph.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AnyGestureResponder.childViewSubgraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AnyGestureResponder.childViewSubgraph.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of AnyGestureResponder.childViewSubgraph.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of AnyGestureResponder.exclusionPolicy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of AnyGestureResponder.label.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of AnyGestureResponder.gestureGraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of AnyGestureResponder.makeSubviewsGesture(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of static GestureAccessibilityProvider.makeGesture(mask:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for AddGestureModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    id v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v10 = *v11;
    v10[1] = v11[1];
    *(_DWORD *)(((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t initializeWithTake for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_DWORD *)(((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  *(_DWORD *)(((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AddGestureModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2 && *((unsigned char *)a1 + ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4))) {
    return v7 + *a1 + 1;
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v9 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  if ((v9 + 1) >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AddGestureModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      a1[v10] = 0;
    }
    if (a2)
    {
      if (v7 < 0x7FFFFFFE)
      {
        uint64_t v13 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *uint64_t v13 = 0;
          v13[1] = 0;
          *(_DWORD *)uint64_t v13 = a2 - 0x7FFFFFFF;
        }
        else
        {
          v13[1] = a2;
        }
      }
      else
      {
        uint64_t v12 = *(void (**)(void))(v6 + 56);
        v12();
      }
    }
  }
  else
  {
    unsigned int v11 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3) {
      a1[v10] = 1;
    }
  }
}

uint64_t type metadata accessor for HighPriorityGestureModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for GestureFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void **)(a2 + 96);
  unsigned int v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v4;
  id v6 = v4;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GestureFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type HighPriorityGestureCombiner and conformance HighPriorityGestureCombiner()
{
  unint64_t result = lazy protocol witness table cache variable for type HighPriorityGestureCombiner and conformance HighPriorityGestureCombiner;
  if (!lazy protocol witness table cache variable for type HighPriorityGestureCombiner and conformance HighPriorityGestureCombiner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HighPriorityGestureCombiner and conformance HighPriorityGestureCombiner);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SimultaneousGestureCombiner and conformance SimultaneousGestureCombiner()
{
  unint64_t result = lazy protocol witness table cache variable for type SimultaneousGestureCombiner and conformance SimultaneousGestureCombiner;
  if (!lazy protocol witness table cache variable for type SimultaneousGestureCombiner and conformance SimultaneousGestureCombiner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimultaneousGestureCombiner and conformance SimultaneousGestureCombiner);
  }
  return result;
}

uint64_t associated type witness table accessor for GestureCombiner.Result : Gesture in SimultaneousGestureCombiner()
{
  return lazy protocol witness table accessor for type _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()>);
}

void type metadata accessor for _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()>()
{
  if (!lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()>)
  {
    type metadata accessor for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>(255, &lazy cache variable for type metadata for SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for SimultaneousGesture);
    lazy protocol witness table accessor for type ExclusiveGesture<AnyGesture<()>, AnyGesture<()>> and conformance ExclusiveGesture<A, B>(&lazy protocol witness table cache variable for type SimultaneousGesture<AnyGesture<()>, AnyGesture<()>> and conformance SimultaneousGesture<A, B>, &lazy cache variable for type metadata for SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for SimultaneousGesture);
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()>);
    }
  }
}

void type metadata accessor for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
    v9[0] = v6;
    v9[1] = v6;
    unint64_t v10 = lazy protocol witness table accessor for type AnyGesture<()> and conformance AnyGesture<A>();
    unint64_t v11 = v10;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ExclusiveGesture<AnyGesture<()>, AnyGesture<()>> and conformance ExclusiveGesture<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_245EE3C50@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 64))(*(void *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_245EE3C98()
{
  return 16;
}

__n128 sub_245EE3CA4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for Attribute<GesturePhase<()>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  if (!*a2)
  {
    _sSiSgMaTm_1(255, a3, a4, a5);
    unint64_t v6 = type metadata accessor for Attribute();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t partial apply for specialized closure #1 in MapGesture.init(_:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in MapGesture.init(_:)(*a1, *(uint64_t (**)(__int16 *))(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in GestureResponder.makeGesture(inputs:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in GestureResponder.makeGesture(inputs:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t type metadata accessor for GestureViewDebug()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CombiningGestureViewChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GestureViewChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply(uint64_t a1, uint64_t a2)
{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1, a2, &lazy cache variable for type metadata for AnyGesture<()>, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1, a2, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void, uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  _sSiSgMaTm_1(0, a3, MEMORY[0x263F8EE60] + 8, a4);
  return a5(a1, v11, v10, v9, a2);
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for GestureDebug.Value<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>;
  if (!lazy protocol witness table cache variable for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for AnyGestureInfo<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGestureInfo);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for GestureDebug.Value<Never>, MEMORY[0x263F8E628], (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in MapGesture.init(_:)@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in MapGesture.init(_:)(*a1, *(uint64_t (**)(void))(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for GestureDebug.Value<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for GestureDebug.Value<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for GestureDebug.Value<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>);
  }
  return result;
}

void _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_2(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>(a4, a5);
    unint64_t v8 = type metadata accessor for Map2Gesture();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>)
  {
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for GestureDebug.Value<Double>, MEMORY[0x263F8D538], (uint64_t (*)(void, uint64_t))type metadata accessor for GestureDebug.Value);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>);
  }
  return result;
}

void type metadata accessor for (GestureResponderExclusionPolicy, GestureResponderExclusionPolicy)()
{
  if (!lazy cache variable for type metadata for (GestureResponderExclusionPolicy, GestureResponderExclusionPolicy))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (GestureResponderExclusionPolicy, GestureResponderExclusionPolicy));
    }
  }
}

uint64_t sub_245EE42F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 72))(*(void *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_245EE4338()
{
  return 16;
}

__n128 sub_245EE4344(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(a1, (uint64_t (*)(uint64_t, unint64_t))specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:));
}

uint64_t partial apply for specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  return a2(a1, *(unsigned int *)(v2 + 16) | ((unint64_t)*(unsigned __int8 *)(v2 + 20) << 32));
}

uint64_t sub_245EE4390@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ResolvedStyledText.gesture.getter();
  *a1 = result;
  return result;
}

void type metadata accessor for Focus<ResolvedStyledText, AnyGesture<()>>()
{
  if (!lazy cache variable for type metadata for Focus<ResolvedStyledText, AnyGesture<()>>)
  {
    type metadata accessor for ResolvedStyledText();
    _sSiSgMaTm_1(255, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<ResolvedStyledText, AnyGesture<()>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of GesturePhase<URL>(uint64_t a1, uint64_t a2)
{
  _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for GesturePhase<URL>, MEMORY[0x263F06EA8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  _sSay7SwiftUI13ViewResponderCGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for EmptyGestureAccessibilityProvider()
{
  return &type metadata for EmptyGestureAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.GestureAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.GestureAccessibilityProviderKey;
}

uint64_t initializeWithCopy for CombiningGestureViewChild(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CombiningGestureViewChild(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = v3;
  return a1;
}

uint64_t assignWithTake for CombiningGestureViewChild(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

_OWORD *initializeBufferWithCopyOfBuffer for SubviewsGesture(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

void *assignWithCopy for SubviewsGesture(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for SubviewsGesture(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return a1;
}

void *type metadata accessor for SubviewsGesture()
{
  return &unk_26FA514F8;
}

ValueMetadata *type metadata accessor for SimultaneousGestureCombiner()
{
  return &type metadata for SimultaneousGestureCombiner;
}

ValueMetadata *type metadata accessor for HighPriorityGestureCombiner()
{
  return &type metadata for HighPriorityGestureCombiner;
}

uint64_t base witness table accessor for _AttributeBody in GestureViewChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in CombiningGestureViewChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in GestureViewDebug<A>()
{
  return swift_getWitnessTable();
}

uint64_t _s7SwiftUI12GestureDebugO4DataVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  _sSiSgMaTm_1(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_245EE4868()
{
  long long v3 = *(_OWORD *)(v0 + 256);
  long long v4 = *(_OWORD *)(v0 + 272);
  long long v2 = *(_OWORD *)(v0 + 224);
  outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(_OWORD *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 240),
    *(void *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(v0 + 288),
    *(void *)(v0 + 296),
    *(unsigned char *)(v0 + 304));

  return swift_deallocObject();
}

uint64_t *outlined release of GestureDebug.Data?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of GestureDebug.Data?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for ContentGesture()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for EventListener<SpatialEvent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_245EE4A24()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type SubviewsPhase and conformance SubviewsPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type SubviewsPhase and conformance SubviewsPhase;
  if (!lazy protocol witness table cache variable for type SubviewsPhase and conformance SubviewsPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsPhase and conformance SubviewsPhase);
  }
  return result;
}

uint64_t outlined release of SubviewsPhase(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 96);
  long long v3 = *(void **)(a1 + 192);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return a1;
}

void destroy for SubviewsPhase(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  long long v2 = *(void **)(a1 + 192);
}

uint64_t initializeWithCopy for SubviewsPhase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v5 = *(void **)(a2 + 96);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  unint64_t v6 = *(void **)(a2 + 160);
  *(void *)(a1 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v6;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  uint64_t v7 = *(void **)(a2 + 192);
  *(void *)(a1 + 192) = v7;
  *(void *)(a1 + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 200);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v6;
  swift_retain();
  id v10 = v7;
  return a1;
}

uint64_t assignWithCopy for SubviewsPhase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void **)(a2 + 96);
  uint64_t v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v4;
  id v6 = v4;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 14specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  uint64_t v7 = *(void **)(a2 + 160);
  id v8 = *(void **)(a1 + 160);
  *(void *)(a1 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v7;
  id v9 = v7;

  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_retain();
  swift_release();
  *(void *)(a1 + 176) = v10;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  uint64_t v11 = *(void **)(a1 + 192);
  uint64_t v12 = *(void **)(a2 + 192);
  *(void *)(a1 + 192) = v12;
  id v13 = v12;

  *(_DWORD *)(a1 + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v9;
  return result;
}

uint64_t assignWithTake for SubviewsPhase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);

  uint64_t v4 = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 160);
  swift_release();
  *(void *)(a1 + 176) = v4;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  long long v5 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);

  *(void *)(a1 + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubviewsPhase(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubviewsPhase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SubviewsPhase()
{
  return &unk_26FA495E0;
}

uint64_t destroy for SubviewsPhase.Value(uint64_t a1)
{
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(unsigned char *)(a1 + 136));

  return swift_release();
}

uint64_t initializeWithCopy for SubviewsPhase.Value(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 128);
  char v13 = *(unsigned char *)(a2 + 136);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v5;
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10;
  *(void *)(a1 + 128) = v11;
  *(unsigned char *)(a1 + 136) = v13;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SubviewsPhase.Value(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 128);
  char v22 = *(unsigned char *)(a2 + 136);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v22);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = *(void *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = *(void *)(a1 + 112);
  uint64_t v18 = *(void *)(a1 + 120);
  uint64_t v19 = *(void *)(a1 + 128);
  char v20 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v5;
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10;
  *(void *)(a1 + 128) = v11;
  *(unsigned char *)(a1 + 136) = v22;
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SubviewsPhase.Value(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  char v4 = *(unsigned char *)(a2 + 136);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 128);
  char v13 = *(unsigned char *)(a1 + 136);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = v4;
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SubviewsPhase.Value(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubviewsPhase.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SubviewsPhase.Value()
{
  return &unk_26FA49560;
}

uint64_t type metadata accessor for ContentPhase()
{
  return __swift_instantiateGenericMetadata();
}

double _s7SwiftUI13SubviewsPhase33_9DF46B4E935FF03A55FF3DDFB0B1FF2BLLV5ValueVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ContentPhase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ContentPhase<A>()
{
  return swift_getWitnessTable();
}

double static Optional<A>._makeGesture(gesture:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v37 = *(_OWORD *)(a2 + 64);
  long long v38 = v5;
  long long v39 = *(_OWORD *)(a2 + 96);
  uint64_t v40 = *(void *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v33 = *(_OWORD *)a2;
  long long v34 = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v35 = *(_OWORD *)(a2 + 32);
  long long v36 = v7;
  int v8 = *(_DWORD *)(a2 + 120);
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for AnyGesture();
  LODWORD(v21) = v4;
  uint64_t v10 = type metadata accessor for Optional<A>.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)&v21, v9, v10, WitnessTable, v18);
  long long v25 = v37;
  long long v26 = v38;
  long long v27 = v39;
  uint64_t v28 = v40;
  long long v21 = v33;
  long long v22 = v34;
  long long v23 = v35;
  long long v24 = v36;
  int v29 = v8;
  static AnyGesture._makeGesture(gesture:inputs:)((int *)v18, &v21, (uint64_t)&v30);
  if ((v8 & 8) != 0 && !(swift_conformsToProtocol2() ? v9 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v13 = 2;
    }
    else {
      char v13 = 1;
    }
    char v20 = v13;
    long long v25 = v37;
    long long v26 = v38;
    long long v27 = v39;
    uint64_t v28 = v40;
    long long v21 = v33;
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36;
    int v29 = v8;
    *(double *)uint64_t v18 = v30;
    v18[1] = v31;
    int v19 = v32;
    type metadata accessor for _GestureOutputs();
    unint64_t v14 = _GestureOutputs.debugData.getter();
    LOBYTE(v18[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v9, &v20, 0x100000000, &v21, v14 | ((HIDWORD(v14) & 1) << 32), 0x100000000);
  }
  uint64_t v15 = v31;
  int v16 = v32;
  double result = v30;
  *(double *)a3 = v30;
  *(void *)(a3 + 8) = v15;
  *(_DWORD *)(a3 + 16) = v16;
  return result;
}

uint64_t type metadata accessor for Optional<A>.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Optional<A>.Child.gesture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t Optional<A>.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = &v13[-v7];
  Optional<A>.Child.gesture.getter((uint64_t)&v13[-v7]);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for AnyGesture();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>.Child.value.getter, (uint64_t)v13, MEMORY[0x263F8E628], v9, v10, (uint64_t)&v16);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = v16;
  if (!v16)
  {
    type metadata accessor for Optional<A>.Empty();
    uint64_t WitnessTable = swift_getWitnessTable();
    return AnyGesture.init<A>(_:)(WitnessTable);
  }
  return result;
}

uint64_t closure #1 in Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v5, v3);
  swift_getAssociatedTypeWitness();
  uint64_t result = AnyGesture.init<A>(_:)((uint64_t)v5);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance A?<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Optional<A>.Child.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t static Optional<A>.Empty._makeGesture(gesture:inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v9 - v4;
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = v2;
  uint64_t v6 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v10, v2, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return _GestureOutputs.init(phase:)(v9[3], a1);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance A?<A>.Empty@<X0>(uint64_t a1@<X8>)
{
  return static Optional<A>.Empty._makeGesture(gesture:inputs:)(a1);
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance <A> A?@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static Optional<A>._makeGesture(gesture:inputs:)(a1, a2, a3);
}

uint64_t instantiation function for generic protocol witness table for <A> A?(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in A?<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in Optional<A>.Child.value.getter(a1, a2);
}

uint64_t type metadata accessor for Optional<A>.Empty()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for A?<A>.Empty(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _FrameLayout.placement(of:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v5;
  void v18[2] = *(_OWORD *)(a2 + 32);
  unint64_t v6 = *(void *)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  char v19 = *(unsigned char *)(a2 + 48);
  PlacementContext.proposedSize.getter((uint64_t)v15);
  if (*(unsigned char *)(v3 + 8)) {
    uint64_t v8 = (uint64_t *)v15;
  }
  else {
    uint64_t v8 = (uint64_t *)v3;
  }
  uint64_t v9 = *v8;
  char v10 = *(unsigned char *)(v3 + 8) & v15[8];
  uint64_t v11 = (uint64_t *)(v3 + 16);
  char v12 = *(unsigned char *)(v3 + 24);
  if (v12) {
    uint64_t v11 = &v16;
  }
  uint64_t v13 = *v11;
  v15[0] = v12 & v17;
  return specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v6, v7, (uint64_t)v18, v9, v10, v13, v12 & v17, a3);
}

uint64_t View.frame()(uint64_t a1)
{
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  specialized _FrameLayout.init(width:height:alignment:)(0.0, 1, 0.0, 1, static Alignment.center, *((uint64_t *)&static Alignment.center + 1), (uint64_t)v3);
  return View.modifier<A>(_:)(v3, a1, &type metadata for _FrameLayout);
}

uint64_t sub_245EE5F88()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_245EE5F9C()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

void AccessibilityLabelStorage.Placement.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static AccessibilityLabelStorage.Placement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int AccessibilityLabelStorage.Placement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AccessibilityLabelStorage.texts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityLabelStorage.texts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt v1 = a1;
  return result;
}

uint64_t (*AccessibilityLabelStorage.texts.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void AccessibilityLabelStorage.placement.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *AccessibilityLabelStorage.placement.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*AccessibilityLabelStorage.placement.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::AccessibilityLabelStorage __swiftcall AccessibilityLabelStorage.init(texts:placement:)(Swift::OpaquePointer texts, SwiftUI::AccessibilityLabelStorage::Placement placement)
{
  char v3 = *(unsigned char *)placement;
  *(Swift::OpaquePointer *)uint64_t v2 = texts;
  *(unsigned char *)(v2 + 8) = v3;
  result.texts = texts;
  result.placement = placement;
  return result;
}

BOOL AccessibilityLabelStorage.removing(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized Collection<>.firstIndex(of:)(a1, a2, a3 & 1, a4, v9);
  char v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = specialized Array.remove(at:)(v10);
    outlined consume of Text.Storage(v13, v15, v14 & 1);
    swift_bridgeObjectRelease();
  }
  return (v12 & 1) == 0;
}

uint64_t static AccessibilityLabelStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & (v2 == v3);
}

Swift::Bool __swiftcall AccessibilityLabelStorage.merge(with:)(SwiftUI::AccessibilityLabelStorage with)
{
  uint64_t v2 = *(void *)with.texts._rawValue;
  int v3 = *((unsigned __int8 *)with.texts._rawValue + 8);
  int v4 = *(unsigned __int8 *)(v1 + 8);
  type metadata accessor for (AccessibilityLabelStorage.Placement, AccessibilityLabelStorage.Placement)();
  if (v4 == 3)
  {
    if (v3 != 3)
    {
      swift_bridgeObjectRelease();
      *(void *)uint64_t v1 = v2;
      *(unsigned char *)(v1 + 8) = v3;
      swift_bridgeObjectRetain();
      return 1;
    }
    return 0;
  }
  if (!v3) {
    goto LABEL_8;
  }
  if (v3 == 3) {
    return 0;
  }
  if (v4 == 1)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v2);
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v3 == 1) {
    goto LABEL_15;
  }
  if (v4 != 2)
  {
    if (v4) {
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v6 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v6);
    return 1;
  }
  if (v3 == 2) {
    return 0;
  }
LABEL_16:
  Swift::Bool result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void type metadata accessor for (AccessibilityLabelStorage.Placement, AccessibilityLabelStorage.Placement)()
{
  if (!lazy cache variable for type metadata for (AccessibilityLabelStorage.Placement, AccessibilityLabelStorage.Placement))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityLabelStorage.Placement, AccessibilityLabelStorage.Placement));
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabelStorage.Placement and conformance AccessibilityLabelStorage.Placement()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabelStorage.Placement and conformance AccessibilityLabelStorage.Placement;
  if (!lazy protocol witness table cache variable for type AccessibilityLabelStorage.Placement and conformance AccessibilityLabelStorage.Placement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabelStorage.Placement and conformance AccessibilityLabelStorage.Placement);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityLabelStorage.Placement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EE6424);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLabelStorage.Placement()
{
  return &type metadata for AccessibilityLabelStorage.Placement;
}

uint64_t CachedEnvironment.environment.getter()
{
  return *v0;
}

uint64_t CachedEnvironment.AnimatedFrame.animatedPosition()()
{
  if (*(unsigned char *)(v0 + 32) != 1) {
    return *(unsigned int *)(v0 + 28);
  }
  uint64_t result = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 28) = result;
  *(unsigned char *)(v0 + 32) = 0;
  return result;
}

uint64_t CachedEnvironment.AnimatedFrame.animatedSize()()
{
  if (*(unsigned char *)(v0 + 40) != 1) {
    return *(unsigned int *)(v0 + 36);
  }
  uint64_t result = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 36) = result;
  *(unsigned char *)(v0 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  return result;
}

uint64_t CachedEnvironment.AnimatedFrame.animatedCGSize()()
{
  if (*(unsigned char *)(v0 + 48) != 1) {
    return *(unsigned int *)(v0 + 44);
  }
  uint64_t result = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 44) = result;
  *(unsigned char *)(v0 + 48) = 0;
  return result;
}

int32x2_t CachedEnvironment.AnimatedFrame.init(inputs:position:size:pixelLength:animatedFrame:environment:)@<D0>(int32x2_t *a1@<X0>, __int32 a2@<W1>, __int32 a3@<W2>, __int32 a4@<W3>, __int32 a5@<W4>, int32x2_t *a6@<X8>)
{
  __int32 v12 = a1[1].i32[0];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  a6->i32[0] = a2;
  a6->i32[1] = a3;
  a6[1].i32[0] = a4;
  a6[1].i32[1] = v12;
  int32x2_t result = vrev64_s32(a1[3]);
  a6[2] = result;
  a6[3].i32[0] = a5;
  a6[3].i32[1] = 0;
  a6[4].i8[0] = 1;
  a6[4].i32[1] = 0;
  a6[5].i8[0] = 1;
  a6[5].i32[1] = 0;
  a6[6].i8[0] = 1;
  return result;
}

uint64_t CachedEnvironment.AnimatedFrame.position.getter()
{
  return *v0;
}

uint64_t CachedEnvironment.AnimatedFrame.size.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t CachedEnvironment.AnimatedFrame.pixelLength.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t CachedEnvironment.AnimatedFrame.time.getter()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t CachedEnvironment.AnimatedFrame.transaction.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t CachedEnvironment.AnimatedFrame.viewPhase.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t CachedEnvironment.AnimatedFrame.animatedFrame.getter()
{
  return *(unsigned int *)(v0 + 24);
}

Swift::Int ResolvedShapeStyles.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 12);
  Swift::UInt32 v5 = *(_DWORD *)(v0 + 16);
  Swift::UInt v6 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 21);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ResolvedShapeStyles()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 12);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 16);
  Swift::UInt v5 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 21);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvedShapeStyles()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 12);
  Swift::UInt32 v5 = *(_DWORD *)(v0 + 16);
  Swift::UInt v6 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 21);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t sub_245EE7008@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.pixelLength.getter();
  *a1 = v3;
  return result;
}

uint64_t initializeWithCopy for CachedEnvironment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CachedEnvironment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CachedEnvironment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedEnvironment(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CachedEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

__n128 __swift_memcpy49_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for CachedEnvironment.AnimatedFrame()
{
  return &type metadata for CachedEnvironment.AnimatedFrame;
}

ValueMetadata *type metadata accessor for CachedEnvironment.PlatformCache()
{
  return &type metadata for CachedEnvironment.PlatformCache;
}

__n128 __swift_memcpy22_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ResolvedShapeStyles(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 22)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 21);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedShapeStyles(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 22) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 22) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 21) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedShapeStyles()
{
  return &type metadata for ResolvedShapeStyles;
}

uint64_t assignWithTake for CachedEnvironment.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for CachedEnvironment.Item()
{
  return &type metadata for CachedEnvironment.Item;
}

uint64_t specialized static ResolvedShapeStyles.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & (a1[1].i32[0] == a2[1].i32[0]) & (a1[1].u8[4] == a2[1].u8[4]) & ~(a2[1].u8[5] ^ a1[1].u8[5]);
}

__n128 Text.Effect.DrawableFragment.subscript.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(v3 + 8);
  unint64_t v6 = *(void *)(v3 + 32);
  Swift::UInt64 v7 = specialized Text.Effect.Key.key<A>(for:state:)(*(void *)(a2 + 16), a1, v5);
  uint64_t v9 = v8;
  uint64_t v10 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v10, v7, v9, v6, v15);
  uint64_t v11 = v15[1];
  uint64_t v12 = v18;
  __n128 result = v17;
  long long v14 = v16;
  *(void *)a3 = v15[0];
  *(void *)(a3 + 8) = v11;
  *(_OWORD *)(a3 + 16) = v14;
  *(__n128 *)(a3 + 32) = result;
  *(void *)(a3 + 48) = v12;
  return result;
}

BOOL Text.Effect.BaseFragment.coversAllParagraphs.getter()
{
  uint64_t v2 = *v0;
  Swift::UInt64 v1 = v0[1];
  uint64_t v3 = v0[2];
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 48);
  if (*(void *)(v4 + 16))
  {
    swift_retain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
    if (v6)
    {
      char v7 = *(unsigned char *)(*(void *)(v4 + 56) + 16 * v5 + 8);
      swift_endAccess();
      swift_release();
      return (v7 & 2) == 0;
    }
    swift_release();
  }
  swift_endAccess();
  return 0;
}

uint64_t Text.Effect.DrawableFragment.range.getter()
{
  uint64_t result = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(v0 + 24) + 96) + 16);
  if (__OFADD__(result, v2))
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result + v2 < result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

__n128 Text.Effect.DrawableFragment.init(keyframes:key:fragment:)@<Q0>(uint64_t a1@<X0>, Swift::UInt64 a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(a1, a2, a3, a4, v10);
  uint64_t v6 = v10[1];
  uint64_t v7 = v13;
  __n128 result = v12;
  long long v9 = v11;
  *(void *)a5 = v10[0];
  *(void *)(a5 + 8) = v6;
  *(_OWORD *)(a5 + 16) = v9;
  *(__n128 *)(a5 + 32) = result;
  *(void *)(a5 + 48) = v7;
  return result;
}

uint64_t Text.Effect.BaseFragment.typographicBounds(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(v3 + 48);
  int64_t v6 = a1 - v5;
  if (__OFSUB__(a1, v5)) {
    goto LABEL_49;
  }
  uint64_t v8 = a2 - v5;
  if (__OFSUB__(a2, v5))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v8 < v6)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v6 < 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t result = *(void *)(v9 + 96);
  unint64_t v11 = *(void *)(result + 16);
  if (v11 < v6 || (uint64_t)v11 < v8) {
LABEL_53:
  }
    __break(1u);
  if (v6 == v8)
  {
    uint64_t v13 = *(void *)(v9 + 64);
    double v14 = 0.0;
    double v15 = 0.0;
    double v16 = 0.0;
    goto LABEL_42;
  }
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = v5 - a2;
  char v19 = 1;
  double v16 = 0.0;
  uint64_t v20 = 48;
  double v15 = 0.0;
  double v14 = 0.0;
  uint64_t v21 = v6;
  double v22 = 0.0;
  double v63 = 0.0;
LABEL_12:
  uint64_t v23 = v21 + 1;
  uint64_t v24 = v20 + 24 * v21;
  do
  {
    if (v21 < v6 || v23 - 1 >= v8)
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v25 = *(void *)(v17 + v24);
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      uint64_t v55 = v20;
      uint64_t v57 = v17;
      uint64_t v58 = v8;
      uint64_t v59 = v6;
      uint64_t v60 = v9;
      swift_bridgeObjectRetain();
      uint64_t v56 = v18;
      uint64_t v54 = v18 + v23;
      uint64_t v27 = v25 + 48;
      char v28 = v19;
      do
      {
        double v62 = v22;
        double v30 = *(void **)(v27 - 16);
        CFIndex v31 = *(void *)(v27 + 32);
        uint64_t v32 = *(void *)(v27 + 40);
        double v65 = v16;
        double v66 = v14;
        double v64 = v15;
        if (v31 == v32)
        {
          swift_retain();
          id v33 = v30;
          double v34 = 0.0;
          double v35 = 0.0;
          double TypographicBounds = 0.0;
          double v37 = 0.0;
          double v38 = 0.0;
          double v39 = 0.0;
        }
        else
        {
          char v61 = v28;
          double v40 = *(double *)v27;
          double v41 = *(double *)(v27 + 8);
          CFIndex v42 = *(void *)(v27 - 8);
          swift_retain_n();
          uint64_t v43 = v30;
          uint64_t v44 = (id)_CTLineGetRunAtIndex(v43, v42);
          BOOL v45 = __OFSUB__(v32, v31);
          CFIndex v46 = v32 - v31;
          if (v45) {
            goto LABEL_47;
          }
          uint64_t v47 = v44;
          buffer.CGFloat x = 0.0;
          buffer.CGFloat y = 0.0;
          CGFloat descent = 0.0;
          CGFloat ascent = 0.0;
          originsBuffer.CGFloat y = 0.0;
          CGFloat leading = 0.0;
          originsBuffer.CGFloat x = 0.0;
          v73.location = v31;
          v73.length = 1;
          CTRunGetPositions(v44, v73, &buffer);
          v74.location = v31;
          v74.length = 1;
          CTRunGetBaseAdvancesAndOrigins(v47, v74, 0, &originsBuffer);
          CGFloat v48 = buffer.x - originsBuffer.x;
          CGFloat v49 = buffer.y - originsBuffer.y;
          v75.location = v31;
          v75.length = v46;
          double TypographicBounds = CTRunGetTypographicBounds(v47, v75, &ascent, &descent, &leading);
          swift_release();

          double v37 = ascent;
          double v38 = fabs(descent);
          double v39 = leading;
          double v34 = v40 + v48;
          double v35 = v41 - v49;
          char v28 = v61;
        }
        CGFloat v50 = v35 - v37;
        v76.origin.CGFloat x = v34;
        v76.origin.CGFloat y = v50;
        v76.size.CGFloat width = TypographicBounds;
        v76.size.CGFloat height = v37 + v38;
        double MinX = CGRectGetMinX(v76);
        v77.origin.CGFloat x = v34;
        v77.origin.CGFloat y = v50;
        v77.size.CGFloat width = TypographicBounds;
        v77.size.CGFloat height = v37 + v38;
        double MaxX = CGRectGetMaxX(v77);
        swift_release();

        if (MinX > MaxX) {
          goto LABEL_46;
        }
        if (v28)
        {
          double v29 = MaxX;
          double v22 = MinX;
          double v14 = v66;
        }
        else
        {
          double v22 = v62;
          double v29 = v63;
          if (MinX < v62) {
            double v22 = MinX;
          }
          if (MaxX >= v63) {
            double v29 = MaxX;
          }
          double v14 = v66;
          if (v22 > v29) {
            goto LABEL_48;
          }
        }
        double v63 = v29;
        char v28 = 0;
        v27 += 64;
        if (v14 <= v37) {
          double v14 = v37;
        }
        double v15 = v64;
        double v16 = v65;
        if (v64 <= v38) {
          double v15 = v38;
        }
        if (v65 <= v39) {
          double v16 = v39;
        }
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      char v19 = 0;
      uint64_t v21 = v23;
      uint64_t v9 = v60;
      uint64_t v8 = v58;
      int64_t v6 = v59;
      uint64_t v18 = v56;
      uint64_t v17 = v57;
      uint64_t v20 = v55;
      if (!v54)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v13 = *(void *)(v60 + 64);
LABEL_43:
        double v53 = v63 - v22;
        goto LABEL_44;
      }
      goto LABEL_12;
    }
    ++v23;
    v24 += 24;
  }
  while (v18 + v23 != 1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v9 + 64);
  if ((v19 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_42:
  double v22 = *(double *)(v9 + 56);
  double v53 = 0.0;
LABEL_44:
  *(double *)a3 = v22;
  *(void *)(a3 + 8) = v13;
  *(double *)(a3 + 16) = v53;
  *(double *)(a3 + 24) = v14;
  *(double *)(a3 + 32) = v15;
  *(double *)(a3 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v16;
  return result;
}

double Text.Effect.BaseFragment.init(keyframes:key:fragment:)@<D0>(uint64_t a1@<X0>, Swift::UInt64 a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(a1, a2, a3, a4, v8);
  long long v6 = v8[1];
  *(_OWORD *)a5 = v8[0];
  *(_OWORD *)(a5 + 16) = v6;
  double result = *(double *)&v9;
  *(_OWORD *)(a5 + 32) = v9;
  *(void *)(a5 + 48) = v10;
  return result;
}

uint64_t Text.Effect.DrawableFragment.content.getter@<X0>(void *a1@<X8>)
{
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v1);

  return Text.Effect.DrawableContent.init(fragment:)(v1, a1);
}

uint64_t Text.Effect.DrawableFragment.fragmentIndex.getter()
{
  return *(void *)(v0 + 32);
}

double Text.Effect.DrawableFragment.width.getter()
{
  return CGRectGetWidth(*(CGRect *)(*(void *)(v0 + 24) + 120));
}

double Text.Effect.DrawableFragment.lineBreakingFragment.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 120))(v4, v5, v8);
  __n128 v11 = Text.Effect.DrawableFragment.subscript.getter((uint64_t)v10, a1, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, AssociatedTypeWitness, v11);
  long long v12 = v15[1];
  *(_OWORD *)a2 = v15[0];
  *(_OWORD *)(a2 + 16) = v12;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  return result;
}

double Text.Effect.DrawableFragment.defaultDrawingFragment.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 128))(v4, v5, v8);
  __n128 v11 = Text.Effect.DrawableFragment.subscript.getter((uint64_t)v10, a1, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, AssociatedTypeWitness, v11);
  long long v12 = v15[1];
  *(_OWORD *)a2 = v15[0];
  *(_OWORD *)(a2 + 16) = v12;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  return result;
}

uint64_t Text.Effect.DrawableFragment.typographicBounds(for:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else if (v2 >= result)
  {
    double result = Text.Effect.BaseFragment.typographicBounds(for:)(result, v2, (uint64_t)v5);
    long long v4 = v5[1];
    *a2 = v5[0];
    a2[1] = v4;
    a2[2] = v5[2];
    return result;
  }
  __break(1u);
  return result;
}

void Text.Effect.DrawableFragment.baseWritingDirection.getter(BOOL *a1@<X8>)
{
}

uint64_t Text.Effect.BaseFragment.onlyEmojis.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 96);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = v1 + 32;
  swift_bridgeObjectRetain_n();
  uint64_t v4 = 0;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  while (1)
  {
    uint64_t v5 = *(void *)(v3 + 24 * v4 + 16);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6) {
      break;
    }
LABEL_3:
    if (++v4 == v2)
    {
      uint64_t v15 = 1;
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v7 = (CFIndex *)(v5 + 40);
  while (1)
  {
    double v8 = (void *)*(v7 - 1);
    CFIndex v9 = *v7;
    swift_retain_n();
    uint64_t v10 = v8;
    __n128 v11 = (id)_CTLineGetRunAtIndex(v10, v9);
    long long v12 = (const __CTFont *)(id)CTRunGetFont();
    swift_release();

    uint64_t v13 = (__CFString *)CTFontCopyPostScriptName(v12);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v14._countAndFlagsBits = 0xD000000000000010;
    v14._object = (void *)0x8000000246222760;
    LOBYTE(v13) = String.hasPrefix(_:)(v14);
    swift_release_n();

    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      break;
    }
    v7 += 8;
    if (!--v6)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v3 = v17;
      uint64_t v2 = v18;
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v15 = 0;
LABEL_10:
  swift_bridgeObjectRelease_n();
  return v15;
}

uint64_t Text.Layout.Cluster.typographicBounds(with:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5)
  {
    double v12 = *(double *)(result + 24);
    double v35 = 0.0;
    double MaxX = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    goto LABEL_25;
  }
  uint64_t v36 = *(void *)(result + 32);
  swift_bridgeObjectRetain();
  uint64_t v7 = a2 + 48;
  char v8 = 1;
  double MaxX = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
  double v13 = 0.0;
  while (1)
  {
    double v37 = v13;
    double v38 = v12;
    Swift::String v14 = *(void **)(v7 - 16);
    CFIndex v15 = *(void *)(v7 + 32);
    uint64_t v16 = *(void *)(v7 + 40);
    double v39 = v10;
    double v40 = MaxX;
    double v41 = v11;
    if (v15 == v16)
    {
      swift_retain();
      id v17 = v14;
      double v18 = 0.0;
      double v19 = 0.0;
      double TypographicBounds = 0.0;
      double v21 = 0.0;
      double v22 = 0.0;
      double v23 = 0.0;
    }
    else
    {
      double v24 = *(double *)v7;
      double v25 = *(double *)(v7 + 8);
      CFIndex v26 = *(void *)(v7 - 8);
      swift_retain();
      uint64_t v27 = (id)_CTLineGetRunAtIndex((const __CTLine *)v14, v26);
      BOOL v28 = __OFSUB__(v16, v15);
      CFIndex v29 = v16 - v15;
      if (v28) {
        goto LABEL_27;
      }
      double v30 = v27;
      buffer.CGFloat x = 0.0;
      buffer.CGFloat y = 0.0;
      CGFloat descent = 0.0;
      CGFloat ascent = 0.0;
      originsBuffer.CGFloat y = 0.0;
      CGFloat leading = 0.0;
      originsBuffer.CGFloat x = 0.0;
      v48.location = v15;
      v48.length = 1;
      CTRunGetPositions(v27, v48, &buffer);
      v49.location = v15;
      v49.length = 1;
      CTRunGetBaseAdvancesAndOrigins(v30, v49, 0, &originsBuffer);
      CGFloat v31 = buffer.x - originsBuffer.x;
      CGFloat v32 = buffer.y - originsBuffer.y;
      v50.location = v15;
      v50.length = v29;
      double TypographicBounds = CTRunGetTypographicBounds(v30, v50, &ascent, &descent, &leading);

      double v21 = ascent;
      double v22 = fabs(descent);
      double v23 = leading;
      double v18 = v24 + v31;
      double v19 = v25 - v32;
    }
    double v10 = v19 - v21;
    v51.origin.CGFloat x = v18;
    v51.origin.CGFloat y = v10;
    v51.size.CGFloat width = TypographicBounds;
    v51.size.CGFloat height = v21 + v22;
    double MinX = CGRectGetMinX(v51);
    v52.origin.CGFloat x = v18;
    v52.origin.CGFloat y = v10;
    v52.size.CGFloat width = TypographicBounds;
    v52.size.CGFloat height = v21 + v22;
    double MaxX = CGRectGetMaxX(v52);
    swift_release();

    if (MinX > MaxX)
    {
      __break(1u);
LABEL_27:
      __break(1u);
    }
    if ((v8 & 1) == 0) {
      break;
    }
    double v13 = MaxX;
    double v12 = MinX;
    double v11 = v41;
LABEL_4:
    char v8 = 0;
    v7 += 64;
    if (v11 <= v21) {
      double v11 = v21;
    }
    double v10 = v39;
    double MaxX = v40;
    if (v39 <= v22) {
      double v10 = v22;
    }
    if (v40 <= v23) {
      double MaxX = v23;
    }
    if (!--v5) {
      goto LABEL_23;
    }
  }
  double v13 = v37;
  double v12 = v38;
  if (MinX < v38) {
    double v12 = MinX;
  }
  if (v37 <= MaxX) {
    double v13 = MaxX;
  }
  double v11 = v41;
  if (v12 <= v13) {
    goto LABEL_4;
  }
  __break(1u);
LABEL_23:
  double v34 = v13;
  double result = swift_bridgeObjectRelease();
  double v35 = v34 - v12;
  uint64_t v4 = v36;
LABEL_25:
  *(double *)a3 = v12;
  *(void *)(a3 + 8) = v4;
  *(double *)(a3 + 16) = v35;
  *(double *)(a3 + 24) = v11;
  *(double *)(a3 + 32) = v10;
  *(double *)(a3 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = MaxX;
  return result;
}

uint64_t specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)@<X0>(uint64_t a1@<X0>, Swift::UInt64 a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 48);
  if (!*(void *)(v10 + 16)) {
    goto LABEL_14;
  }
  swift_retain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if (v12)
  {
    uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 16 * v11);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((a4 & 0x8000000000000000) == 0)
    {
      unint64_t v14 = *(void *)(v13 + 16);
      if (v14 <= a4)
      {
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
      uint64_t v15 = v13 + 32;
      uint64_t v16 = *(void *)(v13 + 32 + 8 * a4);
      uint64_t v17 = 0;
      if (!a4)
      {
LABEL_9:
        swift_retain();
        uint64_t result = swift_bridgeObjectRelease();
        *a5 = a1;
        a5[1] = a2;
        a5[2] = a3;
        a5[3] = v16;
        a5[4] = a4;
        a5[5] = v14;
        a5[6] = v17;
        return result;
      }
      unint64_t v18 = a4;
      while (1)
      {
        uint64_t v19 = *(void *)(*(void *)(*(void *)v15 + 96) + 16);
        BOOL v20 = __OFADD__(v17, v19);
        v17 += v19;
        if (v20) {
          break;
        }
        v15 += 8;
        if (!--v18) {
          goto LABEL_9;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  swift_release();
LABEL_14:
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.DrawableFragment.visualOrder.getter()
{
  return *(void *)(*(void *)(v0 + 24) + 104);
}

uint64_t type metadata accessor for Text.Effect.DrawableFragment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for Text.Effect.DrawableFragment()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Text.Effect.DrawableFragment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Text.Effect.DrawableFragment(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for Text.Effect.DrawableFragment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.BaseFragment()
{
  return &type metadata for Text.Effect.BaseFragment;
}

ValueMetadata *type metadata accessor for BigTextEffect()
{
  return &type metadata for BigTextEffect;
}

unint64_t lazy protocol witness table accessor for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState()
{
  unint64_t result = lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState);
  }
  return result;
}

uint64_t specialized KeyframeTrack._resolve(into:initialValue:initialVelocity:)(void **a1, void *a2, char a3, double a4)
{
  uint64_t v5 = v4;
  char v9 = a3 & 1;
  void v24[2] = *(void **)&a4;
  uint64_t v10 = *v5;
  swift_getAtKeyPath();
  __dst[0] = a2;
  LOBYTE(__dst[1]) = v9;
  if ((a3 & 1) == 0)
  {
    swift_getAtKeyPath();
    a2 = v24[0];
  }
  unint64_t v11 = v24[1];
  uint64_t v12 = MEMORY[0x263F8EE78];
  v24[0] = (void *)MEMORY[0x263F8EE78];
  memcpy(__dst, v5 + 1, 0x149uLL);
  specialized MergedKeyframeTrackContent._resolve(into:)(v24);
  uint64_t v23 = v12;
  specialized closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)((uint64_t)&v23, (uint64_t)v24[0], (uint64_t)a2, v9, *(double *)&v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = v23;
  specialized AnimationPath.duration.getter(v23);
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v13;
  *(void *)(v16 + 24) = v10;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v13;
  *(void *)(v17 + 24) = v10;
  unint64_t v18 = *a1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v5);
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
  }
  unint64_t v20 = v18[2];
  unint64_t v19 = v18[3];
  if (v20 >= v19 >> 1) {
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v18);
  }
  void v18[2] = v20 + 1;
  double v21 = &v18[5 * v20];
  v21[4] = v15;
  v21[5] = partial apply for specialized closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:);
  v21[6] = v16;
  v21[7] = partial apply for specialized closure #2 in _ResolvedKeyframes.append<A>(keyPath:path:);
  v21[8] = v17;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v18;
  return result;
}

uint64_t specialized closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, double a5)
{
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    unint64_t v7 = 0;
    long long v119 = (void *)result;
    char v8 = *(void **)result;
    double v9 = *(double *)&a3;
    if (a4) {
      double v9 = 0.0;
    }
    double v122 = v9;
    if (a4) {
      double v10 = 0.0;
    }
    else {
      double v10 = *(double *)&a3;
    }
    double v121 = v10;
    int v120 = 2 * (a4 & 1);
    uint64_t v11 = a2 - 96;
    unint64_t v129 = *(void *)(a2 + 16);
    while (1)
    {
      unint64_t v14 = v7++;
      double v15 = *(double *)(v11 + 128);
      double v16 = *(double *)(v11 + 136);
      double v18 = *(double *)(v11 + 144);
      double v17 = *(double *)(v11 + 152);
      uint64_t v20 = *(void *)(v11 + 160);
      double v19 = *(double *)(v11 + 168);
      double v21 = *(double *)(v11 + 176);
      double v130 = v15;
      switch(*(unsigned char *)(v11 + 185))
      {
        case 1:
          uint64_t v24 = v8[2];
          double v25 = a5;
          if (v24)
          {
            CFIndex v26 = &v8[11 * v24];
            uint64_t v27 = (double *)(v26 - 7);
            int v28 = *((unsigned __int8 *)v26 + 25);
            CFIndex v29 = v27 + 1;
            if (v28 == 1) {
              v27 += 6;
            }
            if (v28) {
              double v30 = v27;
            }
            else {
              double v30 = v29;
            }
            double v25 = *v30;
          }
          double v31 = 0.0;
          if (LOBYTE(v18))
          {
            if (v14)
            {
              if (v14 > v5)
              {
                __break(1u);
                JUMPOUT(0x245EE9698);
              }
              *(void *)&double v16 = *(unsigned __int8 *)(v11 + 121);
              int v32 = *(unsigned __int8 *)(v11 + 121);
              switch(*(unsigned char *)(v11 + 121))
              {
                case 1:
                  if (v14 <= 1)
                  {
                    int v32 = 1;
                    double v16 = *(double *)(v11 + 104);
                    double v31 = a5;
                    double v33 = *(double *)(v11 + 128);
                    if ((v20 & 1) == 0) {
                      break;
                    }
                    goto LABEL_25;
                  }
                  if ((*(void *)(v11 + 96) & 1) == 0)
                  {
                    int v32 = 0;
                    double v16 = *(double *)(v11 + 88);
                    double v33 = *(double *)(v11 + 128);
                    if ((v20 & 1) == 0) {
                      break;
                    }
                    goto LABEL_25;
                  }
                  double v31 = *(double *)v11;
                  int v32 = 1;
                  double v16 = *(double *)(v11 + 104);
                  double v33 = *(double *)(v11 + 128);
                  if (v20) {
                    goto LABEL_25;
                  }
                  break;
                case 2:
                  double v75 = 0.0;
                  if (v24)
                  {
                    CGRect v76 = (double *)&v8[11 * v24];
                    double v77 = *(v76 - 7);
                    double v78 = *(v76 - 4);
                    if (*((unsigned char *)v76 + 25))
                    {
                      if (*((unsigned char *)v76 + 25) == 1)
                      {
                        double v79 = *(double *)(v11 + 152);
                        specialized Spring.velocity<A>(target:initialVelocity:time:)(*(v76 - 3) - v78, *(v76 - 2), *v76, v77, *(v76 - 6));
                        double v17 = v79;
                      }
                    }
                    else
                    {
                      double v110 = *(v76 - 3);
                      double v111 = v77 * 0.0 + *(v76 - 6) * 0.0 + *(v76 - 5) * 0.0 + v78;
                      if (*(void *)(v76 - 2))
                      {
                        double v128 = *(double *)(v11 + 168);
                        unint64_t v114 = v7;
                        double v115 = *(double *)(v11 + 152);
                        specialized HermiteCurve.arcLength(at:)(1.0, v77, *(v76 - 6), *(v76 - 5), *(v76 - 4));
                        double v117 = v111 * (1.0 / sqrt(v111 * v111)) * (v116 / v110);
                        Swift::Double v118 = UnitCurve.velocity(at:)(1.0);
                        double v17 = v115;
                        unint64_t v7 = v114;
                        double v19 = v128;
                        double v75 = v117 * v118;
                      }
                      else
                      {
                        double v112 = *(double *)(v11 + 152);
                        Swift::Double v113 = UnitCurve.velocity(at:)(1.0);
                        double v17 = v112;
                        double v75 = 1.0 / v110 * (v111 * v113);
                      }
                      unint64_t v5 = v129;
                    }
                  }
                  int v32 = 0;
                  double v16 = v75;
                  double v33 = v130;
                  if (v20) {
                    goto LABEL_25;
                  }
                  break;
                case 3:
                  double v80 = *(double *)(v11 + 152);
                  double v81 = a5;
                  if (v14 > 1) {
                    double v81 = *(double *)v11;
                  }
                  double v82 = 1.0 / *(double *)(v11 + 72) * (*(double *)(v11 + 64) - v81);
                  int v32 = 0;
                  double v16 = v82 * UnitCurve.velocity(at:)(1.0);
                  double v17 = v80;
                  double v33 = v15;
                  if (v20) {
                    goto LABEL_25;
                  }
                  break;
                default:
                  double v33 = *(double *)(v11 + 128);
                  if ((v20 & 1) == 0) {
                    break;
                  }
                  goto LABEL_25;
              }
LABEL_49:
              double v37 = 0.0;
              LOBYTE(v39) = 0;
LABEL_55:
              unint64_t v38 = v123;
              goto LABEL_56;
            }
            double v16 = v121;
            int v32 = v120;
            double v33 = *(double *)(v11 + 128);
            if ((v20 & 1) == 0) {
              goto LABEL_49;
            }
          }
          else
          {
            int v32 = 0;
            double v33 = *(double *)(v11 + 128);
            if ((v20 & 1) == 0) {
              goto LABEL_49;
            }
          }
LABEL_25:
          if (v7 >= v5)
          {
            double v17 = 0.0;
            double v37 = 0.0;
            LOBYTE(v39) = 2;
            goto LABEL_55;
          }
          double v34 = *(double *)(v11 + 192);
          uint64_t v35 = *(void *)(v11 + 208);
          uint64_t v36 = *(void *)(v11 + 232);
          *(void *)&double v37 = *(unsigned __int8 *)(v11 + 249);
          unint64_t v38 = v123;
          LOBYTE(v39) = *(unsigned char *)(v11 + 249);
          double v17 = v37;
          switch((char)v39)
          {
            case 1:
              LOBYTE(v39) = v35 & 1;
              if (v35) {
                double v17 = *(double *)(v11 + 232);
              }
              else {
                double v17 = *(double *)(v11 + 200);
              }
              *(void *)&double v37 = (v35 << 63 >> 63) & *(void *)&v34;
              break;
            case 2:
              LOBYTE(v39) = v36 & 1;
              if (v36) {
                double v17 = v19;
              }
              else {
                double v17 = *(double *)(v11 + 224);
              }
              *(void *)&double v37 = (v36 << 63 >> 63) & *(void *)&v34;
              break;
            case 3:
              double v83 = (v34 - v33) * (1.0 / *(double *)(v11 + 200));
              Swift::Double v84 = UnitCurve.velocity(at:)(0.0);
              double v37 = 0.0;
              LOBYTE(v39) = 0;
              double v17 = v83 * v84;
              break;
            default:
              break;
          }
LABEL_56:
          if (v32)
          {
            double v67 = 0.0;
            if (v32 == 1)
            {
              double v67 = (v33 - v25) * 0.5 + (v25 - v31) * 0.5;
              if (v19 > 0.0 && v16 > 0.0) {
                double v67 = (v19 + v19) / (v19 + v16) * v67;
              }
            }
            int v39 = v39;
            if (!(_BYTE)v39)
            {
LABEL_70:
              if (v19 <= 0.0) {
                double v68 = v17;
              }
              else {
                double v68 = v19 * v17;
              }
              goto LABEL_73;
            }
          }
          else
          {
            if (v19 <= 0.0) {
              double v67 = v16;
            }
            else {
              double v67 = v19 * v16;
            }
            int v39 = v39;
            if (!(_BYTE)v39) {
              goto LABEL_70;
            }
          }
          double v68 = 0.0;
          if (v39 == 1)
          {
            double v68 = (v33 - v25) * 0.5 + (v37 - v33) * 0.5;
            if (v19 > 0.0 && v17 > 0.0) {
              double v68 = (v19 + v19) / (v19 + v17) * v68;
            }
          }
LABEL_73:
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
            char v8 = (void *)result;
          }
          unint64_t v70 = v8[2];
          unint64_t v69 = v8[3];
          if (v70 >= v69 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v8);
            char v8 = (void *)result;
          }
          _OWORD v8[2] = v70 + 1;
          uint64_t v71 = (double *)&v8[11 * v70];
          v71[4] = v25;
          unint64_t v72 = v38 & 0xFFFFFFFFFFFFFF00;
          v71[5] = v130;
          v71[6] = v67;
          v71[7] = v68;
          v71[8] = v19;
          *((void *)v71 + 9) = v72;
          unint64_t v123 = v72;
          *((_OWORD *)v71 + 5) = 0u;
          *((_OWORD *)v71 + 6) = 0u;
          *((unsigned char *)v71 + 112) = 1;
          *((unsigned char *)v71 + 113) = 0;
LABEL_10:
          v11 += 64;
          if (v5 == v7)
          {
            *long long v119 = v8;
            return result;
          }
          break;
        case 2:
          char v40 = *(unsigned char *)(v11 + 184);
          if (LOBYTE(v19))
          {
            uint64_t v58 = v8[2];
            double v41 = v122;
            if (v58)
            {
              uint64_t v59 = (double *)&v8[11 * v58];
              double v60 = *(v59 - 7);
              double v61 = *(v59 - 6);
              double v62 = *(v59 - 5);
              double v63 = *(v59 - 4);
              double v64 = *(v59 - 3);
              if (*((unsigned char *)v59 + 25))
              {
                double v41 = 0.0;
                if (*((unsigned char *)v59 + 25) == 1)
                {
                  double v65 = *(double *)(v11 + 152);
                  specialized Spring.velocity<A>(target:initialVelocity:time:)(v64 - v63, *(v59 - 2), *v59, v60, *(v59 - 6));
                  double v17 = v65;
                  double v41 = v66;
                }
              }
              else
              {
                double v126 = *(double *)(v11 + 152);
                double v73 = *(v59 - 3);
                double v74 = v60 * 0.0 + v61 * 0.0 + v62 * 0.0 + v63;
                if (*(void *)(v59 - 2))
                {
                  specialized HermiteCurve.arcLength(at:)(1.0, v60, v61, v62, v63);
                  double v41 = v74 * (1.0 / sqrt(v74 * v74)) * (v85 / v73) * UnitCurve.velocity(at:)(1.0);
                }
                else
                {
                  double v41 = 1.0 / v64 * (v74 * UnitCurve.velocity(at:)(1.0));
                }
                double v17 = v126;
              }
            }
          }
          else
          {
            double v41 = *(double *)(v11 + 160);
          }
          uint64_t v86 = v8[2];
          double v87 = a5;
          if (v86)
          {
            CGFloat v88 = &v8[11 * v86];
            uint64_t v89 = (double *)(v88 - 7);
            int v90 = *((unsigned __int8 *)v88 + 25);
            uint64_t v91 = v89 + 1;
            if (v90 == 1) {
              v89 += 6;
            }
            if (v90) {
              uint64_t v92 = v89;
            }
            else {
              uint64_t v92 = v91;
            }
            double v87 = *v92;
          }
          double v93 = v17;
          if (v40)
          {
            double v95 = v15 - v87;
            specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(v15 - v87, v41, 0.0001, v16, v18);
            double v94 = v96;
          }
          else
          {
            double v94 = v21;
            double v95 = v15 - v87;
          }
          unint64_t v5 = v129;
          if (v16 >= 0.0)
          {
            double v103 = v95 * v18;
            if (v16 <= 0.0)
            {
              double v107 = (v95 + (v103 - v41) * v94) * exp(-(v18 * v94));
            }
            else
            {
              double v104 = v103 - v41;
              __double2 v106 = __sincos_stret(v94 * v16);
              double cosval = v106.__cosval;
              double v107 = exp(-(v18 * v94)) * (v95 * cosval + v104 * (v106.__sinval / v16));
            }
            double v102 = v95 - v107;
          }
          else
          {
            double v127 = v41;
            double v97 = a5;
            double v98 = -v16 - v18;
            double v99 = exp(v98 * v94);
            long double v100 = exp((v16 - v18) * v94);
            long double v101 = v98 * v100;
            a5 = v97;
            double v41 = v127;
            double v102 = v95 * (((v18 - v16) * v99 + v101) / (v16 + v16) + 1.0) - v127 * ((v99 - v100) / (v16 + v16));
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
            char v8 = (void *)result;
          }
          unint64_t v109 = v8[2];
          unint64_t v108 = v8[3];
          if (v109 >= v108 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v108 > 1), v109 + 1, 1, v8);
            char v8 = (void *)result;
          }
          _OWORD v8[2] = v109 + 1;
          uint64_t v12 = &v8[11 * v109];
          *((double *)v12 + 4) = v16;
          *((double *)v12 + 5) = v18;
          *((double *)v12 + 6) = v93;
          *((double *)v12 + 7) = v87;
          *((double *)v12 + 8) = v15;
          *((double *)v12 + 9) = v41;
          *((double *)v12 + 1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v87 + v102;
          *((double *)v12 + 11) = v94;
          char v13 = 1;
          goto LABEL_9;
        case 3:
          uint64_t v42 = v8[2];
          double v43 = a5;
          if (v42)
          {
            uint64_t v44 = &v8[11 * v42];
            BOOL v45 = (double *)(v44 - 7);
            int v46 = *((unsigned __int8 *)v44 + 25);
            uint64_t v47 = v45 + 1;
            if (v46 == 1) {
              v45 += 6;
            }
            if (v46) {
              CFRange v48 = v45;
            }
            else {
              CFRange v48 = v47;
            }
            double v43 = *v48;
          }
          uint64_t v125 = *(void *)(v11 + 168);
          unint64_t v49 = v7;
          uint64_t v50 = *(void *)(v11 + 152);
          char v51 = LOBYTE(v21) & 1;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42 + 1, 1, v8);
            char v8 = (void *)result;
          }
          uint64_t v52 = v50;
          unint64_t v54 = v8[2];
          unint64_t v53 = v8[3];
          unint64_t v55 = v124;
          if (v54 >= v53 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v8);
            unint64_t v55 = v124;
            char v8 = (void *)result;
            uint64_t v52 = v50;
          }
          unint64_t v7 = v49;
          _OWORD v8[2] = v54 + 1;
          uint64_t v56 = (double *)&v8[11 * v54];
          v56[4] = v43;
          unint64_t v57 = v55 & 0xFFFFFFFFFFFFFF00;
          v56[5] = v130;
          v56[6] = v130 - v43;
          v56[7] = v130 - v43;
          v56[8] = v16;
          *((void *)v56 + 9) = v57;
          unint64_t v124 = v57;
          v56[10] = v18;
          *((void *)v56 + 11) = v52;
          unint64_t v5 = v129;
          *((void *)v56 + 12) = v20;
          *((void *)v56 + 13) = v125;
          *((unsigned char *)v56 + 112) = v51;
          *((unsigned char *)v56 + 113) = 0;
          goto LABEL_10;
        default:
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
            char v8 = (void *)result;
          }
          unint64_t v23 = v8[2];
          unint64_t v22 = v8[3];
          if (v23 >= v22 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v8);
            char v8 = (void *)result;
          }
          _OWORD v8[2] = v23 + 1;
          uint64_t v12 = &v8[11 * v23];
          *((double *)v12 + 4) = v15;
          *(_OWORD *)(v12 + 5) = 0u;
          *(_OWORD *)(v12 + 7) = 0u;
          *(_OWORD *)(v12 + 9) = 0u;
          *(_OWORD *)(v12 + 11) = 0u;
          *(_OWORD *)((char *)v12 + 97) = 0u;
          char v13 = 2;
LABEL_9:
          *((unsigned char *)v12 + 113) = v13;
          goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (uint64_t *)&v40[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (uint64_t *)&v40[-v6];
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v40[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (uint64_t *)&v40[-v13];
  outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(a1, (uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
  outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v7, (uint64_t)v11, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v15 = *v7;
  Swift::UInt64 v16 = v7[1];
  uint64_t v17 = v7[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v15 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if (v18)
    {
      swift_endAccess();
      outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
      *(void *)&v11[*(int *)(v9 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
      uint64_t v19 = *(int *)(v9 + 36);
      while (1)
      {
        unint64_t v20 = *(uint64_t *)((char *)v14 + v19);
        uint64_t v22 = *v14;
        Swift::UInt64 v21 = v14[1];
        uint64_t v23 = v14[2];
        swift_beginAccess();
        uint64_t v24 = *(void *)(v22 + 48);
        if (!*(void *)(v24 + 16)) {
          break;
        }
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v23);
        if ((v26 & 1) == 0) {
          break;
        }
        uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 16 * v25);
        swift_endAccess();
        uint64_t v28 = *(void *)(v27 + 16);
        if (__OFSUB__(v28, v20))
        {
          __break(1u);
LABEL_16:
          __break(1u);
          break;
        }
        if (v28 == v20) {
          goto LABEL_14;
        }
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v22, v21, v23, v20, v41);
        outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14, (uint64_t)v4, type metadata accessor for Text.Effect.BaseContent);
        uint64_t v29 = *v4;
        Swift::UInt64 v30 = v4[1];
        uint64_t v31 = v4[2];
        uint64_t v32 = *v4 + 48;
        swift_beginAccess();
        if (!*(void *)(*(void *)(v29 + 48) + 16)) {
          goto LABEL_18;
        }
        specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
        if ((v33 & 1) == 0) {
          goto LABEL_18;
        }
        swift_endAccess();
        swift_beginAccess();
        uint64_t v34 = *(void *)v32;
        if (!*(void *)(*(void *)v32 + 16)) {
          goto LABEL_19;
        }
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
        if ((v36 & 1) == 0) {
          goto LABEL_19;
        }
        uint64_t v37 = *(void *)(*(void *)(v34 + 56) + 16 * v35);
        swift_endAccess();
        if (v20 >= *(void *)(v37 + 16)) {
          goto LABEL_16;
        }
        *(uint64_t *)((char *)v14 + v19) = v20 + 1;
        outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v4, type metadata accessor for Text.Effect.BaseContent);
        char v38 = Text.Effect.BaseFragment.onlyEmojis.getter();
        outlined release of Text.Effect.BaseFragment((uint64_t)v41);
        if ((v38 & 1) == 0)
        {
LABEL_14:
          outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
          return v28 == v20;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_endAccess();
      __break(1u);
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized AnimationPath.duration.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = result + 88;
    uint64_t v4 = 1 - v1;
    double v5 = 0.0;
    while (1)
    {
      if (*(unsigned char *)(v3 + 25))
      {
        uint64_t v6 = (double *)v3;
        if (*(unsigned char *)(v3 + 25) != 1)
        {
          double v5 = v5 + 0.0;
          if (!v4) {
            return result;
          }
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v6 = (double *)(result + 32 + 88 * v2 + 32);
      }
      double v5 = v5 + *v6;
      if (!v4) {
        return result;
      }
LABEL_5:
      v3 += 88;
      ++v4;
      ++v2;
      if (v4 == 1)
      {
        __break(1u);
        return result;
      }
    }
  }
  return result;
}

uint64_t specialized closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
  if (*(void *)(a3 + 16))
  {
    unint64_t v7 = v5;
    specialized AnimationPath.animatableData(at:)(a3, a1);
    *unint64_t v7 = v8;
  }
  return v6(&v10, 0);
}

void one-time initialization function for useLarge()
{
  id v0 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  uint64_t v1 = (void *)MEMORY[0x24C522820](0xD000000000000011, 0x800000024621A770);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    uint64_t v3 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x80000002462227B0);
    unsigned __int8 v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);
  }
  else
  {
    unsigned __int8 v4 = 0;
  }
  static BigTextEffect.useLarge = v4;
}

double one-time initialization function for scaleTimeline()
{
  v1[0] = (void *)MEMORY[0x263F8EE78];
  char v29 = 1;
  char v28 = 0;
  char v27 = 0;
  char v30 = 0;
  char v31 = 0;
  char v32 = 0;
  type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(0);
  lazy protocol witness table accessor for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent(&lazy protocol witness table cache variable for type MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>> and conformance MergedKeyframeTrackContent<A, B, C>, type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>);
  v1[1] = (void *)swift_getKeyPath();
  long long v2 = xmmword_2461F5A20;
  long long v3 = 0u;
  long long v4 = 0u;
  char v5 = 1;
  long long v6 = xmmword_2461F5A30;
  long long v7 = xmmword_2461C2050;
  long long v8 = xmmword_2461D7790;
  char v9 = 0;
  long long v10 = xmmword_2461F5A40;
  long long v11 = xmmword_2461D7780;
  long long v12 = xmmword_2461F5A50;
  char v13 = 0;
  long long v14 = xmmword_2461F5A60;
  long long v15 = xmmword_2461F5A70;
  long long v16 = xmmword_2461C0DD0;
  char v17 = 0;
  long long v18 = xmmword_2461F5A80;
  long long v19 = xmmword_2461D77D0;
  uint64_t v20 = 0x3FE8000000000000;
  uint64_t v21 = 0x3FF0000000000000;
  char v22 = 0;
  long long v23 = xmmword_2461F5A90;
  long long v24 = xmmword_2461D7780;
  long long v25 = xmmword_2461C0DD0;
  char v26 = 0;
  specialized KeyframeTrack._resolve(into:initialValue:initialVelocity:)(v1, 0, 1, 1.0);
  swift_release();
  double result = 1.0;
  static BigTextEffect.scaleTimeline = 0x3FF0000000000000;
  qword_268F73610 = (uint64_t)v1[0];
  return result;
}

uint64_t closure #1 in BigTextEffect.configuration(_:)()
{
  return closure #1 in BigTextEffect.configuration(_:)(0.95);
}

uint64_t closure #2 in BigTextEffect.configuration(_:)()
{
  return closure #1 in BigTextEffect.configuration(_:)(2.0);
}

uint64_t closure #3 in BigTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v6 - 8);
  long long v8 = (uint64_t *)((char *)&v62 - v7);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  uint64_t v13 = 0;
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a2, a3, 8, a2, &v71, 0.0);
  long long v14 = *(_OWORD *)(a2 + 32);
  long long v84 = *(_OWORD *)(a2 + 16);
  long long v85 = v14;
  long long v83 = *(_OWORD *)a2;
  uint64_t v86 = *(void *)(a2 + 48);
  if ((*((void *)&v14 + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v15 = 0.2;
  uint64_t v69 = v12;
  *(void *)&long long v70 = v11;
  if (*((void *)&v14 + 1) == 1 && Text.Effect.BaseFragment.coversAllParagraphs.getter())
  {
    Swift::UInt64 v16 = *((void *)&v83 + 1);
    uint64_t v17 = *(void *)(*((void *)&v84 + 1) + 184);
    uint64_t v67 = *(void *)(*((void *)&v84 + 1) + 192);
    uint64_t v68 = v17;
    uint64_t v66 = *(void *)(*((void *)&v84 + 1) + 200);
    uint64_t v64 = *(void *)(*((void *)&v84 + 1) + 208);
    type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
    uint64_t v18 = swift_allocObject();
    int v65 = 1;
    *(unsigned char *)(v18 + 16) = 1;
    unint64_t v19 = v85;
    uint64_t v20 = swift_retain();
    specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v20, v16, v18, v19, v77);
    uint64_t v21 = v78;
    double v82 = v78;
    swift_retain();
    outlined release of Text.Effect.BaseFragment((uint64_t)v77);
    uint64_t v22 = v21[24];
    uint64_t v63 = v21[23];
    uint64_t v24 = v21[25];
    uint64_t v23 = v21[26];
    outlined release of ViewTransform((uint64_t)&v82);
    uint64_t v25 = swift_allocObject();
    *(unsigned char *)(v25 + 16) = 2;
    uint64_t v26 = swift_retain();
    specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v26, v16, v25, v19, v79);
    char v27 = v80;
    double v81 = v80;
    swift_retain();
    outlined release of Text.Effect.BaseFragment((uint64_t)v79);
    uint64_t v13 = v27[23];
    uint64_t v28 = v27[24];
    uint64_t v29 = v27[25];
    uint64_t v30 = v27[26];
    outlined release of ViewTransform((uint64_t)&v81);
    double v15 = 0.5;
  }
  else
  {
    int v65 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = 0;
  }
  Swift::UInt64 v32 = *((void *)&v83 + 1);
  uint64_t v31 = v83;
  uint64_t v33 = v84;
  swift_retain();
  swift_retain();
  Text.Effect.BaseContent.init(keyframes:key:)(v31, v32, v33, v8);
  uint64_t v34 = specialized Sequence.reduce<A>(_:_:)(0, (uint64_t)v8);
  outlined destroy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v8);
  swift_retain();
  swift_retain();
  Text.Effect.BaseContent.init(keyframes:key:)(v31, v32, v33, v8);
  char v35 = specialized Sequence.allSatisfy(_:)((uint64_t)v8);
  outlined destroy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v8);
  if (__OFSUB__(v34, 10)) {
    goto LABEL_21;
  }
  double v36 = exp((double)(v34 - 10) * -0.25);
  if (v36 > 1.0) {
    double v36 = 1.0;
  }
  double v37 = 0.0;
  if ((v35 & 1) == 0) {
    double v37 = v15;
  }
  uint64_t v87 = v9;
  uint64_t v88 = v10;
  double v38 = v37 * v36 + 1.4;
  uint64_t v40 = v69;
  uint64_t v39 = v70;
  uint64_t v89 = v70;
  v90[0] = v69;
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = *(_OWORD *)a1;
  *(void *)(v41 + 32) = v9;
  *(void *)(v41 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10;
  *(void *)(v41 + 48) = v39;
  *(void *)(v41 + 56) = v40;
  *(double *)(v41 + 64) = v38;
  *(unsigned char *)(v41 + 72) = v65;
  uint64_t v42 = v67;
  *(void *)(v41 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v68;
  *(void *)(v41 + 88) = v42;
  uint64_t v43 = v64;
  *(void *)(v41 + 96) = v66;
  *(void *)(v41 + 104) = v43;
  *(void *)(v41 + 112) = v63;
  *(void *)(v41 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v22;
  *(void *)(v41 + 128) = v24;
  *(void *)(v41 + 136) = v23;
  *(void *)(v41 + 144) = v13;
  *(void *)(v41 + 152) = v28;
  *(void *)(v41 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
  *(void *)(v41 + 168) = v30;
  long long v44 = v74;
  *(_OWORD *)(v41 + 208) = v73;
  *(_OWORD *)(v41 + 224) = v44;
  *(_OWORD *)(v41 + 24specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v75;
  *(void *)(v41 + 256) = v76;
  long long v45 = v72;
  *(__n128 *)(v41 + 176) = v71;
  *(_OWORD *)(v41 + 192) = v45;
  uint64_t v46 = swift_allocObject();
  long long v47 = v74;
  *(_OWORD *)(v46 + 48) = v73;
  *(_OWORD *)(v46 + 64) = v47;
  *(_OWORD *)(v46 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v75;
  uint64_t v48 = v76;
  long long v49 = v72;
  *(__n128 *)(v46 + 16) = v71;
  *(_OWORD *)(v46 + 32) = v49;
  *(void *)(v46 + 96) = v48;
  *(void *)(v46 + 104) = partial apply for closure #3 in closure #3 in BigTextEffect.configuration(_:);
  *(void *)(v46 + 112) = v41;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  uint64_t v50 = swift_allocObject();
  long long v70 = xmmword_2461B9DC0;
  *(_OWORD *)(v50 + 16) = xmmword_2461B9DC0;
  *(void *)(v50 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v51 = v50 + 32;
  *(void *)(v50 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v46;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v70;
  *(void *)(inited + 32) = v50;
  int64_t v53 = *(void *)(v50 + 16);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v71);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v71);
  outlined retain of LinearGradient((uint64_t)&v87);
  outlined retain of LinearGradient((uint64_t)&v88);
  outlined retain of LinearGradient((uint64_t)&v89);
  outlined retain of LinearGradient((uint64_t)v90);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53, 1, MEMORY[0x263F8EE78]);
  unint64_t v55 = v54;
  if (!*(void *)(v50 + 16))
  {
    if (!v53) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  uint64_t v56 = v54[2];
  if ((v54[3] >> 1) - v56 < v53)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v57 = (unint64_t)&v54[2 * v56 + 4];
  if (v51 < v57 + 16 * v53 && v57 < v51 + 16 * v53) {
    goto LABEL_25;
  }
  swift_arrayInitWithCopy();
  if (!v53)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)&v71);
    return (uint64_t)v55;
  }
  uint64_t v58 = v55[2];
  BOOL v59 = __OFADD__(v58, v53);
  uint64_t v60 = v58 + v53;
  if (!v59)
  {
    void v55[2] = v60;
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in BigTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  Swift::UInt64 v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 32);
  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 1;
  uint64_t v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v16);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, isUniquelyReferenced_nonNull_native, -1.0);
  *a1 = v18[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v16);
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 0;
  uint64_t v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v17);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v17);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  v18[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, v10, 0.0);
  *a1 = v18[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v17);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v12, v3, v11, v4, v18);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v18);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v18, v13, 1.0);
  *a1 = v15;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v18);
}

unint64_t closure #3 in closure #3 in BigTextEffect.configuration(_:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v23 = a1;
  if (*(void *)(*(void *)(a3 + 16) + 16) <= a1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v30 = *(void *)(a3 + 32);
  if (*(void *)(v30 + 16) > a1)
  {
    uint64_t v22 = a5;
    double v28 = a11;
    double v25 = a8;
    double v26 = a7;
    char v24 = a4;
    double v29 = a6;
    uint64_t v21 = a2;
    uint64_t v31 = v30 + 40 * a1;
    double v32 = *(double *)(v31 + 32);
    double v33 = *(double *)(v31 + 40);
    double v34 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
    double v27 = 0.0;
    if (v34 >= 0.0)
    {
      if (v34 <= v32 || (double v27 = 1.0, v32 + v33 <= v34))
      {
LABEL_11:
        if (one-time initialization token for scaleTimeline == -1) {
          goto LABEL_12;
        }
        goto LABEL_40;
      }
    }
    else
    {
      if (v32 >= 0.0) {
        goto LABEL_11;
      }
      double v27 = 1.0;
      double v34 = 0.0;
      if (v32 + v33 <= 0.0) {
        goto LABEL_11;
      }
    }
    double v27 = (v34 - v32) / v33;
    goto LABEL_11;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  a1 = swift_once();
LABEL_12:
  double v35 = *(double *)&static BigTextEffect.scaleTimeline;
  uint64_t v36 = qword_268F73610;
  v69[0] = static BigTextEffect.scaleTimeline;
  MEMORY[0x270FA5388](a1);
  swift_getKeyPath();
  swift_bridgeObjectRetain_n();
  swift_retain();
  uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18_ResolvedKeyframesVAFE5TrackVySd_GG_Sds5NeverOTg503_s7d5UI18_fg21V8durationSdvgSdAcAE5h9Vyx_Gcfu_N4_TG5s7KeyPathCyAKSdGTf1cn_nTf4ng_n(v36);
  swift_release_n();
  *(double *)&uint64_t v38 = COERCE_DOUBLE(specialized Sequence<>.max()(v37));
  char v40 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double v41 = *(double *)&v38;
  if (v40) {
    double v41 = 0.0;
  }
  uint64_t v42 = *(void *)(v36 + 16);
  if (v42)
  {
    double v43 = v27 * v41;
    swift_bridgeObjectRetain();
    uint64_t v44 = v36 + 64;
    do
    {
      long long v45 = *(void (**)(void *, double))(v44 - 24);
      v44 += 40;
      swift_retain();
      swift_retain();
      v45(v69, v43);
      swift_release();
      swift_release();
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease_n();
    double v35 = *(double *)v69;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  double v46 = v35 + -1.0;
  if (v35 >= 1.0)
  {
    double v47 = (v29 + -1.0) * (v46 / 0.6);
    double v48 = 0.0;
    if ((v24 & 1) == 0) {
      goto LABEL_27;
    }
  }
  else
  {
    double v47 = v46 / 0.05;
    double v48 = 0.0;
    if ((v24 & 1) == 0) {
      goto LABEL_27;
    }
  }
  if (v47 >= 0.0)
  {
    double v53 = a17;
    a14 = a18;
    double v51 = a15;
    double v52 = a16;
    double v50 = v47;
  }
  else
  {
    double v50 = fabs(v47);
    double v51 = v28;
    double v52 = a12;
    double v53 = a13;
  }
  double v48 = Text.Effect.Metrics.offsetForCenterAlignment(other:t:)(v51, v52, v53, a14, v50, v26, v25);
LABEL_27:
  *(double *)uint64_t v69 = v47;
  v69[1] = 0;
  *(double *)&v69[2] = v48;
  memset(&v69[3], 0, 24);
  __asm { FMOV            V0.2D, #1.0 }
  long long v70 = _Q0;
  uint64_t v71 = 0x3FF0000000000000;
  char v72 = 0;
  Text.Effect.TransformContext.record(position:for:)((uint64_t)v69, v23, (uint64_t)v68);
  unint64_t result = Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v68, 0, 0, 0, 1);
  if (__OFSUB__(*(void *)v21, v23))
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (*(void *)v21 != v23) {
    return result;
  }
  uint64_t v60 = v22[8];
  _VF = __OFSUB__(v23, v60);
  unint64_t v61 = v23 - v60;
  if (_VF) {
    goto LABEL_42;
  }
  if ((v61 & 0x8000000000000000) != 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v62 = v22[9];
  if (v61 >= *(void *)(v62 + 16))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v63 = *(void *)(v62 + 56 * v61 + 64);
  unint64_t result = Text.Effect.PathInterpolator.MapKeys.index(for:)(v22[10], v68[0]);
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  unint64_t v65 = *(void *)(v63 + 16);
  if (result >= v65)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (result + 1 >= v65)
  {
LABEL_47:
    __break(1u);
    return result;
  }
  *(double *)(v21 + 136) = *(double *)(v63 + 32 + 8 * result)
                         + v64 * (*(double *)(v63 + 32 + 8 * (result + 1)) - *(double *)(v63 + 32 + 8 * result));
  return result;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance BigTextEffect()
{
  return 6777186;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance BigTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance BigTextEffect;
}

uint64_t protocol witness for static Text.Effect.Base.lineBreakingState.getter in conformance BigTextEffect@<X0>(char *a1@<X8>)
{
  if (one-time initialization token for useLarge != -1) {
    uint64_t result = swift_once();
  }
  if (static BigTextEffect.useLarge) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *a1 = v2;
  return result;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance BigTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)v15 - v9;
  char v35 = 0;
  char v34 = 1;
  char v33 = 0;
  long long v17 = xmmword_2461F5AA0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 2;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 1;
  uint64_t v29 = MEMORY[0x263F8EE78];
  char v30 = 0;
  long long v31 = xmmword_2461BD450;
  char v32 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v11 = static BigTextEffect.spring;
  double v12 = *(double *)&qword_268F73600;
  outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for BigTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect();
  unint64_t result = lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

void specialized HermiteCurve.parametricTime(forArcLength:)(double a1, double a2, double a3, double a4, double a5)
{
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  uint64_t v38 = v10;
  MEMORY[0x270FA5388](v10);
  double v12 = (double *)((char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v35 - v14;
  uint64_t v16 = type metadata accessor for Quadrature.Integrator();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (void *)((char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for Quadrature();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized HermiteCurve.arcLength(at:)(1.0, a2, a3, a4, a5);
  if (v24 > 0.0)
  {
    double v25 = a1 / v24;
    specialized HermiteCurve.arcLength(at:)(a1 / v24, a2, a3, a4, a5);
    double v37 = 0.1;
    if (vabdd_f64(v26, a1) >= 0.1)
    {
      double v27 = v26 - a1;
      unsigned int v36 = *MEMORY[0x263F8C9A8];
      char v28 = (void (**)(char *, uint64_t))(v21 + 8);
      uint64_t v29 = 10;
      void v35[2] = 0x3FA999999999999ALL;
      v35[1] = 0x3F50624DD2F1A9FCLL;
      do
      {
        double v31 = v25 * v25 * 3.0;
        double v32 = (v25 * v25 * 6.0 - v25 * 6.0) * a2 + (v25 * 6.0 - v25 * v25 * 6.0) * a3 + (v31 + v25 * -4.0 + 1.0) * a4;
        double v25 = v25 - v27 / sqrt(((v31 - (v25 + v25)) * a5 + v32) * ((v31 - (v25 + v25)) * a5 + v32));
        if ((~*(void *)&v25 & 0x7FF0000000000000) == 0 && (*(void *)&v25 & 0xFFFFFFFFFFFFFLL) != 0) {
          break;
        }
        if (!--v29) {
          break;
        }
        double v39 = a2;
        double v40 = a3;
        double v41 = a4;
        double v42 = a5;
        if (v25 < 0.0 && v25 > 0.0)
        {
          __break(1u);
          __break(1u);
          return;
        }
        void *v19 = 8;
        (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, v36, v16);
        uint64_t v34 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
        MEMORY[0x270FA5388](v34);
        v35[-2] = &v39;
        Quadrature.integrate(over:integrand:)();
        outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          double v30 = sqrt((v40 - v39) * (v40 - v39));
          outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
          (*v28)(v23, v20);
          outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
        }
        else
        {
          outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
          (*v28)(v23, v20);
          double v30 = *v12;
          if (v25 < 0.0) {
            double v30 = -v30;
          }
        }
        double v27 = v30 - a1;
      }
      while (vabdd_f64(v30, a1) >= v37);
    }
  }
}

void specialized HermiteCurve.arcLength(at:)(double a1, double a2, double a3, double a4, double a5)
{
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  MEMORY[0x270FA5388](v10);
  double v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v26 - v14;
  uint64_t v16 = type metadata accessor for Quadrature.Integrator();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (void *)((char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for Quadrature();
  uint64_t v21 = *(void *)(v20 - 8);
  v22.n128_f64[0] = MEMORY[0x270FA5388](v20);
  double v24 = (char *)v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)double v26 = a2;
  *(double *)&v26[1] = a3;
  *(double *)&v26[2] = a4;
  *(double *)&v26[3] = a5;
  if (a1 < 0.0)
  {
    if (a1 <= 0.0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if (a1 < 0.0)
  {
    __break(1u);
    return;
  }
LABEL_5:
  void *v19 = 8;
  (*(void (**)(void *, void, uint64_t, __n128))(v17 + 104))(v19, *MEMORY[0x263F8C9A8], v16, v22);
  uint64_t v25 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
  MEMORY[0x270FA5388](v25);
  v26[-2] = v26;
  Quadrature.integrate(over:integrand:)();
  outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
  }
  else
  {
    outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
}

double specialized closure #1 in HermiteCurve.arcLength(at:)(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = a1 * a1 * 3.0;
  double v6 = (a1 * a1 * 6.0 - a1 * 6.0) * a2 + (a1 * 6.0 - a1 * a1 * 6.0) * a3 + (v5 + a1 * -4.0 + 1.0) * a4;
  return sqrt(((v5 - (a1 + a1)) * a5 + v6) * ((v5 - (a1 + a1)) * a5 + v6));
}

uint64_t specialized MergedKeyframeTrackContent._resolve(into:)(void **a1)
{
  uint64_t v2 = v1;
  uint64_t v28 = *(void *)(v1 + 176);
  uint64_t v29 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 200);
  uint64_t v26 = *(void *)(v1 + 192);
  uint64_t v27 = *(void *)(v1 + 184);
  uint64_t v5 = *(void *)(v1 + 208);
  char v6 = *(unsigned char *)(v1 + 216);
  uint64_t v37 = *(void *)(v1 + 224);
  uint64_t v35 = *(void *)(v1 + 232);
  uint64_t v32 = *(void *)(v1 + 248);
  uint64_t v33 = *(void *)(v1 + 240);
  uint64_t v30 = *(void *)(v1 + 264);
  uint64_t v31 = *(void *)(v1 + 256);
  char v7 = *(unsigned char *)(v1 + 272);
  specialized MergedKeyframeTrackContent._resolve(into:)(a1);
  uint64_t v8 = v6 & 1;
  uint64_t v9 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    uint64_t v9 = (void *)result;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  unint64_t v13 = v12 + 1;
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    uint64_t v9 = (void *)result;
  }
  uint64_t v14 = (long long *)(v2 + 280);
  void v9[2] = v13;
  uint64_t v15 = &v9[8 * v12];
  v15[4] = v29;
  v15[5] = v28;
  v15[6] = v27;
  v15[7] = v26;
  v15[8] = v4;
  long long v15[9] = v5;
  v15[10] = v8;
  *((_WORD *)v15 + 44) = 768;
  *a1 = v9;
  uint64_t v16 = v7 & 1;
  unint64_t v17 = v9[3];
  unint64_t v18 = v12 + 2;
  if ((uint64_t)(v12 + 2) > (uint64_t)(v17 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v12 + 2, 1, v9);
    uint64_t v9 = (void *)result;
  }
  void v9[2] = v18;
  uint64_t v19 = &v9[8 * v13];
  v19[4] = v37;
  v19[5] = v35;
  v19[6] = v33;
  v19[7] = v32;
  v19[8] = v31;
  v19[9] = v30;
  v19[10] = v16;
  *((_WORD *)v19 + 44) = 768;
  *a1 = v9;
  long long v20 = *v14;
  long long v21 = *(_OWORD *)(v2 + 296);
  long long v22 = *(_OWORD *)(v2 + 312);
  char v23 = *(unsigned char *)(v2 + 328);
  unint64_t v24 = v9[3];
  if ((uint64_t)(v12 + 3) > (uint64_t)(v24 >> 1))
  {
    long long v36 = *(_OWORD *)(v2 + 296);
    long long v38 = *v14;
    long long v34 = *(_OWORD *)(v2 + 312);
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v12 + 3, 1, v9);
    long long v22 = v34;
    long long v21 = v36;
    long long v20 = v38;
    uint64_t v9 = (void *)result;
  }
  void v9[2] = v12 + 3;
  uint64_t v25 = &v9[8 * v18];
  *((_OWORD *)v25 + 2) = v20;
  *((_OWORD *)v25 + 3) = v21;
  *((_OWORD *)v25 + 4) = v22;
  v25[10] = v23 & 1;
  *((_WORD *)v25 + 44) = 768;
  *a1 = v9;
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  long long v18;
  long long v19;
  long long v20;
  char v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  uint64_t v32;
  long long v33;
  uint64_t v34;
  long long v35;

  Swift::UInt64 v3 = v1[2];
  uint64_t v25 = v1[1];
  uint64_t v26 = *v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  unint64_t v24 = v1[5];
  long long v34 = v1[7];
  uint64_t v32 = v1[8];
  uint64_t v29 = v1[10];
  uint64_t v30 = v1[9];
  uint64_t v27 = v1[12];
  uint64_t v28 = v1[11];
  char v6 = *((unsigned char *)v1 + 104);
  char v7 = v1[6] & 1;
  uint64_t v8 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    uint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  uint64_t v10 = v8[3];
  unint64_t v12 = v11 + 1;
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    uint64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v12;
  unint64_t v13 = &v8[8 * v11];
  v13[4] = v26;
  v13[5] = v25;
  void v13[6] = v3;
  v13[7] = v4;
  v13[8] = v5;
  v13[9] = v24;
  v13[10] = v7;
  *((_WORD *)v13 + 44) = 768;
  *a1 = v8;
  uint64_t v14 = v6 & 1;
  uint64_t v15 = v8[3];
  uint64_t v16 = v11 + 2;
  if ((uint64_t)(v11 + 2) > (uint64_t)(v15 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v11 + 2, 1, v8);
    uint64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v16;
  unint64_t v17 = &v8[8 * v12];
  v17[4] = v34;
  void v17[5] = v32;
  v17[6] = v30;
  void v17[7] = v29;
  v17[8] = v28;
  v17[9] = v27;
  v17[10] = v14;
  *((_WORD *)v17 + 44) = 768;
  *a1 = v8;
  unint64_t v18 = *((_OWORD *)v1 + 7);
  uint64_t v19 = *((_OWORD *)v1 + 8);
  long long v20 = *((_OWORD *)v1 + 9);
  long long v21 = *((unsigned char *)v1 + 160);
  long long v22 = v8[3];
  if ((uint64_t)(v11 + 3) > (uint64_t)(v22 >> 1))
  {
    uint64_t v33 = *((_OWORD *)v1 + 8);
    uint64_t v35 = *((_OWORD *)v1 + 7);
    uint64_t v31 = *((_OWORD *)v1 + 9);
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v11 + 3, 1, v8);
    long long v20 = v31;
    uint64_t v19 = v33;
    unint64_t v18 = v35;
    uint64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v11 + 3;
  char v23 = &v8[8 * v16];
  *((_OWORD *)v23 + 2) = v18;
  *((_OWORD *)v23 + 3) = v19;
  *((_OWORD *)v23 + 4) = v20;
  v23[10] = v21 & 1;
  *((_WORD *)v23 + 44) = 768;
  *a1 = v8;
  return result;
}

void specialized AnimationPath.animatableData(at:)(uint64_t a1, double a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  do
  {
    if (v4 <= v2) {
      unint64_t v6 = v2;
    }
    else {
      unint64_t v6 = v4;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (uint64_t i = (double *)(v5 + 88 * v4++); ; i += 11)
    {
      if (v7 + v4 == 1)
      {
        __break(1u);
        return;
      }
      outlined init with take of AnimationPath<Double>.Element((uint64_t)(i - 4), (uint64_t)v13);
      double v9 = *i;
      double v10 = i[3];
      outlined init with take of AnimationPath<Double>.Element((uint64_t)v13, (uint64_t)v14);
      double v11 = v9;
      if (v15)
      {
        double v11 = v10;
        if (v15 != 1)
        {
          if (a2 <= 0.0) {
            goto LABEL_20;
          }
          goto LABEL_8;
        }
      }
      if (a2 <= v11)
      {
LABEL_20:
        specialized AnimationPath.Element.animatableData(at:)(a2);
        return;
      }
      outlined init with take of AnimationPath<Double>.Element((uint64_t)v13, (uint64_t)v16);
      if (v17 != 2) {
        break;
      }
LABEL_8:
      if (++v4 - v2 == 1) {
        return;
      }
    }
    if (v17) {
      double v12 = v10;
    }
    else {
      double v12 = v9;
    }
    a2 = a2 - v12;
  }
  while (v4 != v2);
}

void specialized AnimationPath.velocity(at:)(uint64_t a1, double a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  do
  {
    if (v4 <= v2) {
      unint64_t v6 = v2;
    }
    else {
      unint64_t v6 = v4;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (uint64_t i = (double *)(v5 + 88 * v4++); ; i += 11)
    {
      if (v7 + v4 == 1)
      {
        __break(1u);
        return;
      }
      outlined init with take of AnimationPath<Double>.Element((uint64_t)(i - 4), (uint64_t)v13);
      double v9 = *i;
      double v10 = i[3];
      outlined init with take of AnimationPath<Double>.Element((uint64_t)v13, (uint64_t)v14);
      double v11 = v9;
      if (v15)
      {
        double v11 = v10;
        if (v15 != 1)
        {
          if (a2 <= 0.0) {
            goto LABEL_19;
          }
          goto LABEL_8;
        }
      }
      if (a2 <= v11)
      {
LABEL_19:
        specialized AnimationPath.Element.velocity(at:)(a2);
        return;
      }
      outlined init with take of AnimationPath<Double>.Element((uint64_t)v13, (uint64_t)v16);
      if (v17 != 2) {
        break;
      }
LABEL_8:
      if (++v4 - v2 == 1) {
        return;
      }
    }
    if (v17) {
      double v12 = v10;
    }
    else {
      double v12 = v9;
    }
    a2 = a2 - v12;
  }
  while (v4 != v2);
}

double specialized AnimationPath.Element.animatableData(at:)(double a1)
{
  outlined init with take of AnimationPath<Double>.Element(v1, (uint64_t)v18);
  double v4 = *(double *)v18;
  double v3 = *(double *)&v18[1];
  double v5 = *(double *)&v18[3];
  double v6 = *(double *)&v18[4];
  double v16 = *(double *)&v18[2];
  double v17 = *(double *)&v18[5];
  outlined init with take of AnimationPath<Double>.Element(v1, (uint64_t)v19);
  if (v20)
  {
    if (v20 == 1)
    {
      specialized Spring.value<A>(target:initialVelocity:time:)(v6 - v5, v17, a1, v4, v3);
      return v7 + v5;
    }
    else
    {
      return v4;
    }
  }
  else
  {
    double v8 = v4;
    if (a1 >= 0.0)
    {
      if (v6 >= a1)
      {
        double v10 = UnitCurve.value(at:)(a1 / v6);
        double v11 = v10;
        if (LOBYTE(v17))
        {
          specialized HermiteCurve.arcLength(at:)(1.0, v4, v3, v16, v5);
          specialized HermiteCurve.parametricTime(forArcLength:)(v11 * v13, v4, v3, v16, v5);
          double v15 = v14 * (v14 * v14);
          return (v15 - v14 * v14) * v5
               + (v14 + v15 - (v14 * v14 + v14 * v14)) * v16
               + (v14 * v14 * 3.0 - (v15 + v15)) * v3
               + (v15 + v15 - v14 * v14 * 3.0 + 1.0) * v4;
        }
        else
        {
          double v12 = v10 * (v10 * v10);
          return (v12 - v10 * v10) * v5
               + (v10 + v12 - (v10 * v10 + v10 * v10)) * v16
               + (v10 * v10 * 3.0 - (v12 + v12)) * v3
               + (v12 + v12 - v10 * v10 * 3.0 + 1.0) * v4;
        }
      }
      else
      {
        return v3;
      }
    }
  }
  return v8;
}

void specialized AnimationPath.Element.velocity(at:)(double a1)
{
  outlined init with take of AnimationPath<Double>.Element(v1, (uint64_t)v12);
  double v3 = *(double *)&v12[1];
  double v4 = *(double *)&v12[2];
  double v5 = *(double *)&v12[3];
  double v6 = *(double *)&v12[4];
  double v10 = *(double *)v12;
  double v11 = *(double *)&v12[5];
  outlined init with take of AnimationPath<Double>.Element(v1, (uint64_t)v13);
  if (v14)
  {
    if (v14 == 1) {
      specialized Spring.velocity<A>(target:initialVelocity:time:)(v6 - v5, v11, a1, v10, v3);
    }
  }
  else if (v6 > 0.0 && a1 >= 0.0 && v6 >= a1)
  {
    Swift::Double v7 = a1 / v6;
    double v8 = UnitCurve.value(at:)(a1 / v6);
    UnitCurve.velocity(at:)(v7);
    if (LOBYTE(v11))
    {
      specialized HermiteCurve.arcLength(at:)(1.0, v10, v3, v4, v5);
      specialized HermiteCurve.parametricTime(forArcLength:)(v8 * v9, v10, v3, v4, v5);
    }
  }
}

uint64_t specialized Text.Effect.DrawableContent.endIndex.getter()
{
  uint64_t v2 = *v0;
  Swift::UInt64 v1 = v0[1];
  uint64_t v3 = v0[2];
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 48);
  if (*(void *)(v4 + 16))
  {
    swift_retain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 16 * v5);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v8 = *(void *)(v7 + 16);
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18_ResolvedKeyframesVAFE5TrackVySd_GG_Sds5NeverOTg503_s7d5UI18_fg21V8durationSdvgSdAcAE5h9Vyx_Gcfu_N4_TG5s7KeyPathCyAKSdGTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 64;
    do
    {
      swift_retain();
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      swift_release();
      unint64_t v6 = *(void *)(v9 + 16);
      unint64_t v5 = *(void *)(v9 + 24);
      if (v6 >= v5 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
      }
      *(void *)(v9 + 16) = v6 + 1;
      *(void *)(v9 + 8 * v6 + 32) = v8;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *specialized BigTextEffect.configuration(_:)()
{
  id v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    id v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  uint64_t v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in BigTextEffect.configuration(_:);
  v3[6] = 0;
  *((unsigned char *)v3 + 56) = 1;
  swift_bridgeObjectRetain();
  uint64_t v4 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 2, 1, v0);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v6 + 1;
  uint64_t v7 = &v4[4 * v6];
  v7[4] = 2;
  v7[5] = closure #2 in BigTextEffect.configuration(_:);
  void v7[6] = 0;
  *((unsigned char *)v7 + 56) = 1;
  swift_bridgeObjectRelease();
  uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  _OWORD v8[2] = v10 + 1;
  double v11 = &v8[2 * v10];
  v11[4] = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v11[5] = 0;
  return v4;
}

uint64_t outlined destroy of Text.Effect.DrawableContent<BigTextEffect>(uint64_t a1)
{
  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_245EEC5A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 256) >= 3uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

unint64_t partial apply for closure #3 in closure #3 in BigTextEffect.configuration(_:)(unint64_t a1, uint64_t a2)
{
  return closure #3 in closure #3 in BigTextEffect.configuration(_:)(a1, a2, v2 + 16, *(unsigned char *)(v2 + 72), (void *)(v2 + 176), *(double *)(v2 + 64), *(double *)(v2 + 80), *(double *)(v2 + 88), *(double *)(v2 + 96), *(double *)(v2 + 104), *(double *)(v2 + 112), *(double *)(v2 + 120), *(double *)(v2 + 128), *(double *)(v2 + 136), *(double *)(v2 + 144), *(double *)(v2 + 152), *(double *)(v2 + 160), *(double *)(v2 + 168));
}

uint64_t sub_245EEC67C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect();
    unint64_t v7 = a3(a1, &type metadata for BigTextEffect, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1)
{
}

void type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1)
{
}

void type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for LinearKeyframe<Double>(255, &lazy cache variable for type metadata for LinearKeyframe<Double>, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for LinearKeyframe);
    lazy protocol witness table accessor for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent(a4, a5);
    lazy protocol witness table accessor for type LinearKeyframe<Double> and conformance LinearKeyframe<A>();
    unint64_t v8 = type metadata accessor for MergedKeyframeTrackContent();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1)
{
}

void type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1)
{
}

void type metadata accessor for MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>()
{
  if (!lazy cache variable for type metadata for MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>)
  {
    type metadata accessor for LinearKeyframe<Double>(255, &lazy cache variable for type metadata for LinearKeyframe<Double>, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for LinearKeyframe);
    lazy protocol witness table accessor for type LinearKeyframe<Double> and conformance LinearKeyframe<A>();
    unint64_t v0 = type metadata accessor for MergedKeyframeTrackContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LinearKeyframe<Double> and conformance LinearKeyframe<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LinearKeyframe<Double> and conformance LinearKeyframe<A>;
  if (!lazy protocol witness table cache variable for type LinearKeyframe<Double> and conformance LinearKeyframe<A>)
  {
    type metadata accessor for LinearKeyframe<Double>(255, &lazy cache variable for type metadata for LinearKeyframe<Double>, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for LinearKeyframe);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearKeyframe<Double> and conformance LinearKeyframe<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(uint64_t a1, double a2)
{
  return specialized closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(a2, a1, *(void *)(v2 + 16));
}

uint64_t objectdestroy_7Tm()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in _ResolvedKeyframes.append<A>(keyPath:path:)(double a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = (uint64_t (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
  unint64_t v6 = v5;
  specialized AnimationPath.velocity(at:)(v3, a1);
  *unint64_t v6 = v7;
  return v4(&v9, 0);
}

uint64_t outlined init with take of AnimationPath<Double>.Element(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LinearKeyframe<Double>(0, &lazy cache variable for type metadata for AnimationPath<Double>.Element, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for AnimationPath.Element);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for LinearKeyframe<Double>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, _UNKNOWN **))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D538], &protocol witness table for Double);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>()
{
  if (!lazy cache variable for type metadata for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>)
  {
    type metadata accessor for (integralResult: Double, estimatedAbsoluteError: Double)();
    type metadata accessor for Quadrature.Error();
    lazy protocol witness table accessor for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent(&lazy protocol witness table cache variable for type Quadrature.Error and conformance Quadrature.Error, MEMORY[0x263F8C9B0]);
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
    }
  }
}

void type metadata accessor for (integralResult: Double, estimatedAbsoluteError: Double)()
{
  if (!lazy cache variable for type metadata for (integralResult: Double, estimatedAbsoluteError: Double))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (integralResult: Double, estimatedAbsoluteError: Double));
    }
  }
}

uint64_t lazy protocol witness table accessor for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double partial apply for specialized closure #1 in HermiteCurve.arcLength(at:)(double a1)
{
  return specialized closure #1 in HermiteCurve.arcLength(at:)(a1, **(double **)(v1 + 16), *(double *)(*(void *)(v1 + 16) + 8), *(double *)(*(void *)(v1 + 16) + 16), *(double *)(*(void *)(v1 + 16) + 24));
}

uint64_t outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>();
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>)
  {
    type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>);
  }
  return result;
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for BigTextEffect.LayoutState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245EED0A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BigTextEffect.LayoutState()
{
  return &type metadata for BigTextEffect.LayoutState;
}

BOOL static HoverEffectContext.Source.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (!*((unsigned char *)a1 + 8))
  {
    if (!*((unsigned char *)a2 + 8)) {
      return v2 == v3;
    }
    return 0;
  }
  if (*((unsigned char *)a1 + 8) == 1)
  {
    if (v4 == 1) {
      return v2 == v3;
    }
    return 0;
  }
  return v4 == 2 && v3 == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectContext.Source(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (!*((unsigned char *)a1 + 8))
  {
    if (!*((unsigned char *)a2 + 8)) {
      return v2 == v3;
    }
    return 0;
  }
  if (*((unsigned char *)a1 + 8) == 1)
  {
    if (v4 == 1) {
      return v2 == v3;
    }
    return 0;
  }
  return v4 == 2 && v3 == 0;
}

void HoverEffectContext.source.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t HoverEffectContext.implicitAccessibilityID.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t HoverEffectContext.isModifyingImageView.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t HoverEffectContext.shouldApplySystemEffectAsBackground.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

void HoverEffectContext.state.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 26);
}

uint64_t HoverEffectContext.init(source:implicitAccessibilityID:isModifyingImageView:shouldApplySystemEffectAsBackground:inheritedState:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *(unsigned char *)(result + 8);
  char v7 = *a5;
  *(void *)a6 = *(void *)result;
  *(unsigned char *)(a6 + 8) = v6;
  *(void *)(a6 + 16) = a2;
  *(unsigned char *)(a6 + 24) = a3;
  *(unsigned char *)(a6 + 25) = a4;
  *(unsigned char *)(a6 + 26) = v7;
  return result;
}

uint64_t static HoverEffectContext.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a1 + 8))
  {
    if (*((unsigned char *)a1 + 8) == 1)
    {
      if (v4 != 1 || v2 != v3) {
        return 0;
      }
    }
    else if (v4 != 2 || v3 != 0)
    {
      return 0;
    }
  }
  else
  {
    if (*((unsigned char *)a2 + 8)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v2 == v3;
    }
    if (!v7) {
      return 0;
    }
  }
  return *((unsigned __int8 *)a1 + 26) ^ *((unsigned __int8 *)a2 + 26) ^ 1u;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a1 + 8))
  {
    if (*((unsigned char *)a1 + 8) == 1)
    {
      if (v4 != 1 || v2 != v3) {
        return 0;
      }
    }
    else if (v4 != 2 || v3 != 0)
    {
      return 0;
    }
  }
  else
  {
    if (*((unsigned char *)a2 + 8)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v2 == v3;
    }
    if (!v7) {
      return 0;
    }
  }
  return *((unsigned __int8 *)a1 + 26) ^ *((unsigned __int8 *)a2 + 26) ^ 1u;
}

uint64_t static HoverEffectContext.Value.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v2 & 1) == 0) ^ v4;
  }
  return v3 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectContext.Value(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v2 & 1) == 0) ^ v4;
  }
  return v3 & 1;
}

SwiftUI::HoverEffectContext::Properties __swiftcall HoverEffectContext.Properties.init()()
{
  *uint64_t v0 = 0;
  return result;
}

uint64_t HoverEffectContext.Properties.isDisabled.getter()
{
  return *v0;
}

BOOL static HoverEffectContext.Properties.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void HoverEffectContext.State.leafContext.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

SwiftUI::HoverEffectContext::State __swiftcall HoverEffectContext.State.init()()
{
  *uint64_t v0 = 0;
  return result;
}

Swift::Void __swiftcall HoverEffectContext.State.appendDisabled(_:)(Swift::Bool a1)
{
  if (a1 && (*v1 & 1) == 0) {
    *uint64_t v1 = 1;
  }
}

BOOL HoverEffectContext.isEnabled.getter()
{
  return (*(unsigned char *)(v0 + 26) & 1) == 0;
}

Swift::Void __swiftcall HoverEffectContext.appendDisabled(_:)(Swift::Bool a1)
{
  if (a1 && (*(unsigned char *)(v1 + 26) & 1) == 0) {
    *(unsigned char *)(v1 + 26) = 1;
  }
}

ValueMetadata *type metadata accessor for HoverEffectContext.Source()
{
  return &type metadata for HoverEffectContext.Source;
}

uint64_t getEnumTagSinglePayload for HoverEffectContext.Value(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245EED488);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for HoverEffectContext.Value(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *SwiftUI::HoverEffectContext::State result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x245EED570);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *SwiftUI::HoverEffectContext::State result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContext.Value()
{
  return &type metadata for HoverEffectContext.Value;
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t ResolvedStyledText.TextLayoutManager.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t *a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  return specialized ResolvedStyledText.TextLayoutManager.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(int a1, Swift::Int at, double a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a6)
  {
    v9.SwiftUI::GraphHost::ConstantID value = NSAttributedString.kitFont(at:)(at).value;
    if (v9.value)
    {
      SwiftUI::GraphHost::ConstantID value = v9.value;
      if (a3 == 1.0)
      {
        double v11 = v9.value;
      }
      else
      {
        CGFloat v12 = CTFontGetSize(v9.value) * a3;
        double v13 = CTFontCopyFontDescriptor(value);
        CTFontRef v14 = CTFontCreateWithFontDescriptor(v13, v12, 0);

        double v11 = v14;
      }
      double v15 = v11;
      if (one-time initialization token for kitFont != -1) {
        swift_once();
      }
      objc_msgSend(a7, sel_addAttribute_value_range_, static NSAttributedStringKey.kitFont);
    }
  }
}

BOOL ResolvedStyledText.TextLayoutManager.majorAxis.getter()
{
  swift_beginAccess();
  return (*(unsigned char *)(v0 + 97) & 1) == 0;
}

void ResolvedStyledText.TextLayoutManager.drawingScale(size:)(double a1, double a2)
{
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 208) == 1)
  {
    swift_beginAccess();
    if (*(double *)(v2 + 48) != 1.0)
    {
      if (*(unsigned char *)(v2 + 97)) {
        double v5 = a1;
      }
      else {
        double v5 = a2;
      }
      if (*(unsigned char *)(v2 + 97)) {
        double v6 = a2;
      }
      else {
        double v6 = a1;
      }
      specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(*(unsigned __int8 *)(v2 + 97) ^ 1, (uint64_t)v7, v6, v5);
    }
  }
}

__n128 ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 97)) {
    double v7 = a2;
  }
  else {
    double v7 = a3;
  }
  if (*(unsigned char *)(v3 + 97)) {
    double v8 = a3;
  }
  else {
    double v8 = a2;
  }
  specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(*(unsigned __int8 *)(v3 + 97) ^ 1, (uint64_t)v11, v8, v7);
  long long v9 = v11[3];
  *(_OWORD *)(a1 + 32) = v11[2];
  *(_OWORD *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 64) = v12;
  __n128 result = (__n128)v11[1];
  *(_OWORD *)a1 = v11[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void Text.Layout.offset(by:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v6 = *v3;
  char v7 = *((unsigned char *)v3 + 8);
  uint64_t v8 = v3[2];
  if (a2 == 0.0 && a3 == 0.0)
  {
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    int64_t v9 = *(void *)(v6 + 16);
    uint64_t v10 = MEMORY[0x263F8EE78];
    if (v9)
    {
      char v21 = v7;
      uint64_t v22 = v8;
      uint64_t v23 = a1;
      uint64_t v24 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
      uint64_t v10 = v24;
      double v11 = (_DWORD *)(v6 + 72);
      do
      {
        __int16 v12 = (void *)*((void *)v11 - 5);
        uint64_t v13 = *((void *)v11 - 4);
        char v14 = *((unsigned char *)v11 - 24);
        double v15 = *((double *)v11 - 2);
        double v16 = *((double *)v11 - 1);
        int v17 = *v11;
        outlined copy of Text.Layout.Line.Line(v12, v13, v14);
        unint64_t v19 = *(void *)(v24 + 16);
        unint64_t v18 = *(void *)(v24 + 24);
        if (v19 >= v18 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        }
        *(void *)(v24 + 16) = v19 + 1;
        uint64_t v20 = v24 + 48 * v19;
        *(void *)(v20 + 32) = v12;
        *(void *)(v20 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v13;
        *(unsigned char *)(v20 + 48) = v14;
        *(double *)(v20 + 56) = v15 + a2;
        *(double *)(v20 + 64) = v16 + a3;
        *(_DWORD *)(v20 + 72) = v17;
        v11 += 12;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      uint64_t v8 = v22;
      a1 = v23;
      char v7 = v21;
    }
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v8;
  }
}

void ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v7 = v6;
  int v127 = a2;
  uint64_t v148 = *MEMORY[0x263EF8340];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v131 = (char *)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = *(void **)(v6 + 216);
  swift_beginAccess();
  unsigned int v17 = a1;
  id v18 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v16, a4);
  swift_endAccess();
  if (v17) {
    double v19 = a6;
  }
  else {
    double v19 = a5;
  }
  if (v17) {
    a6 = a5;
  }
  swift_beginAccess();
  double v20 = a6 - (*(double *)(v7 + 176) + *(double *)(v7 + 192));
  double v21 = 0.0;
  if (v20 < 0.0) {
    double v20 = 0.0;
  }
  double v22 = v19 - (*(double *)(v7 + 168) + *(double *)(v7 + 184));
  if (v22 < 0.0) {
    double v22 = 0.0;
  }
  int v129 = v17 & 1;
  if (v17) {
    double v23 = v22;
  }
  else {
    double v23 = v20;
  }
  if (v17) {
    double v24 = v20;
  }
  else {
    double v24 = v22;
  }
  uint64_t v128 = v14;
  swift_beginAccess();
  uint64_t v25 = *(unsigned __int8 *)(v7 + 136);
  if (v25 == 2)
  {
    uint64_t v26 = 4;
    double v27 = 0.0;
    double v28 = 0.0;
    double v29 = 0.0;
    goto LABEL_29;
  }
  if (v25)
  {
    if (*(unsigned char *)(v7 + 43)) {
      goto LABEL_20;
    }
LABEL_22:
    uint64_t v26 = 3;
    goto LABEL_23;
  }
  if (*(unsigned char *)(v7 + 43)) {
    goto LABEL_22;
  }
LABEL_20:
  uint64_t v26 = 1;
LABEL_23:
  double v28 = *(double *)(v7 + 144);
  double v29 = *(double *)(v7 + 152);
  if (v24 == INFINITY) {
    double v21 = 1.79769313e308;
  }
  else {
    double v21 = v24;
  }
  if (v23 == INFINITY) {
    double v27 = 1.79769313e308;
  }
  else {
    double v27 = v23;
  }
LABEL_29:
  double v30 = v24 + *(double *)(v7 + 104);
  uint64_t v31 = *(void **)(v7 + 352);
  uint64_t v121 = *(void *)(v7 + 360);
  uint64_t v120 = *(void *)(v7 + 368);
  double v32 = *(double *)(v7 + 376);
  uint64_t v33 = *(uint64_t (**)())(v7 + 384);
  unint64_t v34 = *(void *)(v7 + 392);
  uint64_t v142 = 0;
  BOOL v143 = v34 >> 62 == 2;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  char v147 = 1;
  CGFloat aBlock = v21;
  uint64_t v135 = *(void *)&v27;
  uint64_t v126 = v26;
  uint64_t v136 = (uint64_t (*)(uint64_t, void *))v26;
  unsigned int v130 = v17;
  double v118 = v28;
  double v137 = v28;
  uint64_t v138 = *(uint64_t (**)())&v29;
  double v119 = v30;
  unsigned int v35 = ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:)((uint64_t)&v142, v30, v23, a4, v17 & 0xFFFFFF01, (uint64_t)&aBlock);
  double v37 = v36;
  double v122 = v38;
  unsigned int v39 = v35;
  double v40 = computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(v18);
  uint64_t v42 = v41;
  uint64_t v123 = v43;
  unint64_t v124 = v40;
  long long v140 = 0uLL;
  uint64_t v141 = 0;
  int v125 = v44;
  if ((v44 & 1) == 0)
  {
    char v79 = 0;
LABEL_60:
    unsigned __int8 v89 = v127;
    goto LABEL_61;
  }
  if ((v34 & 0x8000000000000000) != 0)
  {
    char v79 = 1;
    goto LABEL_60;
  }
  unsigned int v113 = v39;
  uint64_t v114 = v13;
  id v115 = v18;
  char v45 = v120 & 1;
  CGFloat descent = MEMORY[0x263F8EE78];
  LOBYTE(leading) = 0;
  swift_beginAccess();
  outlined copy of Text.Layout.Line.Line(v31, v121, v45);
  id v46 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v16, a4);
  CGFloat v116 = *(double *)&v31;
  double v47 = v46;
  swift_endAccess();
  int v48 = (*(unsigned __int16 *)(v7 + 260) >> 3) & 0x10;
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = 0;
  *(void *)(v49 + 24) = 0;
  *(void *)(v49 + 32) = &descent;
  *(_DWORD *)(v49 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v48;
  *(void *)(v49 + 48) = &leading;
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:);
  *(void *)(v50 + 24) = v49;
  uint64_t v138 = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
  uint64_t v139 = v50;
  CGFloat aBlock = MEMORY[0x263EF8330];
  uint64_t v135 = 1107296256;
  uint64_t v136 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  double v137 = COERCE_DOUBLE(&block_descriptor_35);
  double v51 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v52 = objc_msgSend(v47, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v51);
  swift_unknownObjectRelease();

  _Block_release(v51);
  LOBYTE(v47) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v47) {
    __break(1u);
  }
  uint64_t v110 = v42;
  double v111 = v23;
  CGFloat v53 = descent;
  uint64_t v54 = LOBYTE(leading);
  uint64_t v55 = *(void *)(*(void *)&descent + 16);
  swift_release();
  swift_bridgeObjectRelease();
  *(CGFloat *)&long long v140 = v53;
  *((void *)&v140 + 1) = v54;
  uint64_t v141 = v55;
  int v56 = v34 | 2;
  CGFloat v57 = v116;
  CGFloat aBlock = v116;
  uint64_t v58 = v121;
  uint64_t v135 = v121;
  char v59 = v120;
  LOBYTE(v136) = v120 & 1;
  double v137 = v32;
  uint64_t v138 = v33;
  LODWORD(v139) = v56;
  double v112 = v24;
  Text.Layout.truncateLast(_:width:)();
  uint64_t v117 = v140;
  if (!(void)v140)
  {
    __break(1u);
    goto LABEL_80;
  }
  char v60 = v59;
  double v109 = v29;
  double x = *MEMORY[0x263F001A0];
  double y = *(double *)(MEMORY[0x263F001A0] + 8);
  double width = *(double *)(MEMORY[0x263F001A0] + 16);
  double height = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v65 = *(void *)(v117 + 16);
  if (v65)
  {
    double v108 = a4;
    uint64_t v66 = (double *)(swift_bridgeObjectRetain() + 64);
    do
    {
      long long v73 = (void *)*((void *)v66 - 4);
      uint64_t v74 = *((void *)v66 - 3);
      char v75 = *((unsigned char *)v66 - 16);
      double v76 = *(v66 - 1);
      double v77 = *v66;
      if (v75)
      {
        outlined copy of Text.Layout.Line.Line(v73, v74, 1);
        objc_msgSend(v73, sel_typographicBounds);
        double TypographicBounds = v67;
        double v70 = v69;
        objc_msgSend(v73, sel_glyphOrigin);
        double v72 = v70 - v71;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v73, v74, 0);
        outlined copy of Text.Layout.Line.Line(v73, v74, 0);
        double v78 = v73;
        CGFloat aBlock = 0.0;
        CGFloat descent = 0.0;
        CGFloat leading = 0.0;
        double TypographicBounds = CTLineGetTypographicBounds(v78, &aBlock, &descent, &leading);

        outlined consume of Text.Layout.Line.Line(v73, v74, 0);
        double v71 = aBlock;
        double v72 = descent;
      }
      v155.origin.double x = v76 + 0.0;
      v155.origin.double y = v77 + 0.0 - v71;
      v155.size.double height = v72 + v71;
      v149.origin.double x = x;
      v149.origin.double y = y;
      v149.size.double width = width;
      v149.size.double height = height;
      v155.size.double width = TypographicBounds;
      CGRect v150 = CGRectUnion(v149, v155);
      double x = v150.origin.x;
      double y = v150.origin.y;
      double width = v150.size.width;
      double height = v150.size.height;
      outlined consume of Text.Layout.Line.Line(v73, v74, v75);
      v66 += 6;
      --v65;
    }
    while (v65);
    swift_bridgeObjectRelease();
    a4 = v108;
    CGFloat v57 = v116;
    uint64_t v58 = v121;
    char v60 = v120;
  }
  char v80 = v60 & 1;
  v151.origin.double x = x;
  v151.origin.double y = y;
  v151.size.double width = width;
  v151.size.double height = height;
  BOOL IsNull = CGRectIsNull(v151);
  if (IsNull) {
    double v82 = 0.0;
  }
  else {
    double v82 = y;
  }
  if (IsNull) {
    double v83 = 0.0;
  }
  else {
    double v83 = x;
  }
  if (IsNull) {
    double v84 = 0.0;
  }
  else {
    double v84 = height;
  }
  if (IsNull) {
    double v85 = 0.0;
  }
  else {
    double v85 = width;
  }
  v152.origin.double x = v83;
  v152.origin.double y = v82;
  v152.size.double width = v85;
  v152.size.double height = v84;
  double MinX = CGRectGetMinX(v152);
  if (MinX < 0.0) {
    double v87 = 0.0;
  }
  else {
    double v87 = MinX;
  }
  v153.origin.double x = v83;
  v153.origin.double y = v82;
  v153.size.double width = v85;
  v153.size.double height = v84;
  double MaxX = CGRectGetMaxX(v153);
  double v24 = v112;
  if (MaxX >= v112) {
    double MaxX = v112;
  }
  v154.size.double width = MaxX - v87;
  v154.origin.double x = v87;
  v154.origin.double y = v82;
  v154.size.double height = v84;
  double v37 = CGRectGetWidth(v154);
  outlined consume of Text.Layout.Line.Line(*(void **)&v57, v58, v80);
  char v79 = 1;
  id v18 = v115;
  uint64_t v13 = v114;
  double v23 = v111;
  unsigned __int8 v89 = v127;
  double v29 = v109;
  uint64_t v42 = v110;
  LOBYTE(v39) = v113;
LABEL_61:
  double v90 = v37 - *(double *)(v7 + 104);
  if ((v89 & (v90 < v24)) != 0) {
    double v90 = v24;
  }
  double v91 = v122;
  if (v126 == 4) {
    goto LABEL_71;
  }
  if (v126 != 1)
  {
    if (v126 == 3)
    {
      double v90 = v118 + v90;
      goto LABEL_67;
    }
LABEL_80:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
LABEL_67:
  if (((v130 >> 8) & 1) == 0) {
    double v90 = v119;
  }
  if (v122 <= v29) {
    double v91 = v29;
  }
LABEL_71:
  unsigned int v92 = v130 >> 8;
  if (v39) {
    CGFloat v93 = v91;
  }
  else {
    CGFloat v93 = v90;
  }
  if (v39) {
    CGFloat v94 = v90;
  }
  else {
    CGFloat v94 = v91;
  }
  uint64_t v95 = v128;
  double v96 = v131;
  (*(void (**)(char *, void, uint64_t))(v128 + 104))(v131, *MEMORY[0x263F8E218], v13);
  double v97 = *(double *)(v7 + 112);
  CGFloat aBlock = v94;
  CGFloat descent = v93;
  specialized FloatingPoint.round(_:toMultipleOf:)(v96, v97);
  specialized FloatingPoint.round(_:toMultipleOf:)(v96, v97);
  CGFloat v98 = aBlock;
  CGFloat v99 = descent;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v13);
  uint64_t v100 = v141;
  *(double *)a3 = v24;
  *(double *)(a3 + 8) = v23;
  *(unsigned char *)(a3 + 16) = v129;
  *(unsigned char *)(a3 + 17) = v92;
  *(CGFloat *)(a3 + 24) = v98;
  *(CGFloat *)(a3 + 32) = v99;
  *(double *)(a3 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a4;
  uint64_t v101 = v123;
  *(void *)(a3 + 48) = v42;
  *(void *)(a3 + 56) = v101;
  *(void *)(a3 + 64) = 0;
  *(double *)(a3 + 72) = v24;
  *(void *)(a3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v124;
  *(unsigned char *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 89) = v125 & 1;
  *(unsigned char *)(a3 + 9specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v79;
  *(_OWORD *)(a3 + 96) = v140;
  *(void *)(a3 + 112) = v100;
  double v102 = *(double *)(v7 + 168);
  double v103 = *(double *)(v7 + 176);
  double v104 = *(double *)(v7 + 184);
  double v105 = *(double *)(v7 + 192);
  double v106 = *(double *)(v7 + 112);
  swift_bridgeObjectRetain();
  NSAttributedString.Metrics.update(layoutMargins:pixelLength:)(v102, v103, v104, v105, v106);
  swift_bridgeObjectRelease();
}

char *computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(void *a1)
{
  uint64_t v25 = 0;
  char v26 = 1;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v24 = 1;
  id v21 = 0;
  char v20 = 0;
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = &v20;
  v2[3] = &v25;
  v2[4] = &v23;
  v2[5] = &v22;
  v2[6] = &v21;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:);
  *(void *)(v3 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  aBlock[3] = &block_descriptor_45;
  int v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v5 = objc_msgSend(a1, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  __n128 result = (char *)swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    if (!v21)
    {
      id v12 = 0;
      goto LABEL_9;
    }
    id v7 = v21;
    __n128 result = (char *)objc_msgSend(v7, sel_characterRange);
    if (v20 == 1) {
      goto LABEL_6;
    }
    int64_t v9 = &result[v8];
    if (!__OFADD__(result, v8))
    {
      id v10 = objc_msgSend(v7, sel_attributedString);
      double v11 = (char *)objc_msgSend(v10, sel_length);

      if ((uint64_t)v9 >= (uint64_t)v11)
      {
        id v14 = objc_msgSend(v7, sel_textLineFragmentRange);
        if (v14)
        {
          uint64_t v15 = v14;
          id v16 = objc_msgSend(v14, sel_endLocation);

          id v17 = objc_msgSend(a1, sel_documentRange);
          id v18 = objc_msgSend(v17, sel_endLocation);

          objc_msgSend(v16, sel_compare_, v18);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          goto LABEL_7;
        }
      }
LABEL_6:

LABEL_7:
      id v12 = v21;
LABEL_9:
      uint64_t v13 = v22;
      swift_release();

      return (char *)v13;
    }
  }
  __break(1u);
  return result;
}

BOOL closure #1 in computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void **a6)
{
  unint64_t v11 = (unint64_t)a1;
  uint64_t v12 = (uint64_t)objc_msgSend(a1, sel_state);
  if (v12 == 3)
  {
    if (*(unsigned char *)a2)
    {
      BOOL v13 = 1;
    }
    else
    {
      id v14 = objc_msgSend((id)v11, sel_truncatedRanges);
      if (v14)
      {
        uint64_t v15 = v14;
        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSTextRange);
        unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v16 >> 62) {
          goto LABEL_23;
        }
        uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_7;
      }
      BOOL v13 = 0;
    }
    while (1)
    {
      *(unsigned char *)a2 = v13;
      objc_msgSend((id)v11, sel_layoutFragmentFrame);
      double v19 = v18;
      id v20 = objc_msgSend((id)v11, sel_textLineFragments);
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
      unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        a2 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!a2) {
          goto LABEL_20;
        }
      }
      else
      {
        a2 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!a2) {
          goto LABEL_20;
        }
      }
      if (a2 >= 1) {
        break;
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      BOOL v13 = v17 != 0;
    }
    uint64_t v21 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        id v23 = (id)MEMORY[0x24C523D60](v21, v11);
      }
      else {
        id v23 = *(id *)(v11 + 8 * v21 + 32);
      }
      char v24 = v23;
      objc_msgSend(v23, sel_typographicBounds);
      double v26 = v19 + v25;
      objc_msgSend(v24, sel_glyphOrigin);
      double v28 = v26 + v27;
      if (*(unsigned char *)(a3 + 8) == 1)
      {
        *(double *)a3 = v28;
        *(unsigned char *)(a3 + 8) = 0;
      }
      ++v21;
      *(double *)a4 = v28;
      *(unsigned char *)(a4 + 8) = 0;
      ++*a5;
      uint64_t v22 = *a6;
      *a6 = v24;
    }
    while (a2 != v21);
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v12 = 3;
  }
  return v12 == 3;
}

id ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:)(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = *(double *)a6;
  double v18 = *(double *)(a6 + 8);
  uint64_t v19 = *(void *)(a6 + 16);
  double v20 = *(double *)(a6 + 24);
  double v21 = *(double *)(a6 + 32);
  uint64_t v22 = *(void **)(v7 + 216);
  swift_beginAccess();
  id v70 = v22;
  id v23 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v22, a4);
  swift_endAccess();
  id result = objc_msgSend(v23, sel_textContainer);
  if (!result) {
    goto LABEL_80;
  }
  double v25 = result;
  if (a2 == INFINITY) {
    double v26 = 1.79769313e308;
  }
  else {
    double v26 = a2;
  }
  if (a2 > 0.0) {
    double v27 = v26;
  }
  else {
    double v27 = COERCE_DOUBLE(1);
  }
  if (a3 == INFINITY) {
    double v28 = 1.79769313e308;
  }
  else {
    double v28 = a3;
  }
  if (a3 > 0.0) {
    double v29 = v28;
  }
  else {
    double v29 = COERCE_DOUBLE(1);
  }
  swift_beginAccess();
  BOOL v30 = *(unsigned char *)(v7 + 24) == 1;
  uint64_t v71 = v13;
  if (v30)
  {
    if (a3 != 0.0)
    {
      uint64_t v31 = 0;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (a3 == 0.0)
  {
LABEL_19:
    double v29 = 1.79769313e308;
    uint64_t v31 = 1;
    goto LABEL_21;
  }
  uint64_t v31 = *(void *)(v7 + 16);
LABEL_21:
  objc_msgSend(v25, sel_size);
  BOOL v34 = v33 != v29 || v32 != v27;
  if (v34) {
    objc_msgSend(v25, sel_setSize_, v27, v29);
  }
  if (objc_msgSend(v25, sel_maximumNumberOfLines) != (id)v31)
  {
    objc_msgSend(v25, sel_setMaximumNumberOfLines_, v31);
    BOOL v34 = 1;
  }
  if (*(double *)(v7 + 536) == v17 && *(double *)(v7 + 544) == v18)
  {
    uint64_t v35 = *(unsigned __int8 *)(v7 + 552);
    if (v35 == 4)
    {
      if (v19 == 4) {
        goto LABEL_49;
      }
    }
    else if (v19 != 4 {
           && v35 == v19
    }
           && *(double *)(v7 + 560) == v20
           && *(double *)(v7 + 568) == v21)
    {
      goto LABEL_49;
    }
  }
  *(double *)(v7 + 536) = v17;
  *(double *)(v7 + 544) = v18;
  *(void *)(v7 + 552) = v19;
  *(double *)(v7 + 56specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v20;
  *(double *)(v7 + 568) = v21;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v36 = static CoreGlue2.shared;
  if (v19 == 4)
  {
    id v37 = static CoreGlue2.shared;
    id v38 = v25;
    uint64_t v39 = MEMORY[0x263F8EE78];
  }
  else
  {
    double v40 = v17 - v20;
    double v41 = 0.0;
    if (v19 == 3) {
      double v42 = v40;
    }
    else {
      double v42 = 0.0;
    }
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Path>, (uint64_t)&type metadata for Path, MEMORY[0x263F8E0F8]);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_2461B9DC0;
    uint64_t v43 = v36;
    id v44 = v25;
    v74.origin.CGFloat y = 0.0;
    v74.origin.CGFloat x = v42;
    v74.size.CGFloat width = v20;
    v74.size.double height = v21;
    if (CGRectIsNull(v74))
    {
      char v45 = 6;
      double v20 = 0.0;
      double v21 = 0.0;
    }
    else
    {
      char v45 = 0;
      double v41 = v42;
    }
    *(double *)(v39 + 32) = v41;
    *(void *)(v39 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(double *)(v39 + 48) = v20;
    *(double *)(v39 + 56) = v21;
    *(unsigned char *)(v39 + 64) = v45;
  }
  (*(void (**)(void *, uint64_t))((*MEMORY[0x263F8EED0] & *v36) + 0xA0))(v25, v39);

  swift_bridgeObjectRelease();
  BOOL v34 = 1;
LABEL_49:
  if (*(unsigned char *)(a1 + 8) == 1) {
    id v46 = (id)(*(unsigned __int8 *)(v7 + 41) + 3);
  }
  else {
    id v46 = *(id *)a1;
  }
  if (objc_msgSend(v25, sel_lineBreakMode) != v46)
  {
    objc_msgSend(v25, sel_setLineBreakMode_, v46);
    BOOL v34 = 1;
  }
  id v47 = objc_msgSend(v23, sel_documentRange);
  if (v34) {
    objc_msgSend(v23, sel_invalidateLayoutForRange_, v47);
  }
  objc_msgSend(v23, sel_ensureLayoutForRange_, v47);
  objc_msgSend(v23, sel_usageBoundsForTextContainer);
  CGFloat x = v75.origin.x;
  CGFloat y = v75.origin.y;
  CGFloat width = v75.size.width;
  double height = v75.size.height;
  if (CGRectGetHeight(v75) != v29)
  {
    char v59 = 0;
    if (v27 >= 0.0) {
      goto LABEL_61;
    }
    goto LABEL_77;
  }
  v76.origin.CGFloat x = x;
  v76.origin.CGFloat y = y;
  v76.size.CGFloat width = width;
  v76.size.double height = height;
  CGFloat MaxY = CGRectGetMaxY(v76);
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = &MaxY;
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:);
  *(void *)(v53 + 24) = v52;
  *(void *)&aBlock[4] = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
  *(void *)&aBlock[5] = v53;
  *(void *)&aBlock[0] = MEMORY[0x263EF8330];
  *(void *)&aBlock[1] = 1107296256;
  *(void *)&aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  *(void *)&aBlock[3] = &block_descriptor_24;
  uint64_t v54 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v55 = objc_msgSend(v23, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v54);
  swift_unknownObjectRelease();
  _Block_release(v54);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  id result = (id)swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_80:
    __break(1u);
    return result;
  }
  double v57 = MaxY;
  v77.origin.CGFloat x = x;
  v77.origin.CGFloat y = y;
  v77.size.CGFloat width = width;
  v77.size.double height = height;
  if (CGRectGetMaxY(v77) < v57)
  {
    double v58 = MaxY;
    v78.origin.CGFloat x = x;
    v78.origin.CGFloat y = y;
    v78.size.CGFloat width = width;
    v78.size.double height = height;
    double height = v58 - CGRectGetMinY(v78);
  }
  char v59 = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:);
  if (v27 >= 0.0)
  {
LABEL_61:
    v79.origin.CGFloat x = x;
    v79.origin.CGFloat y = y;
    v79.size.CGFloat width = width;
    v79.size.double height = height;
    double MinX = CGRectGetMinX(v79);
    if (MinX < 0.0) {
      double v61 = 0.0;
    }
    else {
      double v61 = MinX;
    }
    v80.origin.CGFloat x = x;
    v80.origin.CGFloat y = y;
    v80.size.CGFloat width = width;
    v80.size.double height = height;
    double MaxX = CGRectGetMaxX(v80);
    if (MaxX >= v27) {
      double MaxX = v27;
    }
    double v27 = MaxX - v61;
    CGFloat MaxY = height;
    if (one-time initialization token for lineFragmentPadding == -1) {
      goto LABEL_67;
    }
    goto LABEL_78;
  }
LABEL_77:
  __break(1u);
LABEL_78:
  swift_once();
LABEL_67:
  aBlock[0] = v27
            + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding
            + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding;
  if ((*(unsigned char *)(v7 + 40) & 1) == 0)
  {
    uint64_t v63 = *(void *)(v7 + 32);
    if (v63 >= 1)
    {
      if (v70)
      {
        if ((uint64_t)objc_msgSend(v70, sel_length) >= 1)
        {
          double v64 = COERCE_DOUBLE(NSAttributedString.limitedFontHeight(by:)(v63));
          if ((v65 & 1) == 0)
          {
            double v66 = v64;
            if (height > v64) {
              double v66 = height;
            }
            CGFloat MaxY = v66;
          }
        }
      }
    }
  }
  uint64_t v67 = v71;
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F8E218], v71);
  double v68 = *(double *)(v7 + 112);
  specialized FloatingPoint.round(_:toMultipleOf:)(v16, v68);
  specialized FloatingPoint.round(_:toMultipleOf:)(v16, v68);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v67);
  char v69 = *(unsigned char *)(v7 + 97);

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v59);
  return (id)((v69 & 1) == 0);
}

void Text.Layout.truncateLast(_:width:)()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)v0 + 48 * v1;
    int v4 = *(void **)(v2 - 16);
    uint64_t v3 = *(void *)(v2 - 8);
    char v5 = *(unsigned char *)v2;
    uint64_t v6 = *(void *)(v2 + 8);
    uint64_t v7 = *(void *)(v2 + 16);
    int v8 = *(_DWORD *)(v2 + 24);
    unint64_t v11 = v4;
    uint64_t v12 = v3;
    LOBYTE(v13) = v5;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    int v16 = v8;
    outlined copy of Text.Layout.Line.Line(v4, v3, v5);
    Class v9 = Text.Layout.Line.lastRunAttributes.getter();
    if (v9)
    {
      Class v10 = v9;
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
      outlined consume of Text.Layout.Line.Line(v4, v3, v5);
    }
    else
    {
      outlined consume of Text.Layout.Line.Line(v4, v3, v5);
    }
  }
}

SwiftUI::Spacing __swiftcall ResolvedStyledText.TextLayoutManager.spacing()()
{
  uint64_t v2 = v0;
  if (*(void *)(v1 + 216))
  {
    uint64_t v3 = v1;
    uint64_t v4 = swift_beginAccess();
    unsigned int v5 = *(unsigned __int16 *)(v1 + 488);
    if ((v5 & 0xFF00) == 0x200)
    {
      uint64_t v6 = (void *)MEMORY[0x24C526EA0](v4);
      swift_beginAccess();
      ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)((*(unsigned char *)(v1 + 97) & 1) == 0, 0, (uint64_t)&v31, 1.0, INFINITY, INFINITY);
      double v7 = *((double *)&v32 + 1);
      double v8 = *((double *)&v33 + 1);
      double v9 = *(double *)&v33;
      double v10 = *((double *)&v34 + 1);
      double v11 = *(double *)&v34;
      double v12 = *((double *)&v35 + 1);
      double v13 = *(double *)&v35;
      double v14 = *(double *)&v36;
      __int16 v15 = BYTE8(v36);
      int v16 = BYTE9(v36);
      swift_bridgeObjectRelease();
      if (v16) {
        __int16 v17 = 256;
      }
      else {
        __int16 v17 = 0;
      }
      *(double *)(v3 + 424) = v7;
      *(double *)(v3 + 432) = v9;
      *(double *)(v3 + 44specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v8;
      *(double *)(v3 + 448) = v11;
      *(double *)(v3 + 456) = v10;
      *(double *)(v3 + 464) = v13;
      *(double *)(v3 + 472) = v12;
      *(double *)(v3 + 48specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v14;
      *(_WORD *)(v3 + 488) = v17 | v15;
    }
    else
    {
      double v14 = *(double *)(v1 + 480);
      double v13 = *(double *)(v3 + 464);
      double v12 = *(double *)(v3 + 472);
      double v11 = *(double *)(v3 + 448);
      double v10 = *(double *)(v3 + 456);
      double v9 = *(double *)(v3 + 432);
      double v8 = *(double *)(v3 + 440);
      LOBYTE(v15) = v5 & 1;
      int v16 = (v5 >> 8) & 1;
      double v7 = *(double *)(v3 + 424);
    }
    v42[0] = v7;
    v42[1] = v9;
    v42[2] = v8;
    v42[3] = v11;
    v42[4] = v10;
    v42[5] = v13;
    v42[6] = v12;
    v42[7] = v14;
    char v43 = v15;
    char v44 = v16;
    swift_endAccess();
    if (*(unsigned char *)(v3 + 344))
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)&v31);
      double v19 = *((double *)&v31 + 1);
      double v20 = *(double *)&v31;
      double v21 = *((double *)&v32 + 1);
      *(void *)&double v22 = v32;
      double v23 = *((double *)&v33 + 1);
      *(void *)&double v24 = v33;
      double v25 = *((double *)&v34 + 1);
      *(void *)&double v26 = v34;
      *(void *)(v3 + 28specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v31;
      *(double *)(v3 + 288) = v19;
      *(_OWORD *)(v3 + 296) = __PAIR128__(*(unint64_t *)&v21, *(unint64_t *)&v22);
      *(_OWORD *)(v3 + 312) = __PAIR128__(*(unint64_t *)&v23, *(unint64_t *)&v24);
      *(_OWORD *)(v3 + 328) = __PAIR128__(*(unint64_t *)&v25, *(unint64_t *)&v26);
      *(unsigned char *)(v3 + 344) = 0;
    }
    else
    {
      double v26 = *(double *)(v3 + 328);
      double v25 = *(double *)(v3 + 336);
      double v24 = *(double *)(v3 + 312);
      double v23 = *(double *)(v3 + 320);
      double v22 = *(double *)(v3 + 296);
      double v21 = *(double *)(v3 + 304);
      double v20 = *(double *)(v3 + 280);
      double v19 = *(double *)(v3 + 288);
    }
    v41[0] = v20;
    v41[1] = v19;
    _OWORD v41[2] = v22;
    v41[3] = v21;
    v41[4] = v24;
    v41[5] = v23;
    v41[6] = v26;
    void v41[7] = v25;
    swift_beginAccess();
    long long v27 = *(_OWORD *)(v3 + 128);
    long long v37 = *(_OWORD *)(v3 + 112);
    long long v38 = v27;
    long long v39 = *(_OWORD *)(v3 + 144);
    char v40 = *(unsigned char *)(v3 + 160);
    long long v28 = *(_OWORD *)(v3 + 64);
    long long v33 = *(_OWORD *)(v3 + 48);
    long long v34 = v28;
    long long v29 = *(_OWORD *)(v3 + 96);
    long long v35 = *(_OWORD *)(v3 + 80);
    long long v36 = v29;
    long long v30 = *(_OWORD *)(v3 + 32);
    long long v31 = *(_OWORD *)(v3 + 16);
    long long v32 = v30;
    return (SwiftUI::Spacing)static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)(v41, v42, (uint64_t)&v31, v2);
  }
  else
  {
    return Spacing.init()();
  }
}

CGSize __swiftcall ResolvedStyledText.TextLayoutManager.size(in:)(CGSize in)
{
  double height = in.height;
  double width = in.width;
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 97)) {
    double v4 = width;
  }
  else {
    double v4 = height;
  }
  if (*(unsigned char *)(v1 + 97)) {
    double v5 = height;
  }
  else {
    double v5 = width;
  }
  specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(*(unsigned __int8 *)(v1 + 97) ^ 1, (uint64_t)v9, v5, v4);
  double v6 = *(double *)v9;
  double v7 = *(double *)&v9[1];
  result.double height = v7;
  result.double width = v6;
  return result;
}

CGSize __swiftcall ResolvedStyledText.TextLayoutManager.frameSize(in:)(CGSize in)
{
  double height = in.height;
  double width = in.width;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 416);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    double v6 = (double *)(v4 + 56);
    while (1)
    {
      double v7 = *(v6 - 1);
      double v8 = *v6;
      if (v7 == width && v8 == height) {
        break;
      }
      v6 += 11;
      if (!--v5) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 97)) {
      double v10 = width;
    }
    else {
      double v10 = height;
    }
    if (*(unsigned char *)(v1 + 97)) {
      double v11 = height;
    }
    else {
      double v11 = width;
    }
    specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(*(unsigned __int8 *)(v1 + 97) ^ 1, (uint64_t)v13, v11, v10);
    double v7 = *(double *)v13;
    double v8 = *(double *)&v13[1];
  }
  result.double height = v8;
  result.double width = v7;
  return result;
}

void closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:)(void *a1, double *a2)
{
  id v3 = objc_msgSend(a1, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_13;
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x24C523D60](v6, v4);
      }
      else {
        id v7 = *(id *)(v4 + 8 * v6 + 32);
      }
      double v8 = v7;
      ++v6;
      double v9 = *a2;
      objc_msgSend(v7, sel_typographicBounds);
      double MaxY = CGRectGetMaxY(v12);

      if (v9 > MaxY) {
        double v11 = v9;
      }
      else {
        double v11 = MaxY;
      }
      *a2 = v11;
    }
    while (v5 != v6);
    goto LABEL_13;
  }
  __break(1u);
}

void ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  double v20 = (void *)MEMORY[0x24C526EA0]();
  swift_beginAccess();
  uint64_t v21 = *(unsigned __int8 *)(v11 + 136);
  if (v21 == 2)
  {
    double v22 = 0;
    double v23 = 0;
    double v24 = 0.0;
    uint64_t v25 = 4;
    double v26 = 0.0;
    goto LABEL_14;
  }
  double v22 = *(void **)(v11 + 144);
  double v23 = *(uint64_t (**)())(v11 + 152);
  if (v21)
  {
    if (*(unsigned char *)(v11 + 43)) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v25 = 3;
    goto LABEL_8;
  }
  if (*(unsigned char *)(v11 + 43)) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v25 = 1;
LABEL_8:
  if (a6 == INFINITY) {
    double v24 = 1.79769313e308;
  }
  else {
    double v24 = a6;
  }
  if (a7 == INFINITY) {
    double v26 = 1.79769313e308;
  }
  else {
    double v26 = a7;
  }
LABEL_14:
  ResolvedStyledText.TextLayoutManager.prepareLayoutManager(in:with:applyingMarginOffsets:)(a1 & 1, (uint64_t)&aBlock, a6, a7);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&aBlock, (uint64_t)v124);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)v124, (uint64_t)v125);
  if (_sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOg((uint64_t)v125) == 1)
  {
LABEL_66:
    return;
  }
  double v99 = v24;
  uint64_t v100 = (void *)v25;
  uint64_t v101 = v22;
  uint64_t v108 = a10;
  double v27 = *(double *)v125;
  double v28 = *(double *)&v125[1];
  double v97 = *(double *)&v125[3];
  double v98 = *(double *)&v125[2];
  int v95 = v127;
  int v96 = v126;
  double v29 = v128;
  uint64_t v30 = v129;
  char v103 = v130;
  uint64_t v31 = v131;
  long long v32 = self;
  id v33 = objc_msgSend(v32, sel_current);
  uint64_t v109 = v31;
  double v102 = v23;
  if (v33
    && (long long v34 = v33, v35 = objc_msgSend(v33, sel_CGContext), v34, v35)
    && (uint64_t v36 = MEMORY[0x24C5269B0](v35, 0, 0), v35, v36))
  {
    id v37 = (id)RBDrawingStateGetDisplayList();
    long long v38 = v37;
    if (v37)
    {
      id v39 = objc_msgSend(v37, sel_CGStyleHandler);
      if (v39)
      {
        id v40 = v39;
        uint64_t v41 = swift_allocObject();
        *(void *)(v41 + 16) = v40;
        uint64_t v105 = v41;
        double v106 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned RBDrawingState, @unowned Int) -> ();
      }
      else
      {
        uint64_t v105 = 0;
        double v106 = 0;
      }
      uint64_t v53 = *(void *)(v11 + 272);
      if (*(void *)(v53 + 16))
      {
        char v54 = *(unsigned char *)(v11 + 43);
        char v55 = *(unsigned char *)(v11 + 44);
        uint64_t v56 = swift_allocObject();
        *(void *)(v56 + 16) = v53;
        *(unsigned char *)(v56 + 24) = v55;
        *(unsigned char *)(v56 + 25) = v54;
        *(void *)&long long v121 = partial apply for closure #1 in ResolvedStyledText.cgStyleHandler.getter;
        *((void *)&v121 + 1) = v56;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v119 = 1107296256;
        *(void *)&long long v120 = thunk for @escaping @callee_guaranteed (@unowned RBDrawingState, @unowned Int) -> ();
        *((void *)&v120 + 1) = &block_descriptor_75;
        double v57 = _Block_copy(&aBlock);
        id v58 = v38;
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        id v59 = v38;
        double v57 = 0;
      }
      objc_msgSend(v38, sel_setCGStyleHandler_, v57);
      _Block_release(v57);
    }
    else
    {
      uint64_t v105 = 0;
      double v106 = 0;
    }
  }
  else
  {
    uint64_t v105 = 0;
    double v106 = 0;
    long long v38 = 0;
  }
  id v42 = objc_msgSend(v32, sel_current);
  if (v42)
  {
    char v43 = v42;
    char v44 = (CGContext *)objc_msgSend(v42, sel_CGContext);

    if (v44)
    {
      CGContextSaveGState(v44);
      uint64_t v45 = v108;
      if (*(unsigned char *)(v11 + 97) == 1)
      {
        v132.origin.CGFloat x = a2;
        v132.origin.CGFloat y = a3;
        v132.size.double width = a4;
        v132.size.double height = a5;
        CGFloat Width = CGRectGetWidth(v132);
        CGContextTranslateCTM(v44, Width, 0.0);
        CGContextRotateCTM(v44, 1.57079633);
      }
      CGContextRef c = v44;
      if (v108 || *(void *)(*(void *)(v11 + 408) + 16)) {
        goto LABEL_39;
      }
      CGFloat v94 = v38;
      id v47 = *(void **)(v11 + 352);
      uint64_t v48 = *(void *)(v11 + 360);
      uint64_t v49 = *(void *)(v11 + 368);
      uint64_t v50 = *(void *)(v11 + 376);
      uint64_t v51 = *(void *)(v11 + 384);
      uint64_t v52 = *(void *)(v11 + 392);
      if ((v52 & 0x8000000000000000) == 0)
      {
        outlined copy of ResolvedTextSuffix(v47, v48, v49, v50, v51, v52);
        outlined consume of ResolvedTextSuffix(v47, v48, v49, v50, v51, v52);
        outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
        long long v38 = v94;
        char v44 = c;
        uint64_t v45 = v108;
        goto LABEL_39;
      }
      outlined consume of ResolvedTextSuffix(v47, v48, v49, v50, v51, v52);
      outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
      long long v38 = v94;
      char v44 = c;
      uint64_t v45 = v108;
      if ((*(_WORD *)(v11 + 260) & 0x80) != 0)
      {
LABEL_39:
        if (one-time initialization token for lineFragmentPadding != -1) {
          swift_once();
        }
        double v70 = v27 + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding;
        if (v30)
        {
          char v71 = v103 & 1;
          if (v70 != 0.0 || v28 != 0.0)
          {
            int64_t v72 = *(void *)(v30 + 16);
            if (!v72)
            {
              outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v124);
              uint64_t v30 = MEMORY[0x263F8EE78];
              if (v45) {
                goto LABEL_54;
              }
              goto LABEL_56;
            }
            double v104 = v20;
            CGFloat v94 = v38;
            outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)v124, (uint64_t)&aBlock);
            outlined retain of TextLayoutProperties((uint64_t)&aBlock);
            uint64_t v112 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72, 0);
            long long v73 = (_DWORD *)(v30 + 72);
            uint64_t v30 = v112;
            do
            {
              CGRect v74 = (void *)*((void *)v73 - 5);
              uint64_t v75 = *((void *)v73 - 4);
              char v76 = *((unsigned char *)v73 - 24);
              double v77 = *((double *)v73 - 2);
              double v78 = *((double *)v73 - 1);
              int v79 = *v73;
              outlined copy of Text.Layout.Line.Line(v74, v75, v76);
              uint64_t v112 = v30;
              unint64_t v81 = *(void *)(v30 + 16);
              unint64_t v80 = *(void *)(v30 + 24);
              if (v81 >= v80 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
                uint64_t v30 = v112;
              }
              *(void *)(v30 + 16) = v81 + 1;
              uint64_t v82 = v30 + 48 * v81;
              *(void *)(v82 + 32) = v74;
              *(void *)(v82 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v75;
              *(unsigned char *)(v82 + 48) = v76;
              *(double *)(v82 + 56) = v70 + v77;
              *(double *)(v82 + 64) = v28 + v78;
              *(_DWORD *)(v82 + 72) = v79;
              v73 += 12;
              --v72;
            }
            while (v72);
            outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v124);
            outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v124);
            double v20 = v104;
            long long v38 = v94;
            char v44 = c;
            uint64_t v45 = v108;
          }
          if (v45) {
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t aBlock = 0;
          LOBYTE(v119) = 1;
          long long v120 = 0u;
          long long v121 = 0u;
          long long v122 = 0u;
          char v123 = 1;
          uint64_t v112 = *(void *)&v99;
          uint64_t v113 = *(void *)&v26;
          uint64_t v114 = v100;
          id v115 = v101;
          CGFloat v116 = v102;
          ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:)((uint64_t)&aBlock, v98, v97, v29, v96 | (v95 << 8), (uint64_t)&v112);
          uint64_t v111 = MEMORY[0x263F8EE78];
          LOBYTE(v110[0]) = 0;
          double v83 = *(void **)(v11 + 216);
          swift_beginAccess();
          id v84 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v83, v29);
          swift_endAccess();
          LODWORD(v83) = (*(unsigned __int16 *)(v11 + 260) >> 3) & 0x10;
          uint64_t v85 = swift_allocObject();
          *(double *)(v85 + 16) = v70;
          *(double *)(v85 + 24) = v28;
          *(void *)(v85 + 32) = &v111;
          *(_DWORD *)(v85 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v83;
          *(void *)(v85 + 48) = v110;
          uint64_t v86 = swift_allocObject();
          char v71 = v86;
          *(void *)(v86 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:);
          *(void *)(v86 + 24) = v85;
          CGFloat v116 = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
          uint64_t v117 = v86;
          uint64_t v112 = MEMORY[0x263EF8330];
          uint64_t v113 = 1107296256;
          uint64_t v114 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
          id v115 = &block_descriptor_56;
          double v87 = _Block_copy(&v112);
          swift_retain();
          swift_release();
          id v88 = objc_msgSend(v84, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v87);
          swift_unknownObjectRelease();

          _Block_release(v87);
          LOBYTE(v87) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if (v87)
          {
            __break(1u);
            goto LABEL_68;
          }
          uint64_t v30 = v111;
          char v71 = v110[0];
          uint64_t v109 = *(void *)(v111 + 16);
          swift_release();
          outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v124);
          char v44 = c;
          if (v45)
          {
LABEL_54:
            uint64_t v89 = *(void *)(v45 + 16);
            uint64_t v90 = *(void *)(v45 + 24);
            uint64_t v112 = v89;
            uint64_t v113 = v90;
            swift_retain();
            swift_retain();
LABEL_58:
            v110[0] = v89;
            v110[1] = v90;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v44, v110, 0, 1, v45, v30, v71, v109);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease_n();
            double v64 = 0;
            uint64_t v69 = v105;
            uint64_t v68 = (uint64_t)v106;
            goto LABEL_59;
          }
        }
LABEL_56:
        uint64_t v112 = 0;
        uint64_t v113 = 0;
        if (one-time initialization token for shared == -1)
        {
LABEL_57:
          swift_beginAccess();
          double v91 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
          unsigned int v92 = static CoreGlue2.shared;
          v91(&v112);

          uint64_t v89 = v112;
          uint64_t v90 = v113;
          char v44 = c;
          goto LABEL_58;
        }
LABEL_68:
        swift_once();
        goto LABEL_57;
      }
      uint64_t aBlock = 0;
      LOBYTE(v119) = 1;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      char v123 = 1;
      uint64_t v112 = *(void *)&v99;
      uint64_t v113 = *(void *)&v26;
      uint64_t v114 = v100;
      id v115 = v101;
      CGFloat v116 = v102;
      ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:)((uint64_t)&aBlock, v98, v97, v29, v96 | (v95 << 8), (uint64_t)&v112);
      char v60 = *(void **)(v11 + 216);
      swift_beginAccess();
      id v61 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v60, v29);
      swift_endAccess();
      outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v124);
      uint64_t v62 = swift_allocObject();
      *(double *)(v62 + 16) = v27;
      *(double *)(v62 + 24) = v28;
      *(void *)(v62 + 32) = c;
      uint64_t v63 = swift_allocObject();
      double v64 = partial apply for closure #3 in ResolvedStyledText.TextLayoutManager.drawImplementation(in:with:applyingMarginOffsets:containsResolvable:context:renderer:);
      *(void *)(v63 + 16) = partial apply for closure #3 in ResolvedStyledText.TextLayoutManager.drawImplementation(in:with:applyingMarginOffsets:containsResolvable:context:renderer:);
      *(void *)(v63 + 24) = v62;
      CGFloat v116 = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
      uint64_t v117 = v63;
      uint64_t v112 = MEMORY[0x263EF8330];
      uint64_t v113 = 1107296256;
      uint64_t v114 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      id v115 = &block_descriptor_69;
      char v65 = _Block_copy(&v112);
      double v66 = c;
      swift_retain();
      swift_release();
      id v67 = objc_msgSend(v61, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v65);

      swift_unknownObjectRelease();
      _Block_release(v65);
      LOBYTE(v65) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v65 & 1) == 0)
      {
        uint64_t v69 = v105;
        uint64_t v68 = (uint64_t)v106;
        char v44 = c;
LABEL_59:
        CGContextRestoreGState(v44);

        if (v38)
        {
          if (v68)
          {
            CGFloat v116 = (uint64_t (*)())v68;
            uint64_t v117 = v69;
            uint64_t v112 = MEMORY[0x263EF8330];
            uint64_t v113 = 1107296256;
            uint64_t v114 = thunk for @escaping @callee_guaranteed (@unowned RBDrawingState, @unowned Int) -> ();
            id v115 = &block_descriptor_59;
            CGFloat v93 = _Block_copy(&v112);
            swift_retain();
            swift_release();
          }
          else
          {
            CGFloat v93 = 0;
          }
          objc_msgSend(v38, sel_setCGStyleHandler_, v93, v94);
          _Block_release(v93);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v68);
        }
        else
        {
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v68);
        }
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v64);
        goto LABEL_66;
      }
      __break(1u);
    }
  }
  __break(1u);
}

void ResolvedStyledText.TextLayoutManager.ensureAndCollectTextLayout(origin:metrics:shape:)(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  if (*(void *)(a1 + 96))
  {
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 112);
    *(void *)&long long v31 = *(void *)(a1 + 96);
    BYTE8(v31) = v9 & 1;
    *(void *)&long long v32 = v10;
    Text.Layout.offset(by:)((uint64_t)&v37, a4, a5);
    char v11 = v38;
    uint64_t v12 = v39;
    *(void *)a3 = v37;
    *(unsigned char *)(a3 + 8) = v11;
    *(void *)(a3 + 16) = v12;
  }
  else
  {
    uint64_t v13 = v5;
    double v14 = *(double *)a1;
    double v15 = *(double *)(a1 + 8);
    int v16 = *(unsigned __int8 *)(a1 + 16);
    int v17 = *(unsigned __int8 *)(a1 + 17);
    double v18 = *(double *)(a1 + 40);
    long long v19 = *a2;
    long long v20 = a2[1];
    uint64_t v21 = (uint64_t (*)())*((void *)a2 + 4);
    uint64_t v37 = 0;
    char v38 = 1;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    char v42 = 1;
    long long v31 = v19;
    long long v32 = v20;
    id v33 = v21;
    ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:)((uint64_t)&v37, v14, v15, v18, v16 | (v17 << 8), (uint64_t)&v31);
    uint64_t v36 = MEMORY[0x263F8EE78];
    char v35 = 0;
    double v22 = *(void **)(v5 + 216);
    swift_beginAccess();
    id v23 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v22, v18);
    swift_endAccess();
    LODWORD(v13) = (*(unsigned __int16 *)(v13 + 260) >> 3) & 0x10;
    uint64_t v24 = swift_allocObject();
    *(double *)(v24 + 16) = a4;
    *(double *)(v24 + 24) = a5;
    *(void *)(v24 + 32) = &v36;
    *(_DWORD *)(v24 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v13;
    *(void *)(v24 + 48) = &v35;
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:);
    *(void *)(v25 + 24) = v24;
    id v33 = _sSo20NSTextLayoutFragmentCSbIggd_ABSbIeggd_TRTA_0;
    uint64_t v34 = v25;
    *(void *)&long long v31 = MEMORY[0x263EF8330];
    *((void *)&v31 + 1) = 1107296256;
    *(void *)&long long v32 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
    *((void *)&v32 + 1) = &block_descriptor_24;
    double v26 = _Block_copy(&v31);
    swift_retain();
    swift_release();
    id v27 = objc_msgSend(v23, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v26);
    swift_unknownObjectRelease();

    _Block_release(v26);
    LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v23)
    {
      __break(1u);
    }
    else
    {
      uint64_t v28 = v36;
      char v29 = v35;
      uint64_t v30 = *(void *)(v36 + 16);
      swift_release();
      *(void *)a3 = v28;
      *(unsigned char *)(a3 + 8) = v29;
      *(void *)(a3 + 16) = v30;
    }
  }
}

BOOL closure #3 in ResolvedStyledText.TextLayoutManager.drawImplementation(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(void *a1, uint64_t a2, double a3, double a4)
{
  id v8 = objc_msgSend(a1, sel_state);
  if (v8 == (id)3)
  {
    objc_msgSend(a1, sel_layoutFragmentFrame);
    objc_msgSend(a1, sel_drawAtPoint_inContext_, a2, v9 + a3, v10 + a4);
  }
  return v8 == (id)3;
}

void ResolvedStyledText.TextLayoutManager.linkURL(at:in:)(unsigned char *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  id v7 = *(void **)(v5 + 216);
  if (!v7)
  {
    uint64_t v13 = type metadata accessor for URL();
    double v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    v14(a1, 1, 1, v13);
    return;
  }
  id v12 = v7;
  ResolvedStyledText.TextLayoutManager.prepareLayoutManager(in:with:applyingMarginOffsets:)(0, (uint64_t)&v39, a4, a5);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&v39, (uint64_t)v40);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)v40, (uint64_t)v41);
  if (_sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOg((uint64_t)v41) == 1)
  {

LABEL_30:
    uint64_t v37 = type metadata accessor for URL();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(a1, 1, 1, v37);
    return;
  }
  double v16 = *(double *)v41;
  double v15 = *(double *)&v41[1];
  double v17 = *(double *)&v41[7];
  if (one-time initialization token for lineFragmentPadding != -1) {
    swift_once();
  }
  double v18 = v16 + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding;
  swift_beginAccess();
  if (*(unsigned char *)(v5 + 97) == 1)
  {
    CGAffineTransformMakeTranslation(&v39, a4, 0.0);
    CGAffineTransformRotate(&v38, &v39, 1.57079633);
    CGAffineTransform v39 = v38;
    CGAffineTransformInvert(&v38, &v39);
    long long v20 = *(_OWORD *)&v38.a;
    long long v19 = *(_OWORD *)&v38.c;
    long long v21 = *(_OWORD *)&v38.tx;
  }
  else
  {
    long long v19 = xmmword_2461C55F0;
    long long v20 = xmmword_2461BCA80;
    long long v21 = 0uLL;
  }
  *(_OWORD *)&v39.CGFloat a = v20;
  *(_OWORD *)&v39.CGContextRef c = v19;
  *(_OWORD *)&v39.tCGFloat x = v21;
  v43.CGFloat x = a2;
  v43.CGFloat y = a3;
  CGPoint v22 = CGPointApplyAffineTransform(v43, &v39);
  swift_beginAccess();
  id v23 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v7, v17);
  swift_endAccess();
  outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v40);
  id v24 = objc_msgSend(v23, sel_textSelectionNavigation);
  id v25 = objc_msgSend(v23, sel_documentRange);
  id v26 = objc_msgSend(v25, sel_location);

  id v27 = objc_msgSend(v24, sel_textSelectionForSelectionGranularity_enclosingPoint_inContainerAtLocation_, 0, v26, v22.x - v18, v22.y - v15);
  swift_unknownObjectRelease();
  if (!v27) {
    goto LABEL_25;
  }
  id v28 = objc_msgSend(v27, sel_textRanges);
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSTextRange);
  unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_15;
    }
LABEL_29:

    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if (!*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_29;
  }
LABEL_15:
  if ((v29 & 0xC000000000000001) != 0)
  {
    id v30 = (id)MEMORY[0x24C523D60](0, v29);
    goto LABEL_18;
  }
  if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v30 = *(id *)(v29 + 32);
LABEL_18:
    long long v31 = v30;
    swift_bridgeObjectRelease();
    id v32 = objc_msgSend(v31, sel_location);

    if (v32)
    {
      self;
      id v33 = (void *)swift_dynamicCastObjCClass();
      if (v33)
      {
        uint64_t v34 = v33;
        id v35 = objc_msgSend(v33, sel_characterIndex);
        if ((uint64_t)v35 >= (uint64_t)objc_msgSend(v12, sel_length))
        {
          swift_unknownObjectRelease();

          goto LABEL_30;
        }
        if (objc_msgSend(v12, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x263F81520], objc_msgSend(v34, sel_characterIndex), 0))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          outlined init with take of Any(&v38, &v39);
          outlined init with copy of Any((uint64_t)&v39, (uint64_t)&v38);
          URL.init(urlValue:)((uint64_t)&v38, a1);

          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
          return;
        }

        swift_unknownObjectRelease();
        goto LABEL_25;
      }
      swift_unknownObjectRelease();
    }

LABEL_25:
    goto LABEL_30;
  }
  __break(1u);
}

void ResolvedStyledText.TextLayoutManager.__ivar_destroyer()
{
  outlined consume of ResolvedTextSuffix(*(void **)(v0 + 352), *(void *)(v0 + 360), *(void *)(v0 + 368), *(void *)(v0 + 376), *(void *)(v0 + 384), *(void *)(v0 + 392));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 496);
  uint64_t v2 = *(void **)(v0 + 520);

  id v3 = *(void **)(v0 + 576);
}

uint64_t ResolvedStyledText.TextLayoutManager.deinit()
{
  long long v1 = *(_OWORD *)(v0 + 128);
  void v8[6] = *(_OWORD *)(v0 + 112);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 144);
  char v9 = *(unsigned char *)(v0 + 160);
  long long v2 = *(_OWORD *)(v0 + 64);
  _OWORD v8[2] = *(_OWORD *)(v0 + 48);
  void v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 96);
  v8[4] = *(_OWORD *)(v0 + 80);
  void v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  v8[0] = *(_OWORD *)(v0 + 16);
  v8[1] = v4;
  outlined release of TextLayoutProperties((uint64_t)v8);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)(v0 + 352), *(void *)(v0 + 360), *(void *)(v0 + 368), *(void *)(v0 + 376), *(void *)(v0 + 384), *(void *)(v0 + 392));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(v0 + 496);
  uint64_t v6 = *(void **)(v0 + 520);

  return v0;
}

uint64_t ResolvedStyledText.TextLayoutManager.__deallocating_deinit()
{
  ResolvedStyledText.TextLayoutManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t vtable thunk for ResolvedStyledText.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:) dispatching to ResolvedStyledText.TextLayoutManager.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t *a2, uint64_t a3, __int16 *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  __int16 v26 = *a4;
  __int16 v25 = *a6;
  swift_allocObject();
  return specialized ResolvedStyledText.TextLayoutManager.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, (char *)&v26, a5, &v25, a7, a8, a9, a10, a11, a12, a13, a14);
}

void destroy for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  long long v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

uint64_t assignWithCopy for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double v10 = *(void **)(a2 + 24);
  char v11 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  id v12 = v10;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v13;
  return a1;
}

uint64_t assignWithTake for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)CGSize result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)CGSize result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.LayoutManager()
{
  return &unk_26FA5B9B0;
}

uint64_t initializeWithCopy for ResolvedStyledText.TextLayoutManager.Cache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResolvedStyledText.TextLayoutManager.Cache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  return a1;
}

__n128 __swift_memcpy74_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ResolvedStyledText.TextLayoutManager.Cache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Cache(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 74)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Cache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 74) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 74) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedStyledText.TextLayoutManager.Cache()
{
  return &type metadata for ResolvedStyledText.TextLayoutManager.Cache;
}

uint64_t sub_245EF2020()
{
  return swift_deallocObject();
}

uint64_t sub_245EF2030()
{
  return swift_deallocObject();
}

uint64_t sub_245EF2040()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(int a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(a1, a2, *(double *)(v4 + 24), a3, a4, *(void *)(v4 + 16), *(void **)(v4 + 32));
}

uint64_t sub_245EF2090()
{
  return swift_deallocObject();
}

uint64_t sub_245EF20A0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:)(void *a1)
{
  closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:shape:)(a1, *(double **)(v1 + 16));
}

uint64_t sub_245EF20B8()
{
  return swift_deallocObject();
}

double _sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 1;
  return result;
}

uint64_t sub_245EF20EC()
{
  return swift_deallocObject();
}

uint64_t sub_245EF20FC()
{
  return swift_deallocObject();
}

uint64_t sub_245EF210C()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(void *a1)
{
  return closure #1 in computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void ***)(v1 + 48));
}

uint64_t sub_245EF212C()
{
  return swift_deallocObject();
}

uint64_t sub_245EF213C()
{
  return swift_deallocObject();
}

uint64_t sub_245EF214C()
{
  return swift_deallocObject();
}

uint64_t sub_245EF215C()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #3 in ResolvedStyledText.TextLayoutManager.drawImplementation(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(void *a1)
{
  return closure #3 in ResolvedStyledText.TextLayoutManager.drawImplementation(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(a1, *(void *)(v1 + 32), *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_245EF21A0()
{
  return swift_deallocObject();
}

uint64_t sub_245EF21B0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245EF21E8()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned RBDrawingState, @unowned Int) -> ()(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned RBDrawingState, @unowned Int) -> ()(a1, a2, *(void *)(v2 + 16));
}

void specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  id v9 = (void *)MEMORY[0x24C526EA0]();
  double v10 = (void **)(v4 + 416);
  swift_beginAccess();
  if (a1) {
    double v11 = a4;
  }
  else {
    double v11 = a3;
  }
  double v76 = a4;
  if (a1) {
    double v12 = a3;
  }
  else {
    double v12 = a4;
  }
  uint64_t v13 = *(void *)(v4 + 416);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v13 + 56;
    while (1)
    {
      double v16 = *(double *)(v15 - 8);
      double v17 = *(double *)v15;
      double v19 = *(double *)(v15 - 24);
      double v18 = *(double *)(v15 - 16);
      if (v16 >= v19) {
        double v20 = *(double *)(v15 - 24);
      }
      else {
        double v20 = *(double *)(v15 - 8);
      }
      if (v19 <= v16) {
        double v19 = *(double *)(v15 - 8);
      }
      if (v17 >= v18) {
        double v21 = *(double *)(v15 - 16);
      }
      else {
        double v21 = *(double *)v15;
      }
      if (v18 <= v17) {
        double v18 = *(double *)v15;
      }
      BOOL v22 = v20 > v12 || v12 > v19;
      BOOL v23 = v22 || v21 > v11;
      if (!v23 && v11 <= v18) {
        break;
      }
      v15 += 88;
      if (!--v14) {
        goto LABEL_31;
      }
    }
    unsigned __int8 v44 = *(unsigned char *)(v15 + 57);
    char v45 = *(unsigned char *)(v15 + 56);
    uint64_t v46 = *(void *)(v15 + 48);
    uint64_t v47 = *(void *)(v15 + 32);
    uint64_t v48 = *(void *)(v15 + 40);
    uint64_t v50 = *(void *)(v15 + 16);
    uint64_t v49 = *(void *)(v15 + 24);
    double v51 = *(double *)(v15 + 8);
  }
  else
  {
LABEL_31:
    swift_beginAccess();
    double v25 = *(double *)(v4 + 48);
    if (v25 >= 1.0) {
      goto LABEL_46;
    }
    double v26 = v25 > COERCE_DOUBLE(1) ? *(double *)(v4 + 48) : COERCE_DOUBLE(1);
    ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(a1 & 1, 0, (uint64_t)v77, 1.0, a3, INFINITY);
    int v27 = v78;
    double v28 = a3;
    double v29 = v79;
    double v30 = v80;
    int v31 = v88;
    swift_bridgeObjectRelease();
    double v32 = v27 ? v29 : v30;
    double v33 = v27 ? v30 : v29;
    a3 = v28;
    if (v31 == 1 || (v32 <= v28 ? (BOOL v34 = v33 > v76) : (BOOL v34 = 1), v34))
    {
      ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(a1 & 1, 0, (uint64_t)v77, v26, v28, INFINITY);
      int v52 = v78;
      double v53 = v79;
      double v54 = v80;
      int v55 = v88;
      swift_bridgeObjectRelease();
      if (v52) {
        double v56 = v53;
      }
      else {
        double v56 = v54;
      }
      if (v52) {
        double v57 = v54;
      }
      else {
        double v57 = v53;
      }
      a3 = v28;
      if (v55 == 1 || v56 > v28 || v57 > v76)
      {
        unsigned int v35 = a1 & 0xFFFFFF01;
        double v36 = v26;
      }
      else
      {
        double v58 = 1.0;
        double v75 = v26;
        double v59 = v26;
        do
        {
          double v60 = v58 + (v58 - v59) * -0.5;
          ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(a1 & 1, 0, (uint64_t)v77, v60, a3, INFINITY);
          int v61 = v78;
          double v62 = a3;
          double v63 = v79;
          double v64 = v80;
          unsigned __int8 v65 = v88;
          swift_bridgeObjectRelease();
          if (v61) {
            double v66 = v63;
          }
          else {
            double v66 = v64;
          }
          if ((v65 & 1) == 0)
          {
            if (v61) {
              double v67 = v64;
            }
            else {
              double v67 = v63;
            }
            double v68 = v75;
            BOOL v69 = v67 > v76;
            if (v67 > v76) {
              double v70 = v75;
            }
            else {
              double v70 = v58 + (v58 - v59) * -0.5;
            }
            if (v69) {
              double v71 = v59;
            }
            else {
              double v71 = v58 + (v58 - v59) * -0.5;
            }
            if (v69) {
              double v72 = v58 + (v58 - v59) * -0.5;
            }
            else {
              double v72 = v58;
            }
            if (v66 <= v62) {
              double v68 = v70;
            }
            double v75 = v68;
            if (v66 <= v62)
            {
              double v59 = v71;
              double v60 = v72;
            }
          }
          a3 = v62;
          double v58 = v60;
        }
        while (v60 - v59 >= 0.01);
        unsigned int v35 = a1 & 0xFFFFFF01;
        double v36 = v75;
      }
    }
    else
    {
LABEL_46:
      unsigned int v35 = a1 & 0xFFFFFF01;
      double v36 = 1.0;
    }
    ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(v35, 0, (uint64_t)v77, v36, a3, v76);
    double v16 = v79;
    double v17 = v80;
    double v51 = v81;
    uint64_t v38 = v83;
    uint64_t v37 = v84;
    uint64_t v73 = v82;
    uint64_t v74 = v85;
    uint64_t v46 = v86;
    char v45 = v87;
    unsigned __int8 v44 = v88;
    if (ResolvedStyledText.TextLayoutManager.minorAxisIsFlexible.getter())
    {
      ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(a1 & 0xFFFFFF01, 1, (uint64_t)v77, v51, a3, v76);
      swift_bridgeObjectRelease();
      double v16 = v79;
      double v17 = v80;
      double v51 = v81;
      uint64_t v50 = v82;
      uint64_t v49 = v83;
      uint64_t v47 = v84;
      uint64_t v74 = v85;
      uint64_t v46 = v86;
      char v45 = v87;
      unsigned __int8 v44 = v88;
    }
    else
    {
      uint64_t v47 = v37;
      uint64_t v49 = v38;
      uint64_t v50 = v73;
    }
    swift_bridgeObjectRelease();
    CGAffineTransform v39 = *v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *double v10 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      CGAffineTransform v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
      *double v10 = v39;
    }
    unint64_t v42 = v39[2];
    unint64_t v41 = v39[3];
    if (v42 >= v41 >> 1)
    {
      CGAffineTransform v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v39);
      *double v10 = v39;
    }
    v39[2] = v42 + 1;
    CGPoint v43 = (double *)&v39[11 * v42];
    v43[4] = v12;
    v43[5] = v11;
    v43[6] = v16;
    v43[7] = v17;
    v43[8] = v51;
    *((void *)v43 + 9) = v50;
    *((void *)v43 + 1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v49;
    *((void *)v43 + 11) = v47;
    uint64_t v48 = v74;
    *((void *)v43 + 12) = v74;
    *((void *)v43 + 13) = v46;
    *((unsigned char *)v43 + 112) = v45;
    *((unsigned char *)v43 + 113) = v44;
  }
  swift_endAccess();
  *(double *)a2 = v16;
  *(double *)(a2 + 8) = v17;
  *(double *)(a2 + 16) = v51;
  *(void *)(a2 + 24) = v50;
  *(void *)(a2 + 32) = v49;
  *(void *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v47;
  *(void *)(a2 + 48) = v48;
  *(void *)(a2 + 56) = v46;
  *(unsigned char *)(a2 + 64) = v45;
  *(unsigned char *)(a2 + 65) = v44;
}

uint64_t destroy for ResolvedStyledText.TextLayoutManager.Metrics()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 9specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(unsigned char *)(a2 + 90);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v4;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 9specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(unsigned char *)(a2 + 90);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 9specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(unsigned char *)(a2 + 90);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 120)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 96);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    }
    if (a2) {
      *(void *)(result + 96) = a2;
    }
  }
  return result;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.Metrics()
{
  return &unk_26FA5BB98;
}

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Cache.Entry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 82)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 81);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Cache.Entry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 82) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 81) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedStyledText.TextLayoutManager.Cache.Entry()
{
  return &type metadata for ResolvedStyledText.TextLayoutManager.Cache.Entry;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.Metrics.Flags()
{
  return &unk_26FA5BB70;
}

uint64_t getEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Size(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Size(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.Size()
{
  return &unk_26FA5BA40;
}

unint64_t lazy protocol witness table accessor for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags);
  }
  return result;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.Size.Flags()
{
  return &unk_26FA90CD8;
}

unint64_t lazy protocol witness table accessor for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Size.Flags and conformance ResolvedStyledText.TextLayoutManager.Size.Flags);
  }
  return result;
}

id ResolvedTextSuffix.accessibilityLine.getter()
{
  if (*(void *)(v0 + 40) >> 62 == 1 && (*(unsigned char *)(v0 + 16) & 1) != 0) {
    return objc_msgSend(*(id *)v0, sel_attributedString);
  }
  else {
    return 0;
  }
}

id ResolvedTextSuffix.line.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3 < 0)
  {
    id v7 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    LODWORD(v3) = 0;
    uint64_t v8 = 255;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v6 = *(void *)(v1 + 8);
    id v7 = *(void **)v1;
    uint64_t v8 = *(void *)(v1 + 16) & 1;
    id result = outlined copy of Text.Layout.Line.Line(*(void **)v1, v6, *(void *)(v1 + 16) & 1);
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v3;
  return result;
}

uint64_t Text.Suffix.storage.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Text.Suffix.Storage(v2, v3, v4);
}

__n128 Text.Suffix.storage.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Text.Suffix.Storage(*v1, v1[1], v1[2]);
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*Text.Suffix.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double static Text.Suffix.automatic.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  double result = -0.0;
  *(_OWORD *)(a1 + 16) = xmmword_24619B530;
  return result;
}

double static Text.Suffix.none.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_24619B520;
  a1[1] = xmmword_24619B530;
  return result;
}

uint64_t static Text.Suffix.truncated(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3 & 1;
  a5[3] = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t Text.Suffix.text.getter()
{
  uint64_t v1 = v0[2];
  if (v1 < 0) {
    return 0;
  }
  uint64_t v2 = *v0;
  outlined copy of Text.Suffix.Storage(*v0, v0[1], v1);
  return v2;
}

BOOL static Text.Suffix.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return specialized static Text.Suffix.Storage.== infix(_:_:)((uint64_t *)v6, (uint64_t *)v5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Suffix(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return static Text.Suffix.Storage.== infix(_:_:)(v6, v5) & 1;
}

uint64_t ResolvedTextSuffix.styles.getter()
{
  if ((*(void *)(v0 + 40) & 0x8000000000000000) != 0) {
    return MEMORY[0x263F8EE78];
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

void protocol witness for static Rule.initialValue.getter in conformance TextSuffixModifier.OptionalText(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
}

uint64_t *protocol witness for Rule.value.getter in conformance TextSuffixModifier.OptionalText@<X0>(uint64_t *a1@<X8>)
{
  double result = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = result[2];
  if (v3 < 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v4 = *result;
    uint64_t v5 = result[1];
    uint64_t v6 = result[2] & 1;
    uint64_t v7 = result[3];
    double result = (uint64_t *)outlined copy of Text.Suffix.Storage(*result, v5, v3);
  }
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance TextSuffixModifier.ResolvedTextSuffixFilter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x1FFFFFFFELL;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TextSuffixModifier.ResolvedTextSuffixFilter@<X0>(uint64_t a1@<X8>)
{
  return TextSuffixModifier.ResolvedTextSuffixFilter.value.getter(a1);
}

void *protocol witness for Rule.value.getter in conformance TextSuffixModifier.ChildEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  uint64_t v4 = AGGraphGetValue();
  outlined init with take of ResolvedTextSuffix(v4, (uint64_t)v6);
  swift_retain();
  swift_retain();
  outlined retain of ResolvedTextSuffix(v6, (void (*)(void, void, void, void, void, void, void))outlined copy of ResolvedTextSuffix);
  specialized EnvironmentValues.subscript.setter(v6);
  return outlined retain of ResolvedTextSuffix(v6, (void (*)(void, void, void, void, void, void, void))outlined consume of ResolvedTextSuffix);
}

uint64_t getEnumTag for Text.Suffix.Storage(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for Text.Suffix.Storage(uint64_t result)
{
  *(void *)(result + 16) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Suffix.Storage(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    *(void *)(result + 16) = *(void *)(result + 16) & 1 | (a2 << 62);
  }
  else
  {
    *(void *)double result = (a2 - 2);
    *(_OWORD *)(result + 8) = xmmword_2461F60A0;
    *(void *)(result + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Suffix.Storage()
{
  return &type metadata for Text.Suffix.Storage;
}

uint64_t assignWithCopy for ResolvedTextSuffix(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  outlined copy of ResolvedTextSuffix(*(void **)a2, v4, v5, v6, v7, v8);
  double v10 = *(void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v8;
  *(void *)(a1 + 48) = v9;
  outlined consume of ResolvedTextSuffix(v10, v11, v12, v13, v14, v15);
  return a1;
}

uint64_t assignWithTake for ResolvedTextSuffix(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  outlined consume of ResolvedTextSuffix(v4, v6, v5, v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTextSuffix(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ResolvedTextSuffix(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 2 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for ResolvedTextSuffix(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for ResolvedTextSuffix(uint64_t result)
{
  *(void *)(result + 40) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for ResolvedTextSuffix(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(void *)(result + 16) &= 1uLL;
    *(_DWORD *)(result + 44) = a2 << 30;
  }
  else
  {
    *(void *)double result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = xmmword_24619B530;
  }
  return result;
}

uint64_t sub_245EF34D4()
{
  return swift_getWitnessTable();
}

uint64_t *assignWithCopy for Text.Suffix(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of Text.Suffix.Storage(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of Text.Suffix.Storage(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for Text.Suffix(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of Text.Suffix.Storage(v3, v5, v4);
  return a1;
}

void type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>()
{
  if (!lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>)
  {
    unint64_t v0 = type metadata accessor for InterfaceIdiomBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>);
    }
  }
}

ValueMetadata *type metadata accessor for TextSuffixKey()
{
  return &type metadata for TextSuffixKey;
}

void *type metadata accessor for TextSuffixModifier.ChildEnvironment()
{
  return &unk_26FA5C510;
}

void *type metadata accessor for TextSuffixModifier.ResolvedTextSuffixFilter()
{
  return &unk_26FA5C480;
}

void *type metadata accessor for TextSuffixModifier.OptionalText()
{
  return &unk_26FA5C448;
}

unint64_t instantiation function for generic protocol witness table for TextSuffixModifier.OptionalText(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextSuffixModifier.ResolvedTextSuffixFilter(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextSuffixModifier.ChildEnvironment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(int64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result || a1 > *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v3 + 16) <= a1) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = *(void *)(v3 + 16);
    }
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(unint64_t a1)
{
  uint64_t v4 = *v1;
  Swift::UInt64 v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = *v1 + 48;
  swift_beginAccess();
  if (*(void *)(*(void *)(v4 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
    if (v7)
    {
      swift_endAccess();
      swift_beginAccess();
      uint64_t v8 = *(void *)v6;
      if (!*(void *)(*(void *)v6 + 16)) {
        goto LABEL_9;
      }
      unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
      if ((v10 & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 16 * v9);
      swift_endAccess();
      if (*(void *)(v11 + 16) > a1) {
        return a1 + 1;
      }
      __break(1u);
    }
  }
  swift_endAccess();
  __break(1u);
LABEL_9:
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.index(after:)(uint64_t a1)
{
  id v3 = *(id *)v1;
  if ((*(unsigned char *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v3, *(void *)(v1 + 8), 0);
    swift_release();
    goto LABEL_5;
  }
  id v3 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v3)
  {
LABEL_5:
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v3);

    goto LABEL_6;
  }
  CFArrayRef RunCount = 0;
LABEL_6:
  if (a1 < 0 || (uint64_t)RunCount <= a1) {
    __break(1u);
  }
}

void Text.Layout.Line.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void **)v2;
  long long v9 = *(_OWORD *)(v2 + 24);
  int v6 = *(_DWORD *)(v2 + 40);
  if ((*(unsigned char *)(v2 + 16) & 1) == 0)
  {
    uint64_t v8 = *(void *)(v2 + 8);
    outlined copy of Text.Layout.Line.Line(v5, v8, 0);
    swift_release();
    outlined copy of Text.Layout.Line.Line(v5, v8, 0);

    goto LABEL_5;
  }
  id v7 = (id)_NSTextLineFragmentGetCTLine(v5);
  if (v7)
  {
    uint64_t v5 = v7;
    uint64_t v8 = 0;
LABEL_5:
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = a1;
    *(_OWORD *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 32) = v6;
    *(void *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v8;
    return;
  }
  __break(1u);
}

void Text.Layout.Line.characterRange.getter()
{
  uint64_t v1 = *(void **)v0;
  if (*(unsigned char *)(v0 + 16))
  {
    uint64_t v2 = *(void *)(v0 + 8);
    location = (char *)objc_msgSend(v1, sel_characterRange);
    CFIndex length = v4;
    outlined consume of Text.Layout.Line.Line(v1, v2, 1);
  }
  else
  {
    int v6 = v1;
    CFRange StringRange = CTLineGetStringRange(v6);
    location = (char *)StringRange.location;
    CFIndex length = StringRange.length;
  }
  if (__OFADD__(location, length))
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((uint64_t)&location[length] < (uint64_t)location) {
LABEL_8:
  }
    __break(1u);
}

void GraphicsContext.draw(_:options:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a1;
  CGFloat v4 = *(double *)(a1 + 8);
  CGFloat v6 = *(double *)(a1 + 24);
  CGFloat v7 = *(double *)(a1 + 32);
  int v36 = *(_DWORD *)(a1 + 40);
  int v37 = *(unsigned __int8 *)(a1 + 16);
  if ((a2 & 0x40) == 0)
  {
    CGFloat v8 = *(double *)(a3 + 24);
    unsigned int v9 = *(_DWORD *)(a3 + 48);
    unsigned int v10 = *(_DWORD *)(a3 + 52);
    CGFloat v11 = *(double *)(a3 + 56);
    swift_retain();
    double v12 = GraphicsContext.userToDeviceScale.getter();
    swift_release();
    v41.CGFloat a = v8;
    v41.double b = v8;
    v41.CGFloat c = 0.0;
    *(void *)&v41.CGFloat d = __PAIR64__(v10, v9);
    v41.tCGFloat x = v11;
    v41.tCGFloat y = v12;
    outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v37);
    int v13 = 0;
    for (CGFloat i = 0.0; ; ++*(void *)&i)
    {
      if (v37)
      {
        double v16 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
        if (!v16)
        {
          if (i == 0.0)
          {
            char v34 = 1;
LABEL_24:
            outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v34);
            CGAffineTransform transform = v41;
            int v40 = v13;
            GlyphContext.deinit();
            break;
          }
          goto LABEL_11;
        }
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
        swift_release();
        double v16 = (const __CTLine *)v5;
      }
      CFArrayRef RunCount = _CTLineGetRunCount(v16);

      if (*(const __CFArray **)&i == RunCount)
      {
        char v34 = v37;
        goto LABEL_24;
      }
      if (!v37)
      {
        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
        swift_release();
        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);

        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
        swift_release();
        BOOL v23 = (const __CTLine *)v5;
        double v19 = (const __CTLine *)v5;
        CFArrayRef v22 = *(const __CFArray **)&v4;
        goto LABEL_15;
      }
LABEL_11:
      double v18 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
      if (!v18) {
        goto LABEL_38;
      }
      double v19 = v18;
      char v20 = 1;
      outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 1);
      double v21 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
      CFArrayRef v22 = 0;
      if (v21)
      {
        BOOL v23 = v21;
LABEL_15:
        CGFloat v24 = *(double *)&v22;
        CFArrayRef v22 = _CTLineGetRunCount(v23);

        char v20 = v37;
        goto LABEL_17;
      }
      CGFloat v24 = 0.0;
LABEL_17:
      outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v20);
      if (*(uint64_t *)&i >= (uint64_t)v22)
      {
        __break(1u);
        goto LABEL_37;
      }
      *(void *)&transform.CGFloat a = v19;
      transform.double b = i;
      transform.CGFloat c = v6;
      transform.CGFloat d = v7;
      LODWORD(transform.tx) = v36;
      transform.tCGFloat y = v24;
      int v25 = Text.Layout.Run.drawingOptions.getter() | a2;
      int v42 = v25;
      CGFloat c = v41.c;
      if (*(void *)&v41.c && v25 != v13)
      {
        RBDrawingStateEndCGContext();

        v41.CGFloat c = 0.0;
      }
      int v27 = GlyphContext.currentContext()();
      int v13 = v42;
      if ((v42 & 8) == 0)
      {
        double v28 = (id)_CTLineGetRunAtIndex(v19, *(CFIndex *)&i);
        _CGContextSetTextRunRange((uint64_t)v27, (uint64_t)v28, 0, 0);
      }
      *(void *)&transform.CGFloat a = v19;
      transform.double b = i;
      transform.CGFloat c = v6;
      transform.CGFloat d = v7;
      LODWORD(transform.tx) = v36;
      transform.tCGFloat y = v24;
      GlyphContext.drawAttachment(_:cgContext:)(&transform, v27);
      CGContextSaveGState(v27);
      transform.double b = 0.0;
      transform.CGFloat c = 0.0;
      transform.CGFloat a = 1.0;
      transform.CGFloat d = -1.0;
      transform.tCGFloat x = v6;
      transform.tCGFloat y = v7;
      CGContextConcatCTM(v27, &transform);
      uint64_t v15 = (id)_CTLineGetRunAtIndex(v19, *(CFIndex *)&i);
      v43.location = 0;
      v43.CFIndex length = 0;
      CTRunDraw((CTRunRef)v15, v27, v43);

      CGContextRestoreGState(v27);
      swift_release();
    }
  }
  if ((a2 & 0x20) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v37);
    double v29 = GraphicsContext.userToDeviceScale.getter();
    if (v37)
    {
      outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 1);
      double v30 = (uint64_t (*)(int, uint64_t, double, double, double, double, double, double, double, double))(id)_NSTextLineFragmentGetCTLine(v5);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
      id v31 = v5;
      double v30 = (uint64_t (*)(int, uint64_t, double, double, double, double, double, double, double, double))v5;
    }
    *(void *)&v41.CGFloat a = v5;
    v41.double b = v4;
    LOBYTE(v41.c) = v37;
    v41.CGFloat d = v6;
    v41.tCGFloat x = v7;
    LODWORD(v41.ty) = v36;
    Text.Layout.Line.typographicBounds.getter((float64x2_t *)&transform);
    outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v37);
    if (v37)
    {
      double v32 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
      if (!v32)
      {
        outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 1);
        uint64_t v33 = 0;
LABEL_34:
        memset(&v41, 0, sizeof(v41));
        LOBYTE(v42) = 1;
        Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)(v30, 0, v33, 3, (uint64_t)&v41, (double *)&v38, *(uint64_t (**)())&transform.a, transform.b, v29);
        GraphicsContext.draw(_:)(&v38, (double *)a3);
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
      swift_release();
      double v32 = (const __CTLine *)v5;
    }
    uint64_t v33 = (uint64_t)_CTLineGetRunCount(v32);

    outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v37);
    if ((v33 & 0x8000000000000000) == 0) {
      goto LABEL_34;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void v6[2];
  long long v7;
  int v8;
  uint64_t v9;

  id v3 = *(void *)(a1 + 8);
  CGFloat v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v6[0] = *(void *)a1;
  v6[1] = v3;
  CGFloat v7 = *(_OWORD *)(a1 + 16);
  CGFloat v8 = v4;
  unsigned int v9 = v5;
  GraphicsContext.draw(_:foregroundColor:options:)((uint64_t)v6, 0, 0, 1, a2, a3);
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void v6[2];
  long long v7;
  int v8;
  long long v9;
  uint64_t v10;

  id v3 = *(void *)(a1 + 8);
  CGFloat v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  v6[0] = *(void *)a1;
  v6[1] = v3;
  CGFloat v7 = *(_OWORD *)(a1 + 16);
  CGFloat v8 = v4;
  unsigned int v9 = *(_OWORD *)(a1 + 40);
  unsigned int v10 = v5;
  GraphicsContext.draw(_:foregroundColor:options:)((uint64_t)v6, 0, 0, 1, a2, a3);
}

unint64_t Text.Layout.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > result)
  {
    uint64_t v3 = *(void *)v2 + 48 * result;
    CGFloat v4 = *(void **)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    char v6 = *(unsigned char *)(v3 + 48);
    int v7 = *(_DWORD *)(v3 + 72);
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 56);
    *(_DWORD *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v7;
    return (unint64_t)outlined copy of Text.Layout.Line.Line(v4, v5, v6);
  }
  __break(1u);
  return result;
}

void Text.Layout.Run.characterRange.getter()
{
  uint64_t v1 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v0, *(void *)(v0 + 8));
  CFRange StringRange = CTRunGetStringRange((CTRunRef)v1);

  if (__OFADD__(StringRange.location, StringRange.length))
  {
    __break(1u);
    goto LABEL_5;
  }
  if (StringRange.location + StringRange.length < StringRange.location) {
LABEL_5:
  }
    __break(1u);
}

void Text.Layout.Run.layoutDirection.getter(unsigned char *a1@<X8>)
{
  uint64_t v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(void *)(v1 + 8));
  char Status = CTRunGetStatus((CTRunRef)v3);

  *a1 = Status & 1;
}

double Text.Layout.Run.typographicBounds.getter@<D0>(uint64_t a1@<X8>)
{
  double v3 = *(double *)(v1 + 16);
  double v4 = *(double *)(v1 + 24);
  uint64_t v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(void *)(v1 + 8));
  specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v5, (CFRange)0, v10);

  double result = v3 + v10[0];
  double v7 = v4 + v10[1];
  long long v8 = v11;
  long long v9 = v12;
  *(double *)a1 = v3 + v10[0];
  *(double *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  return result;
}

const __CTLine *Text.Layout.Line.characterRanges(runIndices:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  int v36 = a1;
  uint64_t v37 = a2;
  _ss8RangeSetV6RangesVySi_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v39 = v4;
  uint64_t v35 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v34 - v5;
  _ss8RangeSetV6RangesVySi_GMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  long long v11 = (char *)&v34 - v10;
  char v34 = type metadata accessor for RangeSet<>.IndexSequence;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v34 - v13;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  double v18 = (uint64_t *)((char *)&v34 - v17);
  double v19 = *(void **)v3;
  uint64_t v20 = *(void *)(v3 + 8);
  int v38 = *(unsigned __int8 *)(v3 + 16);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  RangeSet.init()();
  (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 16))(v11, v36, v8);
  RangeSet.ranges.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v21 = v39;
  uint64_t v22 = v35;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v14, v6, v39);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))((char *)v18 + *(int *)(v16 + 56), v14, v21);
  uint64_t *v18 = 0;
  v18[1] = 0;
  outlined destroy of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v14, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))v34);
  uint64_t v23 = *v18;
  if (v23 >= RangeSet.Ranges.count.getter()) {
    return (const __CTLine *)outlined destroy of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v18, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  }
  int v36 = v18;
  uint64_t v24 = v18[1];
  while (1)
  {
    double result = (const __CTLine *)RangeSet.Ranges.subscript.getter();
    CFIndex v26 = v40 + v24;
    if (__OFADD__(v40, v24)) {
      break;
    }
    if (__OFADD__(v24++, 1)) {
      goto LABEL_21;
    }
    double result = (const __CTLine *)RangeSet.Ranges.subscript.getter();
    if (__OFSUB__(v41, v40)) {
      goto LABEL_22;
    }
    if (v24 >= v41 - v40)
    {
      uint64_t v24 = 0;
      *int v36 = ++v23;
    }
    if (v38)
    {
      outlined copy of Text.Layout.Line.Line(v19, v20, 1);
      double result = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v19);
      if (!result) {
        goto LABEL_26;
      }
      double v28 = result;
      outlined consume of Text.Layout.Line.Line(v19, v20, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v19, v20, 0);
      outlined copy of Text.Layout.Line.Line(v19, v20, 0);

      swift_release();
      double v28 = (const __CTLine *)v19;
    }
    double v29 = (id)_CTLineGetRunAtIndex(v28, v26);
    CFRange StringRange = CTRunGetStringRange((CTRunRef)v29);

    double result = (const __CTLine *)swift_release();
    CFIndex v31 = StringRange.location + StringRange.length;
    if (__OFADD__(StringRange.location, StringRange.length)) {
      goto LABEL_23;
    }
    if (v31 < StringRange.location) {
      goto LABEL_24;
    }
    CFIndex location = StringRange.location;
    CFIndex v43 = StringRange.location + StringRange.length;
    if (__OFSUB__(v31, StringRange.location)) {
      goto LABEL_25;
    }
    if (v31 != StringRange.location)
    {
      _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
      double v32 = (void (*)(uint64_t *, void))RangeSet._ranges.modify();
      _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
      RangeSet.Ranges._insert(contentsOf:)();
      v32(&v40, 0);
    }
    if (v23 >= RangeSet.Ranges.count.getter())
    {
      uint64_t v33 = v36;
      v36[1] = v24;
      double v18 = v33;
      return (const __CTLine *)outlined destroy of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v18, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void Text.Layout.RunSlice.typographicBounds.getter(float64x2_t *a1@<X8>)
{
  CFIndex v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  float64x2_t v5 = 0uLL;
  float64x2_t v6 = 0uLL;
  float64x2_t v7 = 0uLL;
  if (v3 == v4) {
    goto LABEL_4;
  }
  float64x2_t v11 = *(float64x2_t *)(v1 + 16);
  uint64_t v8 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(void *)(v1 + 8));
  if (!__OFSUB__(v4, v3))
  {
    uint64_t v9 = v8;
    v10.CFIndex location = v3;
    v10.CFIndex length = v4 - v3;
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v8, v10, v12[0].f64);

    float64x2_t v6 = v12[1];
    float64x2_t v7 = v12[2];
    float64x2_t v5 = vaddq_f64(v11, v12[0]);
LABEL_4:
    *a1 = v5;
    a1[1] = v6;
    a1[2] = v7;
    return;
  }
  __break(1u);
}

void GraphicsContext.draw(_:foregroundColor:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6)
{
  uint64_t v9 = *(void **)a1;
  CFIndex v8 = *(void *)(a1 + 8);
  double v10 = *(double *)(a1 + 16);
  double v11 = *(double *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 40);
  if ((a5 & 0x40) == 0)
  {
    int v13 = *(_DWORD *)(a1 + 32);
    char v27 = a4 & 1;
    uint64_t v14 = *(void *)(a6 + 24);
    unsigned int v15 = *(_DWORD *)(a6 + 48);
    unsigned int v16 = *(_DWORD *)(a6 + 52);
    uint64_t v17 = *(void *)(a6 + 56);
    swift_retain();
    double v20 = GraphicsContext.userToDeviceScale.getter();
    swift_release();
    *(void *)&long long v33 = v14;
    *((void *)&v33 + 1) = v14;
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = __PAIR64__(v16, v15);
    *(void *)&long long v35 = v17;
    *((double *)&v35 + 1) = v20;
    int v36 = Text.Layout.Run.drawingOptions.getter() | a5;
    *(void *)&long long v29 = v9;
    *((void *)&v29 + 1) = v8;
    *(double *)&long long v30 = v10;
    *((double *)&v30 + 1) = v11;
    LODWORD(v31) = v13;
    *((void *)&v31 + 1) = v12;
    GlyphContext.drawRun(_:range:foregroundColor:)((uint64_t)&v29, 0, 0, a2, a3, v27);
    long long v29 = v33;
    long long v30 = v34;
    long long v31 = v35;
    int v32 = v36;
    GlyphContext.deinit();
  }
  if ((a5 & 0x20) == 0)
  {
    swift_retain();
    id v21 = v9;
    double v22 = GraphicsContext.userToDeviceScale.getter();
    if (__OFADD__(v8, 1))
    {
      __break(1u);
    }
    else if (v8 + 1 >= v8)
    {
      double v23 = v22;
      id v24 = v21;
      swift_retain();
      int v25 = (const __CTLine *)v24;
      CFIndex v26 = (id)_CTLineGetRunAtIndex(v25, v8);
      specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v26, (CFRange)0, (CGFloat *)&v29);
      swift_release();

      *(double *)&long long v33 = v10 + *(double *)&v29;
      *((double *)&v33 + 1) = v11 + *((double *)&v29 + 1);
      long long v34 = v30;
      long long v35 = v31;
      LOBYTE(v36) = 0;
      Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)((uint64_t (*)(int, uint64_t, double, double, double, double, double, double, double, double))v21, v8, v8 + 1, 3, (uint64_t)&v33, (double *)&v28, *(uint64_t (**)())&v10, v11, v23);
      swift_release();

      GraphicsContext.draw(_:)(&v28, (double *)a6);
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
}

{
  CFIndex v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  CFIndex v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  CFIndex v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  CFIndex v23;
  uint64_t v24;
  id v25;
  id v26;
  double v27;
  id v28;
  const __CTLine *v29;
  void *v30;
  CFIndex GlyphCount;
  const __CTLine *v32;
  void *v33;
  CFIndex v34;
  char v35;
  long long v36;
  double v37;
  double v38;
  long long v39;
  const __CTLine *v40;
  void *v41;
  void *v42;
  CFRange v43;
  CFIndex v47;
  uint64_t v48;
  long long v49;
  long long v50;
  long long v51;
  int v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;

  uint64_t v9 = *(void **)a1;
  CFIndex v8 = *(void *)(a1 + 8);
  double v10 = *(double *)(a1 + 16);
  double v11 = *(double *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 40);
  int v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  if ((a5 & 0x40) == 0)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 32);
    unsigned int v16 = *(void *)(a6 + 24);
    uint64_t v17 = *(_DWORD *)(a6 + 48);
    double v18 = *(void *)(a1 + 48);
    double v19 = *(void *)(a1 + 56);
    double v20 = *(_DWORD *)(a6 + 52);
    id v21 = *(void *)(a6 + 56);
    swift_retain();
    double v22 = GraphicsContext.userToDeviceScale.getter();
    swift_release();
    *(void *)&double v53 = v16;
    *((void *)&v53 + 1) = v16;
    *(void *)&double v54 = 0;
    *((void *)&v54 + 1) = __PAIR64__(v20, v17);
    *(void *)&int v55 = v21;
    *((double *)&v55 + 1) = v22;
    double v56 = Text.Layout.Run.drawingOptions.getter() | a5;
    *(void *)&uint64_t v49 = v9;
    *((void *)&v49 + 1) = v8;
    uint64_t v47 = v8;
    *(double *)&uint64_t v50 = v10;
    *((double *)&v50 + 1) = v11;
    LODWORD(v51) = v15;
    *((void *)&v51 + 1) = v12;
    double v23 = v19 - v18;
    if (__OFSUB__(v19, v18))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    id v24 = v19;
    int v13 = v18;
    swift_retain();
    int v25 = v9;
    GlyphContext.drawRun(_:range:foregroundColor:)((uint64_t)&v49, v18, v23, a2, a3, a4 & 1);
    swift_release();

    uint64_t v49 = v53;
    uint64_t v50 = v54;
    double v51 = v55;
    int v52 = v56;
    GlyphContext.deinit();
    uint64_t v14 = v24;
    CFIndex v8 = v47;
  }
  if ((a5 & 0x20) != 0) {
    return;
  }
  swift_retain();
  CFIndex v26 = v9;
  char v27 = GraphicsContext.userToDeviceScale.getter();
  uint64_t v28 = v26;
  swift_retain_n();
  long long v29 = (const __CTLine *)v28;
  long long v30 = (id)_CTLineGetRunAtIndex(v29, v8);
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v30);
  swift_release();

  if (GlyphCount < 0) {
    goto LABEL_19;
  }
  int v32 = v29;
  swift_retain();
  long long v33 = (id)_CTLineGetRunAtIndex(v32, v8);
  long long v34 = CTRunGetGlyphCount((CTRunRef)v33);
  swift_release();

  if (v34 < 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v14 == v34) {
    long long v35 = (v13 == 0) | 2;
  }
  else {
    long long v35 = v13 == 0;
  }
  if (__OFADD__(v8, 1)) {
    goto LABEL_21;
  }
  if (v8 + 1 < v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v13 != v14)
  {
    uint64_t v40 = v32;
    uint64_t v41 = (id)_CTLineGetRunAtIndex(v40, v8);
    if (!__OFSUB__(v14, v13))
    {
      int v42 = v41;
      v43.CFIndex location = v13;
      v43.CFIndex length = v14 - v13;
      specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v41, v43, (CGFloat *)&v49);
      swift_release();

      int v36 = v50;
      uint64_t v39 = v51;
      uint64_t v37 = v10 + *(double *)&v49;
      int v38 = v11 + *((double *)&v49 + 1);
      goto LABEL_16;
    }
LABEL_23:
    __break(1u);
    return;
  }
  swift_release();
  int v36 = 0uLL;
  uint64_t v37 = 0.0;
  int v38 = 0.0;
  uint64_t v39 = 0uLL;
LABEL_16:
  *(double *)&double v53 = v37;
  *((double *)&v53 + 1) = v38;
  double v54 = v36;
  int v55 = v39;
  LOBYTE(v56) = 0;
  Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)((uint64_t (*)(int, uint64_t, double, double, double, double, double, double, double, double))v32, v8, v8 + 1, v35, (uint64_t)&v53, (double *)&v48, *(uint64_t (**)())&v10, v11, v27);
  swift_release();

  GraphicsContext.draw(_:)(&v48, (double *)a6);
  swift_bridgeObjectRelease();
}

CGPoint *Text.Layout.RunSlice.positions.getter()
{
  float64x2_t v3 = v1[1];
  float64x2_t v18 = *v1;
  float64x2_t v19 = v3;
  float64x2_t v4 = v1[3];
  float64x2_t v20 = v1[2];
  float64x2_t v21 = v4;
  int64_t v5 = *(void *)&v4.f64[1] - *(void *)&v4.f64[0];
  if (*(uint64_t *)&v4.f64[1] < *(uint64_t *)&v4.f64[0])
  {
    __break(1u);
    goto LABEL_14;
  }
  if (__OFSUB__(*(void *)&v4.f64[1], *(void *)&v4.f64[0]))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v2);
    goto LABEL_5;
  }
  uint64_t v0 = (CGPoint *)MEMORY[0x263F8EE78];
  if (v5 < 1) {
    return v0;
  }
  uint64_t v2 = specialized Array.init(repeating:count:)(v5, 0.0, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_15;
  }
LABEL_5:
  float64x2_t v6 = *(CGPoint **)(v2 + 16);
  v17[0] = (CGPoint *)(v2 + 32);
  v17[1] = v6;
  closure #1 in Text.Layout.RunSlice.positions.getter(v17, (uint64_t)&v18);
  int64_t v7 = *(void *)(v2 + 16);
  if (v7)
  {
    float64x2_t v16 = v19;
    v17[0] = v0;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    float64x2_t v8 = v16;
    uint64_t v9 = 0;
    uint64_t v0 = v17[0];
    CGFloat x = v17[0][1].x;
    do
    {
      float64x2_t v11 = *(float64x2_t *)(v2 + 16 * v9 + 32);
      v17[0] = v0;
      unint64_t v12 = *(void *)&v0[1].y;
      if (*(void *)&x >= v12 >> 1)
      {
        float64x2_t v15 = v11;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, *(void *)&x + 1, 1);
        float64x2_t v11 = v15;
        float64x2_t v8 = v16;
        uint64_t v0 = v17[0];
      }
      *(void *)&v13.CGFloat x = *(_OWORD *)&vaddq_f64(v8, v11);
      v13.CGFloat y = vsubq_f64(v8, v11).f64[1];
      ++v9;
      *(void *)&v0[1].CGFloat x = *(void *)&x + 1;
      v0[(*(void *)&x)++ + 2] = v13;
    }
    while (v7 != v9);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t Text.customAttribute<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextAttributeModifier();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a6);
  uint64_t v15 = GradientBox.__allocating_init(_:)((uint64_t)v14);
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v17 = a5[2];
  unint64_t v16 = a5[3];
  if (v17 >= v16 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, a5);
  }
  a5[2] = v17 + 1;
  float64x2_t v18 = &a5[2 * v17];
  void v18[4] = v15;
  *((unsigned char *)v18 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -64;
  swift_release();
  return a2;
}

uint64_t Text.Layout.Run.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int64_t v5 = *(void **)v2;
  CFIndex v6 = *(void *)(v2 + 8);
  if (one-time initialization token for customAttributes != -1) {
    swift_once();
  }
  swift_retain();
  int64_t v7 = v5;
  float64x2_t v8 = (id)_CTLineGetRunAtIndex(v7, v6);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  double v10 = (void *)MEMORY[0x24C522820](v9);
  swift_bridgeObjectRelease();
  CFDictionaryRef v11 = _CTRunGetAttributeValueForKey((const __CTRun *)v8, v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  _sypSgWObTm_5((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
  swift_release();

  if (v14[3])
  {
    if (swift_dynamicCast())
    {
      v14[0] = *(void *)&v13[0];
      Text.CustomAttributes.subscript.getter(a1, a2);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v14);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

Class Text.Layout.Line.lastRunAttributes.getter()
{
  long long v1 = v0[1];
  long long v10 = *v0;
  v11[0] = v1;
  *(_OWORD *)((char *)v11 + 12) = *(long long *)((char *)v0 + 28);
  if (v1 == 1)
  {
    uint64_t v2 = (void *)v10;
    outlined retain of Text.Layout.Line((uint64_t)&v10);
    id v3 = objc_msgSend(v2, sel_attributedString);
    id v4 = objc_msgSend(v3, sel_attributesAtIndex_effectiveRange_, objc_msgSend(v2, sel_characterRange), 0);

    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type TextAttributeModifierBase and conformance TextAttributeModifierBase(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, 255, type metadata accessor for NSAttributedStringKey);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v5.super.CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    outlined release of Text.Layout.Line((uint64_t)&v10);
  }
  else
  {
    outlined retain of Text.Layout.Line((uint64_t)&v10);
    specialized BidirectionalCollection.last.getter((uint64_t)v9);
    outlined release of Text.Layout.Line((uint64_t)&v10);
    CFIndex v6 = v9[0];
    if (v9[0])
    {
      int64_t v7 = (id)_CTLineGetRunAtIndex(v9[0], (CFIndex)v9[1]);
      v5.super.CFDictionaryRef isa = CTRunGetAttributes((CTRunRef)v7);

      outlined consume of Text.Layout.Run?(v6);
    }
    else
    {
      return 0;
    }
  }
  return v5.super.isa;
}

uint64_t TextRenderer.sizeThatFits(proposal:text:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, __n128 a6, __n128 a7)
{
  return specialized TextRenderer.sizeThatFits(proposal:text:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7);
}

double TextRenderer.displayPadding.getter()
{
  return 0.0;
}

uint64_t TextProxy.sizeThatFits(_:)(uint64_t result, char a2, uint64_t a3, char a4, __n128 a5, __n128 a6)
{
  double v10 = *(double *)&result;
  uint64_t v11 = *v6;
  if (one-time initialization token for zero != -1) {
    *(double *)&double result = COERCE_DOUBLE(swift_once());
  }
  char v12 = byte_268EEF3D8;
  a5.n128_u64[0] = qword_268EEF3E0;
  char v13 = byte_268EEF3E8;
  if (a2)
  {
    if (!byte_268EEF3D8) {
      goto LABEL_15;
    }
  }
  else
  {
    a6.n128_u64[0] = static ProposedViewSize.zero;
    if (*(double *)&static ProposedViewSize.zero != v10) {
      char v12 = 1;
    }
    if (v12) {
      goto LABEL_15;
    }
  }
  if (a4)
  {
    a5.n128_u64[0] = 0;
    a6.n128_u64[0] = 0;
    if ((byte_268EEF3E8 & 1) == 0)
    {
LABEL_15:
      double v14 = v10;
      char v15 = a2 & 1;
      uint64_t v16 = a3;
      char v17 = a4 & 1;
      *(double *)&double result = COERCE_DOUBLE((*(uint64_t (**)(double *, __n128, __n128))(*(void *)v11 + 224))(&v14, a5, a6));
    }
  }
  else
  {
    if (*(double *)&qword_268EEF3E0 != *(double *)&a3) {
      char v13 = 1;
    }
    a5.n128_u64[0] = 0;
    a6.n128_u64[0] = 0;
    if (v13) {
      goto LABEL_15;
    }
  }
  return result;
}

void TextAttributeModifierBase.hash(into:)()
{
}

uint64_t static TextAttributeModifierBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a2) & 1;
}

uint64_t TextAttributeModifierBase.deinit()
{
  return v0;
}

Swift::Int TextAttributeModifierBase.hashValue.getter()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 112))(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextAttributeModifierBase()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TextAttributeModifierBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextAttributeModifierBase()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 112))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextAttributeModifierBase(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))(*a2) & 1;
}

uint64_t TextAttributeModifier.modify(style:environment:)(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + *(int *)(type metadata accessor for Text.Style(0) + 88));
  uint64_t v2 = swift_retain();
  MEMORY[0x24C522D60](v2);
  if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t one-time initialization function for customAttributes()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000018, 0x8000000246220780);
  static NSAttributedStringKey.customAttributes = result;
  return result;
}

void Text.CustomAttributes.init()(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t Text.CustomAttributes.add<A>(_:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  float64x2_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextAttributeModifier();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  GradientBox.__allocating_init(_:)((uint64_t)v8);
  MEMORY[0x24C522D60]();
  if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t Text.CustomAttributes.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((unint64_t)*v2 >> 62) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = 0;
      while (1)
      {
        MEMORY[0x24C523D60](v7, v5);
        uint64_t v8 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        type metadata accessor for TextAttributeModifier();
        uint64_t v9 = swift_dynamicCastClass();
        if (v9)
        {
          uint64_t v15 = v9;
          swift_bridgeObjectRelease();
          uint64_t v19 = *(void *)(a1 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a2, v15 + *(void *)(*(void *)v15 + 144), a1);
          swift_unknownObjectRelease();
          goto LABEL_16;
        }
        swift_unknownObjectRelease();
        ++v7;
        if (v8 == v6) {
          goto LABEL_13;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          break;
        }
        type metadata accessor for TextAttributeModifier();
        uint64_t v12 = swift_dynamicCastClass();
        if (v12)
        {
          uint64_t v16 = v12;
          swift_retain();
          swift_bridgeObjectRelease();
          uint64_t v19 = *(void *)(a1 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a2, v16 + *(void *)(*(void *)v16 + 144), a1);
          swift_release();
LABEL_16:
          uint64_t v13 = v19;
          uint64_t v14 = 0;
          goto LABEL_17;
        }
        ++v10;
        if (v11 == v6) {
          goto LABEL_13;
        }
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a1 - 8);
  uint64_t v14 = 1;
LABEL_17:
  char v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);

  return v17(a2, v14, 1, a1);
}

void Text.CustomAttributes.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    Swift::UInt v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v8);
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    Swift::UInt v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v4);
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = MEMORY[0x24C523D60](i, v3);
    }
    else
    {
      uint64_t v7 = *(void *)(v3 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 112))(a1);
    swift_release();
  }
LABEL_10:

  swift_bridgeObjectRelease();
}

unint64_t static Text.CustomAttributes.== infix(_:_:)(unint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

void Text.CustomAttributes.hashValue.getter()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (!(v1 >> 62))
  {
    Swift::UInt v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v2);
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    return;
  }
  swift_bridgeObjectRetain();
  Swift::UInt v6 = _CocoaArrayWrapper.endIndex.getter();
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_10;
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x24C523D60](i, v1);
      }
      else
      {
        uint64_t v5 = *(void *)(v1 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(unsigned char *))(*(void *)v5 + 112))(v7);
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.CustomAttributes()
{
  Hasher.init(_seed:)();
  Text.CustomAttributes.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.CustomAttributes(unint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t _TextRendererViewModifier.renderer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _TextRendererViewModifier.renderer.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_TextRendererViewModifier.renderer.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v7 = *a1;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  LODWORD(v26) = v7;
  type metadata accessor for _TextRendererViewModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _TextRendererViewModifier._makeViewInputs(modifier:inputs:), a3, &v20);
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v26 = *(void *)a2;
  int v27 = v8;
  uint64_t v28 = v9;
  long long v29 = *(_OWORD *)(a2 + 24);
  uint64_t v30 = v10;
  (*(void (**)(unsigned int *, uint64_t *, uint64_t))(*(void *)(a4 + 8) + 48))(&v20, &v26, a3);
  unsigned int v11 = v20;
  swift_beginAccess();
  v19[0] = _TextRendererViewModifier.MakeTextRenderer.init(renderer:environment:)(v11, *(unsigned int *)(v9 + 16));
  v19[1] = v12;
  uint64_t TextRenderer = type metadata accessor for _TextRendererViewModifier.MakeTextRenderer();
  uint64_t v22 = TextRenderer;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<TextRendererBoxBase>(0, &lazy cache variable for type metadata for Attribute<TextRendererBoxBase>, v14, (uint64_t (*)(uint64_t))type metadata accessor for TextRendererBoxBase, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v21, TextRenderer, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  swift_release();
  uint64_t v17 = AGCreateWeakAttribute();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, v17);
  return swift_release();
}

uint64_t closure #1 in static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for _TextRendererViewModifier();
  void v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

unint64_t _TextRendererViewModifier.MakeTextRenderer.init(renderer:environment:)(unsigned int a1, uint64_t a2)
{
  type metadata accessor for PropertyList.Tracker();
  uint64_t v4 = swift_allocObject();
  _sypSgMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  uint64_t v6 = MEMORY[0x263F8EE80];
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = v6;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v5 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v6;
  *(void *)(v5 + 48) = v7;
  *(unsigned char *)(v5 + 56) = 0;
  *(void *)(v4 + 16) = v5;
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t _TextRendererViewModifier.MakeTextRenderer.updateValue()(uint64_t a1)
{
  v28[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v27 = v10;
  uint64_t v11 = *(int *)(v10 + 48);
  uint64_t v12 = *(void *)(v1 + 8);
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t Value = AGGraphGetValue();
  char v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  v16(v9, Value, v3);
  v9[v11] = v15 & 1;
  uint64_t v18 = *(void *)AGGraphGetValue();
  if (v15)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    char v19 = v17;
    swift_retain();
    swift_retain();
    if ((v19 & 1) == 0
      || (uint64_t v20 = swift_retain(),
          char v21 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v20),
          swift_release(),
          (v21 & 1) == 0))
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
      swift_release();
      return swift_release();
    }
  }
  PropertyList.Tracker.reset()();
  v16(v6, (uint64_t)v9, v3);
  if (v18) {
    uint64_t v23 = *(void *)(v18 + 64);
  }
  else {
    uint64_t v23 = 0;
  }
  type metadata accessor for TextRendererBox();
  uint64_t v24 = *(void *)(v12 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v24 + 16));
  *(void *)(v24 + 24) = v23;
  os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 16));
  swift_release();
  swift_release();
  swift_release();
  v28[0] = v18;
  v28[1] = v12;
  v28[0] = (uint64_t)TextRendererBox.__allocating_init(_:in:)((uint64_t)v6, v28);
  type metadata accessor for TextRendererBoxBase();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v27);
}

char *TextRendererBox.__allocating_init(_:in:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (char *)swift_allocObject();
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(*(void *)v4 + 120) - 8) + 32))(&v4[*(void *)(*(void *)v4 + 136)], a1);
  *((void *)v4 + 2) = v6;
  *((void *)v4 + 3) = v5;
  return v4;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TextRendererViewModifier<A>.MakeTextRenderer()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _TextRendererViewModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void TextRendererBoxBase.draw(layout:in:)()
{
}

void TextRendererBoxBase.sizeThatFits(proposal:text:)()
{
}

void TextRendererBoxBase.displayPadding.getter()
{
}

uint64_t TextRendererBoxBase.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t TextRendererBoxBase.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t TextRendererBox.draw(layout:in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = a1[2];
  uint64_t v7 = *a1;
  char v8 = v4;
  uint64_t v9 = v5;
  return (*(uint64_t (**)(uint64_t *, uint64_t, void))(*(void *)(v3 + 128) + 16))(&v7, a2, *(void *)(v3 + 120));
}

uint64_t TextRendererBox.sizeThatFits(proposal:text:)()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 128) + 24))();
}

uint64_t TextRendererBox.displayPadding.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 128) + 32))(*(void *)(*(void *)v0 + 120));
}

uint64_t *TextRendererBox.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 120) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t TextRendererBox.__deallocating_deinit()
{
  TextRendererBox.deinit();

  return swift_deallocClassInstance();
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance TextRendererInput@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static TextRendererInput.defaultValue;
  *a1 = static TextRendererInput.defaultValue;
  return result;
}

uint64_t Text.Layout.isTruncated.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t Text.Layout.numberOfLines.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Text.Layout.endIndex.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t Text.Layout.CharacterIndex.value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Text.Layout.CharacterIndex.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Text.Layout.CharacterIndex.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int Text.Layout.CharacterIndex.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

void *protocol witness for Strideable.distance(to:) in conformance Text.Layout.CharacterIndex@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, *v2)) {
    __break(1u);
  }
  else {
    *a2 = *result - *v2;
  }
  return result;
}

void *protocol witness for Strideable.advanced(by:) in conformance Text.Layout.CharacterIndex@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, *result)) {
    __break(1u);
  }
  else {
    *a2 = *v2 + *result;
  }
  return result;
}

void *protocol witness for static Strideable._step(after:from:by:) in conformance Text.Layout.CharacterIndex(void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *double result = *a4 + *a6;
    return 0;
  }
  return result;
}

void *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Layout.CharacterIndex(void *result, void *a2)
{
  if (!__OFSUB__(*a2, *result)) {
    return (void *)(*a2 == *result);
  }
  __break(1u);
  return result;
}

double Text.Layout.TypographicBounds.origin.getter()
{
  return *(double *)v0;
}

void Text.Layout.TypographicBounds.origin.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*Text.Layout.TypographicBounds.origin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Text.Layout.TypographicBounds.width.getter()
{
  return *(double *)(v0 + 16);
}

void Text.Layout.TypographicBounds.width.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*Text.Layout.TypographicBounds.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Text.Layout.TypographicBounds.ascent.getter()
{
  return *(double *)(v0 + 24);
}

void Text.Layout.TypographicBounds.ascent.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*Text.Layout.TypographicBounds.ascent.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Text.Layout.TypographicBounds.descent.getter()
{
  return *(double *)(v0 + 32);
}

void Text.Layout.TypographicBounds.descent.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*Text.Layout.TypographicBounds.descent.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Text.Layout.TypographicBounds.leading.getter()
{
  return *(double *)(v0 + 40);
}

void Text.Layout.TypographicBounds.leading.setter(double a1)
{
  *(double *)(v1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a1;
}

uint64_t (*Text.Layout.TypographicBounds.leading.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static Text.Layout.TypographicBounds.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

double Text.Layout.Line.origin.getter()
{
  return *(double *)(v0 + 24);
}

void Text.Layout.Line.origin.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*Text.Layout.Line.origin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Layout.Line.drawingOptions.getter()
{
  return *(unsigned int *)(v0 + 40);
}

uint64_t Text.Layout.Line.drawingOptions.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = result;
  return result;
}

uint64_t (*Text.Layout.Line.drawingOptions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

const __CFArray *Text.Layout.Line.endIndex.getter()
{
  uint64_t v1 = *(void **)v0;
  if ((*(unsigned char *)(v0 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v1, *(void *)(v0 + 8), 0);
    swift_release();
    goto LABEL_5;
  }
  CFArrayRef result = (const __CFArray *)(id)_NSTextLineFragmentGetCTLine(*(void **)v0);
  uint64_t v1 = result;
  if (result)
  {
LABEL_5:
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v1);

    return RunCount;
  }
  return result;
}

const __CTLine *Text.Layout.Line.characterRanges(runIndices:)(CFIndex a1, CFIndex a2)
{
  uint64_t v5 = *(void **)v2;
  uint64_t v6 = *(void *)(v2 + 8);
  char v7 = *(unsigned char *)(v2 + 16);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  CFArrayRef result = (const __CTLine *)RangeSet.init()();
  if (a1 != a2)
  {
    if (a2 >= a1) {
      goto LABEL_6;
    }
    __break(1u);
    while (a2 != ++a1)
    {
LABEL_6:
      if (a1 >= a2)
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      if (v7)
      {
        outlined copy of Text.Layout.Line.Line(v5, v6, 1);
        CFArrayRef result = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
        if (!result) {
          goto LABEL_20;
        }
        uint64_t v9 = result;
        outlined consume of Text.Layout.Line.Line(v5, v6, 1);
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v5, v6, 0);
        outlined copy of Text.Layout.Line.Line(v5, v6, 0);

        swift_release();
        uint64_t v9 = (const __CTLine *)v5;
      }
      uint64_t v10 = (id)_CTLineGetRunAtIndex(v9, a1);
      CFRange StringRange = CTRunGetStringRange((CTRunRef)v10);

      CFArrayRef result = (const __CTLine *)swift_release();
      CFIndex v12 = StringRange.location + StringRange.length;
      if (__OFADD__(StringRange.location, StringRange.length)) {
        goto LABEL_17;
      }
      if (v12 < StringRange.location) {
        goto LABEL_18;
      }
      CFIndex location = StringRange.location;
      CFIndex v16 = StringRange.location + StringRange.length;
      if (__OFSUB__(v12, StringRange.location)) {
        goto LABEL_19;
      }
      if (v12 != StringRange.location)
      {
        _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
        uint64_t v13 = (uint64_t (*)(unsigned char *, void))RangeSet._ranges.modify();
        _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
        RangeSet.Ranges._insert(contentsOf:)();
        CFArrayRef result = (const __CTLine *)v13(v14, 0);
      }
    }
  }
  return result;
}

void Text.Layout.Line.paragraphLayoutDirection.getter(char *a1@<X8>)
{
  char v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  if (v5)
  {
    outlined copy of Text.Layout.Line.Line(*(void **)v1, *(void *)(v1 + 8), 1);
    id v6 = (id)_NSTextLineFragmentGetCTLine(v4);
    if (!v6)
    {
      outlined consume of Text.Layout.Line.Line(v4, v3, 1);
LABEL_7:
      char v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(*(void **)v1, *(void *)(v1 + 8), 0);
    outlined copy of Text.Layout.Line.Line(v4, v3, 0);
    swift_release();
    id v6 = v4;
  }
  char IsRightToLeft = CTLineIsRightToLeft();

  outlined consume of Text.Layout.Line.Line(v4, v3, v5);
  if ((IsRightToLeft & 1) == 0) {
    goto LABEL_7;
  }
  char v8 = 1;
LABEL_8:
  *a1 = v8;
}

void protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.Line(uint64_t *a1@<X0>, void *a2@<X8>)
{
  specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = v3;
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.Line(uint64_t *a1)
{
  uint64_t v2 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  id v4 = *(id *)v1;
  if ((*(unsigned char *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v4, *(void *)(v1 + 8), 0);
    swift_release();
    goto LABEL_6;
  }
  id v4 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v4)
  {
LABEL_6:
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v4);

    goto LABEL_7;
  }
  CFArrayRef RunCount = 0;
LABEL_7:
  if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)RunCount)
  {
    *a1 = v2;
    return;
  }
LABEL_11:
  __break(1u);
}

void protocol witness for BidirectionalCollection.distance(from:to:) in conformance Text.Layout.Line(uint64_t *a1, uint64_t *a2)
{
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.Line(const __CFArray **a1@<X8>)
{
  id v3 = *(id *)v1;
  if ((*(unsigned char *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v3, *(void *)(v1 + 8), 0);
    swift_release();
    goto LABEL_5;
  }
  id v3 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v3)
  {
LABEL_5:
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v3);

    goto LABEL_6;
  }
  CFArrayRef RunCount = 0;
LABEL_6:
  *a1 = RunCount;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout.Line(void *a1, uint64_t *a2))()
{
  id v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = Text.Layout.Line.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

void (*Text.Layout.Line.subscript.read(void *a1, uint64_t a2))(id **a1)
{
  char v5 = malloc(0x30uLL);
  *a1 = v5;
  id v6 = *(void (**)(id **))v2;
  long long v10 = *(_OWORD *)(v2 + 24);
  int v7 = *(_DWORD *)(v2 + 40);
  if ((*(unsigned char *)(v2 + 16) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v2 + 8);
    outlined copy of Text.Layout.Line.Line(v6, v9, 0);
    swift_release();
    outlined copy of Text.Layout.Line.Line(v6, v9, 0);

    goto LABEL_5;
  }
  CFArrayRef result = (void (*)(id **))(id)_NSTextLineFragmentGetCTLine(v6);
  if (result)
  {
    id v6 = result;
    uint64_t v9 = 0;
LABEL_5:
    *char v5 = v6;
    v5[1] = a2;
    *((_OWORD *)v5 + 1) = v10;
    *((_DWORD *)v5 + 8) = v7;
    v5[5] = v9;
    return Text.Layout.Line.subscript.read;
  }
  __break(1u);
  return result;
}

void Text.Layout.Line.subscript.read(id **a1)
{
  uint64_t v1 = *a1;

  swift_release();

  free(v1);
}

void protocol witness for Collection.subscript.getter in conformance Text.Layout.Line(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

void protocol witness for Collection.indices.getter in conformance Text.Layout.Line(void *a1@<X8>)
{
  id v3 = *(id *)v1;
  if (*(unsigned char *)(v1 + 16))
  {
    id v3 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
    if (!v3)
    {
      CFArrayRef RunCount = 0;
LABEL_6:
      *a1 = 0;
      a1[1] = RunCount;
      return;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v3, *(void *)(v1 + 8), 0);
    swift_release();
  }
  CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v3);

  if (((unint64_t)RunCount & 0x8000000000000000) == 0) {
    goto LABEL_6;
  }
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.Line()
{
  id v1 = *(id *)v0;
  if (*(unsigned char *)(v0 + 16))
  {
    id v1 = (id)_NSTextLineFragmentGetCTLine(*(void **)v0);
    if (!v1) {
      return 1;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v1, *(void *)(v0 + 8), 0);
    swift_release();
  }
  CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v1);

  return RunCount == 0;
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.Line(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1 + a2;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
    goto LABEL_11;
  }
  id v6 = *(id *)v3;
  if ((*(unsigned char *)(v3 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v6, *(void *)(v3 + 8), 0);
    swift_release();
    goto LABEL_6;
  }
  id v6 = (id)_NSTextLineFragmentGetCTLine(*(void **)v3);
  if (v6)
  {
LABEL_6:
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v6);

    goto LABEL_7;
  }
  CFArrayRef RunCount = 0;
LABEL_7:
  if ((v5 & 0x8000000000000000) == 0 && (uint64_t)RunCount >= v5)
  {
    *a3 = v5;
    return;
  }
LABEL_11:
  __break(1u);
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Line(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = v5;
  *(unsigned char *)(a4 + 8) = v6 & 1;
}

void protocol witness for Collection.index(after:) in conformance Text.Layout.Line(uint64_t *a1@<X0>, void *a2@<X8>)
{
  specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = v3;
}

void protocol witness for Collection.formIndex(after:) in conformance Text.Layout.Line(uint64_t *a1)
{
  uint64_t v3 = *a1;
  id v4 = *(id *)v1;
  if ((*(unsigned char *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v4, *(void *)(v1 + 8), 0);
    swift_release();
    goto LABEL_5;
  }
  id v4 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v4)
  {
LABEL_5:
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v4);

    goto LABEL_6;
  }
  CFArrayRef RunCount = 0;
LABEL_6:
  if (v3 < 0 || v3 >= (uint64_t)RunCount) {
    __break(1u);
  }
  else {
    *a1 = v3 + 1;
  }
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.Line@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  int v3 = *(_DWORD *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(unsigned char *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v3;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Line()
{
  specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  uint64_t v2 = v1;
  outlined consume of Text.Layout.Line.Line(*(void **)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  return v2;
}

double Text.Layout.Run.lineOrigin.getter()
{
  return *(double *)(v0 + 16);
}

void Text.Layout.Run.lineOrigin.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*Text.Layout.Run.lineOrigin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Layout.Run.drawingOptions.getter()
{
  uint64_t v1 = *(unsigned int *)(v0 + 32);
  if ((v1 & 0x10) != 0)
  {
    int v3 = *(void **)v0;
    CFIndex v2 = *(void *)(v0 + 8);
    id v4 = (void *)MEMORY[0x24C522820](0xD00000000000001DLL, 0x800000024621F120);
    swift_retain();
    uint64_t v5 = v3;
    char v6 = (id)_CTLineGetRunAtIndex(v5, v2);
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v8 = (void *)MEMORY[0x24C522820](v7);
    swift_bridgeObjectRelease();
    CFDictionaryRef v9 = _CTRunGetAttributeValueForKey((const __CTRun *)v6, v8);

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    _sypSgWObTm_5((uint64_t)v11, (uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
    swift_release();

    if (v13)
    {
      outlined init with take of Any(&v12, v14);
      outlined init with copy of Any((uint64_t)v14, (uint64_t)&v12);
      if ((swift_dynamicCast() & 1) != 0 && LOBYTE(v11[0]) == 1) {
        uint64_t v1 = v1 | 4;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v12);
    }
  }
  return v1;
}

CFIndex Text.Layout.Run.endIndex.getter()
{
  uint64_t v1 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v0, *(void *)(v0 + 8));
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v1);

  return GlyphCount;
}

__n128 Text.Layout.RunSlice.init(run:indices:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v4 = a1->n128_u64[1];
  unsigned __int32 v5 = a1[2].n128_u32[0];
  unint64_t v6 = a1[2].n128_u64[1];
  a4->n128_u64[0] = a1->n128_u64[0];
  a4->n128_u64[1] = v4;
  __n128 result = a1[1];
  a4[1] = result;
  a4[2].n128_u32[0] = v5;
  a4[2].n128_u64[1] = v6;
  a4[3].n128_u64[0] = a2;
  a4[3].n128_u64[1] = a3;
  return result;
}

void Text.Layout.Run.characterIndices.getter()
{
  CFIndex v2 = *(void **)v0;
  CFIndex v1 = *(void *)(v0 + 8);
  swift_retain();
  int v3 = v2;
  unint64_t v4 = (id)_CTLineGetRunAtIndex(v3, v1);
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v4);
  swift_release();

  if (GlyphCount < 0) {
    __break(1u);
  }
  else {
    Text.Layout.RunSlice.characterIndices.getter();
  }
}

void *Text.Layout.RunSlice.characterIndices.getter()
{
  CFIndex v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  if (__OFSUB__(v5, v4))
  {
    __break(1u);
    goto LABEL_15;
  }
  CFIndex v2 = *(const __CTLine **)v1;
  CFIndex v3 = *(void *)(v1 + 8);
  unint64_t v6 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, v3);
  StringIndicesPtr = CTRunGetStringIndicesPtr((CTRunRef)v6);

  if (!StringIndicesPtr)
  {
    uint64_t v0 = (void *)specialized Array.init(repeating:count:)(0, v5 - v4);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_12:
      char v15 = (id)_CTLineGetRunAtIndex(v2, v3);
      v16.CFIndex location = v4;
      v16.CFIndex length = v5 - v4;
      CTRunGetStringIndices((CTRunRef)v15, v16, v0 + 4);

      return v0;
    }
LABEL_15:
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew()(v0);
    goto LABEL_12;
  }
  __n128 result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v5 - v4) & ~((v5 - v4) >> 63), 0, MEMORY[0x263F8EE78]);
  uint64_t v0 = result;
  if (v5 == v4) {
    return v0;
  }
  if (v5 < v4)
  {
    __break(1u);
  }
  else
  {
    CFIndex v9 = v5 - v4;
    if (v5 > v4)
    {
      unint64_t v10 = result[2];
      uint64_t v11 = &StringIndicesPtr[v4];
      do
      {
        uint64_t v13 = *v11++;
        uint64_t v12 = v13;
        unint64_t v14 = v0[3];
        if (v10 >= v14 >> 1) {
          uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v10 + 1, 1, v0);
        }
        v0[2] = v10 + 1;
        v0[v10++ + 4] = v12;
        --v9;
      }
      while (v9);
      return v0;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.Run(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v2, *(void *)(v2 + 8));
    CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v5);

    if ((v4 & 0x8000000000000000) == 0 && v4 < GlyphCount)
    {
      *a2 = v4;
      return;
    }
  }
  __break(1u);
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.Run(uint64_t *a1)
{
  uint64_t v2 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(void *)(v1 + 8));
    CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v4);

    if ((v2 & 0x8000000000000000) == 0 && v2 < GlyphCount)
    {
      *a1 = v2;
      return;
    }
  }
  __break(1u);
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.Run(CFIndex *a1@<X8>)
{
  CFIndex v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(void *)(v1 + 8));
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v3);

  *a1 = GlyphCount;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout.Run(uint64_t (**a1)(), uint64_t *a2))()
{
  __n128 result = (uint64_t (*)())malloc(0x40uLL);
  *a1 = result;
  uint64_t v6 = *a2;
  if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = result;
    CFIndex v9 = *(void **)v2;
    uint64_t v8 = *(void *)(v2 + 8);
    int v10 = *(_DWORD *)(v2 + 32);
    uint64_t v11 = *(void *)(v2 + 40);
    *(void *)uint64_t v7 = *(void *)v2;
    *((void *)v7 + 1) = v8;
    *((_OWORD *)v7 + 1) = *(_OWORD *)(v2 + 16);
    *((_DWORD *)v7 + 8) = v10;
    *((void *)v7 + 5) = v11;
    *((void *)v7 + 6) = v6;
    *((void *)v7 + 7) = v6 + 1;
    swift_retain();
    id v12 = v9;
    return protocol witness for Collection.subscript.read in conformance Text.Layout.Run;
  }
  return result;
}

id protocol witness for Collection.subscript.getter in conformance Text.Layout.Run@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  id v7 = *(id *)v2;
  int v4 = *(_DWORD *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 40);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
  *(_DWORD *)(a2 + 32) = v4;
  *(void *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v5;
  *(_OWORD *)(a2 + 48) = *a1;
  swift_retain();

  return v7;
}

void protocol witness for Collection.indices.getter in conformance Text.Layout.Run(void *a1@<X8>)
{
  uint64_t v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(void *)(v1 + 8));
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v3);

  if (GlyphCount < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = GlyphCount;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.Run()
{
  uint64_t v1 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v0, *(void *)(v0 + 8));
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v1);

  return GlyphCount == 0;
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.Run(void *a1@<X0>, uint64_t a2@<X1>, CFIndex *a3@<X8>)
{
  CFIndex v5 = *a1 + a2;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v3, *(void *)(v3 + 8));
    CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v6);

    if ((v5 & 0x8000000000000000) == 0 && GlyphCount >= v5)
    {
      *a3 = v5;
      return;
    }
  }
  __break(1u);
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Run(CFIndex *a1@<X0>, uint64_t a2@<X1>, CFIndex *a3@<X2>, uint64_t a4@<X8>)
{
  specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = v5;
  *(unsigned char *)(a4 + 8) = v6 & 1;
}

void protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Layout.Run(CFIndex *a1, CFIndex *a2)
{
  CFIndex v3 = *a1;
  CFIndex v4 = *a2;
  uint64_t v5 = *(const __CTLine **)v2;
  CFIndex v6 = *(void *)(v2 + 8);
  id v7 = (id)_CTLineGetRunAtIndex(v5, v6);
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v7);

  if (v3 < 0 || GlyphCount < v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  CFIndex v9 = (id)_CTLineGetRunAtIndex(v5, v6);
  CFIndex v10 = CTRunGetGlyphCount((CTRunRef)v9);

  if (v4 < 0 || v10 < v4) {
    goto LABEL_7;
  }
}

void protocol witness for Collection.index(after:) in conformance Text.Layout.Run(CFIndex *a1@<X0>, void *a2@<X8>)
{
  CFIndex v4 = *a1;
  uint64_t v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v2, *(void *)(v2 + 8));
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v5);

  if (v4 < 0 || v4 >= GlyphCount) {
    __break(1u);
  }
  else {
    *a2 = v4 + 1;
  }
}

void protocol witness for Collection.formIndex(after:) in conformance Text.Layout.Run(CFIndex *a1)
{
  CFIndex v3 = *a1;
  CFIndex v4 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(void *)(v1 + 8));
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v4);

  if (v3 < 0 || v3 >= GlyphCount) {
    __break(1u);
  }
  else {
    *a1 = v3 + 1;
  }
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.Run@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1->n128_u64[1];
  unsigned __int32 v3 = v1[2].n128_u32[0];
  unint64_t v4 = v1[2].n128_u64[1];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u64[1] = v2;
  __n128 result = v1[1];
  a1[1] = result;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u64[1] = v4;
  a1[3].n128_u64[0] = 0;
  return result;
}

void protocol witness for Collection.count.getter in conformance Text.Layout.Run()
{
  unint64_t v2 = *(const __CTLine **)v0;
  CFIndex v1 = *(void *)(v0 + 8);
  unsigned __int32 v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v0, v1);
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v3);

  uint64_t v5 = (id)_CTLineGetRunAtIndex(v2, v1);
  CFIndex v6 = CTRunGetGlyphCount((CTRunRef)v5);

  if (v6 < 0)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    return;
  }
  id v7 = (id)_CTLineGetRunAtIndex(v2, v1);
  CFIndex v8 = CTRunGetGlyphCount((CTRunRef)v7);

  if (GlyphCount < 0 || v8 < GlyphCount) {
    goto LABEL_6;
  }
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Run()
{
  specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v0);
  uint64_t v2 = v1;

  swift_release();
  return v2;
}

id Text.Layout.RunSlice.run.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  id v6 = *(id *)v1;
  int v3 = *(_DWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_DWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v4;
  swift_retain();

  return v6;
}

uint64_t Text.Layout.RunSlice.run.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  int v6 = *((_DWORD *)a1 + 8);
  uint64_t v7 = a1[5];

  uint64_t result = swift_release();
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  *(_DWORD *)(v1 + 32) = v6;
  *(void *)(v1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v7;
  return result;
}

uint64_t (*Text.Layout.RunSlice.run.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Layout.RunSlice.indices.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t Text.Layout.RunSlice.indices.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 48) = result;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*Text.Layout.RunSlice.indices.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id Text.Layout.RunSlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(v3 + 48) > a1 || *(void *)(v3 + 56) < a2)
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    _print_unlocked<A, B>(_:_:)();
    v9._countAndFlagsBits = 3943982;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    _print_unlocked<A, B>(_:_:)();
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 40);
    int v6 = *(_DWORD *)(v3 + 32);
    uint64_t v7 = *(void *)(v3 + 8);
    id v11 = *(id *)v3;
    *(void *)a3 = *(void *)v3;
    *(void *)(a3 + 8) = v7;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v3 + 16);
    *(_DWORD *)(a3 + 32) = v6;
    *(void *)(a3 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v5;
    *(void *)(a3 + 48) = a1;
    *(void *)(a3 + 56) = a2;
    swift_retain();
    return v11;
  }
  return result;
}

void closure #1 in Text.Layout.RunSlice.glyphs.getter(CGGlyph **a1, uint64_t a2)
{
  uint64_t v4 = *(const __CTLine **)a2;
  CFIndex v5 = *(void *)(a2 + 8);
  int v6 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a2, v5);
  GlyphsPtr = CTRunGetGlyphsPtr((CTRunRef)v6);

  if (GlyphsPtr)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    if (v8 != v9)
    {
      if (v9 < v8)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      if (v8 >= v9)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      Swift::String v10 = *a1;
      uint64_t v11 = *(void *)(a2 + 48);
      while (!__OFSUB__(v11, v8))
      {
        v10[v11 - v8] = GlyphsPtr[v11];
        if (v9 == ++v11) {
          return;
        }
      }
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
  else
  {
    id v12 = (id)_CTLineGetRunAtIndex(v4, v5);
    v13.CFIndex location = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    if (__OFSUB__(v14, v13.location)) {
      goto LABEL_14;
    }
    if (!*a1)
    {
LABEL_17:
      __break(1u);
      return;
    }
    char v15 = v12;
    v13.CFIndex length = v14 - v13.location;
    CTRunGetGlyphs((CTRunRef)v12, v13, *a1);
  }
}

void closure #1 in Text.Layout.RunSlice.positions.getter(CGPoint **a1, uint64_t a2)
{
  uint64_t v4 = *(const __CTLine **)a2;
  CFIndex v5 = *(void *)(a2 + 8);
  int v6 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a2, v5);
  PositionsPtr = CTRunGetPositionsPtr((CTRunRef)v6);

  if (PositionsPtr)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    if (v8 != v9)
    {
      if (v9 < v8)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      if (v8 >= v9)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      Swift::String v10 = *a1;
      uint64_t v11 = *(void *)(a2 + 48);
      while (!__OFSUB__(v11, v8))
      {
        v10[v11 - v8] = PositionsPtr[v11];
        if (v9 == ++v11) {
          return;
        }
      }
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
  else
  {
    id v12 = (id)_CTLineGetRunAtIndex(v4, v5);
    v13.CFIndex location = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    if (__OFSUB__(v14, v13.location)) {
      goto LABEL_14;
    }
    if (!*a1)
    {
LABEL_17:
      __break(1u);
      return;
    }
    char v15 = v12;
    v13.CFIndex length = v14 - v13.location;
    CTRunGetPositions((CTRunRef)v12, v13, *a1);
  }
}

void *Text.Layout.RunSlice.paths.getter()
{
  long long v1 = v0[1];
  v27[0] = *v0;
  v27[1] = v1;
  long long v2 = v0[3];
  v27[2] = v0[2];
  long long v28 = v2;
  CFIndex v4 = *((void *)&v27[0] + 1);
  uint64_t v3 = *(const __CTLine **)&v27[0];
  outlined retain of Text.Layout.Run((void **)v27);
  CFIndex v5 = (id)_CTLineGetRunAtIndex(v3, v4);
  id v6 = (id)CTRunGetFont();

  outlined release of Text.Layout.Run((id *)v27);
  uint64_t v7 = *((void *)&v28 + 1) - v28;
  if (*((uint64_t *)&v28 + 1) < (uint64_t)v28)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (__OFSUB__(*((void *)&v28 + 1), (void)v28))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v7 >= 1)
  {
    outlined retain of Text.Layout.Run((void **)v27);
    uint64_t v7 = specialized Array.init(repeating:count:)(0, v7);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_5:
      uint64_t v8 = *(CGGlyph **)(v7 + 16);
      v26[0] = (CGGlyph *)(v7 + 32);
      v26[1] = v8;
      closure #1 in Text.Layout.RunSlice.glyphs.getter(v26, (uint64_t)v27);
      outlined release of Text.Layout.Run((id *)v27);
      goto LABEL_7;
    }
LABEL_28:
    uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    goto LABEL_5;
  }
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_7:
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    Swift::String v10 = (CGGlyph *)(v7 + 32);
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    do
    {
      while (1)
      {
        CGGlyph v13 = *v10++;
        uint64_t v14 = (const __CTFont *)v6;
        CGPathRef PathForGlyph = CTFontCreatePathForGlyph(v14, v13, 0);
        if (!PathForGlyph) {
          break;
        }
        CGPathRef v16 = PathForGlyph;
        char v17 = PathForGlyph;
        if (CGPathIsEmpty(v17))
        {

          uint64_t v18 = 0;
          char v19 = 6;
        }
        else
        {
          type metadata accessor for Path.PathBox();
          uint64_t v18 = swift_allocObject();
          *(_OWORD *)(v18 + 24) = 0u;
          *(_OWORD *)(v18 + 104) = 0u;
          *(_OWORD *)(v18 + 88) = 0u;
          *(_OWORD *)(v18 + 72) = 0u;
          *(_OWORD *)(v18 + 56) = 0u;
          *(_OWORD *)(v18 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
          *(unsigned char *)(v18 + 16) = 0;
          char v19 = 5;
          *(void *)(v18 + 24) = v16;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        }
        unint64_t v24 = v11[2];
        unint64_t v23 = v11[3];
        if (v24 >= v23 >> 1) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v11);
        }
        _OWORD v11[2] = v24 + 1;
        id v12 = &v11[5 * v24];
        v12[4] = v18;
        v12[5] = 0;
        void v12[6] = 0;
        v12[7] = 0;
        *((unsigned char *)v12 + 64) = v19;

        if (!--v9) {
          goto LABEL_25;
        }
      }

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      unint64_t v21 = v11[2];
      unint64_t v20 = v11[3];
      if (v21 >= v20 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v11);
      }
      _OWORD v11[2] = v21 + 1;
      uint64_t v22 = &v11[5 * v21];
      *((_OWORD *)v22 + 2) = 0u;
      *((_OWORD *)v22 + 3) = 0u;
      *((unsigned char *)v22 + 64) = -1;
      --v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  }
LABEL_25:

  swift_bridgeObjectRelease();
  return v11;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.RunSlice@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 >= *(void *)(v2 + 48) && v3 < *(void *)(v2 + 56))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.RunSlice(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 >= *(void *)(v1 + 48) && v2 < *(void *)(v1 + 56))
  {
    *id result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance Text.Layout.RunSlice(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 48);
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.RunSlice(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 56);
}

void (*protocol witness for Collection.subscript.read in conformance Text.Layout.RunSlice(void *a1, void (**a2)(id **a1)))(id **a1)
{
  CFIndex v4 = malloc(0x40uLL);
  *a1 = v4;
  id result = *a2;
  if (*a2 == (void (*)(id **))0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
  }
  else
  {
    Text.Layout.RunSlice.subscript.getter((uint64_t)result, (uint64_t)result + 1, (uint64_t)v4);
    return Text.Layout.Line.subscript.read;
  }
  return result;
}

id protocol witness for Collection.subscript.getter in conformance Text.Layout.RunSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return Text.Layout.RunSlice.subscript.getter(*a1, a1[1], a2);
}

__n128 protocol witness for Collection.indices.getter in conformance Text.Layout.RunSlice@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[3];
  *a1 = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.RunSlice()
{
  return *(void *)(v0 + 48) == *(void *)(v0 + 56);
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.RunSlice@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 >= *(void *)(v3 + 48) && *(void *)(v3 + 56) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.RunSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Layout.RunSlice(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 56);
  if (v6 < *a2 || v4 < v5 || v3 < v5 || v6 < v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = (uint64_t *)(v4 - v3);
  if (__OFSUB__(v4, v3)) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance Text.Layout.RunSlice@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *(void *)(v2 + 56);
  if (*result >= *(void *)(v2 + 48))
  {
    BOOL v6 = __OFSUB__(v3, v4);
    BOOL v5 = v3 - v4 < 0;
  }
  else
  {
    BOOL v6 = 0;
    BOOL v5 = 0;
  }
  if (v5 != v6) {
    *a2 = v3 + 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance Text.Layout.RunSlice(uint64_t *result)
{
  uint64_t v2 = *result;
  uint64_t v3 = *(void *)(v1 + 56);
  if (*result >= *(void *)(v1 + 48))
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 != v5) {
    *uint64_t result = v2 + 1;
  }
  else {
    __break(1u);
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.RunSlice@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_DWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v4;
  __n128 result = *(__n128 *)(v1 + 48);
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance Text.Layout.RunSlice()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t result = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v2, v1)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.RunSlice()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v0);

  swift_release();
  return v1;
}

BOOL static Text.Layout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2);
  BOOL v7 = ((v2 ^ v4) & 1) == 0 && v3 == v5;
  return (v6 & 1) != 0 && v7;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Layout(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2);
  BOOL v7 = ((v2 ^ v4) & 1) == 0 && v3 == v5;
  return (v6 & 1) != 0 && v7;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout(void (***a1)(void ***a1), unint64_t *a2))()
{
  unsigned __int8 v4 = (void (**)(void ***))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = Text.Effect.RenderSegmentation.StaticLines.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Layout@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], uint64_t result = *(uint64_t **)v2, *(void *)(*(void *)v2 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    char v5 = *(unsigned char *)(v2 + 8);
    uint64_t v6 = *(void *)(v2 + 16);
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = result;
    *(unsigned char *)(a2 + 24) = v5;
    *(void *)(a2 + 32) = v6;
    *(void *)a2 = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance Text.Layout(void *result)
{
  if (*result >= *(void *)(*(void *)v1 + 16)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Layout(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = 0;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void AnyTextLayoutRenderer.draw(attachment:rect:attributes:range:in:)()
{
}

void AnyTextLayoutRenderer.lineFragment(for:)()
{
}

void TextLayoutFragmentRenderer.draw(attachment:rect:attributes:range:in:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v18 = *a5;
  CGFloat c = (CGContext *)(id)RBDrawingStateBeginCGContext();
  CGBlendMode v19 = *(_DWORD *)(v18 + 52);
  if (v19) {
    CGContextSetBlendMode(c, v19);
  }
  v23.origin.CGFloat x = a6;
  v23.origin.CGFloat y = a7;
  v23.size.double width = a8;
  v23.size.double height = a9;
  CGFloat Height = CGRectGetHeight(v23);
  _NSTextAttachmentDraw(a1, a2, a3, a4, *(void **)(v9 + 16), (uint64_t)c, a6, Height + a7, a8, a9);
  RBDrawingStateEndCGContext();
}

uint64_t TextLayoutFragmentRenderer.lineFragment(for:)(uint64_t a1, uint64_t a2)
{
  char v5 = *(void **)(v2 + 16);
  id v6 = objc_msgSend(v5, sel_rangeInElement);
  BOOL v7 = NSTextRange.textRange.getter();
  uint64_t v9 = v8;
  char v11 = v10;

  if ((v11 & 1) == 0)
  {
    BOOL v12 = __OFADD__(v7, a1);
    CGGlyph v13 = &v7[a1];
    if (v12)
    {
      __break(1u);
    }
    else
    {
      BOOL v12 = __OFADD__(v9, a2);
      uint64_t v14 = v9 + a2;
      if (!v12)
      {
        id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81630]), sel_initWithRange_, v13, v14);
        id v16 = objc_msgSend(v15, sel_location);
        id v17 = objc_msgSend(v5, sel_textLineFragmentForTextLocation_isUpstreamAffinity_, v16, 0);

        return (uint64_t)v17;
      }
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void TextLayoutFragmentRenderer.__ivar_destroyer()
{
}

uint64_t TextLayoutFragmentRenderer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Text.LayoutKey.AnchoredLayout.origin.getter()
{
  return swift_retain();
}

uint64_t Text.LayoutKey.AnchoredLayout.origin.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Text.LayoutKey.AnchoredLayout.origin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.LayoutKey.AnchoredLayout.layout.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t Text.LayoutKey.AnchoredLayout.layout.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  return result;
}

uint64_t (*Text.LayoutKey.AnchoredLayout.layout.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static Text.LayoutKey.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t static Text.LayoutKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  return specialized Array.append<A>(contentsOf:)(v2);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance Text.LayoutKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static Text.LayoutKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance Text.LayoutKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t Text.Layout.Decorations.Segment.startIndex.getter()
{
  return 0;
}

uint64_t Text.Layout.Decorations.Segment.endIndex.getter()
{
  return *(void *)(*(void *)(v0 + 48) + 16);
}

unint64_t Text.Layout.Decorations.Segment.subscript.getter@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 48);
    if (*(void *)(v3 + 16) > result)
    {
      uint64_t v4 = v3 + 32 * result;
      long long v5 = *(_OWORD *)(v4 + 48);
      *a2 = *(_OWORD *)(v4 + 32);
      a2[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.Decorations.Segment@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)(v2 + 48) + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.Decorations.Segment(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(void *)(*(void *)(v1 + 48) + 16))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.Decorations.Segment(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 48) + 16);
}

_OWORD *protocol witness for Collection.subscript.read in conformance Text.Layout.Decorations.Segment(_OWORD *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (v3 < *(void *)(v4 + 16))
    {
      uint64_t v5 = v4 + 32 * v3;
      long long v6 = *(_OWORD *)(v5 + 48);
      *uint64_t result = *(_OWORD *)(v5 + 32);
      result[1] = v6;
      return _ViewInputs.base.modify;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Layout.Decorations.Segment@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], uint64_t v5 = *(void *)(v2 + 48), *(void *)(v5 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 16);
    uint64_t v7 = *(void *)(v2 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)v2;
    *(void *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(v2 + 24);
    *(void *)(a2 + 56) = v7;
    *(void *)(a2 + 64) = v5;
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    swift_bridgeObjectRetain();
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Layout.Decorations.Segment(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 48) + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.Decorations.Segment()
{
  return *(void *)(*(void *)(v0 + 48) + 16) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.Decorations.Segment@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)(v3 + 48) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Decorations.Segment@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Layout.Decorations.Segment(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)(v2 + 48) + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

void *protocol witness for Collection.index(after:) in conformance Text.Layout.Decorations.Segment@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >= *(void *)(*(void *)(v2 + 48) + 16)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance Text.Layout.Decorations.Segment(void *result)
{
  if (*result >= *(void *)(*(void *)(v1 + 48) + 16)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.Decorations.Segment@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = result;
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Text.Layout.Decorations.Segment()
{
  return *(void *)(*(void *)(v0 + 48) + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Decorations.Segment()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)@<X0>(uint64_t (*a1)(int a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, double *a6@<X8>, uint64_t (*a7)()@<D0>, double a8@<D1>, double a9@<D2>)
{
  uint64_t v48 = 0;
  double v49 = MEMORY[0x263F8EE78];
  memset(v47, 0, sizeof(v47));
  v46[0] = 0;
  v46[1] = 0;
  _sypSgWObTm_5(a5, (uint64_t)v50, &lazy cache variable for type metadata for Text.Layout.TypographicBounds?, (uint64_t)&type metadata for Text.Layout.TypographicBounds);
  char v19 = v51;
  if ((v51 & 1) == 0)
  {
    double v21 = v50[0] + v50[2];
    double v20 = v50[0];
    uint64_t v39 = a6;
    if (!a1) {
      goto LABEL_11;
    }
LABEL_3:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v47;
    *(void *)(v22 + 24) = &v49;
    *(void *)(v22 + 32) = v46;
    *(void *)(v22 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a2;
    *(void *)(v22 + 48) = a3;
    *(double *)(v22 + 56) = v20;
    *(unsigned char *)(v22 + 64) = v19;
    *(double *)(v22 + 72) = v21;
    *(unsigned char *)(v22 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v19;
    *(unsigned char *)(v22 + 81) = a4;
    *(double *)&uint64_t v23 = COERCE_DOUBLE(swift_allocObject());
    *(void *)(v23 + 16) = partial apply for closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:);
    *(void *)(v23 + 24) = v22;
    unsigned __int8 v44 = partial apply for thunk for @callee_guaranteed (@unowned CTLineDecorationElementType, @unowned OpaquePointer) -> ();
    double v45 = *(double *)&v23;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v41 = 1107296256;
    int v42 = thunk for @escaping @callee_guaranteed (@unowned CTLineDecorationElementType, @unowned OpaquePointer) -> ();
    CFIndex v43 = &block_descriptor_25;
    unint64_t v24 = _Block_copy(&aBlock);
    double v25 = v45;
    swift_retain();
    uint64_t v26 = a1;
    swift_release();
    uint64_t aBlock = 0x3FF0000000000000;
    uint64_t v41 = 0;
    int v42 = 0;
    CFIndex v43 = (void *)0xBFF0000000000000;
    unsigned __int8 v44 = a7;
    double v45 = a8;
    CTLineDecorationApplyWithBlock();
    _Block_release(v24);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = *((uint64_t *)&v47[2] + 1);
      if (!*((void *)&v47[2] + 1))
      {
LABEL_9:

        a1 = partial apply for closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:);
        goto LABEL_11;
      }
      long long v38 = *(_OWORD *)((char *)&v47[1] + 8);
      uint64_t isEscapingClosureAtFileLocation = v48;
      double v25 = v49;
      a9 = *(double *)&v47[1];
      LODWORD(a6) = HIDWORD(v47[0]);
      int v37 = DWORD2(v47[0]);
      int v9 = v47[0];
      int v10 = DWORD1(v47[0]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      double v49 = v25;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_6:
        unint64_t v30 = *(void *)(*(void *)&v25 + 16);
        unint64_t v29 = *(void *)(*(void *)&v25 + 24);
        if (v30 >= v29 >> 1)
        {
          double v25 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, *(void **)&v25));
          double v49 = v25;
        }
        *(void *)(*(void *)&v25 + 16) = v30 + 1;
        uint64_t v31 = (void *)(*(void *)&v25 + 56 * v30);
        *((_DWORD *)v31 + 8) = v9;
        *((_DWORD *)v31 + 9) = v10;
        *((_DWORD *)v31 + 1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v37;
        *((_DWORD *)v31 + 11) = a6;
        *((double *)v31 + 6) = a9;
        *(_OWORD *)(v31 + 7) = v38;
        *((double *)v31 + 9) = *(double *)&v23;
        v31[10] = isEscapingClosureAtFileLocation;
        goto LABEL_9;
      }
    }
    double v25 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v25 + 16) + 1, 1, *(void **)&v25));
    double v49 = v25;
    goto LABEL_6;
  }
  double v20 = 0.0;
  double v21 = 0.0;
  uint64_t v39 = a6;
  if (a1) {
    goto LABEL_3;
  }
LABEL_11:
  double v32 = v49;
  long long v33 = v47[0];
  long long v34 = v47[1];
  long long v35 = v47[2];
  swift_bridgeObjectRetain();
  outlined consume of Text.Layout.Decorations.Segment?(v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1));
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)a1);
  *uint64_t v39 = v32;
  return result;
}

uint64_t closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)(int a1, uint64_t a2, int *a3, void **a4, uint64_t *a5, void *a6, void *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, double a18, char a19, char a20)
{
  id v16 = a7;
  if (a1 != 1)
  {
    if (a1)
    {
      uint64_t v37 = *((void *)a3 + 3);
      uint64_t v38 = *((void *)a3 + 4);
      uint64_t v39 = *((void *)a3 + 5);
      if (v39)
      {
        uint64_t v40 = *((void *)a3 + 6);
        uint64_t v41 = *((void *)a3 + 2);
        int v42 = a3[1];
        int v91 = a3[2];
        int v89 = a3[3];
        int v87 = *a3;
        CFIndex v43 = *a4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v43;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          CFIndex v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
          *a4 = v43;
        }
        unint64_t v46 = v43[2];
        unint64_t v45 = v43[3];
        if (v46 >= v45 >> 1)
        {
          CFIndex v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v43);
          *a4 = v43;
        }
        v43[2] = v46 + 1;
        uint64_t v47 = &v43[7 * v46];
        *((_DWORD *)v47 + 8) = v87;
        *((_DWORD *)v47 + 9) = v42;
        *((_DWORD *)v47 + 1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v91;
        *((_DWORD *)v47 + 11) = v89;
        v47[6] = v41;
        v47[7] = v37;
        v47[8] = v38;
        v47[9] = v39;
        v47[10] = v40;
        uint64_t v37 = *((void *)a3 + 3);
        uint64_t v38 = *((void *)a3 + 4);
        uint64_t v48 = *((void *)a3 + 5);
      }
      else
      {
        uint64_t v48 = 0;
      }
      uint64_t v72 = *(void *)a3;
      uint64_t v67 = *((void *)a3 + 1);
      uint64_t v69 = *((void *)a3 + 2);
      *((_OWORD *)a3 + 1) = 0u;
      *((_OWORD *)a3 + 2) = 0u;
      *(_OWORD *)a3 = 0u;
      *((void *)a3 + 6) = 0;
      uint64_t v70 = v37;
      uint64_t v71 = v38;
LABEL_61:
      return outlined consume of Text.Layout.Decorations.Segment?(v72, v67, v69, v70, v71, v48);
    }
    uint64_t v21 = *((void *)a3 + 3);
    uint64_t v22 = *((void *)a3 + 4);
    uint64_t v23 = *((void *)a3 + 5);
    if (!v23)
    {
      uint64_t v29 = 0;
      goto LABEL_44;
    }
    unsigned __int8 v88 = a7;
    uint64_t v24 = *((void *)a3 + 6);
    uint64_t v12 = *((void *)a3 + 2);
    int v84 = a3[3];
    int v85 = a3[2];
    int v82 = a3[1];
    int v83 = *a3;
    id v16 = *a4;
    swift_bridgeObjectRetain();
    uint64_t v86 = v24;
    swift_bridgeObjectRetain();
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v16;
    if ((v25 & 1) == 0) {
      goto LABEL_71;
    }
    while (1)
    {
      unint64_t v27 = v16[2];
      unint64_t v26 = v16[3];
      if (v27 >= v26 >> 1)
      {
        id v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v16);
        *a4 = v16;
      }
      unsigned char v16[2] = v27 + 1;
      long long v28 = &v16[7 * v27];
      *((_DWORD *)v28 + 8) = v83;
      *((_DWORD *)v28 + 9) = v82;
      *((_DWORD *)v28 + 1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v85;
      *((_DWORD *)v28 + 11) = v84;
      v28[6] = v12;
      v28[7] = v21;
      v28[8] = v22;
      id v16 = v88;
      v28[9] = v23;
      v28[10] = v86;
      uint64_t v21 = *((void *)a3 + 3);
      uint64_t v22 = *((void *)a3 + 4);
      uint64_t v29 = *((void *)a3 + 5);
LABEL_44:
      uint64_t v49 = *(void *)a3;
      uint64_t v50 = *((void *)a3 + 1);
      uint64_t v51 = *((void *)a3 + 2);
      *((_OWORD *)a3 + 1) = 0u;
      *((_OWORD *)a3 + 2) = 0u;
      *(_OWORD *)a3 = 0u;
      *((void *)a3 + 6) = 0;
      outlined consume of Text.Layout.Decorations.Segment?(v49, v50, v51, v21, v22, v29);
      uint64_t result = CTLineDecorationGetSegment();
      uint64_t v52 = *(void *)(result + 56);
      uint64_t v53 = *(void *)(result + 64);
      BOOL v54 = __OFADD__(v52, v53);
      uint64_t v55 = v52 + v53;
      if (v54)
      {
        __break(1u);
      }
      else if (v55 >= v52)
      {
        *a5 = v52;
        a5[1] = v55;
        if (v55 <= (uint64_t)a6 || v52 >= (uint64_t)v16 || a6 == v16 || v52 == v55) {
          return result;
        }
        uint64_t v56 = result;
        double v57 = (id)CTLineDecorationGetSegmentColor();
        long long v33 = v57;
        if (v57)
        {
          CFTypeID v58 = CFGetTypeID(v57);
          if (v58 == CFNullGetTypeID())
          {
            swift_unknownObjectRelease();
            goto LABEL_53;
          }
          if (v58 == CGColorGetTypeID())
          {
            type metadata accessor for CGColorRef(0);
            swift_unknownObjectRetain();
            uint64_t v73 = (void *)swift_dynamicCastUnknownClassUnconditional();
            unint64_t v74 = specialized Color.Resolved.init(failableCGColor:)(v73);
            uint64_t v76 = v75;
            char v78 = v77;
            swift_unknownObjectRelease();
            long long v33 = 0;
            unint64_t v59 = 0;
            unsigned int v60 = 0;
            unint64_t v61 = 0;
            if ((v78 & 1) == 0)
            {
              unint64_t v59 = v74 & 0xFFFFFFFF00000000;
              unint64_t v61 = v76 & 0xFFFFFFFF00000000;
              long long v33 = (void *)v74;
              unsigned int v60 = v76;
            }
LABEL_55:
            uint64_t v63 = *(void *)(v56 + 56);
            uint64_t v62 = *(void *)(v56 + 64);
            uint64_t v64 = v63 + v62;
            if (__OFADD__(v63, v62))
            {
              __break(1u);
            }
            else if (v64 >= v63)
            {
              uint64_t v65 = *(void *)(v56 + 24);
              uint64_t v66 = specialized _copyCollectionToContiguousArray<A>(_:)(*(char **)(v56 + 72), *(void *)(v56 + 80));
              uint64_t v68 = *(void *)a3;
              uint64_t v67 = *((void *)a3 + 1);
              uint64_t v69 = *((void *)a3 + 2);
              uint64_t v70 = *((void *)a3 + 3);
              uint64_t v71 = *((void *)a3 + 4);
              uint64_t v48 = *((void *)a3 + 5);
              *(void *)a3 = v59 | v33;
              *((void *)a3 + 1) = v61 | v60;
              *((void *)a3 + 2) = v65;
              *((void *)a3 + 3) = v63;
              *((void *)a3 + 4) = v64;
              *((void *)a3 + 5) = v66;
              *((void *)a3 + 6) = MEMORY[0x263F8EE78];
              uint64_t v72 = v68;
              goto LABEL_61;
            }
            __break(1u);
LABEL_74:
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
            long long v33 = (void *)result;
            *((void *)a3 + 6) = result;
LABEL_34:
            unint64_t v35 = v33[2];
            unint64_t v34 = v33[3];
            if (v35 >= v34 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v33);
              long long v33 = (void *)result;
            }
            v33[2] = v35 + 1;
            int v36 = (double *)&v33[4 * v35];
            v36[4] = v15;
            *((void *)v36 + 5) = v14;
            v36[6] = v13;
            *((void *)v36 + 7) = v12;
            *((void *)a3 + 6) = v33;
            return result;
          }
          unint64_t v79 = specialized Color.Resolved.init(platformColor:)(v33);
          if ((v81 & 1) == 0)
          {
            long long v33 = (void *)v79;
            unsigned int v60 = v80;
            unint64_t v59 = v79 & 0xFFFFFFFF00000000;
            unint64_t v61 = v80 & 0xFFFFFFFF00000000;
            goto LABEL_55;
          }
LABEL_53:
          long long v33 = 0;
        }
        unint64_t v59 = 0;
        unsigned int v60 = 0;
        unint64_t v61 = 0x3F80000000000000;
        goto LABEL_55;
      }
      __break(1u);
LABEL_71:
      id v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *a4 = v16;
    }
  }
  uint64_t result = CTLineDecorationGetFragment();
  if (*(double *)(result + 8) == *(double *)(result + 24))
  {
    double v32 = *(double *)(result + 16);
    uint64_t v12 = v32 >= *(double *)result ? *(void *)(result + 24) : *(void *)(result + 8);
    double v13 = v32 >= *(double *)result ? *(double *)(result + 16) : *(double *)result;
    uint64_t v14 = v32 >= *(double *)result ? *(void *)(result + 8) : *(void *)(result + 24);
    double v15 = v32 >= *(double *)result ? *(double *)result : *(double *)(result + 16);
    if (a17 & 1) != 0 || (a19) {
      goto LABEL_77;
    }
    if (((a20 & 1) == 0 || (void *)*a5 != a6) && v15 < *(double *)&a8) {
      double v15 = *(double *)&a8;
    }
    if (((a20 & 2) == 0 || (void *)a5[1] != v16) && v13 >= a18) {
      double v13 = a18;
    }
    if (v15 < v13)
    {
LABEL_77:
      if (*((void *)a3 + 5))
      {
        long long v33 = (void *)*((void *)a3 + 6);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *((void *)a3 + 6) = v33;
        if ((result & 1) == 0) {
          goto LABEL_74;
        }
        goto LABEL_34;
      }
    }
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned CTLineDecorationElementType, @unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t Text.Layout.Decorations.startIndex.getter()
{
  return 0;
}

uint64_t Text.Layout.Decorations.endIndex.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

unint64_t Text.Layout.Decorations.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v3 = *(void *)v2 + 56 * result;
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t v6 = *(void *)(v3 + 80);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 32);
  *(void *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 56);
  *(void *)(a2 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v5;
  *(void *)(a2 + 48) = v6;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout.Decorations(void (***a1)(void **a1), unint64_t *a2))()
{
  uint64_t v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = Text.Layout.Decorations.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

void (*Text.Layout.Decorations.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v2 + 56 * a2;
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 72);
    uint64_t v10 = *(void *)(v7 + 80);
    long long v11 = *(_OWORD *)(v7 + 56);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)(v7 + 32);
    *((void *)v6 + 2) = v8;
    *(_OWORD *)((char *)v6 + 24) = v11;
    *((void *)v6 + 5) = v9;
    *((void *)v6 + 6) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return Text.Layout.Decorations.subscript.read;
  }
  __break(1u);
  return result;
}

void Text.Layout.Decorations.subscript.read(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Layout.Decorations@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], uint64_t result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    a2[1] = v4;
    a2[2] = result;
    *a2 = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Decorations@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Decorations()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Layout.Cluster(void *result, void *a2)
{
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else
  {
    if (*a2 != *result) {
      return 0;
    }
    uint64_t v2 = result[1];
    uint64_t v3 = a2[1];
    if (!__OFSUB__(v3, v2))
    {
      if (v3 == v2) {
        return (void *)specialized static Array<A>.== infix(_:_:)(result[2], a2[2]);
      }
      return 0;
    }
  }
  __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.Cluster@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)(v2 + 16) + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.Cluster(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(void *)(*(void *)(v1 + 16) + 16))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.Cluster(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 16) + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout.Cluster(uint64_t (***a1)(), unint64_t *a2))()
{
  uint64_t v5 = (uint64_t (**)())malloc(0x28uLL);
  *a1 = v5;
  v5[4] = Text.Layout.Cluster.subscript.read(v5, *a2, *v2, v2[1], v2[2]);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

uint64_t (*Text.Layout.Cluster.subscript.read(uint64_t (**a1)(), unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t result = (uint64_t (*)())malloc(0x40uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a5 + 16) > a2)
  {
    uint64_t v9 = a5 + (a2 << 6);
    long long v11 = *(void **)(v9 + 32);
    uint64_t v10 = *(void *)(v9 + 40);
    int v12 = *(_DWORD *)(v9 + 64);
    uint64_t v13 = *(void *)(v9 + 88);
    *(void *)uint64_t result = v11;
    *((void *)result + 1) = v10;
    *((_OWORD *)result + 1) = *(_OWORD *)(v9 + 48);
    *((_DWORD *)result + 8) = v12;
    *(_OWORD *)((char *)result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(v9 + 72);
    *((void *)result + 7) = v13;
    swift_retain();
    id v14 = v11;
    return protocol witness for Collection.subscript.read in conformance Text.Layout.Run;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Layout.Cluster@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], uint64_t result = *(uint64_t **)(v2 + 16), result[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)v2;
    *(void *)(a2 + 32) = result;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Layout.Cluster(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.Cluster()
{
  return *(void *)(*(void *)(v0 + 16) + 16) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.Cluster@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)(v3 + 16) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Cluster@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1], v4[2]);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Layout.Cluster(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)(v2 + 16) + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

void *protocol witness for Collection.index(after:) in conformance Text.Layout.Cluster@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >= *(void *)(*(void *)(v2 + 16) + 16)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance Text.Layout.Cluster(void *result)
{
  if (*result >= *(void *)(*(void *)(v1 + 16) + 16)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.Cluster@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Text.Layout.Cluster()
{
  return *(void *)(*(void *)(v0 + 16) + 16);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Cluster()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Layout.Cluster(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

char *Text.Layout.Line.clusters(for:)()
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v40 - v4;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int v12 = (char *)&v40 - v11;
  uint64_t v51 = *(void **)v0;
  uint64_t v47 = *(void *)(v0 + 8);
  int v52 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v13 = *(void *)(v0 + 24);
  uint64_t v14 = *(void *)(v0 + 32);
  int v43 = *(_DWORD *)(v0 + 40);
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  double v15 = v5;
  RangeSet.ranges.getter();
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v50 = v3 + 16;
  v49(v9, v5, v2);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v16 = v3 + 8;
  uint64_t v48 = *(void (**)(char *, uint64_t))(v3 + 8);
  v48(v5, v2);
  *(void *)&v9[*(int *)(v7 + 44)] = v53[0];
  outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v9, (uint64_t)v12);
  id v17 = &v12[*(int *)(v7 + 44)];
  uint64_t v18 = *(void *)v17;
  dispatch thunk of Collection.endIndex.getter();
  if (v18 == v53[0])
  {
    unint64_t v46 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_3;
  }
  unint64_t v46 = (void *)MEMORY[0x263F8EE78];
  while (2)
  {
    while (1)
    {
      uint64_t v21 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      CFIndex v24 = *v22;
      CFIndex v23 = v22[1];
      v21(v53, 0);
      v49(v15, v12, v2);
      dispatch thunk of Collection.formIndex(after:)();
      v48(v15, v2);
      if (v52) {
        break;
      }
      id v25 = v51;
      outlined copy of Text.Layout.Line.Line(v51, v47, 0);
      swift_release();
      if (v24 < v23) {
        goto LABEL_12;
      }
LABEL_5:

LABEL_6:
      uint64_t v20 = *(void *)v17;
      dispatch thunk of Collection.endIndex.getter();
      if (v20 == v53[0]) {
        goto LABEL_3;
      }
    }
    id v25 = (id)_NSTextLineFragmentGetCTLine(v51);
    if (!v25) {
      goto LABEL_6;
    }
    if (v24 >= v23) {
      goto LABEL_5;
    }
LABEL_12:
    __n128 result = (char *)CTLineGetRangeOfCharacterClusterAtIndex();
    if (result == (char *)-1) {
      goto LABEL_5;
    }
    uint64_t v42 = v16;
    unint64_t v45 = v15;
    do
    {
      unint64_t v27 = &result[v26];
      if (__OFADD__(result, v26))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      if ((uint64_t)v27 < (uint64_t)result) {
        goto LABEL_40;
      }
      if (v23 >= (uint64_t)result) {
        long long v28 = result;
      }
      else {
        long long v28 = (void *)v23;
      }
      if ((uint64_t)result >= v24) {
        CFIndex v29 = (CFIndex)v28;
      }
      else {
        CFIndex v29 = v24;
      }
      if ((uint64_t)v27 <= v24) {
        unint64_t v30 = (char *)v24;
      }
      else {
        unint64_t v30 = &result[v26];
      }
      if (v23 >= (uint64_t)v27) {
        CFIndex v31 = (CFIndex)v30;
      }
      else {
        CFIndex v31 = v23;
      }
      if (__OFSUB__(v31, v29)) {
        goto LABEL_41;
      }
      if (v31 != v29)
      {
        v53[0] = v51;
        v53[1] = v47;
        char v54 = v52;
        uint64_t v55 = v13;
        uint64_t v56 = v14;
        int v57 = v43;
        Text.Layout.Line.slices(for:)(v29, v31);
        uint64_t v44 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
        }
        unint64_t v34 = v46[2];
        unint64_t v33 = v46[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v33 >> 1)
        {
          unint64_t v41 = v34 + 1;
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v46);
          unint64_t v35 = v41;
          unint64_t v46 = v38;
        }
        int v36 = v46;
        void v46[2] = v35;
        uint64_t v37 = &v36[3 * v34];
        v37[4] = v29;
        v37[5] = v31;
        v37[6] = v44;
      }
      double v15 = v45;
      if (v31 >= v23) {
        break;
      }
      __n128 result = (char *)CTLineGetRangeOfCharacterClusterAtIndex();
    }
    while (result != (char *)-1);

    uint64_t v39 = *(void *)v17;
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v16 = v42;
    if (v39 != v53[0]) {
      continue;
    }
    break;
  }
LABEL_3:
  outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v12);
  return (char *)v46;
}

void Text.Layout.Line.slices(for:)(CFIndex a1, CFIndex a2)
{
  uint64_t v6 = *(void **)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  int v7 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  uint64_t v9 = *(void *)(v2 + 32);
  int v10 = *(_DWORD *)(v2 + 40);
  outlined copy of Text.Layout.Line.Line(*(void **)v2, v5, v7);
  CFArrayRef v11 = 0;
  CFIndex v55 = a1;
  BOOL v12 = __OFSUB__(a2, a1);
  int v52 = v10;
  BOOL v53 = v12;
  uint64_t v51 = v5;
  int v50 = v7;
  uint64_t v49 = v6;
  while (1)
  {
    CFIndex v54 = (CFIndex)v11;
    if (v7)
    {
      id v17 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v6);
      if (!v17)
      {
        if (!v11)
        {
          LOBYTE(v7) = 1;
LABEL_52:
          outlined consume of Text.Layout.Line.Line(v6, v5, v7);
          return;
        }
        goto LABEL_15;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v6, v5, 0);
      swift_release();
      id v17 = (const __CTLine *)v6;
    }
    CFArrayRef RunCount = _CTLineGetRunCount(v17);

    if (v11 == RunCount) {
      goto LABEL_52;
    }
    if (!v7)
    {
      outlined copy of Text.Layout.Line.Line(v6, v5, 0);
      swift_release();
      outlined copy of Text.Layout.Line.Line(v6, v5, 0);

      outlined copy of Text.Layout.Line.Line(v6, v5, 0);
      outlined copy of Text.Layout.Line.Line(v6, v5, 0);
      swift_release();
      CFIndex v24 = (const __CTLine *)v6;
      uint64_t v20 = v6;
      CFArrayRef v23 = (const __CFArray *)v5;
      goto LABEL_19;
    }
LABEL_15:
    id v19 = (id)_NSTextLineFragmentGetCTLine(v6);
    if (!v19) {
      goto LABEL_61;
    }
    uint64_t v20 = v19;
    char v21 = 1;
    outlined copy of Text.Layout.Line.Line(v6, v5, 1);
    uint64_t v22 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v6);
    CFArrayRef v23 = 0;
    if (v22)
    {
      CFIndex v24 = v22;
LABEL_19:
      CFArrayRef v25 = v23;
      CFArrayRef v23 = _CTLineGetRunCount(v24);

      char v21 = v7;
      goto LABEL_21;
    }
    CFArrayRef v25 = 0;
LABEL_21:
    outlined consume of Text.Layout.Line.Line(v6, v5, v21);
    v56[0] = v20;
    v56[1] = v54;
    _OWORD v56[2] = v8;
    v56[3] = v9;
    int v57 = v10;
    CFArrayRef v58 = v25;
    if (v54 >= (uint64_t)v23) {
      break;
    }
    swift_retain();
    uint64_t v26 = v20;
    unint64_t v27 = (id)_CTLineGetRunAtIndex(v26, v54);
    CFRange StringRange = CTRunGetStringRange((CTRunRef)v27);
    swift_release();

    CFIndex v29 = StringRange.location + StringRange.length;
    if (__OFADD__(StringRange.location, StringRange.length)) {
      goto LABEL_54;
    }
    if (v29 < StringRange.location) {
      goto LABEL_55;
    }
    if (StringRange.location >= a2) {
      goto LABEL_6;
    }
    CFIndex v16 = v54;
    if (v29 > v55)
    {
      if (__OFSUB__(v29, StringRange.location)) {
        goto LABEL_56;
      }
      if (v29 != StringRange.location)
      {
        if (v53) {
          goto LABEL_59;
        }
        if (a2 != v55)
        {
          unint64_t v30 = v26;
          swift_retain_n();
          CFIndex v31 = v30;
          uint64_t v32 = (id)_CTLineGetRunAtIndex(v31, v54);
          CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v32);
          swift_release();

          if (GlyphCount < 0) {
            goto LABEL_60;
          }
          unint64_t v34 = Text.Layout.RunSlice.characterIndices.getter();
          swift_release();

          uint64_t v35 = v34[2];
          int v36 = v31;
          if (v35)
          {
            uint64_t v37 = 0;
            uint64_t v38 = v34 + 4;
            uint64_t v39 = (void *)MEMORY[0x263F8EE78];
            do
            {
              CFIndex v41 = v38[v37];
              uint64_t v42 = v37 + 1;
              if (v41 >= v55 && v41 < a2)
              {
                CFIndex v44 = a2;
                unint64_t v45 = v39[2];
                if (v45 && (unint64_t v46 = v45 - 1, v47 = &v39[2 * v45 - 2], v37 == v47[5]))
                {
                  uint64_t v37 = v47[4];
                  if (v42 < v37) {
                    goto LABEL_57;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
                  }
                  if (v45 > v39[2]) {
                    goto LABEL_58;
                  }
                }
                else
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45 + 1, 1, v39);
                  }
                  unint64_t v46 = v39[2];
                  unint64_t v48 = v39[3];
                  if (v46 >= v48 >> 1) {
                    uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v46 + 1, 1, v39);
                  }
                  v39[2] = v46 + 1;
                }
                uint64_t v40 = &v39[2 * v46];
                v40[4] = v37;
                v40[5] = v42;
                a2 = v44;
              }
              uint64_t v37 = v42;
            }
            while (v35 != v42);
          }
          swift_bridgeObjectRelease();
          uint64_t v13 = v36;
          swift_retain();
          uint64_t v14 = swift_bridgeObjectRetain();
          uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySiGG_7SwiftUI4TextV6LayoutV8RunSliceVs5NeverOTg503_s7d3UI4f2V6g64V4LineVAAE6slices33_7F70C8A76EE0356881289646072938C03forSayAE8hI41VGSnyAE14CharacterIndexVG_tFALSnySiGXEfU_AL0H0VTf1cn_nTf4ng_n(v14, (uint64_t)v56);
          swift_bridgeObjectRelease_n();
          swift_release();

          specialized Array.append<A>(contentsOf:)(v15);
          uint64_t v5 = v51;
          int v7 = v50;
          uint64_t v6 = v49;
          int v10 = v52;
LABEL_6:
          CFIndex v16 = v54;
        }
      }
    }
    CFArrayRef v11 = (const __CFArray *)(v16 + 1);
    swift_release();
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
}

void GlyphContext.drawRun(_:range:foregroundColor:)(uint64_t a1, CFIndex a2, CFIndex a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v12 = *(const __CTLine **)a1;
  CGFloat v11 = *(double *)(a1 + 8);
  CGFloat v13 = *(double *)(a1 + 16);
  CGFloat v14 = *(double *)(a1 + 24);
  int v15 = *(_DWORD *)(a1 + 32);
  CGFloat v16 = *(double *)(a1 + 40);
  id v17 = GlyphContext.currentContext()();
  if ((*(unsigned char *)(v6 + 48) & 8) == 0)
  {
    id v18 = (id)_CTLineGetRunAtIndex(v12, *(CFIndex *)&v11);
    uint64_t v32 = a4;
    uint64_t v19 = a5;
    uint64_t v20 = v12;
    double v21 = v11;
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    id v24 = v18;
    _CGContextSetTextRunRange((uint64_t)v17, (uint64_t)v18, v22, v23);

    a3 = v23;
    a2 = v22;
    CGFloat v11 = v21;
    BOOL v12 = v20;
    a5 = v19;
    a4 = v32;
  }
  *(void *)&transform.CGFloat a = v12;
  transform.double b = v11;
  transform.CGFloat c = v13;
  transform.CGFloat d = v14;
  LODWORD(transform.tx) = v15;
  transform.tCGFloat y = v16;
  GlyphContext.drawAttachment(_:cgContext:)(&transform, v17);
  CGContextSaveGState(v17);
  transform.CGFloat a = 1.0;
  transform.double b = 0.0;
  transform.CGFloat c = 0.0;
  transform.CGFloat d = -1.0;
  transform.tCGFloat x = v13;
  transform.tCGFloat y = v14;
  CGContextConcatCTM(v17, &transform);
  if (a6)
  {
    CFIndex v31 = (id)_CTLineGetRunAtIndex(v12, *(CFIndex *)&v11);
    v35.CFIndex location = a2;
    v35.CFIndex length = a3;
    CTRunDraw((CTRunRef)v31, v17, v35);
  }
  else
  {
    CFArrayRef v25 = v12;
    type metadata accessor for Attribute<TextRendererBoxBase>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, CGColorRef)>, 255, (uint64_t (*)(uint64_t))type metadata accessor for (NSAttributedStringKey, CGColorRef), MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    unint64_t v27 = (void *)*MEMORY[0x263F81500];
    *(void *)(inited + 32) = *MEMORY[0x263F81500];
    uint64_t v28 = one-time initialization token for cache;
    id v29 = v27;
    if (v28 != -1) {
      swift_once();
    }
    *(void *)(inited + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = specialized ObjectCache.subscript.getter(*(float *)&a4, *((float *)&a4 + 1), *(float *)&a5, *((float *)&a5 + 1));
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for NSAttributedStringKey(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type TextAttributeModifierBase and conformance TextAttributeModifierBase(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, 255, type metadata accessor for NSAttributedStringKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CFIndex v31 = (id)_CTLineGetRunAtIndex(v25, *(CFIndex *)&v11);
    CTRunDrawWithAttributeOverrides();
  }
  CGContextRestoreGState(v17);
}

uint64_t GraphicsContext.draw(_:)(uint64_t *a1, double *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t result = *a1;
  unint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = a2;
    uint64_t v34 = result + 32;
    unint64_t v5 = 0;
    uint64_t v33 = swift_bridgeObjectRetain();
    while (1)
    {
      if (v5 >= v3)
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
      }
      unint64_t v35 = v5;
      uint64_t v6 = v34 + 56 * v5;
      uint64_t v7 = *(void *)(v6 + 16);
      uint64_t v9 = *(void *)(v6 + 40);
      uint64_t v8 = *(void *)(v6 + 48);
      _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider, (uint64_t)&type metadata for ResolvedColorProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorBox);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = *(_OWORD *)v6;
      unint64_t v10 = *(void *)(v8 + 16);
      if (v10) {
        break;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
LABEL_4:
      unint64_t v5 = v35 + 1;
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      unint64_t v3 = *(void *)(v33 + 16);
      if (v35 + 1 == v3) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v11 = 0;
    BOOL v12 = (uint64_t *)(v8 + 56);
    uint64_t v37 = v8;
    while (1)
    {
      if (v11 >= v10)
      {
        __break(1u);
        goto LABEL_51;
      }
      uint64_t v15 = *(v12 - 3);
      uint64_t v16 = *(v12 - 2);
      uint64_t v17 = *(v12 - 1);
      uint64_t v18 = *v12;
      type metadata accessor for Path.PathBox();
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 24) = 0u;
      uint64_t v20 = (void **)(v19 + 24);
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
      *(unsigned char *)(v19 + 16) = 2;
      RBPathStorageInit();
      int v21 = *(unsigned __int8 *)(v19 + 16);
      swift_retain();
      if (v21 != 2)
      {
        Path.PathBox.prepareBuffer()();
        if (*(unsigned char *)(v19 + 16) != 2) {
          Path.PathBox.prepareBuffer()();
        }
      }
      uint64_t v43 = v15;
      *(void *)&long long v44 = v16;
      MEMORY[0x24C526C30](v20, 0, &v43, 0);
      swift_release();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v22 = v19;
      }
      else
      {
        uint64_t v22 = swift_allocObject();
        *(_OWORD *)(v22 + 24) = 0u;
        *(_OWORD *)(v22 + 104) = 0u;
        *(_OWORD *)(v22 + 88) = 0u;
        *(_OWORD *)(v22 + 72) = 0u;
        *(_OWORD *)(v22 + 56) = 0u;
        *(_OWORD *)(v22 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
        int v23 = *(unsigned __int8 *)(v19 + 16);
        *(unsigned char *)(v22 + 16) = v23;
        if (v23)
        {
          if (v23 == 1)
          {
            swift_retain();
            *(void *)(v22 + 24) = RBPathRetain();
            *(void *)(v22 + 32) = v24;
            swift_release();
          }
          else
          {
            RBPathStorageInit();
          }
        }
        else
        {
          CFArrayRef v25 = *v20;
          if (!*v20) {
            goto LABEL_53;
          }
          *(void *)(v22 + 24) = v25;
          id v26 = v25;
        }
        swift_release();
      }
      int v27 = *(unsigned __int8 *)(v22 + 16);
      swift_retain();
      if (v27 != 2) {
        Path.PathBox.prepareBuffer()();
      }
      uint64_t v28 = (void *)(v22 + 24);
      uint64_t v43 = v17;
      *(void *)&long long v44 = v18;
      MEMORY[0x24C526C30](v22 + 24, 1, &v43, 0);
      if (!*(unsigned char *)(v22 + 16)) {
        break;
      }
      if (*(unsigned char *)(v22 + 16) == 1) {
        goto LABEL_27;
      }
      uint64_t v29 = one-time initialization token for bufferCallbacks;
      swift_bridgeObjectRetain();
      if (v29 != -1) {
        swift_once();
      }
LABEL_32:
      if ((RBPathIsEmpty() & 1) == 0)
      {
        if (*(unsigned char *)(v22 + 16))
        {
          if (*(unsigned char *)(v22 + 16) == 1) {
            goto LABEL_35;
          }
          uint64_t v30 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v30 != -1) {
            swift_once();
          }
        }
        else
        {
          if (!*v28) {
            goto LABEL_54;
          }
LABEL_35:
          swift_retain();
        }
        RBPathRetain();
        swift_release();
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 24) = 0u;
        *(_OWORD *)(v13 + 104) = 0u;
        *(_OWORD *)(v13 + 88) = 0u;
        *(_OWORD *)(v13 + 72) = 0u;
        *(_OWORD *)(v13 + 56) = 0u;
        *(_OWORD *)(v13 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
        *(unsigned char *)(v13 + 16) = 2;
        RBPathStorageInit();
        uint64_t v43 = v7;
        *(void *)&long long v44 = 0x4024000000000000;
        *((void *)&v44 + 1) = v15;
        uint64_t v31 = *(void *)(v9 + 16);
        uint64_t v39 = 0;
        *(void *)&long long v40 = v31;
        *((void *)&v40 + 1) = v9 + 32;
        MEMORY[0x24C526C30](v13 + 24, 19, &v43, &v39);
        if (*(unsigned char *)(v22 + 16))
        {
          if (*(unsigned char *)(v22 + 16) == 1) {
            goto LABEL_42;
          }
          uint64_t v32 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v32 != -1) {
            swift_once();
          }
        }
        else
        {
          if (!*v28) {
            goto LABEL_55;
          }
LABEL_42:
          swift_retain();
        }
        RBPathStorageAppendPath();
        swift_release();
        MEMORY[0x24C526C30](v13 + 24, 16, 0, 0);
        RBPathRelease();
        swift_release();
        swift_bridgeObjectRelease();
        unsigned __int8 v14 = 5;
        uint64_t v4 = a2;
        goto LABEL_9;
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v13 = 0;
      unsigned __int8 v14 = 6;
LABEL_9:
      ++v11;
      v49[0] = v13;
      memset(&v49[1], 0, 24);
      unsigned __int8 v50 = v14;
      swift_release();
      uint64_t v43 = v38;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      char v48 = 1;
      uint64_t v39 = 256;
      long long v40 = 0u;
      long long v41 = 0u;
      char v42 = 0;
      outlined copy of Path.Storage(v13, 0, 0, 0, v14);
      swift_retain();
      GraphicsContext.draw(_:with:style:)((uint64_t)v49, (uint64_t)&v43, (uint64_t)&v39, v4);
      outlined consume of Path.Storage(v13, 0, 0, 0, v14);
      swift_release();
      outlined consume of Path.Storage(v13, 0, 0, 0, v14);
      unint64_t v10 = *(void *)(v37 + 16);
      v12 += 4;
      if (v11 == v10) {
        goto LABEL_4;
      }
    }
    if (!*v28) {
      goto LABEL_52;
    }
LABEL_27:
    swift_bridgeObjectRetain();
    goto LABEL_32;
  }
  return result;
}

void GraphicsContext.setTextMetadata(of:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a1, *(void *)(a1 + 8));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)uint64_t v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v4, v3, 1, 0);
    swift_release();
  }
  _RBDrawingStateSetTextRunRange(*(void *)(*(void *)v2 + 24), (uint64_t)v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t vars8;

  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a1, *(void *)(a1 + 8));
  uint64_t v6 = v4 - v3;
  if (__OFSUB__(v4, v3))
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v7 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v8 = swift_retain();
      *(void *)uint64_t v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v8, v7, 1, 0);
      swift_release();
    }
    _RBDrawingStateSetTextRunRange(*(void *)(*(void *)v2 + 24), (uint64_t)v9, v3, v6);
  }
}

id *GlyphContext.deinit()
{
  outlined init with take of AnyTextLayoutRenderer?((uint64_t)(v0 + 2), (uint64_t)&v2, &lazy cache variable for type metadata for CGContextRef?, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGContextRef);
  outlined init with take of AnyTextLayoutRenderer?((uint64_t)&v2, (uint64_t)&v3, &lazy cache variable for type metadata for CGContextRef?, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGContextRef);
  if (v3) {
    RBDrawingStateEndCGContext();
  }
  if (*v0 != v0[1]) {
    RBDrawingStateDestroy();
  }
  return outlined release of CGContextRef?(&v2);
}

CGContext *GlyphContext.currentContext()()
{
  uint64_t result = *(CGContext **)(v0 + 16);
  if (!result)
  {
    uint64_t v2 = v0;
    if (*(void *)v0 == *(void *)(v0 + 8))
    {
      if ((*(unsigned char *)(v0 + 48) & 6) != 0) {
        *(void *)uint64_t v0 = RBDrawingStateInit();
      }
    }
    else
    {
      RBDrawingStateAssign();
    }
    int v3 = *(_DWORD *)(v0 + 48);
    if ((v3 & 2) != 0)
    {
      if (one-time initialization token for suffixNamespace != -1) {
        swift_once();
      }
      RBDrawingStateSetIdentifier2();
      id v4 = ContentTransition.rbTransition.getter();
      RBDrawingStateSetTransition();
    }
    if ((v3 & 4) != 0)
    {
      id v5 = ContentTransition.rbTransition.getter();
      RBDrawingStateSetTransition();
    }
    uint64_t result = (CGContext *)(id)RBDrawingStateBeginCGContext();
    *(void *)(v2 + 16) = result;
    CGBlendMode v6 = *(_DWORD *)(v2 + 28);
    CGContextRef c = result;
    if (v6)
    {
      if (!result)
      {
        __break(1u);
        goto LABEL_25;
      }
      CGContextSetBlendMode(result, v6);
      uint64_t result = c;
    }
    double v7 = *(double *)(v2 + 32);
    if ((~*(void *)&v7 & 0x7FF0000000000000) != 0 || (*(void *)&v7 & 0xFFFFFFFFFFFFFLL) == 0)
    {
LABEL_19:
      if (result)
      {
        _CGContextSetShapeDistance(v7);
        uint64_t result = c;
        goto LABEL_21;
      }
LABEL_25:
      __break(1u);
      return result;
    }
    if (!result)
    {
      __break(1u);
      goto LABEL_19;
    }
  }
LABEL_21:

  return result;
}

uint64_t one-time initialization function for suffixNamespace()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  unint64_t v4 = UUID.uuid.getter();
  char v5 = v4;
  char v7 = v6;
  unint64_t v8 = v4 >> 8;
  unint64_t v9 = v4 >> 16;
  unint64_t v10 = v4 >> 24;
  unint64_t v11 = HIDWORD(v4);
  unint64_t v12 = v4 >> 40;
  unint64_t v16 = HIWORD(v4);
  unint64_t v17 = HIBYTE(v4);
  unint64_t v18 = v6 >> 8;
  unint64_t v19 = v6 >> 16;
  unint64_t v20 = v6 >> 24;
  unint64_t v21 = HIDWORD(v6);
  unint64_t v23 = v6 >> 40;
  unint64_t v24 = HIWORD(v6);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  unint64_t v22 = HIBYTE(v6);
  uint64_t result = v13(v3, v0);
  LOBYTE(static GlyphContext.suffixNamespace) = v5;
  BYTE1(static GlyphContext.suffixNamespace) = v8;
  BYTE2(static GlyphContext.suffixNamespace) = v9;
  BYTE3(static GlyphContext.suffixNamespace) = v10;
  BYTE4(static GlyphContext.suffixNamespace) = v11;
  BYTE5(static GlyphContext.suffixNamespace) = v12;
  BYTE6(static GlyphContext.suffixNamespace) = v16;
  HIBYTE(static GlyphContext.suffixNamespace) = v17;
  byte_268EED0E8 = v7;
  byte_268EED0E9 = v18;
  byte_268EED0EA = v19;
  byte_268EED0EB = v20;
  byte_268EED0EC = v21;
  byte_268EED0ED = v23;
  byte_268EED0EE = v24;
  byte_268EED0EF = v22;
  return result;
}

void GlyphContext.drawAttachment(_:cgContext:)(_OWORD *a1, CGContext *a2)
{
  long long v3 = a1[1];
  v37[0] = *a1;
  v37[1] = v3;
  long long v38 = a1[2];
  if (one-time initialization token for kitAttachment != -1) {
    swift_once();
  }
  long long v4 = v37[0];
  outlined retain of Text.Layout.Run((void **)v37);
  char v5 = (id)_CTLineGetRunAtIndex((const __CTLine *)v4, *((CFIndex *)&v4 + 1));
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v7 = (void *)MEMORY[0x24C522820](v6);
  swift_bridgeObjectRelease();
  CFDictionaryRef v8 = _CTRunGetAttributeValueForKey((const __CTRun *)v5, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  uint64_t v9 = MEMORY[0x263F8EE58];
  _sypSgWObTm_5((uint64_t)v32, (uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
  outlined release of Text.Layout.Run((id *)v37);
  if (*((void *)&v34 + 1))
  {
    outlined init with take of Any(&v33, &v35);
    outlined init with copy of Any((uint64_t)&v35, (uint64_t)&v33);
    type metadata accessor for SwiftUITextAttachment();
    if (swift_dynamicCast())
    {
      unint64_t v10 = *(void **)&v32[0];
      v32[0] = 0uLL;
      outlined retain of Text.Layout.Run((void **)v37);
      uint64_t v11 = one-time initialization token for shared;
      id v12 = v10;
      if (v11 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v13 = *(void (**)(_OWORD *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
      unsigned __int8 v14 = static CoreGlue2.shared;
      v13(v32);

      long long v31 = v32[0];
      specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a2, (uint64_t *)&v31, 0, 1, (uint64_t)v12, (uint64_t)v37);
      outlined release of Text.Layout.Run((id *)v37);

      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);

      return;
    }
    outlined init with copy of Any((uint64_t)&v35, (uint64_t)&v33);
    type metadata accessor for NSTextAttachment();
    if (swift_dynamicCast())
    {
      unint64_t v16 = *(void **)&v32[0];
      outlined init with take of AnyTextLayoutRenderer?((uint64_t)&v38 + 8, (uint64_t)v39, &lazy cache variable for type metadata for AnyTextLayoutRenderer?, v15, (uint64_t (*)(uint64_t))type metadata accessor for AnyTextLayoutRenderer);
      outlined init with take of AnyTextLayoutRenderer?((uint64_t)v39, (uint64_t)&v40, &lazy cache variable for type metadata for AnyTextLayoutRenderer?, v17, (uint64_t (*)(uint64_t))type metadata accessor for AnyTextLayoutRenderer);
      uint64_t v18 = v40;
      if (v40)
      {
        v32[0] = 0uLL;
        outlined retain of Text.Layout.Run((void **)v37);
        outlined retain of ViewTransform((uint64_t)v39);
        uint64_t v19 = one-time initialization token for shared;
        id v20 = v16;
        if (v19 != -1) {
          swift_once();
        }
        swift_beginAccess();
        unint64_t v21 = *(void (**)(_OWORD *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
        unint64_t v22 = static CoreGlue2.shared;
        v21(v32);

        long long v31 = v32[0];
        specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a2, (uint64_t *)&v31, 0, 1, v18, (uint64_t)v20, (uint64_t)v37);
        outlined release of Text.Layout.Run((id *)v37);

        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
        outlined release of ViewTransform((uint64_t)v39);
        return;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v33);
  }
  if (one-time initialization token for customAttachment != -1) {
    swift_once();
  }
  outlined retain of Text.Layout.Run((void **)v37);
  unint64_t v23 = (id)_CTLineGetRunAtIndex((const __CTLine *)v4, *((CFIndex *)&v4 + 1));
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  CFArrayRef v25 = (void *)MEMORY[0x24C522820](v24);
  swift_bridgeObjectRelease();
  CFDictionaryRef v26 = _CTRunGetAttributeValueForKey((const __CTRun *)v23, v25);

  if (v26)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
  }
  _sypSgWObTm_5((uint64_t)&v33, (uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
  outlined release of Text.Layout.Run((id *)v37);
  if (v36)
  {
    type metadata accessor for AnyCustomTextAttachment();
    if (swift_dynamicCast())
    {
      uint64_t v27 = v33;
      long long v33 = 0uLL;
      outlined retain of Text.Layout.Run((void **)v37);
      uint64_t v28 = one-time initialization token for shared;
      swift_retain();
      if (v28 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v29 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
      uint64_t v30 = static CoreGlue2.shared;
      v29(&v33);

      v32[0] = v33;
      specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a2, (uint64_t *)v32, 0, 1, v27, (uint64_t)v37);
      outlined release of Text.Layout.Run((id *)v37);
      swift_release_n();
      swift_release();
      swift_release();
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v35);
  }
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for CGPoint(0);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized Array._makeMutableAndUnique()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = (uint64_t)v1;
  if (!result)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *uint64_t v0 = result;
  }
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if ((result & 1) == 0)
  {
    int64_t v3 = *(void *)(v1 + 16) + 1;
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 1);
  }
  return result;
}

{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1)) {
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, result + 1, 1);
  }
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, double a2, double a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(double *)(v5 + 32) = a2;
  *(double *)(v5 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
  return result;
}

BOOL specialized static Text.Layout.Run.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 16);
  double v2 = *(double *)(a1 + 24);
  uint64_t v4 = *(const __CTLine **)a2;
  CFIndex v5 = *(void *)(a2 + 8);
  double v7 = *(double *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  CFDictionaryRef v8 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a1, *(void *)(a1 + 8));
  uint64_t v9 = (id)_CTLineGetRunAtIndex(v4, v5);

  return v8 == v9 && v3 == v7 && v2 == v6;
}

BOOL specialized static Text.Layout.Line.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 24) != *(double *)(a2 + 24) || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  BOOL v4 = *(void *)a1 == *(void *)a2;
  if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
    BOOL v4 = 0;
  }
  BOOL v5 = *(void *)a1 == *(void *)a2;
  if (*(unsigned char *)(a2 + 16)) {
    BOOL v5 = 0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return v4;
  }
  else {
    return v5;
  }
}

BOOL specialized static Text.Layout.RunSlice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(void **)a1;
  CFIndex v2 = *(void *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v9 = *(void **)a2;
  CFIndex v8 = *(void *)(a2 + 8);
  double v11 = *(double *)(a2 + 16);
  double v10 = *(double *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  swift_retain();
  unsigned __int8 v14 = v3;
  swift_retain();
  uint64_t v15 = v9;
  unint64_t v16 = (id)_CTLineGetRunAtIndex(v14, v2);
  uint64_t v17 = (id)_CTLineGetRunAtIndex(v15, v8);
  swift_release();

  swift_release();
  BOOL result = 0;
  if (v16 == v17 && v5 == v11 && v4 == v10) {
    return v6 == v12 && v7 == v13;
  }
  return result;
}

uint64_t specialized static Text.LayoutKey.AnchoredLayout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  if ((*(uint64_t (**)(void))(**(void **)a1 + 104))(*(void *)a2)) {
    return specialized static Array<A>.== infix(_:_:)(v2, v5) & ~(v3 ^ v6) & (v4 == v7);
  }
  else {
    return 0;
  }
}

void specialized Text.Layout.TypographicBounds.init(run:range:)(const __CTRun *a1@<X0>, CFRange a2@<X2:X1>, CGFloat *a3@<X8>)
{
  CFIndex length = a2.length;
  CFIndex location = a2.location;
  uint64_t v18 = *MEMORY[0x263EF8340];
  buffer.CGFloat x = 0.0;
  buffer.CGFloat y = 0.0;
  CGFloat descent = 0.0;
  CGFloat ascent = 0.0;
  v13.CGFloat y = 0.0;
  CGFloat leading = 0.0;
  v13.CGFloat x = 0.0;
  a2.CFIndex length = 1;
  CTRunGetPositions(a1, a2, &buffer);
  v19.CFIndex location = location;
  v19.CFIndex length = 1;
  CTRunGetBaseAdvancesAndOrigins(a1, v19, 0, &v13);
  CGFloat v7 = buffer.x - v13.x;
  CGFloat v8 = buffer.y - v13.y;
  v20.CFIndex location = location;
  v20.CFIndex length = length;
  double TypographicBounds = CTRunGetTypographicBounds(a1, v20, &ascent, &descent, &leading);
  CGFloat v10 = ascent;
  double v11 = fabs(descent);
  CGFloat v12 = leading;
  *a3 = v7;
  a3[1] = -v8;
  a3[2] = TypographicBounds;
  a3[3] = v10;
  a3[4] = v11;
  a3[5] = v12;
}

uint64_t type metadata accessor for TextAttributeModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(uint64_t a1)
{
  return closure #1 in static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for _TextRendererViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _TextRendererViewModifier.MakeTextRenderer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in TextAttributeModifierBase(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type TextAttributeModifierBase and conformance TextAttributeModifierBase(&lazy protocol witness table cache variable for type TextAttributeModifierBase and conformance TextAttributeModifierBase, a2, (void (*)(uint64_t))type metadata accessor for TextAttributeModifierBase);
}

uint64_t type metadata accessor for TextAttributeModifierBase()
{
  return self;
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in Text.Layout.CharacterIndex()
{
  return MEMORY[0x263F8D720];
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line;
  if (!lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line;
  if (!lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line;
  if (!lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line;
  if (!lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Text.Layout.Line()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void _ss8RangeSetV6RangesVySi_GMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Line> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Line>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line, (uint64_t)&type metadata for Text.Layout.Line, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Line>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line, (uint64_t)&type metadata for Text.Layout.Line, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Text.Layout.Line()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_4(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Layout.Line()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_4(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Line> and conformance Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Line>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line, (uint64_t)&type metadata for Text.Layout.Line, MEMORY[0x263F8E738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Line> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Line> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Line> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Line>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line, (uint64_t)&type metadata for Text.Layout.Line, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Line> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Run and conformance Text.Layout.Run()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run;
  if (!lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run;
  if (!lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run;
  if (!lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice;
  if (!lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice;
  if (!lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice;
  if (!lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice;
  if (!lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Run> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Run> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Run> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Run>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Run and conformance Text.Layout.Run, (uint64_t)&type metadata for Text.Layout.Run, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Run> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.RunSlice> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.RunSlice> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.RunSlice> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.RunSlice>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice, (uint64_t)&type metadata for Text.Layout.RunSlice, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.RunSlice> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout;
  if (!lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout;
  if (!lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout;
  if (!lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout;
  if (!lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout, (uint64_t)&type metadata for Text.Layout, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout, (uint64_t)&type metadata for Text.Layout, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout> and conformance Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout, (uint64_t)&type metadata for Text.Layout, MEMORY[0x263F8E738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout, (uint64_t)&type metadata for Text.Layout, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions;
  if (!lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions;
  if (!lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions;
  if (!lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions;
  if (!lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Decorations.Segment> and conformance Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, MEMORY[0x263F8E738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Decorations.Segment> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations.Segment> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations.Segment> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Decorations.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations.Segment> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations, (uint64_t)&type metadata for Text.Layout.Decorations, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations, (uint64_t)&type metadata for Text.Layout.Decorations, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Decorations> and conformance Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations, (uint64_t)&type metadata for Text.Layout.Decorations, MEMORY[0x263F8E738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Decorations> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Decorations>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations, (uint64_t)&type metadata for Text.Layout.Decorations, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations> and conformance IndexingIterator<A>);
  }
  return result;
}

uint64_t dispatch thunk of TextRenderer.draw(layout:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TextRenderer.sizeThatFits(proposal:text:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of TextRenderer.displayPadding.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for TextProxy()
{
  return &type metadata for TextProxy;
}

uint64_t method lookup function for TextAttributeModifierBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextAttributeModifierBase);
}

uint64_t dispatch thunk of TextAttributeModifierBase.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of TextAttributeModifierBase.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

ValueMetadata *type metadata accessor for Text.CustomAttributes()
{
  return &type metadata for Text.CustomAttributes;
}

uint64_t getEnumTagSinglePayload for _TextRendererViewModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _TextRendererViewModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245EFE594);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t method lookup function for TextRendererBoxBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextRendererBoxBase);
}

uint64_t type metadata accessor for TextRendererBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Layout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Layout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for Text.Layout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Layout()
{
  return &type metadata for Text.Layout;
}

ValueMetadata *type metadata accessor for Text.Layout.CharacterIndex()
{
  return &type metadata for Text.Layout.CharacterIndex;
}

ValueMetadata *type metadata accessor for Text.Layout.TypographicBounds()
{
  return &type metadata for Text.Layout.TypographicBounds;
}

uint64_t initializeWithCopy for Text.Layout.Line(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for Text.Layout.Line(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  unsigned int v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Text.Layout.Line(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Layout.Line.Line(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Layout.Line(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Layout.Line(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 44) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Layout.Line()
{
  return &type metadata for Text.Layout.Line;
}

uint64_t destroy for Text.Layout.Run(id *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for Text.Layout.Run(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Text.Layout.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Text.Layout.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Layout.Run()
{
  return &type metadata for Text.Layout.Run;
}

uint64_t initializeWithCopy for Text.Layout.RunSlice(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Text.Layout.RunSlice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for Text.Layout.RunSlice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Layout.RunSlice(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Layout.RunSlice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Layout.RunSlice()
{
  return &type metadata for Text.Layout.RunSlice;
}

uint64_t type metadata accessor for AnyTextLayoutRenderer()
{
  return self;
}

uint64_t type metadata accessor for TextLayoutFragmentRenderer()
{
  return self;
}

ValueMetadata *type metadata accessor for Text.LayoutKey()
{
  return &type metadata for Text.LayoutKey;
}

uint64_t initializeWithCopy for Text.LayoutKey.AnchoredLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.LayoutKey.AnchoredLayout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Text.LayoutKey.AnchoredLayout(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for Text.LayoutKey.AnchoredLayout()
{
  return &type metadata for Text.LayoutKey.AnchoredLayout;
}

ValueMetadata *type metadata accessor for Text.Layout.DrawingOptions()
{
  return &type metadata for Text.Layout.DrawingOptions;
}

ValueMetadata *type metadata accessor for Text.Layout.Decorations()
{
  return &type metadata for Text.Layout.Decorations;
}

ValueMetadata *type metadata accessor for Text.Layout.Decorations.Fragment()
{
  return &type metadata for Text.Layout.Decorations.Fragment;
}

uint64_t destroy for Text.Layout.Decorations.Segment()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Layout.Decorations.Segment(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Layout.Decorations.Segment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Layout.Decorations.Segment(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Layout.Decorations.Segment(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Layout.Decorations.Segment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Layout.Decorations.Segment()
{
  return &type metadata for Text.Layout.Decorations.Segment;
}

ValueMetadata *type metadata accessor for Text.Layout.Cluster()
{
  return &type metadata for Text.Layout.Cluster;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Layout.Line.Line(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Text.Layout.Line.Line(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v4, v5);
  id v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Layout.Line.Line(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Text.Layout.Line.Line(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Text.Layout.Line.Line(v4, v5, v6);
  return a1;
}

void *type metadata accessor for Text.Layout.Line.Line()
{
  return &unk_26FA77C00;
}

uint64_t instantiation function for generic protocol witness table for _TextRendererViewModifier<A>.MakeTextRenderer(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Cluster> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Cluster> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Cluster> and conformance IndexingIterator<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Cluster>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster, (uint64_t)&type metadata for Text.Layout.Cluster, MEMORY[0x263F8DE58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Cluster> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster;
  if (!lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster;
  if (!lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster;
  if (!lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster;
  if (!lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Cluster> and conformance Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Cluster>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster, (uint64_t)&type metadata for Text.Layout.Cluster, MEMORY[0x263F8E738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance Slice<A>);
  }
  return result;
}

void _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Cluster>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster, (uint64_t)&type metadata for Text.Layout.Cluster, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_3(255, &lazy cache variable for type metadata for Slice<Text.Layout.Cluster>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster, (uint64_t)&type metadata for Text.Layout.Cluster, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _TextRendererViewModifier<A>.MakeTextRenderer()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySiGG_7SwiftUI4TextV6LayoutV8RunSliceVs5NeverOTg503_s7d3UI4f2V6g64V4LineVAAE6slices33_7F70C8A76EE0356881289646072938C0LL3forSayAE8hI41VGSnyAE14CharacterIndexVG_tFALSnySiGXEfU_AL0H0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    int v15 = *(void **)a2;
    long long v14 = *(_OWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v17;
    uint64_t v9 = (long long *)(a1 + 32);
    do
    {
      long long v16 = *v9;
      outlined retain of Text.Layout.Run((void **)a2);
      unint64_t v11 = *(void *)(v17 + 16);
      unint64_t v10 = *(void *)(v17 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v17 + 16) = v11 + 1;
      uint64_t v12 = v17 + (v11 << 6);
      *(void *)(v12 + 32) = v15;
      *(void *)(v12 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v6;
      *(_OWORD *)(v12 + 48) = v14;
      *(_DWORD *)(v12 + 64) = v7;
      *(void *)(v12 + 72) = v8;
      ++v9;
      *(_OWORD *)(v12 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v16;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized TextRenderer.sizeThatFits(proposal:text:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t *a5, __n128 a6, __n128 a7)
{
  double v10 = *(double *)&result;
  uint64_t v11 = *a5;
  if (one-time initialization token for zero != -1) {
    *(double *)&unint64_t result = COERCE_DOUBLE(swift_once());
  }
  char v12 = byte_268EEF3D8;
  a6.n128_u64[0] = qword_268EEF3E0;
  char v13 = byte_268EEF3E8;
  if (a2)
  {
    if (!byte_268EEF3D8) {
      goto LABEL_15;
    }
  }
  else
  {
    a7.n128_u64[0] = static ProposedViewSize.zero;
    if (*(double *)&static ProposedViewSize.zero != v10) {
      char v12 = 1;
    }
    if (v12) {
      goto LABEL_15;
    }
  }
  if (a4)
  {
    a6.n128_u64[0] = 0;
    a7.n128_u64[0] = 0;
    if (!byte_268EEF3E8)
    {
LABEL_15:
      double v14 = v10;
      char v15 = a2 & 1;
      uint64_t v16 = a3;
      char v17 = a4 & 1;
      *(double *)&unint64_t result = COERCE_DOUBLE((*(uint64_t (**)(double *, __n128, __n128))(*(void *)v11 + 224))(&v14, a6, a7));
    }
  }
  else
  {
    if (*(double *)&qword_268EEF3E0 != *(double *)&a3) {
      char v13 = 1;
    }
    a6.n128_u64[0] = 0;
    a7.n128_u64[0] = 0;
    if (v13) {
      goto LABEL_15;
    }
  }
  return result;
}

void *outlined consume of Text.Layout.Run?(void *result)
{
  if (result)
  {

    return (void *)swift_release();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TextAttributeModifierBase and conformance TextAttributeModifierBase(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of Text.Layout.Decorations.Segment?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_245EFF980()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)(int a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  return closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)(a1, a2, *(int **)(v10 + 16), *(void ***)(v10 + 24), *(uint64_t **)(v10 + 32), *(void **)(v10 + 40), *(void **)(v10 + 48), *(void *)(v10 + 56), a3, a4, a5, a6, a7, a8, a9, a10, *(unsigned char *)(v10 + 64), *(double *)(v10 + 72), *(unsigned char *)(v10 + 80),
           *(unsigned char *)(v10 + 81));
}

uint64_t sub_245EFF9DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned CTLineDecorationElementType, @unowned OpaquePointer) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with take of AnyTextLayoutRenderer?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  type metadata accessor for Attribute<TextRendererBoxBase>(0, a3, a4, a5, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

id *outlined release of CGContextRef?(id *a1)
{
  return a1;
}

void type metadata accessor for Attribute<TextRendererBoxBase>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for (NSAttributedStringKey, CGColorRef)()
{
  if (!lazy cache variable for type metadata for (NSAttributedStringKey, CGColorRef))
  {
    type metadata accessor for NSAttributedStringKey(255);
    type metadata accessor for CGColorRef(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, CGColorRef));
    }
  }
}

ValueMetadata *type metadata accessor for TextRendererInput()
{
  return &type metadata for TextRendererInput;
}

ValueMetadata *type metadata accessor for EnvironmentValues.TextRendererAddsDrawingGroupKey()
{
  return &type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey;
}

uint64_t Text.italic()(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  }
  unint64_t v7 = a4[2];
  unint64_t v6 = a4[3];
  if (v7 >= v6 >> 1) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, a4);
  }
  a4[2] = v7 + 1;
  uint64_t v8 = &a4[2 * v7];
  v8[4] = 0;
  *((unsigned char *)v8 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -32;
  return a1;
}

uint64_t Text.bold()(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  type metadata accessor for BoldTextModifier();
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  }
  unint64_t v10 = a4[2];
  unint64_t v9 = a4[3];
  if (v10 >= v9 >> 1) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, a4);
  }
  a4[2] = v10 + 1;
  uint64_t v11 = &a4[2 * v10];
  _OWORD v11[4] = v8;
  *((unsigned char *)v11 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -64;
  swift_release();
  return a1;
}

uint64_t Text.monospaced(_:)(char a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  return Text.monospaced(_:)(a1, a2, a3, a4, a5, (void (*)(void))type metadata accessor for MonospacedTextModifier);
}

uint64_t Text.strikethrough(_:color:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  return Text.strikethrough(_:color:)(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for StrikethroughTextModifier);
}

Swift::Bool __swiftcall Text.isCollapsible()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1) {
    return 0;
  }
  for (uint64_t i = (unsigned char *)(v0 + 40); ; i += 16)
  {
    if ((*i & 0xE0) == 0xC0)
    {
      type metadata accessor for CollapsibleTextModifier();
      if (swift_dynamicCastClass()) {
        break;
      }
    }
    if (!--v1) {
      return 0;
    }
  }
  return 1;
}

uint64_t Text.fontWidth(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  char v9 = *((unsigned char *)a1 + 8);
  if (v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  type metadata accessor for TextWidthModifier();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(unsigned char *)(v11 + 24) = v9;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v13 = a5[2];
  unint64_t v12 = a5[3];
  if (v13 >= v12 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, a5);
  }
  a5[2] = v13 + 1;
  double v14 = &a5[2 * v13];
  void v14[4] = v11;
  *((unsigned char *)v14 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -64;
  swift_release();
  return a2;
}

uint64_t Text.bold(_:)(char a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  return Text.monospaced(_:)(a1, a2, a3, a4, a5, (void (*)(void))type metadata accessor for BoldTextModifier);
}

uint64_t Text.italic(_:)(char a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  return Text.monospaced(_:)(a1, a2, a3, a4, a5, (void (*)(void))type metadata accessor for ItalicTextModifier);
}

uint64_t Text.monospaced(_:)(char a1, uint64_t a2, uint64_t a3, char a4, void *a5, void (*a6)(void))
{
  a6(0);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = a1;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v13 = a5[2];
  unint64_t v12 = a5[3];
  if (v13 >= v12 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, a5);
  }
  a5[2] = v13 + 1;
  double v14 = &a5[2 * v13];
  void v14[4] = v11;
  *((unsigned char *)v14 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -64;
  swift_release();
  return a2;
}

uint64_t Text.fontDesign(_:)(char *a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  char v9 = *a1;
  type metadata accessor for TextDesignModifier();
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = v9;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v12 = a5[2];
  unint64_t v11 = a5[3];
  if (v12 >= v11 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, a5);
  }
  a5[2] = v12 + 1;
  unint64_t v13 = &a5[2 * v12];
  v13[4] = v10;
  *((unsigned char *)v13 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -64;
  swift_release();
  return a2;
}

uint64_t Text.strikethrough(_:pattern:color:)(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7)
{
  return Text.strikethrough(_:pattern:color:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))type metadata accessor for StrikethroughTextModifier);
}

uint64_t Text.underline(_:color:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  return Text.strikethrough(_:color:)(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for UnderlineTextModifier);
}

uint64_t Text.strikethrough(_:color:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void (*a7)(void))
{
  if (a1)
  {
    swift_retain();
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    a2 = 1;
  }
  a7(0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = a2;
  outlined copy of Text.Storage(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
  }
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  if (v16 >= v15 >> 1) {
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, a6);
  }
  a6[2] = v16 + 1;
  char v17 = &a6[2 * v16];
  v17[4] = v14;
  *((unsigned char *)v17 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -64;
  swift_release();
  return a3;
}

uint64_t Text.underline(_:pattern:color:)(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7)
{
  return Text.strikethrough(_:pattern:color:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))type metadata accessor for UnderlineTextModifier);
}

uint64_t Text.strikethrough(_:pattern:color:)(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7, void (*a8)(void))
{
  if (a1)
  {
    uint64_t v14 = *a2 | 1;
    swift_retain();
  }
  else
  {
    uint64_t v14 = 0;
    a3 = 1;
  }
  a8(0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = a3;
  outlined copy of Text.Storage(a4, a5, a6 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a7[2] + 1, 1, a7);
  }
  unint64_t v17 = a7[2];
  unint64_t v16 = a7[3];
  if (v17 >= v16 >> 1) {
    a7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, a7);
  }
  a7[2] = v17 + 1;
  uint64_t v18 = &a7[2 * v17];
  void v18[4] = v15;
  *((unsigned char *)v18 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -64;
  swift_release();
  return a4;
}

uint64_t Text.kerning(_:)(uint64_t a1, uint64_t a2, char a3, void *a4, double a5)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  }
  unint64_t v9 = a4[2];
  unint64_t v8 = a4[3];
  if (v9 >= v8 >> 1) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, a4);
  }
  a4[2] = v9 + 1;
  uint64_t v10 = (double *)&a4[2 * v9];
  v10[4] = a5;
  *((unsigned char *)v10 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 96;
  return a1;
}

uint64_t Text.baselineOffset(_:)(uint64_t a1, uint64_t a2, char a3, void *a4, double a5)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  }
  unint64_t v9 = a4[2];
  unint64_t v8 = a4[3];
  if (v9 >= v8 >> 1) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, a4);
  }
  a4[2] = v9 + 1;
  uint64_t v10 = (double *)&a4[2 * v9];
  v10[4] = a5;
  *((unsigned char *)v10 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -96;
  return a1;
}

uint64_t Text._stylisticAlternative(_:)(char *a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  char v9 = *a1;
  type metadata accessor for StylisticAlternativeTextModifier();
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = v9;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v12 = a5[2];
  unint64_t v11 = a5[3];
  if (v12 >= v11 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, a5);
  }
  a5[2] = v12 + 1;
  uint64_t v13 = &a5[2 * v12];
  v13[4] = v10;
  *((unsigned char *)v13 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -64;
  swift_release();
  return a2;
}

uint64_t Text.collapsible()(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return Text.monospacedDigit()(a1, a2, a3, a4, (void (*)(void))type metadata accessor for CollapsibleTextModifier);
}

uint64_t EnvironmentValues.textScale.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

void static Text.Scale.default.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void Text.Scale.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Text.Scale.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int Text.Scale.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Text.Scale.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  Swift::String v6 = String.init(_:)(@"NSTextScaleSecondary");
  if (v6._countAndFlagsBits == a1 && v6._object == a2)
  {
    uint64_t result = swift_bridgeObjectRelease_n();
    char v10 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v8) {
      char v10 = 1;
    }
    else {
      char v10 = 2;
    }
  }
  *a3 = v10;
  return result;
}

uint64_t TextScaleModifier.isEqual(to:)()
{
  type metadata accessor for TextScaleModifier();
  uint64_t v1 = swift_dynamicCastClass();
  if (v1) {
    char v2 = *(unsigned char *)(v1 + 17) ^ *(unsigned char *)(v0 + 17) ^ 1;
  }
  else {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t EnvironmentValues.textScale.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.textScale(_:isEnabled:)(char *a1, char a2, uint64_t a3)
{
  char v5 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = a2;
  *(unsigned char *)(v7 + 17) = v5;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.textScale(_:isEnabled:), v7, a3);
  swift_release();

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.textScale : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t sub_245F00BA4(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.textScale.setter(&v2);
}

uint64_t sub_245F00BDC()
{
  return swift_deallocObject();
}

uint64_t sub_245F00BEC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Text.Scale?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Scale?>)
  {
    type metadata accessor for Text.Scale?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Scale?>);
    }
  }
}

void type metadata accessor for Text.Scale?()
{
  if (!lazy cache variable for type metadata for Text.Scale?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Scale?);
    }
  }
}

ValueMetadata *type metadata accessor for Text.Scale.Storage()
{
  return &type metadata for Text.Scale.Storage;
}

ValueMetadata *type metadata accessor for TextScaleKey()
{
  return &type metadata for TextScaleKey;
}

unint64_t lazy protocol witness table accessor for type Text.Scale.Storage and conformance Text.Scale.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Scale.Storage and conformance Text.Scale.Storage;
  if (!lazy protocol witness table cache variable for type Text.Scale.Storage and conformance Text.Scale.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Scale.Storage and conformance Text.Scale.Storage);
  }
  return result;
}

void static CAHostingLayerEvent.MouseButton.primary.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static CAHostingLayerEvent.MouseButton.secondary.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void CAHostingLayerEvent.MouseButton.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static CAHostingLayerEvent.MouseButton.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int CAHostingLayerEvent.MouseButton.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static CAHostingLayerEvent.mousePressed(button:location:instant:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  return static CAHostingLayerEvent.mousePressed(button:location:instant:)(a1, a2, (uint64_t)partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:), a3, a4, a5);
}

uint64_t closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(uint64_t a1, Swift::UInt a2, double a3, double a4)
{
  uint64_t v7 = (void *)(a1 + *(int *)(type metadata accessor for CAHostingLayerEvent.Context() + 20));
  uint64_t v8 = *v7;
  if (*(void *)(*v7 + 16) && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    ContinuousClock.Instant.duration(to:)();
    uint64_t v12 = Duration.components.getter();
    double v14 = (double)v13 / 1.0e18 + (double)v12;
    *(void *)&long long v34 = &type metadata for MouseEvent;
    *((void *)&v34 + 1) = &protocol witness table for MouseEvent;
    uint64_t v15 = swift_allocObject();
    *(double *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = a2;
    *(unsigned char *)(v15 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 3;
    *(void *)(v15 + 48) = 0;
    *(void *)(v15 + 56) = 0;
    *(double *)(v15 + 64) = a3;
    *(double *)(v15 + 72) = a4;
    *(void *)(v15 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(void *)&long long v32 = v11;
    *((void *)&v32 + 1) = v15;
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
  }
  uint64_t result = outlined init with take of CAHostingLayerEvent.Resolved?((uint64_t)&v32, (uint64_t)v35);
  uint64_t v17 = v7[1];
  uint64_t v18 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
  }
  else
  {
    v7[1] = v18;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v32 = *v7;
    *uint64_t v7 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v7 = v32;
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)((Swift::UInt *)&v32, a2);
    uint64_t v20 = v7[1];
    ContinuousClock.Instant.duration(to:)();
    uint64_t v21 = Duration.components.getter();
    double v23 = (double)v22 / 1.0e18 + (double)v21;
    *(void *)&long long v34 = &type metadata for MouseEvent;
    *((void *)&v34 + 1) = &protocol witness table for MouseEvent;
    uint64_t v24 = swift_allocObject();
    *(double *)(v24 + 16) = v23;
    *(void *)(v24 + 24) = 0;
    *(void *)(v24 + 32) = a2;
    *(unsigned char *)(v24 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(void *)(v24 + 48) = 0;
    *(void *)(v24 + 56) = 0;
    *(double *)(v24 + 64) = a3;
    *(double *)(v24 + 72) = a4;
    *(void *)(v24 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(void *)&long long v32 = v20;
    *((void *)&v32 + 1) = v24;
    outlined init with copy of CAHostingLayerEvent.Resolved?((uint64_t)v35, (uint64_t)v29);
    if ((void)v30)
    {
      v31[0] = v29[0];
      v31[1] = v29[1];
      v31[2] = v30;
      type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>, MEMORY[0x263F8E0F8]);
      CFArrayRef v25 = (_OWORD *)swift_allocObject();
      v25[1] = xmmword_2461BDD50;
      outlined init with copy of CAHostingLayerEvent.Resolved((uint64_t)v31, (uint64_t)(v25 + 2));
      outlined init with copy of CAHostingLayerEvent.Resolved((uint64_t)&v32, (uint64_t)(v25 + 5));
      outlined destroy of CAHostingLayerEvent.Resolved((uint64_t)v31);
      outlined destroy of CAHostingLayerEvent.Resolved((uint64_t)&v32);
    }
    else
    {
      outlined destroy of CAHostingLayerEvent.Resolved?((uint64_t)v29);
      type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>, MEMORY[0x263F8E0F8]);
      CFArrayRef v25 = (_OWORD *)swift_allocObject();
      long long v26 = v32;
      long long v27 = v33;
      v25[1] = xmmword_2461B9DC0;
      v25[2] = v26;
      long long v28 = v34;
      v25[3] = v27;
      v25[4] = v28;
    }
    outlined destroy of CAHostingLayerEvent.Resolved?((uint64_t)v35);
    return (uint64_t)v25;
  }
  return result;
}

uint64_t partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(uint64_t a1)
{
  return partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128, __n128))closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:));
}

uint64_t static CAHostingLayerEvent.mouseLifted(button:location:instant:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  return static CAHostingLayerEvent.mousePressed(button:location:instant:)(a1, a2, (uint64_t)partial apply for closure #1 in static CAHostingLayerEvent.mouseLifted(button:location:instant:), a3, a4, a5);
}

uint64_t static CAHostingLayerEvent.mousePressed(button:location:instant:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  double v15 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v12, v15);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  uint64_t v20 = (double *)(v18 + ((v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = a5;
  v20[1] = a6;
  *a4 = a3;
  a4[1] = v18;
  return result;
}

uint64_t closure #1 in static CAHostingLayerEvent.mouseLifted(button:location:instant:)(uint64_t a1, Swift::UInt a2, double a3, double a4)
{
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CAHostingLayerEvent.Context() + 20));
  uint64_t v8 = *v7;
  if (!*(void *)(*v7 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v10 & 1) == 0) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
  ContinuousClock.Instant.duration(to:)();
  uint64_t v12 = Duration.components.getter();
  double v14 = (double)v13 / 1.0e18 + (double)v12;
  uint64_t v15 = swift_allocObject();
  *(double *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = a2;
  *(unsigned char *)(v15 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 2;
  *(void *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = 0;
  *(double *)(v15 + 64) = a3;
  *(double *)(v15 + 72) = a4;
  *(void *)(v15 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>, MEMORY[0x263F8E0F8]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2461B9DC0;
  *(void *)(v16 + 32) = v11;
  *(void *)(v16 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v15;
  *(void *)(v16 + 64) = &type metadata for MouseEvent;
  *(void *)(v16 + 72) = &protocol witness table for MouseEvent;
  specialized Dictionary._Variant.removeValue(forKey:)(a2);
  specialized Set._Variant.remove(_:)(a2, (uint64_t)&v18);
  return v16;
}

uint64_t partial apply for closure #1 in static CAHostingLayerEvent.mouseLifted(button:location:instant:)(uint64_t a1)
{
  return partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128, __n128))closure #1 in static CAHostingLayerEvent.mouseLifted(button:location:instant:));
}

uint64_t partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, __n128, __n128))
{
  uint64_t v4 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + v5;
  uint64_t v8 = (unint64_t *)(v2 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9.n128_u64[0] = *v8;
  v10.n128_u64[0] = v8[1];

  return a2(a1, v6, v7, v9, v10);
}

uint64_t static CAHostingLayerEvent.mouseDragged(location:instant:)@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  double v11 = MEMORY[0x270FA5388](v8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v15 = (double *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v15 = a3;
  v15[1] = a4;
  *a2 = partial apply for closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:);
  a2[1] = (uint64_t (*)(uint64_t))v13;
  return result;
}

uint64_t closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(a1 + *(int *)(type metadata accessor for CAHostingLayerEvent.Context() + 20) + 16);
  _OWORD v11[2] = a1;
  v11[3] = a2;
  *(double *)&_OWORD v11[4] = a3;
  *(double *)&v11[5] = a4;
  swift_bridgeObjectRetain();
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy7SwiftUI19CAHostingLayerEventV11MouseButtonVG_AH8ResolvedVs5NeverOTg5((void (*)(_OWORD *__return_ptr, uint64_t *))partial apply for closure #1 in closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:), (uint64_t)v11, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_245F016F8()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = (double *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  double v7 = *v6;
  double v8 = v6[1];

  return closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)(a1, v5, v7, v8);
}

ValueMetadata *type metadata accessor for CAHostingLayerEvent()
{
  return &type metadata for CAHostingLayerEvent;
}

ValueMetadata *type metadata accessor for CAHostingLayerEvent.MouseButton()
{
  return &type metadata for CAHostingLayerEvent.MouseButton;
}

uint64_t initializeWithCopy for CAHostingLayerEvent.Resolved(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

void *assignWithCopy for CAHostingLayerEvent.Resolved(void *a1, void *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  return a1;
}

uint64_t assignWithTake for CAHostingLayerEvent.Resolved(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAHostingLayerEvent.Resolved(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAHostingLayerEvent.Resolved(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAHostingLayerEvent.Resolved()
{
  return &type metadata for CAHostingLayerEvent.Resolved;
}

uint64_t *initializeBufferWithCopyOfBuffer for CAHostingLayerEvent.Context(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ContinuousClock.Instant();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    void v9[2] = v10[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CAHostingLayerEvent.Context(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  _OWORD v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 8) = v9[1];
  *(void *)(v8 + 16) = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = v9[2];
  *(void *)(v8 + 8) = v9[1];
  *(void *)(v8 + 16) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245F01E24);
}

uint64_t sub_245F01E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245F01EF8);
}

uint64_t sub_245F01EF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ContinuousClock.Instant();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CAHostingLayerEvent.Context()
{
  uint64_t result = type metadata singleton initialization cache for CAHostingLayerEvent.Context;
  if (!type metadata singleton initialization cache for CAHostingLayerEvent.Context) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CAHostingLayerEvent.Context()
{
  uint64_t result = type metadata accessor for ContinuousClock.Instant();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t closure #1 in closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v14 = *a1;
  unint64_t result = type metadata accessor for CAHostingLayerEvent.Context();
  uint64_t v16 = *(void *)(a2 + *(int *)(result + 20));
  if (*(void *)(v16 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(v16 + 56) + 8 * result);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      ContinuousClock.Instant.duration(to:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      uint64_t v19 = Duration.components.getter();
      double v21 = (double)v20 / 1.0e18 + (double)v19;
      a3[4] = &type metadata for MouseEvent;
      a3[5] = &protocol witness table for MouseEvent;
      unint64_t result = swift_allocObject();
      *(double *)(result + 16) = v21;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = v14;
      *(unsigned char *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = 0;
      *(double *)(result + 64) = a4;
      *(double *)(result + 72) = a5;
      *(void *)(result + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
      *a3 = v18;
      a3[1] = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t partial apply for closure #1 in closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)@<X0>(Swift::UInt *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)(a1, *(void *)(v2 + 16), a2, *(double *)(v2 + 32), *(double *)(v2 + 40));
}

uint64_t sub_245F02298()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of CAHostingLayerEvent.Resolved?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Resolved?, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for CAHostingLayerEvent.Resolved);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of CAHostingLayerEvent.Resolved?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Resolved?, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CAHostingLayerEvent.Resolved?(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Resolved?, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for MouseTracker()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for MouseTracker(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MouseTracker(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MouseTracker(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for MouseTracker()
{
  return &unk_26FA46330;
}

BOOL compareEnumTags<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a3 - 8);
  double v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(char *, double))(v5 + 16);
  v9(v8, v6);
  uint64_t v22 = a3;
  uint64_t v23 = a3;
  uint64_t v10 = MEMORY[0x263F8E658];
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:), (uint64_t)v21, a3, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v11);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a3);
  uint64_t v13 = v17;
  ((void (*)(char *, uint64_t, uint64_t))v9)(v8, a2, a3);
  uint64_t v19 = a3;
  uint64_t v20 = a3;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:)partial apply, (uint64_t)v18, a3, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], v10, v14);
  v12(v8, a3);
  return v13 == v17;
}

uint64_t AGTypeID.genericType(at:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8 * a1 + 16);
}

uint64_t AGTypeID.projectEnum(at:tag:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  AGTypeProjectEnumData();
  a3(a1);

  return AGTypeInjectEnumTag();
}

uint64_t specialized Attribute.syncMainIfReferences<A>(do:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for Int?);
  uint64_t Value = AGGraphGetValue();
  uint64_t v7 = *(void (**)(uint64_t))Value;
  uint64_t v6 = *(void *)(Value + 8);
  uint64_t v17 = *(void (**)(uint64_t))Value;
  uint64_t v18 = v6;
  if ((v8 & 2) != 0)
  {
    char v19 = 1;
    MEMORY[0x270FA5388](Value);
    unsigned char v16[2] = &v19;
    v16[3] = partial apply for specialized closure #1 in PreferenceTransform.value.getter;
    v16[4] = &v20;
    v16[5] = &v17;
    uint64_t v10 = self;
    swift_retain();
    if (objc_msgSend(v10, sel_isMainThread))
    {
      uint64_t result = specialized closure #1 in PreferenceTransform.value.getter(v17, v18, a2, a3);
      char v19 = 0;
    }
    else
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:);
      *(void *)(v11 + 24) = v16;
      id v12 = (id)AGSubgraphGetCurrent();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      v23[0] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v23[1] = v11;
      id v24 = v12;
      int v25 = CurrentAttribute;
      uint64_t v14 = one-time initialization token for _lock;
      swift_retain();
      if (v14 != -1) {
        swift_once();
      }
      _MovableLockSyncMain(static Update._lock, (uint64_t)v23, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
      swift_release();

      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
    if (v19) {
      __break(1u);
    }
    else {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
    specialized closure #1 in PreferenceTransform.value.getter(v7, v6, a2, a3);
    return swift_release();
  }
  return result;
}

{
  uint64_t Value;
  void (*v6)(uint64_t);
  void (*v7)(uint64_t);
  char v8;
  uint64_t result;
  void v10[6];
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void v15[2];

  id v12 = a2;
  uint64_t v13 = a3;
  type metadata accessor for (_:)();
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(void (**)(uint64_t))Value;
  uint64_t v7 = *(void (**)(uint64_t))(Value + 8);
  v15[0] = *(void *)Value;
  v15[1] = v7;
  if ((v8 & 2) == 0) {
    return specialized closure #1 in PreferenceTransform.value.getter(v6, v7, a2, a3, (uint64_t)&unk_26FA91A98, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91AC0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
  }
  uint64_t v14 = 1;
  MEMORY[0x270FA5388](v6);
  CGFloat v10[2] = &v14;
  v10[3] = partial apply for specialized closure #1 in PreferenceTransform.value.getter;
  v10[4] = &v11;
  v10[5] = v15;
  swift_retain();
  uint64_t result = specialized static Update.syncMain(_:)(partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)v10);
  if ((v14 & 1) == 0) {
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  uint64_t Value;
  void (*v6)(uint64_t);
  void (*v7)(uint64_t);
  char v8;
  uint64_t result;
  void v10[6];
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void v15[2];

  id v12 = a2;
  uint64_t v13 = a3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]);
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(void (**)(uint64_t))Value;
  uint64_t v7 = *(void (**)(uint64_t))(Value + 8);
  v15[0] = *(void *)Value;
  v15[1] = v7;
  if ((v8 & 2) == 0) {
    return specialized closure #1 in PreferenceTransform.value.getter(v6, v7, a2, a3, (uint64_t)&unk_26FA91A48, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91A70, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
  }
  uint64_t v14 = 1;
  MEMORY[0x270FA5388](v6);
  CGFloat v10[2] = &v14;
  v10[3] = partial apply for specialized closure #1 in PreferenceTransform.value.getter;
  v10[4] = &v11;
  v10[5] = v15;
  swift_retain();
  uint64_t result = specialized static Update.syncMain(_:)(partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)v10);
  if ((v14 & 1) == 0) {
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t AGSubgraphRef.addSecondaryChild(_:)()
{
  return AGSubgraphAddChild2();
}

Swift::Void __swiftcall AGSubgraphRef.willRemove()()
{
}

uint64_t specialized closure #1 in PreferenceTransform.value.getter(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v9 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v46 = (char *)&v44 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v44 - v15;
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v17 - 8);
  char v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v44 - v21;
  unsigned int CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    long long v45 = v16;
    unsigned int v47 = CurrentAttribute;
    uint64_t v24 = one-time initialization token for lastestAccessLists;
    swift_retain();
    uint64_t v4 = a2;
    if (v24 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  char v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  v9[7](v22, 1, 1, v8);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v49 = v4;
  unsigned __int8 v50 = v9;
  uint64_t v26 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v22;
  a1(a4);
  *(void *)(StatusReg + 848) = v26;
  long long v27 = v50;
  _s11Observation0A8TrackingV11_AccessListVSgWOcTm_2((uint64_t)v22, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v27[6])(v19, 1, v8) == 1)
  {
    _s11Observation0A8TrackingV11_AccessListVSgWOhTm_1((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  }
  else
  {
    long long v28 = v45;
    long long v44 = v27[4];
    ((void (*)(char *, char *, uint64_t))v44)(v45, v19, v8);
    uint64_t v29 = v46;
    ((void (*)(char *, char *, uint64_t))v27[2])(v46, v28, v8);
    swift_beginAccess();
    long long v30 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      long long v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    unint64_t v33 = *((void *)v30 + 2);
    unint64_t v32 = *((void *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      long long v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    *((void *)v30 + 2) = v33 + 1;
    long long v34 = v50;
    long long v35 = &v30[(*((unsigned __int8 *)v34 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v34 + 80)];
    long long v27 = v50;
    ((void (*)(char *, char *, uint64_t))v44)(&v35[(void)v50[9] * v33], v29, v8);
    swift_endAccess();
    ((void (*)(char *, uint64_t))v34[1])(v28, v8);
  }
  _s11Observation0A8TrackingV11_AccessListVSgWOhTm_1((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  uint64_t v36 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v36)
  {
    uint64_t v39 = v27[2];
    uint64_t v37 = v27 + 2;
    long long v38 = v39;
    uint64_t v40 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*((unsigned __int8 *)v37 + 64) + 32) & ~(unint64_t)*((unsigned __int8 *)v37 + 64));
    uint64_t v41 = v37[7];
    unsigned __int8 v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    uint64_t v42 = v47;
    do
    {
      ((void (*)(char *, char *, uint64_t))v38)(v11, v40, v8);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v11, v42, (uint64_t)&unk_26FA90E40, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA90E68, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
      ((void (*)(char *, uint64_t))*(v37 - 1))(v11, v8);
      v40 += v41;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in PreferenceTransform.value.getter(void (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v61 = a1;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v62 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v14 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  CFIndex v54 = (char *)&v54 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v54 - v20;
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v63 = (char **)((char *)&v54 - v26);
  unsigned int CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unsigned int v56 = CurrentAttribute;
    uint64_t v64 = a8;
    CFArrayRef v58 = v16;
    uint64_t v59 = a5;
    uint64_t v57 = a6;
    uint64_t v55 = a7;
    uint64_t v28 = one-time initialization token for lastestAccessLists;
    swift_retain();
    if (v28 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  unsigned int v60 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v29 = *(void (**)(char **, uint64_t, uint64_t, uint64_t))(v14 + 56);
  long long v30 = (void (*)(void, void, void))v63;
  uint64_t v31 = v14;
  uint64_t v32 = v62;
  v29(v63, 1, 1, v62);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v34 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v30;
  v61(a4);
  uint64_t v35 = v32;
  *(void *)(StatusReg + 848) = v34;
  _s11Observation0A8TrackingV11_AccessListVSgWOcTm_2((uint64_t)v30, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v24, 1, v32) == 1)
  {
    _s11Observation0A8TrackingV11_AccessListVSgWOhTm_1((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  }
  else
  {
    uint64_t v36 = v21;
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v37(v21, v24, v32);
    long long v38 = v54;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v54, v36, v32);
    swift_beginAccess();
    uint64_t v39 = static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v39 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v39 + 2) + 1, 1, (unint64_t)v39);
      static ObservationRegistrar.lastestAccessLists = v39;
    }
    unint64_t v42 = *((void *)v39 + 2);
    unint64_t v41 = *((void *)v39 + 3);
    if (v42 >= v41 >> 1)
    {
      uint64_t v39 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, (unint64_t)v39);
      static ObservationRegistrar.lastestAccessLists = v39;
    }
    *((void *)v39 + 2) = v42 + 1;
    unint64_t v43 = (unint64_t)v39
        + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))
        + *(void *)(v31 + 72) * v42;
    uint64_t v35 = v62;
    v37((char *)v43, v38, v62);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v36, v35);
  }
  _s11Observation0A8TrackingV11_AccessListVSgWOhTm_1((uint64_t)v63, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  uint64_t v44 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v44)
  {
    uint64_t v63 = *(char ***)(v31 + 16);
    long long v45 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    uint64_t v46 = *(void *)(v31 + 72);
    unint64_t v61 = a2;
    uint64_t v62 = v46;
    unsigned int v47 = (void (**)(uint64_t, uint64_t))(v31 + 8);
    CFIndex v54 = (char *)static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    uint64_t v48 = v55;
    uint64_t v50 = v57;
    uint64_t v49 = (uint64_t)v58;
    uint64_t v51 = v59;
    uint64_t v52 = v56;
    do
    {
      ((void (*)(uint64_t, char *, uint64_t))v63)(v49, v45, v35);
      specialized installObservationSlow<A>(accessList:attribute:)(v49, v52, v51, v50, v48, v64);
      (*v47)(v49, v35);
      v45 += v62;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v60;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static AGSubgraphChildFlags.secondary.getter()
{
  return 1;
}

id specialized installObservationSlow<A>(accessList:attribute:)(uint64_t a1, uint64_t a2)
{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA90FD0, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA90FF8, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91020, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91048, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA90F30, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA90F58, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA90F80, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA90FA8, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA917C8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA917F0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA919F8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91A20, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA90E90, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA90EB8, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA90EE0, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA90F08, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91098, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA910C0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91868, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91890, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA910E8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91110, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA915E8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91610, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91408, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91430, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91138, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91160, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91688, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA916B0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA914A8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA914D0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA912C8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA912F0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA914F8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91520, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91318, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91340, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91458, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91480, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91278, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA912A0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91638, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91660, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91548, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91570, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91368, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91390, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91228, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91250, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA911D8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91200, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA916D8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91700, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91778, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA917A0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91728, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91750, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91908, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91930, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91598, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA915C0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA913B8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA913E0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA918B8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA918E0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91958, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91980, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA919A8, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA919D0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91818, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91840, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1, a2, (uint64_t)&unk_26FA91188, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA911B0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

id specialized installObservationSlow<A>(accessList:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v39 = a3;
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = type metadata accessor for ObservationTracking();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v34 - v16;
  id result = (id)AGGraphGetAttributeSubgraph2();
  if (result)
  {
    uint64_t v19 = result;
    uint64_t v37 = v11;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    int v21 = *MEMORY[0x263F288F8];
    uint64_t v38 = a6;
    if (CurrentAttribute == v21)
    {
      id v22 = (id)AGSubgraphGetCurrent();
      if (!v22) {
        goto LABEL_10;
      }
      uint64_t v23 = v22;
      id v24 = (id)AGSubgraphGetGraph();
    }
    else
    {
      id v24 = (id)AGGraphGetAttributeGraph();
    }
    if (AGGraphGetContext())
    {
      swift_retain();

      swift_weakInit();
      swift_weakAssign();
      swift_release();
      outlined init with take of WeakUncheckedSendable<GraphHost>((uint64_t)v42, (uint64_t)v43);
      unint64_t v35 = AGCreateWeakAttribute();
      unint64_t v36 = HIDWORD(v35);
      uint64_t v25 = type metadata accessor for ObservationTracking._AccessList();
      uint64_t v26 = *(void *)(v25 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v10, a1, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v25);
      ObservationTracking.init(_:)();
      uint64_t v27 = v37;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v37);
      unint64_t v28 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v29 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v29 + v28, v14, v27);
      uint64_t v30 = AGSubgraphAddObserver();
      swift_release();
      _s11Observation0A8TrackingV11_AccessListVSgWOcTm_2((uint64_t)v43, (uint64_t)v42, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v19;
      int v32 = v36;
      *(_DWORD *)(v31 + 24) = v35;
      *(_DWORD *)(v31 + 28) = v32;
      *(void *)(v31 + 32) = v30;
      outlined init with take of WeakUncheckedSendable<GraphHost>((uint64_t)v42, v31 + 40);
      id v33 = v19;
      static ObservationTracking._installTracking(_:willSet:didSet:)();

      swift_release();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v27);
      return (id)_s11Observation0A8TrackingV11_AccessListVSgWOhTm_1((uint64_t)v43, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
    }
    __break(1u);
LABEL_10:
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #2 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    id v22 = a6;
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
    _s11Observation0A8TrackingV11_AccessListVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking>, MEMORY[0x263F8F208], MEMORY[0x263F8E0F8]);
    uint64_t v14 = type metadata accessor for ObservationTracking();
    uint64_t v15 = *(void *)(v14 - 8);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_2461B9DC0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v17 + v16, a1, v14);
    _s11Observation0A8TrackingV11_AccessListVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AGSubgraphRef, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (AGSubgraphRef, Int), v13);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2461B9DC0;
    *(void *)(v18 + 32) = a2;
    *(void *)(v18 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a4;
    uint64_t v19 = one-time initialization token for _lock;
    id v20 = a2;
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v21 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    v22(a3, a5, a3, v17, v18);
    static Update.end()();
    _MovableLockUnlock(v21);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DefaultRule.weakValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, WeakValue, AssociatedTypeWitness);
    uint64_t v4 = v8;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v5 = 1;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);

  return v6(a1, v5, 1, AssociatedTypeWitness);
}

void DefaultRule.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static DefaultRule.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void))(a1 + 16))();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v4(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t DefaultRule.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v13 - v9;
  v13[1] = *v2;
  DefaultRule.weakValue.getter((uint64_t)v13 - v9);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v10, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t DefaultRule.description.getter()
{
  return specialized DefaultRule.description.getter();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DefaultRule<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static DefaultRule.initialValue.getter(*(void *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DefaultRule<A>()
{
  return specialized DefaultRule.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance DefaultRule<A>(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v16 - v11;
  static DefaultRule.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v14);
  v16[-2] = a2;
  v16[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v16[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DefaultRule<A>()
{
  return static AsyncAttribute.flags.getter();
}

uint64_t Attribute.overrideDefaultValue<A>(_:type:)()
{
  return AGGraphMutateAttribute();
}

Swift::Bool __swiftcall Attribute.invalidateValueIfNeeded()()
{
  char ValueState = AGGraphGetValueState();
  if ((ValueState & 1) == 0) {
    AGGraphInvalidateValue();
  }
  return (ValueState & 1) == 0;
}

Swift::Bool __swiftcall Attribute.allowsAsyncUpdate()()
{
  return (~AGGraphGetValueState() & 0x11) != 0;
}

uint64_t TreeElementFlags.rawValue.getter()
{
  return *v0;
}

uint64_t TreeValueFlags.rawValue.getter()
{
  return *v0;
}

uint64_t TreeValueFlags.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static TreeValueFlags.stateSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static TreeValueFlags.environmentObjectSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static TreeValueFlags.observedObjectSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

void static TreeValueFlags.appStorageSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static TreeValueFlags.sceneStorageSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 5;
}

uint64_t partial apply for closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AGTypeGetEnumTag();
  *a1 = result;
  return result;
}

uint64_t Attribute.toOptional.getter(int a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v5 = a1;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for ToOptional();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v1 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v6, v8, MEMORY[0x263F8E628], v1, MEMORY[0x263F8E658], v2);
  return v4;
}

uint64_t ToOptional.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v7 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, a1);
  int v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);

  return v5(a2, 0, 1, a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ToOptional<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ToOptional<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ToOptional.value.getter(*(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ToOptional<A>()
{
  return static AsyncAttribute.flags.getter();
}

uint64_t static AGGraphRef.startTracing(options:)(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0)
  {
    if (one-time initialization token for tracingOptions != -1) {
      swift_once();
    }
    uint64_t v1 = vars8;
  }
  return AGGraphStartTracing();
}

uint64_t static AGGraphRef.stopTracing()()
{
  return AGGraphStopTracing();
}

uint64_t specialized DefaultRule.description.getter()
{
  swift_getAssociatedTypeWitness();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 547916002;
}

uint64_t partial apply for closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t *a1)
{
  uint64_t result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for DefaultRule()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ToOptional()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in DefaultRule<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for DefaultRule<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TreeElementFlags and conformance TreeElementFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags;
  if (!lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags;
  if (!lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags;
  if (!lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags;
  if (!lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TreeValueFlags and conformance TreeValueFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags;
  if (!lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags;
  if (!lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags;
  if (!lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags;
  if (!lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags);
  }
  return result;
}

uint64_t dispatch thunk of static Defaultable.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static RemovableAttribute.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static RemovableAttribute.didReinsert(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static InvalidatableAttribute.willInvalidate(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

ValueMetadata *type metadata accessor for TreeElementFlags()
{
  return &type metadata for TreeElementFlags;
}

ValueMetadata *type metadata accessor for TreeValueFlags()
{
  return &type metadata for TreeValueFlags;
}

uint64_t instantiation function for generic protocol witness table for ToOptional<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ToOptional<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for specialized closure #1 in PreferenceTransform.value.getter(uint64_t a1)
{
  return specialized closure #1 in PreferenceTransform.value.getter(*(void (**)(uint64_t))a1, *(void *)(a1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_245F05868()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1)
{
  return specialized closure #2 in installObservationSlow<A>(accessList:attribute:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v1 + 40, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t v1;

  return specialized closure #2 in installObservationSlow<A>(accessList:attribute:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v1 + 40, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #2 in installObservationSlow<A>(accessList:attribute:));
}

uint64_t partial apply for closure #1 in ChildTransaction.value.getter(uint64_t (**a1)(uint64_t))
{
  return closure #1 in ChildTransaction.value.getter(a1, *(void *)(v1 + 16));
}

uint64_t sub_245F05928()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in PreferenceTransform.value.getter(void (**a1)(uint64_t))
{
  return specialized closure #1 in PreferenceTransform.value.getter(*a1, a1[1], *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_26FA91A48, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91A70, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t v1;

  return specialized closure #1 in PreferenceTransform.value.getter(*a1, a1[1], *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_26FA91A98, (uint64_t)_s7SwiftUI22installObservationSlow33_7DF024579E4FC31D4E92A33BBA0366D610accessList9attributey0D00D8TrackingV07_AccessO0V_14AttributeGraph0S0VyxGtlFyycfU_TA_0, (uint64_t)&unk_26FA91AC0, (uint64_t)partial apply for specialized closure #2 in installObservationSlow<A>(accessList:attribute:));
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a2;
  if (!*a2)
  {
    a3(255);
    uint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v1 = type metadata accessor for ObservationTracking();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t objectdestroy_12Tm()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t specialized closure #1 in closure #2 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return closure #1 in closure #2 in installObservationSlow<A>(accessList:attribute:)(a1, a2, a3, a4, a5);
}

uint64_t closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:)(a1);
}

BOOL static TouchType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TouchType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TouchType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int one-time initialization function for allTypes()
{
  Swift::Int result = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for allTypes);
  static TouchType.allTypes = result;
  return result;
}

uint64_t static TouchType.allTypes.getter()
{
  if (one-time initialization token for allTypes != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

unsigned char *storeEnumTagSinglePayload for TouchType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *Swift::Int result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245F05F30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *Swift::Int result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TouchType()
{
  return &type metadata for TouchType;
}

Swift::Bool __swiftcall ResettableGestureRule.resetIfNeeded()()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for GesturePhase();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v4 + 40))(v5, v4, v8);
  if (v11 == (*(unsigned int (**)(uint64_t, uint64_t))(v4 + 32))(v5, v4))
  {
    swift_getAssociatedTypeWitness();
    if (AGGraphGetOutputValue())
    {
      (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v5, v4);
      char v12 = GesturePhase.isTerminal.getter(v6);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if (v12)
      {
        $defer #1 <A>() in ResettableGestureRule.resetIfNeeded()(v3, v5, v4);
        return 0;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v5, v4);
  }
  $defer #1 <A>() in ResettableGestureRule.resetIfNeeded()(v3, v5, v4);
  return 1;
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance DelayedPhase<A>@<X0>(uint64_t a1@<X8>)
{
  return ResettableGestureRule<>.phaseValue.getter(a1);
}

uint64_t ResettableGestureRule<>.phaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t result = AGGraphGetOutputValue();
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
    return v4(a1, result, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance EventListenerPhase<A>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EventListenerPhase.Value();
  uint64_t WitnessTable = swift_getWitnessTable();
  return ResettableGestureRule<>.phaseValue.getter(a1, a2, WitnessTable);
}

uint64_t ResettableGestureRule<>.phaseValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v9 - v6;
  uint64_t result = AGGraphGetOutputValue();
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, result, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(AssociatedTypeWitness, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t $defer #1 <A>() in ResettableGestureRule.resetIfNeeded()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, a2, v7);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 48))(v10, a2, a3);
}

uint64_t dispatch thunk of ResettableGestureRule.phaseValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ResettableGestureRule.resetSeed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ResettableGestureRule.lastResetSeed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ResettableGestureRule.lastResetSeed.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ResettableGestureRule.lastResetSeed.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ResettableGestureRule.resetPhase()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for ProcessEnvironment()
{
  return &type metadata for ProcessEnvironment;
}

uint64_t one-time initialization function for tracingOptions()
{
  uint64_t result = (uint64_t)getenv("SWIFTUI_TRACE");
  if (result && (uint64_t result = atoi((const char *)result), (result & 0x80000000) != 0))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    static ProcessEnvironment.tracingOptions = result;
  }
  return result;
}

double FluidSpringAnimation.response.getter()
{
  return *(double *)v0;
}

void FluidSpringAnimation.response.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*FluidSpringAnimation.response.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double FluidSpringAnimation.dampingFraction.getter()
{
  return *(double *)(v0 + 8);
}

void FluidSpringAnimation.dampingFraction.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*FluidSpringAnimation.dampingFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double FluidSpringAnimation.blendDuration.getter()
{
  return *(double *)(v0 + 16);
}

void FluidSpringAnimation.blendDuration.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*FluidSpringAnimation.blendDuration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::FluidSpringAnimation __swiftcall FluidSpringAnimation.init(response:dampingFraction:blendDuration:)(Swift::Double response, Swift::Double dampingFraction, Swift::Double blendDuration)
{
  *uint64_t v3 = response;
  v3[1] = dampingFraction;
  v3[2] = blendDuration;
  result.blendDuration = blendDuration;
  result.dampingFraction = dampingFraction;
  result.response = response;
  return result;
}

uint64_t AnimationContext.springState.getter()
{
  uint64_t v0 = type metadata accessor for SpringState();
  uint64_t v1 = type metadata accessor for AnimationState();
  uint64_t WitnessTable = swift_getWitnessTable();
  return AnimationState.subscript.getter(v0, v1, v0, WitnessTable);
}

double _stdlib_squareRoot(double a1)
{
  return sqrt(a1);
}

uint64_t FluidSpringAnimation.velocity<A>(value:time:context:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SpringState();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v15 - v8;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 17);
  v15[1] = *(void *)a1;
  _OWORD v15[2] = v10;
  char v16 = v11;
  char v17 = v12;
  type metadata accessor for AnimationContext();
  AnimationContext.springState.getter();
  uint64_t v13 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a3, &v9[*(int *)(v6 + 36)], a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a3, 0, 1, a2);
}

uint64_t FluidSpringAnimation.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v45 = a2;
  uint64_t v56 = a1;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v50 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v46 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v48 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v44 = (char *)&v44 - v22;
  uint64_t v23 = type metadata accessor for SpringState();
  uint64_t v53 = *(void *)(v23 - 8);
  CFIndex v54 = (int *)v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v44 - v24;
  double v26 = *v6;
  uint64_t v28 = *(void *)a3;
  uint64_t v27 = *(void *)(a3 + 8);
  char v29 = *(unsigned char *)(a3 + 16);
  uint64_t v55 = a3;
  LOBYTE(a3) = *(unsigned char *)(a3 + 17);
  uint64_t v57 = v28;
  uint64_t v58 = v27;
  char v59 = v29;
  char v60 = a3;
  uint64_t v47 = type metadata accessor for AnimationContext();
  AnimationContext.springState.getter();
  uint64_t v57 = v28;
  uint64_t v58 = v27;
  char v59 = v29;
  char v60 = a3;
  swift_bridgeObjectRetain();
  uint64_t v30 = v45;
  uint64_t v49 = a5;
  Animation.velocity<A>(value:time:context:)(v45, (uint64_t)&v57, v56, a4, a5);
  swift_bridgeObjectRelease();
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v31(v15, 1, a4) == 1)
  {
    int v32 = v54;
    id v33 = v44;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v44, &v25[v54[9]], a4);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v15, v52);
    uint64_t v34 = v32;
  }
  else
  {
    id v33 = v44;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v44, v15, a4);
    uint64_t v34 = v54;
  }
  unint64_t v35 = *(__n128 (**)(char *, char *, uint64_t))(v16 + 40);
  __n128 v36 = v35(&v25[v34[9]], v33, a4);
  uint64_t v37 = v50;
  v36.n128_f64[0] = a6;
  Animation.animate<A>(value:time:context:)(v30, v55, v56, a4, v49, v50, v36);
  uint64_t v38 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v46, v30, a4);
  if (v31((char *)v37, 1, a4) == 1)
  {
    uint64_t v39 = v48;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v48, v38, a4);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v37, v52);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v38, a4);
    uint64_t v39 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v48, v37, a4);
  }
  v35(v25, v39, a4);
  uint64_t v40 = v54;
  *(double *)&v25[v54[11]] = a6;
  *(double *)&v25[v40[12]] = a6;
  type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(0, &lazy cache variable for type metadata for AnimationBox<FluidSpringAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))type metadata accessor for AnimationBox);
  uint64_t v41 = swift_dynamicCastClass();
  if (v41)
  {
    double v42 = *(double *)(v41 + 16);
    if (v26 != v42)
    {
      *(double *)&v25[v40[14]] = v42 - v26;
      *(double *)&v25[v40[13]] = a6;
    }
  }
  specialized AnimationContext.springState.setter((uint64_t)v25);
  (*(void (**)(char *, int *))(v53 + 8))(v25, v40);
  return 1;
}

double FluidSpringAnimation.function.getter@<D0>(uint64_t a1@<X8>)
{
  SpringAnimation.function.getter(a1);
  return result;
}

void FluidSpringAnimation.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *v0;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

BOOL static FluidSpringAnimation.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

Swift::Int FluidSpringAnimation.hashValue.getter()
{
  return Hasher._finalize()();
}

void protocol witness for InternalCustomAnimation.function.getter in conformance FluidSpringAnimation(uint64_t a1@<X8>)
{
  if (*v1 <= 0.0) {
    double v3 = INFINITY;
  }
  else {
    double v3 = 6.28318531 / *v1 * (6.28318531 / *v1);
  }
  _stdlib_squareRoot(v3);
  SpringAnimation.function.getter(a1);
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance FluidSpringAnimation@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return FluidSpringAnimation.velocity<A>(value:time:context:)(a1, a2, a3);
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance FluidSpringAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FluidSpringAnimation()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FluidSpringAnimation()
{
  return Hasher._finalize()();
}

uint64_t SpringState.init()@<X0>(uint64_t a1@<X8>)
{
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  Swift::UInt64 v2 = (int *)type metadata accessor for SpringState();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t result = dispatch thunk of static AdditiveArithmetic.zero.getter();
  *(void *)(a1 + v2[11]) = 0;
  *(void *)(a1 + v2[12]) = 0;
  *(void *)(a1 + v2[13]) = 0;
  *(void *)(a1 + v2[14]) = 0;
  return result;
}

uint64_t protocol witness for static AnimationStateKey.defaultValue.getter in conformance SpringState<A>(uint64_t a1)
{
  return static SpringState.defaultValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

double *static Animation.interactiveSpring(response:dampingFraction:blendDuration:)(double a1, double a2, double a3)
{
  type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))type metadata accessor for InternalAnimationBox);
  uint64_t result = (double *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void *FluidSpringAnimation.encode(to:)(void *result)
{
  Swift::UInt64 v2 = v1;
  double v3 = result;
  double v5 = *v2;
  double v4 = v2[1];
  double v6 = v2[2];
  if (*v2 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    uint64_t v7 = v3[1];
    uint64_t result = (void *)(v7 + 8);
    if (__OFADD__(v7, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v7) = v5;
      goto LABEL_5;
    }
    uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)uint64_t result = v5;
    if (v4 == 0.0) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
LABEL_5:
  if (v4 == 0.0) {
    goto LABEL_9;
  }
LABEL_6:
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  uint64_t v8 = v3[1];
  uint64_t result = (void *)(v8 + 8);
  if (__OFADD__(v8, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(double *)(*v3 + v8) = v4;
    goto LABEL_9;
  }
  uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(double *)uint64_t result = v4;
LABEL_9:
  if (v6 == 0.0) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x19uLL);
  uint64_t v9 = v3[1];
  uint64_t result = (void *)(v9 + 8);
  if (__OFADD__(v9, 8))
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v3[2] < (uint64_t)result)
  {
LABEL_20:
    uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)uint64_t result = v6;
    return result;
  }
  v3[1] = result;
  *(double *)(*v3 + v9) = v6;
  return result;
}

unint64_t FluidSpringAnimation.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  double v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  double v7 = 0.0;
  if (v5 < v6)
  {
    double v8 = 0.0;
    double v9 = 0.0;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v10 = v3[4];
        if (v5 < v10) {
          goto LABEL_15;
        }
        if (v10 < v5) {
          goto LABEL_61;
        }
        _OWORD v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_61:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      unint64_t v11 = result >> 3;
      if (result >> 3 == 3)
      {
        unint64_t v14 = result & 7;
        if (v14 != 5)
        {
          if (v14 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_64;
            }
            uint64_t v15 = (double *)v3[1];
            if (v6 < (unint64_t)v15 + result) {
              goto LABEL_61;
            }
            _OWORD v3[3] = 25;
            v3[4] = (char *)v15 + result;
          }
          else
          {
            if (v14 != 1) {
              goto LABEL_61;
            }
            uint64_t v15 = (double *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v15 + 1);
          if (v6 < (unint64_t)(v15 + 1)) {
            goto LABEL_61;
          }
          double v7 = *v15;
LABEL_7:
          v3[1] = v5;
          goto LABEL_8;
        }
        uint64_t v20 = (float *)v3[1];
        unint64_t v5 = (unint64_t)(v20 + 1);
        if (v6 < (unint64_t)(v20 + 1)) {
          goto LABEL_61;
        }
        float v21 = *v20;
        v3[1] = v5;
        double v7 = v21;
      }
      else if (v11 == 2)
      {
        unint64_t v16 = result & 7;
        if (v16 != 5)
        {
          if (v16 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_65;
            }
            uint64_t v17 = (double *)v3[1];
            if (v6 < (unint64_t)v17 + result) {
              goto LABEL_61;
            }
            _OWORD v3[3] = 17;
            v3[4] = (char *)v17 + result;
          }
          else
          {
            if (v16 != 1) {
              goto LABEL_61;
            }
            uint64_t v17 = (double *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v17 + 1);
          if (v6 < (unint64_t)(v17 + 1)) {
            goto LABEL_61;
          }
          double v8 = *v17;
          goto LABEL_7;
        }
        uint64_t v22 = (float *)v3[1];
        unint64_t v5 = (unint64_t)(v22 + 1);
        if (v6 < (unint64_t)(v22 + 1)) {
          goto LABEL_61;
        }
        float v23 = *v22;
        v3[1] = v5;
        double v8 = v23;
      }
      else
      {
        if (v11 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v5 = v3[1];
              goto LABEL_8;
            case 1uLL:
              unint64_t v5 = v3[1] + 8;
              goto LABEL_6;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_66;
              }
              unint64_t v5 = v3[1] + result;
LABEL_6:
              if (v6 >= v5) {
                goto LABEL_7;
              }
              goto LABEL_61;
            case 5uLL:
              unint64_t v5 = v3[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_61;
          }
        }
        unint64_t v12 = result & 7;
        if (v12 != 5)
        {
          if (v12 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              JUMPOUT(0x245F075A0);
            }
            uint64_t v13 = (double *)v3[1];
            if (v6 < (unint64_t)v13 + result) {
              goto LABEL_61;
            }
            _OWORD v3[3] = 9;
            v3[4] = (char *)v13 + result;
          }
          else
          {
            if (v12 != 1) {
              goto LABEL_61;
            }
            uint64_t v13 = (double *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v13 + 1);
          if (v6 < (unint64_t)(v13 + 1)) {
            goto LABEL_61;
          }
          double v9 = *v13;
          goto LABEL_7;
        }
        uint64_t v18 = (float *)v3[1];
        unint64_t v5 = (unint64_t)(v18 + 1);
        if (v6 < (unint64_t)(v18 + 1)) {
          goto LABEL_61;
        }
        float v19 = *v18;
        v3[1] = v5;
        double v9 = v19;
      }
LABEL_8:
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  double v8 = 0.0;
  double v9 = 0.0;
LABEL_4:
  _OWORD v3[3] = 0;
  *a2 = v9;
  a2[1] = v8;
  a2[2] = v7;
  return result;
}

void *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance FluidSpringAnimation(void *result)
{
  uint64_t v2 = v1;
  double v3 = result;
  double v5 = *v2;
  double v4 = v2[1];
  double v6 = v2[2];
  if (*v2 == 0.0)
  {
    if (v4 == 0.0) {
      goto LABEL_3;
    }
    goto LABEL_9;
  }
  ProtobufEncoder.encodeVarint(_:)(9uLL);
  uint64_t v7 = v3[1];
  int64_t v8 = v7 + 8;
  if (__OFADD__(v7, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= v8)
  {
    v3[1] = v8;
    uint64_t result = (void *)(*v3 + v7);
    goto LABEL_8;
  }
  uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)(v8);
LABEL_8:
  *(double *)uint64_t result = v5;
  if (v4 == 0.0)
  {
LABEL_3:
    if (v6 == 0.0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_9:
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  uint64_t v9 = v3[1];
  int64_t v10 = v9 + 8;
  if (__OFADD__(v9, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= v10)
  {
    v3[1] = v10;
    uint64_t result = (void *)(*v3 + v9);
    goto LABEL_12;
  }
  uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)(v10);
LABEL_12:
  *(double *)uint64_t result = v4;
  if (v6 == 0.0) {
    return result;
  }
LABEL_13:
  ProtobufEncoder.encodeVarint(_:)(0x19uLL);
  uint64_t v11 = v3[1];
  int64_t v12 = v11 + 8;
  if (__OFADD__(v11, 8))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v3[2] < v12)
  {
LABEL_23:
    uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)(v12);
    goto LABEL_16;
  }
  v3[1] = v12;
  uint64_t result = (void *)(*v3 + v11);
LABEL_16:
  *(double *)uint64_t result = v6;
  return result;
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance FluidSpringAnimation@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return FluidSpringAnimation.init(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAnimation.leafProtobufTag.getter in conformance FluidSpringAnimation()
{
  return 3;
}

uint64_t specialized AnimationContext.springState.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpringState();
  uint64_t v3 = type metadata accessor for AnimationState();
  swift_getWitnessTable();

  return specialized AnimationState.subscript.setter(a1, v2, v3, v2);
}

ValueMetadata *type metadata accessor for FluidSpringAnimation()
{
  return &type metadata for FluidSpringAnimation;
}

uint64_t *initializeBufferWithCopyOfBuffer for SpringState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = v7 + 7;
  unint64_t v11 = ((((((((v7 + 7 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    uint64_t *v4 = *a2;
    double v4 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v8;
    unint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v16(a1, a2, v5);
    unint64_t v17 = ((unint64_t)a2 + v9) & v15;
    v16((uint64_t *)(((unint64_t)v4 + v9) & v15), (uint64_t *)v17, v5);
    unint64_t v18 = (v9 + v17) & v15;
    v16((uint64_t *)((v9 + (((unint64_t)v4 + v9) & v15)) & v15), (uint64_t *)v18, v5);
    float v19 = (void *)((v10 + ((v9 + (((unint64_t)v4 + v9) & v15)) & v15)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)((v10 + v18) & 0xFFFFFFFFFFFFFFF8);
    void *v19 = *v20;
    float v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *float v21 = *v22;
    float v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    *float v23 = *v24;
    *(void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for SpringState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v9(v7, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v9)((v6 + v7) & ~v5, v3);
}

uint64_t initializeWithCopy for SpringState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  uint64_t v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  int64_t v12 = (void *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for SpringState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  uint64_t v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  int64_t v12 = (void *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for SpringState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  uint64_t v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  int64_t v12 = (void *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for SpringState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  uint64_t v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  int64_t v12 = (void *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpringState(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    unint64_t v7 = ((((((((v6
               + ((v6
                 + *(unsigned __int8 *)(v4 + 80)
                 + ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
               + 7) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v8 = a2 - v5;
    uint64_t v9 = v7 & 0xFFFFFFF8;
    if ((v7 & 0xFFFFFFF8) != 0) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = v8 + 1;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v7);
        if (!v13) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v7);
        if (v13) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F07FF4);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v7);
        if (!v13) {
          break;
        }
LABEL_18:
        int v14 = v13 - 1;
        if (v9)
        {
          int v14 = 0;
          LODWORD(v9) = *a1;
        }
        return v5 + (v9 | v14) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for SpringState(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  size_t v9 = ((((((((*(void *)(v6 + 64)
             + ((*(void *)(v6 + 64)
               + *(unsigned __int8 *)(v7 + 80)
               + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
             + 7) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v8 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_14:
      switch(v13)
      {
        case 1:
          a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v9] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unint64_t v17 = *(void (**)(void))(v7 + 56);
            v17();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v10 = a3 - v8;
    if (((((((((*(_DWORD *)(v6 + 64)
               + ((*(_DWORD *)(v6 + 64)
                 + *(unsigned __int8 *)(v6 + 80)
                 + ((*(_DWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v6 + 80))
               + 7) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v11 = v10 + 1;
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_14;
    }
  }
  if (v9) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  if (v9)
  {
    unsigned int v16 = ~v8 + a2;
    bzero(a1, v9);
    *(_DWORD *)a1 = v16;
  }
  switch(v13)
  {
    case 1:
      a1[v9] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v9] = v15;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245F081E4);
    case 4:
      *(_DWORD *)&a1[v9] = v15;
      break;
    default:
      return;
  }
}

uint64_t sub_245F0820C()
{
  return swift_deallocObject();
}

uint64_t sub_245F0821C()
{
  return swift_deallocObject();
}

double Text.Effect.Metrics.offsetForCenterAlignment(other:t:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7 = a1 * a5 + (1.0 - a5) * a6;
  double v8 = v7 + a2 * a5 + (1.0 - a5) * a7 - (a6 + a7);
  BOOL v9 = v8 <= 0.0;
  double v10 = v7 + fabs(v8) * 0.5;
  double v11 = v8 * 0.5 + a6;
  if (v9)
  {
    double v11 = a6;
    double v7 = v10;
  }
  return v7 - v11;
}

uint64_t specialized static Text.Effect.Base<>.animatorPhase(from:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 6710895 && a2 == 0xE300000000000000) {
    return 0;
  }
  uint64_t v5 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v5 = 1;
    if (a1 != 28271 || a2 != 0xE200000000000000)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        return 1;
      }
      else {
        return 2;
      }
    }
  }
  return v5;
}

uint64_t protocol witness for static Text.Effect.Base.animatorPhase(from:) in conformance SmallTextEffect()
{
  return 0x746C7561666564;
}

uint64_t protocol witness for Text.Effect.DurationProvider.animationInterval(for:) in conformance GlimmerTextEffect.Timing()
{
  return 0;
}

unsigned char *protocol witness for static Text.Effect.Base.animatorPhase(after:) in conformance GlimmerTextEffect@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  return result;
}

uint64_t protocol witness for static Text.Effect.Base.animatorPhase(from:) in conformance GlimmerTextEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized static Text.Effect.Base<>.animatorPhase(from:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for static Text.Effect.Base.animatorPhase(from:) in conformance GlimmerTextEffect(unsigned char *a1)
{
  if (*a1) {
    return 28271;
  }
  else {
    return 6710895;
  }
}

void protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance GradientForegroundTextEffect(uint64_t a1@<X5>, char a2@<W6>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(unsigned char *)(a3 + 8) = a2 & 1;
}

double protocol witness for static Text.Effect.Base.delay(for:duration:) in conformance BigTextEffect(double a1)
{
  return a1 * 0.85;
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance Text.Effect.DefaultAnimatorPhase@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746C7561666564 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance Text.Effect.OnOffAnimatorPhase@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Text.Effect.OnOffAnimatorPhase.init(_:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Text.Effect.OnOffAnimatorPhase()
{
  if (*v0) {
    return 28271;
  }
  else {
    return 6710895;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Identifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Identifier(a1, a2, MEMORY[0x263F8E7D0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Identifier(a1, a2, a3, MEMORY[0x263F8E7D0]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.RelativeIdentifierKey()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Text.Effect.RelativeIdentifierKey()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.RelativeIdentifierKey()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.RelativeIdentifierKey(void *result, void *a2)
{
  if (*result != *a2) {
    return 0;
  }
  uint64_t v2 = a2[1];
  uint64_t v3 = result[1];
  if (!__OFSUB__(v2, v3)) {
    return (void *)(v2 == v3);
  }
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Phase.Storage()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Swift::UInt v2 = 1;
  }
  else
  {
    if (v1 != 3)
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v1 & 1);
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 2;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Text.Effect.Phase.Storage()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    Swift::UInt v2 = 1;
    goto LABEL_5;
  }
  if (v1 == 3)
  {
    Swift::UInt v2 = 2;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Swift::UInt8 v3 = v1 & 1;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Phase.Storage()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Swift::UInt v2 = 1;
  }
  else
  {
    if (v1 != 3)
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v1 & 1);
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 2;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Phase.Storage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL v4 = v3 == 2;
  BOOL v5 = v3 == 3;
  int v6 = v3 & 0xFE;
  char v7 = ((v2 & 1) == 0) ^ v3;
  if (v6 == 2) {
    char v7 = 0;
  }
  if (v2 == 3) {
    char v7 = v5;
  }
  if (v2 == 2) {
    return v4;
  }
  else {
    return v7;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Phase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v2 != 3) {
    return (v3 & 0xFE) != 2 && ((((v2 & 1) == 0) ^ v3) & 1) != 0;
  }
  return v3 == 3;
}

Swift::Void __swiftcall Text.Effect.DrawingState.scale(by:)(Swift::Double by)
{
  float64x2_t v2 = vmulq_n_f64(v1[1], by);
  *int v1 = vmulq_n_f64(*v1, by);
  v1[1] = v2;
  float64x2_t v3 = vmulq_n_f64(v1[3], by);
  v1[2] = vmulq_n_f64(v1[2], by);
  v1[3] = v3;
  v1[4].f64[0] = v1[4].f64[0] * by;
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance Text.Effect.DrawingState()
{
  return *v0 * *v0
       + v0[1] * v0[1]
       + v0[2] * v0[2]
       + v0[3] * v0[3]
       + v0[4] * v0[4]
       + v0[5] * v0[5]
       + v0[6] * v0[6]
       + v0[7] * v0[7]
       + v0[8] * v0[8];
}

double protocol witness for static AdditiveArithmetic.zero.getter in conformance Text.Effect.DrawingState@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  double result = *(double *)&qword_268F73670;
  char v3 = byte_268F73678;
  long long v4 = xmmword_268F73640;
  *(_OWORD *)a1 = static Text.Effect.DrawingState.zero;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = xmmword_268F73660;
  *(_OWORD *)(a1 + 32) = xmmword_268F73650;
  *(_OWORD *)(a1 + 48) = v5;
  *(double *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 72) = v3;
  return result;
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Text.Effect.DrawingState@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = *(double *)(a1 + 64) + a2[4].f64[0];
  float64x2_t v4 = vaddq_f64(*(float64x2_t *)(a1 + 16), a2[1]);
  *(float64x2_t *)a3 = vaddq_f64(*(float64x2_t *)a1, *a2);
  *(float64x2_t *)(a3 + 16) = v4;
  float64x2_t v5 = vaddq_f64(*(float64x2_t *)(a1 + 48), a2[3]);
  char v6 = *(unsigned char *)(a1 + 72);
  *(float64x2_t *)(a3 + 32) = vaddq_f64(*(float64x2_t *)(a1 + 32), a2[2]);
  *(float64x2_t *)(a3 + 48) = v5;
  *(double *)(a3 + 64) = result;
  *(unsigned char *)(a3 + 72) = v6;
  return result;
}

float64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Text.Effect.DrawingState(float64x2_t *a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  _OWORD v5[2] = *(float64x2_t *)(a2 + 32);
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)(a2 + 57);
  float64x2_t v3 = *(float64x2_t *)(a2 + 16);
  v5[0] = *(float64x2_t *)a2;
  v5[1] = v3;
  return specialized static Text.Effect.DrawingState.+= infix(_:_:)(a1, v5);
}

double protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Text.Effect.DrawingState@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = *(double *)(a1 + 64) - a2[4].f64[0];
  float64x2_t v4 = vsubq_f64(*(float64x2_t *)(a1 + 16), a2[1]);
  *(float64x2_t *)a3 = vsubq_f64(*(float64x2_t *)a1, *a2);
  *(float64x2_t *)(a3 + 16) = v4;
  float64x2_t v5 = vsubq_f64(*(float64x2_t *)(a1 + 48), a2[3]);
  char v6 = *(unsigned char *)(a1 + 72);
  *(float64x2_t *)(a3 + 32) = vsubq_f64(*(float64x2_t *)(a1 + 32), a2[2]);
  *(float64x2_t *)(a3 + 48) = v5;
  *(double *)(a3 + 64) = result;
  *(unsigned char *)(a3 + 72) = v6;
  return result;
}

float64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Text.Effect.DrawingState(float64x2_t *a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  _OWORD v5[2] = *(float64x2_t *)(a2 + 32);
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)(a2 + 57);
  float64x2_t v3 = *(float64x2_t *)(a2 + 16);
  v5[0] = *(float64x2_t *)a2;
  v5[1] = v3;
  return specialized static Text.Effect.DrawingState.-= infix(_:_:)(a1, v5);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.DrawingState(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v7[2] = a1[2];
  v8[0] = v2;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a1 + 57);
  long long v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  long long v4 = a2[3];
  void v9[2] = a2[2];
  v10[0] = v4;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a2 + 57);
  long long v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  return specialized static Text.Effect.DrawingState.== infix(_:_:)((uint64_t)v7, (uint64_t)v9);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.GlyphIndex(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Identifier(a1, a2, MEMORY[0x263F8E7C8]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Identifier(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.GlyphIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Identifier(a1, a2, a3, MEMORY[0x263F8E7C8]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

float64x2_t Text.Effect.CubicStates.applying(weights:)@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v6 = *(double *)(v5 + 64) * a2 + *(double *)(v5 + 144) * a3 + *(double *)(v5 + 224) * a4 + *(double *)(v5 + 304) * a5;
  float64x2_t v7 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v5 + 16), a2), vmulq_n_f64(*(float64x2_t *)(v5 + 96), a3)), vmulq_n_f64(*(float64x2_t *)(v5 + 176), a4)), vmulq_n_f64(*(float64x2_t *)(v5 + 256), a5));
  *(float64x2_t *)a1 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)v5, a2), vmulq_n_f64(*(float64x2_t *)(v5 + 80), a3)), vmulq_n_f64(*(float64x2_t *)(v5 + 160), a4)), vmulq_n_f64(*(float64x2_t *)(v5 + 240), a5));
  *(float64x2_t *)(a1 + 16) = v7;
  float64x2_t v8 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v5 + 32), a2), vmulq_n_f64(*(float64x2_t *)(v5 + 112), a3)), vmulq_n_f64(*(float64x2_t *)(v5 + 192), a4)), vmulq_n_f64(*(float64x2_t *)(v5 + 272), a5));
  char v9 = *(unsigned char *)(v5 + 72);
  float64x2_t result = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v5 + 48), a2), vmulq_n_f64(*(float64x2_t *)(v5 + 128), a3)), vmulq_n_f64(*(float64x2_t *)(v5 + 208), a4)), vmulq_n_f64(*(float64x2_t *)(v5 + 288), a5));
  *(float64x2_t *)(a1 + 32) = v8;
  *(float64x2_t *)(a1 + 48) = result;
  *(double *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = v9;
  return result;
}

void Text.Effect.AnyLayoutState.isEqual(to:)()
{
}

void Text.Effect.AnyLayoutState.hash(into:)()
{
}

void Text.Effect.AnyLayoutState.name.getter()
{
}

uint64_t type metadata accessor for Text.Effect.AnyLayoutState()
{
  return self;
}

uint64_t type metadata completion function for Text.Effect.ConcreteLayoutState()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Text.Effect.ConcreteLayoutState.__allocating_init(state:)(uint64_t a1)
{
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)(a1, (void (*)(uint64_t))Text.Effect.ConcreteLayoutState.init(state:));
}

uint64_t Text.Effect.ConcreteLayoutState.init(state:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 128);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v1;
}

uint64_t Text.Effect.ConcreteLayoutState.isEqual(to:)()
{
  uint64_t v1 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  float64x2_t v8 = (char *)&v16 - v7;
  uint64_t v9 = swift_dynamicCastClass();
  if (v9)
  {
    uint64_t v10 = v9;
    double v11 = (char *)v0 + *(void *)(v1 + 128);
    int v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v12(v8, v11, AssociatedTypeWitness);
    v12(v5, (char *)(v10 + *(void *)(*(void *)v10 + 128)), AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v5, AssociatedTypeWitness);
    v14(v8, AssociatedTypeWitness);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t Text.Effect.ConcreteLayoutState.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  double v4 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))((char *)&v8 - v5, &v0[*(void *)(v1 + 128)], AssociatedTypeWitness, v4);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcreteLayoutState.name.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  double v4 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)v8 - v5;
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))((char *)v8 - v5, &v0[*(void *)(v1 + 128)], AssociatedTypeWitness, v4);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
  return v8[0];
}

uint64_t Text.Effect.ConcreteLayoutState.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(v1, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcreteLayoutState.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t Text.Effect.ConcreteLayoutState.__deallocating_deinit()
{
  return Text.Effect.ConcreteLayoutState.__deallocating_deinit((void (*)(void))Text.Effect.ConcreteLayoutState.deinit);
}

uint64_t type metadata accessor for Text.Effect.ConcreteLayoutState()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Void __swiftcall Text.Effect.AnyAnimationInfo.clearCaches()()
{
}

Swift::Void __swiftcall Text.Effect.AnyAnimationInfo.clearFrameCache()()
{
}

void Text.Effect.AnyAnimationInfo.isSettled.getter()
{
}

Swift::Void __swiftcall Text.Effect.AnyAnimationInfo.restart()()
{
}

uint64_t type metadata accessor for Text.Effect.AnyAnimationInfo()
{
  return self;
}

void Text.Effect.AnyPhase.description.getter()
{
}

void Text.Effect.AnyPhase.isEqual(to:)()
{
}

void Text.Effect.AnyPhase.hash(into:)()
{
}

void Text.Effect.AnyPhase.isDefaultPhase.getter()
{
}

void Text.Effect.AnyPhase.nextPhase.getter()
{
}

void Text.Effect.AnyPhase.requireAdvancedDrawing.getter()
{
}

uint64_t type metadata accessor for Text.Effect.AnyPhase()
{
  return self;
}

uint64_t type metadata completion function for Text.Effect.ConcretePhase()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.AnyPhase()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 96))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Text.Effect.AnyPhase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.AnyPhase()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 96))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.AnyPhase(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88))(*a2) & 1;
}

uint64_t Text.Effect.ConcretePhase.__allocating_init(_:)(uint64_t a1)
{
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)(a1, (void (*)(uint64_t))Text.Effect.ConcretePhase.init(_:));
}

uint64_t Text.Effect.ConcretePhase.init(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 160);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v1;
}

uint64_t Text.Effect.ConcretePhase.isEqual(to:)()
{
  uint64_t v1 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = swift_dynamicCastClass();
  if (v9)
  {
    uint64_t v10 = v9;
    double v11 = (char *)v0 + *(void *)(v1 + 160);
    int v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v12(v8, v11, AssociatedTypeWitness);
    v12(v5, (char *)(v10 + *(void *)(*(void *)v10 + 160)), AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v5, AssociatedTypeWitness);
    v14(v8, AssociatedTypeWitness);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t Text.Effect.ConcretePhase.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  double v4 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))((char *)&v8 - v5, &v0[*(void *)(v1 + 160)], AssociatedTypeWitness, v4);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcretePhase.description.getter()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)v0 + 152) + 96))(v0 + *(void *)(*(void *)v0 + 160));
}

uint64_t Text.Effect.ConcretePhase.isDefaultPhase.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 152);
  uint64_t v3 = *(void *)(*v0 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  double v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v15 - v10, (uint64_t)v0 + *(void *)(v1 + 160), AssociatedTypeWitness, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 72))(v3, v2);
  swift_getAssociatedConformanceWitness();
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, AssociatedTypeWitness);
  v13(v11, AssociatedTypeWitness);
  return v12 & 1;
}

uint64_t Text.Effect.ConcretePhase.nextPhase.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 152);
  uint64_t v3 = *(void *)(*v0 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  double v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, (uint64_t)v0 + *(void *)(v1 + 160), AssociatedTypeWitness, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 80))(v7, v3, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  uint64_t v12 = swift_allocObject();
  Text.Effect.ConcretePhase.init(_:)((uint64_t)v11);
  return v12;
}

uint64_t Text.Effect.ConcretePhase.requireAdvancedDrawing.getter()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)v0 + 152) + 104))(v0 + *(void *)(*(void *)v0 + 160)) & 1;
}

uint64_t Text.Effect.ConcretePhase.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(v1, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcretePhase.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t Text.Effect.ConcretePhase.__deallocating_deinit()
{
  return Text.Effect.ConcreteLayoutState.__deallocating_deinit((void (*)(void))Text.Effect.ConcretePhase.deinit);
}

uint64_t type metadata accessor for Text.Effect.ConcretePhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Text.Effect.AnyConfiguration()
{
  return self;
}

uint64_t type metadata completion function for Text.Effect.ConcreteConfiguration()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Text.Effect.ConcreteConfiguration.__allocating_init(_:)(uint64_t a1)
{
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)(a1, (void (*)(uint64_t))Text.Effect.ConcreteConfiguration.init(_:));
}

uint64_t Text.Effect.ConcreteLayoutState.__allocating_init(state:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = swift_allocObject();
  a2(a1);
  return v4;
}

uint64_t Text.Effect.ConcreteConfiguration.init(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v1;
}

uint64_t Text.Effect.ConcreteConfiguration.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(v1, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcreteConfiguration.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t Text.Effect.ConcreteConfiguration.__deallocating_deinit()
{
  return Text.Effect.ConcreteLayoutState.__deallocating_deinit((void (*)(void))Text.Effect.ConcreteConfiguration.deinit);
}

uint64_t Text.Effect.ConcreteLayoutState.__deallocating_deinit(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.ConcreteConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

void AnyTextAnimation.name.getter()
{
}

void AnyTextAnimation.duration(from:to:variant:context:)()
{
}

void AnyTextAnimation.phase(from:)()
{
}

void AnyTextAnimation.defaultAnimatorPhase.getter()
{
}

void AnyTextAnimation.configuration(from:)()
{
}

void AnyTextAnimation.states.getter()
{
}

void AnyTextAnimation.lineBreakingState.getter()
{
}

void AnyTextAnimation.defaultDrawingState.getter()
{
}

void AnyTextAnimation.updateInfo(_:context:)()
{
}

void AnyTextAnimation.delay(for:duration:)()
{
}

void AnyTextAnimation.saveSnapshot(animationController:)()
{
}

void AnyTextAnimation.restoreSnapshot(_:context:)()
{
}

void AnyTextAnimation.needsUpdate(_:at:context:)()
{
}

id AnyTextAnimation.__deallocating_deinit()
{
  return AnyTextAnimation.__deallocating_deinit(type metadata accessor for AnyTextAnimation);
}

uint64_t type metadata accessor for AnyTextAnimation()
{
  return self;
}

void protocol witness for Identifiable.id.getter in conformance AnyTextAnimation(void *a1@<X8>)
{
  *a1 = *(void *)(*v1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
}

void AnyTextEffect.resolve(_:ranges:in:)()
{
}

void AnyTextEffect.lineBreakingMetrics(_:ranges:context:)()
{
}

void AnyTextEffect.metrics(_:ranges:at:context:)()
{
}

void AnyTextEffect.widthDifference(_:ranges:at:context:)()
{
}

void AnyTextEffect.appendInteractionMetrics(for:to:at:context:)()
{
}

Swift::Double_optional __swiftcall AnyTextEffect.staticUnitProgress()()
{
  char v0 = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  result.SwiftUI::GraphHost::ConstantID value = v1;
  result.is_nil = v0;
  return result;
}

void AnyTextEffect.clipDrawingBounds.getter()
{
}

id AnyTextEffect.__deallocating_deinit()
{
  return AnyTextAnimation.__deallocating_deinit(type metadata accessor for AnyTextEffect);
}

id AnyTextAnimation.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for AnyTextEffect()
{
  return self;
}

uint64_t destroy for Text.Effect.State()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Text.Effect.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v3;
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Text.Effect.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)Swift::Double_optional result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.State()
{
  return &type metadata for Text.Effect.State;
}

ValueMetadata *type metadata accessor for NoTextEffectState()
{
  return &type metadata for NoTextEffectState;
}

ValueMetadata *type metadata accessor for Text.Effect.Metrics()
{
  return &type metadata for Text.Effect.Metrics;
}

uint64_t getEnumTagSinglePayload for Text.Effect.DrawingState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.DrawingState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)Swift::Double_optional result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 73) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.DrawingState()
{
  return &type metadata for Text.Effect.DrawingState;
}

ValueMetadata *type metadata accessor for Text.Effect.Variant()
{
  return &type metadata for Text.Effect.Variant;
}

ValueMetadata *type metadata accessor for Text.Effect.BasePhaseConfiguration()
{
  return &type metadata for Text.Effect.BasePhaseConfiguration;
}

ValueMetadata *type metadata accessor for Text.Effect.Identifier()
{
  return &type metadata for Text.Effect.Identifier;
}

ValueMetadata *type metadata accessor for Text.Effect()
{
  return &type metadata for Text.Effect;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Variant and conformance Text.Effect.Variant()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Variant and conformance Text.Effect.Variant;
  if (!lazy protocol witness table cache variable for type Text.Effect.Variant and conformance Text.Effect.Variant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Variant and conformance Text.Effect.Variant);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Text.Effect.DrawingState(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.AnyPhase and conformance Text.Effect.AnyPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.AnyPhase and conformance Text.Effect.AnyPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.AnyPhase and conformance Text.Effect.AnyPhase)
  {
    type metadata accessor for Text.Effect.AnyPhase();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.AnyPhase and conformance Text.Effect.AnyPhase);
  }
  return result;
}

uint64_t protocol witness for static Text.Effect.Base.animatorPhase(from:) in conformance SmallTextEffect@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (result == 0x746C7561666564 && a2 == 0xE700000000000000)
  {
    char v5 = 0;
  }
  else
  {
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v5 = result ^ 1;
  }
  *a3 = v5 & 1;
  return result;
}

BOOL specialized static Text.Effect.DrawingState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48)
      && *(double *)(a1 + 56) == *(double *)(a2 + 56)
      && *(double *)(a1 + 64) == *(double *)(a2 + 64)
      && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
}

float64_t specialized static Text.Effect.DrawingState.+= infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = vaddq_f64(a2[1], a1[1]);
  *a1 = vaddq_f64(*a2, *a1);
  a1[1] = v2;
  float64x2_t v3 = vaddq_f64(a2[3], a1[3]);
  a1[2] = vaddq_f64(a2[2], a1[2]);
  a1[3] = v3;
  float64_t result = a2[4].f64[0] + a1[4].f64[0];
  a1[4].f64[0] = result;
  return result;
}

float64_t specialized static Text.Effect.DrawingState.-= infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = vsubq_f64(a1[1], a2[1]);
  *a1 = vsubq_f64(*a1, *a2);
  a1[1] = v2;
  float64x2_t v3 = vsubq_f64(a1[3], a2[3]);
  a1[2] = vsubq_f64(a1[2], a2[2]);
  a1[3] = v3;
  float64_t result = a1[4].f64[0] - a2[4].f64[0];
  a1[4].f64[0] = result;
  return result;
}

unint64_t _atomic_fetch_add64()
{
  return atomic_fetch_add_explicit(static Text.Effect.Identifier.next, 1uLL, memory_order_relaxed);
}

uint64_t getEnumTagSinglePayload for Text.Effect.Phase.Storage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245F0BB4CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 1;
  if (v8 <= 1) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Text.Effect.Phase.Storage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x245F0BC34);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Phase.Storage()
{
  return &type metadata for Text.Effect.Phase.Storage;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Phase(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 2;
  }
  else {
    int v7 = -3;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for Text.Effect.Phase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245F0BDE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Phase()
{
  return &type metadata for Text.Effect.Phase;
}

ValueMetadata *type metadata accessor for Text.Effect.Progress()
{
  return &type metadata for Text.Effect.Progress;
}

ValueMetadata *type metadata accessor for Text.Effect.DrawingState.InteractionFlags()
{
  return &type metadata for Text.Effect.DrawingState.InteractionFlags;
}

ValueMetadata *type metadata accessor for Text.Effect.Variant.Storage()
{
  return &type metadata for Text.Effect.Variant.Storage;
}

ValueMetadata *type metadata accessor for Text.Effect.RelativeIdentifierKey()
{
  return &type metadata for Text.Effect.RelativeIdentifierKey;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Variant.Storage and conformance Text.Effect.Variant.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Variant.Storage and conformance Text.Effect.Variant.Storage;
  if (!lazy protocol witness table cache variable for type Text.Effect.Variant.Storage and conformance Text.Effect.Variant.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Variant.Storage and conformance Text.Effect.Variant.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Phase and conformance Text.Effect.Phase()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Phase and conformance Text.Effect.Phase;
  if (!lazy protocol witness table cache variable for type Text.Effect.Phase and conformance Text.Effect.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Phase and conformance Text.Effect.Phase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Phase.Storage and conformance Text.Effect.Phase.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Phase.Storage and conformance Text.Effect.Phase.Storage;
  if (!lazy protocol witness table cache variable for type Text.Effect.Phase.Storage and conformance Text.Effect.Phase.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Phase.Storage and conformance Text.Effect.Phase.Storage);
  }
  return result;
}

uint64_t specialized Text.Effect.OnOffAnimatorPhase.init(_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6710895 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28271 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

ValueMetadata *type metadata accessor for Text.Effect.DefaultDurationProvider()
{
  return &type metadata for Text.Effect.DefaultDurationProvider;
}

unsigned char *storeEnumTagSinglePayload for Text.Effect.DefaultAnimatorPhase(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245F0C344);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.DefaultAnimatorPhase()
{
  return &type metadata for Text.Effect.DefaultAnimatorPhase;
}

unsigned char *storeEnumTagSinglePayload for Text.Effect.Variant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245F0C448);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.OnOffAnimatorPhase()
{
  return &type metadata for Text.Effect.OnOffAnimatorPhase;
}

ValueMetadata *type metadata accessor for Text.Effect.GlyphIndex()
{
  return &type metadata for Text.Effect.GlyphIndex;
}

__n128 specialized Array.append(_:)(uint64_t a1)
{
  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[7 * v5];
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 32);
  v6[10] = *(void *)(a1 + 48);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 4) = v9;
  *((__n128 *)v6 + 2) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[6 * v5];
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v6 + 4) = v8;
  *((__n128 *)v6 + 2) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[7 * v5];
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 32);
  v6[10] = *(void *)(a1 + 48);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 4) = v9;
  *((__n128 *)v6 + 2) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[8 * v5];
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 2) = result;
  *((_OWORD *)v6 + 3) = v8;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[9 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  v6[12] = *(void *)(a1 + 64);
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 3) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[9 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  v6[12] = *(void *)(a1 + 64);
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 3) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[9 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  v6[12] = *(void *)(a1 + 64);
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 3) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[6 * v5];
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v6 + 4) = v8;
  *((__n128 *)v6 + 2) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[9 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  v6[12] = *(void *)(a1 + 64);
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 3) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[10 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v6 + 5) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v6 + 6) = v9;
  *((__n128 *)v6 + 3) = result;
  *((_OWORD *)v6 + 4) = v8;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[8 * v5];
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 2) = result;
  *((_OWORD *)v6 + 3) = v8;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[6 * v5];
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v6 + 4) = v8;
  *((__n128 *)v6 + 2) = result;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  long long v8;
  long long v9;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[8 * v5];
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 2) = result;
  *((_OWORD *)v6 + 3) = v8;
  *double v1 = v3;
  return result;
}

__n128 specialized Array.append(_:)(__n128 *a1)
{
  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = (__n128 *)&v3[5 * v5];
  __n128 result = *a1;
  __n128 v8 = a1[1];
  v6[4].n128_u64[0] = a1[2].n128_u64[0];
  _OWORD v6[2] = result;
  _WORD v6[3] = v8;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 result;
  __n128 v8;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = (__n128 *)&v3[5 * v5];
  __n128 result = *a1;
  __n128 v8 = a1[1];
  v6[4].n128_u64[0] = a1[2].n128_u64[0];
  _OWORD v6[2] = result;
  _WORD v6[3] = v8;
  *double v1 = v3;
  return result;
}

__n128 specialized Array.append(_:)(long long *a1)
{
  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[16 * v5];
  long long v7 = *a1;
  long long v8 = a1[1];
  long long v9 = a1[3];
  *((_OWORD *)v6 + 4) = a1[2];
  *((_OWORD *)v6 + 5) = v9;
  *((_OWORD *)v6 + 2) = v7;
  *((_OWORD *)v6 + 3) = v8;
  __n128 result = (__n128)a1[4];
  long long v11 = a1[5];
  long long v12 = a1[7];
  *((_OWORD *)v6 + 8) = a1[6];
  *((_OWORD *)v6 + 9) = v12;
  *((__n128 *)v6 + 6) = result;
  *((_OWORD *)v6 + 7) = v11;
  *double v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  long long v7;
  long long v8;
  __n128 result;
  long long v10;
  long long v11;

  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  unsigned int v6 = &v3[14 * v5];
  long long v7 = *a1;
  long long v8 = a1[2];
  *((_OWORD *)v6 + 3) = a1[1];
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 2) = v7;
  __n128 result = (__n128)a1[3];
  uint64_t v10 = a1[4];
  long long v11 = a1[6];
  *((_OWORD *)v6 + 7) = a1[5];
  *((_OWORD *)v6 + 8) = v11;
  *((__n128 *)v6 + 5) = result;
  *((_OWORD *)v6 + 6) = v10;
  *double v1 = v3;
  return result;
}

void *specialized Animation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>)
{
  void *(*v19)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v20;
  void *result;
  uint64_t v22;
  long long v23;
  char v24;
  void *(*v25)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v26;
  uint64_t v27;
  void v28[4];
  void v29[4];
  uint64_t v30;
  uint64_t v31;
  long long v32;
  char v33;

  *(double *)char v29 = a4;
  *(double *)&v29[1] = a5;
  *(double *)&_OWORD v29[2] = a6;
  *(double *)&v29[3] = a7;
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  if (v16 == MEMORY[0x263F8D538])
  {
    *(double *)uint64_t v28 = a4;
    __n128 result = (*(void *(**)(uint64_t *__return_ptr, void *, uint64_t, void, _UNKNOWN **, double))(*(void *)a2 + 120))(&v30, v28, a1, MEMORY[0x263F8D538], &protocol witness table for Double, a8);
    uint64_t v22 = v30;
    uint64_t v24 = v31;
  }
  else
  {
    uint64_t v17 = v16;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v17 == v18)
    {
      *(double *)uint64_t v28 = a4;
      *(double *)&v28[1] = a5;
      *(double *)&v28[2] = a6;
      *(double *)&uint64_t v28[3] = a7;
      uint64_t v25 = *(void *(**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double))(*(void *)a2 + 120);
      double v26 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v25(&v30, v28, a1, v17, v26, a8);
    }
    else
    {
      float v19 = *(void *(**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, unint64_t, double))(*(void *)a2 + 120);
      uint64_t v20 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
      __n128 result = v19(&v30, v29, a1, v17, v20, a8);
    }
    uint64_t v22 = v30;
    float v23 = v32;
    uint64_t v24 = v33;
  }
  uint64_t v27 = v31;
  *(void *)a3 = v22;
  *(void *)(a3 + 8) = v27;
  *(_OWORD *)(a3 + 16) = v23;
  *(unsigned char *)(a3 + 32) = v24 & 1;
  return result;
}

uint64_t specialized Animation.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  void (*v13)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v14;
  void (*v16)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v17;
  void v18[4];
  uint64_t v19;
  void v20[2];

  *(double *)uint64_t v20 = a3;
  *(double *)&v20[1] = a4;
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  if (v10 == MEMORY[0x263F8D538])
  {
    *(double *)uint64_t v18 = a3;
    (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, void, _UNKNOWN **, double))(*(void *)a2 + 120))(&v19, v18, a1, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    return v19;
  }
  else
  {
    uint64_t v11 = v10;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v11 == v12)
    {
      *(double *)uint64_t v18 = a3;
      *(double *)&v18[1] = a4;
      uint64_t v16 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double))(*(void *)a2 + 120);
      uint64_t v17 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v16(&v19, v18, a1, v11, v17, a5);
    }
    else
    {
      char v13 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, unint64_t, double))(*(void *)a2 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
      v13(&v19, v20, a1, v11, v14, a5);
    }
    return v19;
  }
}

uint64_t specialized Animation.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  void (*v15)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v16;
  void (*v18)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v19;
  void v20[4];
  uint64_t v21;
  void v22[3];

  *(double *)uint64_t v22 = a3;
  *(double *)&v22[1] = a4;
  *(double *)&_DWORD v22[2] = a5;
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  if (v12 == MEMORY[0x263F8D538])
  {
    *(double *)uint64_t v20 = a3;
    (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, void, _UNKNOWN **, double))(*(void *)a2 + 120))(&v21, v20, a1, MEMORY[0x263F8D538], &protocol witness table for Double, a6);
    return v21;
  }
  else
  {
    uint64_t v13 = v12;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v13 == v14)
    {
      *(double *)uint64_t v20 = a3;
      *(double *)&v20[1] = a4;
      *(double *)&v20[2] = a5;
      uint64_t v18 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double))(*(void *)a2 + 120);
      float v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v18(&v21, v20, a1, v13, v19, a6);
    }
    else
    {
      uint64_t v15 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double))(*(void *)a2 + 120);
      uint64_t v16 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v15(&v21, v22, a1, v13, v16, a6);
    }
    return v21;
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v16;
  void (*v18)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v19;
  void v20[4];
  uint64_t v21;
  void v22[3];

  *(double *)uint64_t v22 = a3;
  *(double *)&v22[1] = a4;
  *(double *)&_DWORD v22[2] = a5;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  if (v12 == MEMORY[0x263F8D538])
  {
    *(double *)uint64_t v20 = a3;
    (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, void, _UNKNOWN **, double))(*(void *)a2 + 120))(&v21, v20, a1, MEMORY[0x263F8D538], &protocol witness table for Double, a6);
    return v21;
  }
  else
  {
    uint64_t v13 = v12;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v13 == v14)
    {
      *(double *)uint64_t v20 = a3;
      *(double *)&v20[1] = a4;
      *(double *)&v20[2] = a5;
      uint64_t v18 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, double))(*(void *)a2 + 120);
      float v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v18(&v21, v20, a1, v13, v19, a6);
    }
    else
    {
      uint64_t v15 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, unint64_t, double))(*(void *)a2 + 120);
      uint64_t v16 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
      v15(&v21, v22, a1, v13, v16, a6);
    }
    return v21;
  }
}

void *specialized Animation.animate<A>(value:time:context:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  void *(*v17)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  char v19;
  long long v20;
  _OWORD v21[2];
  _OWORD v22[2];
  char v23;
  long long v24;
  long long v25;

  long long v9 = a1[1];
  uint64_t v24 = *a1;
  uint64_t v25 = v9;
  type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>();
  if (v10 == MEMORY[0x263F8D538])
  {
    *(void *)&v21[0] = v24;
    __n128 result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(v22, v21, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    char v16 = BYTE8(v22[0]);
    *(void *)a4 = *(void *)&v22[0];
    *(unsigned char *)(a4 + 8) = v16;
  }
  else
  {
    uint64_t v11 = v10;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v11 == v12)
    {
      v21[0] = v24;
      v21[1] = v25;
      uint64_t v17 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v17(v22, v21, a2, v11, v18, a5);
      float v19 = v23;
      uint64_t v20 = v22[1];
      *(_OWORD *)a4 = v22[0];
      *(_OWORD *)(a4 + 16) = v20;
      *(unsigned char *)(a4 + 32) = v19;
    }
    else
    {
      uint64_t v13 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
      return (void *)v13(&v24, a2, v11, v14, a5);
    }
  }
  return result;
}

{
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(long long *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v14;
  void *result;
  char v16;
  void *(*v17)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  char v19;
  long long v20;
  _OWORD v21[2];
  _OWORD v22[2];
  char v23;
  long long v24;
  long long v25;
  uint64_t v26;

  long long v9 = a1[1];
  uint64_t v24 = *a1;
  uint64_t v25 = v9;
  double v26 = *((void *)a1 + 4);
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  if (v10 == MEMORY[0x263F8D538])
  {
    *(void *)&v21[0] = v24;
    __n128 result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(v22, v21, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    char v16 = BYTE8(v22[0]);
    *(void *)a4 = *(void *)&v22[0];
    *(unsigned char *)(a4 + 8) = v16;
  }
  else
  {
    uint64_t v11 = v10;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v11 == v12)
    {
      v21[0] = v24;
      v21[1] = v25;
      uint64_t v17 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v17(v22, v21, a2, v11, v18, a5);
      float v19 = v23;
      uint64_t v20 = v22[1];
      *(_OWORD *)a4 = v22[0];
      *(_OWORD *)(a4 + 16) = v20;
      *(unsigned char *)(a4 + 32) = v19;
    }
    else
    {
      uint64_t v13 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
      return (void *)v13(&v24, a2, v11, v14, a5);
    }
  }
  return result;
}

{
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(long long *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v14;
  void *result;
  char v16;
  void *(*v17)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  char v19;
  long long v20;
  _OWORD v21[2];
  _OWORD v22[2];
  char v23;
  long long v24;
  _OWORD v25[2];

  long long v9 = a1[1];
  uint64_t v24 = *a1;
  v25[0] = v9;
  *(_OWORD *)((char *)v25 + 9) = *(long long *)((char *)a1 + 25);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  if (v10 == MEMORY[0x263F8D538])
  {
    *(void *)&v21[0] = v24;
    __n128 result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(v22, v21, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    char v16 = BYTE8(v22[0]);
    *(void *)a4 = *(void *)&v22[0];
    *(unsigned char *)(a4 + 8) = v16;
  }
  else
  {
    uint64_t v11 = v10;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v11 == v12)
    {
      v21[0] = v24;
      v21[1] = v25[0];
      uint64_t v17 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v17(v22, v21, a2, v11, v18, a5);
      float v19 = v23;
      uint64_t v20 = v22[1];
      *(_OWORD *)a4 = v22[0];
      *(_OWORD *)(a4 + 16) = v20;
      *(unsigned char *)(a4 + 32) = v19;
    }
    else
    {
      uint64_t v13 = *(uint64_t (**)(long long *, uint64_t, uint64_t, unint64_t, double))(*(void *)a3 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
      return (void *)v13(&v24, a2, v11, v14, a5);
    }
  }
  return result;
}

{
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(long long *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v14;
  void *result;
  char v16;
  void *(*v17)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  char v19;
  long long v20;
  _OWORD v21[2];
  _OWORD v22[2];
  char v23;
  long long v24;
  long long v25;
  long long v26;

  long long v9 = a1[1];
  uint64_t v24 = *a1;
  uint64_t v25 = v9;
  double v26 = a1[2];
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>();
  if (v10 == MEMORY[0x263F8D538])
  {
    *(void *)&v21[0] = v24;
    __n128 result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(v22, v21, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    char v16 = BYTE8(v22[0]);
    *(void *)a4 = *(void *)&v22[0];
    *(unsigned char *)(a4 + 8) = v16;
  }
  else
  {
    uint64_t v11 = v10;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v11 == v12)
    {
      v21[0] = v24;
      v21[1] = v25;
      uint64_t v17 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v17(v22, v21, a2, v11, v18, a5);
      float v19 = v23;
      uint64_t v20 = v22[1];
      *(_OWORD *)a4 = v22[0];
      *(_OWORD *)(a4 + 16) = v20;
      *(unsigned char *)(a4 + 32) = v19;
    }
    else
    {
      uint64_t v13 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      return (void *)v13(&v24, a2, v11, v14, a5);
    }
  }
  return result;
}

{
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(long long *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v14;
  void *result;
  char v16;
  void *(*v17)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  char v19;
  long long v20;
  _OWORD v21[2];
  _OWORD v22[2];
  char v23;
  long long v24;
  long long v25;
  long long v26;

  long long v9 = a1[1];
  uint64_t v24 = *a1;
  uint64_t v25 = v9;
  double v26 = a1[2];
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>();
  if (v10 == MEMORY[0x263F8D538])
  {
    *(void *)&v21[0] = v24;
    __n128 result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(v22, v21, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    char v16 = BYTE8(v22[0]);
    *(void *)a4 = *(void *)&v22[0];
    *(unsigned char *)(a4 + 8) = v16;
  }
  else
  {
    uint64_t v11 = v10;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v11 == v12)
    {
      v21[0] = v24;
      v21[1] = v25;
      uint64_t v17 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v17(v22, v21, a2, v11, v18, a5);
      float v19 = v23;
      uint64_t v20 = v22[1];
      *(_OWORD *)a4 = v22[0];
      *(_OWORD *)(a4 + 16) = v20;
      *(unsigned char *)(a4 + 32) = v19;
    }
    else
    {
      uint64_t v13 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>();
      return (void *)v13(&v24, a2, v11, v14, a5);
    }
  }
  return result;
}

{
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(long long *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v16;
  void *result;
  char v18;
  void *(*v19)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v20;
  char v21;
  long long v22;
  _OWORD v23[2];
  _OWORD v24[2];
  char v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;

  long long v9 = a1[5];
  uint64_t v30 = a1[4];
  uint64_t v31 = v9;
  int v32 = *((void *)a1 + 12);
  uint64_t v10 = a1[1];
  double v26 = *a1;
  uint64_t v27 = v10;
  uint64_t v11 = a1[3];
  uint64_t v28 = a1[2];
  char v29 = v11;
  type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
  if (v12 == MEMORY[0x263F8D538])
  {
    *(void *)&v23[0] = v26;
    __n128 result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(v24, v23, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    uint64_t v18 = BYTE8(v24[0]);
    *(void *)a4 = *(void *)&v24[0];
    *(unsigned char *)(a4 + 8) = v18;
  }
  else
  {
    uint64_t v13 = v12;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v13 == v14)
    {
      v23[0] = v26;
      v23[1] = v27;
      float v19 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v20 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v19(v24, v23, a2, v13, v20, a5);
      float v21 = v25;
      uint64_t v22 = v24[1];
      *(_OWORD *)a4 = v24[0];
      *(_OWORD *)(a4 + 16) = v22;
      *(unsigned char *)(a4 + 32) = v21;
    }
    else
    {
      uint64_t v15 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      char v16 = lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>();
      return (void *)v15(&v26, a2, v13, v16, a5);
    }
  }
  return result;
}

{
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(long long *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v14;
  void *result;
  char v16;
  void *(*v17)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  char v19;
  long long v20;
  _OWORD v21[2];
  _OWORD v22[2];
  char v23;
  long long v24;
  long long v25;
  long long v26;
  char v27;

  long long v9 = a1[1];
  uint64_t v24 = *a1;
  uint64_t v25 = v9;
  double v26 = a1[2];
  uint64_t v27 = *((unsigned char *)a1 + 48);
  type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>();
  if (v10 == MEMORY[0x263F8D538])
  {
    *(void *)&v21[0] = v24;
    __n128 result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(v22, v21, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    char v16 = BYTE8(v22[0]);
    *(void *)a4 = *(void *)&v22[0];
    *(unsigned char *)(a4 + 8) = v16;
  }
  else
  {
    uint64_t v11 = v10;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v11 == v12)
    {
      v21[0] = v24;
      v21[1] = v25;
      uint64_t v17 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v17(v22, v21, a2, v11, v18, a5);
      float v19 = v23;
      uint64_t v20 = v22[1];
      *(_OWORD *)a4 = v22[0];
      *(_OWORD *)(a4 + 16) = v20;
      *(unsigned char *)(a4 + 32) = v19;
    }
    else
    {
      uint64_t v13 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>();
      return (void *)v13(&v24, a2, v11, v14, a5);
    }
  }
  return result;
}

{
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *(*v13)(void *__return_ptr, long long *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v14;
  void *result;
  uint64_t v16;
  long long v17;
  void *(*v18)(void *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _OWORD v23[2];
  long long v24;
  long long v25;
  uint64_t v26;
  void v27[2];
  long long v28;
  uint64_t v29;
  char v30;

  long long v9 = a1[1];
  uint64_t v24 = *a1;
  uint64_t v25 = v9;
  double v26 = *((void *)a1 + 4);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  if (v10 == MEMORY[0x263F8D538])
  {
    *(void *)&v23[0] = v24;
    __n128 result = (*(void *(**)(void *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(v27, v23, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a5);
    char v16 = v27[0];
  }
  else
  {
    uint64_t v11 = v10;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v11 == v12)
    {
      v23[0] = v24;
      v23[1] = v25;
      uint64_t v18 = *(void *(**)(void *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      float v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      __n128 result = v18(v27, v23, a2, v11, v19, a5);
    }
    else
    {
      uint64_t v13 = *(void *(**)(void *__return_ptr, long long *, uint64_t, uint64_t, unint64_t, double))(*(void *)a3 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
      __n128 result = v13(v27, &v24, a2, v11, v14, a5);
    }
    char v16 = v27[0];
    uint64_t v17 = v28;
  }
  uint64_t v20 = v27[1];
  float v21 = v29;
  uint64_t v22 = v30;
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v20;
  *(_OWORD *)(a4 + 16) = v17;
  *(void *)(a4 + 32) = v21;
  *(unsigned char *)(a4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v22;
  return result;
}

void *specialized Animation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  void *(*v15)(_OWORD *__return_ptr, void *, uint64_t, ValueMetadata *, uint64_t, double);
  uint64_t v16;
  char v17;
  long long v18;
  void v19[4];
  _OWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a1;
  LOBYTE(v23) = a2;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v11 == &type metadata for ResolvedGradientVector)
  {
    v19[0] = a1;
    v19[1] = v23;
    uint64_t v15 = *(void *(**)(_OWORD *__return_ptr, void *, uint64_t, ValueMetadata *, uint64_t, double))(*(void *)a4 + 120);
    char v16 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    __n128 result = v15(v20, v19, a3, &type metadata for ResolvedGradientVector, v16, a6);
    uint64_t v17 = v21;
    uint64_t v18 = v20[1];
    *(_OWORD *)a5 = v20[0];
    *(_OWORD *)(a5 + 16) = v18;
    *(unsigned char *)(a5 + 32) = v17;
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t *, uint64_t, ValueMetadata *, unint64_t, double))(*(void *)a4 + 120);
    unint64_t v13 = lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
    return (void *)v12(&v22, a3, &type metadata for ResolvedGradientVector, v13, a6);
  }
  return result;
}

void *specialized Animation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  void *(*v13)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double);
  uint64_t v14;
  char v15;
  long long v16;
  _OWORD v17[2];
  _OWORD v18[2];
  char v19;
  _OWORD v20[6];

  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a1, (uint64_t)v20);
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v9 == &type metadata for _ShapeStyle_Pack.Fill.AnimatableData)
  {
    v17[0] = v20[0];
    v17[1] = v20[1];
    unint64_t v13 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double))(*(void *)a3 + 120);
    uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    __n128 result = v13(v18, v17, a2, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v14, a5);
    uint64_t v15 = v19;
    char v16 = v18[1];
    *(_OWORD *)a4 = v18[0];
    *(_OWORD *)(a4 + 16) = v16;
    *(unsigned char *)(a4 + 32) = v15;
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double))(*(void *)a3 + 120);
    unint64_t v11 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
    return (void *)v10(v20, a2, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v11, a5);
  }
  return result;
}

{
  ValueMetadata *v9;
  uint64_t (*v10)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double);
  unint64_t v11;
  void *result;
  void *(*v13)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double);
  uint64_t v14;
  char v15;
  long long v16;
  _OWORD v17[2];
  _OWORD v18[2];
  char v19;
  _OWORD v20[3];

  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a1, (uint64_t)v20);
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v9 == &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData)
  {
    v17[0] = v20[0];
    v17[1] = v20[1];
    unint64_t v13 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double))(*(void *)a3 + 120);
    uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    __n128 result = v13(v18, v17, a2, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, v14, a5);
    uint64_t v15 = v19;
    char v16 = v18[1];
    *(_OWORD *)a4 = v18[0];
    *(_OWORD *)(a4 + 16) = v16;
    *(unsigned char *)(a4 + 32) = v15;
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double))(*(void *)a3 + 120);
    unint64_t v11 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
    return (void *)v10(v20, a2, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, v11, a5);
  }
  return result;
}

uint64_t specialized Animation.animate<A>(value:time:context:)(long long *a1, uint64_t a2, uint64_t a3, double a4)
{
  void (*v10)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v11;
  void (*v13)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;

  uint64_t v18 = *a1;
  float v19 = *((void *)a1 + 2);
  type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(0);
  if (v7 == MEMORY[0x263F8D538])
  {
    *(void *)&uint64_t v15 = v18;
    (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t, void, _UNKNOWN **, double))(*(void *)a3 + 120))(&v17, &v15, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a4);
    return v17;
  }
  else
  {
    uint64_t v8 = v7;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v8 == v9)
    {
      uint64_t v15 = v18;
      char v16 = v19;
      unint64_t v13 = *(void (**)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      uint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v13(&v17, &v15, a2, v8, v14, a4);
    }
    else
    {
      uint64_t v10 = *(void (**)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      unint64_t v11 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
      v10(&v17, &v18, a2, v8, v11, a4);
    }
    return v17;
  }
}

void *specialized Animation.animate<A>(value:time:context:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  void *(*v15)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double);
  uint64_t v16;
  char v17;
  long long v18;
  _OWORD v19[2];
  _OWORD v20[2];
  char v21;

  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v10 == &type metadata for _AnyAnimatableData)
  {
    long long v14 = a1[1];
    v19[0] = *a1;
    v19[1] = v14;
    uint64_t v15 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double))(*(void *)a3 + 120);
    char v16 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    __n128 result = v15(v20, v19, a2, &type metadata for _AnyAnimatableData, v16, a5);
    uint64_t v17 = v21;
    uint64_t v18 = v20[1];
    *(_OWORD *)a4 = v20[0];
    *(_OWORD *)(a4 + 16) = v18;
    *(unsigned char *)(a4 + 32) = v17;
  }
  else
  {
    unint64_t v11 = *(uint64_t (**)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double))(*(void *)a3 + 120);
    unint64_t v12 = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
    return (void *)v11(a1, a2, &type metadata for _AnyAnimatableData, v12, a5);
  }
  return result;
}

uint64_t AnimatorState.__allocating_init(animation:interval:at:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = swift_allocObject();
  AnimatorState.init(animation:interval:at:in:)(a1, a2, a3);
  return v6;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(uint64_t a1, unint64_t a2, double a3)
{
  void (*v20)(uint64_t *__return_ptr, uint64_t *, void *, ValueMetadata *, unint64_t, double);
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24[4];
  uint64_t v25;
  uint64_t v26[3];
  uint64_t v27;
  void v28[2];
  char v29;
  char v30;
  uint64_t v31[3];

  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 48);
  if (*(double *)(v3 + 56) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    v31[0] = *(void *)(v4 + 64);
    specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)(a1, v31);
    swift_beginAccess();
    v26[0] = *(void *)(v4 + 32);
    specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:)(a1, v26);
  }
  else
  {
    switch(*(unsigned char *)(v3 + 77))
    {
      case 1:
        *(unsigned char *)(v3 + 77) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        unint64_t v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_20;
        }
        *(double *)(v4 + 56) = *(double *)(v4 + 56) - *(double *)(v4 + 40) + a3;
        *(double *)(v4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          double v13 = 0.0333333333;
        }
        else {
          double v13 = v7 + v7;
        }
        if (v13 < a3 - *(double *)(v3 + 40))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          long long v14 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v15 = static CoreGlue.shared;
          LOBYTE(v14) = v14();

          if ((v14 & 1) == 0) {
            *(double *)(v4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3 - v13;
          }
        }
        char v9 = 3;
        goto LABEL_19;
      case 3:
        goto LABEL_20;
      default:
        *(double *)(v3 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        char v9 = 1;
LABEL_19:
        *(unsigned char *)(v4 + 77) = v9;
LABEL_20:
        double v16 = a3 - *(double *)(v4 + 40);
        swift_beginAccess();
        uint64_t v17 = *(void *)(v4 + 24);
        char v18 = *(unsigned char *)(v4 + 96);
        swift_bridgeObjectRetain();
        v28[0] = v17;
        v28[1] = AGCreateWeakAttribute();
        char v29 = 0;
        uint64_t v30 = v18;
        swift_beginAccess();
        uint64_t v19 = *(void *)(v4 + 16);
        swift_beginAccess();
        uint64_t v25 = *(void *)(v4 + 32);
        uint64_t v20 = *(void (**)(uint64_t *__return_ptr, uint64_t *, void *, ValueMetadata *, unint64_t, double))(*(void *)v19 + 120);
        float v21 = lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData();
        swift_retain();
        swift_bridgeObjectRetain();
        v20(v24, &v25, v28, &type metadata for _ShapeStyle_Pack.AnimatableData, v21, v16);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v22 = v24[0];
        if (!v24[0])
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        uint64_t v27 = v24[0];
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v30, a2 | ((HIDWORD(a2) & 1) << 32), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t *, uint64_t))specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:), (void (*)(void))specialized Array.replaceSubrange<A>(_:with:), v16);
        *(void *)(v4 + 24) = v28[0];
        swift_bridgeObjectRelease();
        specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)(a1, &v27);
        v24[0] = *(void *)(v4 + 32);
        specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:)(a1, v24);
        swift_beginAccess();
        *(void *)(v4 + 64) = v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(double *)(v4 + 56) = a3;
        float v23 = *(double *)(v4 + 48);
        swift_bridgeObjectRelease();
        if (v23 > 0.0) {
          *(double *)(v4 + 56) = (round(a3 / v23) + 1.0) * *(double *)(v4 + 48);
        }
        break;
    }
  }
  return 0;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  char v9;
  uint64_t (*v10)(void);
  void *v11;
  double v13;
  uint64_t (*v14)(void);
  void *v15;
  double v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void (*v20)(uint64_t *__return_ptr, uint64_t *, void *, ValueMetadata *, unint64_t, double);
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24[4];
  uint64_t v25;
  uint64_t v26[3];
  uint64_t v27;
  void v28[2];
  char v29;
  char v30;
  uint64_t v31[3];

  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 48);
  if (*(double *)(v3 + 56) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    v31[0] = *(void *)(v4 + 64);
    specialized static ShaderVectorData.+= infix(_:_:)(a1, v31);
    swift_beginAccess();
    v26[0] = *(void *)(v4 + 32);
    specialized static ShaderVectorData.-= infix(_:_:)(a1, v26);
  }
  else
  {
    switch(*(unsigned char *)(v3 + 77))
    {
      case 1:
        *(unsigned char *)(v3 + 77) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        unint64_t v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_20;
        }
        *(double *)(v4 + 56) = *(double *)(v4 + 56) - *(double *)(v4 + 40) + a3;
        *(double *)(v4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          double v13 = 0.0333333333;
        }
        else {
          double v13 = v7 + v7;
        }
        if (v13 < a3 - *(double *)(v3 + 40))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          long long v14 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v15 = static CoreGlue.shared;
          LOBYTE(v14) = v14();

          if ((v14 & 1) == 0) {
            *(double *)(v4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3 - v13;
          }
        }
        char v9 = 3;
        goto LABEL_19;
      case 3:
        goto LABEL_20;
      default:
        *(double *)(v3 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        char v9 = 1;
LABEL_19:
        *(unsigned char *)(v4 + 77) = v9;
LABEL_20:
        double v16 = a3 - *(double *)(v4 + 40);
        swift_beginAccess();
        uint64_t v17 = *(void *)(v4 + 24);
        char v18 = *(unsigned char *)(v4 + 96);
        swift_bridgeObjectRetain();
        v28[0] = v17;
        v28[1] = AGCreateWeakAttribute();
        char v29 = 0;
        uint64_t v30 = v18;
        swift_beginAccess();
        uint64_t v19 = *(void *)(v4 + 16);
        swift_beginAccess();
        uint64_t v25 = *(void *)(v4 + 32);
        uint64_t v20 = *(void (**)(uint64_t *__return_ptr, uint64_t *, void *, ValueMetadata *, unint64_t, double))(*(void *)v19 + 120);
        float v21 = lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData();
        swift_retain();
        swift_bridgeObjectRetain();
        v20(v24, &v25, v28, &type metadata for ShaderVectorData, v21, v16);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v22 = v24[0];
        if (!v24[0])
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        uint64_t v27 = v24[0];
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v30, a2 | ((HIDWORD(a2) & 1) << 32), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t *, uint64_t))specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:), (void (*)(void))specialized Array.replaceSubrange<A>(_:with:), v16);
        *(void *)(v4 + 24) = v28[0];
        swift_bridgeObjectRelease();
        specialized static ShaderVectorData.+= infix(_:_:)(a1, &v27);
        v24[0] = *(void *)(v4 + 32);
        specialized static ShaderVectorData.-= infix(_:_:)(a1, v24);
        swift_beginAccess();
        *(void *)(v4 + 64) = v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(double *)(v4 + 56) = a3;
        float v23 = *(double *)(v4 + 48);
        swift_bridgeObjectRelease();
        if (v23 > 0.0) {
          *(double *)(v4 + 56) = (round(a3 / v23) + 1.0) * *(double *)(v4 + 48);
        }
        break;
    }
  }
  return 0;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  char v9;
  uint64_t (*v10)(void);
  void *v11;
  double v12;
  uint64_t result;
  double v14;
  float64x2_t v15;
  double v16;
  uint64_t (*v17)(void);
  void *v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  long long v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  double v36;
  double v37;
  double v38;
  float v39;
  float v40;
  double v41;
  double v42;
  double v43;
  float v44;
  double v45;
  float32x4_t v46;
  float64x2_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double v53;
  double v54;
  double v55;
  char v56;
  void v57[2];
  char v58;
  char v59;
  long long v60[2];
  uint64_t v61;

  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 80);
  if (*(double *)(v3 + 88) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    unint64_t v12 = *(double *)(v4 + 128) + *(double *)(a1 + 32);
    uint64_t v46 = vaddq_f32(*(float32x4_t *)(v4 + 96), *(float32x4_t *)a1);
    uint64_t v47 = vaddq_f64(*(float64x2_t *)(v4 + 112), *(float64x2_t *)(a1 + 16));
    swift_beginAccess();
    __n128 result = 0;
    long long v14 = *(double *)(v4 + 64);
    uint64_t v15 = vsubq_f64(v47, *(float64x2_t *)(v4 + 48));
    *(float32x4_t *)a1 = vsubq_f32(v46, *(float32x4_t *)(v4 + 32));
    *(float64x2_t *)(a1 + 16) = v15;
    *(double *)(a1 + 32) = v12 - v14;
  }
  else
  {
    switch(*(unsigned char *)(v3 + 141))
    {
      case 1:
        *(unsigned char *)(v3 + 141) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        unint64_t v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_19;
        }
        *(double *)(v4 + 88) = *(double *)(v4 + 88) - *(double *)(v4 + 72) + a3;
        *(double *)(v4 + 72) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          double v16 = 0.0333333333;
        }
        else {
          double v16 = v7 + v7;
        }
        if (v16 < a3 - *(double *)(v3 + 72))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v17 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          char v18 = static CoreGlue.shared;
          LOBYTE(v17) = v17();

          if ((v17 & 1) == 0) {
            *(double *)(v4 + 72) = a3 - v16;
          }
        }
        char v9 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v3 + 72) = a3;
        char v9 = 1;
LABEL_18:
        *(unsigned char *)(v4 + 141) = v9;
LABEL_19:
        uint64_t v19 = a3 - *(double *)(v4 + 72);
        swift_beginAccess();
        uint64_t v20 = *(void *)(v4 + 24);
        float v21 = *(unsigned char *)(v4 + 160);
        swift_bridgeObjectRetain();
        v57[0] = v20;
        v57[1] = AGCreateWeakAttribute();
        uint64_t v58 = 0;
        char v59 = v21;
        swift_beginAccess();
        uint64_t v22 = *(void *)(v4 + 16);
        swift_beginAccess();
        float v23 = *(_OWORD *)(v4 + 48);
        v60[0] = *(_OWORD *)(v4 + 32);
        v60[1] = v23;
        unint64_t v61 = *(void *)(v4 + 64);
        swift_retain();
        specialized Animation.animate<A>(value:time:context:)(v60, (uint64_t)v57, v22, (uint64_t)&v49, v19);
        swift_release();
        if (v56)
        {
          swift_bridgeObjectRelease();
          __n128 result = 1;
        }
        else
        {
          uint64_t v25 = v54;
          uint64_t v24 = v55;
          double v26 = v53;
          uint64_t v28 = v51;
          uint64_t v27 = v52;
          uint64_t v30 = v49;
          char v29 = v50;
          uint64_t v31 = v49;
          int v32 = v50;
          uint64_t v48 = v51;
          id v33 = v52;
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v59, a2 | ((HIDWORD(a2) & 1) << 32), v19);
          *(void *)(v4 + 24) = v57[0];
          swift_bridgeObjectRelease();
          uint64_t v34 = *(float *)(a1 + 8) + v48;
          unint64_t v35 = *(float *)(a1 + 12) + v33;
          __n128 v36 = v26 + *(double *)(a1 + 16);
          uint64_t v37 = v25 + *(double *)(a1 + 24);
          uint64_t v38 = v24 + *(double *)(a1 + 32);
          uint64_t v39 = *(float *)(v4 + 40);
          uint64_t v40 = *(float *)(v4 + 44);
          uint64_t v41 = *(double *)(v4 + 48);
          double v42 = *(double *)(v4 + 56);
          unint64_t v43 = *(double *)(v4 + 64);
          uint64_t v44 = (float)(*(float *)(a1 + 4) + v32) - *(float *)(v4 + 36);
          *(float *)a1 = (float)(*(float *)a1 + v31) - *(float *)(v4 + 32);
          *(float *)(a1 + 4) = v44;
          *(float *)(a1 + 8) = v34 - v39;
          *(float *)(a1 + 12) = v35 - v40;
          *(double *)(a1 + 16) = v36 - v41;
          *(double *)(a1 + 24) = v37 - v42;
          *(double *)(a1 + 32) = v38 - v43;
          swift_beginAccess();
          *(float *)(v4 + 96) = v30;
          *(float *)(v4 + 10specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
          *(float *)(v4 + 104) = v28;
          *(float *)(v4 + 108) = v27;
          *(double *)(v4 + 112) = v26;
          *(double *)(v4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v25;
          *(double *)(v4 + 128) = v24;
          *(double *)(v4 + 88) = a3;
          uint64_t v45 = *(double *)(v4 + 80);
          if (v45 > 0.0) {
            *(double *)(v4 + 88) = v45 * (round(a3 / v45) + 1.0);
          }
          __n128 result = 0;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  double v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  float v34;
  uint64_t v35;
  uint64_t (*v37)(void);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  float v49;
  uint64_t v50;
  double v51;
  uint64_t (*v52)(void);
  void *v53;
  double v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  long long v58;
  long long v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  double v84;
  double v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void v140[2];
  char v141;
  char v142;
  long long v143;
  long long v144;
  long long v145;
  long long v146;
  long long v147;
  long long v148;
  uint64_t v149;

  uint64_t v4 = v3;
  uint64_t v6 = *(double *)(v3 + 144);
  if (*(double *)(v3 + 152) + v6 * -0.5 >= a3)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v3 + 160);
    char v9 = *(void *)(v3 + 168);
    unint64_t v11 = *(void *)(v3 + 176);
    unint64_t v12 = *(void *)(v3 + 184);
    double v13 = *(void *)(v3 + 192);
    long long v14 = *(void *)(v3 + 200);
    double v16 = *(void *)(v3 + 208);
    uint64_t v15 = *(void *)(v3 + 216);
    uint64_t v17 = *(void *)(v3 + 224);
    char v18 = *(void *)(v3 + 232);
    uint64_t v19 = *(unsigned char *)(v3 + 240);
    uint64_t v20 = *(float *)(v3 + 248);
    float v21 = *(void *)(v3 + 256);
    *(void *)&BOOL v143 = v10;
    *((void *)&v143 + 1) = v9;
    uint64_t v108 = v11;
    uint64_t v111 = v10;
    id v115 = v15;
    uint64_t v119 = v9;
    *(void *)&long long v144 = v11;
    *((void *)&v144 + 1) = v12;
    *(void *)&long long v145 = v13;
    *((void *)&v145 + 1) = v14;
    *(void *)&long long v146 = v16;
    *((void *)&v146 + 1) = v15;
    *(void *)&char v147 = v17;
    *((void *)&v147 + 1) = v18;
    LOBYTE(v148) = v19;
    *((float *)&v148 + 2) = v20;
    CGRect v149 = v21;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v10, v9, v11, v12, v13, v14, v16, v15, v17, v18, v19);
    swift_bridgeObjectRetain();
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(a1, (uint64_t)&v143);
    uint64_t v22 = v20 + *(float *)(a1 + 88);
    char v123 = a1 + 96;
    specialized static AnimatableArray.+= infix(_:_:)(a1 + 96, v21);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v111, v119, v108, v12, v13, v14, v16, v115, v17, v18, v19);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v24 = *(void *)(v4 + 32);
    float v23 = *(void *)(v4 + 40);
    uint64_t v25 = *(void *)(v4 + 48);
    double v26 = *(void *)(v4 + 56);
    uint64_t v27 = *(void *)(v4 + 64);
    uint64_t v28 = *(void *)(v4 + 72);
    char v29 = *(void *)(v4 + 80);
    uint64_t v30 = *(void *)(v4 + 88);
    int v32 = *(void *)(v4 + 96);
    uint64_t v31 = *(void *)(v4 + 104);
    id v33 = *(unsigned char *)(v4 + 112);
    uint64_t v34 = *(float *)(v4 + 120);
    unint64_t v35 = *(void *)(v4 + 128);
    *(void *)&BOOL v143 = v24;
    *((void *)&v143 + 1) = v23;
    uint64_t v112 = v24;
    CGFloat v116 = v25;
    long long v120 = v23;
    *(void *)&long long v144 = v25;
    *((void *)&v144 + 1) = v26;
    *(void *)&long long v145 = v27;
    *((void *)&v145 + 1) = v28;
    *(void *)&long long v146 = v29;
    *((void *)&v146 + 1) = v30;
    *(void *)&char v147 = v32;
    *((void *)&v147 + 1) = v31;
    LOBYTE(v148) = v33;
    *((float *)&v148 + 2) = v34;
    CGRect v149 = v35;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v24, v23, v25, v26, v27, v28, v29, v30, v32, v31, v33);
    swift_bridgeObjectRetain();
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)(a1, (uint64_t)&v143);
    *(float *)(a1 + 88) = v22 - v34;
    specialized static AnimatableArray.-= infix(_:_:)(v123, v35);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v112, v120, v116, v26, v27, v28, v29, v30, v32, v31, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    switch(*(unsigned char *)(v3 + 269))
    {
      case 1:
        *(unsigned char *)(v3 + 269) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v37 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        uint64_t v38 = static CoreGlue.shared;
        LOBYTE(v37) = v37();

        if (v37) {
          goto LABEL_21;
        }
        *(double *)(v4 + 152) = *(double *)(v4 + 152) - *(double *)(v4 + 136) + a3;
        *(double *)(v4 + 136) = a3;
        swift_beginAccess();
        uint64_t v39 = *(void *)(v4 + 168);
        uint64_t v40 = *(void *)(v4 + 176);
        uint64_t v41 = *(void *)(v4 + 184);
        double v42 = *(void *)(v4 + 192);
        unint64_t v43 = *(void *)(v4 + 200);
        uint64_t v44 = *(void *)(v4 + 208);
        uint64_t v45 = *(void *)(v4 + 216);
        uint64_t v46 = *(void *)(v4 + 224);
        uint64_t v47 = *(void *)(v4 + 232);
        uint64_t v48 = *(unsigned char *)(v4 + 240);
        uint64_t v49 = *(float *)(v4 + 248);
        uint64_t v50 = *(void *)(v4 + 256);
        *(void *)&BOOL v143 = *(void *)(v4 + 160);
        *((void *)&v143 + 1) = v39;
        uint64_t v113 = v143;
        uint64_t v117 = v40;
        long long v121 = v39;
        *(void *)&long long v144 = v40;
        *((void *)&v144 + 1) = v41;
        uint64_t v109 = v41;
        *(void *)&long long v145 = v42;
        *((void *)&v145 + 1) = v43;
        *(void *)&long long v146 = v44;
        *((void *)&v146 + 1) = v45;
        *(void *)&char v147 = v46;
        *((void *)&v147 + 1) = v47;
        LOBYTE(v148) = v48;
        *((float *)&v148 + 2) = v49;
        CGRect v149 = v50;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v143, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48);
        swift_bridgeObjectRetain();
        specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(a1, (uint64_t)&v143);
        uint64_t v22 = v49 + *(float *)(a1 + 88);
        char v123 = a1 + 96;
        specialized static AnimatableArray.+= infix(_:_:)(a1 + 96, v50);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v113, v121, v117, v109, v42, v43, v44, v45, v46, v47, v48);
        goto LABEL_5;
      case 2:
        if (v6 < 0.0166666667) {
          uint64_t v51 = 0.0333333333;
        }
        else {
          uint64_t v51 = v6 + v6;
        }
        if (v51 < a3 - *(double *)(v3 + 136))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v52 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v53 = static CoreGlue.shared;
          LOBYTE(v52) = v52();

          if ((v52 & 1) == 0) {
            *(double *)(v4 + 136) = a3 - v51;
          }
        }
        uint64_t v8 = 3;
        goto LABEL_20;
      case 3:
        goto LABEL_21;
      default:
        *(double *)(v3 + 136) = a3;
        uint64_t v8 = 1;
LABEL_20:
        *(unsigned char *)(v4 + 269) = v8;
LABEL_21:
        CFIndex v54 = a3 - *(double *)(v4 + 136);
        swift_beginAccess();
        uint64_t v55 = *(void *)(v4 + 24);
        uint64_t v56 = *(unsigned char *)(v4 + 288);
        swift_bridgeObjectRetain();
        v140[0] = v55;
        v140[1] = AGCreateWeakAttribute();
        uint64_t v141 = 0;
        uint64_t v142 = v56;
        swift_beginAccess();
        uint64_t v57 = *(void *)(v4 + 16);
        swift_beginAccess();
        uint64_t v58 = *(_OWORD *)(v4 + 112);
        char v147 = *(_OWORD *)(v4 + 96);
        uint64_t v148 = v58;
        CGRect v149 = *(void *)(v4 + 128);
        char v59 = *(_OWORD *)(v4 + 48);
        BOOL v143 = *(_OWORD *)(v4 + 32);
        long long v144 = v59;
        char v60 = *(_OWORD *)(v4 + 80);
        long long v145 = *(_OWORD *)(v4 + 64);
        long long v146 = v60;
        swift_retain();
        outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)&v143);
        specialized Animation.animate<A>(value:time:context:)(&v143, (uint64_t)v140, v57, (uint64_t)&v127, v54);
        swift_release();
        outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)&v143);
        unint64_t v61 = v139;
        if (!v139)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        uint64_t v110 = v127;
        uint64_t v114 = v128;
        uint64_t v62 = v131;
        double v118 = v129;
        long long v122 = v130;
        uint64_t v64 = v132;
        uint64_t v63 = v133;
        char v103 = v131;
        double v104 = v132;
        uint64_t v65 = v134;
        uint64_t v105 = v133;
        double v106 = v134;
        uint64_t v66 = v136;
        unint64_t v124 = v137;
        uint64_t v67 = *(float *)&v138;
        uint64_t v68 = v138;
        uint64_t v101 = v138;
        uint64_t v69 = HIDWORD(a2) & 1;
        uint64_t v70 = a2;
        uint64_t v71 = v135;
        double v102 = v135;
        uint64_t v107 = v136;
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v142, v70 | (v69 << 32), v54);
        *(void *)(v4 + 24) = v140[0];
        swift_bridgeObjectRelease();
        unsigned __int8 v127 = v110;
        double v128 = v114;
        uint64_t v129 = v118;
        uint64_t v130 = v122;
        uint64_t v131 = v62;
        CGRect v132 = v64;
        double v133 = v63;
        v134 = v65;
        uint64_t v135 = v71;
        uint64_t v136 = v66;
        LOBYTE(v137) = v124;
        LODWORD(v138) = v68;
        uint64_t v139 = v61;
        specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(a1, (uint64_t)&v127);
        uint64_t v72 = *(float *)(a1 + 88) + v67;
        specialized static AnimatableArray.+= infix(_:_:)(a1 + 96, v61);
        uint64_t v73 = *(void *)(v4 + 40);
        unint64_t v74 = *(void *)(v4 + 48);
        uint64_t v75 = *(void *)(v4 + 56);
        uint64_t v76 = *(void *)(v4 + 64);
        char v77 = *(void *)(v4 + 72);
        char v78 = *(void *)(v4 + 80);
        unint64_t v79 = *(void *)(v4 + 88);
        uint64_t v100 = v61;
        uint64_t v80 = *(void *)(v4 + 96);
        char v81 = *(void *)(v4 + 104);
        LOBYTE(v71) = *(unsigned char *)(v4 + 112);
        int v82 = *(float *)(v4 + 120);
        int v83 = *(void *)(v4 + 128);
        unsigned __int8 v127 = *(void *)(v4 + 32);
        double v128 = v73;
        int v91 = v127;
        CGFloat v93 = v78;
        int v95 = v74;
        double v97 = v73;
        uint64_t v129 = v74;
        uint64_t v130 = v75;
        uint64_t v131 = v76;
        CGRect v132 = v77;
        double v133 = v78;
        v134 = v79;
        uint64_t v135 = v80;
        uint64_t v136 = v81;
        LOBYTE(v137) = v71;
        *(float *)&uint64_t v138 = v82;
        uint64_t v139 = v83;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v127, v73, v74, v75, v76, v77, v78, v79, v80, v81, v71);
        swift_bridgeObjectRetain();
        specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)(a1, (uint64_t)&v127);
        *(float *)(a1 + 88) = v72 - v82;
        specialized static AnimatableArray.-= infix(_:_:)(a1 + 96, v83);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v91, v97, v95, v75, v76, v77, v93, v79, v80, v81, v71);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        unsigned __int8 v126 = *(void *)(v4 + 160);
        double v98 = *(void *)(v4 + 176);
        double v99 = *(void *)(v4 + 168);
        CGFloat v94 = *(void *)(v4 + 192);
        int v96 = *(void *)(v4 + 184);
        uint64_t v90 = *(void *)(v4 + 208);
        unsigned int v92 = *(void *)(v4 + 200);
        int v87 = *(void *)(v4 + 232);
        unsigned __int8 v88 = *(void *)(v4 + 224);
        uint64_t v86 = *(unsigned char *)(v4 + 240);
        int v89 = *(void *)(v4 + 216);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v110, v114, v118, v122, v103, v104, v105, v106, v102, v107, v124);
        *(void *)(v4 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v110;
        *(void *)(v4 + 168) = v114;
        *(void *)(v4 + 176) = v118;
        *(void *)(v4 + 184) = v122;
        *(void *)(v4 + 192) = v103;
        *(void *)(v4 + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v104;
        *(void *)(v4 + 208) = v105;
        *(void *)(v4 + 216) = v106;
        *(void *)(v4 + 224) = v102;
        *(void *)(v4 + 232) = v107;
        *(unsigned char *)(v4 + 24specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v124;
        *(_DWORD *)(v4 + 248) = v101;
        *(void *)(v4 + 256) = v100;
        swift_bridgeObjectRetain();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v126, v99, v98, v96, v94, v92, v90, v89, v88, v87, v86);
        swift_bridgeObjectRelease();
        *(double *)(v4 + 152) = a3;
        int v84 = *(double *)(v4 + 144);
        if (v84 <= 0.0)
        {
          outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v110, v114, v118, v122, v103, v104, v105, v106, v102, v107, v124, v101, v100);
        }
        else
        {
          int v85 = round(a3 / v84);
          outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v110, v114, v118, v122, v103, v104, v105, v106, v102, v107, v124, v101, v100);
          *(double *)(v4 + 152) = (v85 + 1.0) * *(double *)(v4 + 144);
        }
        break;
    }
  }
  return 0;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  char v9;
  uint64_t (*v10)(void);
  void *v11;
  char v12;
  long long v13;
  long long v14;
  char v15;
  long long v16;
  long long v17;
  double v19;
  uint64_t (*v20)(void);
  void *v21;
  double v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  unsigned __int8 v33;
  long long v34;
  long long v35;
  double v36;
  double v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  unsigned __int8 v59;
  _OWORD v60[5];
  unsigned __int8 v61;
  void v62[2];
  char v63;
  char v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  char v70;

  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 128);
  if (*(double *)(v3 + 136) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    unint64_t v12 = *(unsigned char *)(v4 + 224);
    double v13 = *(_OWORD *)(v4 + 160);
    uint64_t v65 = *(_OWORD *)(v4 + 144);
    uint64_t v66 = v13;
    long long v14 = *(_OWORD *)(v4 + 192);
    uint64_t v67 = *(_OWORD *)(v4 + 176);
    uint64_t v68 = v14;
    uint64_t v69 = *(_OWORD *)(v4 + 208);
    uint64_t v70 = v12;
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(a1, (uint64_t)&v65);
    swift_beginAccess();
    uint64_t v15 = *(unsigned char *)(v4 + 112);
    double v16 = *(_OWORD *)(v4 + 48);
    uint64_t v65 = *(_OWORD *)(v4 + 32);
    uint64_t v66 = v16;
    uint64_t v17 = *(_OWORD *)(v4 + 80);
    uint64_t v67 = *(_OWORD *)(v4 + 64);
    uint64_t v68 = v17;
    uint64_t v69 = *(_OWORD *)(v4 + 96);
    uint64_t v70 = v15;
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)(a1, (uint64_t)&v65);
  }
  else
  {
    switch(*(unsigned char *)(v3 + 233))
    {
      case 1:
        *(unsigned char *)(v3 + 233) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        unint64_t v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_20;
        }
        *(double *)(v4 + 136) = *(double *)(v4 + 136) - *(double *)(v4 + 120) + a3;
        *(double *)(v4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          uint64_t v19 = 0.0333333333;
        }
        else {
          uint64_t v19 = v7 + v7;
        }
        if (v19 < a3 - *(double *)(v3 + 120))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v20 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          float v21 = static CoreGlue.shared;
          LOBYTE(v2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v20();

          if ((v20 & 1) == 0) {
            *(double *)(v4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3 - v19;
          }
        }
        char v9 = 3;
        goto LABEL_19;
      case 3:
        goto LABEL_20;
      default:
        *(double *)(v3 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        char v9 = 1;
LABEL_19:
        *(unsigned char *)(v4 + 233) = v9;
LABEL_20:
        uint64_t v22 = a3 - *(double *)(v4 + 120);
        swift_beginAccess();
        float v23 = *(void *)(v4 + 24);
        uint64_t v24 = *(unsigned char *)(v4 + 256);
        swift_bridgeObjectRetain();
        v62[0] = v23;
        v62[1] = AGCreateWeakAttribute();
        uint64_t v63 = 0;
        uint64_t v64 = v24;
        swift_beginAccess();
        uint64_t v25 = *(void *)(v4 + 16);
        swift_beginAccess();
        outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v4 + 32, (uint64_t)&v65);
        swift_retain();
        outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v65, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
        specialized Animation.animate<A>(value:time:context:)((uint64_t)&v65, (uint64_t)v62, v25, (uint64_t)&v54, v22);
        swift_release();
        outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v65, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        if (v59 == 255)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        double v26 = *((void *)&v54 + 1);
        uint64_t v27 = a2;
        uint64_t v28 = *((void *)&v55 + 1);
        uint64_t v50 = v54;
        uint64_t v51 = v55;
        char v29 = v56;
        uint64_t v52 = *((void *)&v57 + 1);
        v60[0] = v54;
        v60[1] = v55;
        v60[2] = v56;
        uint64_t v30 = *((void *)&v56 + 1);
        v60[3] = v57;
        uint64_t v31 = v57;
        v60[4] = v58;
        int v32 = v58;
        uint64_t v38 = *((void *)&v58 + 1);
        unint64_t v61 = v59;
        uint64_t v53 = v59;
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v64, v27 | ((HIDWORD(v27) & 1) << 32), v22);
        *(void *)(v4 + 24) = v62[0];
        swift_bridgeObjectRelease();
        specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(a1, (uint64_t)v60);
        id v33 = *(unsigned char *)(v4 + 112);
        uint64_t v34 = *(_OWORD *)(v4 + 48);
        CFIndex v54 = *(_OWORD *)(v4 + 32);
        uint64_t v55 = v34;
        unint64_t v35 = *(_OWORD *)(v4 + 80);
        uint64_t v56 = *(_OWORD *)(v4 + 64);
        uint64_t v57 = v35;
        uint64_t v58 = *(_OWORD *)(v4 + 96);
        char v59 = v33;
        specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)(a1, (uint64_t)&v54);
        swift_beginAccess();
        uint64_t v48 = *(void *)(v4 + 152);
        uint64_t v49 = *(void *)(v4 + 144);
        uint64_t v46 = *(void *)(v4 + 168);
        uint64_t v47 = *(void *)(v4 + 160);
        uint64_t v44 = *(void *)(v4 + 184);
        uint64_t v45 = *(void *)(v4 + 176);
        double v42 = *(void *)(v4 + 200);
        unint64_t v43 = *(void *)(v4 + 192);
        uint64_t v40 = *(void *)(v4 + 216);
        uint64_t v41 = *(void *)(v4 + 208);
        uint64_t v39 = *(unsigned char *)(v4 + 224);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v50, v26, v51, v28, v29, v30, v31, v52, v32, *((uint64_t *)&v32 + 1), v53);
        *(void *)(v4 + 144) = v50;
        *(void *)(v4 + 152) = v26;
        *(void *)(v4 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v51;
        *(void *)(v4 + 168) = v28;
        *(void *)(v4 + 176) = v29;
        *(void *)(v4 + 184) = v30;
        *(void *)(v4 + 192) = v31;
        *(void *)(v4 + 20specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v52;
        *(void *)(v4 + 208) = v32;
        *(void *)(v4 + 216) = v38;
        *(unsigned char *)(v4 + 224) = v53;
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v49, v48, v47, v46, v45, v44, v43, v42, v41, v40, v39);
        *(double *)(v4 + 136) = a3;
        __n128 v36 = *(double *)(v4 + 128);
        if (v36 <= 0.0)
        {
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(v50, v26, v51, v28, v29, v30, v31, v52, v32, v38, v53);
        }
        else
        {
          uint64_t v37 = round(a3 / v36);
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(v50, v26, v51, v28, v29, v30, v31, v52, v32, v38, v53);
          *(double *)(v4 + 136) = (v37 + 1.0) * *(double *)(v4 + 128);
        }
        break;
    }
  }
  return 0;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  char v9;
  uint64_t (*v10)(void);
  void *v11;
  float v12;
  float v13;
  int64x2_t v14;
  double v15;
  double v16;
  double v17;
  char v18;
  double v19;
  double v20;
  double v21;
  int64x2_t v22;
  float32x2_t v23;
  int8x16_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  char v31;
  uint64_t result;
  double v33;
  uint64_t (*v34)(void);
  void *v35;
  double v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  long long v40;
  double v41;
  double v42;
  double v43;
  char v44;
  float v45;
  float v46;
  float v47;
  int64x2_t v48;
  double v49;
  double v50;
  double v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  float32x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  char v63;
  double v64;
  double v65;
  int64x2_t v66;
  int64x2_t v67;
  float v68;
  int64x2_t v69;
  double v70;
  double v71;
  double v72;
  char v73;
  char v74;
  void v75[2];
  char v76;
  char v77;
  long long v78[3];
  char v79;

  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 96);
  if (*(double *)(v3 + 104) + v7 * -0.5 < a3)
  {
    switch(*(unsigned char *)(v3 + 169))
    {
      case 1:
        *(unsigned char *)(v3 + 169) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        unint64_t v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_29;
        }
        *(double *)(v4 + 104) = *(double *)(v4 + 104) - *(double *)(v4 + 88) + a3;
        *(double *)(v4 + 88) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          id v33 = 0.0333333333;
        }
        else {
          id v33 = v7 + v7;
        }
        if (v33 < a3 - *(double *)(v3 + 88))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v34 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          unint64_t v35 = static CoreGlue.shared;
          LOBYTE(v34) = v34();

          if ((v34 & 1) == 0) {
            *(double *)(v4 + 88) = a3 - v33;
          }
        }
        char v9 = 3;
        goto LABEL_28;
      case 3:
        goto LABEL_29;
      default:
        *(double *)(v3 + 88) = a3;
        char v9 = 1;
LABEL_28:
        *(unsigned char *)(v4 + 169) = v9;
LABEL_29:
        __n128 v36 = a3 - *(double *)(v4 + 88);
        swift_beginAccess();
        uint64_t v37 = *(void *)(v4 + 24);
        uint64_t v38 = *(unsigned char *)(v4 + 192);
        swift_bridgeObjectRetain();
        v75[0] = v37;
        v75[1] = AGCreateWeakAttribute();
        uint64_t v76 = 0;
        char v77 = v38;
        swift_beginAccess();
        uint64_t v39 = *(void *)(v4 + 16);
        swift_beginAccess();
        uint64_t v40 = *(_OWORD *)(v4 + 48);
        v78[0] = *(_OWORD *)(v4 + 32);
        v78[1] = v40;
        v78[2] = *(_OWORD *)(v4 + 64);
        unint64_t v79 = *(unsigned char *)(v4 + 80);
        swift_retain();
        specialized Animation.animate<A>(value:time:context:)(v78, (uint64_t)v75, v39, (uint64_t)&v68, v36);
        swift_release();
        if (v74)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        uint64_t v67 = v69;
        uint64_t v41 = v70;
        double v42 = v71;
        unint64_t v43 = v72;
        uint64_t v44 = v73;
        uint64_t v45 = v68;
        uint64_t v46 = v68;
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v77, a2 | ((HIDWORD(a2) & 1) << 32), v36);
        *(void *)(v4 + 24) = v75[0];
        swift_bridgeObjectRelease();
        uint64_t v47 = *(float *)a1;
        uint64_t v48 = *(int64x2_t *)(a1 + 8);
        uint64_t v49 = *(double *)(a1 + 24);
        uint64_t v50 = *(double *)(a1 + 32);
        uint64_t v51 = *(double *)(a1 + 40);
        uint64_t v52 = *(unsigned char *)(a1 + 48);
        if (v44)
        {
          uint64_t v53 = *(void *)(a1 + 16);
          CFIndex v54 = *(void *)(a1 + 8);
        }
        else
        {
          if (*(unsigned char *)(a1 + 48))
          {
            uint64_t v53 = v67.i64[1];
            CFIndex v54 = v67.i64[0];
            *(int64x2_t *)(a1 + 8) = v67;
            uint64_t v51 = v43;
            uint64_t v49 = v41;
            uint64_t v50 = v42;
            *(double *)(a1 + 24) = v41;
            *(double *)(a1 + 32) = v42;
          }
          else
          {
            uint64_t v49 = v41 + v49;
            uint64_t v50 = v42 + v50;
            uint64_t v51 = v43 + v51;
            uint64_t v55 = vadd_f32((float32x2_t)vmovn_s64(v67), (float32x2_t)vmovn_s64(v48));
            v56.i64[0] = v55.u32[0];
            v56.i64[1] = v55.u32[1];
            uint64_t v57 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v67, 0x20uLL), (float32x2_t)vshrn_n_s64(v48, 0x20uLL)), 0x20uLL), v56);
            *(int8x16_t *)(a1 + 8) = v57;
            *(double *)(a1 + 24) = v49;
            *(double *)(a1 + 32) = v50;
            uint64_t v53 = v57.i64[1];
            CFIndex v54 = v57.i64[0];
          }
          uint64_t v52 = 0;
          *(double *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v51;
          *(unsigned char *)(a1 + 48) = 0;
        }
        char v59 = *(void *)(v4 + 40);
        uint64_t v58 = *(void *)(v4 + 48);
        unint64_t v61 = *(double *)(v4 + 56);
        char v60 = *(double *)(v4 + 64);
        uint64_t v62 = *(double *)(v4 + 72);
        uint64_t v63 = *(unsigned char *)(v4 + 80);
        *(float *)a1 = (float)(v47 + v46) - *(float *)(v4 + 32);
        if ((v63 & 1) == 0)
        {
          if (v52)
          {
            *(void *)(a1 + 8) = v59;
            *(void *)(a1 + 16) = v58;
            uint64_t v64 = v62;
            *(double *)(a1 + 24) = v61;
            *(double *)(a1 + 32) = v60;
          }
          else
          {
            *(void *)(a1 + 8) = COERCE_UNSIGNED_INT(*(float *)&v54 - *(float *)&v59) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v54 + 1) - *((float *)&v59 + 1)) << 32);
            *(void *)(a1 + 16) = COERCE_UNSIGNED_INT(*(float *)&v53 - *(float *)&v58) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v53 + 1) - *((float *)&v58 + 1)) << 32);
            uint64_t v64 = v51 - v62;
            *(double *)(a1 + 24) = v49 - v61;
            *(double *)(a1 + 32) = v50 - v60;
          }
          *(double *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v64;
          *(unsigned char *)(a1 + 48) = 0;
        }
        swift_beginAccess();
        *(float *)(v4 + 112) = v45;
        *(int64x2_t *)(v4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v67;
        *(double *)(v4 + 136) = v41;
        *(double *)(v4 + 144) = v42;
        *(double *)(v4 + 152) = v43;
        *(unsigned char *)(v4 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v44 & 1;
        *(double *)(v4 + 104) = a3;
        uint64_t v65 = *(double *)(v4 + 96);
        if (v65 > 0.0) {
          *(double *)(v4 + 104) = v65 * (round(a3 / v65) + 1.0);
        }
        break;
    }
    return 0;
  }
LABEL_8:
  swift_beginAccess();
  unint64_t v12 = *(float *)(v4 + 112);
  double v13 = *(float *)a1;
  long long v14 = *(int64x2_t *)(a1 + 8);
  uint64_t v15 = *(double *)(a1 + 24);
  double v16 = *(double *)(a1 + 32);
  uint64_t v17 = *(double *)(a1 + 40);
  char v18 = *(unsigned char *)(a1 + 48);
  if (*(unsigned char *)(v4 + 160))
  {
    uint64_t v66 = *(int64x2_t *)(a1 + 8);
  }
  else
  {
    uint64_t v19 = *(double *)(v4 + 136);
    uint64_t v20 = *(double *)(v4 + 144);
    float v21 = *(double *)(v4 + 152);
    uint64_t v22 = *(int64x2_t *)(v4 + 120);
    if (*(unsigned char *)(a1 + 48))
    {
      *(int64x2_t *)(a1 + 8) = v22;
    }
    else
    {
      uint64_t v19 = v19 + v15;
      uint64_t v20 = v20 + v16;
      float v23 = vadd_f32((float32x2_t)vmovn_s64(v22), (float32x2_t)vmovn_s64(v14));
      v24.i64[0] = v23.u32[0];
      v24.i64[1] = v23.u32[1];
      uint64_t v22 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v22, 0x20uLL), (float32x2_t)vshrn_n_s64(v14, 0x20uLL)), 0x20uLL), v24);
      *(int64x2_t *)(a1 + 8) = v22;
      float v21 = v21 + v17;
    }
    *(double *)(a1 + 24) = v19;
    *(double *)(a1 + 32) = v20;
    char v18 = 0;
    *(double *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v21;
    *(unsigned char *)(a1 + 48) = 0;
    uint64_t v15 = v19;
    double v16 = v20;
    uint64_t v17 = v21;
    uint64_t v66 = v22;
  }
  uint64_t v25 = v12 + v13;
  swift_beginAccess();
  uint64_t v27 = *(void *)(v4 + 40);
  double v26 = *(void *)(v4 + 48);
  char v29 = *(double *)(v4 + 56);
  uint64_t v28 = *(double *)(v4 + 64);
  uint64_t v30 = *(double *)(v4 + 72);
  uint64_t v31 = *(unsigned char *)(v4 + 80);
  *(float *)a1 = v25 - *(float *)(v4 + 32);
  if (v31) {
    return 0;
  }
  __n128 result = 0;
  if (v18)
  {
    *(void *)(a1 + 8) = v27;
    *(void *)(a1 + 16) = v26;
    *(double *)(a1 + 24) = v29;
    *(double *)(a1 + 32) = v28;
    *(double *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v30;
  }
  else
  {
    *(void *)(a1 + 8) = COERCE_UNSIGNED_INT(*(float *)v66.i32 - *(float *)&v27) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v66.i32[1] - *((float *)&v27 + 1)) << 32);
    *(void *)(a1 + 16) = COERCE_UNSIGNED_INT(*(float *)&v66.i32[2] - *(float *)&v26) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v66.i32[3] - *((float *)&v26 + 1)) << 32);
    *(double *)(a1 + 24) = v15 - v29;
    *(double *)(a1 + 32) = v16 - v28;
    *(double *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v17 - v30;
  }
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  char v9;
  uint64_t (*v10)(void);
  void *v11;
  float32x2_t v12;
  uint64_t result;
  float32x2_t v14;
  double v15;
  uint64_t (*v16)(void);
  void *v17;
  double v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  double v38;
  float32x4_t v39;
  void v40[2];
  char v41;
  char v42;
  long long v43;
  uint64_t v44;

  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 64);
  if (*(double *)(v3 + 72) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    uint64_t v39 = vaddq_f32(*(float32x4_t *)(v4 + 80), *(float32x4_t *)a1);
    unint64_t v12 = vadd_f32(*(float32x2_t *)(v4 + 96), *(float32x2_t *)(a1 + 16));
    swift_beginAccess();
    __n128 result = 0;
    long long v14 = *(float32x2_t *)(v4 + 48);
    *(float32x4_t *)a1 = vsubq_f32(v39, *(float32x4_t *)(v4 + 32));
    *(float32x2_t *)(a1 + 16) = vsub_f32(v12, v14);
  }
  else
  {
    switch(*(unsigned char *)(v3 + 109))
    {
      case 1:
        *(unsigned char *)(v3 + 109) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        unint64_t v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_19;
        }
        *(double *)(v4 + 72) = *(double *)(v4 + 72) - *(double *)(v4 + 56) + a3;
        *(double *)(v4 + 56) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          uint64_t v15 = 0.0333333333;
        }
        else {
          uint64_t v15 = v7 + v7;
        }
        if (v15 < a3 - *(double *)(v3 + 56))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v16 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v17 = static CoreGlue.shared;
          LOBYTE(v16) = v16();

          if ((v16 & 1) == 0) {
            *(double *)(v4 + 56) = a3 - v15;
          }
        }
        char v9 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v3 + 56) = a3;
        char v9 = 1;
LABEL_18:
        *(unsigned char *)(v4 + 109) = v9;
LABEL_19:
        char v18 = a3 - *(double *)(v4 + 56);
        swift_beginAccess();
        uint64_t v19 = *(void *)(v4 + 24);
        uint64_t v20 = *(unsigned char *)(v4 + 128);
        swift_bridgeObjectRetain();
        v40[0] = v19;
        v40[1] = AGCreateWeakAttribute();
        uint64_t v41 = 0;
        double v42 = v20;
        swift_beginAccess();
        float v21 = *(void *)(v4 + 16);
        swift_beginAccess();
        unint64_t v43 = *(_OWORD *)(v4 + 32);
        uint64_t v44 = *(void *)(v4 + 48);
        swift_retain();
        uint64_t v22 = specialized Animation.animate<A>(value:time:context:)(&v43, (uint64_t)v40, v21, v18);
        uint64_t v24 = v23;
        double v26 = v25;
        uint64_t v28 = v27;
        swift_release();
        if (v28)
        {
          swift_bridgeObjectRelease();
          __n128 result = 1;
        }
        else
        {
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v42, a2 | ((HIDWORD(a2) & 1) << 32), v18);
          *(void *)(v4 + 24) = v40[0];
          swift_bridgeObjectRelease();
          char v29 = *(float *)(a1 + 8) + *(float *)&v24;
          uint64_t v30 = *(float *)(a1 + 12) + *((float *)&v24 + 1);
          uint64_t v31 = *(float *)(a1 + 16) + *(float *)&v26;
          int v32 = *(float *)(a1 + 20) + *((float *)&v26 + 1);
          id v33 = *(float *)(v4 + 40);
          uint64_t v34 = *(float *)(v4 + 44);
          unint64_t v35 = *(float *)(v4 + 48);
          __n128 v36 = *(float *)(v4 + 52);
          uint64_t v37 = (float)(*(float *)(a1 + 4) + *((float *)&v22 + 1)) - *(float *)(v4 + 36);
          *(float *)a1 = (float)(*(float *)a1 + *(float *)&v22) - *(float *)(v4 + 32);
          *(float *)(a1 + 4) = v37;
          *(float *)(a1 + 8) = v29 - v33;
          *(float *)(a1 + 12) = v30 - v34;
          *(float *)(a1 + 16) = v31 - v35;
          *(float *)(a1 + 2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v32 - v36;
          swift_beginAccess();
          *(void *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v22;
          *(void *)(v4 + 88) = v24;
          *(void *)(v4 + 96) = v26;
          *(double *)(v4 + 72) = a3;
          uint64_t v38 = *(double *)(v4 + 64);
          if (v38 > 0.0) {
            *(double *)(v4 + 72) = v38 * (round(a3 / v38) + 1.0);
          }
          __n128 result = 0;
        }
        break;
    }
  }
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float32x4_t *a1, double a2)
{
  void (*v18)(unint64_t *__return_ptr, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float32_t v32;
  double v33;
  float32x4_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  long long v38;
  void v39[2];
  char v40;
  char v41;

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 56);
  if (*(double *)(v2 + 64) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    uint64_t v34 = vaddq_f32(*(float32x4_t *)(v3 + 72), *a1);
    swift_beginAccess();
    uint64_t result = 0;
    *a1 = vsubq_f32(v34, *(float32x4_t *)(v3 + 32));
  }
  else
  {
    switch(*(unsigned char *)(v2 + 93))
    {
      case 1:
        *(unsigned char *)(v2 + 93) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        char v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_19;
        }
        *(double *)(v3 + 64) = *(double *)(v3 + 64) - *(double *)(v3 + 48) + a2;
        *(double *)(v3 + 48) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          double v11 = 0.0333333333;
        }
        else {
          double v11 = v6 + v6;
        }
        if (v11 < a2 - *(double *)(v2 + 48))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          unint64_t v12 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          double v13 = static CoreGlue.shared;
          LOBYTE(v12) = v12();

          if ((v12 & 1) == 0) {
            *(double *)(v3 + 48) = a2 - v11;
          }
        }
        char v7 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v2 + 48) = a2;
        char v7 = 1;
LABEL_18:
        *(unsigned char *)(v3 + 93) = v7;
LABEL_19:
        double v14 = a2 - *(double *)(v3 + 48);
        swift_beginAccess();
        uint64_t v15 = *(void *)(v3 + 24);
        char v16 = *(unsigned char *)(v3 + 112);
        swift_bridgeObjectRetain();
        v39[0] = v15;
        v39[1] = AGCreateWeakAttribute();
        uint64_t v40 = 0;
        uint64_t v41 = v16;
        swift_beginAccess();
        uint64_t v17 = *(void *)(v3 + 16);
        swift_beginAccess();
        uint64_t v38 = *(_OWORD *)(v3 + 32);
        char v18 = *(void (**)(unint64_t *__return_ptr, long long *, void *, uint64_t, uint64_t, double))(*(void *)v17 + 120);
        type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(0);
        uint64_t v20 = v19;
        float v21 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
        swift_retain();
        v18(&v35, &v38, v39, v20, v21, v14);
        swift_release();
        if (v37)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          uint64_t v22 = v35;
          float v23 = v36;
          uint64_t v24 = HIDWORD(v35);
          uint64_t v25 = HIDWORD(v36);
          double v26 = v35;
          uint64_t v27 = v36;
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v41, v14);
          *(void *)(v3 + 24) = v39[0];
          swift_bridgeObjectRelease();
          uint64_t v28 = a1->f32[2] + *(float *)&v27;
          char v29 = a1->f32[3] + *((float *)&v27 + 1);
          uint64_t v30 = *(float *)(v3 + 40);
          uint64_t v31 = *(float *)(v3 + 44);
          int v32 = (float)(a1->f32[1] + *((float *)&v26 + 1)) - *(float *)(v3 + 36);
          a1->f32[0] = (float)(a1->f32[0] + *(float *)&v26) - *(float *)(v3 + 32);
          a1->f32[1] = v32;
          a1->f32[2] = v28 - v30;
          a1->f32[3] = v29 - v31;
          swift_beginAccess();
          *(_DWORD *)(v3 + 72) = v22;
          *(_DWORD *)(v3 + 76) = v24;
          *(_DWORD *)(v3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v23;
          *(_DWORD *)(v3 + 84) = v25;
          *(double *)(v3 + 64) = a2;
          id v33 = *(double *)(v3 + 56);
          if (v33 > 0.0) {
            *(double *)(v3 + 64) = v33 * (round(a2 / v33) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float64x2_t *a1, unint64_t a2, double a3)
{
  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 56);
  if (*(double *)(v3 + 64) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    float64x2_t v29 = vaddq_f64(*(float64x2_t *)(v4 + 72), *a1);
    swift_beginAccess();
    uint64_t result = 0;
    *a1 = vsubq_f64(v29, *(float64x2_t *)(v4 + 32));
  }
  else
  {
    switch(*(unsigned char *)(v3 + 93))
    {
      case 1:
        *(unsigned char *)(v3 + 93) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_19;
        }
        *(double *)(v4 + 64) = *(double *)(v4 + 64) - *(double *)(v4 + 48) + a3;
        *(double *)(v4 + 48) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          double v13 = 0.0333333333;
        }
        else {
          double v13 = v7 + v7;
        }
        if (v13 < a3 - *(double *)(v3 + 48))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v14 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v15 = static CoreGlue.shared;
          LOBYTE(v14) = v14();

          if ((v14 & 1) == 0) {
            *(double *)(v4 + 48) = a3 - v13;
          }
        }
        char v9 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v3 + 48) = a3;
        char v9 = 1;
LABEL_18:
        *(unsigned char *)(v4 + 93) = v9;
LABEL_19:
        double v16 = a3 - *(double *)(v4 + 48);
        swift_beginAccess();
        uint64_t v17 = *(void *)(v4 + 24);
        char v18 = *(unsigned char *)(v4 + 112);
        swift_bridgeObjectRetain();
        v30[0] = v17;
        v30[1] = AGCreateWeakAttribute();
        char v31 = 0;
        char v32 = v18;
        swift_beginAccess();
        uint64_t v19 = *(void *)(v4 + 16);
        swift_beginAccess();
        double v20 = *(double *)(v4 + 32);
        double v21 = *(double *)(v4 + 40);
        swift_retain();
        double v22 = COERCE_DOUBLE(specialized Animation.animate<A>(value:time:context:)((uint64_t)v30, v19, v20, v21, v16));
        double v24 = v23;
        char v26 = v25;
        swift_release();
        if (v26)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v32, a2 | ((HIDWORD(a2) & 1) << 32), v16);
          *(void *)(v4 + 24) = v30[0];
          swift_bridgeObjectRelease();
          float64_t v27 = a1->f64[1] + v24 - *(double *)(v4 + 40);
          a1->f64[0] = a1->f64[0] + v22 - *(double *)(v4 + 32);
          a1->f64[1] = v27;
          swift_beginAccess();
          *(double *)(v4 + 72) = v22;
          *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v24;
          *(double *)(v4 + 64) = a3;
          double v28 = *(double *)(v4 + 56);
          if (v28 > 0.0) {
            *(double *)(v4 + 64) = v28 * (round(a3 / v28) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  char v9;
  uint64_t (*v10)(void);
  void *v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  uint64_t result;
  double v22;
  uint64_t (*v23)(void);
  void *v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  long long v29;
  double v30;
  double v31;
  double v32;
  char v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  char v54;
  double v55;
  double v56;
  uint64_t v57;
  char v58;
  void v59[2];
  char v60;
  char v61;
  long long v62[3];

  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 88);
  if (*(double *)(v3 + 96) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    unint64_t v12 = *(unsigned char *)(v4 + 128);
    double v13 = *(double *)(v4 + 136);
    double v14 = *(double *)(v4 + 144);
    uint64_t v51 = *(double *)(v4 + 120);
    LOBYTE(v52) = v12;
    uint64_t v49 = vaddq_f64(*(float64x2_t *)(v4 + 104), *a1);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v51, 1.0);
    uint64_t v15 = v13 + a1[2].f64[0];
    double v16 = v14 + a1[2].f64[1];
    swift_beginAccess();
    uint64_t v17 = *(void *)(v4 + 48);
    char v18 = *(unsigned char *)(v4 + 56);
    uint64_t v19 = *(double *)(v4 + 64);
    double v20 = *(double *)(v4 + 72);
    *a1 = vsubq_f64(v49, *(float64x2_t *)(v4 + 32));
    uint64_t v57 = v17;
    uint64_t v58 = v18;
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v57, -1.0);
    uint64_t result = 0;
    a1[2].f64[0] = v15 - v19;
    a1[2].f64[1] = v16 - v20;
  }
  else
  {
    switch(*(unsigned char *)(v3 + 157))
    {
      case 1:
        *(unsigned char *)(v3 + 157) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_19;
        }
        *(double *)(v4 + 96) = *(double *)(v4 + 96) - *(double *)(v4 + 80) + a3;
        *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          double v22 = 0.0333333333;
        }
        else {
          double v22 = v7 + v7;
        }
        if (v22 < a3 - *(double *)(v3 + 80))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v23 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          double v24 = static CoreGlue.shared;
          LOBYTE(v23) = v23();

          if ((v23 & 1) == 0) {
            *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3 - v22;
          }
        }
        char v9 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        char v9 = 1;
LABEL_18:
        *(unsigned char *)(v4 + 157) = v9;
LABEL_19:
        char v25 = a3 - *(double *)(v4 + 80);
        swift_beginAccess();
        char v26 = *(void *)(v4 + 24);
        float64_t v27 = *(unsigned char *)(v4 + 176);
        swift_bridgeObjectRetain();
        v59[0] = v26;
        v59[1] = AGCreateWeakAttribute();
        char v60 = 0;
        unint64_t v61 = v27;
        swift_beginAccess();
        double v28 = *(void *)(v4 + 16);
        swift_beginAccess();
        float64x2_t v29 = *(_OWORD *)(v4 + 48);
        v62[0] = *(_OWORD *)(v4 + 32);
        v62[1] = v29;
        v62[2] = *(_OWORD *)(v4 + 64);
        swift_retain();
        outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v62);
        specialized Animation.animate<A>(value:time:context:)(v62, (uint64_t)v59, v28, (uint64_t)&v51, v25);
        swift_release();
        outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v62);
        uint64_t v30 = v53;
        if (v53 == 0.0)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          char v31 = v55;
          char v32 = v56;
          id v33 = v54;
          unint64_t v35 = v51;
          uint64_t v34 = v52;
          uint64_t v50 = v52;
          uint64_t v47 = v56;
          uint64_t v48 = v51;
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v61, a2 | ((HIDWORD(a2) & 1) << 32), v25);
          *(void *)(v4 + 24) = v59[0];
          swift_bridgeObjectRelease();
          __n128 v36 = v35 + a1->f64[0];
          uint64_t v37 = v34 + a1->f64[1];
          uint64_t v51 = v30;
          LOBYTE(v52) = v33;
          ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v51, 1.0);
          uint64_t v38 = v31 + a1[2].f64[0];
          uint64_t v39 = v31;
          uint64_t v40 = v32 + a1[2].f64[1];
          uint64_t v41 = *(double *)(v4 + 48);
          double v42 = *(unsigned char *)(v4 + 56);
          unint64_t v43 = *(double *)(v4 + 64);
          uint64_t v44 = *(double *)(v4 + 72);
          uint64_t v45 = v37 - *(double *)(v4 + 40);
          a1->f64[0] = v36 - *(double *)(v4 + 32);
          a1->f64[1] = v45;
          uint64_t v51 = v41;
          LOBYTE(v52) = v42;
          ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v51, -1.0);
          a1[2].f64[0] = v38 - v43;
          a1[2].f64[1] = v40 - v44;
          swift_beginAccess();
          *(double *)(v4 + 104) = v48;
          *(double *)(v4 + 112) = v50;
          *(double *)(v4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v30;
          *(unsigned char *)(v4 + 128) = v33;
          *(double *)(v4 + 136) = v39;
          *(double *)(v4 + 144) = v47;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(double *)(v4 + 96) = a3;
          uint64_t v46 = *(double *)(v4 + 88);
          swift_bridgeObjectRelease();
          if (v46 > 0.0) {
            *(double *)(v4 + 96) = (round(a3 / v46) + 1.0) * *(double *)(v4 + 88);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  char v9;
  uint64_t (*v10)(void);
  void *v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  uint64_t result;
  double v22;
  uint64_t (*v23)(void);
  void *v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  long long v29;
  double v30;
  double v31;
  double v32;
  char v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  char v54;
  double v55;
  double v56;
  uint64_t v57;
  char v58;
  void v59[2];
  char v60;
  char v61;
  long long v62[3];

  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 88);
  if (*(double *)(v3 + 96) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    unint64_t v12 = *(unsigned char *)(v4 + 128);
    double v13 = *(double *)(v4 + 136);
    double v14 = *(double *)(v4 + 144);
    uint64_t v51 = *(double *)(v4 + 120);
    LOBYTE(v52) = v12;
    uint64_t v49 = vaddq_f64(*(float64x2_t *)(v4 + 104), *a1);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v51, 1.0);
    uint64_t v15 = v13 + a1[2].f64[0];
    double v16 = v14 + a1[2].f64[1];
    swift_beginAccess();
    uint64_t v17 = *(void *)(v4 + 48);
    char v18 = *(unsigned char *)(v4 + 56);
    uint64_t v19 = *(double *)(v4 + 64);
    double v20 = *(double *)(v4 + 72);
    *a1 = vsubq_f64(v49, *(float64x2_t *)(v4 + 32));
    uint64_t v57 = v17;
    uint64_t v58 = v18;
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v57, -1.0);
    uint64_t result = 0;
    a1[2].f64[0] = v15 - v19;
    a1[2].f64[1] = v16 - v20;
  }
  else
  {
    switch(*(unsigned char *)(v3 + 157))
    {
      case 1:
        *(unsigned char *)(v3 + 157) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_19;
        }
        *(double *)(v4 + 96) = *(double *)(v4 + 96) - *(double *)(v4 + 80) + a3;
        *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          double v22 = 0.0333333333;
        }
        else {
          double v22 = v7 + v7;
        }
        if (v22 < a3 - *(double *)(v3 + 80))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v23 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          double v24 = static CoreGlue.shared;
          LOBYTE(v23) = v23();

          if ((v23 & 1) == 0) {
            *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3 - v22;
          }
        }
        char v9 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
        char v9 = 1;
LABEL_18:
        *(unsigned char *)(v4 + 157) = v9;
LABEL_19:
        char v25 = a3 - *(double *)(v4 + 80);
        swift_beginAccess();
        char v26 = *(void *)(v4 + 24);
        float64_t v27 = *(unsigned char *)(v4 + 176);
        swift_bridgeObjectRetain();
        v59[0] = v26;
        v59[1] = AGCreateWeakAttribute();
        char v60 = 0;
        unint64_t v61 = v27;
        swift_beginAccess();
        double v28 = *(void *)(v4 + 16);
        swift_beginAccess();
        float64x2_t v29 = *(_OWORD *)(v4 + 48);
        v62[0] = *(_OWORD *)(v4 + 32);
        v62[1] = v29;
        v62[2] = *(_OWORD *)(v4 + 64);
        swift_retain();
        outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v62);
        specialized Animation.animate<A>(value:time:context:)(v62, (uint64_t)v59, v28, (uint64_t)&v51, v25);
        swift_release();
        outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v62);
        uint64_t v30 = v53;
        if (v53 == 0.0)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          char v31 = v55;
          char v32 = v56;
          id v33 = v54;
          unint64_t v35 = v51;
          uint64_t v34 = v52;
          uint64_t v50 = v52;
          uint64_t v47 = v56;
          uint64_t v48 = v51;
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v61, a2 | ((HIDWORD(a2) & 1) << 32), v25);
          *(void *)(v4 + 24) = v59[0];
          swift_bridgeObjectRelease();
          __n128 v36 = v35 + a1->f64[0];
          uint64_t v37 = v34 + a1->f64[1];
          uint64_t v51 = v30;
          LOBYTE(v52) = v33;
          ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v51, 1.0);
          uint64_t v38 = v31 + a1[2].f64[0];
          uint64_t v39 = v31;
          uint64_t v40 = v32 + a1[2].f64[1];
          uint64_t v41 = *(double *)(v4 + 48);
          double v42 = *(unsigned char *)(v4 + 56);
          unint64_t v43 = *(double *)(v4 + 64);
          uint64_t v44 = *(double *)(v4 + 72);
          uint64_t v45 = v37 - *(double *)(v4 + 40);
          a1->f64[0] = v36 - *(double *)(v4 + 32);
          a1->f64[1] = v45;
          uint64_t v51 = v41;
          LOBYTE(v52) = v42;
          ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v51, -1.0);
          a1[2].f64[0] = v38 - v43;
          a1[2].f64[1] = v40 - v44;
          swift_beginAccess();
          *(double *)(v4 + 104) = v48;
          *(double *)(v4 + 112) = v50;
          *(double *)(v4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v30;
          *(unsigned char *)(v4 + 128) = v33;
          *(double *)(v4 + 136) = v39;
          *(double *)(v4 + 144) = v47;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(double *)(v4 + 96) = a3;
          uint64_t v46 = *(double *)(v4 + 88);
          swift_bridgeObjectRelease();
          if (v46 > 0.0) {
            *(double *)(v4 + 96) = (round(a3 / v46) + 1.0) * *(double *)(v4 + 88);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float32x2_t *a1, unint64_t a2, double a3)
{
  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 72);
  if (*(double *)(v3 + 80) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    uint64_t v12 = *(void *)(v4 + 88);
    uint64_t v13 = *(void *)(v4 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    float32x2_t v14 = *(float32x2_t *)(v4 + 104);
    float32x2_t v15 = *(float32x2_t *)(v4 + 112);
    specialized static AnimatableArray.+= infix(_:_:)((uint64_t)a1, v12);
    specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&a1[1], v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    float32x2_t v16 = vadd_f32(v14, a1[2]);
    float32x2_t v17 = vadd_f32(v15, a1[3]);
    swift_beginAccess();
    uint64_t v18 = *(void *)(v4 + 32);
    uint64_t v19 = *(void *)(v4 + 40);
    float32x2_t v20 = *(float32x2_t *)(v4 + 48);
    float32x2_t v21 = *(float32x2_t *)(v4 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized static AnimatableArray.-= infix(_:_:)((uint64_t)a1, v18);
    specialized static AnimatableArray.-= infix(_:_:)((uint64_t)&a1[1], v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    a1[2] = vsub_f32(v16, v20);
    a1[3] = vsub_f32(v17, v21);
  }
  else
  {
    switch(*(unsigned char *)(v3 + 125))
    {
      case 1:
        *(unsigned char *)(v3 + 125) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_19;
        }
        *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(double *)(v4 + 80) - *(double *)(v4 + 64) + a3;
        *(double *)(v4 + 64) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          double v23 = 0.0333333333;
        }
        else {
          double v23 = v7 + v7;
        }
        if (v23 < a3 - *(double *)(v3 + 64))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v24 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          char v25 = static CoreGlue.shared;
          LOBYTE(v24) = v24();

          if ((v24 & 1) == 0) {
            *(double *)(v4 + 64) = a3 - v23;
          }
        }
        char v9 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v3 + 64) = a3;
        char v9 = 1;
LABEL_18:
        *(unsigned char *)(v4 + 125) = v9;
LABEL_19:
        double v26 = a3 - *(double *)(v4 + 64);
        swift_beginAccess();
        uint64_t v27 = *(void *)(v4 + 24);
        char v28 = *(unsigned char *)(v4 + 144);
        swift_bridgeObjectRetain();
        v57[0] = v27;
        v57[1] = AGCreateWeakAttribute();
        char v58 = 0;
        char v59 = v28;
        swift_beginAccess();
        uint64_t v29 = *(void *)(v4 + 16);
        swift_beginAccess();
        long long v30 = *(_OWORD *)(v4 + 48);
        v60[0] = *(_OWORD *)(v4 + 32);
        v60[1] = v30;
        swift_retain();
        outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v60);
        specialized Animation.animate<A>(value:time:context:)(v60, (uint64_t)v57, v29, (uint64_t)v54, v26);
        swift_release();
        outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v60);
        uint64_t v31 = v54[0];
        if (v54[0])
        {
          uint64_t v33 = v54[1];
          int v32 = v55;
          int v34 = v56;
          float v35 = *(float *)&v55;
          unint64_t v53 = HIDWORD(v55);
          float v36 = *((float *)&v55 + 1);
          float v37 = *(float *)&v56;
          unint64_t v38 = HIDWORD(v56);
          float v39 = *((float *)&v56 + 1);
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v59, a2 | ((HIDWORD(a2) & 1) << 32), v26);
          *(void *)(v4 + 24) = v57[0];
          swift_bridgeObjectRelease();
          specialized static AnimatableArray.+= infix(_:_:)((uint64_t)a1, v31);
          specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&a1[1], v33);
          float v40 = a1[2].f32[0] + v35;
          float v52 = a1[2].f32[1] + v36;
          float v41 = a1[3].f32[0] + v37;
          float v42 = a1[3].f32[1] + v39;
          uint64_t v43 = *(void *)(v4 + 32);
          uint64_t v44 = *(void *)(v4 + 40);
          float v45 = *(float *)(v4 + 48);
          float v46 = *(float *)(v4 + 52);
          double v47 = a3;
          float v49 = *(float *)(v4 + 56);
          float v48 = *(float *)(v4 + 60);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized static AnimatableArray.-= infix(_:_:)((uint64_t)a1, v43);
          specialized static AnimatableArray.-= infix(_:_:)((uint64_t)&a1[1], v44);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1[2].f32[0] = v40 - v45;
          a1[2].f32[1] = v52 - v46;
          a1[3].f32[0] = v41 - v49;
          a1[3].f32[1] = v42 - v48;
          swift_beginAccess();
          *(void *)(v4 + 88) = v31;
          *(void *)(v4 + 96) = v33;
          *(_DWORD *)(v4 + 104) = v32;
          *(_DWORD *)(v4 + 108) = v53;
          *(_DWORD *)(v4 + 112) = v34;
          *(_DWORD *)(v4 + 116) = v38;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v47;
          double v50 = *(double *)(v4 + 72);
          if (v50 <= 0.0)
          {
            outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v31);
          }
          else
          {
            double v51 = round(v47 / v50);
            outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v31);
            *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = (v51 + 1.0) * *(double *)(v4 + 72);
          }
          uint64_t result = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        break;
    }
  }
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(double a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  double v6 = *(double *)(v3 + 56);
  if (*(double *)(v3 + 64) + v6 * -0.5 >= a1)
  {
LABEL_8:
    swift_beginAccess();
    char v11 = *(unsigned char *)(v4 + 80);
    uint64_t v34 = *(void *)(v4 + 72);
    char v35 = v11;
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v34, 1.0);
    swift_beginAccess();
    char v12 = *(unsigned char *)(v4 + 40);
    uint64_t v29 = *(void *)(v4 + 32);
    char v30 = v12;
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v29, -1.0);
  }
  else
  {
    switch(*(unsigned char *)(v3 + 89))
    {
      case 1:
        *(unsigned char *)(v3 + 89) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        char v9 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        uint64_t v10 = static CoreGlue.shared;
        LOBYTE(v9) = v9();

        if (v9) {
          goto LABEL_20;
        }
        *(double *)(v4 + 64) = *(double *)(v4 + 64) - *(double *)(v4 + 48) + a1;
        *(double *)(v4 + 48) = a1;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          double v14 = 0.0333333333;
        }
        else {
          double v14 = v6 + v6;
        }
        if (v14 < a1 - *(double *)(v3 + 48))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          float32x2_t v15 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          float32x2_t v16 = static CoreGlue.shared;
          LOBYTE(v15) = v15();

          if ((v15 & 1) == 0) {
            *(double *)(v4 + 48) = a1 - v14;
          }
        }
        char v8 = 3;
        goto LABEL_19;
      case 3:
        goto LABEL_20;
      default:
        *(double *)(v3 + 48) = a1;
        char v8 = 1;
LABEL_19:
        *(unsigned char *)(v4 + 89) = v8;
LABEL_20:
        double v17 = a1 - *(double *)(v4 + 48);
        swift_beginAccess();
        uint64_t v18 = *(void *)(v4 + 24);
        char v19 = *(unsigned char *)(v4 + 112);
        swift_bridgeObjectRetain();
        v31[0] = v18;
        v31[1] = AGCreateWeakAttribute();
        char v32 = 0;
        char v33 = v19;
        swift_beginAccess();
        uint64_t v20 = *(void *)(v4 + 16);
        swift_beginAccess();
        char v21 = *(unsigned char *)(v4 + 40);
        swift_retain();
        uint64_t v22 = swift_bridgeObjectRetain();
        specialized Animation.animate<A>(value:time:context:)(v22, v21, (uint64_t)v31, v20, (uint64_t)&v27, v17);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v23 = v27;
        if (!v27)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        char v24 = v28;
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v33, a3 | ((HIDWORD(a3) & 1) << 32), v17);
        *(void *)(v4 + 24) = v31[0];
        swift_bridgeObjectRelease();
        uint64_t v27 = v23;
        char v28 = v24;
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v27, 1.0);
        char v25 = *(unsigned char *)(v4 + 40);
        uint64_t v27 = *(void *)(v4 + 32);
        char v28 = v25;
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v27, -1.0);
        swift_beginAccess();
        *(void *)(v4 + 72) = v23;
        *(unsigned char *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(double *)(v4 + 64) = a1;
        double v26 = *(double *)(v4 + 56);
        swift_bridgeObjectRelease();
        if (v26 > 0.0) {
          *(double *)(v4 + 64) = (round(a1 / v26) + 1.0) * *(double *)(v4 + 56);
        }
        break;
    }
  }
  return 0;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float64x2_t *a1, unint64_t a2, uint64_t (*a3)(void *, uint64_t, double, double, double, double), void (*a4)(void, uint64_t, double), double a5)
{
  uint64_t v6 = v5;
  double v9 = *(double *)(v5 + 64);
  if (*(double *)(v5 + 72) + v9 * -0.5 >= a5)
  {
LABEL_8:
    swift_beginAccess();
    double v16 = *(double *)(v6 + 96) + a1[1].f64[0];
    float64x2_t v40 = vaddq_f64(*(float64x2_t *)(v6 + 80), *a1);
    swift_beginAccess();
    uint64_t result = 0;
    double v18 = *(double *)(v6 + 48);
    *a1 = vsubq_f64(v40, *(float64x2_t *)(v6 + 32));
    a1[1].f64[0] = v16 - v18;
  }
  else
  {
    switch(*(unsigned char *)(v5 + 109))
    {
      case 1:
        *(unsigned char *)(v5 + 109) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v14 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        float32x2_t v15 = static CoreGlue.shared;
        LOBYTE(v14) = v14();

        if (v14) {
          goto LABEL_19;
        }
        *(double *)(v6 + 72) = *(double *)(v6 + 72) - *(double *)(v6 + 56) + a5;
        *(double *)(v6 + 56) = a5;
        goto LABEL_8;
      case 2:
        if (v9 < 0.0166666667) {
          double v19 = 0.0333333333;
        }
        else {
          double v19 = v9 + v9;
        }
        if (v19 < a5 - *(double *)(v5 + 56))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v20 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          char v21 = static CoreGlue.shared;
          LOBYTE(v2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v20();

          if ((v20 & 1) == 0) {
            *(double *)(v6 + 56) = a5 - v19;
          }
        }
        char v13 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v5 + 56) = a5;
        char v13 = 1;
LABEL_18:
        *(unsigned char *)(v6 + 109) = v13;
LABEL_19:
        double v22 = a5 - *(double *)(v6 + 56);
        swift_beginAccess();
        uint64_t v23 = *(void *)(v6 + 24);
        unsigned __int8 v24 = *(unsigned char *)(v6 + 128);
        swift_bridgeObjectRetain();
        v41[0] = v23;
        v41[1] = AGCreateWeakAttribute();
        char v42 = 0;
        unsigned __int8 v43 = v24;
        swift_beginAccess();
        uint64_t v25 = *(void *)(v6 + 16);
        swift_beginAccess();
        double v26 = *(double *)(v6 + 32);
        double v27 = *(double *)(v6 + 40);
        double v28 = *(double *)(v6 + 48);
        swift_retain();
        double v29 = COERCE_DOUBLE(a3(v41, v25, v26, v27, v28, v22));
        double v31 = v30;
        double v33 = v32;
        char v35 = v34;
        swift_release();
        if (v35)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          a4(v43, a2 | ((HIDWORD(a2) & 1) << 32), v22);
          *(void *)(v6 + 24) = v41[0];
          swift_bridgeObjectRelease();
          float64_t v36 = a1[1].f64[0] + v33;
          double v37 = *(double *)(v6 + 48);
          float64_t v38 = a1->f64[1] + v31 - *(double *)(v6 + 40);
          a1->f64[0] = a1->f64[0] + v29 - *(double *)(v6 + 32);
          a1->f64[1] = v38;
          a1[1].f64[0] = v36 - v37;
          swift_beginAccess();
          *(double *)(v6 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
          *(double *)(v6 + 88) = v31;
          *(double *)(v6 + 96) = v33;
          *(double *)(v6 + 72) = a5;
          double v39 = *(double *)(v6 + 64);
          if (v39 > 0.0) {
            *(double *)(v6 + 72) = v39 * (round(a5 / v39) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 88);
  if (*(double *)(v2 + 96) + v6 * -0.5 < a2)
  {
    switch(*(unsigned char *)(v2 + 153))
    {
      case 1:
        *(unsigned char *)(v2 + 153) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        char v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_29;
        }
        *(double *)(v3 + 96) = *(double *)(v3 + 96) - *(double *)(v3 + 80) + a2;
        *(double *)(v3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          double v28 = 0.0333333333;
        }
        else {
          double v28 = v6 + v6;
        }
        if (v28 < a2 - *(double *)(v2 + 80))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v29 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          double v30 = static CoreGlue.shared;
          LOBYTE(v29) = v29();

          if ((v29 & 1) == 0) {
            *(double *)(v3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a2 - v28;
          }
        }
        char v7 = 3;
        goto LABEL_28;
      case 3:
        goto LABEL_29;
      default:
        *(double *)(v2 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a2;
        char v7 = 1;
LABEL_28:
        *(unsigned char *)(v3 + 153) = v7;
LABEL_29:
        double v31 = a2 - *(double *)(v3 + 80);
        swift_beginAccess();
        uint64_t v32 = *(void *)(v3 + 24);
        char v33 = *(unsigned char *)(v3 + 176);
        swift_bridgeObjectRetain();
        v64[0] = v32;
        v64[1] = AGCreateWeakAttribute();
        char v65 = 0;
        char v66 = v33;
        swift_beginAccess();
        uint64_t v34 = *(void *)(v3 + 16);
        swift_beginAccess();
        outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(v3 + 32, (uint64_t)v67);
        swift_retain();
        specialized Animation.animate<A>(value:time:context:)((uint64_t)v67, (uint64_t)v64, v34, (uint64_t)&v58, v31);
        swift_release();
        if (v63)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        int64x2_t v57 = v58;
        double v35 = v59;
        double v36 = v60;
        double v37 = v61;
        char v38 = v62;
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v66, v31);
        *(void *)(v3 + 24) = v64[0];
        swift_bridgeObjectRelease();
        int64x2_t v39 = *(int64x2_t *)a1;
        double v40 = *(double *)(a1 + 16);
        double v41 = *(double *)(a1 + 24);
        double v42 = *(double *)(a1 + 32);
        char v43 = *(unsigned char *)(a1 + 40);
        if (v38)
        {
          uint64_t v44 = *(void *)(a1 + 8);
          uint64_t v45 = *(void *)a1;
          if (*(unsigned char *)(v3 + 72)) {
            goto LABEL_42;
          }
          goto LABEL_38;
        }
        if (*(unsigned char *)(a1 + 40))
        {
          uint64_t v44 = v57.i64[1];
          uint64_t v45 = v57.i64[0];
          *(int64x2_t *)a1 = v57;
          double v42 = v37;
          double v40 = v35;
          double v41 = v36;
          *(double *)(a1 + 16) = v35;
          *(double *)(a1 + 24) = v36;
        }
        else
        {
          double v40 = v35 + v40;
          double v41 = v36 + v41;
          double v42 = v37 + v42;
          float32x2_t v46 = vadd_f32((float32x2_t)vmovn_s64(v57), (float32x2_t)vmovn_s64(v39));
          v47.i64[0] = v46.u32[0];
          v47.i64[1] = v46.u32[1];
          int8x16_t v48 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v57, 0x20uLL), (float32x2_t)vshrn_n_s64(v39, 0x20uLL)), 0x20uLL), v47);
          *(int8x16_t *)a1 = v48;
          *(double *)(a1 + 16) = v40;
          *(double *)(a1 + 24) = v41;
          uint64_t v44 = v48.i64[1];
          uint64_t v45 = v48.i64[0];
        }
        char v43 = 0;
        *(double *)(a1 + 32) = v42;
        *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
        if ((*(unsigned char *)(v3 + 72) & 1) == 0)
        {
LABEL_38:
          uint64_t v50 = *(void *)(v3 + 32);
          uint64_t v49 = *(void *)(v3 + 40);
          double v52 = *(double *)(v3 + 48);
          double v51 = *(double *)(v3 + 56);
          double v53 = *(double *)(v3 + 64);
          if (v43)
          {
            *(void *)a1 = v50;
            *(void *)(a1 + 8) = v49;
            double v54 = v53;
            *(double *)(a1 + 16) = v52;
            *(double *)(a1 + 24) = v51;
          }
          else
          {
            *(void *)a1 = COERCE_UNSIGNED_INT(*(float *)&v45 - *(float *)&v50) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v45 + 1) - *((float *)&v50 + 1)) << 32);
            *(void *)(a1 + 8) = COERCE_UNSIGNED_INT(*(float *)&v44 - *(float *)&v49) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v44 + 1) - *((float *)&v49 + 1)) << 32);
            double v54 = v42 - v53;
            *(double *)(a1 + 16) = v40 - v52;
            *(double *)(a1 + 24) = v41 - v51;
          }
          *(double *)(a1 + 32) = v54;
          *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
        }
LABEL_42:
        swift_beginAccess();
        *(int64x2_t *)(v3 + 104) = v57;
        *(double *)(v3 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v35;
        *(double *)(v3 + 128) = v36;
        *(double *)(v3 + 136) = v37;
        *(unsigned char *)(v3 + 144) = v38 & 1;
        *(double *)(v3 + 96) = a2;
        double v55 = *(double *)(v3 + 88);
        if (v55 > 0.0) {
          *(double *)(v3 + 96) = v55 * (round(a2 / v55) + 1.0);
        }
        break;
    }
    return 0;
  }
LABEL_8:
  swift_beginAccess();
  int64x2_t v10 = *(int64x2_t *)a1;
  double v11 = *(double *)(a1 + 16);
  double v12 = *(double *)(a1 + 24);
  double v13 = *(double *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  if (*(unsigned char *)(v3 + 144))
  {
    int64x2_t v56 = *(int64x2_t *)a1;
  }
  else
  {
    double v15 = *(double *)(v3 + 120);
    double v16 = *(double *)(v3 + 128);
    double v17 = *(double *)(v3 + 136);
    int64x2_t v18 = *(int64x2_t *)(v3 + 104);
    if (*(unsigned char *)(a1 + 40))
    {
      *(int64x2_t *)a1 = v18;
    }
    else
    {
      double v15 = v15 + v11;
      double v16 = v16 + v12;
      float32x2_t v19 = vadd_f32((float32x2_t)vmovn_s64(v18), (float32x2_t)vmovn_s64(v10));
      v20.i64[0] = v19.u32[0];
      v20.i64[1] = v19.u32[1];
      int64x2_t v18 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v18, 0x20uLL), (float32x2_t)vshrn_n_s64(v10, 0x20uLL)), 0x20uLL), v20);
      *(int64x2_t *)a1 = v18;
      double v17 = v17 + v13;
    }
    *(double *)(a1 + 16) = v15;
    *(double *)(a1 + 24) = v16;
    char v14 = 0;
    *(double *)(a1 + 32) = v17;
    *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    double v11 = v15;
    double v12 = v16;
    double v13 = v17;
    int64x2_t v56 = v18;
  }
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 72)) {
    return 0;
  }
  uint64_t v22 = *(void *)(v3 + 32);
  uint64_t v21 = *(void *)(v3 + 40);
  double v24 = *(double *)(v3 + 48);
  double v23 = *(double *)(v3 + 56);
  uint64_t v25 = *(void *)(v3 + 64);
  uint64_t result = 0;
  if (v14)
  {
    *(void *)a1 = v22;
    *(void *)(a1 + 8) = v21;
    *(double *)(a1 + 16) = v24;
    *(double *)(a1 + 24) = v23;
    *(void *)(a1 + 32) = v25;
  }
  else
  {
    double v27 = *(double *)(v3 + 64);
    *(void *)a1 = COERCE_UNSIGNED_INT(*(float *)v56.i32 - *(float *)&v22) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v56.i32[1]- *((float *)&v22 + 1)) << 32);
    *(void *)(a1 + 8) = COERCE_UNSIGNED_INT(*(float *)&v56.i32[2] - *(float *)&v21) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v56.i32[3] - *((float *)&v21 + 1)) << 32);
    *(double *)(a1 + 16) = v11 - v24;
    *(double *)(a1 + 24) = v12 - v23;
    *(double *)(a1 + 32) = v13 - v27;
  }
  *(unsigned char *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(void *a1, unint64_t a2, double a3)
{
  uint64_t v4 = v3;
  double v7 = *(double *)(v3 + 80);
  if (*(double *)(v3 + 88) + v7 * -0.5 >= a3)
  {
LABEL_8:
    swift_beginAccess();
    outlined init with copy of _AnyAnimatableData((void *)(v4 + 96), v32);
    uint64_t v12 = *a1;
    if (*a1 == *(void *)&v32[0])
    {
      (*(void (**)(void *, char *))(v12 + 96))(a1 + 1, (char *)v32 + 8);
    }
    else if (v12 == type metadata accessor for ZeroVTable())
    {
      outlined destroy of _AnyAnimatableData((uint64_t)a1);
      outlined init with copy of _AnyAnimatableData(v32, a1);
    }
    outlined destroy of _AnyAnimatableData((uint64_t)v32);
    swift_beginAccess();
    outlined init with copy of _AnyAnimatableData((void *)(v4 + 32), v32);
    uint64_t v13 = *a1;
    if (*a1 == *(void *)&v32[0])
    {
      (*(void (**)(void *, char *))(v13 + 104))(a1 + 1, (char *)v32 + 8);
    }
    else if (v13 == type metadata accessor for ZeroVTable())
    {
      outlined destroy of _AnyAnimatableData((uint64_t)a1);
      outlined init with copy of _AnyAnimatableData(v32, a1);
      (*(void (**)(void *))(*a1 + 112))(a1 + 1);
    }
LABEL_38:
    outlined destroy of _AnyAnimatableData((uint64_t)v32);
  }
  else
  {
    switch(*(unsigned char *)(v3 + 141))
    {
      case 1:
        *(unsigned char *)(v3 + 141) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        int64x2_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v11 = static CoreGlue.shared;
        LOBYTE(v1specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v10();

        if (v10) {
          goto LABEL_26;
        }
        *(double *)(v4 + 88) = *(double *)(v4 + 88) - *(double *)(v4 + 72) + a3;
        *(double *)(v4 + 72) = a3;
        goto LABEL_8;
      case 2:
        if (v7 < 0.0166666667) {
          double v14 = 0.0333333333;
        }
        else {
          double v14 = v7 + v7;
        }
        if (v14 < a3 - *(double *)(v3 + 72))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v15 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          double v16 = static CoreGlue.shared;
          LOBYTE(v15) = v15();

          if ((v15 & 1) == 0) {
            *(double *)(v4 + 72) = a3 - v14;
          }
        }
        char v9 = 3;
        goto LABEL_25;
      case 3:
        goto LABEL_26;
      default:
        *(double *)(v3 + 72) = a3;
        char v9 = 1;
LABEL_25:
        *(unsigned char *)(v4 + 141) = v9;
LABEL_26:
        double v17 = a3 - *(double *)(v4 + 72);
        swift_beginAccess();
        uint64_t v18 = *(void *)(v4 + 24);
        char v19 = *(unsigned char *)(v4 + 160);
        swift_bridgeObjectRetain();
        v29[0] = v18;
        v29[1] = AGCreateWeakAttribute();
        char v30 = 0;
        char v31 = v19;
        swift_beginAccess();
        uint64_t v20 = *(void *)(v4 + 16);
        swift_beginAccess();
        outlined init with copy of _AnyAnimatableData((void *)(v4 + 32), v26);
        swift_retain();
        specialized Animation.animate<A>(value:time:context:)(v26, (uint64_t)v29, v20, (uint64_t)v27, v17);
        swift_release();
        outlined destroy of _AnyAnimatableData((uint64_t)v26);
        if (!*(void *)&v27[0])
        {
          swift_bridgeObjectRelease();
          outlined destroy of _AnyAnimatableData?((uint64_t)v27);
          return 1;
        }
        v32[0] = v27[0];
        v32[1] = v27[1];
        uint64_t v33 = v28;
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v31, a2 | ((HIDWORD(a2) & 1) << 32), v17);
        *(void *)(v4 + 24) = v29[0];
        swift_bridgeObjectRelease();
        uint64_t v21 = *a1;
        if (*a1 == *(void *)&v32[0])
        {
          (*(void (**)(void *, char *))(v21 + 96))(a1 + 1, (char *)v32 + 8);
        }
        else if (v21 == type metadata accessor for ZeroVTable())
        {
          outlined destroy of _AnyAnimatableData((uint64_t)a1);
          outlined init with copy of _AnyAnimatableData(v32, a1);
        }
        outlined init with copy of _AnyAnimatableData((void *)(v4 + 32), v27);
        uint64_t v23 = *a1;
        if (*a1 == *(void *)&v27[0])
        {
          (*(void (**)(void *, char *))(v23 + 104))(a1 + 1, (char *)v27 + 8);
        }
        else if (v23 == type metadata accessor for ZeroVTable())
        {
          outlined destroy of _AnyAnimatableData((uint64_t)a1);
          outlined init with copy of _AnyAnimatableData(v27, a1);
          (*(void (**)(void *))(*a1 + 112))(a1 + 1);
        }
        outlined destroy of _AnyAnimatableData((uint64_t)v27);
        swift_beginAccess();
        outlined assign with copy of _AnyAnimatableData((uint64_t)v32, v4 + 96);
        swift_endAccess();
        *(double *)(v4 + 88) = a3;
        double v24 = *(double *)(v4 + 80);
        if (v24 <= 0.0) {
          goto LABEL_38;
        }
        double v25 = round(a3 / v24);
        outlined destroy of _AnyAnimatableData((uint64_t)v32);
        *(double *)(v4 + 88) = (v25 + 1.0) * *(double *)(v4 + 80);
        break;
    }
  }
  return 0;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a2;
  if (!*(unsigned char *)(v3 + 77))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(void *)(v3 + 32) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 40);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 96);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  char v32 = 0;
  char v33 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v3 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v13, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 96) = 0;
  uint64_t v14 = *(void *)(v3 + 16);
  v30[0] = *(void *)(v3 + 32);
  double v15 = *(uint64_t (**)(uint64_t, void *, void *, ValueMetadata *, unint64_t, double))(*(void *)a1 + 136);
  unint64_t v16 = lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData();
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v16) = v15(v14, v30, v31, &type metadata for _ShapeStyle_Pack.AnimatableData, v16, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v16)
  {
    *(void *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    double v17 = *(void **)(v4 + 32);
    swift_beginAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (void *)(v4 + 24), v17, a1, a2, v8);
    swift_endAccess();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)(v4 + 32, &v34);
  swift_endAccess();
  *(double *)(v4 + 56) = a3;
LABEL_6:
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  double v20 = *(double *)(v19 + 72);
  char v21 = *(unsigned char *)(v19 + 80);
  swift_release();
  if (v21) {
    return;
  }
  double v22 = 0.0;
  if (v20 > 0.0)
  {
    long double v23 = log2(v20 * 240.0);
    double v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 48)) {
    double v22 = *(double *)(v4 + 48);
  }
  *(double *)(v4 + 48) = v22;
  if (v22 >= 0.0166666667)
  {
    int v26 = 0;
    char v28 = 1;
    goto LABEL_29;
  }
  uint64_t v24 = swift_retain();
  uint64_t v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  int v26 = *(_DWORD *)(v25 + 72);
  char v27 = *(unsigned char *)(v25 + 76);
  swift_release();
  if (v27)
  {
LABEL_28:
    int v26 = *(_DWORD *)(v4 + 72);
    char v28 = *(unsigned char *)(v4 + 76);
    goto LABEL_29;
  }
  char v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 72) = v26;
  *(unsigned char *)(v4 + 76) = v28;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void *, void *, ValueMetadata *, unint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  double v22;
  long double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  unsigned int v29;
  void v30[3];
  void v31[2];
  char v32;
  char v33;
  uint64_t v34;

  uint64_t v4 = v3;
  uint64_t v34 = a2;
  if (!*(unsigned char *)(v3 + 77))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(void *)(v3 + 32) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 40);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 96);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  char v32 = 0;
  char v33 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v3 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v13, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 96) = 0;
  uint64_t v14 = *(void *)(v3 + 16);
  v30[0] = *(void *)(v3 + 32);
  double v15 = *(uint64_t (**)(uint64_t, void *, void *, ValueMetadata *, unint64_t, double))(*(void *)a1 + 136);
  unint64_t v16 = lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData();
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v16) = v15(v14, v30, v31, &type metadata for ShaderVectorData, v16, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v16)
  {
    *(void *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    double v17 = *(void *)(v4 + 32);
    swift_beginAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), v17, a1, a2, v8);
    swift_endAccess();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  specialized static ShaderVectorData.+= infix(_:_:)(v4 + 32, &v34);
  swift_endAccess();
  *(double *)(v4 + 56) = a3;
LABEL_6:
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  double v20 = *(double *)(v19 + 72);
  char v21 = *(unsigned char *)(v19 + 80);
  swift_release();
  if (v21) {
    return;
  }
  double v22 = 0.0;
  if (v20 > 0.0)
  {
    long double v23 = log2(v20 * 240.0);
    double v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 48)) {
    double v22 = *(double *)(v4 + 48);
  }
  *(double *)(v4 + 48) = v22;
  if (v22 >= 0.0166666667)
  {
    int v26 = 0;
    char v28 = 1;
    goto LABEL_29;
  }
  uint64_t v24 = swift_retain();
  uint64_t v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  int v26 = *(_DWORD *)(v25 + 72);
  char v27 = *(unsigned char *)(v25 + 76);
  swift_release();
  if (v27)
  {
LABEL_28:
    int v26 = *(_DWORD *)(v4 + 72);
    char v28 = *(unsigned char *)(v4 + 76);
    goto LABEL_29;
  }
  char v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 72) = v26;
  *(unsigned char *)(v4 + 76) = v28;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  uint64_t (*v16)(uint64_t, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  double v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  char v28;
  double v29;
  long double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;
  unsigned int v36;
  long long v37;
  uint64_t v38;
  void v39[2];
  char v40;
  char v41;
  long long v42;
  long long v43;
  uint64_t v44;
  long long v45[2];
  uint64_t v46;

  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 141))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    double v36 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v36)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    double v37 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 48) = v37;
    *(void *)(v3 + 64) = *(void *)(a2 + 32);
    goto LABEL_6;
  }
LABEL_2:
  char v38 = a2;
  double v8 = a3 - *(double *)(v3 + 72);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 160);
  swift_bridgeObjectRetain();
  v39[0] = v9;
  v39[1] = AGCreateWeakAttribute();
  double v40 = 0;
  double v41 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  uint64_t v13 = *(_OWORD *)(v3 + 48);
  v45[0] = *(_OWORD *)(v3 + 32);
  v45[1] = v13;
  float32x2_t v46 = *(void *)(v3 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v45);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  uint64_t v14 = *(void *)(v3 + 64);
  double v15 = *(_OWORD *)(v3 + 48);
  double v42 = *(_OWORD *)(v3 + 32);
  char v43 = v15;
  uint64_t v44 = v14;
  unint64_t v16 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  uint64_t v18 = v17;
  uint64_t v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
  double v20 = swift_retain();
  LOBYTE(v18) = v16(v20, &v42, v39, v18, v19, v8);
  swift_release();
  if (v18)
  {
    *(void *)(v4 + 24) = v39[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    char v21 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v22 = *(_OWORD *)(v4 + 48);
    double v42 = *(_OWORD *)(v4 + 32);
    char v43 = v22;
    uint64_t v44 = *(void *)(v4 + 64);
    swift_beginAccess();
    swift_beginAccess();
    char v21 = v38;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (uint64_t)&v42, a1, v38, v8);
    swift_endAccess();
    swift_endAccess();
  }
  long double v23 = *(double *)(v21 + 32);
  uint64_t v24 = vaddq_f64(*(float64x2_t *)(v21 + 16), *(float64x2_t *)(v4 + 48));
  *(float32x4_t *)(v4 + 32) = vaddq_f32(*(float32x4_t *)v21, *(float32x4_t *)(v4 + 32));
  *(float64x2_t *)(v4 + 48) = v24;
  *(double *)(v4 + 64) = v23 + *(double *)(v4 + 64);
  *(double *)(v4 + 88) = a3;
LABEL_6:
  uint64_t v25 = swift_retain();
  int v26 = specialized find<A>(_:key:)(v25);
  if (!v26)
  {
    swift_release();
    return;
  }
  char v27 = *(double *)(v26 + 72);
  char v28 = *(unsigned char *)(v26 + 80);
  swift_release();
  if (v28) {
    return;
  }
  unsigned int v29 = 0.0;
  if (v27 > 0.0)
  {
    char v30 = log2(v27 * 240.0);
    unsigned int v29 = exp2(floor(v30 + 0.01)) * 0.00416666667;
  }
  if (v29 >= *(double *)(v4 + 80)) {
    unsigned int v29 = *(double *)(v4 + 80);
  }
  *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
  if (v29 >= 0.0166666667)
  {
    char v33 = 0;
    double v35 = 1;
    goto LABEL_29;
  }
  char v31 = swift_retain();
  char v32 = specialized find<A>(_:key:)(v31);
  if (!v32)
  {
    swift_release();
    goto LABEL_28;
  }
  char v33 = *(_DWORD *)(v32 + 72);
  uint64_t v34 = *(unsigned char *)(v32 + 76);
  swift_release();
  if (v34)
  {
LABEL_28:
    char v33 = *(_DWORD *)(v4 + 136);
    double v35 = *(unsigned char *)(v4 + 140);
    goto LABEL_29;
  }
  double v35 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 136) = v33;
  *(unsigned char *)(v4 + 14specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v35;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  long long v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  long long v34;
  long long v35;
  long long v36;
  float v37;
  uint64_t v38;
  long long v39;
  long long v40;
  long long v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  char v45;
  double v46;
  long double v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  long long v61;
  long long v62;
  long long v63;
  char *v64;
  uint64_t (*v65)(uint64_t, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  long long *v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  _OWORD v81[6];
  uint64_t v82;
  void v83[2];
  char v84;
  char v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  uint64_t v92;
  _OWORD v93[6];
  uint64_t v94;

  uint64_t v4 = v3;
  uint64_t v64 = (char *)(v3 + 268);
  if (!*(unsigned char *)(v3 + 269))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    double v53 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v53)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    uint64_t v80 = *(void *)(v3 + 32);
    uint64_t v76 = *(void *)(v3 + 48);
    char v77 = *(void *)(v3 + 40);
    double v54 = *(void *)(v3 + 64);
    unint64_t v74 = *(void *)(v3 + 56);
    double v55 = *(void *)(v3 + 72);
    int64x2_t v56 = *(void *)(v3 + 80);
    int64x2_t v58 = *(void *)(v3 + 88);
    int64x2_t v57 = *(void *)(v3 + 96);
    double v59 = *(void *)(v4 + 104);
    double v60 = *(unsigned char *)(v4 + 112);
    outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
    double v61 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v4 + 112) = v61;
    *(void *)(v4 + 128) = *(void *)(a2 + 96);
    char v62 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 48) = v62;
    char v63 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v63;
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v80, v77, v76, v74, v54, v55, v56, v58, v57, v59, v60);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  unint64_t v79 = a1;
  double v7 = a3 - *(double *)(v3 + 136);
  uint64_t v75 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  double v8 = *(void *)(v3 + 24);
  uint64_t v9 = *(unsigned char *)(v3 + 288);
  swift_bridgeObjectRetain();
  v83[0] = v8;
  v83[1] = AGCreateWeakAttribute();
  int v84 = 0;
  int v85 = v9;
  uint64_t v72 = (uint64_t *)(v3 + 16);
  swift_beginAccess();
  char v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  uint64_t v73 = (long long *)(v3 + 32);
  swift_beginAccess();
  uint64_t v12 = *(_OWORD *)(v3 + 112);
  v93[4] = *(_OWORD *)(v3 + 96);
  v93[5] = v12;
  CGFloat v94 = *(void *)(v3 + 128);
  uint64_t v13 = *(_OWORD *)(v3 + 48);
  v93[0] = *(_OWORD *)(v3 + 32);
  v93[1] = v13;
  uint64_t v14 = *(_OWORD *)(v3 + 80);
  v93[2] = *(_OWORD *)(v3 + 64);
  v93[3] = v14;
  outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)v93);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v10, v11, (uint64_t)v93);
  swift_release();
  outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)v93);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 288) = 0;
  unint64_t v16 = *(void *)(v3 + 32);
  double v15 = *(void *)(v3 + 40);
  double v17 = *(void *)(v3 + 48);
  uint64_t v18 = *(void *)(v3 + 56);
  uint64_t v19 = *(void *)(v3 + 64);
  double v20 = *(void *)(v3 + 72);
  char v21 = *(void *)(v3 + 80);
  double v22 = *(void *)(v3 + 88);
  long double v23 = *(void *)(v3 + 96);
  uint64_t v24 = *(void *)(v3 + 104);
  uint64_t v25 = *(unsigned char *)(v3 + 112);
  int v26 = *(_DWORD *)(v3 + 120);
  char v27 = *(void *)(v3 + 128);
  *(void *)&uint64_t v86 = v16;
  *((void *)&v86 + 1) = v15;
  char v66 = v17;
  uint64_t v67 = v15;
  *(void *)&int v87 = v17;
  *((void *)&v87 + 1) = v18;
  uint64_t v70 = v20;
  uint64_t v71 = v19;
  *(void *)&unsigned __int8 v88 = v19;
  *((void *)&v88 + 1) = v20;
  uint64_t v68 = v22;
  uint64_t v69 = v21;
  *(void *)&int v89 = v21;
  *((void *)&v89 + 1) = v22;
  *(void *)&uint64_t v90 = v23;
  *((void *)&v90 + 1) = v24;
  LOBYTE(v91) = v25;
  DWORD2(v91) = v26;
  unsigned int v92 = v27;
  char v65 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)v79 + 136);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v16, v15, v17, v18, v19, v20, v21, v22, v23, v24, v25);
  type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
  unsigned int v29 = v28;
  char v30 = lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  char v31 = swift_retain();
  LOBYTE(v3specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v65(v31, &v86, v83, v29, v30, v7);
  swift_release();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v16, v67, v66, v18, v71, v70, v69, v68, v23, v24, v25);
  swift_bridgeObjectRelease();
  if (v30)
  {
    void *v75 = v83[0];
    swift_bridgeObjectRelease();
    *uint64_t v72 = v79;
    swift_retain();
    swift_release();
    char v32 = a2;
    char v33 = v4 + 32;
  }
  else
  {
    swift_bridgeObjectRelease();
    char v33 = v4 + 32;
    uint64_t v34 = *(_OWORD *)(v4 + 112);
    uint64_t v90 = *(_OWORD *)(v4 + 96);
    int v91 = v34;
    unsigned int v92 = *(void *)(v4 + 128);
    double v35 = *(_OWORD *)(v4 + 48);
    uint64_t v86 = *v73;
    int v87 = v35;
    double v36 = *(_OWORD *)(v4 + 80);
    unsigned __int8 v88 = *(_OWORD *)(v4 + 64);
    int v89 = v36;
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)&v86);
    char v32 = a2;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v72, v75, (uint64_t)&v86, v79, a2, v7);
    swift_endAccess();
    swift_endAccess();
    outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)&v86);
  }
  swift_beginAccess();
  double v37 = *(float *)(v32 + 88);
  char v38 = *(void *)(v32 + 96);
  int64x2_t v39 = *(_OWORD *)(v32 + 80);
  unsigned char v81[4] = *(_OWORD *)(v32 + 64);
  v81[5] = v39;
  int v82 = v38;
  double v40 = *(_OWORD *)(v32 + 16);
  v81[0] = *(_OWORD *)v32;
  v81[1] = v40;
  double v41 = *(_OWORD *)(v32 + 48);
  v81[2] = *(_OWORD *)(v32 + 32);
  v81[3] = v41;
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(v33, (uint64_t)v81);
  *(float *)(v4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v37 + *(float *)(v4 + 120);
  specialized static AnimatableArray.+= infix(_:_:)(v4 + 128, v38);
  swift_endAccess();
  *(double *)(v4 + 152) = a3;
LABEL_6:
  double v42 = swift_retain();
  char v43 = specialized find<A>(_:key:)(v42);
  if (!v43)
  {
    swift_release();
    return;
  }
  uint64_t v44 = *(double *)(v43 + 72);
  uint64_t v45 = *(unsigned char *)(v43 + 80);
  swift_release();
  if (v45) {
    return;
  }
  float32x2_t v46 = 0.0;
  if (v44 > 0.0)
  {
    int8x16_t v47 = log2(v44 * 240.0);
    float32x2_t v46 = exp2(floor(v47 + 0.01)) * 0.00416666667;
  }
  if (v46 >= *(double *)(v4 + 144)) {
    float32x2_t v46 = *(double *)(v4 + 144);
  }
  *(double *)(v4 + 144) = v46;
  if (v46 >= 0.0166666667)
  {
    uint64_t v50 = 0;
    double v52 = 1;
    goto LABEL_29;
  }
  int8x16_t v48 = swift_retain();
  uint64_t v49 = specialized find<A>(_:key:)(v48);
  if (!v49)
  {
    swift_release();
    goto LABEL_28;
  }
  uint64_t v50 = *(_DWORD *)(v49 + 72);
  double v51 = *(unsigned char *)(v49 + 76);
  swift_release();
  if (v51)
  {
LABEL_28:
    uint64_t v50 = *(_DWORD *)(v4 + 264);
    double v52 = *v64;
    goto LABEL_29;
  }
  double v52 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 264) = v50;
  char *v64 = v52;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char v30;
  double v31;
  long double v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t (*v47)(uint64_t, void *, void *, ValueMetadata *, unint64_t, double);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  void v60[2];
  char v61;
  char v62;
  unsigned char v63[88];
  void v64[10];
  char v65;
  unsigned char v66[96];

  uint64_t v4 = v3;
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a2, (uint64_t)v63);
  if (!*(unsigned char *)(v3 + 233))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    char v38 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v38)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    int64x2_t v57 = *(void *)(v3 + 40);
    double v59 = *(void *)(v3 + 32);
    int64x2_t v39 = *(void *)(v3 + 64);
    double v54 = *(void *)(v3 + 56);
    int64x2_t v56 = *(void *)(v3 + 48);
    double v40 = *(void *)(v3 + 72);
    double v41 = *(void *)(v3 + 80);
    char v43 = *(void *)(v3 + 88);
    double v42 = *(void *)(v3 + 96);
    uint64_t v44 = *(void *)(v3 + 104);
    uint64_t v45 = *(unsigned char *)(v3 + 112);
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a2, v3 + 32);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v59, v57, v56, v54, v39, v40, v41, v43, v42, v44, v45);
    goto LABEL_6;
  }
LABEL_2:
  double v7 = a3 - *(double *)(v3 + 120);
  int64x2_t v58 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  double v8 = *(void *)(v3 + 24);
  uint64_t v9 = *(unsigned char *)(v3 + 256);
  swift_bridgeObjectRetain();
  v60[0] = v8;
  v60[1] = AGCreateWeakAttribute();
  double v61 = 0;
  char v62 = v9;
  double v55 = (uint64_t *)(v3 + 16);
  swift_beginAccess();
  char v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  swift_beginAccess();
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v3 + 32, (uint64_t)v66);
  outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v10, v11, (uint64_t)v66);
  swift_release();
  outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 256) = 0;
  uint64_t v12 = *(void *)(v3 + 32);
  uint64_t v13 = *(void *)(v3 + 40);
  double v15 = *(void *)(v3 + 48);
  uint64_t v14 = *(void *)(v3 + 56);
  unint64_t v16 = *(void *)(v3 + 64);
  double v17 = *(void *)(v3 + 72);
  uint64_t v19 = *(void *)(v3 + 80);
  uint64_t v18 = *(void *)(v3 + 88);
  double v20 = a1;
  char v21 = *(void *)(v4 + 96);
  double v22 = *(void *)(v4 + 104);
  long double v23 = *(unsigned char *)(v4 + 112);
  v64[0] = v12;
  v64[1] = v13;
  void v64[2] = v15;
  v64[3] = v14;
  int8x16_t v48 = v15;
  uint64_t v49 = v18;
  double v51 = v16;
  double v52 = v14;
  v64[4] = v16;
  v64[5] = v17;
  uint64_t v50 = v17;
  v64[6] = v19;
  void v64[7] = v18;
  v64[8] = v21;
  v64[9] = v22;
  char v65 = v23;
  int8x16_t v47 = *(uint64_t (**)(uint64_t, void *, void *, ValueMetadata *, unint64_t, double))(*(void *)v20 + 136);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v12, v13, v15, v14, v16, v17, v19, v18, v21, v22, v23);
  uint64_t v24 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
  uint64_t v25 = swift_retain();
  double v53 = v20;
  LOBYTE(v2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v47(v25, v64, v60, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v24, v7);
  swift_release();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v12, v13, v48, v52, v51, v50, v19, v49, v21, v22, v23);
  if (v20)
  {
    char *v58 = v60[0];
    swift_bridgeObjectRelease();
    *double v55 = v53;
    swift_retain();
    swift_release();
    int v26 = v4 + 32;
  }
  else
  {
    swift_bridgeObjectRelease();
    int v26 = v4 + 32;
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v4 + 32, (uint64_t)v64);
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v55, v58, (uint64_t)v64, v53, a2, v7);
    swift_endAccess();
    swift_endAccess();
    outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
  }
  swift_beginAccess();
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(v26, (uint64_t)v63);
  swift_endAccess();
  *(double *)(v4 + 136) = a3;
LABEL_6:
  char v27 = swift_retain();
  char v28 = specialized find<A>(_:key:)(v27);
  if (!v28)
  {
    swift_release();
    return;
  }
  unsigned int v29 = *(double *)(v28 + 72);
  char v30 = *(unsigned char *)(v28 + 80);
  swift_release();
  if (v30) {
    return;
  }
  char v31 = 0.0;
  if (v29 > 0.0)
  {
    char v32 = log2(v29 * 240.0);
    char v31 = exp2(floor(v32 + 0.01)) * 0.00416666667;
  }
  if (v31 >= *(double *)(v4 + 128)) {
    char v31 = *(double *)(v4 + 128);
  }
  *(double *)(v4 + 128) = v31;
  if (v31 >= 0.0166666667)
  {
    double v35 = 0;
    double v37 = 1;
    goto LABEL_29;
  }
  char v33 = swift_retain();
  uint64_t v34 = specialized find<A>(_:key:)(v33);
  if (!v34)
  {
    swift_release();
    goto LABEL_28;
  }
  double v35 = *(_DWORD *)(v34 + 72);
  double v36 = *(unsigned char *)(v34 + 76);
  swift_release();
  if (v36)
  {
LABEL_28:
    double v35 = *(_DWORD *)(v4 + 228);
    double v37 = *(unsigned char *)(v4 + 232);
    goto LABEL_29;
  }
  double v37 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 228) = v35;
  *(unsigned char *)(v4 + 232) = v37;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  long long v18;
  uint64_t (*v19)(uint64_t, _OWORD *, void *, ValueMetadata *, unint64_t, double);
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  char v25;
  unsigned int v26;
  float32x2_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char v32;
  double v33;
  long double v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  int64x2_t v40;
  int64x2_t v41;
  void v42[2];
  char v43;
  char v44;
  int64x2_t v45;
  double v46;
  double v47;
  double v48;
  unsigned char v49[48];
  _OWORD v50[2];
  uint64_t v51;
  char v52;
  unsigned char v53[56];

  uint64_t v4 = v3;
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, (uint64_t)&v45);
  double v41 = v45;
  double v8 = v46;
  uint64_t v9 = v47;
  char v10 = v48;
  if (!*(unsigned char *)(v3 + 153))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    int v26 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v26)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, v3 + 32);
    goto LABEL_17;
  }
LABEL_2:
  uint64_t v11 = a3 - *(double *)(v3 + 80);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v13 = *(unsigned char *)(v3 + 176);
  swift_bridgeObjectRetain();
  v42[0] = v12;
  v42[1] = AGCreateWeakAttribute();
  char v43 = 0;
  uint64_t v44 = v13;
  swift_beginAccess();
  uint64_t v14 = *(void *)(v3 + 16);
  double v15 = *(void *)(v3 + 24);
  swift_beginAccess();
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(v3 + 32, (uint64_t)v53);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v14, v15, (uint64_t)v53);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 176) = 0;
  unint64_t v16 = *(void *)(v3 + 64);
  double v17 = *(unsigned char *)(v3 + 72);
  uint64_t v18 = *(_OWORD *)(v3 + 48);
  v50[0] = *(_OWORD *)(v3 + 32);
  v50[1] = v18;
  double v51 = v16;
  double v52 = v17;
  uint64_t v19 = *(uint64_t (**)(uint64_t, _OWORD *, void *, ValueMetadata *, unint64_t, double))(*(void *)a1 + 136);
  double v20 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
  char v21 = swift_retain();
  LOBYTE(v2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v19(v21, v50, v42, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, v20, v11);
  swift_release();
  if (v20)
  {
    *(void *)(v4 + 24) = v42[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(v4 + 32, (uint64_t)v50);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (uint64_t)v50, a1, a2, v11);
    swift_endAccess();
    swift_endAccess();
  }
  double v40 = *(int64x2_t *)(v4 + 32);
  double v22 = *(double *)(v4 + 48);
  long double v23 = *(double *)(v4 + 56);
  uint64_t v24 = *(double *)(v4 + 64);
  uint64_t v25 = *(unsigned char *)(v4 + 72);
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, (uint64_t)v49);
  if ((v49[40] & 1) == 0)
  {
    if (v25)
    {
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, v4 + 32);
    }
    else
    {
      char v27 = vadd_f32((float32x2_t)vmovn_s64(v41), (float32x2_t)vmovn_s64(v40));
      v28.i64[0] = v27.u32[0];
      v28.i64[1] = v27.u32[1];
      *(int8x16_t *)(v4 + 32) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v41, 0x20uLL), (float32x2_t)vshrn_n_s64(v40, 0x20uLL)), 0x20uLL), v28);
      *(double *)(v4 + 48) = v8 + v22;
      *(double *)(v4 + 56) = v9 + v23;
      *(double *)(v4 + 64) = v10 + v24;
      *(unsigned char *)(v4 + 72) = 0;
    }
  }
  *(double *)(v4 + 96) = a3;
LABEL_17:
  unsigned int v29 = swift_retain();
  char v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    swift_release();
    return;
  }
  char v31 = *(double *)(v30 + 72);
  char v32 = *(unsigned char *)(v30 + 80);
  swift_release();
  if (v32) {
    return;
  }
  char v33 = 0.0;
  if (v31 > 0.0)
  {
    uint64_t v34 = log2(v31 * 240.0);
    char v33 = exp2(floor(v34 + 0.01)) * 0.00416666667;
  }
  if (v33 >= *(double *)(v4 + 88)) {
    char v33 = *(double *)(v4 + 88);
  }
  *(double *)(v4 + 88) = v33;
  if (v33 >= 0.0166666667)
  {
    double v37 = 0;
    int64x2_t v39 = 1;
    goto LABEL_33;
  }
  double v35 = swift_retain();
  double v36 = specialized find<A>(_:key:)(v35);
  if (!v36)
  {
    swift_release();
    goto LABEL_32;
  }
  double v37 = *(_DWORD *)(v36 + 72);
  char v38 = *(unsigned char *)(v36 + 76);
  swift_release();
  if (v38)
  {
LABEL_32:
    double v37 = *(_DWORD *)(v4 + 148);
    int64x2_t v39 = *(unsigned char *)(v4 + 152);
    goto LABEL_33;
  }
  int64x2_t v39 = 0;
LABEL_33:
  *(_DWORD *)(v4 + 148) = v37;
  *(unsigned char *)(v4 + 152) = v39;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  char v15;
  uint64_t (*v16)(uint64_t, unsigned char *, void *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  double v23;
  int64x2_t v24;
  float64x2_t v25;
  double v26;
  unsigned int v27;
  int64x2_t v28;
  float64x2_t v29;
  float32x2_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char v35;
  double v36;
  long double v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  long long v43;
  unint64_t *v44;
  uint64_t v45;
  void v46[2];
  char v47;
  char v48;
  unsigned char v49[48];
  char v50;
  _OWORD v51[3];
  char v52;

  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 169))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    char v27 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v27)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    char v43 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 48) = v43;
    *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(v3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(unsigned char *)(a2 + 48);
    goto LABEL_18;
  }
LABEL_2:
  uint64_t v45 = a2;
  double v8 = a3 - *(double *)(v3 + 88);
  uint64_t v44 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 192);
  swift_bridgeObjectRetain();
  v46[0] = v9;
  v46[1] = AGCreateWeakAttribute();
  int8x16_t v47 = 0;
  int8x16_t v48 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  uint64_t v13 = *(_OWORD *)(v3 + 48);
  v51[0] = *(_OWORD *)(v3 + 32);
  v51[1] = v13;
  v51[2] = *(_OWORD *)(v3 + 64);
  double v52 = *(unsigned char *)(v3 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, (int *)v51);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 192) = 0;
  uint64_t v14 = *(void *)(v3 + 72);
  double v15 = *(unsigned char *)(v3 + 80);
  *(_DWORD *)uint64_t v49 = *(_DWORD *)(v3 + 32);
  *(_OWORD *)&v49[8] = *(_OWORD *)(v3 + 40);
  *(_OWORD *)&v49[24] = *(_OWORD *)(v3 + 56);
  *(void *)&v49[40] = v14;
  uint64_t v50 = v15;
  unint64_t v16 = *(uint64_t (**)(uint64_t, unsigned char *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>();
  uint64_t v18 = v17;
  uint64_t v19 = lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>();
  double v20 = swift_retain();
  LOBYTE(v18) = v16(v20, v49, v46, v18, v19, v8);
  swift_release();
  if (v18)
  {
    *uint64_t v44 = v46[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    char v21 = v45;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v22 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)uint64_t v49 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)&v49[16] = v22;
    *(_OWORD *)&v49[32] = *(_OWORD *)(v4 + 64);
    uint64_t v50 = *(unsigned char *)(v4 + 80);
    swift_beginAccess();
    swift_beginAccess();
    char v21 = v45;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), v44, (uint64_t)v49, a1, v45, v8);
    swift_endAccess();
    swift_endAccess();
  }
  *(float *)(v4 + 32) = *(float *)v21 + *(float *)(v4 + 32);
  if ((*(unsigned char *)(v21 + 48) & 1) == 0)
  {
    long double v23 = *(double *)(v21 + 40);
    uint64_t v24 = *(int64x2_t *)(v21 + 8);
    uint64_t v25 = *(float64x2_t *)(v21 + 24);
    if (*(unsigned char *)(v4 + 80))
    {
      *(int64x2_t *)(v4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v24;
      *(float64x2_t *)(v4 + 56) = v25;
      int v26 = v23;
    }
    else
    {
      char v28 = *(int64x2_t *)(v4 + 40);
      unsigned int v29 = *(float64x2_t *)(v4 + 56);
      int v26 = *(double *)(v4 + 72) + v23;
      char v30 = vadd_f32((float32x2_t)vmovn_s64(v24), (float32x2_t)vmovn_s64(v28));
      v31.i64[0] = v30.u32[0];
      v31.i64[1] = v30.u32[1];
      *(int8x16_t *)(v4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v24, 0x20uLL), (float32x2_t)vshrn_n_s64(v28, 0x20uLL)), 0x20uLL), v31);
      *(float64x2_t *)(v4 + 56) = vaddq_f64(v29, v25);
    }
    *(double *)(v4 + 72) = v26;
    *(unsigned char *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  }
  *(double *)(v4 + 104) = a3;
LABEL_18:
  char v32 = swift_retain();
  char v33 = specialized find<A>(_:key:)(v32);
  if (!v33)
  {
    swift_release();
    return;
  }
  uint64_t v34 = *(double *)(v33 + 72);
  double v35 = *(unsigned char *)(v33 + 80);
  swift_release();
  if (v35) {
    return;
  }
  double v36 = 0.0;
  if (v34 > 0.0)
  {
    double v37 = log2(v34 * 240.0);
    double v36 = exp2(floor(v37 + 0.01)) * 0.00416666667;
  }
  if (v36 >= *(double *)(v4 + 96)) {
    double v36 = *(double *)(v4 + 96);
  }
  *(double *)(v4 + 96) = v36;
  if (v36 >= 0.0166666667)
  {
    double v40 = 0;
    double v42 = 1;
    goto LABEL_34;
  }
  char v38 = swift_retain();
  int64x2_t v39 = specialized find<A>(_:key:)(v38);
  if (!v39)
  {
    swift_release();
    goto LABEL_33;
  }
  double v40 = *(_DWORD *)(v39 + 72);
  double v41 = *(unsigned char *)(v39 + 76);
  swift_release();
  if (v41)
  {
LABEL_33:
    double v40 = *(_DWORD *)(v4 + 164);
    double v42 = *(unsigned char *)(v4 + 168);
    goto LABEL_34;
  }
  double v42 = 0;
LABEL_34:
  *(_DWORD *)(v4 + 164) = v40;
  *(unsigned char *)(v4 + 168) = v42;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  uint64_t (*v16)(uint64_t, long long *, void *, uint64_t, unint64_t, double);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  long long v22;
  double v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  char v28;
  double v29;
  long double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;
  unsigned int v36;
  long long v37;
  double *v38;
  void v39[2];
  char v40;
  char v41;
  long long v42;
  long long v43;
  uint64_t v44;
  long long v45[2];
  uint64_t v46;

  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 141))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    double v36 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v36)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    double v37 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 48) = v37;
    *(void *)(v3 + 64) = *(void *)(a2 + 32);
    goto LABEL_6;
  }
LABEL_2:
  char v38 = (double *)a2;
  double v8 = a3 - *(double *)(v3 + 72);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 160);
  swift_bridgeObjectRetain();
  v39[0] = v9;
  v39[1] = AGCreateWeakAttribute();
  double v40 = 0;
  double v41 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  uint64_t v13 = *(_OWORD *)(v3 + 48);
  v45[0] = *(_OWORD *)(v3 + 32);
  v45[1] = v13;
  float32x2_t v46 = *(void *)(v3 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v45);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  uint64_t v14 = *(void *)(v3 + 64);
  double v15 = *(_OWORD *)(v3 + 48);
  double v42 = *(_OWORD *)(v3 + 32);
  char v43 = v15;
  uint64_t v44 = v14;
  unint64_t v16 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, unint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  uint64_t v18 = v17;
  uint64_t v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
  double v20 = swift_retain();
  LOBYTE(v18) = v16(v20, &v42, v39, v18, v19, v8);
  swift_release();
  if (v18)
  {
    *(void *)(v4 + 24) = v39[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    char v21 = (float64x2_t *)v38;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v22 = *(_OWORD *)(v4 + 48);
    double v42 = *(_OWORD *)(v4 + 32);
    char v43 = v22;
    uint64_t v44 = *(void *)(v4 + 64);
    swift_beginAccess();
    swift_beginAccess();
    char v21 = (float64x2_t *)v38;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (double *)&v42, a1, v38, v8);
    swift_endAccess();
    swift_endAccess();
  }
  long double v23 = v21[2].f64[0];
  uint64_t v24 = vaddq_f64(v21[1], *(float64x2_t *)(v4 + 48));
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*v21, *(float64x2_t *)(v4 + 32));
  *(float64x2_t *)(v4 + 48) = v24;
  *(double *)(v4 + 64) = v23 + *(double *)(v4 + 64);
  *(double *)(v4 + 88) = a3;
LABEL_6:
  uint64_t v25 = swift_retain();
  int v26 = specialized find<A>(_:key:)(v25);
  if (!v26)
  {
    swift_release();
    return;
  }
  char v27 = *(double *)(v26 + 72);
  char v28 = *(unsigned char *)(v26 + 80);
  swift_release();
  if (v28) {
    return;
  }
  unsigned int v29 = 0.0;
  if (v27 > 0.0)
  {
    char v30 = log2(v27 * 240.0);
    unsigned int v29 = exp2(floor(v30 + 0.01)) * 0.00416666667;
  }
  if (v29 >= *(double *)(v4 + 80)) {
    unsigned int v29 = *(double *)(v4 + 80);
  }
  *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
  if (v29 >= 0.0166666667)
  {
    char v33 = 0;
    double v35 = 1;
    goto LABEL_29;
  }
  char v31 = swift_retain();
  char v32 = specialized find<A>(_:key:)(v31);
  if (!v32)
  {
    swift_release();
    goto LABEL_28;
  }
  char v33 = *(_DWORD *)(v32 + 72);
  uint64_t v34 = *(unsigned char *)(v32 + 76);
  swift_release();
  if (v34)
  {
LABEL_28:
    char v33 = *(_DWORD *)(v4 + 136);
    double v35 = *(unsigned char *)(v4 + 140);
    goto LABEL_29;
  }
  double v35 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 136) = v33;
  *(unsigned char *)(v4 + 14specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v35;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, float a2, float a3, float a4, float a5, double a6)
{
  uint64_t v7 = v6;
  if (!*(unsigned char *)(v6 + 93))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v50 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v50)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(float *)(v6 + 32) = a2;
    *(float *)(v6 + 36) = a3;
    *(float *)(v6 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a4;
    *(float *)(v6 + 44) = a5;
    goto LABEL_6;
  }
LABEL_2:
  float v51 = a3;
  float v52 = a4;
  float v14 = a5;
  double v15 = a6 - *(double *)(v6 + 48);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v6 + 24);
  char v17 = *(unsigned char *)(v6 + 112);
  swift_bridgeObjectRetain();
  v54[0] = v16;
  v54[1] = AGCreateWeakAttribute();
  char v55 = 0;
  char v56 = v17;
  swift_beginAccess();
  uint64_t v18 = *(void *)(v6 + 16);
  uint64_t v19 = *(void *)(v6 + 24);
  swift_beginAccess();
  float v20 = *(float *)(v6 + 32);
  float v21 = *(float *)(v6 + 36);
  float v22 = *(float *)(v6 + 40);
  float v23 = *(float *)(v6 + 44);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v6 + 112) = 0;
  long long v53 = *(_OWORD *)(v6 + 32);
  uint64_t v24 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(0);
  uint64_t v26 = v25;
  uint64_t v27 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
  uint64_t v28 = swift_retain();
  LOBYTE(v26) = v24(v28, &v53, v54, v26, v27, v15);
  swift_release();
  if (v26)
  {
    *(void *)(v7 + 24) = v54[0];
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = a1;
    swift_retain();
    swift_release();
    float v30 = v51;
    float v29 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    float v31 = *(float *)(v7 + 32);
    float v32 = *(float *)(v7 + 36);
    float v33 = *(float *)(v7 + 40);
    float v34 = *(float *)(v7 + 44);
    swift_beginAccess();
    swift_beginAccess();
    float v35 = v31;
    float v36 = v32;
    float v30 = v51;
    float v29 = v52;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v7 + 16), (unint64_t *)(v7 + 24), a1, v35, v36, v33, v34, v15, a2, v51, v52, v14);
    swift_endAccess();
    swift_endAccess();
  }
  float v37 = *(float *)(v7 + 36) + v30;
  *(float *)(v7 + 32) = *(float *)(v7 + 32) + a2;
  *(float *)(v7 + 36) = v37;
  float v38 = *(float *)(v7 + 44) + v14;
  *(float *)(v7 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(float *)(v7 + 40) + v29;
  *(float *)(v7 + 44) = v38;
  *(double *)(v7 + 64) = a6;
LABEL_6:
  uint64_t v39 = swift_retain();
  uint64_t v40 = specialized find<A>(_:key:)(v39);
  if (!v40)
  {
    swift_release();
    return;
  }
  double v41 = *(double *)(v40 + 72);
  char v42 = *(unsigned char *)(v40 + 80);
  swift_release();
  if (v42) {
    return;
  }
  double v43 = 0.0;
  if (v41 > 0.0)
  {
    long double v44 = log2(v41 * 240.0);
    double v43 = exp2(floor(v44 + 0.01)) * 0.00416666667;
  }
  if (v43 >= *(double *)(v7 + 56)) {
    double v43 = *(double *)(v7 + 56);
  }
  *(double *)(v7 + 56) = v43;
  if (v43 >= 0.0166666667)
  {
    int v47 = 0;
    char v49 = 1;
    goto LABEL_29;
  }
  uint64_t v45 = swift_retain();
  uint64_t v46 = specialized find<A>(_:key:)(v45);
  if (!v46)
  {
    swift_release();
    goto LABEL_28;
  }
  int v47 = *(_DWORD *)(v46 + 72);
  char v48 = *(unsigned char *)(v46 + 76);
  swift_release();
  if (v48)
  {
LABEL_28:
    int v47 = *(_DWORD *)(v7 + 88);
    char v49 = *(unsigned char *)(v7 + 92);
    goto LABEL_29;
  }
  char v49 = 0;
LABEL_29:
  *(_DWORD *)(v7 + 88) = v47;
  *(unsigned char *)(v7 + 92) = v49;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 77))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v3 + 32) = a2;
    goto LABEL_6;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 40);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 96);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  char v32 = 0;
  char v33 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  double v13 = *(double *)(v3 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 96) = 0;
  v30[0] = *(void *)(v3 + 32);
  float v14 = *(uint64_t (**)(uint64_t, void *, void *, void, _UNKNOWN **, double))(*(void *)a1 + 136);
  uint64_t v15 = swift_retain();
  char v16 = v14(v15, v30, v31, MEMORY[0x263F8D538], &protocol witness table for Double, v8);
  swift_release();
  if (v16)
  {
    *(void *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    double v17 = *(double *)(v4 + 32);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), a1, v17, v8, a2);
    swift_endAccess();
    swift_endAccess();
  }
  *(double *)(v4 + 32) = *(double *)(v4 + 32) + a2;
  *(double *)(v4 + 56) = a3;
LABEL_6:
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  double v20 = *(double *)(v19 + 72);
  char v21 = *(unsigned char *)(v19 + 80);
  swift_release();
  if (v21) {
    return;
  }
  double v22 = 0.0;
  if (v20 > 0.0)
  {
    long double v23 = log2(v20 * 240.0);
    double v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 48)) {
    double v22 = *(double *)(v4 + 48);
  }
  *(double *)(v4 + 48) = v22;
  if (v22 >= 0.0166666667)
  {
    int v26 = 0;
    char v28 = 1;
    goto LABEL_29;
  }
  uint64_t v24 = swift_retain();
  uint64_t v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  int v26 = *(_DWORD *)(v25 + 72);
  char v27 = *(unsigned char *)(v25 + 76);
  swift_release();
  if (v27)
  {
LABEL_28:
    int v26 = *(_DWORD *)(v4 + 72);
    char v28 = *(unsigned char *)(v4 + 76);
    goto LABEL_29;
  }
  char v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 72) = v26;
  *(unsigned char *)(v4 + 76) = v28;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t (*v14)(uint64_t, void *, void *, void, unint64_t, double);
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  double v22;
  long double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  unsigned int v29;
  void v30[3];
  void v31[2];
  char v32;
  char v33;

  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 77))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v3 + 32) = a2;
    goto LABEL_6;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 40);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 96);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  char v32 = 0;
  char v33 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  double v13 = *(double *)(v3 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 96) = 0;
  v30[0] = *(void *)(v3 + 32);
  float v14 = *(uint64_t (**)(uint64_t, void *, void *, void, unint64_t, double))(*(void *)a1 + 136);
  uint64_t v15 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  char v16 = swift_retain();
  LOBYTE(v15) = v14(v16, v30, v31, MEMORY[0x263F8EF38], v15, v8);
  swift_release();
  if (v15)
  {
    *(void *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    double v17 = *(double *)(v4 + 32);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), a1, v17, v8, a2);
    swift_endAccess();
    swift_endAccess();
  }
  *(double *)(v4 + 32) = *(double *)(v4 + 32) + a2;
  *(double *)(v4 + 56) = a3;
LABEL_6:
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  double v20 = *(double *)(v19 + 72);
  char v21 = *(unsigned char *)(v19 + 80);
  swift_release();
  if (v21) {
    return;
  }
  double v22 = 0.0;
  if (v20 > 0.0)
  {
    long double v23 = log2(v20 * 240.0);
    double v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 48)) {
    double v22 = *(double *)(v4 + 48);
  }
  *(double *)(v4 + 48) = v22;
  if (v22 >= 0.0166666667)
  {
    int v26 = 0;
    char v28 = 1;
    goto LABEL_29;
  }
  uint64_t v24 = swift_retain();
  uint64_t v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  int v26 = *(_DWORD *)(v25 + 72);
  char v27 = *(unsigned char *)(v25 + 76);
  swift_release();
  if (v27)
  {
LABEL_28:
    int v26 = *(_DWORD *)(v4 + 72);
    char v28 = *(unsigned char *)(v4 + 76);
    goto LABEL_29;
  }
  char v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 72) = v26;
  *(unsigned char *)(v4 + 76) = v28;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double *a2, double a3)
{
  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 189))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v38 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v38)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    long long v39 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 48) = v39;
    long long v40 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v3 + 64) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v3 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v40;
    goto LABEL_6;
  }
LABEL_2:
  char v42 = a2;
  double v8 = a3 - *(double *)(v3 + 96);
  double v41 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 208);
  swift_bridgeObjectRetain();
  v43[0] = v9;
  v43[1] = AGCreateWeakAttribute();
  char v44 = 0;
  char v45 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  long long v13 = *(_OWORD *)(v3 + 48);
  v50[0] = *(_OWORD *)(v3 + 32);
  v50[1] = v13;
  long long v14 = *(_OWORD *)(v3 + 80);
  v50[2] = *(_OWORD *)(v3 + 64);
  v50[3] = v14;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v50);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 208) = 0;
  long long v15 = *(_OWORD *)(v3 + 48);
  long long v46 = *(_OWORD *)(v3 + 32);
  long long v47 = v15;
  long long v16 = *(_OWORD *)(v3 + 80);
  long long v48 = *(_OWORD *)(v3 + 64);
  long long v49 = v16;
  double v17 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>();
  uint64_t v19 = v18;
  uint64_t v20 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>();
  uint64_t v21 = swift_retain();
  LOBYTE(v19) = v17(v21, &v46, v43, v19, v20, v8);
  swift_release();
  if (v19)
  {
    *double v41 = v43[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    double v22 = (float64x2_t *)v42;
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v23 = *(_OWORD *)(v4 + 48);
    long long v46 = *(_OWORD *)(v4 + 32);
    long long v47 = v23;
    long long v24 = *(_OWORD *)(v4 + 80);
    long long v48 = *(_OWORD *)(v4 + 64);
    long long v49 = v24;
    swift_beginAccess();
    swift_beginAccess();
    double v22 = (float64x2_t *)v42;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), v41, (double *)&v46, a1, v42, v8);
    swift_endAccess();
    swift_endAccess();
  }
  float64x2_t v25 = vaddq_f64(v22[1], *(float64x2_t *)(v4 + 48));
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*v22, *(float64x2_t *)(v4 + 32));
  *(float64x2_t *)(v4 + 48) = v25;
  float64x2_t v26 = vaddq_f64(v22[3], *(float64x2_t *)(v4 + 80));
  *(float64x2_t *)(v4 + 64) = vaddq_f64(v22[2], *(float64x2_t *)(v4 + 64));
  *(float64x2_t *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v26;
  *(double *)(v4 + 112) = a3;
LABEL_6:
  uint64_t v27 = swift_retain();
  uint64_t v28 = specialized find<A>(_:key:)(v27);
  if (!v28)
  {
    swift_release();
    return;
  }
  double v29 = *(double *)(v28 + 72);
  char v30 = *(unsigned char *)(v28 + 80);
  swift_release();
  if (v30) {
    return;
  }
  double v31 = 0.0;
  if (v29 > 0.0)
  {
    long double v32 = log2(v29 * 240.0);
    double v31 = exp2(floor(v32 + 0.01)) * 0.00416666667;
  }
  if (v31 >= *(double *)(v4 + 104)) {
    double v31 = *(double *)(v4 + 104);
  }
  *(double *)(v4 + 104) = v31;
  if (v31 >= 0.0166666667)
  {
    int v35 = 0;
    char v37 = 1;
    goto LABEL_29;
  }
  uint64_t v33 = swift_retain();
  uint64_t v34 = specialized find<A>(_:key:)(v33);
  if (!v34)
  {
    swift_release();
    goto LABEL_28;
  }
  int v35 = *(_DWORD *)(v34 + 72);
  char v36 = *(unsigned char *)(v34 + 76);
  swift_release();
  if (v36)
  {
LABEL_28:
    int v35 = *(_DWORD *)(v4 + 184);
    char v37 = *(unsigned char *)(v4 + 188);
    goto LABEL_29;
  }
  char v37 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 184) = v35;
  *(unsigned char *)(v4 + 188) = v37;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t (*v14)(uint64_t, double *, void *, ValueMetadata *, unint64_t, double);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  char v22;
  double v23;
  long double v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  double v30[5];
  void v31[2];
  char v32;
  char v33;

  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 141))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    uint64_t v18 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v18)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined assign with copy of _AnyAnimatableData((uint64_t)a2, v3 + 32);
    swift_endAccess();
    goto LABEL_17;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 72);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 160);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  long double v32 = 0;
  uint64_t v33 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  long long v13 = (uint64_t *)(v3 + 32);
  swift_beginAccess();
  outlined init with copy of _AnyAnimatableData((void *)(v3 + 32), v30);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v30);
  swift_release();
  outlined destroy of _AnyAnimatableData((uint64_t)v30);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 16specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  outlined init with copy of _AnyAnimatableData((void *)(v3 + 32), v30);
  long long v14 = *(uint64_t (**)(uint64_t, double *, void *, ValueMetadata *, unint64_t, double))(*(void *)a1 + 136);
  long long v15 = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
  long long v16 = swift_retain();
  LOBYTE(v15) = v14(v16, v30, v31, &type metadata for _AnyAnimatableData, v15, v8);
  swift_release();
  outlined destroy of _AnyAnimatableData((uint64_t)v30);
  if (v15)
  {
    *(void *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of _AnyAnimatableData((void *)(v4 + 32), v30);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), v30, a1, a2, v8);
    swift_endAccess();
    swift_endAccess();
    outlined destroy of _AnyAnimatableData((uint64_t)v30);
  }
  swift_beginAccess();
  double v17 = *v13;
  if (*v13 == *(void *)a2)
  {
    (*(void (**)(uint64_t, double *))(v17 + 96))(v4 + 40, a2 + 1);
  }
  else if (v17 == type metadata accessor for ZeroVTable())
  {
    outlined destroy of _AnyAnimatableData(v4 + 32);
    outlined init with copy of _AnyAnimatableData(a2, (void *)(v4 + 32));
  }
  swift_endAccess();
  *(double *)(v4 + 88) = a3;
LABEL_17:
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized find<A>(_:key:)(v19);
  if (!v20)
  {
    swift_release();
    return;
  }
  uint64_t v21 = *(double *)(v20 + 72);
  double v22 = *(unsigned char *)(v20 + 80);
  swift_release();
  if (v22) {
    return;
  }
  long long v23 = 0.0;
  if (v21 > 0.0)
  {
    long long v24 = log2(v21 * 240.0);
    long long v23 = exp2(floor(v24 + 0.01)) * 0.00416666667;
  }
  if (v23 >= *(double *)(v4 + 80)) {
    long long v23 = *(double *)(v4 + 80);
  }
  *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v23;
  if (v23 >= 0.0166666667)
  {
    uint64_t v27 = 0;
    double v29 = 1;
    goto LABEL_33;
  }
  float64x2_t v25 = swift_retain();
  float64x2_t v26 = specialized find<A>(_:key:)(v25);
  if (!v26)
  {
    swift_release();
    goto LABEL_32;
  }
  uint64_t v27 = *(_DWORD *)(v26 + 72);
  uint64_t v28 = *(unsigned char *)(v26 + 76);
  swift_release();
  if (v28)
  {
LABEL_32:
    uint64_t v27 = *(_DWORD *)(v4 + 136);
    double v29 = *(unsigned char *)(v4 + 140);
    goto LABEL_33;
  }
  double v29 = 0;
LABEL_33:
  *(_DWORD *)(v4 + 136) = v27;
  *(unsigned char *)(v4 + 14specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6 = v5;
  if (!*(unsigned char *)(v5 + 109))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v41 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v41)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v5 + 32) = a2;
    *(double *)(v5 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
    *(double *)(v5 + 48) = a4;
    goto LABEL_6;
  }
LABEL_2:
  double v12 = a5 - *(double *)(v5 + 56);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v5 + 24);
  char v14 = *(unsigned char *)(v5 + 128);
  swift_bridgeObjectRetain();
  v44[0] = v13;
  v44[1] = AGCreateWeakAttribute();
  char v45 = 0;
  char v46 = v14;
  swift_beginAccess();
  uint64_t v15 = *(void *)(v5 + 16);
  uint64_t v16 = *(void *)(v5 + 24);
  swift_beginAccess();
  double v17 = *(double *)(v5 + 32);
  double v18 = *(double *)(v5 + 40);
  double v19 = *(double *)(v5 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v5 + 128) = 0;
  uint64_t v20 = *(void *)(v5 + 48);
  long long v42 = *(_OWORD *)(v5 + 32);
  uint64_t v43 = v20;
  uint64_t v21 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v23 = v22;
  uint64_t v24 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
  uint64_t v25 = swift_retain();
  LOBYTE(v23) = v21(v25, &v42, v44, v23, v24, v12);
  swift_release();
  if (v23)
  {
    *(void *)(v6 + 24) = v44[0];
    swift_bridgeObjectRelease();
    *(void *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    double v26 = *(double *)(v6 + 32);
    double v27 = *(double *)(v6 + 40);
    double v28 = *(double *)(v6 + 48);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v6 + 16), (unint64_t *)(v6 + 24), a1, v26, v27, v28, v12, a2, a3, a4);
    swift_endAccess();
    swift_endAccess();
  }
  double v29 = *(double *)(v6 + 40) + a3;
  *(double *)(v6 + 32) = *(double *)(v6 + 32) + a2;
  *(double *)(v6 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
  *(double *)(v6 + 48) = *(double *)(v6 + 48) + a4;
  *(double *)(v6 + 72) = a5;
LABEL_6:
  uint64_t v30 = swift_retain();
  uint64_t v31 = specialized find<A>(_:key:)(v30);
  if (!v31)
  {
    swift_release();
    return;
  }
  double v32 = *(double *)(v31 + 72);
  char v33 = *(unsigned char *)(v31 + 80);
  swift_release();
  if (v33) {
    return;
  }
  double v34 = 0.0;
  if (v32 > 0.0)
  {
    long double v35 = log2(v32 * 240.0);
    double v34 = exp2(floor(v35 + 0.01)) * 0.00416666667;
  }
  if (v34 >= *(double *)(v6 + 64)) {
    double v34 = *(double *)(v6 + 64);
  }
  *(double *)(v6 + 64) = v34;
  if (v34 >= 0.0166666667)
  {
    int v38 = 0;
    char v40 = 1;
    goto LABEL_29;
  }
  uint64_t v36 = swift_retain();
  uint64_t v37 = specialized find<A>(_:key:)(v36);
  if (!v37)
  {
    swift_release();
    goto LABEL_28;
  }
  int v38 = *(_DWORD *)(v37 + 72);
  char v39 = *(unsigned char *)(v37 + 76);
  swift_release();
  if (v39)
  {
LABEL_28:
    int v38 = *(_DWORD *)(v6 + 104);
    char v40 = *(unsigned char *)(v6 + 108);
    goto LABEL_29;
  }
  char v40 = 0;
LABEL_29:
  *(_DWORD *)(v6 + 104) = v38;
  *(unsigned char *)(v6 + 108) = v40;
}

{
  uint64_t v5;
  uint64_t v6;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  char v33;
  double v34;
  long double v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  unsigned int v41;
  long long v42;
  uint64_t v43;
  void v44[2];
  char v45;
  char v46;

  uint64_t v6 = v5;
  if (!*(unsigned char *)(v5 + 109))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v41 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v41)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v5 + 32) = a2;
    *(double *)(v5 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
    *(double *)(v5 + 48) = a4;
    goto LABEL_6;
  }
LABEL_2:
  double v12 = a5 - *(double *)(v5 + 56);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v5 + 24);
  char v14 = *(unsigned char *)(v5 + 128);
  swift_bridgeObjectRetain();
  v44[0] = v13;
  v44[1] = AGCreateWeakAttribute();
  char v45 = 0;
  char v46 = v14;
  swift_beginAccess();
  uint64_t v15 = *(void *)(v5 + 16);
  uint64_t v16 = *(void *)(v5 + 24);
  swift_beginAccess();
  double v17 = *(double *)(v5 + 32);
  double v18 = *(double *)(v5 + 40);
  double v19 = *(double *)(v5 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v5 + 128) = 0;
  uint64_t v20 = *(void *)(v5 + 48);
  long long v42 = *(_OWORD *)(v5 + 32);
  uint64_t v43 = v20;
  uint64_t v21 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  uint64_t v23 = v22;
  uint64_t v24 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
  uint64_t v25 = swift_retain();
  LOBYTE(v23) = v21(v25, &v42, v44, v23, v24, v12);
  swift_release();
  if (v23)
  {
    *(void *)(v6 + 24) = v44[0];
    swift_bridgeObjectRelease();
    *(void *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    double v26 = *(double *)(v6 + 32);
    double v27 = *(double *)(v6 + 40);
    double v28 = *(double *)(v6 + 48);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v6 + 16), (unint64_t *)(v6 + 24), a1, v26, v27, v28, v12, a2, a3, a4);
    swift_endAccess();
    swift_endAccess();
  }
  double v29 = *(double *)(v6 + 40) + a3;
  *(double *)(v6 + 32) = *(double *)(v6 + 32) + a2;
  *(double *)(v6 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
  *(double *)(v6 + 48) = *(double *)(v6 + 48) + a4;
  *(double *)(v6 + 72) = a5;
LABEL_6:
  uint64_t v30 = swift_retain();
  uint64_t v31 = specialized find<A>(_:key:)(v30);
  if (!v31)
  {
    swift_release();
    return;
  }
  double v32 = *(double *)(v31 + 72);
  char v33 = *(unsigned char *)(v31 + 80);
  swift_release();
  if (v33) {
    return;
  }
  double v34 = 0.0;
  if (v32 > 0.0)
  {
    long double v35 = log2(v32 * 240.0);
    double v34 = exp2(floor(v35 + 0.01)) * 0.00416666667;
  }
  if (v34 >= *(double *)(v6 + 64)) {
    double v34 = *(double *)(v6 + 64);
  }
  *(double *)(v6 + 64) = v34;
  if (v34 >= 0.0166666667)
  {
    int v38 = 0;
    char v40 = 1;
    goto LABEL_29;
  }
  uint64_t v36 = swift_retain();
  uint64_t v37 = specialized find<A>(_:key:)(v36);
  if (!v37)
  {
    swift_release();
    goto LABEL_28;
  }
  int v38 = *(_DWORD *)(v37 + 72);
  char v39 = *(unsigned char *)(v37 + 76);
  swift_release();
  if (v39)
  {
LABEL_28:
    int v38 = *(_DWORD *)(v6 + 104);
    char v40 = *(unsigned char *)(v6 + 108);
    goto LABEL_29;
  }
  char v40 = 0;
LABEL_29:
  *(_DWORD *)(v6 + 104) = v38;
  *(unsigned char *)(v6 + 108) = v40;
}

{
  uint64_t v5;
  uint64_t v6;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, long long *, void *, uint64_t, unint64_t, double);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  char v33;
  double v34;
  long double v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  unsigned int v41;
  long long v42;
  uint64_t v43;
  void v44[2];
  char v45;
  char v46;

  uint64_t v6 = v5;
  if (!*(unsigned char *)(v5 + 109))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v41 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v41)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v5 + 32) = a2;
    *(double *)(v5 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
    *(double *)(v5 + 48) = a4;
    goto LABEL_6;
  }
LABEL_2:
  double v12 = a5 - *(double *)(v5 + 56);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v5 + 24);
  char v14 = *(unsigned char *)(v5 + 128);
  swift_bridgeObjectRetain();
  v44[0] = v13;
  v44[1] = AGCreateWeakAttribute();
  char v45 = 0;
  char v46 = v14;
  swift_beginAccess();
  uint64_t v15 = *(void *)(v5 + 16);
  uint64_t v16 = *(void *)(v5 + 24);
  swift_beginAccess();
  double v17 = *(double *)(v5 + 32);
  double v18 = *(double *)(v5 + 40);
  double v19 = *(double *)(v5 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v5 + 128) = 0;
  uint64_t v20 = *(void *)(v5 + 48);
  long long v42 = *(_OWORD *)(v5 + 32);
  uint64_t v43 = v20;
  uint64_t v21 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, unint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  uint64_t v23 = v22;
  uint64_t v24 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
  uint64_t v25 = swift_retain();
  LOBYTE(v23) = v21(v25, &v42, v44, v23, v24, v12);
  swift_release();
  if (v23)
  {
    *(void *)(v6 + 24) = v44[0];
    swift_bridgeObjectRelease();
    *(void *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    double v26 = *(double *)(v6 + 32);
    double v27 = *(double *)(v6 + 40);
    double v28 = *(double *)(v6 + 48);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v6 + 16), (unint64_t *)(v6 + 24), a1, v26, v27, v28, v12, a2, a3, a4);
    swift_endAccess();
    swift_endAccess();
  }
  double v29 = *(double *)(v6 + 40) + a3;
  *(double *)(v6 + 32) = *(double *)(v6 + 32) + a2;
  *(double *)(v6 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v29;
  *(double *)(v6 + 48) = *(double *)(v6 + 48) + a4;
  *(double *)(v6 + 72) = a5;
LABEL_6:
  uint64_t v30 = swift_retain();
  uint64_t v31 = specialized find<A>(_:key:)(v30);
  if (!v31)
  {
    swift_release();
    return;
  }
  double v32 = *(double *)(v31 + 72);
  char v33 = *(unsigned char *)(v31 + 80);
  swift_release();
  if (v33) {
    return;
  }
  double v34 = 0.0;
  if (v32 > 0.0)
  {
    long double v35 = log2(v32 * 240.0);
    double v34 = exp2(floor(v35 + 0.01)) * 0.00416666667;
  }
  if (v34 >= *(double *)(v6 + 64)) {
    double v34 = *(double *)(v6 + 64);
  }
  *(double *)(v6 + 64) = v34;
  if (v34 >= 0.0166666667)
  {
    int v38 = 0;
    char v40 = 1;
    goto LABEL_29;
  }
  uint64_t v36 = swift_retain();
  uint64_t v37 = specialized find<A>(_:key:)(v36);
  if (!v37)
  {
    swift_release();
    goto LABEL_28;
  }
  int v38 = *(_DWORD *)(v37 + 72);
  char v39 = *(unsigned char *)(v37 + 76);
  swift_release();
  if (v39)
  {
LABEL_28:
    int v38 = *(_DWORD *)(v6 + 104);
    char v40 = *(unsigned char *)(v6 + 108);
    goto LABEL_29;
  }
  char v40 = 0;
LABEL_29:
  *(_DWORD *)(v6 + 104) = v38;
  *(unsigned char *)(v6 + 108) = v40;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7 = v6;
  if (!*(unsigned char *)(v6 + 125))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v51 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v51)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v6 + 32) = a2;
    *(double *)(v6 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
    *(double *)(v6 + 48) = a4;
    *(double *)(v6 + 56) = a5;
    goto LABEL_6;
  }
LABEL_2:
  double v52 = a3;
  double v53 = a4;
  double v14 = a5;
  double v15 = a6 - *(double *)(v6 + 64);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v6 + 24);
  char v17 = *(unsigned char *)(v6 + 144);
  swift_bridgeObjectRetain();
  v55[0] = v16;
  v55[1] = AGCreateWeakAttribute();
  char v56 = 0;
  char v57 = v17;
  swift_beginAccess();
  uint64_t v18 = *(void *)(v6 + 16);
  uint64_t v19 = *(void *)(v6 + 24);
  swift_beginAccess();
  double v20 = *(double *)(v6 + 32);
  double v21 = *(double *)(v6 + 40);
  double v22 = *(double *)(v6 + 48);
  double v23 = *(double *)(v6 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v6 + 144) = 0;
  long long v24 = *(_OWORD *)(v6 + 48);
  v54[0] = *(_OWORD *)(v6 + 32);
  v54[1] = v24;
  uint64_t v25 = *(uint64_t (**)(uint64_t, _OWORD *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v27 = v26;
  uint64_t v28 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
  uint64_t v29 = swift_retain();
  LOBYTE(v27) = v25(v29, v54, v55, v27, v28, v15);
  swift_release();
  if (v27)
  {
    *(void *)(v7 + 24) = v55[0];
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = a1;
    swift_retain();
    swift_release();
    double v31 = v52;
    double v30 = v53;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v32 = *(double *)(v7 + 32);
    double v33 = *(double *)(v7 + 40);
    double v34 = *(double *)(v7 + 48);
    double v35 = *(double *)(v7 + 56);
    swift_beginAccess();
    swift_beginAccess();
    double v36 = v32;
    double v37 = v33;
    double v31 = v52;
    double v30 = v53;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v7 + 16), (unint64_t *)(v7 + 24), a1, v36, v37, v34, v35, v15, a2, v52, v53, v14);
    swift_endAccess();
    swift_endAccess();
  }
  double v38 = *(double *)(v7 + 40) + v31;
  *(double *)(v7 + 32) = *(double *)(v7 + 32) + a2;
  *(double *)(v7 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v38;
  double v39 = *(double *)(v7 + 56) + v14;
  *(double *)(v7 + 48) = *(double *)(v7 + 48) + v30;
  *(double *)(v7 + 56) = v39;
  *(double *)(v7 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a6;
LABEL_6:
  uint64_t v40 = swift_retain();
  uint64_t v41 = specialized find<A>(_:key:)(v40);
  if (!v41)
  {
    swift_release();
    return;
  }
  double v42 = *(double *)(v41 + 72);
  char v43 = *(unsigned char *)(v41 + 80);
  swift_release();
  if (v43) {
    return;
  }
  double v44 = 0.0;
  if (v42 > 0.0)
  {
    long double v45 = log2(v42 * 240.0);
    double v44 = exp2(floor(v45 + 0.01)) * 0.00416666667;
  }
  if (v44 >= *(double *)(v7 + 72)) {
    double v44 = *(double *)(v7 + 72);
  }
  *(double *)(v7 + 72) = v44;
  if (v44 >= 0.0166666667)
  {
    int v48 = 0;
    char v50 = 1;
    goto LABEL_29;
  }
  uint64_t v46 = swift_retain();
  uint64_t v47 = specialized find<A>(_:key:)(v46);
  if (!v47)
  {
    swift_release();
    goto LABEL_28;
  }
  int v48 = *(_DWORD *)(v47 + 72);
  char v49 = *(unsigned char *)(v47 + 76);
  swift_release();
  if (v49)
  {
LABEL_28:
    int v48 = *(_DWORD *)(v7 + 120);
    char v50 = *(unsigned char *)(v7 + 124);
    goto LABEL_29;
  }
  char v50 = 0;
LABEL_29:
  *(_DWORD *)(v7 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v48;
  *(unsigned char *)(v7 + 124) = v50;
}

{
  uint64_t v6;
  uint64_t v7;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  long long v24;
  uint64_t (*v25)(uint64_t, _OWORD *, void *, uint64_t, unint64_t, double);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  char v43;
  double v44;
  long double v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  unsigned int v51;
  double v52;
  double v53;
  _OWORD v54[2];
  void v55[2];
  char v56;
  char v57;

  uint64_t v7 = v6;
  if (!*(unsigned char *)(v6 + 125))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v51 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v51)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v6 + 32) = a2;
    *(double *)(v6 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
    *(double *)(v6 + 48) = a4;
    *(double *)(v6 + 56) = a5;
    goto LABEL_6;
  }
LABEL_2:
  double v52 = a3;
  double v53 = a4;
  double v14 = a5;
  double v15 = a6 - *(double *)(v6 + 64);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v6 + 24);
  char v17 = *(unsigned char *)(v6 + 144);
  swift_bridgeObjectRetain();
  v55[0] = v16;
  v55[1] = AGCreateWeakAttribute();
  char v56 = 0;
  char v57 = v17;
  swift_beginAccess();
  uint64_t v18 = *(void *)(v6 + 16);
  uint64_t v19 = *(void *)(v6 + 24);
  swift_beginAccess();
  double v20 = *(double *)(v6 + 32);
  double v21 = *(double *)(v6 + 40);
  double v22 = *(double *)(v6 + 48);
  double v23 = *(double *)(v6 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v6 + 144) = 0;
  long long v24 = *(_OWORD *)(v6 + 48);
  v54[0] = *(_OWORD *)(v6 + 32);
  v54[1] = v24;
  uint64_t v25 = *(uint64_t (**)(uint64_t, _OWORD *, void *, uint64_t, unint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  uint64_t v27 = v26;
  uint64_t v28 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
  uint64_t v29 = swift_retain();
  LOBYTE(v27) = v25(v29, v54, v55, v27, v28, v15);
  swift_release();
  if (v27)
  {
    *(void *)(v7 + 24) = v55[0];
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = a1;
    swift_retain();
    swift_release();
    double v31 = v52;
    double v30 = v53;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v32 = *(double *)(v7 + 32);
    double v33 = *(double *)(v7 + 40);
    double v34 = *(double *)(v7 + 48);
    double v35 = *(double *)(v7 + 56);
    swift_beginAccess();
    swift_beginAccess();
    double v36 = v32;
    double v37 = v33;
    double v31 = v52;
    double v30 = v53;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v7 + 16), (unint64_t *)(v7 + 24), a1, v36, v37, v34, v35, v15, a2, v52, v53, v14);
    swift_endAccess();
    swift_endAccess();
  }
  double v38 = *(double *)(v7 + 40) + v31;
  *(double *)(v7 + 32) = *(double *)(v7 + 32) + a2;
  *(double *)(v7 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v38;
  double v39 = *(double *)(v7 + 56) + v14;
  *(double *)(v7 + 48) = *(double *)(v7 + 48) + v30;
  *(double *)(v7 + 56) = v39;
  *(double *)(v7 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a6;
LABEL_6:
  uint64_t v40 = swift_retain();
  uint64_t v41 = specialized find<A>(_:key:)(v40);
  if (!v41)
  {
    swift_release();
    return;
  }
  double v42 = *(double *)(v41 + 72);
  char v43 = *(unsigned char *)(v41 + 80);
  swift_release();
  if (v43) {
    return;
  }
  double v44 = 0.0;
  if (v42 > 0.0)
  {
    long double v45 = log2(v42 * 240.0);
    double v44 = exp2(floor(v45 + 0.01)) * 0.00416666667;
  }
  if (v44 >= *(double *)(v7 + 72)) {
    double v44 = *(double *)(v7 + 72);
  }
  *(double *)(v7 + 72) = v44;
  if (v44 >= 0.0166666667)
  {
    int v48 = 0;
    char v50 = 1;
    goto LABEL_29;
  }
  uint64_t v46 = swift_retain();
  uint64_t v47 = specialized find<A>(_:key:)(v46);
  if (!v47)
  {
    swift_release();
    goto LABEL_28;
  }
  int v48 = *(_DWORD *)(v47 + 72);
  char v49 = *(unsigned char *)(v47 + 76);
  swift_release();
  if (v49)
  {
LABEL_28:
    int v48 = *(_DWORD *)(v7 + 120);
    char v50 = *(unsigned char *)(v7 + 124);
    goto LABEL_29;
  }
  char v50 = 0;
LABEL_29:
  *(_DWORD *)(v7 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v48;
  *(unsigned char *)(v7 + 124) = v50;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  if (!*(unsigned char *)(v4 + 93))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v36 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v36)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v4 + 32) = a2;
    *(double *)(v4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
    goto LABEL_6;
  }
LABEL_2:
  double v10 = a4 - *(double *)(v4 + 48);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v4 + 24);
  char v12 = *(unsigned char *)(v4 + 112);
  swift_bridgeObjectRetain();
  v38[0] = v11;
  v38[1] = AGCreateWeakAttribute();
  char v39 = 0;
  char v40 = v12;
  swift_beginAccess();
  uint64_t v13 = *(void *)(v4 + 16);
  unint64_t v14 = *(void *)(v4 + 24);
  swift_beginAccess();
  double v15 = *(double *)(v4 + 32);
  double v16 = *(double *)(v4 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v13, v14, v15, v16);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v4 + 112) = 0;
  long long v37 = *(_OWORD *)(v4 + 32);
  char v17 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, unint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v19 = v18;
  unint64_t v20 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  uint64_t v21 = swift_retain();
  LOBYTE(v19) = v17(v21, &v37, v38, v19, v20, v10);
  swift_release();
  if (v19)
  {
    *(void *)(v5 + 24) = v38[0];
    swift_bridgeObjectRelease();
    *(void *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    double v22 = *(double *)(v5 + 32);
    double v23 = *(double *)(v5 + 40);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v5 + 16), (unint64_t *)(v5 + 24), a1, v22, v23, v10, a2, a3);
    swift_endAccess();
    swift_endAccess();
  }
  double v24 = *(double *)(v5 + 40) + a3;
  *(double *)(v5 + 32) = *(double *)(v5 + 32) + a2;
  *(double *)(v5 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v24;
  *(double *)(v5 + 64) = a4;
LABEL_6:
  uint64_t v25 = swift_retain();
  uint64_t v26 = specialized find<A>(_:key:)(v25);
  if (!v26)
  {
    swift_release();
    return;
  }
  double v27 = *(double *)(v26 + 72);
  char v28 = *(unsigned char *)(v26 + 80);
  swift_release();
  if (v28) {
    return;
  }
  double v29 = 0.0;
  if (v27 > 0.0)
  {
    long double v30 = log2(v27 * 240.0);
    double v29 = exp2(floor(v30 + 0.01)) * 0.00416666667;
  }
  if (v29 >= *(double *)(v5 + 56)) {
    double v29 = *(double *)(v5 + 56);
  }
  *(double *)(v5 + 56) = v29;
  if (v29 >= 0.0166666667)
  {
    int v33 = 0;
    char v35 = 1;
    goto LABEL_29;
  }
  uint64_t v31 = swift_retain();
  uint64_t v32 = specialized find<A>(_:key:)(v31);
  if (!v32)
  {
    swift_release();
    goto LABEL_28;
  }
  int v33 = *(_DWORD *)(v32 + 72);
  char v34 = *(unsigned char *)(v32 + 76);
  swift_release();
  if (v34)
  {
LABEL_28:
    int v33 = *(_DWORD *)(v5 + 88);
    char v35 = *(unsigned char *)(v5 + 92);
    goto LABEL_29;
  }
  char v35 = 0;
LABEL_29:
  *(_DWORD *)(v5 + 88) = v33;
  *(unsigned char *)(v5 + 92) = v35;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 125))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v33 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v33)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
    long long v34 = a2[1];
    *(_OWORD *)(v3 + 32) = *a2;
    *(_OWORD *)(v3 + 48) = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  uint64_t v37 = (uint64_t)a2;
  double v8 = a3 - *(double *)(v3 + 64);
  unsigned int v36 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 144);
  swift_bridgeObjectRetain();
  v39[0] = v9;
  v39[1] = AGCreateWeakAttribute();
  char v40 = 0;
  char v41 = v10;
  char v35 = (uint64_t *)(v3 + 16);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  long long v13 = *(_OWORD *)(v3 + 48);
  v44[0] = *(_OWORD *)(v3 + 32);
  v44[1] = v13;
  outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v44);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, (uint64_t)v44);
  swift_release();
  outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v44);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 144) = 0;
  uint64_t v14 = *(void *)(v3 + 40);
  *(void *)&long long v42 = *(void *)(v3 + 32);
  *((void *)&v42 + 1) = v14;
  long long v43 = *(_OWORD *)(v3 + 48);
  double v15 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>();
  uint64_t v17 = v16;
  uint64_t v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_retain();
  LOBYTE(v17) = v15(v19, &v42, v39, v17, v18, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (v17)
  {
    *unsigned int v36 = v39[0];
    swift_bridgeObjectRelease();
    uint64_t *v35 = a1;
    swift_retain();
    swift_release();
    unint64_t v20 = (float32x4_t *)v37;
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v21 = *(_OWORD *)(v4 + 48);
    long long v42 = *(_OWORD *)(v4 + 32);
    long long v43 = v21;
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v42);
    unint64_t v20 = (float32x4_t *)v37;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v35, v36, (uint64_t)&v42, a1, v37, v8);
    swift_endAccess();
    swift_endAccess();
    outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v42);
  }
  swift_beginAccess();
  specialized static AnimatableArray.+= infix(_:_:)(v4 + 32, v20->i64[0]);
  float32x4_t v38 = v20[1];
  specialized static AnimatableArray.+= infix(_:_:)(v4 + 40, v20->i64[1]);
  *(float32x4_t *)(v4 + 48) = vaddq_f32(v38, *(float32x4_t *)(v4 + 48));
  swift_endAccess();
  *(double *)(v4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
LABEL_6:
  uint64_t v22 = swift_retain();
  uint64_t v23 = specialized find<A>(_:key:)(v22);
  if (!v23)
  {
    swift_release();
    return;
  }
  double v24 = *(double *)(v23 + 72);
  char v25 = *(unsigned char *)(v23 + 80);
  swift_release();
  if (v25) {
    return;
  }
  double v26 = 0.0;
  if (v24 > 0.0)
  {
    long double v27 = log2(v24 * 240.0);
    double v26 = exp2(floor(v27 + 0.01)) * 0.00416666667;
  }
  if (v26 >= *(double *)(v4 + 72)) {
    double v26 = *(double *)(v4 + 72);
  }
  *(double *)(v4 + 72) = v26;
  if (v26 >= 0.0166666667)
  {
    int v30 = 0;
    char v32 = 1;
    goto LABEL_29;
  }
  uint64_t v28 = swift_retain();
  uint64_t v29 = specialized find<A>(_:key:)(v28);
  if (!v29)
  {
    swift_release();
    goto LABEL_28;
  }
  int v30 = *(_DWORD *)(v29 + 72);
  char v31 = *(unsigned char *)(v29 + 76);
  swift_release();
  if (v31)
  {
LABEL_28:
    int v30 = *(_DWORD *)(v4 + 120);
    char v32 = *(unsigned char *)(v4 + 124);
    goto LABEL_29;
  }
  char v32 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v30;
  *(unsigned char *)(v4 + 124) = v32;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  char v15;
  long long v16;
  uint64_t (*v17)(uint64_t, long long *, void *, uint64_t, unint64_t, double);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  long long v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  char v28;
  double v29;
  long double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;
  unsigned int v36;
  long long v37;
  uint64_t *v38;
  unint64_t *v39;
  float64_t v40;
  char v41;
  void v42[2];
  char v43;
  char v44;
  long long v45;
  unsigned char v46[25];
  long long v47;
  _OWORD v48[3];

  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 153))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v36 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v36)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
    uint64_t v37 = a2[1];
    *(_OWORD *)(v3 + 32) = *a2;
    *(_OWORD *)(v3 + 48) = v37;
    *(_OWORD *)(v3 + 57) = *(_OWORD *)((char *)a2 + 25);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 80);
  char v39 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 176);
  swift_bridgeObjectRetain();
  v42[0] = v9;
  v42[1] = AGCreateWeakAttribute();
  long long v43 = 0;
  double v44 = v10;
  float32x4_t v38 = (uint64_t *)(v3 + 16);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  long long v13 = *(_OWORD *)(v3 + 48);
  uint64_t v47 = *(_OWORD *)(v3 + 32);
  v48[0] = v13;
  *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)(v3 + 57);
  outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v47);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, (uint64_t)&v47);
  swift_release();
  outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v47);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 176) = 0;
  uint64_t v14 = *(void *)(v3 + 64);
  double v15 = *(unsigned char *)(v3 + 72);
  uint64_t v16 = *(_OWORD *)(v3 + 48);
  long double v45 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)uint64_t v46 = v16;
  *(void *)&v46[16] = v14;
  v46[24] = v15;
  uint64_t v17 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, unint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  uint64_t v19 = v18;
  unint64_t v20 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  long long v21 = swift_retain();
  LOBYTE(v19) = v17(v21, &v45, v42, v19, v20, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v19)
  {
    *char v39 = v42[0];
    swift_bridgeObjectRelease();
    *float32x4_t v38 = a1;
    swift_retain();
    swift_release();
    uint64_t v22 = (float64x2_t *)a2;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = *(_OWORD *)(v4 + 48);
    long double v45 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)uint64_t v46 = v23;
    *(_OWORD *)&v46[9] = *(_OWORD *)(v4 + 57);
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v45);
    uint64_t v22 = (float64x2_t *)a2;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v38, v39, (uint64_t)&v45, a1, (uint64_t)a2, v8);
    swift_endAccess();
    swift_endAccess();
    outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v45);
  }
  swift_beginAccess();
  double v24 = vaddq_f64(v22[1], *(float64x2_t *)(v4 + 48));
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*v22, *(float64x2_t *)(v4 + 32));
  *(float64x2_t *)(v4 + 48) = v24;
  char v40 = v22[2].f64[0];
  char v41 = LOBYTE(v22[2].f64[1]);
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v40, 1.0);
  swift_endAccess();
  *(double *)(v4 + 96) = a3;
LABEL_6:
  char v25 = swift_retain();
  double v26 = specialized find<A>(_:key:)(v25);
  if (!v26)
  {
    swift_release();
    return;
  }
  long double v27 = *(double *)(v26 + 72);
  uint64_t v28 = *(unsigned char *)(v26 + 80);
  swift_release();
  if (v28) {
    return;
  }
  uint64_t v29 = 0.0;
  if (v27 > 0.0)
  {
    int v30 = log2(v27 * 240.0);
    uint64_t v29 = exp2(floor(v30 + 0.01)) * 0.00416666667;
  }
  if (v29 >= *(double *)(v4 + 88)) {
    uint64_t v29 = *(double *)(v4 + 88);
  }
  *(double *)(v4 + 88) = v29;
  if (v29 >= 0.0166666667)
  {
    unsigned int v33 = 0;
    char v35 = 1;
    goto LABEL_29;
  }
  char v31 = swift_retain();
  char v32 = specialized find<A>(_:key:)(v31);
  if (!v32)
  {
    swift_release();
    goto LABEL_28;
  }
  unsigned int v33 = *(_DWORD *)(v32 + 72);
  long long v34 = *(unsigned char *)(v32 + 76);
  swift_release();
  if (v34)
  {
LABEL_28:
    unsigned int v33 = *(_DWORD *)(v4 + 148);
    char v35 = *(unsigned char *)(v4 + 152);
    goto LABEL_29;
  }
  char v35 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 148) = v33;
  *(unsigned char *)(v4 + 152) = v35;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  char v15;
  uint64_t (*v16)(uint64_t, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  long long v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  double v27;
  long double v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  unsigned int v34;
  long long v35;
  unint64_t *v36;
  uint64_t v37;
  char v38;
  void v39[2];
  char v40;
  char v41;
  long long v42;
  long long v43;
  long long v44;
  _OWORD v45[4];

  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 157))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    long long v34 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v34)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)a2);
    char v35 = a2[1];
    *(_OWORD *)(v3 + 32) = *a2;
    *(_OWORD *)(v3 + 48) = v35;
    *(_OWORD *)(v3 + 64) = a2[2];
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 80);
  unsigned int v36 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 176);
  swift_bridgeObjectRetain();
  v39[0] = v9;
  v39[1] = AGCreateWeakAttribute();
  char v40 = 0;
  char v41 = v10;
  swift_beginAccess();
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  swift_beginAccess();
  long long v13 = *(_OWORD *)(v3 + 48);
  v45[0] = *(_OWORD *)(v3 + 32);
  v45[1] = v13;
  v45[2] = *(_OWORD *)(v3 + 64);
  outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v45);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v12, v11, (uint64_t)v45);
  swift_release();
  outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v45);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 176) = 0;
  uint64_t v14 = *(void *)(v3 + 48);
  double v15 = *(unsigned char *)(v3 + 56);
  long long v42 = *(_OWORD *)(v3 + 32);
  *(void *)&long long v43 = v14;
  BYTE8(v43) = v15;
  double v44 = *(_OWORD *)(v3 + 64);
  uint64_t v16 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v18 = v17;
  uint64_t v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  unint64_t v20 = swift_retain();
  LOBYTE(v18) = v16(v20, &v42, v39, v18, v19, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v18)
  {
    *unsigned int v36 = v39[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    long long v21 = a2;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = *(_OWORD *)(v4 + 48);
    long long v42 = *(_OWORD *)(v4 + 32);
    long long v43 = v22;
    double v44 = *(_OWORD *)(v4 + 64);
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)&v42);
    long long v21 = a2;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), v36, (uint64_t)&v42, a1, (uint64_t)a2, v8);
    swift_endAccess();
    swift_endAccess();
    outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)&v42);
  }
  swift_beginAccess();
  uint64_t v37 = *((void *)v21 + 2);
  float32x4_t v38 = *((unsigned char *)v21 + 24);
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*(float64x2_t *)v21, *(float64x2_t *)(v4 + 32));
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v37, 1.0);
  *(float64x2_t *)(v4 + 64) = vaddq_f64(*((float64x2_t *)v21 + 2), *(float64x2_t *)(v4 + 64));
  swift_endAccess();
  *(double *)(v4 + 96) = a3;
LABEL_6:
  uint64_t v23 = swift_retain();
  double v24 = specialized find<A>(_:key:)(v23);
  if (!v24)
  {
    swift_release();
    return;
  }
  char v25 = *(double *)(v24 + 72);
  double v26 = *(unsigned char *)(v24 + 80);
  swift_release();
  if (v26) {
    return;
  }
  long double v27 = 0.0;
  if (v25 > 0.0)
  {
    uint64_t v28 = log2(v25 * 240.0);
    long double v27 = exp2(floor(v28 + 0.01)) * 0.00416666667;
  }
  if (v27 >= *(double *)(v4 + 88)) {
    long double v27 = *(double *)(v4 + 88);
  }
  *(double *)(v4 + 88) = v27;
  if (v27 >= 0.0166666667)
  {
    char v31 = 0;
    unsigned int v33 = 1;
    goto LABEL_29;
  }
  uint64_t v29 = swift_retain();
  int v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    swift_release();
    goto LABEL_28;
  }
  char v31 = *(_DWORD *)(v30 + 72);
  char v32 = *(unsigned char *)(v30 + 76);
  swift_release();
  if (v32)
  {
LABEL_28:
    char v31 = *(_DWORD *)(v4 + 152);
    unsigned int v33 = *(unsigned char *)(v4 + 156);
    goto LABEL_29;
  }
  unsigned int v33 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 152) = v31;
  *(unsigned char *)(v4 + 156) = v33;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  char v15;
  uint64_t (*v16)(uint64_t, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  long long v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  double v27;
  long double v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  unsigned int v34;
  long long v35;
  unint64_t *v36;
  uint64_t v37;
  char v38;
  void v39[2];
  char v40;
  char v41;
  long long v42;
  long long v43;
  long long v44;
  _OWORD v45[4];

  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 157))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    long long v34 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v34)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)a2);
    char v35 = a2[1];
    *(_OWORD *)(v3 + 32) = *a2;
    *(_OWORD *)(v3 + 48) = v35;
    *(_OWORD *)(v3 + 64) = a2[2];
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 80);
  unsigned int v36 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 176);
  swift_bridgeObjectRetain();
  v39[0] = v9;
  v39[1] = AGCreateWeakAttribute();
  char v40 = 0;
  char v41 = v10;
  swift_beginAccess();
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  swift_beginAccess();
  long long v13 = *(_OWORD *)(v3 + 48);
  v45[0] = *(_OWORD *)(v3 + 32);
  v45[1] = v13;
  v45[2] = *(_OWORD *)(v3 + 64);
  outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v45);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v12, v11, (uint64_t)v45);
  swift_release();
  outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v45);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 176) = 0;
  uint64_t v14 = *(void *)(v3 + 48);
  double v15 = *(unsigned char *)(v3 + 56);
  long long v42 = *(_OWORD *)(v3 + 32);
  *(void *)&long long v43 = v14;
  BYTE8(v43) = v15;
  double v44 = *(_OWORD *)(v3 + 64);
  uint64_t v16 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>();
  uint64_t v18 = v17;
  uint64_t v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  unint64_t v20 = swift_retain();
  LOBYTE(v18) = v16(v20, &v42, v39, v18, v19, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v18)
  {
    *unsigned int v36 = v39[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    long long v21 = a2;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = *(_OWORD *)(v4 + 48);
    long long v42 = *(_OWORD *)(v4 + 32);
    long long v43 = v22;
    double v44 = *(_OWORD *)(v4 + 64);
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)&v42);
    long long v21 = a2;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), v36, (uint64_t)&v42, a1, (uint64_t)a2, v8);
    swift_endAccess();
    swift_endAccess();
    outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)&v42);
  }
  swift_beginAccess();
  uint64_t v37 = *((void *)v21 + 2);
  float32x4_t v38 = *((unsigned char *)v21 + 24);
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*(float64x2_t *)v21, *(float64x2_t *)(v4 + 32));
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v37, 1.0);
  *(float64x2_t *)(v4 + 64) = vaddq_f64(*((float64x2_t *)v21 + 2), *(float64x2_t *)(v4 + 64));
  swift_endAccess();
  *(double *)(v4 + 96) = a3;
LABEL_6:
  uint64_t v23 = swift_retain();
  double v24 = specialized find<A>(_:key:)(v23);
  if (!v24)
  {
    swift_release();
    return;
  }
  char v25 = *(double *)(v24 + 72);
  double v26 = *(unsigned char *)(v24 + 80);
  swift_release();
  if (v26) {
    return;
  }
  long double v27 = 0.0;
  if (v25 > 0.0)
  {
    uint64_t v28 = log2(v25 * 240.0);
    long double v27 = exp2(floor(v28 + 0.01)) * 0.00416666667;
  }
  if (v27 >= *(double *)(v4 + 88)) {
    long double v27 = *(double *)(v4 + 88);
  }
  *(double *)(v4 + 88) = v27;
  if (v27 >= 0.0166666667)
  {
    char v31 = 0;
    unsigned int v33 = 1;
    goto LABEL_29;
  }
  uint64_t v29 = swift_retain();
  int v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    swift_release();
    goto LABEL_28;
  }
  char v31 = *(_DWORD *)(v30 + 72);
  char v32 = *(unsigned char *)(v30 + 76);
  swift_release();
  if (v32)
  {
LABEL_28:
    char v31 = *(_DWORD *)(v4 + 152);
    unsigned int v33 = *(unsigned char *)(v4 + 156);
    goto LABEL_29;
  }
  unsigned int v33 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 152) = v31;
  *(unsigned char *)(v4 + 156) = v33;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v5 = v4;
  if (!*(unsigned char *)(v4 + 89))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v36 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v36)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(void *)(v4 + 32) = a2;
    *(unsigned char *)(v4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  double v10 = a4 - *(double *)(v4 + 48);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v4 + 24);
  char v12 = *(unsigned char *)(v4 + 112);
  swift_bridgeObjectRetain();
  v41[0] = v11;
  v41[1] = AGCreateWeakAttribute();
  char v42 = 0;
  char v43 = v12;
  swift_beginAccess();
  uint64_t v14 = *(void *)(v4 + 16);
  unint64_t v13 = *(void *)(v4 + 24);
  swift_beginAccess();
  uint64_t v15 = *(void *)(v4 + 32);
  char v16 = *(unsigned char *)(v4 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v14, v13, v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v5 + 112) = 0;
  char v17 = *(unsigned char *)(v5 + 40);
  uint64_t v39 = *(void *)(v5 + 32);
  char v40 = v17;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t *, void *, ValueMetadata *, unint64_t, double))(*(void *)a1 + 136);
  unint64_t v19 = lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_retain();
  LOBYTE(v19) = v18(v20, &v39, v41, &type metadata for ResolvedGradientVector, v19, v10);
  swift_bridgeObjectRelease();
  swift_release();
  if (v19)
  {
    *(void *)(v5 + 24) = v41[0];
    swift_bridgeObjectRelease();
    *(void *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
    char v21 = a3;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(v5 + 32);
    char v23 = *(unsigned char *)(v5 + 40);
    swift_beginAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char v24 = v23;
    char v21 = a3;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v5 + 16), (unint64_t *)(v5 + 24), v22, v24, a1, a2, a3, v10);
    swift_endAccess();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v37 = a2;
  char v38 = v21;
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v37, 1.0);
  swift_endAccess();
  *(double *)(v5 + 64) = a4;
LABEL_6:
  uint64_t v25 = swift_retain();
  uint64_t v26 = specialized find<A>(_:key:)(v25);
  if (!v26)
  {
    swift_release();
    return;
  }
  double v27 = *(double *)(v26 + 72);
  char v28 = *(unsigned char *)(v26 + 80);
  swift_release();
  if (v28) {
    return;
  }
  double v29 = 0.0;
  if (v27 > 0.0)
  {
    long double v30 = log2(v27 * 240.0);
    double v29 = exp2(floor(v30 + 0.01)) * 0.00416666667;
  }
  if (v29 >= *(double *)(v5 + 56)) {
    double v29 = *(double *)(v5 + 56);
  }
  *(double *)(v5 + 56) = v29;
  if (v29 >= 0.0166666667)
  {
    int v33 = 0;
    char v35 = 1;
    goto LABEL_29;
  }
  uint64_t v31 = swift_retain();
  uint64_t v32 = specialized find<A>(_:key:)(v31);
  if (!v32)
  {
    swift_release();
    goto LABEL_28;
  }
  int v33 = *(_DWORD *)(v32 + 72);
  char v34 = *(unsigned char *)(v32 + 76);
  swift_release();
  if (v34)
  {
LABEL_28:
    int v33 = *(_DWORD *)(v5 + 84);
    char v35 = *(unsigned char *)(v5 + 88);
    goto LABEL_29;
  }
  char v35 = 0;
LABEL_29:
  *(_DWORD *)(v5 + 84) = v33;
  *(unsigned char *)(v5 + 88) = v35;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, float32x2_t *a2, double a3)
{
  uint64_t v4 = v3;
  if (!*(unsigned char *)(v3 + 109))
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v30 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v30)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(void *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2->f32;
    *(float32x2_t *)(v3 + 48) = a2[2];
    goto LABEL_6;
  }
LABEL_2:
  double v8 = a3 - *(double *)(v3 + 56);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 128);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  char v32 = 0;
  char v33 = v10;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  swift_beginAccess();
  long long v36 = *(_OWORD *)(v3 + 32);
  uint64_t v37 = *(void *)(v3 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, &v36);
  swift_bridgeObjectRelease();
  swift_release();
  *(unsigned char *)(v3 + 128) = 0;
  long long v34 = *(_OWORD *)(v3 + 32);
  uint64_t v35 = *(void *)(v3 + 48);
  unint64_t v13 = *(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, double))(*(void *)a1 + 136);
  type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(0);
  uint64_t v15 = v14;
  uint64_t v16 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
  uint64_t v17 = swift_retain();
  LOBYTE(v15) = v13(v17, &v34, v31, v15, v16, v8);
  swift_release();
  if (v15)
  {
    *(void *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    uint64_t v18 = a2;
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v34 = *(_OWORD *)(v4 + 32);
    uint64_t v35 = *(void *)(v4 + 48);
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v18 = a2;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (double *)&v34, a1, a2, v8);
    swift_endAccess();
    swift_endAccess();
  }
  *(float32x4_t *)(v4 + 32) = vaddq_f32(*(float32x4_t *)v18->f32, *(float32x4_t *)(v4 + 32));
  *(float32x2_t *)(v4 + 48) = vadd_f32(v18[2], *(float32x2_t *)(v4 + 48));
  *(double *)(v4 + 72) = a3;
LABEL_6:
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized find<A>(_:key:)(v19);
  if (!v20)
  {
    swift_release();
    return;
  }
  double v21 = *(double *)(v20 + 72);
  char v22 = *(unsigned char *)(v20 + 80);
  swift_release();
  if (v22) {
    return;
  }
  double v23 = 0.0;
  if (v21 > 0.0)
  {
    long double v24 = log2(v21 * 240.0);
    double v23 = exp2(floor(v24 + 0.01)) * 0.00416666667;
  }
  if (v23 >= *(double *)(v4 + 64)) {
    double v23 = *(double *)(v4 + 64);
  }
  *(double *)(v4 + 64) = v23;
  if (v23 >= 0.0166666667)
  {
    int v27 = 0;
    char v29 = 1;
    goto LABEL_29;
  }
  uint64_t v25 = swift_retain();
  uint64_t v26 = specialized find<A>(_:key:)(v25);
  if (!v26)
  {
    swift_release();
    goto LABEL_28;
  }
  int v27 = *(_DWORD *)(v26 + 72);
  char v28 = *(unsigned char *)(v26 + 76);
  swift_release();
  if (v28)
  {
LABEL_28:
    int v27 = *(_DWORD *)(v4 + 104);
    char v29 = *(unsigned char *)(v4 + 108);
    goto LABEL_29;
  }
  char v29 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 104) = v27;
  *(unsigned char *)(v4 + 108) = v29;
}

void AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(*v4 + 80);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (double *)((char *)&v43 - v11);
  double v14 = *v13;
  int v16 = *((unsigned __int8 *)v4 + *(void *)(v15 + 160));
  uint64_t v51 = *(void *)(v15 + 88);
  if (!v16)
  {
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    unsigned int v39 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_2;
      }
    }
    else if (static Semantics.forced >= v39)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    v4[2] = a1;
    swift_retain();
    swift_release();
    char v40 = (char *)v4 + *(void *)(*v4 + 112);
    swift_beginAccess();
    (*(void (**)(char *, double *, uint64_t))(v10 + 24))(v40, a2, v9);
    swift_endAccess();
    goto LABEL_6;
  }
LABEL_2:
  uint64_t v45 = a1;
  char v49 = a2;
  uint64_t v50 = a4;
  double v17 = v14 - *(double *)((char *)v4 + *(void *)(*v4 + 120));
  int v48 = v4 + 3;
  swift_beginAccess();
  v53[0] = v4[3];
  uint64_t v46 = *(char **)(*v4 + 184);
  char v18 = v46[(void)v4];
  swift_bridgeObjectRetain();
  AnimationContext.init(state:environment:isLogicallyComplete:)(v53, v18, (uint64_t)v54);
  uint64_t v47 = v4 + 2;
  swift_beginAccess();
  uint64_t v19 = v4[2];
  v52[0] = v4[3];
  uint64_t v20 = (char *)v4 + *(void *)(*v4 + 112);
  swift_beginAccess();
  double v21 = *(void (**)(double *, char *, uint64_t))(v10 + 16);
  v21(v12, v20, v9);
  swift_retain();
  swift_bridgeObjectRetain();
  AnimatorState.forkListeners(animation:state:interval:)(v19, v52, (uint64_t)v12);
  swift_release();
  char v22 = *(void (**)(double *, uint64_t))(v10 + 8);
  v22(v12, v9);
  swift_bridgeObjectRelease();
  v46[(void)v4] = 0;
  uint64_t v46 = v20;
  char v43 = v21;
  v21(v12, v20, v9);
  uint64_t v23 = swift_retain();
  uint64_t v24 = v45;
  LOBYTE(v19) = Animation.shouldMerge<A>(previous:value:time:context:)(v23, (uint64_t)v12, (uint64_t)v54, v45, v9, v51);
  swift_release();
  double v44 = v22;
  v22(v12, v9);
  if (v19)
  {
    *int v48 = v54[0];
    swift_bridgeObjectRelease();
    *uint64_t v47 = v24;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v43(v12, v46, v9);
    uint64_t v25 = v47;
    swift_beginAccess();
    uint64_t v26 = v48;
    swift_beginAccess();
    combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v25, v26, v12, v24, v49, v9, v17);
    swift_endAccess();
    swift_endAccess();
    v44(v12, v9);
  }
  swift_beginAccess();
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  swift_endAccess();
  *(double *)((char *)v5 + *(void *)(*v5 + 136)) = v14;
LABEL_6:
  uint64_t v27 = swift_retain();
  uint64_t v28 = specialized find<A>(_:key:)(v27);
  if (!v28)
  {
    swift_release();
    return;
  }
  double v29 = *(double *)(v28 + 72);
  char v30 = *(unsigned char *)(v28 + 80);
  swift_release();
  if (v30) {
    return;
  }
  double v31 = 0.0;
  if (v29 > 0.0)
  {
    long double v32 = log2(v29 * 240.0);
    double v31 = exp2(floor(v32 + 0.01)) * 0.00416666667;
  }
  uint64_t v33 = *(void *)(*v5 + 128);
  if (v31 >= *(double *)((char *)v5 + v33)) {
    double v31 = *(double *)((char *)v5 + v33);
  }
  *(double *)((char *)v5 + v33) = v31;
  if (v31 >= 0.0166666667)
  {
    int v36 = 0;
    char v38 = 1;
    goto LABEL_29;
  }
  uint64_t v34 = swift_retain();
  uint64_t v35 = specialized find<A>(_:key:)(v34);
  if (!v35)
  {
    swift_release();
    goto LABEL_28;
  }
  int v36 = *(_DWORD *)(v35 + 72);
  char v37 = *(unsigned char *)(v35 + 76);
  swift_release();
  if (v37)
  {
LABEL_28:
    char v41 = (char *)v5 + *(void *)(*v5 + 152);
    int v36 = *(_DWORD *)v41;
    char v38 = v41[4];
    goto LABEL_29;
  }
  char v38 = 0;
LABEL_29:
  char v42 = (char *)v5 + *(void *)(*v5 + 152);
  *(_DWORD *)char v42 = v36;
  v42[4] = v38;
}

BOOL specialized static AnimatablePair.== infix(_:_:)(double *a1, double *a2)
{
  BOOL result = 0;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3])
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    if (static AnimatablePair.== infix(_:_:)()) {
      return 1;
    }
  }
  return result;
}

uint64_t specialized static AnimatablePair.== infix(_:_:)(float *a1, float *a2)
{
  if (*a1 == *a2)
  {
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)(a1 + 2), (uint64_t)v13);
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)(a2 + 2), (uint64_t)v12);
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)v13, (uint64_t)v14);
    if (v18 == 1)
    {
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)v12, (uint64_t)v19);
      if (v23) {
        return 1;
      }
    }
    else
    {
      float v4 = *(float *)v14;
      float v5 = *(float *)&v14[1];
      float v7 = *(float *)&v14[2];
      float v6 = *(float *)&v14[3];
      double v9 = v15;
      double v8 = v16;
      double v10 = v17;
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)v12, (uint64_t)v19);
      if ((v23 & 1) == 0)
      {
        BOOL v11 = v4 == v19[0] && v5 == v19[1];
        if (v11 && v7 == v19[2] && v6 == v19[3] && v9 == v20 && v8 == v21 && v10 == v22) {
          return 1;
        }
      }
    }
  }
  return 0;
}

BOOL AnimatableAttributeHelper.isAnimating.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48)) != 0;
}

Swift::Void __swiftcall AnimatableAttributeHelper.reset()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = v0[12];
  if (*(void *)(v1 + v4))
  {
    AnimatorState.removeListeners()();
    uint64_t v4 = v3[12];
  }
  swift_release();
  *(void *)(v1 + v4) = 0;
  uint64_t v5 = v1 + v3[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v5, 1, 1, AssociatedTypeWitness);
  *(_DWORD *)(v2 + v3[13]) = *(_DWORD *)AGGraphGetValue() >> 1;
}

uint64_t AnimatableAttributeHelper.update(value:defaultAnimation:environment:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v5[1] = *(_OWORD *)(a4 + 16);
  return AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, (void (*)(double *, const char **))_ViewInputs.base.modify, (uint64_t)v5, a4);
}

Swift::Void __swiftcall AnimatableAttributeHelper.removeListeners()()
{
  if (*(void *)(v1 + *(int *)(v0 + 48))) {
    AnimatorState.removeListeners()();
  }
}

double AnimatableFrameAttributeVFD.init(position:size:pixelLength:environment:phase:time:transaction:animationsDisabled:)@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  double result = 0.0;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(unsigned char *)(a9 + 64) = 1;
  *(void *)(a9 + 72) = 0;
  *(_DWORD *)(a9 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  *(void *)(a9 + 88) = 0;
  *(unsigned char *)(a9 + 96) = 1;
  *(void *)(a9 + 136) = 0;
  *(_OWORD *)(a9 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0u;
  *(_OWORD *)(a9 + 104) = 0u;
  *(unsigned char *)(a9 + 144) = 1;
  *(unsigned char *)(a9 + 145) = a8;
  return result;
}

double AnimatableFrameAttribute.init(position:size:pixelLength:environment:phase:time:transaction:animationsDisabled:)@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  double result = 0.0;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(unsigned char *)(a9 + 64) = 1;
  *(void *)(a9 + 72) = 0;
  *(_DWORD *)(a9 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
  *(unsigned char *)(a9 + 84) = a8;
  return result;
}

uint64_t specialized AnimationState.subscript.getter(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  type metadata accessor for AnimatorState<Double>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v4 & 1) == 0) {
    return MEMORY[0x263F8EE78];
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v3, (uint64_t)v6);
  outlined init with take of Any(v6, v7);
  outlined init with take of Any(v7, v6);
  swift_dynamicCast();
  return v8;
}

{
  return specialized AnimationState.subscript.getter(a1, (uint64_t (*)(void))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
}

uint64_t specialized AnimationState.subscript.getter(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (!*(void *)(a1 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  type metadata accessor for AnimatorState<CGFloat>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) == 0) {
    return MEMORY[0x263F8EE78];
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v6, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with take of Any(v10, v9);
  swift_dynamicCast();
  return v11;
}

uint64_t specialized AnimationState.subscript.getter(uint64_t a1, uint64_t (*a2)(void))
{
  if (!*(void *)(a1 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = a2(0);
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0) {
    return MEMORY[0x263F8EE78];
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v7);
  outlined init with take of Any(v7, v8);
  outlined init with take of Any(v8, v7);
  swift_dynamicCast();
  return v9;
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;
  _OWORD v7[2];
  _OWORD v8[2];
  uint64_t v9;

  if (!*(void *)(a1 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = a2(0);
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0) {
    return MEMORY[0x263F8EE78];
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v7);
  outlined init with take of Any(v7, v8);
  outlined init with take of Any(v8, v7);
  swift_dynamicCast();
  return v9;
}

uint64_t AnimatableAttribute.$environment.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t AnimatableAttribute.description.getter()
{
  return specialized AnimatableAttribute.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimatableAttribute<A>()
{
  return specialized AnimatableAttribute.description.getter();
}

Swift::Void __swiftcall AnimatableFrameAttribute.destroy()()
{
  if (*(void *)(v0 + 72)) {
    specialized AnimatorState.removeListeners()();
  }
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance AnimatableFrameAttribute()
{
  if (*(void *)(v0 + 72)) {
    return specialized AnimatorState.removeListeners()();
  }
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  LODWORD(v5) = a3;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v12 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 24))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v14) {
      double v12 = *Value;
    }
  }
  double v15 = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 32) != *v15 >> 1)
  {
    specialized AnimatableAttributeHelper.reset()(v15);
    *(unsigned char *)(a1 + 28) = 1;
LABEL_11:
    id v17 = *(id *)a1;
    id v18 = *(id *)a1;
    ShaderVectorData.init(rbShader:)(v17, v84);
    uint64_t v19 = *(void *)(a4 + 16);
    id v20 = (id)v84[0];
    if (!v19) {
      goto LABEL_34;
    }
    uint64_t v80 = *(int **)(a4 + 16);
    if (specialized static Array<A>.== infix(_:_:)(v84[0], v19)) {
      goto LABEL_34;
    }
    uint64_t v71 = v9;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v21 = swift_retain();
    uint64_t v22 = specialized find<A>(_:key:)(v21);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 72);
      swift_retain();
      swift_release();
      if (v23) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v24 = swift_retain();
    char v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release();
    if ((v25 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_62;
      }
      swift_retain();
      uint64_t v23 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 28) == 1) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a4 + 24);
  if (!v16) {
    return;
  }
  while (1)
  {
    id v35 = *(id *)a1;
    id v36 = *(id *)a1;
    swift_retain();
    ShaderVectorData.init(rbShader:)(v35, v84);
    LOBYTE(v81) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)v84, v5, v12) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v45 = *(double *)(v16 + 48);
      uint64_t v76 = *(const char **)(v16 + 56);
      uint64_t v46 = *(unsigned int *)(v16 + 72);
      unsigned __int8 v47 = *(unsigned char *)(v16 + 76);
      int v48 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      char v49 = static CoreGlue.shared;
      LOBYTE(v8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v47;
      v48(&v76, v46 | ((unint64_t)v47 << 32), v45);

      goto LABEL_50;
    }
    uint64_t v71 = v9;
    uint64_t v5 = *(void *)(a4 + 16);
    swift_bridgeObjectRetain();
    swift_retain_n();
    char v37 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_46;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v20 = (id)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_46:
      swift_release_n();
LABEL_47:
      uint64_t v50 = swift_bridgeObjectRelease();
      if (*(void *)(a4 + 24))
      {
        specialized AnimatorState.removeListeners()(v50);
        swift_release();
      }
      *(void *)(a4 + 24) = 0;
LABEL_50:
      uint64_t v76 = (const char *)v84[0];
      id v51 = *(id *)a1;
      swift_bridgeObjectRetain();
      double v52 = ShaderVectorData.updating(rbShader:)(v51);
      swift_release();
      swift_bridgeObjectRelease_n();

      *(void *)a1 = v52;
      *(unsigned char *)(a1 + 28) = 1;
      return;
    }
    uint64_t v70 = v8;
    swift_retain();
    id v38 = v20;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v8 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v8)
    {
      __break(1u);
    }
    else
    {
      id v20 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v42 = MEMORY[0x263F8DA20];
      *(void *)(v39 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v39 + 64) = v42;
      *(void *)(v39 + 32) = Counter;
      int v43 = AGGraphGetCurrentAttribute();
      if (v43 != v8)
      {
        uint64_t v44 = MEMORY[0x263F8E960];
        *(void *)(v39 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v39 + 104) = v44;
        *(_DWORD *)(v39 + 72) = v43;
        *(void *)(v39 + 136) = MEMORY[0x263F8D310];
        *(void *)(v39 + 144) = lazy protocol witness table accessor for type String and conformance String();
        strcpy((char *)(v39 + 112), "ResolvedShader");
        *(unsigned char *)(v39 + 127) = -18;
        LOBYTE(v73) = v37;
        uint64_t v79 = _signpostLog;
        uint64_t v80 = &dword_245728000;
        char v81 = "AnimationState";
        uint64_t v82 = 14;
        char v83 = 2;
        uint64_t v76 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v77 = 37;
        char v78 = 2;
        uint64_t v75 = (int *)v39;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v70);
        goto LABEL_47;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v23 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    uint64_t v79 = (uint64_t)v20;
    swift_bridgeObjectRetain();
    specialized static ShaderVectorData.-= infix(_:_:)((uint64_t)&v79, (uint64_t *)&v80);
    double v12 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 24)) {
      break;
    }
    uint64_t v53 = v79;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    uint64_t v54 = v23;
    uint64_t v55 = swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v69 = v54;
    uint64_t v56 = v53;
    id v20 = (id)v55;
    uint64_t v57 = specialized AnimatorState.init(animation:interval:at:in:)(v54, v56, v12);
    swift_bridgeObjectRetain();
    swift_retain();
    int v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v20 = (id)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v67 = v58;
      uint64_t v70 = v8;
      swift_retain();
      id v59 = v20;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = xmmword_2461BE2B0;
      int v61 = AGGraphGetCurrentAttribute();
      int v68 = *MEMORY[0x263F288F8];
      if (v61 == v68) {
        goto LABEL_68;
      }
      id v62 = (id)AGGraphGetAttributeGraph();
      uint64_t v63 = AGGraphGetCounter();

      uint64_t v64 = MEMORY[0x263F8DA20];
      *(void *)(v60 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v60 + 64) = v64;
      *(void *)(v60 + 32) = v63;
      int v65 = AGGraphGetCurrentAttribute();
      if (v65 == v68) {
        goto LABEL_69;
      }
      uint64_t v66 = MEMORY[0x263F8E960];
      *(void *)(v60 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v60 + 104) = v66;
      *(_DWORD *)(v60 + 72) = v65;
      *(void *)(v60 + 136) = MEMORY[0x263F8D310];
      *(void *)(v60 + 144) = lazy protocol witness table accessor for type String and conformance String();
      strcpy((char *)(v60 + 112), "ResolvedShader");
      *(unsigned char *)(v60 + 127) = -18;
      char v74 = v67;
      uint64_t v72 = v60;
      uint64_t v73 = _signpostLog;
      char v81 = "AnimationState";
      uint64_t v82 = 14;
      char v83 = 2;
      uint64_t v75 = &dword_245728000;
      uint64_t v76 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v77 = 39;
      char v78 = 2;
      id v20 = 0;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v8 = v70;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v70);
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(a4 + 24) = v57;
    if (v57)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v20 = (id)v84[0];
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_33:
    uint64_t v9 = v71;
LABEL_34:
    swift_bridgeObjectRelease();
    *(void *)(a4 + 16) = v20;
    uint64_t v16 = *(void *)(a4 + 24);
    if (!v16) {
      return;
    }
  }
  uint64_t v26 = v79;
  swift_retain();
  LOBYTE(v81) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v23, v26, v12);
  swift_retain_n();
  swift_bridgeObjectRetain();
  id v20 = (id)static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  int v68 = (int)v20;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  id v20 = (id)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v69 = v23;
  uint64_t v70 = v8;
  swift_retain();
  id v27 = v20;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_2461BE2B0;
  int v29 = AGGraphGetCurrentAttribute();
  int v67 = *MEMORY[0x263F288F8];
  if (v29 != v67)
  {
    id v30 = (id)AGGraphGetAttributeGraph();
    uint64_t v31 = AGGraphGetCounter();

    uint64_t v32 = MEMORY[0x263F8DA20];
    *(void *)(v28 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v28 + 64) = v32;
    *(void *)(v28 + 32) = v31;
    int v33 = AGGraphGetCurrentAttribute();
    if (v33 == v67) {
      goto LABEL_67;
    }
    uint64_t v34 = MEMORY[0x263F8E960];
    *(void *)(v28 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v28 + 104) = v34;
    *(_DWORD *)(v28 + 72) = v33;
    *(void *)(v28 + 136) = MEMORY[0x263F8D310];
    *(void *)(v28 + 144) = lazy protocol witness table accessor for type String and conformance String();
    strcpy((char *)(v28 + 112), "ResolvedShader");
    *(unsigned char *)(v28 + 127) = -18;
    char v74 = v68;
    uint64_t v72 = v28;
    uint64_t v73 = _signpostLog;
    char v81 = "AnimationState";
    uint64_t v82 = 14;
    char v83 = 2;
    uint64_t v75 = &dword_245728000;
    uint64_t v76 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v77 = 39;
    char v78 = 2;
    id v20 = 0;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    swift_bridgeObjectRelease();
    uint64_t v8 = v70;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v70);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 24)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x6769724F77656956, 0xEA00000000006E69);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x4574657366664F5FLL, 0xED00007463656666);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x657A69534743, 0xE600000000000000);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x746E696F504743, 0xE700000000000000);
}

uint64_t specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
LABEL_65:
  swift_once();
LABEL_2:
  double v17 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 88))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v19) {
      double v17 = *Value;
    }
  }
  uint64_t result = AGGraphGetValue();
  if (*(_DWORD *)(a4 + 96) == *(_DWORD *)result >> 1)
  {
    if (*(unsigned char *)(a1 + 64) != 1)
    {
      uint64_t v21 = *(void *)(a4 + 88);
      if (v21) {
        goto LABEL_44;
      }
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 64) = 1;
  }
  double v22 = *(double *)(a1 + 48);
  float64x2_t v23 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64x2_t v24 = vmulq_f64(*(float64x2_t *)a1, v23);
  float64x2_t v25 = vmulq_f64(*(float64x2_t *)(a1 + 16), v23);
  float64x2_t v26 = vmulq_f64(*(float64x2_t *)(a1 + 32), v23);
  double v27 = *(double *)(a1 + 56) * 128.0;
  v109[0] = v24;
  v109[1] = v25;
  v109[2] = v26;
  double v110 = v22;
  double v111 = v27;
  if ((*(unsigned char *)(a4 + 80) & 1) == 0)
  {
    double v84 = v27;
    float64x2_t v85 = v26;
    float64x2_t v86 = v24;
    float64x2_t v87 = v25;
    double v29 = *(double *)(a4 + 64);
    double v28 = *(double *)(a4 + 72);
    double v8 = *(double *)(a4 + 48);
    double v7 = *(double *)(a4 + 56);
    double v5 = *(double *)(a4 + 32);
    double v9 = *(double *)(a4 + 40);
    double v4 = *(double *)(a4 + 16);
    double v6 = *(double *)(a4 + 24);
    v112[0] = v4;
    v112[1] = v6;
    v112[2] = v5;
    v112[3] = v9;
    v112[4] = v8;
    v112[5] = v7;
    double v80 = v29;
    double v81 = v28;
    v112[6] = v29;
    v112[7] = v28;
    uint64_t result = specialized static AnimatablePair.== infix(_:_:)((double *)v109, v112);
    if ((result & 1) == 0)
    {
      double v82 = v22;
      uint64_t v83 = v14;
      AGGraphClearUpdate();
      uint64_t v14 = *(void *)AGGraphGetValue();
      swift_retain();
      AGGraphSetUpdate();
      uint64_t v30 = swift_retain();
      uint64_t v31 = specialized find<A>(_:key:)(v30);
      if (v31)
      {
        uint64_t v32 = *(uint64_t *)(v31 + 72);
        swift_retain();
        swift_release();
        if (*(double *)&v32 != 0.0) {
          goto LABEL_21;
        }
      }
      else
      {
        swift_release();
      }
      uint64_t v33 = swift_retain();
      char v34 = specialized closure #1 in PropertyList.subscript.getter(v33);
      swift_release();
      if (v34)
      {
        if (one-time initialization token for velocityTracking != -1) {
          goto LABEL_68;
        }
        goto LABEL_18;
      }
      if (*(double *)&a2 != 0.0)
      {
        swift_retain();
        uint64_t v32 = a2;
        goto LABEL_21;
      }
      double v22 = v82;
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  while (1)
  {
    *(float64x2_t *)(a4 + 16) = v24;
    *(float64x2_t *)(a4 + 32) = v25;
    *(float64x2_t *)(a4 + 48) = v26;
    *(double *)(a4 + 64) = v22;
    *(double *)(a4 + 72) = v27;
    *(unsigned char *)(a4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    uint64_t v21 = *(void *)(a4 + 88);
    if (!v21) {
      return result;
    }
LABEL_44:
    uint64_t v54 = *(void *)(a1 + 48);
    float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    double v56 = *(double *)(a1 + 56) * 128.0;
    float64x2_t v57 = vmulq_f64(*(float64x2_t *)(a1 + 16), v55);
    float64x2_t v97 = vmulq_f64(*(float64x2_t *)a1, v55);
    float64x2_t v98 = v57;
    float64x2_t v99 = vmulq_f64(*(float64x2_t *)(a1 + 32), v55);
    uint64_t v100 = v54;
    double v101 = v56;
    swift_retain();
    LOBYTE(v94) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v97, v17) & 1) == 0) {
      break;
    }
    swift_retain_n();
    char v58 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_56;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v59 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_56:
      swift_release_n();
      if (!*(void *)(a4 + 88))
      {
LABEL_58:
        *(void *)(a4 + 88) = 0;
        goto LABEL_59;
      }
LABEL_57:
      specialized AnimatorState.removeListeners()();
      swift_release();
      goto LABEL_58;
    }
    uint64_t v83 = v14;
    *(void *)&v87.f64[0] = v13;
    swift_retain();
    id v60 = v59;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v13 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v13)
    {
      __break(1u);
    }
    else
    {
      id v62 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v64 = MEMORY[0x263F8DA20];
      *(void *)(v14 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v14 + 64) = v64;
      *(void *)(v14 + 32) = Counter;
      int v65 = AGGraphGetCurrentAttribute();
      if (v65 != v13)
      {
        uint64_t v66 = MEMORY[0x263F8E960];
        *(void *)(v14 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v14 + 104) = v66;
        *(_DWORD *)(v14 + 72) = v65;
        *(void *)(v14 + 136) = MEMORY[0x263F8D310];
        *(void *)(v14 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v14 + 112) = 0xD000000000000011;
        *(void *)(v14 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0x8000000246222D80;
        char v93 = v58;
        uint64_t v91 = _signpostLog;
        unsigned int v92 = &dword_245728000;
        CGFloat v94 = "AnimationState";
        uint64_t v95 = 14;
        char v96 = 2;
        v89[0] = "Animation: (%p) [%d] %{public}@ ended";
        v89[1] = 37;
        char v90 = 2;
        uint64_t v88 = v14;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, void))(v83 + 8))(v16, *(void *)&v87.f64[0]);
        swift_bridgeObjectRelease();
        if (!*(void *)(a4 + 88)) {
          goto LABEL_58;
        }
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_18:
    uint64_t v32 = static Animation.velocityTracking;
    swift_retain();
LABEL_21:
    double v35 = v86.f64[0] - v4;
    double v6 = v86.f64[1] - v6;
    double v36 = v87.f64[0] - v5;
    double v9 = v87.f64[1] - v9;
    double v8 = v85.f64[0] - v8;
    double v7 = v85.f64[1] - v7;
    double v4 = v82 - v80;
    double v5 = v84 - v81;
    double v81 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 88))
    {
      *(double *)&long long v102 = v35;
      *((double *)&v102 + 1) = v6;
      double v103 = v36;
      double v104 = v9;
      double v105 = v8;
      double v106 = v7;
      double v107 = v4;
      double v108 = v5;
      swift_retain();
      LOBYTE(v97.f64[0]) = 0;
      double v17 = v81;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v32, (double *)&v102, v81);
      swift_retain_n();
      int v37 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        int v79 = v37;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        id v38 = (void *)_signpostLog;
        char v39 = OS_os_log.signpostsEnabled.getter();
        double v22 = v82;
        if (v39)
        {
          double v80 = *(double *)&v32;
          swift_retain();
          id v40 = v38;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v41 = swift_allocObject();
          *(_OWORD *)(v41 + 16) = xmmword_2461BE2B0;
          uint64_t result = AGGraphGetCurrentAttribute();
          int v78 = *MEMORY[0x263F288F8];
          if (result == v78)
          {
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            return result;
          }
          id v42 = (id)AGGraphGetAttributeGraph();
          uint64_t v77 = AGGraphGetCounter();

          uint64_t v43 = MEMORY[0x263F8DA20];
          *(void *)(v41 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v41 + 64) = v43;
          *(void *)(v41 + 32) = v77;
          uint64_t result = AGGraphGetCurrentAttribute();
          if (result == v78) {
            goto LABEL_70;
          }
          uint64_t v44 = MEMORY[0x263F8E960];
          *(void *)(v41 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v41 + 104) = v44;
          *(_DWORD *)(v41 + 72) = result;
          *(void *)(v41 + 136) = MEMORY[0x263F8D310];
          *(void *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v41 + 112) = 0xD000000000000011;
          *(void *)(v41 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0x8000000246222D80;
          LOBYTE(v88) = v79;
          v89[0] = &dword_245728000;
          uint64_t v91 = v41;
          unsigned int v92 = (int *)_signpostLog;
          *(void *)&v97.f64[0] = "AnimationState";
          *(void *)&v97.f64[1] = 14;
          LOBYTE(v98.f64[0]) = 2;
          CGFloat v94 = "Animation: (%p) [%d] %{public}@ updated";
          uint64_t v95 = 39;
          char v96 = 2;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release_n();
          (*(void (**)(char *, uint64_t))(v83 + 8))(v16, v13);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        double v22 = v82;
      }
      a2 = *(uint64_t *)(a4 + 88);
      if (*(double *)&a2 == 0.0)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
    }
    else
    {
      *(double *)&long long v102 = v35;
      *((double *)&v102 + 1) = v6;
      double v103 = v36;
      double v104 = v9;
      double v105 = v8;
      double v106 = v7;
      double v107 = v4;
      double v108 = v5;
      type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      uint64_t v45 = swift_retain();
      double v17 = v81;
      *(double *)&a2 = COERCE_DOUBLE(specialized AnimatorState.init(animation:interval:at:in:)(v45, &v102, v81));
      swift_retain();
      int v46 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        int v79 = v46;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        unsigned __int8 v47 = (void *)_signpostLog;
        char v48 = OS_os_log.signpostsEnabled.getter();
        double v22 = v82;
        if (v48)
        {
          double v80 = *(double *)&v32;
          swift_retain();
          id v49 = v47;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v50 = swift_allocObject();
          *(_OWORD *)(v50 + 16) = xmmword_2461BE2B0;
          uint64_t result = AGGraphGetCurrentAttribute();
          int v78 = *MEMORY[0x263F288F8];
          if (result == v78) {
            goto LABEL_71;
          }
          id v51 = (id)AGGraphGetAttributeGraph();
          uint64_t v77 = AGGraphGetCounter();

          uint64_t v52 = MEMORY[0x263F8DA20];
          *(void *)(v50 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v50 + 64) = v52;
          *(void *)(v50 + 32) = v77;
          uint64_t result = AGGraphGetCurrentAttribute();
          if (result == v78) {
            goto LABEL_72;
          }
          uint64_t v53 = MEMORY[0x263F8E960];
          *(void *)(v50 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v50 + 104) = v53;
          *(_DWORD *)(v50 + 72) = result;
          *(void *)(v50 + 136) = MEMORY[0x263F8D310];
          *(void *)(v50 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v50 + 112) = 0xD000000000000011;
          *(void *)(v50 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0x8000000246222D80;
          LOBYTE(v88) = v79;
          v89[0] = &dword_245728000;
          uint64_t v91 = v50;
          unsigned int v92 = (int *)_signpostLog;
          *(void *)&v97.f64[0] = "AnimationState";
          *(void *)&v97.f64[1] = 14;
          LOBYTE(v98.f64[0]) = 2;
          CGFloat v94 = "Animation: (%p) [%d] %{public}@ started";
          uint64_t v95 = 39;
          char v96 = 2;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(char *, uint64_t))(v83 + 8))(v16, v13);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        double v22 = v82;
      }
      swift_release();
      *(double *)(a4 + 88) = *(double *)&a2;
      if (*(double *)&a2 == 0.0) {
        goto LABEL_64;
      }
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
LABEL_41:
    uint64_t result = swift_release();
    uint64_t v14 = v83;
LABEL_42:
    float64x2_t v24 = v86;
    float64x2_t v25 = v87;
    float64x2_t v26 = v85;
    double v27 = v84;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v67 = *(double *)(v21 + 104);
  v89[0] = *(void *)(v21 + 112);
  uint64_t v68 = *(unsigned int *)(v21 + 184);
  unsigned __int8 v69 = *(unsigned char *)(v21 + 188);
  uint64_t v70 = *(void (**)(void *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                  + 0x58);
  uint64_t v71 = static CoreGlue.shared;
  LOBYTE(v92) = v69;
  v70(v89, v68 | ((unint64_t)v69 << 32), v67);

LABEL_59:
  uint64_t result = swift_release();
  uint64_t v72 = v100;
  double v73 = v101;
  float64x2_t v74 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v75 = vmulq_f64(v98, v74);
  *(float64x2_t *)a1 = vmulq_f64(v97, v74);
  *(float64x2_t *)(a1 + 16) = v75;
  *(float64x2_t *)(a1 + 32) = vmulq_f64(v99, v74);
  *(void *)(a1 + 48) = v72;
  *(double *)(a1 + 56) = v73 * 0.0078125;
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  *(double *)&uint64_t v8 = COERCE_DOUBLE(type metadata accessor for OSSignpostID());
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v80 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v11 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 48))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v13) {
      double v11 = *Value;
    }
  }
  uint64_t result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 56) != *result >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 6specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
LABEL_11:
    MeshGradient._Paint.animatableData.getter(&v93);
    uint64_t v16 = *(unint64_t **)(a4 + 16);
    double v17 = (void *)v93.i64[0];
    if (!v16) {
      goto LABEL_50;
    }
    double v75 = v11;
    unsigned int v77 = a3;
    id v18 = *(float32x4_t **)(a4 + 24);
    LODWORD(v19) = *(void *)(a4 + 32);
    LODWORD(v2specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = HIDWORD(*(void *)(a4 + 32));
    LODWORD(v21) = *(void *)(a4 + 40);
    uint64_t v79 = *(void *)(a4 + 40);
    float v22 = *((float *)&v79 + 1);
    float64x2_t v23 = (float32x4_t *)v93.i64[1];
    long long v24 = v94;
    if (specialized static Array<A>.== infix(_:_:)(v93.i64[0], (uint64_t)v16))
    {
      specialized static Array<A>.== infix(_:_:)(v23, v18);
      if ((v25 & 1) != 0
        && *(float *)&v24 == v19
        && *((float *)&v24 + 1) == v20
        && *((float *)&v24 + 2) == v21
        && *((float *)&v24 + 3) == v22)
      {
        goto LABEL_49;
      }
    }
    uint64_t v76 = v9;
    int v78 = v18;
    outlined copy of ScrapeableContent?((uint64_t)v16);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v26 = swift_retain();
    uint64_t v27 = specialized find<A>(_:key:)(v26);
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 72);
      swift_retain();
      swift_release();
      if (v28) {
        goto LABEL_28;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v29 = swift_retain();
    char v30 = specialized closure #1 in PropertyList.subscript.getter(v29);
    swift_release();
    if (v30)
    {
      if (one-time initialization token for velocityTracking != -1) {
        swift_once();
      }
      uint64_t v28 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2) {
        goto LABEL_48;
      }
      swift_retain();
      uint64_t v28 = a2;
    }
LABEL_28:
    v88.i64[0] = (uint64_t)v17;
    v88.i64[1] = (uint64_t)v23;
    long long v89 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized static AnimatableArray.-= infix(_:_:)((uint64_t)&v88, (uint64_t)v16);
    specialized static AnimatableArray.-= infix(_:_:)((uint64_t)&v88.i64[1], (uint64_t)v78);
    float v31 = *(float *)&v24 - v19;
    float v32 = *((float *)&v24 + 1) - v20;
    *(float *)&long long v89 = v31;
    *((float *)&v89 + 1) = *((float *)&v24 + 1) - v20;
    float v33 = *((float *)&v24 + 2) - v21;
    float v34 = *((float *)&v24 + 3) - v22;
    *((float *)&v89 + 2) = v33;
    *((float *)&v89 + 3) = *((float *)&v24 + 3) - v22;
    double v11 = *(double *)AGGraphGetValue();
    if (!*(void *)(a4 + 48))
    {
      float32x4_t v95 = v88;
      float v96 = v31;
      float v97 = v32;
      float v98 = v33;
      float v99 = v34;
      type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      uint64_t v43 = swift_allocObject();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v44 = swift_retain();
      double v17 = (void *)v43;
      uint64_t v45 = specialized AnimatorState.init(animation:interval:at:in:)(v44, &v95, v11);
      swift_retain();
      int v46 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_45;
      }
      if (one-time initialization token for _signpostLog != -1) {
        goto LABEL_70;
      }
      goto LABEL_41;
    }
    float32x4_t v95 = v88;
    float v96 = v31;
    float v97 = v32;
    float v98 = v33;
    float v99 = v34;
    swift_retain();
    LOBYTE(v9specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
    a3 = v77;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v28, &v95, v11);
    swift_retain();
    double v17 = (void *)static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      int v74 = (int)v17;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      double v17 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        double v75 = *(double *)&v8;
        swift_retain();
        id v35 = v17;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_2461BE2B0;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        int v73 = *MEMORY[0x263F288F8];
        if (result == v73)
        {
          __break(1u);
        }
        else
        {
          id v37 = (id)AGGraphGetAttributeGraph();
          uint64_t Counter = AGGraphGetCounter();

          uint64_t v39 = MEMORY[0x263F8DA20];
          *(void *)(v36 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v36 + 64) = v39;
          *(void *)(v36 + 32) = Counter;
          uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
          if (result != v73)
          {
            uint64_t v40 = MEMORY[0x263F8E960];
            *(void *)(v36 + 96) = MEMORY[0x263F8E8F8];
            *(void *)(v36 + 104) = v40;
            *(_DWORD *)(v36 + 72) = result;
            *(void *)(v36 + 136) = MEMORY[0x263F8D310];
            *(void *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v36 + 112) = 0x746E6961505FLL;
            *(void *)(v36 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
            char v85 = v74;
            float64x2_t v87 = &dword_245728000;
            uint64_t v86 = _signpostLog;
            char v90 = "AnimationState";
            uint64_t v91 = 14;
            char v92 = 2;
            double v82 = "Animation: (%p) [%d] %{public}@ updated";
            uint64_t v83 = 39;
            char v84 = 2;
            uint64_t v81 = v36;
            uint64_t v41 = v80;
            double v17 = 0;
            specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
            swift_release_n();
            id v42 = v41;
            *(double *)&uint64_t v8 = v75;
            (*(void (**)(char *, double))(v76 + 8))(v42, COERCE_DOUBLE(*(void *)&v75));
            swift_bridgeObjectRelease();
            a3 = v77;
            goto LABEL_37;
          }
        }
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
        return result;
      }
    }
    swift_release_n();
LABEL_37:
    if (!*(void *)(a4 + 48)) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }
  if (*(unsigned char *)(a1 + 60) == 1) {
    goto LABEL_11;
  }
  uint64_t v15 = *(void *)(a4 + 48);
  if (v15)
  {
    while (1)
    {
      swift_retain();
      MeshGradient._Paint.animatableData.getter(&v93);
      v88.i8[0] = 0;
      if ((specialized AnimatorState.update(_:at:environment:)((float32x2_t *)&v93, a3, v11) & 1) == 0) {
        break;
      }
      uint64_t v56 = v8;
      swift_retain();
      *(double *)&uint64_t v8 = COERCE_DOUBLE(static os_signpost_type_t.end.getter());
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_63;
      }
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v16 = &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>;
      float64x2_t v57 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {
LABEL_63:
        uint64_t v66 = swift_release();
        if (*(void *)(a4 + 48))
        {
LABEL_64:
          specialized AnimatorState.removeListeners()(v66);
          swift_release();
        }
LABEL_65:
        *(void *)(a4 + 48) = 0;
        goto LABEL_66;
      }
      uint64_t v76 = v9;
      swift_retain();
      id v58 = v57;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_2461BE2B0;
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      int v46 = *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8])
      {
        __break(1u);
      }
      else
      {
        id v60 = (id)AGGraphGetAttributeGraph();
        uint64_t v61 = AGGraphGetCounter();

        uint64_t v62 = MEMORY[0x263F8DA20];
        *(void *)(v45 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v45 + 64) = v62;
        *(void *)(v45 + 32) = v61;
        int v63 = AGGraphGetCurrentAttribute();
        if (v63 != v46)
        {
          uint64_t v64 = MEMORY[0x263F8E960];
          *(void *)(v45 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v45 + 104) = v64;
          *(_DWORD *)(v45 + 72) = v63;
          *(void *)(v45 + 136) = MEMORY[0x263F8D310];
          *(void *)(v45 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v45 + 112) = 0x746E6961505FLL;
          *(void *)(v45 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
          LOBYTE(v81) = v8;
          double v82 = (const char *)&dword_245728000;
          float64x2_t v87 = (int *)_signpostLog;
          v88.i64[0] = (uint64_t)"AnimationState";
          v88.i64[1] = 14;
          LOBYTE(v89) = 2;
          char v90 = "Animation: (%p) [%d] %{public}@ ended";
          uint64_t v91 = 37;
          char v92 = 2;
          uint64_t v86 = v45;
          int v65 = v80;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(char *, uint64_t))(v76 + 8))(v65, v56);
          uint64_t v66 = swift_bridgeObjectRelease();
          if (*(void *)(a4 + 48)) {
            goto LABEL_64;
          }
          goto LABEL_65;
        }
      }
      __break(1u);
LABEL_70:
      swift_once();
LABEL_41:
      double v17 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        int v73 = v46;
        double v75 = *(double *)&v8;
        swift_retain();
        id v47 = v17;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v48 = swift_allocObject();
        *(_OWORD *)(v48 + 16) = xmmword_2461BE2B0;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        int v74 = *MEMORY[0x263F288F8];
        if (result == v74) {
          goto LABEL_73;
        }
        id v49 = (id)AGGraphGetAttributeGraph();
        uint64_t v50 = AGGraphGetCounter();

        uint64_t v51 = MEMORY[0x263F8DA20];
        *(void *)(v48 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v48 + 64) = v51;
        *(void *)(v48 + 32) = v50;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        if (result == v74) {
          goto LABEL_74;
        }
        uint64_t v52 = MEMORY[0x263F8E960];
        *(void *)(v48 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v48 + 104) = v52;
        *(_DWORD *)(v48 + 72) = result;
        *(void *)(v48 + 136) = MEMORY[0x263F8D310];
        *(void *)(v48 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v48 + 112) = 0x746E6961505FLL;
        *(void *)(v48 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
        char v85 = v73;
        float64x2_t v87 = &dword_245728000;
        uint64_t v86 = _signpostLog;
        char v90 = "AnimationState";
        uint64_t v91 = 14;
        char v92 = 2;
        double v82 = "Animation: (%p) [%d] %{public}@ started";
        uint64_t v83 = 39;
        char v84 = 2;
        uint64_t v81 = v48;
        uint64_t v53 = v80;
        double v17 = 0;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        uint64_t v54 = v53;
        *(double *)&uint64_t v8 = v75;
        (*(void (**)(char *, double))(v76 + 8))(v54, COERCE_DOUBLE(*(void *)&v75));
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_45:
        swift_release();
      }
      a3 = v77;
      swift_release();
      *(void *)(a4 + 48) = v45;
      if (v45)
      {
LABEL_38:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?((uint64_t)v16);
        double v17 = (void *)v93.i64[0];
        uint64_t v9 = v76;
      }
      else
      {
LABEL_47:
        __break(1u);
LABEL_48:
        outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?((uint64_t)v16);
        swift_release();
        uint64_t v9 = v76;
LABEL_49:
        a3 = v77;
        double v11 = v75;
      }
LABEL_50:
      uint64_t result = (_DWORD *)outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(*(void *)(a4 + 16));
      uint64_t v55 = v93.i64[1];
      *(void *)(a4 + 16) = v17;
      *(void *)(a4 + 24) = v55;
      *(_OWORD *)(a4 + 32) = v94;
      uint64_t v15 = *(void *)(a4 + 48);
      if (!v15) {
        return result;
      }
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    double v67 = *(double *)(v15 + 72);
    v88.i64[0] = *(void *)(v15 + 80);
    uint64_t v68 = *(unsigned int *)(v15 + 120);
    unsigned __int8 v69 = *(unsigned char *)(v15 + 124);
    uint64_t v70 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                         + 0x58);
    uint64_t v71 = static CoreGlue.shared;
    LOBYTE(v82) = v69;
    v70(&v88, v68 | ((unint64_t)v69 << 32), v67);

LABEL_66:
    float32x4_t v88 = v93;
    long long v89 = v94;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MeshGradient._Paint.animatableData.setter(&v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = (_DWORD *)swift_release();
    *(unsigned char *)(a1 + 6specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 1;
  }
  return result;
}

{
  return specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset());
}

{
  double v4;
  double v5;
  double v6;
  unint64_t *v10;
  uint64_t v11;
  double v12;
  double *Value;
  char v14;
  _DWORD *result;
  void *v16;
  uint64_t v17;
  float64_t v18;
  char v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  unsigned int v25;
  float64_t v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  int v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double v40;
  int v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t Counter;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  const char *v51;
  char v52;
  uint64_t v53;
  float64x2_t v54;
  unsigned int v55;
  char v56;
  float64_t v57;
  uint64_t v58;
  unint64_t *v59;
  void *v60;
  id v61;
  uint64_t v62;
  int CurrentAttribute;
  id v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  unsigned __int8 v73;
  void (*v74)(int **, unint64_t, double);
  void *v75;
  int *v76;
  char v77;
  float64x2_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  int v90;
  int v91;
  float64x2_t v92;
  uint64_t v93;
  float64x2_t v94;
  char *v95;
  float64x2_t v96;
  unsigned int v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  int *v103;
  char v104;
  const char *v105;
  uint64_t v106;
  char v107;
  const char *v108;
  uint64_t v109;
  char v110;
  float64x2_t v111;
  float64_t v112;
  char v113;
  float64x2_t v114;
  float64x2_t v115;
  float64_t v116;
  char v117;
  double v118;
  double v119;
  SwiftUI::ResolvedGradient v120;
  SwiftUI::ResolvedGradient v121;

  float v97 = a3;
  uint64_t v10 = (unint64_t *)type metadata accessor for OSSignpostID();
  float32x4_t v93 = *(v10 - 1);
  MEMORY[0x270FA5388](v10);
  float32x4_t v95 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v12 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 64))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v14) {
      double v12 = *Value;
    }
  }
  uint64_t result = (_DWORD *)AGGraphGetValue();
  uint64_t v16 = &unk_26B0F3000;
  if (*(_DWORD *)(a4 + 72) != *result >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 48) = 1;
LABEL_11:
    id v18 = *(double *)a1;
    float v19 = *(unsigned char *)(a1 + 8);
    float v20 = *(double *)(a1 + 16);
    float v21 = *(double *)(a1 + 24);
    float v22 = *(double *)(a1 + 32);
    float64x2_t v23 = *(double *)(a1 + 40);
    if (one-time initialization token for v5 != -1) {
      swift_once();
    }
    long long v24 = static Semantics.v5;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      uint64_t v16 = (void *)&unk_26B0F3000;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_17:
        char v25 = 0;
        uint64_t v26 = MEMORY[0x263F8EE78];
LABEL_20:
        uint64_t v27 = v20 * 128.0;
        double v6 = v21 * 128.0;
        double v4 = v22 * 128.0;
        double v5 = v23 * 128.0;
        uint64_t v28 = *(double *)(a4 + 32);
        v96.f64[0] = v20 * 128.0;
        if (v28 == 0.0) {
          goto LABEL_49;
        }
        uint64_t v29 = *(double *)(a4 + 48);
        char v30 = *(double *)(a4 + 56);
        float v31 = *(unsigned __int8 *)(a4 + 40);
        float v33 = *(double *)(a4 + 16);
        float v32 = *(double *)(a4 + 24);
        if (v27 == v33
          && v6 == v32
          && (specialized static Array<A>.== infix(_:_:)(*(void *)&v26, *(void *)&v28) & 1) != 0
          && v25 == v31
          && v4 == v29
          && v5 == v30)
        {
          goto LABEL_49;
        }
        LODWORD(v94.f64[0]) = v25;
        swift_bridgeObjectRetain();
        AGGraphClearUpdate();
        float v34 = *(void *)AGGraphGetValue();
        swift_retain();
        AGGraphSetUpdate();
        id v35 = swift_retain();
        uint64_t v36 = specialized find<A>(_:key:)(v35);
        if (v36)
        {
          id v37 = *(void *)(v36 + 72);
          swift_retain();
          swift_release();
          if (v37) {
            goto LABEL_37;
          }
        }
        else
        {
          swift_release();
        }
        id v38 = swift_retain();
        uint64_t v39 = specialized closure #1 in PropertyList.subscript.getter(v38);
        swift_release();
        if (v39)
        {
          if (one-time initialization token for velocityTracking != -1) {
            swift_once();
          }
          id v37 = static Animation.velocityTracking;
          swift_retain();
        }
        else
        {
          if (!a2) {
            goto LABEL_85;
          }
          swift_retain();
          id v37 = a2;
        }
LABEL_37:
        uint64_t v112 = v26;
        uint64_t v113 = LOBYTE(v94.f64[0]);
        v111.f64[0] = v96.f64[0] - v33;
        v111.f64[1] = v6 - v32;
        v115.f64[0] = v28;
        LOBYTE(v115.f64[1]) = v31;
        swift_bridgeObjectRetain();
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v115, -1.0);
        uint64_t v40 = v5 - v30;
        v114.f64[0] = v4 - v29;
        v114.f64[1] = v40;
        double v12 = *(double *)AGGraphGetValue();
        if (!*(void *)(a4 + 64))
        {
          id v115 = v111;
          CGFloat v116 = v112;
          uint64_t v117 = v113;
          double v118 = v4 - v29;
          uint64_t v119 = v40;
          type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
          swift_allocObject();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v79 = swift_retain();
          id v58 = specialized AnimatorState.init(animation:interval:at:in:)(v79, &v115, v12, v34, (void (*)(_OWORD *))outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, (void (*)(_OWORD *))outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>);
          swift_retain();
          LODWORD(v62) = static os_signpost_type_t.begin.getter();
          static os_signpost_type_t.event.getter();
          if ((kdebug_is_enabled() & 1) == 0) {
            goto LABEL_82;
          }
          if (one-time initialization token for _signpostLog != -1) {
            goto LABEL_88;
          }
          goto LABEL_78;
        }
        id v115 = v111;
        CGFloat v116 = v112;
        uint64_t v117 = v113;
        double v118 = v4 - v29;
        uint64_t v119 = v40;
        swift_retain();
        LOBYTE(v108) = 0;
        specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v37, &v115, v12);
        swift_retain();
        uint64_t v41 = static os_signpost_type_t.event.getter();
        static os_signpost_type_t.event.getter();
        if (kdebug_is_enabled())
        {
          if (one-time initialization token for _signpostLog != -1) {
            swift_once();
          }
          id v42 = (void *)_signpostLog;
          if (OS_os_log.signpostsEnabled.getter())
          {
            char v90 = v41;
            *(void *)&v92.f64[0] = v10;
            swift_retain();
            uint64_t v43 = v42;
            OSSignpostID.init(log:object:)();
            type metadata accessor for _ContiguousArrayStorage<CVarArg>();
            uint64_t v44 = swift_allocObject();
            *(_OWORD *)(v44 + 16) = xmmword_2461BE2B0;
            uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
            uint64_t v91 = *MEMORY[0x263F288F8];
            if (result == v91)
            {
              __break(1u);
            }
            else
            {
              uint64_t v45 = (id)AGGraphGetAttributeGraph();
              uint64_t Counter = AGGraphGetCounter();

              id v47 = MEMORY[0x263F8DA20];
              *(void *)(v44 + 56) = MEMORY[0x263F8D9D0];
              *(void *)(v44 + 64) = v47;
              *(void *)(v44 + 32) = Counter;
              uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
              if (result != v91)
              {
                uint64_t v48 = MEMORY[0x263F8E960];
                *(void *)(v44 + 96) = MEMORY[0x263F8E8F8];
                *(void *)(v44 + 104) = v48;
                *(_DWORD *)(v44 + 72) = result;
                *(void *)(v44 + 136) = MEMORY[0x263F8D310];
                *(void *)(v44 + 144) = lazy protocol witness table accessor for type String and conformance String();
                *(void *)(v44 + 112) = 0x746E6961505FLL;
                *(void *)(v44 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
                LOBYTE(v98) = v90;
                float v99 = &dword_245728000;
                double v103 = (int *)_signpostLog;
                double v108 = "AnimationState";
                uint64_t v109 = 14;
                double v110 = 2;
                double v105 = "Animation: (%p) [%d] %{public}@ updated";
                double v106 = 39;
                double v107 = 2;
                long long v102 = v44;
                id v49 = v95;
                specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
                swift_release_n();
                uint64_t v50 = v49;
                uint64_t v10 = *(unint64_t **)&v92.f64[0];
                (*(void (**)(char *, void))(v93 + 8))(v50, *(void *)&v92.f64[0]);
                swift_bridgeObjectRelease();
                goto LABEL_46;
              }
            }
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
            return result;
          }
        }
        swift_release_n();
LABEL_46:
        if (!*(void *)(a4 + 64)) {
          goto LABEL_84;
        }
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v16 = (void *)&unk_26B0F3000;
      if (static Semantics.forced < v24) {
        goto LABEL_17;
      }
    }
    v111.f64[0] = v18;
    LOBYTE(v111.f64[1]) = v19;
    swift_bridgeObjectRetain();
    v120.stops._rawuint64_t Value = &v111;
    ResolvedGradientVector.init(_:)(v120);
    uint64_t v26 = v115.f64[0];
    char v25 = LOBYTE(v115.f64[1]);
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 48) == 1) {
    goto LABEL_11;
  }
  double v17 = *(void *)(a4 + 64);
  if (!v17) {
    return result;
  }
  while (1)
  {
    uint64_t v51 = *(const char **)a1;
    uint64_t v52 = *(unsigned char *)(a1 + 8);
    float v96 = *(float64x2_t *)(a1 + 16);
    long long v94 = *(float64x2_t *)(a1 + 32);
    uint64_t v53 = v16[485];
    swift_retain();
    if (v53 != -1) {
      swift_once();
    }
    uint64_t v54 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    uint64_t v55 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      char v92 = v54;
      swift_once();
      uint64_t v54 = v92;
    }
    float v96 = vmulq_f64(v96, v54);
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        goto LABEL_56;
      }
    }
    else if (static Semantics.forced < v55)
    {
LABEL_56:
      uint64_t v56 = 0;
      float64x2_t v57 = MEMORY[0x263F8EE78];
      goto LABEL_59;
    }
    double v105 = v51;
    LOBYTE(v106) = v52;
    swift_bridgeObjectRetain();
    v121.stops._rawuint64_t Value = &v105;
    ResolvedGradientVector.init(_:)(v121);
    float64x2_t v57 = v111.f64[0];
    uint64_t v56 = LOBYTE(v111.f64[1]);
LABEL_59:
    double v111 = v96;
    uint64_t v112 = v57;
    uint64_t v113 = v56;
    uint64_t v114 = vmulq_f64(v94, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    LOBYTE(v105) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v111, v97, v12) & 1) == 0) {
      break;
    }
    swift_retain();
    id v58 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_71;
    }
    id v59 = v10;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v10 = &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>;
    id v60 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_71:
      uint64_t v70 = swift_release();
      if (*(void *)(a4 + 64))
      {
LABEL_72:
        specialized AnimatorState.removeListeners()(v70);
        swift_release();
      }
LABEL_73:
      *(void *)(a4 + 64) = 0;
      goto LABEL_74;
    }
    swift_retain();
    uint64_t v61 = v60;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    *(void *)&uint64_t v26 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == LODWORD(v26))
    {
      __break(1u);
    }
    else
    {
      uint64_t v64 = (id)AGGraphGetAttributeGraph();
      int v65 = AGGraphGetCounter();

      uint64_t v66 = MEMORY[0x263F8DA20];
      *(void *)(v62 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v62 + 64) = v66;
      *(void *)(v62 + 32) = v65;
      double v67 = AGGraphGetCurrentAttribute();
      if (v67 != LODWORD(v26))
      {
        uint64_t v68 = MEMORY[0x263F8E960];
        *(void *)(v62 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v62 + 104) = v68;
        *(_DWORD *)(v62 + 72) = v67;
        *(void *)(v62 + 136) = MEMORY[0x263F8D310];
        *(void *)(v62 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v62 + 112) = 0x746E6961505FLL;
        *(void *)(v62 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
        double v104 = v58;
        double v103 = &dword_245728000;
        long long v102 = _signpostLog;
        double v105 = "AnimationState";
        double v106 = 14;
        double v107 = 2;
        float v99 = (int *)"Animation: (%p) [%d] %{public}@ ended";
        uint64_t v100 = 37;
        double v101 = 2;
        float v98 = v62;
        unsigned __int8 v69 = v95;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, unint64_t *))(v93 + 8))(v69, v59);
        uint64_t v70 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 64)) {
          goto LABEL_72;
        }
        goto LABEL_73;
      }
    }
    __break(1u);
LABEL_88:
    swift_once();
LABEL_78:
    double v80 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      char v90 = v62;
      *(void *)&v92.f64[0] = v10;
      swift_retain();
      uint64_t v81 = v80;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      double v82 = swift_allocObject();
      *(_OWORD *)(v82 + 16) = xmmword_2461BE2B0;
      uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
      uint64_t v91 = *MEMORY[0x263F288F8];
      if (result == v91) {
        goto LABEL_91;
      }
      uint64_t v83 = (id)AGGraphGetAttributeGraph();
      char v84 = AGGraphGetCounter();

      char v85 = MEMORY[0x263F8DA20];
      *(void *)(v82 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v82 + 64) = v85;
      *(void *)(v82 + 32) = v84;
      uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
      if (result == v91) {
        goto LABEL_92;
      }
      uint64_t v86 = MEMORY[0x263F8E960];
      *(void *)(v82 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v82 + 104) = v86;
      *(_DWORD *)(v82 + 72) = result;
      *(void *)(v82 + 136) = MEMORY[0x263F8D310];
      *(void *)(v82 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v82 + 112) = 0x746E6961505FLL;
      *(void *)(v82 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
      LOBYTE(v98) = v90;
      float v99 = &dword_245728000;
      double v103 = (int *)_signpostLog;
      double v108 = "AnimationState";
      uint64_t v109 = 14;
      double v110 = 2;
      double v105 = "Animation: (%p) [%d] %{public}@ started";
      double v106 = 39;
      double v107 = 2;
      long long v102 = v82;
      float64x2_t v87 = v95;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      float32x4_t v88 = v87;
      uint64_t v10 = *(unint64_t **)&v92.f64[0];
      (*(void (**)(char *, void))(v93 + 8))(v88, *(void *)&v92.f64[0]);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_82:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 64) = v58;
    if (v58)
    {
LABEL_47:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_84:
      __break(1u);
LABEL_85:
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = &unk_26B0F3000;
    char v25 = LODWORD(v94.f64[0]);
LABEL_49:
    uint64_t result = (_DWORD *)swift_bridgeObjectRelease();
    *(float64_t *)(a4 + 16) = v96.f64[0];
    *(double *)(a4 + 24) = v6;
    *(float64_t *)(a4 + 32) = v26;
    *(void *)(a4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v25;
    *(double *)(a4 + 48) = v4;
    *(double *)(a4 + 56) = v5;
    double v17 = *(void *)(a4 + 64);
    if (!v17) {
      return result;
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v71 = *(double *)(v17 + 88);
  float v99 = *(int **)(v17 + 96);
  uint64_t v72 = *(unsigned int *)(v17 + 152);
  int v73 = *(unsigned char *)(v17 + 156);
  int v74 = *(void (**)(int **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                + 0x58);
  double v75 = static CoreGlue.shared;
  LOBYTE(v103) = v73;
  v74(&v99, v72 | ((unint64_t)v73 << 32), v71);

LABEL_74:
  uint64_t v76 = *(int **)&v112;
  unsigned int v77 = v113;
  int v78 = v114;
  *(float64x2_t *)(a1 + 16) = vmulq_f64(v111, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  float v99 = v76;
  LOBYTE(v10specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v77;
  swift_bridgeObjectRetain();
  ResolvedGradient.animatableData.setter((uint64_t *)&v99);
  swift_bridgeObjectRelease();
  uint64_t result = (_DWORD *)swift_release();
  *(double *)(a1 + 32) = v78.f64[0] * 0.0078125;
  *(double *)(a1 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v78.f64[1] * 0.0078125;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char *Counter;
  double v10;
  double *Value;
  char v12;
  _DWORD *result;
  uint64_t v14;
  const char *v15;
  char v16;
  unsigned int v17;
  unint64_t *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  int v28;
  char v29;
  void *v30;
  id v31;
  uint64_t v32;
  int v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  int *v42;
  char v43;
  void *v44;
  id v45;
  uint64_t v46;
  int CurrentAttribute;
  id v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  unsigned __int8 v55;
  void (*v56)(const char **, unint64_t, double);
  void *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char is_enabled;
  void *v64;
  id v65;
  uint64_t v66;
  int v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  int *v83;
  char v84;
  const char *v85;
  uint64_t v86;
  char v87;
  const char *v88;
  uint64_t v89;
  char v90;
  int *v91;
  char v92;
  SwiftUI::ResolvedGradient v93;
  SwiftUI::ResolvedGradient v94;

  unsigned int v77 = a3;
  double v7 = type metadata accessor for OSSignpostID();
  uint64_t v76 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t Counter = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  uint64_t v10 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v12) {
      uint64_t v10 = *Value;
    }
  }
  uint64_t result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 40) != *result >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 9) = 1;
LABEL_11:
    uint64_t v15 = *(const char **)a1;
    uint64_t v16 = *(unsigned char *)(a1 + 8);
    if (one-time initialization token for v5 != -1) {
      swift_once();
    }
    double v17 = static Semantics.v5;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        goto LABEL_17;
      }
    }
    else if (static Semantics.forced < v17)
    {
LABEL_17:
      LODWORD(v18) = 0;
      float v19 = (const char *)MEMORY[0x263F8EE78];
      float v20 = *(const char **)(a4 + 16);
      if (!v20) {
        goto LABEL_44;
      }
LABEL_21:
      double v75 = Counter;
      LODWORD(Counter) = *(unsigned __int8 *)(a4 + 24);
      if ((specialized static Array<A>.== infix(_:_:)(v19, v20) & 1) == 0 || v18 != Counter)
      {
        int v73 = v7;
        swift_bridgeObjectRetain();
        AGGraphClearUpdate();
        AGGraphGetValue();
        swift_retain();
        AGGraphSetUpdate();
        float v21 = swift_retain();
        float v22 = specialized find<A>(_:key:)(v21);
        if (v22)
        {
          float64x2_t v23 = *(void *)(v22 + 72);
          swift_retain();
          swift_release();
          int v74 = v23;
          if (v23) {
            goto LABEL_33;
          }
        }
        else
        {
          swift_release();
        }
        long long v24 = swift_retain();
        char v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
        swift_release();
        if ((v25 & 1) == 0)
        {
          if (!a2) {
            goto LABEL_81;
          }
          swift_retain();
          int v74 = a2;
          goto LABEL_33;
        }
        if (one-time initialization token for velocityTracking != -1) {
          goto LABEL_84;
        }
        goto LABEL_30;
      }
      goto LABEL_23;
    }
    char v85 = v15;
    LOBYTE(v86) = v16;
    swift_bridgeObjectRetain();
    v93.stops._rawuint64_t Value = &v85;
    ResolvedGradientVector.init(_:)(v93);
    float v19 = v88;
    LODWORD(v18) = v89;
    float v20 = *(const char **)(a4 + 16);
    if (!v20) {
      goto LABEL_44;
    }
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 9) == 1) {
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(a4 + 32);
  if (!v14) {
    return result;
  }
  while (1)
  {
    id v37 = *(const char **)a1;
    id v38 = *(unsigned char *)(a1 + 8);
    uint64_t v39 = one-time initialization token for v5;
    swift_retain();
    if (v39 != -1) {
      swift_once();
    }
    uint64_t v40 = static Semantics.v5;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        goto LABEL_51;
      }
    }
    else if (static Semantics.forced < v40)
    {
LABEL_51:
      uint64_t v41 = 0;
      id v42 = (int *)MEMORY[0x263F8EE78];
      goto LABEL_54;
    }
    uint64_t v79 = v37;
    LOBYTE(v8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v38;
    swift_bridgeObjectRetain();
    v94.stops._rawuint64_t Value = &v79;
    ResolvedGradientVector.init(_:)(v94);
    id v42 = (int *)v85;
    uint64_t v41 = v86;
LABEL_54:
    uint64_t v91 = v42;
    char v92 = v41;
    LOBYTE(v85) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v10, (uint64_t)&v91, v77) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v53 = *(double *)(v14 + 56);
      uint64_t v79 = *(const char **)(v14 + 64);
      uint64_t v54 = *(unsigned int *)(v14 + 84);
      uint64_t v55 = *(unsigned char *)(v14 + 88);
      uint64_t v56 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      float64x2_t v57 = static CoreGlue.shared;
      LOBYTE(v83) = v55;
      v56(&v79, v54 | ((unint64_t)v55 << 32), v53);

      goto LABEL_69;
    }
    swift_retain();
    uint64_t v43 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_66;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v18 = &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>;
    uint64_t v44 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_66:
      uint64_t v52 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_67:
        specialized AnimatorState.removeListeners()(v52);
        swift_release();
      }
LABEL_68:
      *(void *)(a4 + 32) = 0;
LABEL_69:
      uint64_t v79 = (const char *)v91;
      LOBYTE(v8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v92;
      swift_bridgeObjectRetain();
      ResolvedGradient.animatableData.setter((uint64_t *)&v79);
      swift_bridgeObjectRelease();
      uint64_t result = (_DWORD *)swift_release();
      *(unsigned char *)(a1 + 9) = 1;
      return result;
    }
    int v73 = v7;
    swift_retain();
    uint64_t v45 = v44;
    float v20 = Counter;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    int v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    float v19 = (const char *)*MEMORY[0x263F288F8];
    if (CurrentAttribute == v19)
    {
      __break(1u);
    }
    else
    {
      uint64_t v48 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = (char *)AGGraphGetCounter();

      id v49 = MEMORY[0x263F8DA20];
      *(void *)(v46 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v46 + 64) = v49;
      *(void *)(v46 + 32) = Counter;
      uint64_t v50 = AGGraphGetCurrentAttribute();
      if (v50 != v19)
      {
        uint64_t v51 = MEMORY[0x263F8E960];
        *(void *)(v46 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v46 + 104) = v51;
        *(_DWORD *)(v46 + 72) = v50;
        *(void *)(v46 + 136) = MEMORY[0x263F8D310];
        *(void *)(v46 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v46 + 112) = 0xD000000000000010;
        *(void *)(v46 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0x8000000246222DC0;
        char v84 = v43;
        double v82 = _signpostLog;
        uint64_t v83 = &dword_245728000;
        char v85 = "AnimationState";
        uint64_t v86 = 14;
        float64x2_t v87 = 2;
        uint64_t v79 = "Animation: (%p) [%d] %{public}@ ended";
        double v80 = 37;
        uint64_t v81 = 2;
        int v78 = v46;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(const char *, uint64_t))(v76 + 8))(v20, v73);
        uint64_t v52 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_67;
        }
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_84:
    swift_once();
LABEL_30:
    int v74 = static Animation.velocityTracking;
    swift_retain();
LABEL_33:
    uint64_t v79 = v19;
    LOBYTE(v8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = (_BYTE)v18;
    float32x4_t v88 = v20;
    LOBYTE(v89) = (_BYTE)Counter;
    swift_bridgeObjectRetain();
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v88, -1.0);
    uint64_t v10 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    id v58 = (uint64_t)v79;
    id v59 = v80;
    type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    id v60 = swift_retain();
    uint64_t v61 = specialized AnimatorState.init(animation:interval:at:in:)(v60, v58, v59, v10);
    swift_retain();
    uint64_t v62 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    is_enableCGFloat d = kdebug_is_enabled();
    uint64_t Counter = v75;
    if ((is_enabled & 1) == 0) {
      goto LABEL_78;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v64 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      LODWORD(v71) = v62;
      swift_retain();
      int v65 = v64;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = xmmword_2461BE2B0;
      uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
      double v67 = *MEMORY[0x263F288F8];
      if (result == *MEMORY[0x263F288F8]) {
        goto LABEL_87;
      }
      uint64_t v68 = (id)AGGraphGetAttributeGraph();
      uint64_t v72 = AGGraphGetCounter();

      unsigned __int8 v69 = MEMORY[0x263F8DA20];
      *(void *)(v66 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v66 + 64) = v69;
      *(void *)(v66 + 32) = v72;
      uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
      if (result == v67) {
        goto LABEL_88;
      }
      uint64_t v70 = MEMORY[0x263F8E960];
      *(void *)(v66 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v66 + 104) = v70;
      *(_DWORD *)(v66 + 72) = result;
      *(void *)(v66 + 136) = MEMORY[0x263F8D310];
      *(void *)(v66 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v66 + 112) = 0xD000000000000010;
      *(void *)(v66 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0x8000000246222DC0;
      LOBYTE(v78) = v71;
      uint64_t v91 = &dword_245728000;
      double v82 = v66;
      uint64_t v83 = (int *)_signpostLog;
      float32x4_t v88 = "AnimationState";
      long long v89 = 14;
      char v90 = 2;
      char v85 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v86 = 39;
      float64x2_t v87 = 2;
      uint64_t Counter = v75;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      (*(void (**)(char *, uint64_t))(v76 + 8))(Counter, v73);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_78:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v61;
    if (!v61)
    {
LABEL_80:
      __break(1u);
LABEL_81:
      swift_release();
      swift_bridgeObjectRelease();
      double v7 = v73;
LABEL_23:
      uint64_t Counter = v75;
      goto LABEL_44;
    }
LABEL_43:
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double v7 = v73;
LABEL_44:
    uint64_t result = (_DWORD *)swift_bridgeObjectRelease();
    *(void *)(a4 + 16) = v19;
    *(unsigned char *)(a4 + 24) = (_BYTE)v18;
    uint64_t v14 = *(void *)(a4 + 32);
    if (!v14) {
      return result;
    }
  }
  uint64_t v26 = (uint64_t)v79;
  uint64_t v27 = v80;
  swift_retain();
  LOBYTE(v88) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v74, v26, v27, v10);
  swift_retain();
  uint64_t v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  uint64_t v29 = kdebug_is_enabled();
  uint64_t Counter = v75;
  if ((v29 & 1) == 0) {
    goto LABEL_41;
  }
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  char v30 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_41:
    swift_release_n();
    goto LABEL_42;
  }
  LODWORD(v72) = v28;
  swift_retain();
  float v31 = v30;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  float v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_2461BE2B0;
  uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
  float v33 = *MEMORY[0x263F288F8];
  if (result != *MEMORY[0x263F288F8])
  {
    float v34 = (id)AGGraphGetAttributeGraph();
    uint64_t v71 = AGGraphGetCounter();

    id v35 = MEMORY[0x263F8DA20];
    *(void *)(v32 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v32 + 64) = v35;
    *(void *)(v32 + 32) = v71;
    uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
    if (result == v33) {
      goto LABEL_86;
    }
    uint64_t v36 = MEMORY[0x263F8E960];
    *(void *)(v32 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v32 + 104) = v36;
    *(_DWORD *)(v32 + 72) = result;
    *(void *)(v32 + 136) = MEMORY[0x263F8D310];
    *(void *)(v32 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v32 + 112) = 0xD000000000000010;
    *(void *)(v32 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0x8000000246222DC0;
    LOBYTE(v78) = v72;
    uint64_t v91 = &dword_245728000;
    double v82 = v32;
    uint64_t v83 = (int *)_signpostLog;
    float32x4_t v88 = "AnimationState";
    long long v89 = 14;
    char v90 = 2;
    char v85 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v86 = 39;
    float64x2_t v87 = 2;
    uint64_t Counter = v75;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v76 + 8))(Counter, v73);
    swift_bridgeObjectRelease();
LABEL_42:
    if (!*(void *)(a4 + 32)) {
      goto LABEL_80;
    }
    goto LABEL_43;
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7)
{
  uint64_t v79 = a6;
  LODWORD(Counter) = a3;
  uint64_t v17 = type metadata accessor for OSSignpostID();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  float v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v21 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 40))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v23) {
      double v21 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(unsigned char *)(a1 + 16) = 1;
LABEL_11:
    double v9 = *(double *)a1;
    double v10 = *(double *)(a1 + 8);
    if (*(unsigned char *)(a4 + 32)) {
      goto LABEL_37;
    }
    double v8 = *(double *)(a4 + 16);
    double v7 = *(double *)(a4 + 24);
    if (v9 == v8 && v10 == v7) {
      goto LABEL_37;
    }
    uint64_t v78 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v26 = swift_retain();
    uint64_t v27 = specialized find<A>(_:key:)(v26);
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 72);
      swift_retain();
      swift_release();
      if (v28) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v29 = swift_retain();
    char v30 = specialized closure #1 in PropertyList.subscript.getter(v29);
    swift_release();
    if ((v30 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      uint64_t v28 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 16) == 1) {
    goto LABEL_11;
  }
  uint64_t v24 = *(void *)(a4 + 40);
  if (!v24) {
    return;
  }
  while (1)
  {
    v90[0] = *(float64x2_t *)a1;
    swift_retain();
    LOBYTE(v87) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v90, Counter, v21) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v54 = *(double *)(v24 + 56);
      uint64_t v81 = *(const char **)(v24 + 64);
      uint64_t v55 = *(unsigned int *)(v24 + 88);
      unsigned __int8 v56 = *(unsigned char *)(v24 + 92);
      float64x2_t v57 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      id v58 = static CoreGlue.shared;
      LOBYTE(v85) = v56;
      v57(&v81, v55 | ((unint64_t)v56 << 32), v54);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    char v43 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v44 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      uint64_t v53 = swift_release();
      if (*(void *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v53);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
LABEL_53:
      *(float64x2_t *)a1 = v90[0];
      *(unsigned char *)(a1 + 16) = 1;
      return;
    }
    uint64_t v78 = a7;
    uint64_t v77 = v18;
    swift_retain();
    id v45 = v44;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    int v47 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      id v48 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v49 = MEMORY[0x263F8DA20];
      *(void *)(v18 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v18 + 64) = v49;
      *(void *)(v18 + 32) = Counter;
      int v50 = AGGraphGetCurrentAttribute();
      if (v50 != v47)
      {
        uint64_t v51 = MEMORY[0x263F8E960];
        *(void *)(v18 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v18 + 104) = v51;
        *(_DWORD *)(v18 + 72) = v50;
        *(void *)(v18 + 136) = MEMORY[0x263F8D310];
        *(void *)(v18 + 144) = lazy protocol witness table accessor for type String and conformance String();
        uint64_t v52 = v78;
        *(void *)(v18 + 112) = v79;
        *(void *)(v18 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v52;
        char v86 = v43;
        uint64_t v84 = _signpostLog;
        char v85 = &dword_245728000;
        float64x2_t v87 = "AnimationState";
        uint64_t v88 = 14;
        char v89 = 2;
        uint64_t v81 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v82 = 37;
        char v83 = 2;
        uint64_t v80 = v18;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v77 + 8))(v20, v17);
        uint64_t v53 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 40)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    uint64_t v28 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    double v8 = v9 - v8;
    double v7 = v10 - v7;
    double v21 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 40)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v59 = swift_retain();
    uint64_t v60 = specialized AnimatorState.init(animation:interval:at:in:)(v59, v8, v7, v21);
    swift_retain();
    int v61 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    int v75 = v61;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v62 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v76 = v28;
      uint64_t v77 = v18;
      swift_retain();
      id v63 = v62;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_2461BE2B0;
      int v65 = AGGraphGetCurrentAttribute();
      int v74 = *MEMORY[0x263F288F8];
      if (v65 == v74) {
        goto LABEL_71;
      }
      id v66 = (id)AGGraphGetAttributeGraph();
      uint64_t v67 = AGGraphGetCounter();

      uint64_t v68 = MEMORY[0x263F8DA20];
      *(void *)(v64 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v64 + 64) = v68;
      *(void *)(v64 + 32) = v67;
      int v69 = AGGraphGetCurrentAttribute();
      if (v69 == v74) {
        goto LABEL_72;
      }
      uint64_t v70 = MEMORY[0x263F8E960];
      *(void *)(v64 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v64 + 104) = v70;
      *(_DWORD *)(v64 + 72) = v69;
      *(void *)(v64 + 136) = MEMORY[0x263F8D310];
      *(void *)(v64 + 144) = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v71 = v78;
      *(void *)(v64 + 112) = v79;
      *(void *)(v64 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v71;
      LOBYTE(v8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v75;
      *(void *)&v90[0].f64[0] = &dword_245728000;
      uint64_t v84 = v64;
      char v85 = (int *)_signpostLog;
      float64x2_t v87 = "AnimationState";
      uint64_t v88 = 14;
      char v89 = 2;
      uint64_t v81 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v82 = 39;
      char v83 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v72 = v77;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v20, v17);
      uint64_t v18 = v72;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v60;
    if (v60)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    a7 = v78;
LABEL_37:
    *(double *)(a4 + 16) = v9;
    *(double *)(a4 + 24) = v10;
    *(unsigned char *)(a4 + 32) = 0;
    uint64_t v24 = *(void *)(a4 + 40);
    if (!v24) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v87) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v28, v8, v7, v21);
  swift_retain();
  int v31 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  int v75 = v31;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  float v32 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  uint64_t v76 = v28;
  uint64_t v77 = v18;
  swift_retain();
  id v33 = v32;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_2461BE2B0;
  int v35 = AGGraphGetCurrentAttribute();
  int v74 = *MEMORY[0x263F288F8];
  if (v35 != v74)
  {
    id v36 = (id)AGGraphGetAttributeGraph();
    uint64_t v37 = AGGraphGetCounter();

    uint64_t v38 = MEMORY[0x263F8DA20];
    *(void *)(v34 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v34 + 64) = v38;
    *(void *)(v34 + 32) = v37;
    int v39 = AGGraphGetCurrentAttribute();
    if (v39 == v74) {
      goto LABEL_70;
    }
    uint64_t v40 = MEMORY[0x263F8E960];
    *(void *)(v34 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v34 + 104) = v40;
    *(_DWORD *)(v34 + 72) = v39;
    *(void *)(v34 + 136) = MEMORY[0x263F8D310];
    *(void *)(v34 + 144) = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v41 = v78;
    *(void *)(v34 + 112) = v79;
    *(void *)(v34 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v41;
    LOBYTE(v8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v75;
    *(void *)&v90[0].f64[0] = &dword_245728000;
    uint64_t v84 = v34;
    char v85 = (int *)_signpostLog;
    float64x2_t v87 = "AnimationState";
    uint64_t v88 = 14;
    char v89 = 2;
    uint64_t v81 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v82 = 39;
    char v83 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v42 = v77;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v20, v17);
    uint64_t v18 = v42;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 40)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t Counter;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  double *Value;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  void *v32;
  id v33;
  uint64_t v34;
  int v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  id v45;
  int CurrentAttribute;
  int v47;
  id v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  unsigned __int8 v56;
  void (*v57)(const char **, unint64_t, double);
  void *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  id v63;
  uint64_t v64;
  int v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int *v85;
  char v86;
  const char *v87;
  uint64_t v88;
  char v89;
  float64x2_t v90[2];

  uint64_t v79 = a6;
  LODWORD(Counter) = a3;
  uint64_t v17 = type metadata accessor for OSSignpostID();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  float v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v21 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 40))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v23) {
      double v21 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(unsigned char *)(a1 + 16) = 1;
LABEL_11:
    double v9 = *(double *)a1;
    double v10 = *(double *)(a1 + 8);
    if (*(unsigned char *)(a4 + 32)) {
      goto LABEL_37;
    }
    double v8 = *(double *)(a4 + 16);
    double v7 = *(double *)(a4 + 24);
    if (v9 == v8 && v10 == v7) {
      goto LABEL_37;
    }
    uint64_t v78 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v26 = swift_retain();
    uint64_t v27 = specialized find<A>(_:key:)(v26);
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 72);
      swift_retain();
      swift_release();
      if (v28) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v29 = swift_retain();
    char v30 = specialized closure #1 in PropertyList.subscript.getter(v29);
    swift_release();
    if ((v30 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      uint64_t v28 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 16) == 1) {
    goto LABEL_11;
  }
  uint64_t v24 = *(void *)(a4 + 40);
  if (!v24) {
    return;
  }
  while (1)
  {
    v90[0] = *(float64x2_t *)a1;
    swift_retain();
    LOBYTE(v87) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v90, Counter, v21) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v54 = *(double *)(v24 + 56);
      uint64_t v81 = *(const char **)(v24 + 64);
      uint64_t v55 = *(unsigned int *)(v24 + 88);
      unsigned __int8 v56 = *(unsigned char *)(v24 + 92);
      float64x2_t v57 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      id v58 = static CoreGlue.shared;
      LOBYTE(v85) = v56;
      v57(&v81, v55 | ((unint64_t)v56 << 32), v54);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    char v43 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v44 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      uint64_t v53 = swift_release();
      if (*(void *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v53);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(void *)(a4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
LABEL_53:
      *(float64x2_t *)a1 = v90[0];
      *(unsigned char *)(a1 + 16) = 1;
      return;
    }
    uint64_t v78 = a7;
    uint64_t v77 = v18;
    swift_retain();
    id v45 = v44;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    int v47 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      id v48 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v49 = MEMORY[0x263F8DA20];
      *(void *)(v18 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v18 + 64) = v49;
      *(void *)(v18 + 32) = Counter;
      int v50 = AGGraphGetCurrentAttribute();
      if (v50 != v47)
      {
        uint64_t v51 = MEMORY[0x263F8E960];
        *(void *)(v18 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v18 + 104) = v51;
        *(_DWORD *)(v18 + 72) = v50;
        *(void *)(v18 + 136) = MEMORY[0x263F8D310];
        *(void *)(v18 + 144) = lazy protocol witness table accessor for type String and conformance String();
        uint64_t v52 = v78;
        *(void *)(v18 + 112) = v79;
        *(void *)(v18 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v52;
        char v86 = v43;
        uint64_t v84 = _signpostLog;
        char v85 = &dword_245728000;
        float64x2_t v87 = "AnimationState";
        uint64_t v88 = 14;
        char v89 = 2;
        uint64_t v81 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v82 = 37;
        char v83 = 2;
        uint64_t v80 = v18;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v77 + 8))(v20, v17);
        uint64_t v53 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 40)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    uint64_t v28 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    double v8 = v9 - v8;
    double v7 = v10 - v7;
    double v21 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 40)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v59 = swift_retain();
    uint64_t v60 = specialized AnimatorState.init(animation:interval:at:in:)(v59, v8, v7, v21);
    swift_retain();
    int v61 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    int v75 = v61;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v62 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v76 = v28;
      uint64_t v77 = v18;
      swift_retain();
      id v63 = v62;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_2461BE2B0;
      int v65 = AGGraphGetCurrentAttribute();
      int v74 = *MEMORY[0x263F288F8];
      if (v65 == v74) {
        goto LABEL_71;
      }
      id v66 = (id)AGGraphGetAttributeGraph();
      uint64_t v67 = AGGraphGetCounter();

      uint64_t v68 = MEMORY[0x263F8DA20];
      *(void *)(v64 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v64 + 64) = v68;
      *(void *)(v64 + 32) = v67;
      int v69 = AGGraphGetCurrentAttribute();
      if (v69 == v74) {
        goto LABEL_72;
      }
      uint64_t v70 = MEMORY[0x263F8E960];
      *(void *)(v64 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v64 + 104) = v70;
      *(_DWORD *)(v64 + 72) = v69;
      *(void *)(v64 + 136) = MEMORY[0x263F8D310];
      *(void *)(v64 + 144) = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v71 = v78;
      *(void *)(v64 + 112) = v79;
      *(void *)(v64 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v71;
      LOBYTE(v8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v75;
      *(void *)&v90[0].f64[0] = &dword_245728000;
      uint64_t v84 = v64;
      char v85 = (int *)_signpostLog;
      float64x2_t v87 = "AnimationState";
      uint64_t v88 = 14;
      char v89 = 2;
      uint64_t v81 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v82 = 39;
      char v83 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v72 = v77;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v20, v17);
      uint64_t v18 = v72;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v60;
    if (v60)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    a7 = v78;
LABEL_37:
    *(double *)(a4 + 16) = v9;
    *(double *)(a4 + 24) = v10;
    *(unsigned char *)(a4 + 32) = 0;
    uint64_t v24 = *(void *)(a4 + 40);
    if (!v24) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v87) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v28, v8, v7, v21);
  swift_retain();
  int v31 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  int v75 = v31;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  float v32 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  uint64_t v76 = v28;
  uint64_t v77 = v18;
  swift_retain();
  id v33 = v32;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_2461BE2B0;
  int v35 = AGGraphGetCurrentAttribute();
  int v74 = *MEMORY[0x263F288F8];
  if (v35 != v74)
  {
    id v36 = (id)AGGraphGetAttributeGraph();
    uint64_t v37 = AGGraphGetCounter();

    uint64_t v38 = MEMORY[0x263F8DA20];
    *(void *)(v34 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v34 + 64) = v38;
    *(void *)(v34 + 32) = v37;
    int v39 = AGGraphGetCurrentAttribute();
    if (v39 == v74) {
      goto LABEL_70;
    }
    uint64_t v40 = MEMORY[0x263F8E960];
    *(void *)(v34 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v34 + 104) = v40;
    *(_DWORD *)(v34 + 72) = v39;
    *(void *)(v34 + 136) = MEMORY[0x263F8D310];
    *(void *)(v34 + 144) = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v41 = v78;
    *(void *)(v34 + 112) = v79;
    *(void *)(v34 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v41;
    LOBYTE(v8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v75;
    *(void *)&v90[0].f64[0] = &dword_245728000;
    uint64_t v84 = v34;
    char v85 = (int *)_signpostLog;
    float64x2_t v87 = "AnimationState";
    uint64_t v88 = 14;
    char v89 = 2;
    uint64_t v81 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v82 = 39;
    char v83 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v42 = v77;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v20, v17);
    uint64_t v18 = v42;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 40)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v97 = a3;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v93 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  float32x4_t v95 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    double v12 = -*(double *)&static Time.infinity;
    if (*(void *)(a4 + 64))
    {
      uint64_t Value = (double *)AGGraphGetValue();
      if (v14) {
        double v12 = *Value;
      }
    }
    uint64_t result = (_DWORD *)AGGraphGetValue();
    uint64_t v16 = &unk_26B0F3000;
    if (*(_DWORD *)(a4 + 72) == *result >> 1)
    {
      if (*(unsigned char *)(a1 + 48) != 1)
      {
        uint64_t v17 = *(void *)(a4 + 64);
        if (v17) {
          goto LABEL_57;
        }
        return result;
      }
    }
    else
    {
      specialized AnimatableAttributeHelper.reset()();
      *(unsigned char *)(a1 + 48) = 1;
    }
    float64_t v18 = *(double *)a1;
    char v19 = *(unsigned char *)(a1 + 8);
    double v20 = *(double *)(a1 + 16);
    double v21 = *(double *)(a1 + 24);
    double v22 = *(double *)(a1 + 32);
    double v23 = *(double *)(a1 + 40);
    if (one-time initialization token for v5 != -1) {
      swift_once();
    }
    unsigned int v24 = static Semantics.v5;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      uint64_t v16 = (void *)&unk_26B0F3000;
      if (dyld_program_sdk_at_least()) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v16 = (void *)&unk_26B0F3000;
      if (static Semantics.forced >= v24)
      {
LABEL_18:
        v111.f64[0] = v18;
        LOBYTE(v111.f64[1]) = v19;
        swift_bridgeObjectRetain();
        v115.stops._rawuint64_t Value = &v111;
        ResolvedGradientVector.init(_:)(v115);
        float64_t v26 = v113.f64[0];
        int v25 = LOBYTE(v113.f64[1]);
        goto LABEL_19;
      }
    }
    int v25 = 0;
    float64_t v26 = MEMORY[0x263F8EE78];
LABEL_19:
    double v27 = v20 * 128.0;
    double v6 = v21 * 128.0;
    double v5 = v22 * 128.0;
    float64_t v28 = *(double *)(a4 + 48);
    double v4 = v23 * 128.0;
    v96.f64[0] = v20 * 128.0;
    if (v28 == 0.0) {
      goto LABEL_56;
    }
    int v29 = *(unsigned __int8 *)(a4 + 56);
    double v30 = *(double *)(a4 + 32);
    double v31 = *(double *)(a4 + 40);
    double v33 = *(double *)(a4 + 16);
    double v32 = *(double *)(a4 + 24);
    if (v27 == v33
      && v6 == v32
      && v5 == v30
      && v4 == v31
      && (specialized static Array<A>.== infix(_:_:)(*(void *)&v26, *(void *)&v28) & 1) != 0
      && v25 == v29)
    {
      goto LABEL_56;
    }
    LODWORD(v94.f64[0]) = v25;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v34 = swift_retain();
    uint64_t v35 = specialized find<A>(_:key:)(v34);
    if (v35)
    {
      uint64_t v36 = *(void *)(v35 + 72);
      swift_retain();
      swift_release();
      if (v36) {
        goto LABEL_36;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v37 = swift_retain();
    char v38 = specialized closure #1 in PropertyList.subscript.getter(v37);
    swift_release();
    if (v38)
    {
      if (one-time initialization token for velocityTracking != -1) {
        swift_once();
      }
      uint64_t v36 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2)
      {
        swift_release();
        goto LABEL_55;
      }
      swift_retain();
      uint64_t v36 = a2;
    }
LABEL_36:
    *(void *)&v92.f64[0] = v10;
    *(float64_t *)&v112[16] = v26;
    v112[24] = LOBYTE(v94.f64[0]);
    v111.f64[0] = v96.f64[0] - v33;
    v111.f64[1] = v6 - v32;
    *(double *)uint64_t v112 = v5 - v30;
    *(double *)&v112[8] = v4 - v31;
    v113.f64[0] = v28;
    LOBYTE(v113.f64[1]) = v29;
    swift_bridgeObjectRetain();
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v113, -1.0);
    double v12 = *(double *)AGGraphGetValue();
    if (!*(void *)(a4 + 64))
    {
      float64x2_t v113 = v111;
      *(_OWORD *)uint64_t v114 = *(_OWORD *)v112;
      *(_OWORD *)&v114[9] = *(_OWORD *)&v112[9];
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>();
      swift_allocObject();
      swift_retain();
      outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v113);
      uint64_t v50 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v50, &v113, v12);
      swift_retain();
      LODWORD(v51) = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
      {
        swift_release();
        uint64_t v10 = *(void *)&v92.f64[0];
        goto LABEL_85;
      }
      if (one-time initialization token for _signpostLog == -1) {
        goto LABEL_46;
      }
      goto LABEL_90;
    }
    float64x2_t v113 = v111;
    *(_OWORD *)uint64_t v114 = *(_OWORD *)v112;
    *(_OWORD *)&v114[9] = *(_OWORD *)&v112[9];
    swift_retain();
    LOBYTE(v108) = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v36, &v113, v12);
    swift_retain();
    int v39 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v40 = (void *)_signpostLog;
      char v41 = OS_os_log.signpostsEnabled.getter();
      uint64_t v10 = *(void *)&v92.f64[0];
      if (v41)
      {
        int v90 = v39;
        swift_retain();
        id v42 = v40;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v43 = swift_allocObject();
        *(_OWORD *)(v43 + 16) = xmmword_2461BE2B0;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        int v91 = *MEMORY[0x263F288F8];
        if (result == v91)
        {
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          return result;
        }
        id v44 = (id)AGGraphGetAttributeGraph();
        uint64_t Counter = AGGraphGetCounter();

        uint64_t v46 = MEMORY[0x263F8DA20];
        *(void *)(v43 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v43 + 64) = v46;
        *(void *)(v43 + 32) = Counter;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        if (result == v91) {
          goto LABEL_92;
        }
        uint64_t v47 = MEMORY[0x263F8E960];
        *(void *)(v43 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v43 + 104) = v47;
        *(_DWORD *)(v43 + 72) = result;
        *(void *)(v43 + 136) = MEMORY[0x263F8D310];
        *(void *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v43 + 112) = 0x746E6961505FLL;
        *(void *)(v43 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
        LOBYTE(v98) = v90;
        float v99 = &dword_245728000;
        double v103 = (int *)_signpostLog;
        double v108 = "AnimationState";
        uint64_t v109 = 14;
        char v110 = 2;
        double v105 = "Animation: (%p) [%d] %{public}@ updated";
        uint64_t v106 = 39;
        char v107 = 2;
        uint64_t v102 = v43;
        id v48 = v95;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        uint64_t v49 = v48;
        uint64_t v10 = *(void *)&v92.f64[0];
        (*(void (**)(char *, void))(v93 + 8))(v49, *(void *)&v92.f64[0]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release_n();
      }
    }
    else
    {
      swift_release_n();
      uint64_t v10 = *(void *)&v92.f64[0];
    }
    a2 = *(void *)(a4 + 64);
    if (a2) {
      break;
    }
LABEL_86:
    __break(1u);
  }
  while (1)
  {
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_55:
    swift_bridgeObjectRelease();
    uint64_t v16 = &unk_26B0F3000;
    LOBYTE(v25) = LOBYTE(v94.f64[0]);
LABEL_56:
    uint64_t result = (_DWORD *)swift_bridgeObjectRelease();
    *(float64_t *)(a4 + 16) = v96.f64[0];
    *(double *)(a4 + 24) = v6;
    *(double *)(a4 + 32) = v5;
    *(double *)(a4 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v4;
    *(float64_t *)(a4 + 48) = v26;
    *(unsigned char *)(a4 + 56) = v25;
    uint64_t v17 = *(void *)(a4 + 64);
    if (!v17) {
      return result;
    }
LABEL_57:
    uint64_t v62 = *(const char **)a1;
    char v63 = *(unsigned char *)(a1 + 8);
    float64x2_t v96 = *(float64x2_t *)(a1 + 16);
    float64x2_t v94 = *(float64x2_t *)(a1 + 32);
    uint64_t v64 = v16[485];
    swift_retain();
    if (v64 != -1) {
      swift_once();
    }
    float64x2_t v65 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    unsigned int v66 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      float64x2_t v92 = v65;
      swift_once();
      float64x2_t v65 = v92;
    }
    float64x2_t v96 = vmulq_f64(v96, v65);
    float64x2_t v94 = vmulq_f64(v94, v65);
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        goto LABEL_63;
      }
    }
    else if (static Semantics.forced < v66)
    {
LABEL_63:
      char v67 = 0;
      float64_t v68 = MEMORY[0x263F8EE78];
      goto LABEL_66;
    }
    double v105 = v62;
    LOBYTE(v106) = v63;
    swift_bridgeObjectRetain();
    v116.stops._rawuint64_t Value = &v105;
    ResolvedGradientVector.init(_:)(v116);
    float64_t v68 = v111.f64[0];
    char v67 = LOBYTE(v111.f64[1]);
LABEL_66:
    float64x2_t v111 = v96;
    *(float64x2_t *)uint64_t v112 = v94;
    *(float64_t *)&v112[16] = v68;
    v112[24] = v67;
    LOBYTE(v105) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v111, v12) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v79 = *(double *)(v17 + 88);
      float v99 = *(int **)(v17 + 96);
      uint64_t v80 = *(unsigned int *)(v17 + 148);
      unsigned __int8 v81 = *(unsigned char *)(v17 + 152);
      uint64_t v82 = *(void (**)(int **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                    + 0x58);
      char v83 = static CoreGlue.shared;
      LOBYTE(v103) = v81;
      v82(&v99, v80 | ((unint64_t)v81 << 32), v79);

      goto LABEL_81;
    }
    swift_retain();
    a2 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      break;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int v69 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
      break;
    }
    swift_retain();
    id v70 = v69;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    *(void *)&float64_t v26 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == LODWORD(v26))
    {
      __break(1u);
    }
    else
    {
      id v72 = (id)AGGraphGetAttributeGraph();
      uint64_t v73 = AGGraphGetCounter();

      uint64_t v74 = MEMORY[0x263F8DA20];
      *(void *)(v51 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v51 + 64) = v74;
      *(void *)(v51 + 32) = v73;
      int v75 = AGGraphGetCurrentAttribute();
      if (v75 != LODWORD(v26))
      {
        uint64_t v76 = MEMORY[0x263F8E960];
        *(void *)(v51 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v51 + 104) = v76;
        *(_DWORD *)(v51 + 72) = v75;
        *(void *)(v51 + 136) = MEMORY[0x263F8D310];
        *(void *)(v51 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v51 + 112) = 0x746E6961505FLL;
        *(void *)(v51 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
        char v104 = a2;
        double v103 = &dword_245728000;
        uint64_t v102 = _signpostLog;
        double v105 = "AnimationState";
        uint64_t v106 = 14;
        char v107 = 2;
        float v99 = (int *)"Animation: (%p) [%d] %{public}@ ended";
        uint64_t v100 = 37;
        char v101 = 2;
        uint64_t v98 = v51;
        uint64_t v77 = v95;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v93 + 8))(v77, v10);
        uint64_t v78 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 64)) {
          goto LABEL_79;
        }
        goto LABEL_80;
      }
    }
    __break(1u);
LABEL_90:
    swift_once();
LABEL_46:
    uint64_t v52 = (void *)_signpostLog;
    char v53 = OS_os_log.signpostsEnabled.getter();
    uint64_t v10 = *(void *)&v92.f64[0];
    if (v53)
    {
      int v90 = v51;
      swift_retain();
      id v54 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = xmmword_2461BE2B0;
      uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
      int v91 = *MEMORY[0x263F288F8];
      if (result == v91) {
        goto LABEL_93;
      }
      id v56 = (id)AGGraphGetAttributeGraph();
      uint64_t v57 = AGGraphGetCounter();

      uint64_t v58 = MEMORY[0x263F8DA20];
      *(void *)(v55 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v55 + 64) = v58;
      *(void *)(v55 + 32) = v57;
      uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
      if (result == v91) {
        goto LABEL_94;
      }
      uint64_t v59 = MEMORY[0x263F8E960];
      *(void *)(v55 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v55 + 104) = v59;
      *(_DWORD *)(v55 + 72) = result;
      *(void *)(v55 + 136) = MEMORY[0x263F8D310];
      *(void *)(v55 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v55 + 112) = 0x746E6961505FLL;
      *(void *)(v55 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE600000000000000;
      LOBYTE(v98) = v90;
      float v99 = &dword_245728000;
      double v103 = (int *)_signpostLog;
      double v108 = "AnimationState";
      uint64_t v109 = 14;
      char v110 = 2;
      double v105 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v106 = 39;
      char v107 = 2;
      uint64_t v102 = v55;
      uint64_t v60 = v95;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      int v61 = v60;
      uint64_t v10 = *(void *)&v92.f64[0];
      (*(void (**)(char *, void))(v93 + 8))(v61, *(void *)&v92.f64[0]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
LABEL_85:
    swift_release();
    *(void *)(a4 + 64) = a2;
    if (!a2) {
      goto LABEL_86;
    }
  }
  uint64_t v78 = swift_release();
  if (*(void *)(a4 + 64))
  {
LABEL_79:
    specialized AnimatorState.removeListeners()(v78);
    swift_release();
  }
LABEL_80:
  *(void *)(a4 + 64) = 0;
LABEL_81:
  uint64_t v84 = *(int **)&v112[16];
  char v85 = v112[24];
  float64x2_t v86 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v87 = vmulq_f64(v111, v86);
  float64x2_t v88 = vmulq_f64(*(float64x2_t *)v112, v86);
  *(float64x2_t *)(a1 + 16) = v87;
  *(float64x2_t *)(a1 + 32) = v88;
  float v99 = v84;
  LOBYTE(v10specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v85;
  swift_bridgeObjectRetain();
  ResolvedGradient.animatableData.setter((uint64_t *)&v99);
  swift_bridgeObjectRelease();
  uint64_t result = (_DWORD *)swift_release();
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

unsigned int *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  LODWORD(v251) = a3;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v241 = *(void *)(v7 - 8);
  uint64_t v242 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v249 = (uint64_t)v231 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    double v9 = -*(double *)&static Time.infinity;
    if (a4[15])
    {
      uint64_t Value = (double *)AGGraphGetValue();
      if (v11) {
        double v9 = *Value;
      }
    }
    uint64_t result = (unsigned int *)AGGraphGetValue();
    unsigned int v13 = *result;
    int v14 = *((_DWORD *)a4 + 32);
    uint64_t v260 = a1;
    long long v262 = a4;
    if (v14 != v13 >> 1)
    {
      specialized AnimatableAttributeHelper.reset()();
      *(unsigned char *)(a1 + 112) = 1;
      double v250 = (unsigned char *)(a1 + 112);
LABEL_9:
      uint64_t v238 = a2;
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(void **)(a1 + 16);
      uint64_t v17 = *(void **)(a1 + 24);
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v22 = *(void *)(a1 + 64);
      uint64_t v23 = *(void *)(a1 + 72);
      char v24 = *(unsigned char *)(a1 + 80);
      float v25 = *(float *)(a1 + 84);
      uint64_t v26 = *(void *)(a1 + 104);
      v285.i64[0] = *(void *)a1;
      v285.i64[1] = v15;
      *(void *)&long long v286 = v16;
      *((void *)&v286 + 1) = v17;
      *(void *)&long long v287 = v18;
      *((void *)&v287 + 1) = v19;
      *(void *)&long long v288 = v20;
      *((void *)&v288 + 1) = v21;
      *(void *)&long long v289 = v22;
      *((void *)&v289 + 1) = v23;
      LOBYTE(v29specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v24;
      outlined copy of _ShapeStyle_Pack.Fill((id)v285.i64[0], v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
      _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v285, (uint64_t)&v292);
      v261.i64[0] = v292.i64[1];
      *(void *)&long long v258 = *((void *)&v293 + 1);
      *(void *)&long long v259 = v293;
      *(void *)&long long v257 = v294;
      uint64_t v255 = v295;
      *(void *)&long long v256 = *((void *)&v294 + 1);
      uint64_t v253 = v296;
      uint64_t v254 = *((void *)&v295 + 1);
      uint64_t v252 = *((void *)&v296 + 1);
      uint64_t v263 = v292.i64[0];
      v264.i64[0] = v297;
      int64_t v27 = *(void *)(v26 + 16);
      uint64_t v28 = MEMORY[0x263F8EE78];
      if (v27)
      {
        v285.i64[0] = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
        int v29 = (unsigned __int8 *)(v26 + 96);
        uint64_t v28 = v285.i64[0];
        do
        {
          char v30 = *(v29 - 19);
          int v31 = *((_DWORD *)v29 - 4);
          if (v30)
          {
            unint64_t v32 = 0;
            unint64_t v33 = 0;
            uint64_t v34 = 0;
            int8x16_t v35 = 0uLL;
          }
          else
          {
            uint64_t v36 = v28;
            int8x16_t v268 = *((int8x16_t *)v29 - 3);
            uint64_t v34 = *((void *)v29 - 4);
            uint64_t v37 = *((void *)v29 - 1);
            unsigned __int8 v38 = *v29;
            float v40 = *((float *)v29 - 16);
            float v39 = *((float *)v29 - 15);
            float v41 = *((float *)v29 - 14);
            float v42 = *((float *)v29 - 13);
            outlined copy of GraphicsBlendMode?(v37, *v29);
            if (one-time initialization token for legacyInterpolation != -1) {
              swift_once();
            }
            swift_beginAccess();
            if (static Color.Resolved.legacyInterpolation)
            {
              outlined consume of GraphicsBlendMode?(v37, v38);
            }
            else
            {
              *(float *)v44.i32 = (float)(v41 * 0.051446) + (float)((float)(v40 * 0.41222) + (float)(v39 * 0.53633));
              *(float *)v43.i32 = (float)(v41 * 0.1074) + (float)((float)(v40 * 0.2119) + (float)(v39 * 0.6807));
              int8x16_t v265 = v44;
              int8x16_t v266 = v43;
              *(float *)v43.i32 = (float)(v41 * 0.62998) + (float)((float)(v40 * 0.088302) + (float)(v39 * 0.28172));
              int64x2_t v267 = (int64x2_t)v43;
              *(float *)v45.i32 = powf(fabsf(*(float *)v44.i32), 0.33333);
              v46.i64[0] = 0x8000000080000000;
              v46.i64[1] = 0x8000000080000000;
              int8x16_t v265 = vbslq_s8(v46, v45, v265);
              *(float *)v47.i32 = powf(fabsf(*(float *)v266.i32), 0.33333);
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              int8x16_t v266 = vbslq_s8(v48, v47, v266);
              *(float *)v49.i32 = powf(fabsf(*(float *)v267.i32), 0.33333);
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              int64x2_t v267 = (int64x2_t)vbslq_s8(v50, v49, (int8x16_t)v267);
              outlined consume of GraphicsBlendMode?(v37, v38);
              float v40 = *(float *)v265.i32 * v42;
              float v39 = *(float *)v266.i32 * v42;
              float v41 = *(float *)v267.i32 * v42;
            }
            unint64_t v32 = COERCE_UNSIGNED_INT(v40 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v39 * 128.0) << 32);
            unint64_t v33 = COERCE_UNSIGNED_INT(v41 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v42 * 128.0) << 32);
            uint64_t v28 = v36;
            int8x16_t v35 = v268;
          }
          v285.i64[0] = v28;
          unint64_t v52 = *(void *)(v28 + 16);
          unint64_t v51 = *(void *)(v28 + 24);
          if (v52 >= v51 >> 1)
          {
            int8x16_t v268 = v35;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
            int8x16_t v35 = v268;
            uint64_t v28 = v285.i64[0];
          }
          *(void *)(v28 + 16) = v52 + 1;
          uint64_t v53 = v28 + 56 * v52;
          *(_DWORD *)(v53 + 32) = v31;
          v29 += 72;
          *(void *)(v53 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v32;
          *(void *)(v53 + 48) = v33;
          *(int8x16_t *)(v53 + 56) = v35;
          *(void *)(v53 + 72) = v34;
          *(unsigned char *)(v53 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v30;
          --v27;
        }
        while (v27);
        a1 = v260;
      }
      a4 = v262;
      uint64_t v54 = v262[14];
      if (!v54)
      {
LABEL_79:
        uint64_t result = (unsigned int *)outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(a4[2], a4[3], a4[4], a4[5], a4[6], a4[7], a4[8], a4[9], a4[10], a4[11], *((_OWORD *)a4 + 6), a4[13], a4[14]);
        uint64_t v127 = v261.i64[0];
        a4[2] = v263;
        a4[3] = v127;
        uint64_t v128 = v258;
        a4[4] = v259;
        a4[5] = v128;
        uint64_t v129 = v256;
        a4[6] = v257;
        a4[7] = v129;
        uint64_t v130 = v254;
        a4[8] = v255;
        a4[9] = v130;
        uint64_t v131 = v252;
        a4[10] = v253;
        a4[11] = v131;
        a4[12] = v264.i64[0];
        a4[13] = LODWORD(v25);
        a4[14] = v28;
        goto LABEL_80;
      }
      uint64_t v55 = v262[2];
      uint64_t v56 = v262[3];
      uint64_t v58 = v262[4];
      uint64_t v57 = v262[5];
      uint64_t v59 = v262[6];
      uint64_t v60 = v262[7];
      uint64_t v61 = v262[8];
      uint64_t v62 = v262[9];
      uint64_t v64 = v262[10];
      uint64_t v63 = v262[11];
      uint64_t v65 = v262[12];
      uint64_t v66 = v262[13];
      float v67 = *(float *)&v66;
      v292.i64[0] = v263;
      v292.i64[1] = v261.i64[0];
      *(void *)&long long v293 = v259;
      *((void *)&v293 + 1) = v258;
      *(void *)&long long v294 = v257;
      *((void *)&v294 + 1) = v256;
      *(void *)&long long v295 = v255;
      *((void *)&v295 + 1) = v254;
      *(void *)&long long v296 = v253;
      *((void *)&v296 + 1) = v252;
      LOBYTE(v297) = v264.i8[0];
      *((float *)&v297 + 2) = v25;
      double v298 = (void *)v28;
      v285.i64[0] = v55;
      v285.i64[1] = v56;
      *(void *)&long long v286 = v58;
      *((void *)&v286 + 1) = v57;
      *(void *)&long long v287 = v59;
      *((void *)&v287 + 1) = v60;
      *(void *)&long long v288 = v61;
      *((void *)&v288 + 1) = v62;
      *(void *)&long long v289 = v64;
      *((void *)&v289 + 1) = v63;
      LOBYTE(v29specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v65;
      DWORD2(v29specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v66;
      CGFloat v291 = (void *)v54;
      uint64_t v245 = v66;
      uint64_t v246 = v65;
      uint64_t v247 = v63;
      uint64_t v244 = v64;
      v268.i64[0] = v55;
      uint64_t v248 = v59;
      v265.i64[0] = v61;
      v266.i64[0] = v62;
      outlined copy of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v55, v56, v58, v57, v59, v60, v61, v62, v64, v63, v65, v66, v54);
      if ((specialized static _ShapeStyle_Pack.Fill.AnimatableData.== infix(_:_:)((uint64_t)&v292, (uint64_t)&v285) & 1) != 0
        && v25 == v67
        && (specialized static Array<A>.== infix(_:_:)(v28, v54) & 1) != 0)
      {
        outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v268.i64[0], v56, v58, v57, v248, v60, v265.i64[0], v266.i64[0], v244, v247, v246, v245, v54);
        goto LABEL_79;
      }
      uint64_t v239 = v60;
      uint64_t v68 = v58;
      v267.i64[0] = v28;
      AGGraphClearUpdate();
      uint64_t v69 = *(void *)AGGraphGetValue();
      swift_retain();
      AGGraphSetUpdate();
      uint64_t v70 = swift_retain();
      uint64_t v71 = specialized find<A>(_:key:)(v70);
      uint64_t v243 = v69;
      uint64_t v240 = v57;
      uint64_t v237 = v68;
      if (v71)
      {
        uint64_t v72 = *(void *)(v71 + 72);
        swift_retain();
        swift_release();
        uint64_t v73 = (void *)v267.i64[0];
        uint64_t v74 = v68;
        uint64_t v75 = v56;
        uint64_t v76 = v244;
        if (v72) {
          goto LABEL_39;
        }
      }
      else
      {
        swift_release();
        uint64_t v75 = v56;
        uint64_t v76 = v244;
      }
      uint64_t v77 = v76;
      uint64_t v78 = v268.i64[0];
      uint64_t v79 = swift_retain();
      char v80 = specialized closure #1 in PropertyList.subscript.getter(v79);
      swift_release();
      if (v80)
      {
        if (one-time initialization token for velocityTracking != -1) {
          swift_once();
        }
        uint64_t v72 = static Animation.velocityTracking;
        swift_retain();
      }
      else
      {
        if (!v238)
        {
          outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v78, v75, v237, v240, v248, v239, v265.i64[0], v266.i64[0], v77, v247, v246, v245, v54);
          swift_release();
LABEL_78:
          uint64_t v28 = v267.i64[0];
          goto LABEL_79;
        }
        uint64_t v72 = swift_retain();
      }
      uint64_t v73 = (void *)v267.i64[0];
      uint64_t v57 = v240;
      uint64_t v74 = v237;
      uint64_t v76 = v77;
LABEL_39:
      v285.i64[0] = v263;
      v285.i64[1] = v261.i64[0];
      *(void *)&long long v286 = v259;
      *((void *)&v286 + 1) = v258;
      *(void *)&long long v287 = v257;
      *((void *)&v287 + 1) = v256;
      *(void *)&long long v288 = v255;
      *((void *)&v288 + 1) = v254;
      *(void *)&long long v289 = v253;
      *((void *)&v289 + 1) = v252;
      LOBYTE(v29specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v264.i8[0];
      *((float *)&v290 + 2) = v25;
      CGFloat v291 = v73;
      v292.i64[0] = v268.i64[0];
      v292.i64[1] = v75;
      *(void *)&long long v293 = v74;
      *((void *)&v293 + 1) = v57;
      *(void *)&long long v294 = v248;
      uint64_t v81 = v239;
      *((void *)&v294 + 1) = v239;
      *(void *)&long long v295 = v265.i64[0];
      *((void *)&v295 + 1) = v266.i64[0];
      *(void *)&long long v296 = v76;
      *((void *)&v296 + 1) = v247;
      LOBYTE(v297) = v246;
      DWORD2(v297) = v245;
      double v298 = (void *)v54;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v263, v261.i64[0], v259, v258, v257, v256, v255, v254, v253, v252, v264.i8[0]);
      swift_bridgeObjectRetain();
      specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)((uint64_t)&v285, (uint64_t)&v292);
      float v82 = v25 - v67;
      *((float *)&v290 + 2) = v82;
      if (*(void *)(v54 + 16) >= v73[2]) {
        a2 = v73[2];
      }
      else {
        a2 = *(void *)(v54 + 16);
      }
      if (a2)
      {
        uint64_t v73 = (void *)v267.i64[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew()(v267.i64[0]);
        }
        unint64_t v83 = 0;
        unint64_t v84 = 0;
        unint64_t v85 = v73[2];
        do
        {
          if (v84 >= v85) {
            goto LABEL_136;
          }
          int64x2_t v91 = *(int64x2_t *)(v54 + v83 + 40);
          float64x2_t v92 = *(float64x2_t *)(v54 + v83 + 56);
          double v93 = *(double *)(v54 + v83 + 72);
          char v94 = *(unsigned char *)(v54 + v83 + 80);
          float32x4_t v95 = &v73[v83 / 8];
          *(float *)&v73[v83 / 8 + 4] = *(float *)&v73[v83 / 8 + 4] - *(float *)(v54 + v83 + 32);
          if ((v94 & 1) == 0)
          {
            if (v95[10])
            {
              v95[5] = v91.i64[0];
              *((int8x16_t *)v95 + 3) = vextq_s8((int8x16_t)v91, (int8x16_t)v92, 8uLL);
              v95[8] = *(void *)&v92.f64[1];
              double v88 = v93;
            }
            else
            {
              int64x2_t v86 = *(int64x2_t *)(v95 + 5);
              float64x2_t v87 = *(float64x2_t *)(v95 + 7);
              double v88 = *((double *)v95 + 9) - v93;
              float32x2_t v89 = vsub_f32((float32x2_t)vmovn_s64(v86), (float32x2_t)vmovn_s64(v91));
              v90.i64[0] = v89.u32[0];
              v90.i64[1] = v89.u32[1];
              *(int8x16_t *)(v95 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v86, 0x20uLL), (float32x2_t)vshrn_n_s64(v91, 0x20uLL)), 0x20uLL), v90);
              *(float64x2_t *)(v95 + 7) = vsubq_f64(v87, v92);
            }
            *((double *)v95 + 9) = v88;
            *((unsigned char *)v95 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0;
          }
          ++v84;
          v83 += 56;
        }
        while (a2 != v84);
        CGFloat v291 = v73;
      }
      double v9 = *(double *)AGGraphGetValue();
      uint64_t v96 = a4[15];
      uint64_t v236 = v75;
      if (!v96)
      {
        uint64_t v111 = v285.i64[1];
        uint64_t v110 = v285.i64[0];
        uint64_t v116 = *((void *)&v286 + 1);
        uint64_t v112 = v286;
        uint64_t v234 = *((void *)&v287 + 1);
        uint64_t v235 = v287;
        uint64_t v232 = *((void *)&v288 + 1);
        uint64_t v233 = v288;
        uint64_t v238 = v72;
        long long v113 = v289;
        char v114 = v290;
        int64x2_t v292 = v285;
        long long v293 = v286;
        long long v294 = v287;
        long long v295 = v288;
        long long v296 = v289;
        LOBYTE(v297) = v290;
        *((float *)&v297 + 2) = v82;
        double v298 = v73;
        type metadata accessor for Slice<IndexSet>(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>, lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
        v231[1] = swift_allocObject();
        swift_retain();
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v110, v111, v112, v116, v235, v234, v233, v232, v113, *((uint64_t *)&v113 + 1), v114);
        swift_bridgeObjectRetain();
        uint64_t v115 = swift_retain();
        uint64_t v109 = specialized AnimatorState.init(animation:interval:at:in:)(v115, (uint64_t)&v292, v9);
        swift_retain();
        LOBYTE(v116) = static os_signpost_type_t.begin.getter();
        static os_signpost_type_t.event.getter();
        if (kdebug_is_enabled())
        {
          uint64_t v99 = v240;
          if (one-time initialization token for _signpostLog == -1) {
            goto LABEL_65;
          }
          goto LABEL_140;
        }
        goto LABEL_71;
      }
      long long v296 = v289;
      long long v297 = v290;
      double v298 = v291;
      int64x2_t v292 = v285;
      long long v293 = v286;
      long long v294 = v287;
      long long v295 = v288;
      swift_retain();
      v279.i8[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v72, (uint64_t)&v292, v9);
      swift_retain();
      char v97 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        char v98 = v97;
        uint64_t v99 = v240;
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v100 = (void *)_signpostLog;
        if (OS_os_log.signpostsEnabled.getter())
        {
          uint64_t v238 = v72;
          swift_retain();
          id v101 = v100;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v102 = swift_allocObject();
          *(_OWORD *)(v102 + 16) = xmmword_2461BE2B0;
          uint64_t result = (unsigned int *)AGGraphGetCurrentAttribute();
          int v103 = *MEMORY[0x263F288F8];
          if (result == *MEMORY[0x263F288F8])
          {
            __break(1u);
LABEL_142:
            __break(1u);
            goto LABEL_143;
          }
          id v104 = (id)AGGraphGetAttributeGraph();
          uint64_t Counter = AGGraphGetCounter();

          uint64_t v106 = MEMORY[0x263F8DA20];
          *(void *)(v102 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v102 + 64) = v106;
          *(void *)(v102 + 32) = Counter;
          uint64_t result = (unsigned int *)AGGraphGetCurrentAttribute();
          if (result == v103) {
            goto LABEL_142;
          }
          uint64_t v107 = MEMORY[0x263F8E960];
          *(void *)(v102 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v102 + 104) = v107;
          *(_DWORD *)(v102 + 72) = result;
          *(void *)(v102 + 136) = MEMORY[0x263F8D310];
          *(void *)(v102 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v102 + 112) = 0x656C797453;
          *(void *)(v102 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE500000000000000;
          LOBYTE(v269) = v98;
          uint64_t v273 = &dword_245728000;
          uint64_t v270 = v102;
          CGFloat v271 = (int *)_signpostLog;
          v279.i64[0] = (uint64_t)"AnimationState";
          v279.i64[1] = 14;
          LOBYTE(v28specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 2;
          Swift::Int v276 = "Animation: (%p) [%d] %{public}@ updated";
          uint64_t v277 = 39;
          char v278 = 2;
          uint64_t v108 = v249;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release_n();
          (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v108, v242);
          swift_bridgeObjectRelease();
          a4 = v262;
          uint64_t v81 = v239;
          uint64_t v99 = v240;
          uint64_t v109 = v262[15];
          if (!v109) {
            goto LABEL_70;
          }
LABEL_77:
          swift_retain();
          specialized AnimatorState.addListeners(transaction:)();
          swift_release();
          swift_release();
          swift_release();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v285.i64[0], v285.i64[1], v286, *((uint64_t *)&v286 + 1), v287, *((uint64_t *)&v287 + 1), v288, *((uint64_t *)&v288 + 1), v289, *((uint64_t *)&v289 + 1), v290);
          swift_bridgeObjectRelease();
          outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v268.i64[0], v236, v74, v99, v248, v81, v265.i64[0], v266.i64[0], v244, v247, v246, v245, v54);
          a1 = v260;
          goto LABEL_78;
        }
        swift_release_n();
        uint64_t v81 = v239;
        uint64_t v109 = a4[15];
        if (v109) {
          goto LABEL_77;
        }
      }
      else
      {
        swift_release_n();
        uint64_t v99 = v240;
        uint64_t v109 = a4[15];
        if (v109) {
          goto LABEL_77;
        }
      }
      do
      {
LABEL_70:
        __break(1u);
LABEL_71:
        swift_release();
        a4 = v262;
        uint64_t v81 = v239;
        uint64_t v99 = v240;
        uint64_t v74 = v237;
LABEL_76:
        swift_release();
        a4[15] = v109;
      }
      while (!v109);
      goto LABEL_77;
    }
    double v250 = (unsigned char *)(a1 + 112);
    if (*(unsigned char *)(a1 + 112) == 1) {
      goto LABEL_9;
    }
LABEL_80:
    uint64_t v263 = a4[15];
    if (!v263) {
      return result;
    }
    uint64_t v132 = *(void *)(a1 + 8);
    v267.i64[0] = *(void *)a1;
    v266.i64[0] = v132;
    uint64_t v133 = a1;
    v134 = *(void **)(a1 + 16);
    uint64_t v135 = *(void **)(v133 + 24);
    uint64_t v136 = *(void *)(v133 + 32);
    uint64_t v137 = *(void *)(v133 + 40);
    uint64_t v138 = *(void *)(v133 + 48);
    uint64_t v139 = *(void *)(v133 + 56);
    uint64_t v140 = *(void *)(v133 + 64);
    uint64_t v141 = *(void *)(v133 + 72);
    char v142 = *(unsigned char *)(v133 + 80);
    float v25 = *(float *)(v133 + 84);
    v268.i64[0] = *(void *)(v133 + 104);
    v285.i64[0] = v267.i64[0];
    v285.i64[1] = v132;
    *(void *)&long long v286 = v134;
    *((void *)&v286 + 1) = v135;
    *(void *)&long long v287 = v136;
    *((void *)&v287 + 1) = v137;
    *(void *)&long long v288 = v138;
    *((void *)&v288 + 1) = v139;
    *(void *)&long long v289 = v140;
    *((void *)&v289 + 1) = v141;
    LOBYTE(v29specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v142;
    swift_retain();
    uint64_t v143 = v139;
    uint64_t v144 = v268.i64[0];
    outlined copy of _ShapeStyle_Pack.Fill((id)v267.i64[0], v266.u8[0], v134, v135, v136, v137, v138, v143, v140, v141, v142);
    _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v285, (uint64_t)&v279);
    int64x2_t v145 = v279;
    long long v146 = v280;
    long long v147 = v281;
    long long v148 = v282;
    long long v149 = v283;
    unsigned __int8 v150 = v284;
    int64_t v151 = *(void *)(v144 + 16);
    uint64_t v116 = MEMORY[0x263F8EE78];
    if (v151)
    {
      LODWORD(v255) = v284;
      long long v256 = v283;
      long long v257 = v282;
      long long v258 = v281;
      long long v259 = v280;
      int64x2_t v261 = v279;
      v285.i64[0] = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v151, 0);
      CGRect v152 = (unsigned __int8 *)(v144 + 96);
      uint64_t v116 = v285.i64[0];
      do
      {
        char v153 = *(v152 - 19);
        int v154 = *((_DWORD *)v152 - 4);
        if (v153)
        {
          unint64_t v155 = 0;
          unint64_t v156 = 0;
          uint64_t v157 = 0;
          int8x16_t v158 = 0uLL;
        }
        else
        {
          int8x16_t v268 = *((int8x16_t *)v152 - 3);
          v267.i64[0] = *((void *)v152 - 4);
          uint64_t v159 = *((void *)v152 - 1);
          unsigned __int8 v160 = *v152;
          float v162 = *((float *)v152 - 16);
          float v161 = *((float *)v152 - 15);
          float v163 = *((float *)v152 - 14);
          float v164 = *((float *)v152 - 13);
          outlined copy of GraphicsBlendMode?(v159, *v152);
          if (one-time initialization token for legacyInterpolation != -1) {
            swift_once();
          }
          swift_beginAccess();
          if (static Color.Resolved.legacyInterpolation)
          {
            outlined consume of GraphicsBlendMode?(v159, v160);
          }
          else
          {
            *(float *)v166.i32 = (float)(v163 * 0.051446) + (float)((float)(v162 * 0.41222) + (float)(v161 * 0.53633));
            *(float *)v165.i32 = (float)(v163 * 0.1074) + (float)((float)(v162 * 0.2119) + (float)(v161 * 0.6807));
            int8x16_t v264 = v166;
            int8x16_t v265 = v165;
            *(float *)v165.i32 = (float)(v163 * 0.62998) + (float)((float)(v162 * 0.088302) + (float)(v161 * 0.28172));
            int8x16_t v266 = v165;
            *(float *)v167.i32 = powf(fabsf(*(float *)v166.i32), 0.33333);
            v168.i64[0] = 0x8000000080000000;
            v168.i64[1] = 0x8000000080000000;
            int8x16_t v264 = vbslq_s8(v168, v167, v264);
            *(float *)v169.i32 = powf(fabsf(*(float *)v265.i32), 0.33333);
            v170.i64[0] = 0x8000000080000000;
            v170.i64[1] = 0x8000000080000000;
            int8x16_t v265 = vbslq_s8(v170, v169, v265);
            *(float *)v171.i32 = powf(fabsf(*(float *)v266.i32), 0.33333);
            v172.i64[0] = 0x8000000080000000;
            v172.i64[1] = 0x8000000080000000;
            int8x16_t v266 = vbslq_s8(v172, v171, v266);
            outlined consume of GraphicsBlendMode?(v159, v160);
            float v162 = *(float *)v264.i32 * v164;
            float v161 = *(float *)v265.i32 * v164;
            float v163 = *(float *)v266.i32 * v164;
          }
          unint64_t v155 = COERCE_UNSIGNED_INT(v162 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v161 * 128.0) << 32);
          unint64_t v156 = COERCE_UNSIGNED_INT(v163 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v164 * 128.0) << 32);
          uint64_t v157 = v267.i64[0];
          int8x16_t v158 = v268;
        }
        v285.i64[0] = v116;
        unint64_t v174 = *(void *)(v116 + 16);
        unint64_t v173 = *(void *)(v116 + 24);
        if (v174 >= v173 >> 1)
        {
          uint64_t v176 = v157;
          int8x16_t v268 = v158;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v173 > 1, v174 + 1, 1);
          int8x16_t v158 = v268;
          uint64_t v157 = v176;
          uint64_t v116 = v285.i64[0];
        }
        *(void *)(v116 + 16) = v174 + 1;
        uint64_t v175 = v116 + 56 * v174;
        *(_DWORD *)(v175 + 32) = v154;
        v152 += 72;
        *(void *)(v175 + 4specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v155;
        *(void *)(v175 + 48) = v156;
        *(int8x16_t *)(v175 + 56) = v158;
        *(void *)(v175 + 72) = v157;
        *(unsigned char *)(v175 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v153;
        --v151;
      }
      while (v151);
      int64x2_t v145 = v261;
      long long v147 = v258;
      long long v146 = v259;
      long long v149 = v256;
      long long v148 = v257;
      unsigned __int8 v150 = v255;
    }
    int64x2_t v285 = v145;
    long long v286 = v146;
    long long v287 = v147;
    long long v288 = v148;
    long long v289 = v149;
    LOBYTE(v29specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v150;
    *((float *)&v290 + 2) = v25;
    CGFloat v291 = (void *)v116;
    v279.i8[0] = 0;
    char v177 = specialized AnimatorState.update(_:at:environment:)((uint64_t)&v285, v251, v9);
    uint64_t v54 = v260;
    if (v177)
    {
      swift_retain();
      uint64_t v99 = static os_signpost_type_t.end.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_106;
      }
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      CGFloat v178 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {
LABEL_106:
        swift_release();
LABEL_107:
        if (v262[15])
        {
          specialized AnimatorState.removeListeners()();
          swift_release();
        }
        v262[15] = 0;
        goto LABEL_110;
      }
      swift_retain();
      id v179 = v178;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v109 = swift_allocObject();
      *(_OWORD *)(v109 + 16) = xmmword_2461BE2B0;
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      int v181 = *MEMORY[0x263F288F8];
      if (CurrentAttribute != *MEMORY[0x263F288F8])
      {
        id v182 = (id)AGGraphGetAttributeGraph();
        uint64_t v183 = AGGraphGetCounter();

        uint64_t v184 = MEMORY[0x263F8DA20];
        *(void *)(v109 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v109 + 64) = v184;
        *(void *)(v109 + 32) = v183;
        int v185 = AGGraphGetCurrentAttribute();
        if (v185 == v181) {
          goto LABEL_139;
        }
        uint64_t v186 = MEMORY[0x263F8E960];
        *(void *)(v109 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v109 + 104) = v186;
        *(_DWORD *)(v109 + 72) = v185;
        *(void *)(v109 + 136) = MEMORY[0x263F8D310];
        *(void *)(v109 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v109 + 112) = 0x656C797453;
        *(void *)(v109 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE500000000000000;
        char v272 = v99;
        uint64_t v270 = _signpostLog;
        CGFloat v271 = &dword_245728000;
        v279.i64[0] = (uint64_t)"AnimationState";
        v279.i64[1] = 14;
        LOBYTE(v28specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 2;
        uint64_t v273 = (int *)"Animation: (%p) [%d] %{public}@ ended";
        uint64_t v274 = 37;
        char v275 = 2;
        uint64_t v269 = v109;
        uint64_t v187 = v249;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v187, v242);
        swift_bridgeObjectRelease();
        uint64_t v54 = v260;
        goto LABEL_107;
      }
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      swift_once();
LABEL_65:
      uint64_t v117 = (void *)_signpostLog;
      char v118 = OS_os_log.signpostsEnabled.getter();
      a4 = v262;
      uint64_t v74 = v237;
      if ((v118 & 1) == 0)
      {
        swift_release();
        uint64_t v81 = v239;
        goto LABEL_76;
      }
      swift_retain();
      id v119 = v117;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v120 = swift_allocObject();
      *(_OWORD *)(v120 + 16) = xmmword_2461BE2B0;
      uint64_t result = (unsigned int *)AGGraphGetCurrentAttribute();
      int v121 = *MEMORY[0x263F288F8];
      if (result != *MEMORY[0x263F288F8])
      {
        id v122 = (id)AGGraphGetAttributeGraph();
        uint64_t v123 = AGGraphGetCounter();

        uint64_t v124 = MEMORY[0x263F8DA20];
        *(void *)(v120 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v120 + 64) = v124;
        *(void *)(v120 + 32) = v123;
        uint64_t result = (unsigned int *)AGGraphGetCurrentAttribute();
        if (result != v121)
        {
          uint64_t v125 = MEMORY[0x263F8E960];
          *(void *)(v120 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v120 + 104) = v125;
          *(_DWORD *)(v120 + 72) = result;
          *(void *)(v120 + 136) = MEMORY[0x263F8D310];
          *(void *)(v120 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v120 + 112) = 0x656C797453;
          *(void *)(v120 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE500000000000000;
          LOBYTE(v269) = v116;
          uint64_t v273 = &dword_245728000;
          uint64_t v270 = v120;
          CGFloat v271 = (int *)_signpostLog;
          v279.i64[0] = (uint64_t)"AnimationState";
          v279.i64[1] = 14;
          LOBYTE(v28specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 2;
          Swift::Int v276 = "Animation: (%p) [%d] %{public}@ started";
          uint64_t v277 = 39;
          char v278 = 2;
          uint64_t v126 = v249;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v126, v242);
          swift_bridgeObjectRelease();
          a4 = v262;
          uint64_t v81 = v239;
          uint64_t v99 = v240;
          goto LABEL_76;
        }
        goto LABEL_144;
      }
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
      return result;
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    double v188 = *(double *)(v263 + 144);
    v279.i64[0] = *(void *)(v263 + 152);
    uint64_t v189 = *(unsigned int *)(v263 + 264);
    unsigned __int8 v190 = *(unsigned char *)(v263 + 268);
    CFIndex v191 = *(void (**)(int64x2_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                        + 0x58);
    uint64_t v192 = static CoreGlue.shared;
    LOBYTE(v271) = v190;
    v191(&v279, v189 | ((unint64_t)v190 << 32), v188);

    uint64_t v54 = v260;
LABEL_110:
    uint64_t v193 = *((void *)&v286 + 1);
    uint64_t v195 = *((void *)&v287 + 1);
    uint64_t v194 = v287;
    a2 = *((void *)&v288 + 1);
    uint64_t v196 = v288;
    uint64_t v197 = v289;
    int v198 = DWORD2(v290);
    v199 = v291;
    int64x2_t v279 = v285;
    long long v280 = v286;
    long long v281 = v287;
    long long v282 = v288;
    long long v283 = v289;
    unsigned __int8 v284 = v290;
    LODWORD(v257) = v290;
    uint64_t v255 = *((void *)&v289 + 1);
    *(void *)&long long v258 = v285.i64[1];
    *(void *)&long long v259 = v285.i64[0];
    *(void *)&long long v256 = v286;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v285.i64[0], v285.i64[1], v286, *((uint64_t *)&v286 + 1), v287, *((uint64_t *)&v287 + 1), v288, *((uint64_t *)&v288 + 1), v289, *((uint64_t *)&v289 + 1), v290);
    swift_bridgeObjectRetain();
    _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v54);
    *(_DWORD *)(v54 + 84) = v198;
    v200 = *(void **)(v54 + 104);
    unint64_t v201 = v200[2];
    CGFloat v202 = (void *)v199[2];
    if ((unint64_t)v202 < v201) {
      unint64_t v201 = v199[2];
    }
    if (!v201) {
      break;
    }
    v264.i64[0] = v201;
    uint64_t v248 = v197;
    uint64_t v249 = a2;
    uint64_t v251 = v196;
    uint64_t v252 = v195;
    uint64_t v253 = v194;
    uint64_t v254 = v193;
    swift_bridgeObjectRetain();
    uint64_t v203 = (uint64_t)v199;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v200 = specialized _ArrayBuffer._consumeAndCreateNew()(v200);
    }
    a1 = 0;
    uint64_t v204 = 0;
    a4 = 0;
    uint64_t v205 = v264.i64[0];
    long long v262 = v202;
    v261.i64[0] = v203;
    while (v202 != a4)
    {
      if ((unint64_t)a4 >= v200[2]) {
        goto LABEL_135;
      }
      int64x2_t v210 = *(int64x2_t *)(v203 + v204 + 40);
      int8x16_t v211 = *(int8x16_t *)(v203 + v204 + 56);
      uint64_t v206 = *(void *)(v203 + v204 + 72);
      char v212 = *(unsigned char *)(v203 + v204 + 80);
      double v213 = (int8x16_t *)((char *)v200 + a1);
      *(_DWORD *)((char *)v200 + a1 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = *(_DWORD *)(v203 + v204 + 32);
      int8x16_t v214 = 0uLL;
      if (*((unsigned char *)v200 + a1 + 77) & 1) != 0 || (v212)
      {
        uint64_t v206 = 0;
        uint64_t v207 = 0;
        char v208 = 1;
        int8x16_t v209 = 0uLL;
      }
      else
      {
        int8x16_t v268 = v211;
        uint64_t v215 = v213[4].u8[12];
        a2 = v213[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          int64x2_t v267 = v210;
          swift_once();
          int64x2_t v210 = v267;
        }
        *(float *)v211.i32 = *(float *)&v210.i32[1] * 0.0078125;
        *(float32x2_t *)v214.i8 = vmul_f32((float32x2_t)vmovn_s64(v210), (float32x2_t)0x3C0000003C000000);
        int64x2_t v267 = (int64x2_t)v214;
        *(float *)v214.i32 = *(float *)&v210.i32[3] * 0.0078125;
        int8x16_t v265 = v211;
        int8x16_t v266 = v214;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation)
        {
          uint64_t v203 = v261.i64[0];
          uint64_t v205 = v264.i64[0];
          float32x2_t v216 = *(float32x2_t *)v267.i8;
          int8x16_t v209 = v268;
          v217.i32[0] = v265.i32[0];
          __int32 v218 = v266.i32[0];
        }
        else
        {
          __int32 v218 = v266.i32[0];
          float v219 = *(float *)v267.i32;
          float32x2_t v220 = (float32x2_t)__PAIR64__(v267.u32[1], v265.u32[0]);
          uint64_t v205 = v264.i64[0];
          if (*(float *)v266.i32 != 0.0)
          {
            float v219 = *(float *)v267.i32 * (float)(1.0 / *(float *)v266.i32);
            float32x2_t v220 = vmul_n_f32((float32x2_t)__PAIR64__(v267.u32[1], v265.u32[0]), 1.0 / *(float *)v266.i32);
          }
          uint64_t v203 = v261.i64[0];
          float v221 = v219 * (float)(v219 * v219);
          float32x2_t v222 = vmul_f32(v220, vmul_f32(v220, v220));
          float32x2_t v223 = vmul_f32(v222, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v217.i32 = (float)(v223.f32[0] + (float)(v221 * -1.2684)) - v223.f32[1];
          float32x2_t v216 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v222, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v221), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v222.f32[0])));
          int8x16_t v209 = v268;
        }
        char v208 = 0;
        uint64_t v207 = a2 | (v215 << 32);
        v217.i32[1] = v218;
        v224.i64[0] = v216.u32[0];
        v224.i64[1] = v216.u32[1];
        int8x16_t v214 = vorrq_s8((int8x16_t)vshll_n_s32(v217, 0x20uLL), v224);
        CGFloat v202 = v262;
      }
      a4 = (void *)((char *)a4 + 1);
      v213[2] = v214;
      v213[3] = v209;
      v213[4].i64[0] = v206;
      v213[4].i32[2] = v207;
      v213[4].i8[12] = BYTE4(v207);
      v204 += 56;
      a1 += 72;
      v213[4].i8[13] = v208;
      if ((void *)v205 == a4)
      {
        swift_bridgeObjectRelease();
        uint64_t v225 = v255;
        uint64_t v197 = v248;
        uint64_t v194 = v253;
        uint64_t v193 = v254;
        uint64_t v196 = v251;
        uint64_t v195 = v252;
        a2 = v249;
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v259, v258, v256, v254, v253, v252, v251, v249, v248, v255, v257);
        swift_release();
        swift_bridgeObjectRelease();
        *(void *)(v260 + 104) = v200;
        uint64_t v226 = v256;
        uint64_t v227 = v258;
        uint64_t v228 = v259;
        char v229 = v257;
        goto LABEL_132;
      }
    }
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
  }
  uint64_t v225 = v255;
  uint64_t v230 = v256;
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v259, v258, v256, v193, v194, v195, v196, a2, v197, v255, v257);
  swift_release();
  swift_bridgeObjectRelease();
  char v229 = v257;
  uint64_t v228 = v259;
  uint64_t v227 = v258;
  uint64_t v226 = v230;
LABEL_132:
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v228, v227, v226, v193, v194, v195, v196, a2, v197, v225, v229);
  uint64_t result = (unsigned int *)swift_bridgeObjectRelease();
  *double v250 = 1;
  return result;
}

unsigned int *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  LODWORD(v116) = a3;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v110 = *(void *)(v7 - 8);
  uint64_t v111 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v114 = (uint64_t)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
LABEL_67:
  swift_once();
LABEL_2:
  double v9 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 104))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v11) {
      double v9 = *Value;
    }
  }
  uint64_t result = (unsigned int *)AGGraphGetValue();
  unsigned int v13 = *result;
  int v14 = *(_DWORD *)(a4 + 112);
  uint64_t v117 = a4;
  if (v14 == v13 >> 1)
  {
    if (*(unsigned char *)(a1 + 81) != 1)
    {
      uint64_t v15 = *(void *)(a4 + 104);
      if (v15) {
        goto LABEL_45;
      }
      return result;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 81) = 1;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void **)(a1 + 16);
  uint64_t v18 = *(void **)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 48);
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v24 = *(void *)(a1 + 72);
  char v25 = *(unsigned char *)(a1 + 80);
  v147.i64[0] = *(void *)a1;
  v147.i64[1] = v16;
  long long v148 = v17;
  long long v149 = v18;
  uint64_t v150 = v19;
  uint64_t v151 = v20;
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  uint64_t v154 = v23;
  uint64_t v155 = v24;
  char v156 = v25;
  outlined copy of _ShapeStyle_Pack.Fill((id)v147.i64[0], v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v147, (uint64_t)&v141);
  int v26 = *(unsigned __int8 *)(a4 + 96);
  if (v26 != 255)
  {
    uint64_t v109 = a2;
    int64_t v27 = *(void **)(a4 + 16);
    uint64_t v28 = *(void *)(a4 + 24);
    uint64_t v29 = *(void *)(a4 + 32);
    uint64_t v30 = *(void *)(a4 + 40);
    uint64_t v32 = *(void *)(a4 + 48);
    uint64_t v31 = *(void *)(a4 + 56);
    uint64_t v34 = *(void *)(a4 + 64);
    uint64_t v33 = *(void *)(a4 + 72);
    uint64_t v35 = *(void *)(a4 + 80);
    uint64_t v36 = *(void *)(a4 + 88);
    v135.i64[0] = (uint64_t)v27;
    v135.i64[1] = v28;
    *(void *)&long long v136 = v29;
    *((void *)&v136 + 1) = v30;
    *(void *)&long long v137 = v32;
    *((void *)&v137 + 1) = v31;
    *(void *)&long long v138 = v34;
    *((void *)&v138 + 1) = v33;
    *(void *)&long long v139 = v35;
    *((void *)&v139 + 1) = v36;
    char v140 = v26;
    id v113 = v27;
    uint64_t v118 = v29;
    LODWORD(v112) = v26;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData?((uint64_t)v27, v28, v29, v30, v32, v31, v34, v33, v35, v36, v26);
    if (specialized static _ShapeStyle_Pack.Fill.AnimatableData.== infix(_:_:)((uint64_t)&v141, (uint64_t)&v135))
    {
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?((uint64_t)v113, v28, v118, v30, v32, v31, v34, v33, v35, v36, v112);
LABEL_13:
      a4 = v117;
      goto LABEL_44;
    }
    uint64_t v104 = v36;
    uint64_t v105 = v35;
    uint64_t v37 = v118;
    uint64_t v106 = v30;
    uint64_t v107 = v31;
    uint64_t v108 = v33;
    uint64_t v115 = a1;
    AGGraphClearUpdate();
    uint64_t v38 = *(void *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v39 = swift_retain();
    uint64_t v40 = specialized find<A>(_:key:)(v39);
    if (v40)
    {
      a1 = *(void *)(v40 + 72);
      swift_retain();
      swift_release();
      uint64_t v41 = (uint64_t)v113;
      if (a1) {
        goto LABEL_23;
      }
    }
    else
    {
      swift_release();
      uint64_t v41 = (uint64_t)v113;
    }
    uint64_t v42 = swift_retain();
    char v43 = specialized closure #1 in PropertyList.subscript.getter(v42);
    swift_release();
    if (v43)
    {
      if (one-time initialization token for velocityTracking != -1) {
        goto LABEL_70;
      }
      goto LABEL_20;
    }
    a1 = v109;
    if (!v109)
    {
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(v41, v28, v37, v106, v32, v107, v34, v108, v105, v104, v112);
      swift_release();
      a1 = v115;
      goto LABEL_13;
    }
    goto LABEL_22;
  }
  while (1)
  {
LABEL_44:
    uint64_t result = (unsigned int *)outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(*(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), *(void *)(a4 + 48), *(void *)(a4 + 56), *(void *)(a4 + 64), *(void *)(a4 + 72), *(void *)(a4 + 80), *(void *)(a4 + 88), *(unsigned char *)(a4 + 96));
    char v66 = v146;
    long long v67 = v142;
    *(int64x2_t *)(a4 + 16) = v141;
    *(_OWORD *)(a4 + 32) = v67;
    long long v68 = v144;
    *(_OWORD *)(a4 + 48) = v143;
    *(_OWORD *)(a4 + 64) = v68;
    *(_OWORD *)(a4 + 8specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = v145;
    *(unsigned char *)(a4 + 96) = v66;
    uint64_t v15 = *(void *)(a4 + 104);
    if (!v15) {
      return result;
    }
LABEL_45:
    uint64_t v69 = *(void **)a1;
    uint64_t v70 = *(void *)(a1 + 8);
    uint64_t v71 = *(void **)(a1 + 16);
    uint64_t v72 = *(void **)(a1 + 24);
    uint64_t v73 = *(void *)(a1 + 32);
    uint64_t v74 = *(void *)(a1 + 40);
    uint64_t v75 = *(void *)(a1 + 48);
    uint64_t v112 = *(void *)(a1 + 56);
    id v113 = v69;
    uint64_t v118 = v15;
    uint64_t v77 = *(void *)(a1 + 64);
    uint64_t v76 = *(void *)(a1 + 72);
    uint64_t v115 = a1;
    char v78 = *(unsigned char *)(a1 + 80);
    v135.i64[0] = (uint64_t)v69;
    v135.i64[1] = v70;
    *(void *)&long long v136 = v71;
    *((void *)&v136 + 1) = v72;
    *(void *)&long long v137 = v73;
    *((void *)&v137 + 1) = v74;
    *(void *)&long long v138 = v75;
    *((void *)&v138 + 1) = v112;
    *(void *)&long long v139 = v77;
    *((void *)&v139 + 1) = v76;
    char v140 = v78;
    swift_retain();
    uint64_t v102 = v77;
    uint64_t v79 = v118;
    outlined copy of _ShapeStyle_Pack.Fill(v113, v70, v71, v72, v73, v74, v75, v112, v102, v76, v78);
    _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v135, (uint64_t)&v141);
    v135.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v141, v116, v9) & 1) == 0) {
      break;
    }
    swift_retain();
    char v80 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_56;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v81 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_56:
      swift_release();
      goto LABEL_57;
    }
    swift_retain();
    id v82 = v81;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v83 = swift_allocObject();
    *(_OWORD *)(v83 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    uint64_t v38 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == v38)
    {
      __break(1u);
    }
    else
    {
      id v85 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v87 = MEMORY[0x263F8DA20];
      *(void *)(v83 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v83 + 64) = v87;
      *(void *)(v83 + 32) = Counter;
      int v88 = AGGraphGetCurrentAttribute();
      if (v88 != v38)
      {
        uint64_t v89 = MEMORY[0x263F8E960];
        *(void *)(v83 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v83 + 104) = v89;
        *(_DWORD *)(v83 + 72) = v88;
        *(void *)(v83 + 136) = MEMORY[0x263F8D310];
        *(void *)(v83 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v83 + 112) = 1819044166;
        *(void *)(v83 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE400000000000000;
        LOBYTE(v126) = v80;
        uint64_t v123 = &dword_245728000;
        uint64_t v120 = (const char *)_signpostLog;
        v135.i64[0] = (uint64_t)"AnimationState";
        v135.i64[1] = 14;
        LOBYTE(v136) = 2;
        v128.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ ended";
        v128.i64[1] = 37;
        LOBYTE(v129) = 2;
        v134 = (int *)v83;
        uint64_t v90 = v114;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v90, v111);
        swift_bridgeObjectRelease();
LABEL_57:
        uint64_t v96 = v117;
        if (*(void *)(v117 + 104))
        {
          specialized AnimatorState.removeListeners()();
          swift_release();
        }
        *(void *)(v96 + 104) = 0;
        goto LABEL_60;
      }
    }
    __break(1u);
LABEL_70:
    swift_once();
LABEL_20:
    a1 = static Animation.velocityTracking;
LABEL_22:
    swift_retain();
LABEL_23:
    a2 = v38;
    int64x2_t v128 = v141;
    long long v129 = v142;
    long long v130 = v143;
    long long v131 = v144;
    long long v132 = v145;
    char v133 = v146;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v141.i64[0], v141.i64[1], v142, *((uint64_t *)&v142 + 1), v143, *((uint64_t *)&v143 + 1), v144, *((uint64_t *)&v144 + 1), v145, *((uint64_t *)&v145 + 1), v146);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)((uint64_t)&v128, (uint64_t)&v135);
    a4 = v117;
    double v9 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 104))
    {
      outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v128, (uint64_t)&v147);
      swift_retain();
      LOBYTE(v123) = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(a1, (uint64_t)&v147, v9);
      swift_retain();
      char v44 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        int8x16_t v45 = (void *)_signpostLog;
        if (OS_os_log.signpostsEnabled.getter())
        {
          swift_retain();
          id v46 = v45;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v47 = swift_allocObject();
          *(_OWORD *)(v47 + 16) = xmmword_2461BE2B0;
          uint64_t result = (unsigned int *)AGGraphGetCurrentAttribute();
          int v48 = *MEMORY[0x263F288F8];
          if (result == *MEMORY[0x263F288F8])
          {
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
            return result;
          }
          id v49 = (id)AGGraphGetAttributeGraph();
          uint64_t v50 = AGGraphGetCounter();

          uint64_t v51 = MEMORY[0x263F8DA20];
          *(void *)(v47 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v47 + 64) = v51;
          *(void *)(v47 + 32) = v50;
          uint64_t result = (unsigned int *)AGGraphGetCurrentAttribute();
          if (result == v48) {
            goto LABEL_72;
          }
          uint64_t v52 = MEMORY[0x263F8E960];
          *(void *)(v47 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v47 + 104) = v52;
          *(_DWORD *)(v47 + 72) = result;
          *(void *)(v47 + 136) = MEMORY[0x263F8D310];
          *(void *)(v47 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v47 + 112) = 1819044166;
          *(void *)(v47 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE400000000000000;
          char v127 = v44;
          v134 = &dword_245728000;
          uint64_t v126 = _signpostLog;
          uint64_t v123 = (int *)"AnimationState";
          uint64_t v124 = 14;
          char v125 = 2;
          uint64_t v120 = "Animation: (%p) [%d] %{public}@ updated";
          uint64_t v121 = 39;
          char v122 = 2;
          uint64_t v119 = v47;
          uint64_t v53 = v114;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release_n();
          (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v53, v111);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release_n();
        }
        a4 = v117;
      }
      else
      {
        swift_release_n();
      }
      if (!*(void *)(a4 + 104))
      {
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
    }
    else
    {
      outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v128, (uint64_t)&v147);
      type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      outlined retain of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v147, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
      uint64_t v54 = swift_retain();
      uint64_t v55 = specialized AnimatorState.init(animation:interval:at:in:)(v54, (uint64_t)&v147, v9);
      swift_retain();
      char v56 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        if (one-time initialization token for _signpostLog != -1) {
          swift_once();
        }
        uint64_t v57 = (void *)_signpostLog;
        if (OS_os_log.signpostsEnabled.getter())
        {
          swift_retain();
          id v58 = v57;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v59 = swift_allocObject();
          *(_OWORD *)(v59 + 16) = xmmword_2461BE2B0;
          uint64_t result = (unsigned int *)AGGraphGetCurrentAttribute();
          int v60 = *MEMORY[0x263F288F8];
          if (result == *MEMORY[0x263F288F8]) {
            goto LABEL_73;
          }
          id v61 = (id)AGGraphGetAttributeGraph();
          uint64_t v62 = AGGraphGetCounter();

          uint64_t v63 = MEMORY[0x263F8DA20];
          *(void *)(v59 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v59 + 64) = v63;
          *(void *)(v59 + 32) = v62;
          uint64_t result = (unsigned int *)AGGraphGetCurrentAttribute();
          if (result == v60) {
            goto LABEL_74;
          }
          uint64_t v64 = MEMORY[0x263F8E960];
          *(void *)(v59 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v59 + 104) = v64;
          *(_DWORD *)(v59 + 72) = result;
          *(void *)(v59 + 136) = MEMORY[0x263F8D310];
          *(void *)(v59 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v59 + 112) = 1819044166;
          *(void *)(v59 + 12specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0) = 0xE400000000000000;
          char v127 = v56;
          v134 = &dword_245728000;
          uint64_t v126 = _signpostLog;
          uint64_t v123 = (int *)"AnimationState";
          uint64_t v124 = 14;
          char v125 = 2;
          uint64_t v120 = "Animation: (%p) [%d] %{public}@ started";
          uint64_t v121 = 39;
          char v122 = 2;
          uint64_t v119 = v59;
          uint64_t v65 = v114;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v65, v111);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
        a4 = v117;
      }
      else
      {
        swift_release();
      }
      swift_release();
      *(void *)(a4 + 104) = v55;
      if (!v55) {
        goto LABEL_66;
      }
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v128.i64[0], v128.i64[1], v129, *((uint64_t *)&v129 + 1), v130, *((uint64_t *)&v130 + 1), v131, *((uint64_t *)&v131 + 1), v132, *((uint64_t *)&v132 + 1), v133);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v135.i64[0], v135.i64[1], v136, *((uint64_t *)&v136 + 1), v137, *((uint64_t *)&v137 + 1), v138, *((uint64_t *)&v138 + 1), v139, *((uint64_t *)&v139 + 1), v140);
    a1 = v115;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v91 = *(double *)(v79 + 128);
  v135.i64[0] = *(void *)(v79 + 136);
  uint64_t v92 = *(unsigned int *)(v79 + 228);
  unsigned __int8 v93 = *(unsigned char *)(v79 + 232);
  char v94 = *(void (**)(int64x2_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                     + 0x58);
  float32x4_t v95 = static CoreGlue.shared;
  LOBYTE(v123) = v93;
  v94(&v135, v92 | ((unint64_t)v93 << 32), v91);

LABEL_60:
  uint64_t v116 = v141.i64[1];
  uint64_t v117 = v141.i64[0];
  id v113 = (id)*((void *)&v142 + 1);
  uint64_t v114 = v142;
  long long v97 = v143;
  long long v98 = v144;
  long long v99 = v145;
  char v100 = v146;
  int64x2_t v135 = v141;
  long long v136 = v142;
  long long v137 = v143;
  long long v138 = v144;
  long long v139 = v145;
  char v140 = v146;
  uint64_t v101 = v115;
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v115);
  swift_release();
  uint64_t result = (unsigned int *)outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v117, v116, v114, (uint64_t)v113, v97, *((uint64_t *)&v97 + 1), v98, *((uint64_t *)&v98 + 1), v99, *((uint64_t *)&v99 + 1), v100);
  *(unsigned char *)(v101 + 81) = 1;
  return result;
}